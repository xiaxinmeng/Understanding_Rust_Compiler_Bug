{"sha": "b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNmFhMGI1Mjk1OGUyM2E3MGIxYTVmMmE4YjU1YWQ0OWZiYmQzMzc=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-30T16:00:44Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:21Z"}, "message": "Factor out some `non_exhaustive`-related checks", "tree": {"sha": "90c5bf38be6d1f7d56f1046f2f9b802c2da83928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c5bf38be6d1f7d56f1046f2f9b802c2da83928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337", "html_url": "https://github.com/rust-lang/rust/commit/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "922310d60fcd2c84c2f2b10ca465538cb160d25d", "url": "https://api.github.com/repos/rust-lang/rust/commits/922310d60fcd2c84c2f2b10ca465538cb160d25d", "html_url": "https://github.com/rust-lang/rust/commit/922310d60fcd2c84c2f2b10ca465538cb160d25d"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "8a6d007090a2a0644902357680449a6d2c63d618", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337", "patch": "@@ -238,7 +238,7 @@ use super::{FieldPat, Pat, PatKind, PatRange};\n use rustc::hir::def_id::DefId;\n use rustc::hir::{HirId, RangeEnd};\n use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n-use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n \n use rustc::lint;\n use rustc::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};\n@@ -596,9 +596,21 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn is_local(&self, ty: Ty<'tcx>) -> bool {\n+    // Returns whether the given type is an enum from another crate declared `#[non_exhaustive]`.\n+    pub fn is_foreign_non_exhaustive_enum(&self, ty: Ty<'tcx>) -> bool {\n         match ty.kind {\n-            ty::Adt(adt_def, ..) => adt_def.did.is_local(),\n+            ty::Adt(def, ..) => {\n+                def.is_enum() && def.is_variant_list_non_exhaustive() && !def.did.is_local()\n+            }\n+            _ => false,\n+        }\n+    }\n+\n+    // Returns whether the given variant is from another crate and has its fields declared\n+    // `#[non_exhaustive]`.\n+    fn is_foreign_non_exhaustive_variant(&self, ty: Ty<'tcx>, variant: &VariantDef) -> bool {\n+        match ty.kind {\n+            ty::Adt(def, ..) => variant.is_field_list_non_exhaustive() && !def.did.is_local(),\n             _ => false,\n         }\n     }\n@@ -858,8 +870,7 @@ impl<'tcx> Constructor<'tcx> {\n                         vec![Pat::wildcard_from_ty(substs.type_at(0))]\n                     } else {\n                         let variant = &adt.variants[self.variant_index_for_adt(cx, adt)];\n-                        let is_non_exhaustive =\n-                            variant.is_field_list_non_exhaustive() && !cx.is_local(ty);\n+                        let is_non_exhaustive = cx.is_foreign_non_exhaustive_variant(ty, variant);\n                         variant\n                             .fields\n                             .iter()\n@@ -1264,8 +1275,7 @@ fn all_constructors<'a, 'tcx>(\n             // ```\n             // we don't want to show every possible IO error, but instead have only `_` as the\n             // witness.\n-            let is_declared_nonexhaustive =\n-                def.is_variant_list_non_exhaustive() && !cx.is_local(pcx.ty);\n+            let is_declared_nonexhaustive = cx.is_foreign_non_exhaustive_enum(pcx.ty);\n \n             // If `exhaustive_patterns` is disabled and our scrutinee is an empty enum, we treat it\n             // as though it had an \"unknown\" constructor to avoid exposing its emptyness. Note that\n@@ -2307,7 +2317,7 @@ fn specialize_one_pattern<'p, 'tcx>(\n \n         PatKind::Variant { adt_def, variant_index, ref subpatterns, .. } => {\n             let ref variant = adt_def.variants[variant_index];\n-            let is_non_exhaustive = variant.is_field_list_non_exhaustive() && !cx.is_local(pat.ty);\n+            let is_non_exhaustive = cx.is_foreign_non_exhaustive_variant(pat.ty, variant);\n             Some(Variant(variant.def_id))\n                 .filter(|variant_constructor| variant_constructor == constructor)\n                 .map(|_| {"}, {"sha": "9a959cf306432071be2ed44f18bd11df4a7ede0b", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=b26aa0b52958e23a70b1a5f2a8b55ad49fbbd337", "patch": "@@ -173,7 +173,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             let mut def_span = None;\n             let mut missing_variants = vec![];\n             if inlined_arms.is_empty() {\n-                let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n+                let scrutinee_is_visibly_uninhabited = if self.tcx.features().exhaustive_patterns {\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n                     match pat_ty.kind {\n@@ -186,15 +186,12 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n                                     def.variants.iter().map(|variant| variant.ident).collect();\n                             }\n \n-                            let is_non_exhaustive_and_non_local =\n-                                def.is_variant_list_non_exhaustive() && !def.did.is_local();\n-\n-                            !(is_non_exhaustive_and_non_local) && def.variants.is_empty()\n+                            def.variants.is_empty() && !cx.is_foreign_non_exhaustive_enum(pat_ty)\n                         }\n                         _ => false,\n                     }\n                 };\n-                if !scrutinee_is_uninhabited {\n+                if !scrutinee_is_visibly_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n                     let mut err = create_e0004(\n                         self.tcx.sess,"}]}