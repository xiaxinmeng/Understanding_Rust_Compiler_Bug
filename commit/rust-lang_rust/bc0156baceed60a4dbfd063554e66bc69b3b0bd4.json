{"sha": "bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMDE1NmJhY2VlZDYwYTRkYmZkMDYzNTU0ZTY2YmM2OWIzYjBiZDQ=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-02T06:47:15Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "shrink `ty::PredicateKind` again", "tree": {"sha": "0c075dbd7fe5e608b61f71997902d5c919d36704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c075dbd7fe5e608b61f71997902d5c919d36704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "html_url": "https://github.com/rust-lang/rust/commit/bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283e0e670b7b6f925d5973f2b2b373304b17b114", "url": "https://api.github.com/repos/rust-lang/rust/commits/283e0e670b7b6f925d5973f2b2b373304b17b114", "html_url": "https://github.com/rust-lang/rust/commit/283e0e670b7b6f925d5973f2b2b373304b17b114"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "bc98a3aa3f95e563d1982137b0ac0e7b4e65d71a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -675,8 +675,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// canonicalizing the consts.\n     pub fn try_unify_abstract_consts(\n         &self,\n-        a: ty::Unevaluated<'tcx>,\n-        b: ty::Unevaluated<'tcx>,\n+        a: ty::Unevaluated<'tcx, ()>,\n+        b: ty::Unevaluated<'tcx, ()>,\n     ) -> bool {\n         let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());\n         debug!(\"canonical consts: {:?}\", &canonical.value);"}, {"sha": "f8e0d910a546372a784383b6904853944b5b35f5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -303,7 +303,7 @@ rustc_queries! {\n     }\n \n     query try_unify_abstract_consts(key: (\n-        ty::Unevaluated<'tcx>, ty::Unevaluated<'tcx>\n+        ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>\n     )) -> bool {\n         desc {\n             |tcx| \"trying to unify the generic constants {} and {}\","}, {"sha": "e6a6b7f8556404d2ec3d2525d73125e88f47122a", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -1,4 +1,5 @@\n use std::convert::TryInto;\n+use std::fmt;\n \n use crate::mir::interpret::{AllocId, ConstValue, Scalar};\n use crate::mir::Promoted;\n@@ -20,20 +21,38 @@ use super::ScalarInt;\n /// so refer to that check for more info.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n #[derive(Hash, HashStable)]\n-pub struct Unevaluated<'tcx> {\n+pub struct Unevaluated<'tcx, P = Option<Promoted>> {\n     pub def: ty::WithOptConstParam<DefId>,\n     pub substs_: Option<SubstsRef<'tcx>>,\n-    pub promoted: Option<Promoted>,\n+    pub promoted: P,\n }\n \n impl<'tcx> Unevaluated<'tcx> {\n-    pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx> {\n-        Unevaluated { def, substs_: Some(substs), promoted: None }\n+    pub fn shrink(self) -> Unevaluated<'tcx, ()> {\n+        debug_assert_eq!(self.promoted, None);\n+        Unevaluated { def: self.def, substs_: self.substs_, promoted: () }\n     }\n+}\n+\n+impl<'tcx> Unevaluated<'tcx, ()> {\n+    pub fn expand(self) -> Unevaluated<'tcx> {\n+        Unevaluated { def: self.def, substs_: self.substs_, promoted: None }\n+    }\n+}\n+\n+impl<'tcx, P: Default> Unevaluated<'tcx, P> {\n+    pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx, P> {\n+        Unevaluated { def, substs_: Some(substs), promoted: Default::default() }\n+    }\n+}\n \n+impl<'tcx, P: Default + PartialEq + fmt::Debug> Unevaluated<'tcx, P> {\n     pub fn substs(self, tcx: TyCtxt<'tcx>) -> SubstsRef<'tcx> {\n         self.substs_.unwrap_or_else(|| {\n-            debug_assert_eq!(self.promoted, None);\n+            // We must not use the parents default substs for promoted constants\n+            // as that can result in incorrect substs and calls the `default_anon_const_substs`\n+            // for something that might not actually be a constant.\n+            debug_assert_eq!(self.promoted, Default::default());\n             tcx.default_anon_const_substs(self.def.did)\n         })\n     }"}, {"sha": "763da7e82c86be513c4546d954670205553a67aa", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -310,7 +310,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_unevaluated_const(&mut self, ct: ty::Unevaluated<'tcx>) {\n+    fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'tcx, P>) {\n         if let Some(substs) = ct.substs_ {\n             self.add_substs(substs);\n         } else {"}, {"sha": "8f814a84b4959ff0102c87968099eddede56b344", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -406,7 +406,7 @@ crate struct PredicateInner<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(PredicateInner<'_>, 56);\n+static_assert_size!(PredicateInner<'_>, 48);\n \n #[derive(Clone, Copy, Lift)]\n pub struct Predicate<'tcx> {\n@@ -502,7 +502,7 @@ pub enum PredicateKind<'tcx> {\n     Coerce(CoercePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::Unevaluated<'tcx>),\n+    ConstEvaluatable(ty::Unevaluated<'tcx, ()>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),"}, {"sha": "4a2c8349fdc684270918203c738c5fb130b1e335", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -579,7 +579,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if tcx.features().const_evaluatable_checked =>\n         {\n-            tcx.try_unify_abstract_consts((au, bu))\n+            tcx.try_unify_abstract_consts((au.shrink(), bu.shrink()))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`"}, {"sha": "2ab25c839704ddbb56e1b2ddd5322251536a0ff0", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -1105,3 +1105,28 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        ty::Unevaluated {\n+            def: self.def,\n+            substs_: Some(self.substs(folder.tcx()).fold_with(folder)),\n+            promoted: self.promoted,\n+        }\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_unevaluated_const(self.expand())\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        if let Some(tcx) = visitor.tcx_for_anon_const_substs() {\n+            self.substs(tcx).visit_with(visitor)\n+        } else if let Some(substs) = self.substs_ {\n+            substs.visit_with(visitor)\n+        } else {\n+            debug!(\"ignoring default substs of `{:?}`\", self.def);\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+}"}, {"sha": "d85f1c04524dda91e9e06a266e04034fe1d3bf36", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -217,7 +217,7 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (ty::Unevaluated<'tcx>, ty::Unevaluated<'tcx>) {\n+impl<'tcx> Key for (ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>) {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         (self.0).def.did.krate == LOCAL_CRATE"}, {"sha": "d75408ed8201645bc0981543f7b5d1dc60251388", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -29,7 +29,7 @@ use std::ops::ControlFlow;\n /// Check if a given constant can be evaluated.\n pub fn is_const_evaluatable<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    uv: ty::Unevaluated<'tcx>,\n+    uv: ty::Unevaluated<'tcx, ()>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {\n@@ -149,7 +149,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // and hopefully soon change this to an error.\n     //\n     // See #74595 for more details about this.\n-    let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n+    let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n \n     if concrete.is_ok() && uv.substs(infcx.tcx).has_param_types_or_consts(infcx.tcx) {\n         match infcx.tcx.def_kind(uv.def.did) {\n@@ -194,7 +194,7 @@ pub struct AbstractConst<'tcx> {\n impl<'tcx> AbstractConst<'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        uv: ty::Unevaluated<'tcx>,\n+        uv: ty::Unevaluated<'tcx, ()>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         let inner = tcx.mir_abstract_const_opt_const_arg(uv.def)?;\n         debug!(\"AbstractConst::new({:?}) = {:?}\", uv, inner);\n@@ -206,7 +206,7 @@ impl<'tcx> AbstractConst<'tcx> {\n         ct: &ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n         match ct.val {\n-            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv),\n+            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n             ty::ConstKind::Error(_) => Err(ErrorReported),\n             _ => Ok(None),\n         }\n@@ -556,7 +556,7 @@ pub(super) fn mir_abstract_const<'tcx>(\n \n pub(super) fn try_unify_abstract_consts<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    (a, b): (ty::Unevaluated<'tcx>, ty::Unevaluated<'tcx>),\n+    (a, b): (ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>),\n ) -> bool {\n     (|| {\n         if let Some(a) = AbstractConst::new(tcx, a)? {"}, {"sha": "f214930c57fe4bdd04219f70460f40859aff9807", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -580,7 +580,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            if infcx.try_unify_abstract_consts(a, b) {\n+                            if infcx.try_unify_abstract_consts(a.shrink(), b.shrink()) {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n                         }"}, {"sha": "756646c2d88fee886e19098ebf1ddbb8ceb53ad9", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -623,7 +623,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            if self.infcx.try_unify_abstract_consts(a, b) {\n+                            if self.infcx.try_unify_abstract_consts(a.shrink(), b.shrink()) {\n                                 return Ok(EvaluatedToOk);\n                             }\n                         }"}, {"sha": "75f9405e082ca3c5a6a3b7de96a786743025d9b4", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0156baceed60a4dbfd063554e66bc69b3b0bd4/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "patch": "@@ -2355,8 +2355,10 @@ fn const_evaluatable_predicates_of<'tcx>(\n             if let ty::ConstKind::Unevaluated(uv) = ct.val {\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n-                self.preds\n-                    .insert((ty::PredicateKind::ConstEvaluatable(uv).to_predicate(self.tcx), span));\n+                self.preds.insert((\n+                    ty::PredicateKind::ConstEvaluatable(uv.shrink()).to_predicate(self.tcx),\n+                    span,\n+                ));\n             }\n         }\n "}]}