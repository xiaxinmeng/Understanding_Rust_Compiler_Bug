{"sha": "b676fc4d8ee5a94cc4270d54005899c599b4d818", "node_id": "C_kwDOAAsO6NoAKGI2NzZmYzRkOGVlNWE5NGNjNDI3MGQ1NDAwNTg5OWM1OTliNGQ4MTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-24T16:37:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-12T10:00:18Z"}, "message": "Bless ui tests.", "tree": {"sha": "d2c5affc0c04df434840f1287fa384725a46af57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c5affc0c04df434840f1287fa384725a46af57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b676fc4d8ee5a94cc4270d54005899c599b4d818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b676fc4d8ee5a94cc4270d54005899c599b4d818", "html_url": "https://github.com/rust-lang/rust/commit/b676fc4d8ee5a94cc4270d54005899c599b4d818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b676fc4d8ee5a94cc4270d54005899c599b4d818/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc261e9a0902cc7aa41fd434b23fa0c18ed9d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc261e9a0902cc7aa41fd434b23fa0c18ed9d7f", "html_url": "https://github.com/rust-lang/rust/commit/5fc261e9a0902cc7aa41fd434b23fa0c18ed9d7f"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "d7bf34a4795a3c164edff068f488c281f5ccf24f", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=b676fc4d8ee5a94cc4270d54005899c599b4d818", "patch": "@@ -19,6 +19,7 @@ async fn foo() {\n     let x = {\n         let bar = 22;\n         Foo::new(&bar).await\n+        //~^ ERROR `bar` does not live long enough\n     };\n     drop(x);\n }"}, {"sha": "5a7691159898b43b7ce3afefb65634fea3c6b49d", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=b676fc4d8ee5a94cc4270d54005899c599b4d818", "patch": "@@ -4,6 +4,19 @@ error[E0760]: `async fn` return type cannot contain a projection or `Self` that\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n    |                                        ^^^^ help: consider spelling out the type instead: `Foo<'a>`\n \n-error: aborting due to previous error\n+error[E0597]: `bar` does not live long enough\n+  --> $DIR/issue-61949-self-return-type.rs:21:18\n+   |\n+LL |     let x = {\n+   |         - borrow later stored here\n+LL |         let bar = 22;\n+LL |         Foo::new(&bar).await\n+   |                  ^^^^ borrowed value does not live long enough\n+LL |\n+LL |     };\n+   |     - `bar` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0760`.\n+Some errors have detailed explanations: E0597, E0760.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "2bccfd6cf11fefb6ea8db3d61ece8d6acaaca40e", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=b676fc4d8ee5a94cc4270d54005899c599b4d818", "patch": "@@ -25,11 +25,11 @@ error[E0760]: `impl Trait` return type cannot contain a projection or `Self` tha\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'a>>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:41:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'a>>::Assoc`\n ...\n LL |         Foo(())\n    |         ------- return type was inferred to be `Foo<()>` here\n@@ -40,8 +40,8 @@ note: expected this to be `()`\n LL |     type Output = T;\n    |                   ^\n    = note:    expected unit type `()`\n-           found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n-help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n+           found associated type `<T as lifetimes::Trait<'a>>::Assoc`\n+help: consider constraining the associated type `<T as lifetimes::Trait<'a>>::Assoc` to `()`\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                                 ++++++++++++"}, {"sha": "7b9ed171d2dbf88b0f2fbbcc931117731bb19436", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=b676fc4d8ee5a94cc4270d54005899c599b4d818", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReStatic, T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {"}, {"sha": "01d1f5db13265617269ef3374badd230b905295f", "filename": "src/test/ui/type-alias-impl-trait/missing_lifetime_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.rs?ref=b676fc4d8ee5a94cc4270d54005899c599b4d818", "patch": "@@ -2,6 +2,6 @@\n \n type Opaque<'a, T> = impl Sized;\n fn defining<'a, T>(x: &'a i32) -> Opaque<T> { x }\n-//~^ ERROR: non-defining opaque type use in defining scope\n+//~^ ERROR: hidden type for `Opaque<'a, T>` captures lifetime that does not appear in bounds\n \n fn main() {}"}, {"sha": "65a0af0d22fe8481cd610829ad02c2311a0a1507", "filename": "src/test/ui/type-alias-impl-trait/missing_lifetime_bound.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b676fc4d8ee5a94cc4270d54005899c599b4d818/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr?ref=b676fc4d8ee5a94cc4270d54005899c599b4d818", "patch": "@@ -1,8 +1,11 @@\n-error: non-defining opaque type use in defining scope\n+error[E0700]: hidden type for `Opaque<'a, T>` captures lifetime that does not appear in bounds\n   --> $DIR/missing_lifetime_bound.rs:4:47\n    |\n LL | fn defining<'a, T>(x: &'a i32) -> Opaque<T> { x }\n-   |                                               ^ lifetime `'a` is part of concrete type but not used in parameter list of the `impl Trait` type alias\n+   |             --                                ^\n+   |             |\n+   |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0700`."}]}