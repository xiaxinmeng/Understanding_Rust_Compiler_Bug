{"sha": "1cdd68922d143c6d1f18f66572251b7078e9e850", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZGQ2ODkyMmQxNDNjNmQxZjE4ZjY2NTcyMjUxYjcwNzhlOWU4NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-17T11:19:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-17T11:19:56Z"}, "message": "Auto merge of #44654 - TimNN:rollup, r=TimNN\n\nRollup of 17 pull requests\n\n- Successful merges: #44073, #44088, #44381, #44397, #44509, #44533, #44549, #44553, #44562, #44567, #44595, #44604, #44617, #44622, #44630, #44639, #44647\n- Failed merges:", "tree": {"sha": "d133a8529fcb6321c18588973846062964f6c101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d133a8529fcb6321c18588973846062964f6c101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cdd68922d143c6d1f18f66572251b7078e9e850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdd68922d143c6d1f18f66572251b7078e9e850", "html_url": "https://github.com/rust-lang/rust/commit/1cdd68922d143c6d1f18f66572251b7078e9e850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cdd68922d143c6d1f18f66572251b7078e9e850/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef227f5ffe438783db0add58208d79dd84158c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef227f5ffe438783db0add58208d79dd84158c06", "html_url": "https://github.com/rust-lang/rust/commit/ef227f5ffe438783db0add58208d79dd84158c06"}, {"sha": "7aefb6c3ef3cb964060c7dc104ab56dd83e5c9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aefb6c3ef3cb964060c7dc104ab56dd83e5c9aa", "html_url": "https://github.com/rust-lang/rust/commit/7aefb6c3ef3cb964060c7dc104ab56dd83e5c9aa"}], "stats": {"total": 1167, "additions": 880, "deletions": 287}, "files": [{"sha": "d5ae25646547f8be4ec143c30e2ba3ba305c043d", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -36,3 +36,6 @@\n [submodule \"src/tools/clippy\"]\n \tpath = src/tools/clippy\n \turl = https://github.com/rust-lang-nursery/rust-clippy.git\n+[submodule \"src/tools/rustfmt\"]\n+\tpath = src/tools/rustfmt\n+\turl = https://github.com/rust-lang-nursery/rustfmt.git"}, {"sha": "9e3225a103ab95c2def4efedcf27eabbbd036c06", "filename": ".travis.yml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -193,7 +193,7 @@ before_install:\n install:\n   - case \"$TRAVIS_OS_NAME\" in\n         linux)\n-          travis_retry curl -fo $HOME/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n+          travis_retry curl -fo $HOME/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n             chmod +x $HOME/stamp &&\n             export PATH=$PATH:$HOME\n           ;;\n@@ -202,9 +202,9 @@ install:\n             travis_retry brew update &&\n             travis_retry brew install xz;\n           fi &&\n-          travis_retry curl -fo /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-apple-darwin &&\n+          travis_retry curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-12-sccache-x86_64-apple-darwin &&\n             chmod +x /usr/local/bin/sccache &&\n-          travis_retry curl -fo /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n+          travis_retry curl -fo /usr/local/bin/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n             chmod +x /usr/local/bin/stamp\n           ;;\n     esac\n@@ -287,12 +287,12 @@ before_deploy:\n \n deploy:\n   - provider: s3\n-    bucket: rust-lang-ci\n+    bucket: rust-lang-ci2\n     skip_cleanup: true\n     local_dir: deploy\n     upload_dir: rustc-builds\n     acl: public_read\n-    region: us-east-1\n+    region: us-west-1\n     access_key_id: AKIAJVBODR3IA4O72THQ\n     secret_access_key:\n       secure: \"kUGd3t7JcVWFESgIlzvsM8viZgCA9Encs3creW0xLJaLSeI1iVjlJK4h/2/nO6y224AFrh/GUfsNr4/4AlxPuYb8OU5oC5Lv+Ff2JiRDYtuNpyQSKAQp+bRYytWMtrmhja91h118Mbm90cUfcLPwkdiINgJNTXhPKg5Cqu3VYn0=\"\n@@ -301,12 +301,12 @@ deploy:\n       condition: $DEPLOY = 1\n \n   - provider: s3\n-    bucket: rust-lang-ci\n+    bucket: rust-lang-ci2\n     skip_cleanup: true\n     local_dir: deploy\n     upload_dir: rustc-builds-try\n     acl: public_read\n-    region: us-east-1\n+    region: us-west-1\n     access_key_id: AKIAJVBODR3IA4O72THQ\n     secret_access_key:\n       secure: \"kUGd3t7JcVWFESgIlzvsM8viZgCA9Encs3creW0xLJaLSeI1iVjlJK4h/2/nO6y224AFrh/GUfsNr4/4AlxPuYb8OU5oC5Lv+Ff2JiRDYtuNpyQSKAQp+bRYytWMtrmhja91h118Mbm90cUfcLPwkdiINgJNTXhPKg5Cqu3VYn0=\"\n@@ -317,12 +317,12 @@ deploy:\n   # this is the same as the above deployment provider except that it uploads to\n   # a slightly different directory and has a different trigger\n   - provider: s3\n-    bucket: rust-lang-ci\n+    bucket: rust-lang-ci2\n     skip_cleanup: true\n     local_dir: deploy\n     upload_dir: rustc-builds-alt\n     acl: public_read\n-    region: us-east-1\n+    region: us-west-1\n     access_key_id: AKIAJVBODR3IA4O72THQ\n     secret_access_key:\n       secure: \"kUGd3t7JcVWFESgIlzvsM8viZgCA9Encs3creW0xLJaLSeI1iVjlJK4h/2/nO6y224AFrh/GUfsNr4/4AlxPuYb8OU5oC5Lv+Ff2JiRDYtuNpyQSKAQp+bRYytWMtrmhja91h118Mbm90cUfcLPwkdiINgJNTXhPKg5Cqu3VYn0=\""}, {"sha": "599d1b40ceb1e60f58e3072dda503e56b4de07fc", "filename": "appveyor.yml", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -41,13 +41,13 @@ environment:\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n     SCRIPT: python x.py test\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n \n@@ -68,14 +68,14 @@ environment:\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended\n     SCRIPT: python x.py dist\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n     DEPLOY: 1\n@@ -133,25 +133,25 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-pc-windows-msvc\n+  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-12-sccache-x86_64-pc-windows-msvc\n   - mv 2017-05-12-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n   # Download and install ninja\n   #\n   # Note that this is originally from the github releases patch of Ninja\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-15-ninja-win.zip\n+  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip\n   - 7z x 2017-03-15-ninja-win.zip\n   - set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n   # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n \n   # Install InnoSetup to get `iscc` used to produce installers\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-08-22-is.exe\n+  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-08-22-is.exe\n   - 2017-08-22-is.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n   - set PATH=\"C:\\Program Files (x86)\\Inno Setup 5\";%PATH%\n \n   # Help debug some handle issues on AppVeyor\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-15-Handle.zip\n+  - appveyor-retry appveyor DownloadFile https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-15-Handle.zip\n   - mkdir handle\n   - 7z x -ohandle 2017-05-15-Handle.zip\n   - set PATH=%PATH%;%CD%\\handle\n@@ -189,9 +189,9 @@ deploy:\n     access_key_id: AKIAJVBODR3IA4O72THQ\n     secret_access_key:\n       secure: tQWIE+DJHjXaV4np/3YeETkEmXngtIuIgAO/LYKQaUshGLgN8cBCFGG3cHx5lKLt\n-    bucket: rust-lang-ci\n+    bucket: rust-lang-ci2\n     set_public: true\n-    region: us-east-1\n+    region: us-west-1\n     artifact: /.*/\n     folder: rustc-builds\n     on:\n@@ -206,9 +206,9 @@ deploy:\n     access_key_id: AKIAJVBODR3IA4O72THQ\n     secret_access_key:\n       secure: tQWIE+DJHjXaV4np/3YeETkEmXngtIuIgAO/LYKQaUshGLgN8cBCFGG3cHx5lKLt\n-    bucket: rust-lang-ci\n+    bucket: rust-lang-ci2\n     set_public: true\n-    region: us-east-1\n+    region: us-west-1\n     artifact: /.*/\n     folder: rustc-builds-alt\n     on:"}, {"sha": "186eda95fecbde4424d34a3325fbb723ed94cbd5", "filename": "fn.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef227f5ffe438783db0add58208d79dd84158c06/fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef227f5ffe438783db0add58208d79dd84158c06/fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/fn.rs?ref=ef227f5ffe438783db0add58208d79dd84158c06", "patch": "@@ -1,8 +0,0 @@\n-\n-fn foo(x:  fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-// Debruijn   1    1            1        1\n-// Anon-Index 0    1            0        1\n-//            ------\n-//            debruijn indices are shifted by 1 in here\n-  y.push(z); // index will be zero or one\n-}"}, {"sha": "44faf4b445de16ff71ee242b391172d454b0ee84", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1351,7 +1351,7 @@ dependencies = [\n  \"rls-rustc 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt-nightly 0.2.5\",\n  \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1822,7 +1822,6 @@ dependencies = [\n [[package]]\n name = \"rustfmt-nightly\"\n version = \"0.2.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2562,7 +2561,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd34691a510938bb67fe0444fb363103c73ffb31c121d1e16bc92d8945ea8ff\"\n \"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n-\"checksum rustfmt-nightly 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d6dbb39239e54df780a850721fba87b3fdb2e645b39041742ec111369cec6af\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n \"checksum scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59a076157c1e2dc561d8de585151ee6965d910dd4dcb5dabb7ae3e83981a6c57\""}, {"sha": "8142213b20421b7dfba670268ead87ea88638ef9", "filename": "src/Cargo.toml", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -18,6 +18,7 @@ members = [\n   \"tools/cargo\",\n   \"tools/rustdoc\",\n   \"tools/rls\",\n+  \"tools/rustfmt\",\n   # FIXME(https://github.com/rust-lang/cargo/issues/4089): move these to exclude\n   \"tools/rls/test_data/borrow_error\",\n   \"tools/rls/test_data/completion\",\n@@ -56,5 +57,13 @@ debug-assertions = false\n debug = false\n debug-assertions = false\n \n-[patch.'https://github.com/rust-lang/cargo']\n+[patch.\"https://github.com/rust-lang/cargo\"]\n cargo = { path = \"tools/cargo\" }\n+\n+# Override rustfmt dependencies both on the repo and the crate (the RLS\n+# sometimes uses either).\n+# FIXME should only need the crates.io patch, long term.\n+[patch.'https://github.com/rust-lang-nursery/rustfmt']\n+rustfmt-nightly = { path = \"tools/rustfmt\" }\n+[patch.crates-io]\n+rustfmt-nightly = { path = \"tools/rustfmt\" }"}, {"sha": "7ff0154bf8bb30532bfbedc8710421e4b87b1134", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -249,11 +249,11 @@ impl<'a> Builder<'a> {\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n-                native::Llvm),\n+                native::Llvm, tool::Rustfmt),\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Rustdoc,\n                 check::Linkcheck, check::Cargotest, check::Cargo, check::Rls, check::Docs,\n-                check::ErrorIndex, check::Distcheck),\n+                check::ErrorIndex, check::Distcheck, check::Rustfmt),\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,"}, {"sha": "94bb89145fbf3d1068342316b85b583d26c3e957", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -253,6 +253,47 @@ impl Step for Rls {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Rustfmt {\n+    stage: u32,\n+    host: Interned<String>,\n+}\n+\n+impl Step for Rustfmt {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rustfmt\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustfmt {\n+            stage: run.builder.top_stage,\n+            host: run.target,\n+        });\n+    }\n+\n+    /// Runs `cargo test` for rustfmt.\n+    fn run(self, builder: &Builder) {\n+        let build = builder.build;\n+        let stage = self.stage;\n+        let host = self.host;\n+        let compiler = builder.compiler(stage, host);\n+\n+        builder.ensure(tool::Rustfmt { compiler, target: self.host });\n+        let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+        cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/rustfmt/Cargo.toml\"));\n+\n+        // Don't build tests dynamically, just a pain to work with\n+        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n+\n+        try_run(build, &mut cargo);\n+    }\n+}\n+\n fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     // Configure PATH to find the right rustc. NB. we have to use PATH\n     // and not RUSTC because the Cargo test suite has tests that will"}, {"sha": "72be9c12e84e6b0952db05e09b487c76427f405e", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -55,6 +55,7 @@ check-aux:\n \t\tsrc/tools/cargotest \\\n \t\tsrc/tools/cargo \\\n \t\tsrc/tools/rls \\\n+\t\tsrc/tools/rustfmt \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "99077d03dbe030e0b676e6e43d10ca2f79ca8bc7", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -350,7 +350,7 @@ impl Step for Openssl {\n         if !tarball.exists() {\n             let tmp = tarball.with_extension(\"tmp\");\n             // originally from https://www.openssl.org/source/...\n-            let url = format!(\"https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/{}\",\n+            let url = format!(\"https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/{}\",\n                               name);\n             let mut ok = false;\n             for _ in 0..3 {"}, {"sha": "d082012acc191beef353cde52f16de6d0db2bb01", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -445,6 +445,40 @@ impl Step for Rls {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Rustfmt {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Rustfmt {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let builder = run.builder;\n+        run.path(\"src/tools/rustfmt\").default_condition(builder.build.config.extended)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustfmt {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        builder.ensure(ToolBuild {\n+            compiler: self.compiler,\n+            target: self.target,\n+            tool: \"rustfmt\",\n+            mode: Mode::Librustc,\n+            path: \"src/tools/rustfmt\",\n+        })\n+    }\n+}\n+\n impl<'a> Builder<'a> {\n     /// Get a `Command` which is ready to run `tool` in `stage` built for\n     /// `host`."}, {"sha": "eeb4aacbbb74cd7fc3c92f99007cf4bf844838ce", "filename": "src/ci/docker/cross/install-mips-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fcross%2Finstall-mips-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fcross%2Finstall-mips-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2Finstall-mips-musl.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -15,7 +15,7 @@ mkdir /usr/local/mips-linux-musl\n # originally from\n # https://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/\n # OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\n-URL=\"https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\"\n+URL=\"https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\"\n FILE=\"OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mips-linux-musl --strip-components=2\n "}, {"sha": "74b6a10e77a672dc153c73e292bd6f4e76b0903e", "filename": "src/ci/docker/cross/install-mipsel-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fcross%2Finstall-mipsel-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fcross%2Finstall-mipsel-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2Finstall-mipsel-musl.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -15,7 +15,7 @@ mkdir /usr/local/mipsel-linux-musl\n # Note that this originally came from:\n # https://downloads.openwrt.org/snapshots/trunk/malta/generic/\n # OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\n-URL=\"https://s3.amazonaws.com/rust-lang-ci/libc\"\n+URL=\"https://s3-us-west-1.amazonaws.com/rust-lang-ci2/libc\"\n FILE=\"OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mipsel-linux-musl --strip-components=2\n "}, {"sha": "621976b5cbe3dd8db0d4ca0bb14974fcbaf60f72", "filename": "src/ci/docker/disabled/dist-x86_64-haiku/Dockerfile", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,49 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  autoconf \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  git \\\n+  libcurl4-openssl-dev \\\n+  libssl-dev \\\n+  make \\\n+  nasm \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  zlib1g-dev\n+\n+COPY dist-x86_64-haiku/llvm-config.sh /bin/llvm-config-haiku\n+\n+ENV ARCH=x86_64\n+\n+WORKDIR /tmp\n+COPY dist-x86_64-haiku/build-toolchain.sh /tmp/\n+RUN /tmp/build-toolchain.sh $ARCH\n+\n+COPY dist-x86_64-haiku/fetch-packages.sh /tmp/\n+RUN /tmp/fetch-packages.sh\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV HOST=x86_64-unknown-haiku\n+ENV TARGET=target.$HOST\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOST --target=$HOST --disable-jemalloc \\\n+  --set=$TARGET.cc=x86_64-unknown-haiku-gcc \\\n+  --set=$TARGET.cxx=x86_64-unknown-haiku-g++ \\\n+  --set=$TARGET.llvm-config=/bin/llvm-config-haiku\n+ENV SCRIPT python2.7 ../x.py dist"}, {"sha": "0776d448984eed7bb3b3e6a7da18b97976be0de8", "filename": "src/ci/docker/disabled/dist-x86_64-haiku/build-toolchain.sh", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Fbuild-toolchain.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,74 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+ARCH=$1\n+\n+TOP=$(pwd)\n+\n+BUILDTOOLS=$TOP/buildtools\n+HAIKU=$TOP/haiku\n+OUTPUT=/tools\n+SYSROOT=$OUTPUT/cross-tools-$ARCH/sysroot\n+PACKAGE_ROOT=/system\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+# First up, build a cross-compiler\n+git clone --depth=1 https://git.haiku-os.org/haiku\n+git clone --depth=1 https://git.haiku-os.org/buildtools\n+cd $BUILDTOOLS/jam\n+hide_output make\n+hide_output ./jam0 install\n+mkdir -p $OUTPUT\n+cd $OUTPUT\n+hide_output $HAIKU/configure --build-cross-tools $ARCH $TOP/buildtools\n+\n+# Set up sysroot to redirect to /system\n+mkdir -p $SYSROOT/boot\n+mkdir -p $PACKAGE_ROOT\n+ln -s $PACKAGE_ROOT $SYSROOT/boot/system\n+\n+# Build needed packages and tools for the cross-compiler\n+hide_output jam -q haiku.hpkg haiku_devel.hpkg '<build>package'\n+\n+# Set up our sysroot\n+cp $OUTPUT/objects/linux/lib/*.so /lib/x86_64-linux-gnu\n+cp $OUTPUT/objects/linux/x86_64/release/tools/package/package /bin/\n+find $SYSROOT/../bin/ -type f -exec ln -s {} /bin/ \\;\n+\n+# Extract packages\n+package extract -C $PACKAGE_ROOT $OUTPUT/objects/haiku/$ARCH/packaging/packages/haiku.hpkg\n+package extract -C $PACKAGE_ROOT $OUTPUT/objects/haiku/$ARCH/packaging/packages/haiku_devel.hpkg\n+find $OUTPUT/download/ -name '*.hpkg' -exec package extract -C $PACKAGE_ROOT {} \\;\n+\n+# Fix libgcc_s so we can link to it\n+cd $PACKAGE_ROOT/develop/lib\n+ln -s ../../lib/libgcc_s.so libgcc_s.so\n+\n+# Clean up\n+rm -rf $BUILDTOOLS $HAIKU $OUTPUT/Jamfile $OUTPUT/attributes $OUTPUT/build \\\n+  $OUTPUT/build_packages $OUTPUT/download $OUTPUT/objects"}, {"sha": "0f6034cdb8620949f3b9244f2bfda6a5eb35b352", "filename": "src/ci/docker/disabled/dist-x86_64-haiku/fetch-packages.sh", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Ffetch-packages.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Ffetch-packages.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Ffetch-packages.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,18 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+wget http://packages.haiku-os.org/haikuports/master/hpkg/llvm-4.0.1-2-x86_64.hpkg\n+wget http://packages.haiku-os.org/haikuports/master/hpkg/llvm_libs-4.0.1-2-x86_64.hpkg\n+\n+package extract -C /system llvm-4.0.1-2-x86_64.hpkg\n+package extract -C /system llvm_libs-4.0.1-2-x86_64.hpkg\n+\n+rm -f *.hpkg"}, {"sha": "fb5206bed225882b271994cb7c38b0616c4190ac", "filename": "src/ci/docker/disabled/dist-x86_64-haiku/llvm-config.sh", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Fllvm-config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Fllvm-config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2Fllvm-config.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,67 @@\n+#!/bin/sh\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+case $1 in\n+--version) echo  4.0.1;;\n+--prefix) echo  $SCRATCH/haiku-cross/sysroot/boot/system;;\n+--bindir) echo  $SCRATCH/haiku-cross/sysroot/boot/system/bin;;\n+--includedir) echo  $SCRATCH/haiku-cross/sysroot/boot/system/develop/headers;;\n+--libdir) echo  $SCRATCH/haiku-/cross/sysroot/boot/system/develop/lib;;\n+--cmakedir) echo  $SCRATCH/haiku-/cross/sysroot/boot/system/develop/lib/cmake/llvm;;\n+--cppflags) echo  -I$SCRATCH/haiku-/cross/sysroot/boot/system/develop/headers \\\n+                  -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS;;\n+--cflags) echo  -I$SCRATCH/haiku-cross/sysroot/boot/system/develop/headers \\\n+                -fPIC -Wall -W -Wno-unused-parameter -Wwrite-strings \\\n+                -Wno-missing-field-initializers -pedantic -Wno-long-long -Wno-comment \\\n+                -Werror=date-time -ffunction-sections -fdata-sections -O3 -DNDEBUG \\\n+                -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS;;\n+--cxxflags) echo  -I/$SCRATCH/haiku-cross/sysroot/boot/system/develop/headers \\\n+                  -fPIC -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter \\\n+                  -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic \\\n+                  -Wno-long-long -Wno-maybe-uninitialized -Wdelete-non-virtual-dtor \\\n+                  -Wno-comment -Werror=date-time -std=c++11 -ffunction-sections \\\n+                  -fdata-sections -O3 -DNDEBUG  -fno-exceptions \\\n+                  -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS;;\n+--ldflags) echo  -L$SCRATCH/haiku-cross/sysroot/boot/system/develop/lib ;;\n+--system-libs) echo ;;\n+--libs) echo  -lLLVM-4.0;;\n+--libfiles) echo  $SCRATCH/haiku-cross/sysroot/boot/system/develop/lib/libLLVM-4.0.so;;\n+--components) echo  aarch64 aarch64asmparser aarch64asmprinter aarch64codegen \\\n+                    aarch64desc aarch64disassembler aarch64info aarch64utils all \\\n+                    all-targets amdgpu amdgpuasmparser amdgpuasmprinter amdgpucodegen \\\n+                    amdgpudesc amdgpudisassembler amdgpuinfo amdgpuutils analysis arm \\\n+                    armasmparser armasmprinter armcodegen armdesc armdisassembler \\\n+                    arminfo asmparser asmprinter bitreader bitwriter bpf bpfasmprinter \\\n+                    bpfcodegen bpfdesc bpfdisassembler bpfinfo codegen core coroutines \\\n+                    coverage debuginfocodeview debuginfodwarf debuginfomsf debuginfopdb \\\n+                    demangle engine executionengine globalisel hexagon hexagonasmparser \\\n+                    hexagoncodegen hexagondesc hexagondisassembler hexagoninfo \\\n+                    instcombine instrumentation interpreter ipo irreader lanai \\\n+                    lanaiasmparser lanaicodegen lanaidesc lanaidisassembler lanaiinfo \\\n+                    lanaiinstprinter libdriver lineeditor linker lto mc mcdisassembler \\\n+                    mcjit mcparser mips mipsasmparser mipsasmprinter mipscodegen \\\n+                    mipsdesc mipsdisassembler mipsinfo mirparser msp430 msp430asmprinter \\\n+                    msp430codegen msp430desc msp430info native nativecodegen nvptx \\\n+                    nvptxasmprinter nvptxcodegen nvptxdesc nvptxinfo objcarcopts object \\\n+                    objectyaml option orcjit passes powerpc powerpcasmparser \\\n+                    powerpcasmprinter powerpccodegen powerpcdesc powerpcdisassembler \\\n+                    powerpcinfo profiledata riscv riscvcodegen riscvdesc riscvinfo \\\n+                    runtimedyld scalaropts selectiondag sparc sparcasmparser \\\n+                    sparcasmprinter sparccodegen sparcdesc sparcdisassembler sparcinfo \\\n+                    support symbolize systemz systemzasmparser systemzasmprinter \\\n+                    systemzcodegen systemzdesc systemzdisassembler systemzinfo tablegen \\\n+                    target transformutils vectorize x86 x86asmparser x86asmprinter \\\n+                    x86codegen x86desc x86disassembler x86info x86utils xcore \\\n+                    xcoreasmprinter xcorecodegen xcoredesc xcoredisassembler xcoreinfo;;\n+--host-target) echo  x86_64-unknown-haiku;;\n+--has-rtti) echo  YES;;\n+--shared-mode) echo  shared;;\n+esac"}, {"sha": "34da0ed631093acb217c1808e0c1bed2e1be2748", "filename": "src/ci/docker/dist-i686-linux/build-openssl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -13,7 +13,7 @@ set -ex\n source shared.sh\n \n VERSION=1.0.2k\n-URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/openssl-$VERSION.tar.gz\n+URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/openssl-$VERSION.tar.gz\n \n curl $URL | tar xzf -\n "}, {"sha": "34da0ed631093acb217c1808e0c1bed2e1be2748", "filename": "src/ci/docker/dist-x86_64-linux/build-openssl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -13,7 +13,7 @@ set -ex\n source shared.sh\n \n VERSION=1.0.2k\n-URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/openssl-$VERSION.tar.gz\n+URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/openssl-$VERSION.tar.gz\n \n curl $URL | tar xzf -\n "}, {"sha": "54100b49cb9f50ae9d55e3f388e8fd9b920ee165", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -35,7 +35,7 @@ cd netbsd\n \n mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n \n-URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n \n # Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n curl $URL/2017-03-17-netbsd-src.tgz | tar xzf -"}, {"sha": "ce2d45563f7b53d81d89766e5c6b9060eab59fe5", "filename": "src/ci/docker/scripts/sccache.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -8,9 +8,11 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# ignore-tidy-linelength\n+\n set -ex\n \n curl -fo /usr/local/bin/sccache \\\n-  https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl\n+  https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl\n \n chmod +x /usr/local/bin/sccache"}, {"sha": "b1e36ab13d5aee82fe881e4833bd2e779a564a27", "filename": "src/doc/unstable-book/src/library-features/compiler-fences.md", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ef227f5ffe438783db0add58208d79dd84158c06/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-fences.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef227f5ffe438783db0add58208d79dd84158c06/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-fences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fcompiler-fences.md?ref=ef227f5ffe438783db0add58208d79dd84158c06", "patch": "@@ -1,106 +0,0 @@\n-# `compiler_fences`\n-\n-The tracking issue for this feature is: [#41091]\n-\n-[#41091]: https://github.com/rust-lang/rust/issues/41091\n-\n-------------------------\n-\n-The `compiler_fences` feature exposes the `compiler_fence` function\n-in `std::sync::atomic`. This function is conceptually similar to C++'s\n-`atomic_signal_fence`, which can currently only be accessed in nightly\n-Rust using the `atomic_singlethreadfence_*` instrinsic functions in\n-`core`, or through the mostly equivalent literal assembly:\n-\n-```rust\n-#![feature(asm)]\n-unsafe { asm!(\"\" ::: \"memory\" : \"volatile\") };\n-```\n-\n-A `compiler_fence` restricts the kinds of memory re-ordering the\n-compiler is allowed to do. Specifically, depending on the given ordering\n-semantics, the compiler may be disallowed from moving reads or writes\n-from before or after the call to the other side of the call to\n-`compiler_fence`. Note that it does **not** prevent the *hardware*\n-from doing such re-ordering. This is not a problem in a single-threaded,\n-execution context, but when other threads may modify memory at the same\n-time, stronger synchronization primitives are required.\n-\n-## Examples\n-\n-`compiler_fence` is generally only useful for preventing a thread from\n-racing *with itself*. That is, if a given thread is executing one piece\n-of code, and is then interrupted, and starts executing code elsewhere\n-(while still in the same thread, and conceptually still on the same\n-core). In traditional programs, this can only occur when a signal\n-handler is registered. In more low-level code, such situations can also\n-arise when handling interrupts, when implementing green threads with\n-pre-emption, etc.\n-\n-To give a straightforward example of when a `compiler_fence` is\n-necessary, consider the following example:\n-\n-```rust\n-# use std::sync::atomic::{AtomicBool, AtomicUsize};\n-# use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n-# use std::sync::atomic::Ordering;\n-static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n-static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n-\n-fn main() {\n-    IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n-    IS_READY.store(true, Ordering::Relaxed);\n-}\n-\n-fn signal_handler() {\n-    if IS_READY.load(Ordering::Relaxed) {\n-        assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n-    }\n-}\n-```\n-\n-The way it is currently written, the `assert_eq!` is *not* guaranteed to\n-succeed, despite everything happening in a single thread. To see why,\n-remember that the compiler is free to swap the stores to\n-`IMPORTANT_VARIABLE` and `IS_READ` since they are both\n-`Ordering::Relaxed`. If it does, and the signal handler is invoked right\n-after `IS_READY` is updated, then the signal handler will see\n-`IS_READY=1`, but `IMPORTANT_VARIABLE=0`.\n-\n-Using a `compiler_fence`, we can remedy this situation:\n-\n-```rust\n-#![feature(compiler_fences)]\n-# use std::sync::atomic::{AtomicBool, AtomicUsize};\n-# use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n-# use std::sync::atomic::Ordering;\n-use std::sync::atomic::compiler_fence;\n-\n-static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n-static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n-\n-fn main() {\n-    IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n-    // prevent earlier writes from being moved beyond this point\n-    compiler_fence(Ordering::Release);\n-    IS_READY.store(true, Ordering::Relaxed);\n-}\n-\n-fn signal_handler() {\n-    if IS_READY.load(Ordering::Relaxed) {\n-        assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n-    }\n-}\n-```\n-\n-A deeper discussion of compiler barriers with various re-ordering\n-semantics (such as `Ordering::SeqCst`) is beyond the scope of this text.\n-Curious readers are encouraged to read the Linux kernel's discussion of\n-[memory barriers][1], the C++ references on [`std::memory_order`][2] and\n-[`atomic_signal_fence`][3], and [this StackOverflow answer][4] for\n-further details.\n-\n-[1]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n-[2]: http://en.cppreference.com/w/cpp/atomic/memory_order\n-[3]: http://www.cplusplus.com/reference/atomic/atomic_signal_fence/\n-[4]: http://stackoverflow.com/a/18454971/472927"}, {"sha": "ebeb5f6a1de51d2f72f5404d65de360f5c7cdae7", "filename": "src/doc/unstable-book/src/library-features/iterator-for-each.md", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef227f5ffe438783db0add58208d79dd84158c06/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef227f5ffe438783db0add58208d79dd84158c06/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md?ref=ef227f5ffe438783db0add58208d79dd84158c06", "patch": "@@ -1,17 +0,0 @@\n-# `iterator_for_each`\n-\n-The tracking issue for this feature is: [#42986]\n-\n-[#42986]: https://github.com/rust-lang/rust/issues/42986\n-\n-------------------------\n-\n-To call a closure on each element of an iterator, you can use `for_each`:\n-\n-```rust\n-#![feature(iterator_for_each)]\n-\n-fn main() {\n-    (0..10).for_each(|i| println!(\"{}\", i));\n-}\n-```"}, {"sha": "4b695ad7c7933ae11dcf066daf4c30955063c440", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -22,7 +22,7 @@ use core::borrow;\n use core::fmt;\n use core::cmp::Ordering;\n use core::intrinsics::abort;\n-use core::mem::{self, size_of_val, uninitialized};\n+use core::mem::{self, align_of_val, size_of_val, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n@@ -324,7 +324,9 @@ impl<T> Arc<T> {\n             Ok(elem)\n         }\n     }\n+}\n \n+impl<T: ?Sized> Arc<T> {\n     /// Consumes the `Arc`, returning the wrapped pointer.\n     ///\n     /// To avoid a memory leak the pointer must be converted back to an `Arc` using\n@@ -378,16 +380,21 @@ impl<T> Arc<T> {\n     /// ```\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n-        // To find the corresponding pointer to the `ArcInner` we need to subtract the offset of the\n-        // `data` field from the pointer.\n-        let ptr = (ptr as *const u8).offset(-offset_of!(ArcInner<T>, data));\n+        // Align the unsized value to the end of the ArcInner.\n+        // Because it is ?Sized, it will always be the last field in memory.\n+        let align = align_of_val(&*ptr);\n+        let layout = Layout::new::<ArcInner<()>>();\n+        let offset = (layout.size() + layout.padding_needed_for(align)) as isize;\n+\n+        // Reverse the offset to find the original ArcInner.\n+        let fake_ptr = ptr as *mut ArcInner<T>;\n+        let arc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n+\n         Arc {\n-            ptr: Shared::new_unchecked(ptr as *mut u8 as *mut _),\n+            ptr: Shared::new_unchecked(arc_ptr),\n         }\n     }\n-}\n \n-impl<T: ?Sized> Arc<T> {\n     /// Creates a new [`Weak`][weak] pointer to this value.\n     ///\n     /// [weak]: struct.Weak.html\n@@ -1491,6 +1498,28 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_into_from_raw_unsized() {\n+        use std::fmt::Display;\n+        use std::string::ToString;\n+\n+        let arc: Arc<str> = Arc::from(\"foo\");\n+\n+        let ptr = Arc::into_raw(arc.clone());\n+        let arc2 = unsafe { Arc::from_raw(ptr) };\n+\n+        assert_eq!(unsafe { &*ptr }, \"foo\");\n+        assert_eq!(arc, arc2);\n+\n+        let arc: Arc<Display> = Arc::new(123);\n+\n+        let ptr = Arc::into_raw(arc.clone());\n+        let arc2 = unsafe { Arc::from_raw(ptr) };\n+\n+        assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+        assert_eq!(arc2.to_string(), \"123\");\n+    }\n+\n     #[test]\n     fn test_cowarc_clone_make_mut() {\n         let mut cow0 = Arc::new(75);"}, {"sha": "c2a3019515f106cb9ce53d1eecaa83821024d16d", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -105,22 +105,3 @@ macro_rules! vec {\n macro_rules! format {\n     ($($arg:tt)*) => ($crate::fmt::format(format_args!($($arg)*)))\n }\n-\n-// Private macro to get the offset of a struct field in bytes from the address of the struct.\n-macro_rules! offset_of {\n-    ($container:path, $field:ident) => {{\n-        // Make sure the field actually exists. This line ensures that a compile-time error is\n-        // generated if $field is accessed through a Deref impl.\n-        let $container { $field : _, .. };\n-\n-        // Create an (invalid) instance of the container and calculate the offset to its\n-        // field. Using a null pointer might be UB if `&(*(0 as *const T)).field` is interpreted to\n-        // be nullptr deref.\n-        let invalid: $container = ::core::mem::uninitialized();\n-        let offset = &invalid.$field as *const _ as usize - &invalid as *const _ as usize;\n-\n-        // Do not run destructors on the made up invalid instance.\n-        ::core::mem::forget(invalid);\n-        offset as isize\n-    }};\n-}"}, {"sha": "553980d463fc5e8799870fbc004d61fa52d35835", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -253,7 +253,7 @@ use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n use core::marker;\n use core::marker::Unsize;\n-use core::mem::{self, forget, size_of_val, uninitialized};\n+use core::mem::{self, align_of_val, forget, size_of_val, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n@@ -359,7 +359,9 @@ impl<T> Rc<T> {\n             Err(this)\n         }\n     }\n+}\n \n+impl<T: ?Sized> Rc<T> {\n     /// Consumes the `Rc`, returning the wrapped pointer.\n     ///\n     /// To avoid a memory leak the pointer must be converted back to an `Rc` using\n@@ -413,17 +415,21 @@ impl<T> Rc<T> {\n     /// ```\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n-        // To find the corresponding pointer to the `RcBox` we need to subtract the offset of the\n-        // `value` field from the pointer.\n+        // Align the unsized value to the end of the RcBox.\n+        // Because it is ?Sized, it will always be the last field in memory.\n+        let align = align_of_val(&*ptr);\n+        let layout = Layout::new::<RcBox<()>>();\n+        let offset = (layout.size() + layout.padding_needed_for(align)) as isize;\n+\n+        // Reverse the offset to find the original RcBox.\n+        let fake_ptr = ptr as *mut RcBox<T>;\n+        let rc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n \n-        let ptr = (ptr as *const u8).offset(-offset_of!(RcBox<T>, value));\n         Rc {\n-            ptr: Shared::new_unchecked(ptr as *mut u8 as *mut _)\n+            ptr: Shared::new_unchecked(rc_ptr),\n         }\n     }\n-}\n \n-impl<T: ?Sized> Rc<T> {\n     /// Creates a new [`Weak`][weak] pointer to this value.\n     ///\n     /// [weak]: struct.Weak.html\n@@ -1522,6 +1528,28 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_into_from_raw_unsized() {\n+        use std::fmt::Display;\n+        use std::string::ToString;\n+\n+        let rc: Rc<str> = Rc::from(\"foo\");\n+\n+        let ptr = Rc::into_raw(rc.clone());\n+        let rc2 = unsafe { Rc::from_raw(ptr) };\n+\n+        assert_eq!(unsafe { &*ptr }, \"foo\");\n+        assert_eq!(rc, rc2);\n+\n+        let rc: Rc<Display> = Rc::new(123);\n+\n+        let ptr = Rc::into_raw(rc.clone());\n+        let rc2 = unsafe { Rc::from_raw(ptr) };\n+\n+        assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+        assert_eq!(rc2.to_string(), \"123\");\n+    }\n+\n     #[test]\n     fn get_mut() {\n         let mut x = Rc::new(3);"}, {"sha": "2be7b1bc2e17c8572c247de67744cb432ea4a1d9", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -28,7 +28,6 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(generic_param_attrs)]\n-#![feature(needs_drop)]\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]"}, {"sha": "ef4951582f620c589cd9e18ec182538bf116bce3", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1 +1 @@\n-Subproject commit 38ffaf97aa418cc369ca0197a72a0b927cc0f622\n+Subproject commit ef4951582f620c589cd9e18ec182538bf116bce3"}, {"sha": "edafd0ce2c227f27af0fd0795ee595a6b521aa68", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -498,8 +498,6 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iterator_for_each)]\n-    ///\n     /// use std::sync::mpsc::channel;\n     ///\n     /// let (tx, rx) = channel();\n@@ -514,15 +512,13 @@ pub trait Iterator {\n     /// might be preferable to keep a functional style with longer iterators:\n     ///\n     /// ```\n-    /// #![feature(iterator_for_each)]\n-    ///\n     /// (0..5).flat_map(|x| x * 100 .. x * 110)\n     ///       .enumerate()\n     ///       .filter(|&(i, x)| (i + x) % 3 == 0)\n     ///       .for_each(|(i, x)| println!(\"{}:{}\", i, x));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_for_each\", issue = \"42986\")]\n+    #[stable(feature = \"iterator_for_each\", since = \"1.22.0\")]\n     fn for_each<F>(self, mut f: F) where\n         Self: Sized, F: FnMut(Self::Item),\n     {"}, {"sha": "34994dc3b70f3a4e1910f929a9a2e2216f62300b", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -332,7 +332,6 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// Here's an example of how a collection might make use of needs_drop:\n ///\n /// ```\n-/// #![feature(needs_drop)]\n /// use std::{mem, ptr};\n ///\n /// pub struct MyCollection<T> {\n@@ -359,7 +358,7 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// }\n /// ```\n #[inline]\n-#[unstable(feature = \"needs_drop\", issue = \"41890\")]\n+#[stable(feature = \"needs_drop\", since = \"1.22.0\")]\n pub fn needs_drop<T>() -> bool {\n     unsafe { intrinsics::needs_drop::<T>() }\n }"}, {"sha": "3dd08e697106652f32c2aba27c2f33e58bee03fb", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1679,10 +1679,14 @@ pub fn fence(order: Ordering) {\n \n /// A compiler memory fence.\n ///\n-/// `compiler_fence` does not emit any machine code, but prevents the compiler from re-ordering\n-/// memory operations across this point. Which reorderings are disallowed is dictated by the given\n-/// [`Ordering`]. Note that `compiler_fence` does *not* introduce inter-thread memory\n-/// synchronization; for that, a [`fence`] is needed.\n+/// `compiler_fence` does not emit any machine code, but restricts the kinds\n+/// of memory re-ordering the compiler is allowed to do. Specifically, depending on\n+/// the given [`Ordering`] semantics, the compiler may be disallowed from moving reads\n+/// or writes from before or after the call to the other side of the call to\n+/// `compiler_fence`. Note that it does **not** prevent the *hardware*\n+/// from doing such re-ordering. This is not a problem in a single-threaded,\n+/// execution context, but when other threads may modify memory at the same\n+/// time, stronger synchronization primitives such as [`fence`] are required.\n ///\n /// The re-ordering prevented by the different ordering semantics are:\n ///\n@@ -1691,19 +1695,64 @@ pub fn fence(order: Ordering) {\n ///  - with [`Acquire`], subsequent reads and writes cannot be moved ahead of preceding reads.\n ///  - with [`AcqRel`], both of the above rules are enforced.\n ///\n+/// `compiler_fence` is generally only useful for preventing a thread from\n+/// racing *with itself*. That is, if a given thread is executing one piece\n+/// of code, and is then interrupted, and starts executing code elsewhere\n+/// (while still in the same thread, and conceptually still on the same\n+/// core). In traditional programs, this can only occur when a signal\n+/// handler is registered. In more low-level code, such situations can also\n+/// arise when handling interrupts, when implementing green threads with\n+/// pre-emption, etc. Curious readers are encouraged to read the Linux kernel's\n+/// discussion of [memory barriers].\n+///\n /// # Panics\n ///\n /// Panics if `order` is [`Relaxed`].\n ///\n+/// # Examples\n+///\n+/// Without `compiler_fence`, the `assert_eq!` in following code\n+/// is *not* guaranteed to succeed, despite everything happening in a single thread.\n+/// To see why, remember that the compiler is free to swap the stores to\n+/// `IMPORTANT_VARIABLE` and `IS_READ` since they are both\n+/// `Ordering::Relaxed`. If it does, and the signal handler is invoked right\n+/// after `IS_READY` is updated, then the signal handler will see\n+/// `IS_READY=1`, but `IMPORTANT_VARIABLE=0`.\n+/// Using a `compiler_fence` remedies this situation.\n+///\n+/// ```\n+/// use std::sync::atomic::{AtomicBool, AtomicUsize};\n+/// use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n+/// use std::sync::atomic::Ordering;\n+/// use std::sync::atomic::compiler_fence;\n+///\n+/// static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n+/// static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n+///\n+/// fn main() {\n+///     IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n+///     // prevent earlier writes from being moved beyond this point\n+///     compiler_fence(Ordering::Release);\n+///     IS_READY.store(true, Ordering::Relaxed);\n+/// }\n+///\n+/// fn signal_handler() {\n+///     if IS_READY.load(Ordering::Relaxed) {\n+///         assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n+///     }\n+/// }\n+/// ```\n+///\n /// [`fence`]: fn.fence.html\n /// [`Ordering`]: enum.Ordering.html\n /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n /// [`Release`]: enum.Ordering.html#variant.Release\n /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+/// [memory barriers]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n #[inline]\n-#[unstable(feature = \"compiler_fences\", issue = \"41091\")]\n+#[stable(feature = \"compiler_fences\", since = \"1.22.0\")]\n pub fn compiler_fence(order: Ordering) {\n     unsafe {\n         match order {"}, {"sha": "536715ffadb15b7f7501ac78af5cd39c6791e413", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -287,6 +287,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                                           found_it: false,\n                                           bound_region: self.bound_region,\n                                           hir_map: self.hir_map,\n+                                          depth: self.depth,\n                                       };\n                 intravisit::walk_ty(subvisitor, arg); // call walk_ty; as visit_ty is empty,\n                 // this will visit only outermost type\n@@ -313,6 +314,7 @@ struct TyPathVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_it: bool,\n     bound_region: ty::BoundRegion,\n+    depth: u32,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n@@ -321,24 +323,47 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n-        let br_index = match self.bound_region {\n-            ty::BrAnon(index) => index,\n-            _ => return,\n-        };\n \n         let hir_id = self.infcx.tcx.hir.node_to_hir_id(lifetime.id);\n-        match self.infcx.tcx.named_region(hir_id) {\n+        match (self.infcx.tcx.named_region(hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n-            Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n-                if debruijn_index.depth == 1 && anon_index == br_index {\n+            (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n+                if debruijn_index.depth == self.depth && anon_index == br_index {\n+                    self.found_it = true;\n+                    return;\n+                }\n+            }\n+\n+            (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n+                debug!(\"EarlyBound self.infcx.tcx.hir.local_def_id(id)={:?} \\\n+                                        def_id={:?}\",\n+                       self.infcx.tcx.hir.local_def_id(id),\n+                       def_id);\n+                if self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                    self.found_it = true;\n+                    return; // we can stop visiting now\n+                }\n+            }\n+\n+            (Some(rl::Region::LateBound(debruijn_index, id)), ty::BrNamed(def_id, _)) => {\n+                debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n+                       debruijn_index.depth);\n+                debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\",\n+                       self.infcx.tcx.hir.local_def_id(id));\n+                debug!(\"def_id={:?}\", def_id);\n+                if debruijn_index.depth == self.depth &&\n+                   self.infcx.tcx.hir.local_def_id(id) == def_id {\n                     self.found_it = true;\n+                    return; // we can stop visiting now\n                 }\n             }\n-            Some(rl::Region::Static) |\n-            Some(rl::Region::EarlyBound(_, _)) |\n-            Some(rl::Region::LateBound(_, _)) |\n-            Some(rl::Region::Free(_, _)) |\n-            None => {\n+\n+            (Some(rl::Region::Static), _) |\n+            (Some(rl::Region::EarlyBound(_, _)), _) |\n+            (Some(rl::Region::LateBound(_, _)), _) |\n+            (Some(rl::Region::LateBoundAnon(_, _)), _) |\n+            (Some(rl::Region::Free(_, _)), _) |\n+            (None, _) => {\n                 debug!(\"no arg found\");\n             }\n         }"}, {"sha": "3939497971337f152304f2d95b6dd1acb23a5350", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -16,51 +16,14 @@ use std;\n \n use llvm;\n use llvm::{ValueRef};\n-use rustc::traits;\n-use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc::ty::{self, Ty};\n use rustc::ty::layout::LayoutTyper;\n use common::*;\n use meth;\n use monomorphize;\n use value::Value;\n use builder::Builder;\n \n-pub fn needs_drop_glue<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>, t: Ty<'tcx>) -> bool {\n-    assert!(t.is_normalized_for_trans());\n-\n-    let t = scx.tcx().erase_regions(&t);\n-\n-    // FIXME (#22815): note that type_needs_drop conservatively\n-    // approximates in some cases and may say a type expression\n-    // requires drop glue when it actually does not.\n-    //\n-    // (In this case it is not clear whether any harm is done, i.e.\n-    // erroneously returning `true` in some cases where we could have\n-    // returned `false` does not appear unsound. The impact on\n-    // code quality is unknown at this time.)\n-\n-    if !scx.type_needs_drop(t) {\n-        return false;\n-    }\n-    match t.sty {\n-        ty::TyAdt(def, _) if def.is_box() => {\n-            let typ = t.boxed_ty();\n-            if !scx.type_needs_drop(typ) && scx.type_is_sized(typ) {\n-                let layout = t.layout(scx.tcx(), ty::ParamEnv::empty(traits::Reveal::All)).unwrap();\n-                if layout.size(scx).bytes() == 0 {\n-                    // `Box<ZeroSizeType>` does not allocate.\n-                    false\n-                } else {\n-                    true\n-                }\n-            } else {\n-                true\n-            }\n-        }\n-        _ => true\n-    }\n-}\n-\n pub fn size_and_align_of_dst<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, t: Ty<'tcx>, info: ValueRef)\n                                        -> (ValueRef, ValueRef) {\n     debug!(\"calculate size of DST: {}; with lost info: {:?}\","}, {"sha": "309177d9ff6a2602d0be37c971509997acfa3281", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -10,7 +10,6 @@\n \n use abi::Abi;\n use common::*;\n-use glue;\n \n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::DropInPlaceFnLangItem;\n@@ -189,7 +188,7 @@ pub fn resolve<'a, 'tcx>(\n             _ => {\n                 if Some(def_id) == scx.tcx().lang_items().drop_in_place_fn() {\n                     let ty = substs.type_at(0);\n-                    if glue::needs_drop_glue(scx, ty) {\n+                    if scx.type_needs_drop(ty) {\n                         debug!(\" => nontrivial drop glue\");\n                         ty::InstanceDef::DropGlue(def_id, Some(ty))\n                     } else {"}, {"sha": "7f5d11ba5de28c43999b7a1f1739abc3b112d80d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -473,7 +473,7 @@ impl hir::print::PpAnn for InlinedConst {\n     }\n }\n \n-fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n+pub fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n     let body = cx.tcx.extern_const_body(did);\n     let inlined = InlinedConst {\n         nested_bodies: cx.tcx.item_body_nested_bodies(did)"}, {"sha": "3be09373408997ae564453bf53790673ea48a748", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1793,6 +1793,12 @@ impl Clean<Type> for hir::Ty {\n                 let n = cx.tcx.const_eval(param_env.and((def_id, substs))).unwrap();\n                 let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     n.to_string()\n+                } else if let ConstVal::Unevaluated(def_id, _) = n.val {\n+                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n+                        print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n+                    } else {\n+                        inline::print_inlined_const(cx, def_id)\n+                    }\n                 } else {\n                     format!(\"{:?}\", n)\n                 };\n@@ -1909,6 +1915,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::TyArray(ty, n) => {\n                 let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     n.to_string()\n+                } else if let ConstVal::Unevaluated(def_id, _) = n.val {\n+                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n+                        print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n+                    } else {\n+                        inline::print_inlined_const(cx, def_id)\n+                    }\n                 } else {\n                     format!(\"{:?}\", n)\n                 };"}, {"sha": "081f950e40db222a331587be16d83da373d9a8c4", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -34,12 +34,18 @@ use syntax_pos::Span;\n \n /// Highlights `src`, returning the HTML output.\n pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>,\n-                                extension: Option<&str>) -> String {\n+                                extension: Option<&str>,\n+                                tooltip: Option<(&str, &str)>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::ParseSess::new(FilePathMapping::empty());\n     let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), src.to_string());\n \n     let mut out = Vec::new();\n+    if let Some((tooltip, class)) = tooltip {\n+        write!(out, \"<div class='information'><div class='tooltip {}'>\u26a0<span \\\n+                     class='tooltiptext'>{}</span></div></div>\",\n+               class, tooltip).unwrap();\n+    }\n     write_header(class, id, &mut out).unwrap();\n \n     let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm), sess.codemap());"}, {"sha": "80d1f0b01cc261dfdd6df65cfdb1029bf6f2a04a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -160,10 +160,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let event = self.inner.next();\n+        let compile_fail;\n+        let ignore;\n         if let Some(Event::Start(Tag::CodeBlock(lang))) = event {\n-            if !LangString::parse(&lang).rust {\n+            let parse_result = LangString::parse(&lang);\n+            if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(lang)));\n             }\n+            compile_fail = parse_result.compile_fail;\n+            ignore = parse_result.ignore;\n         } else {\n             return event;\n         }\n@@ -222,11 +227,22 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     url, test_escaped, channel\n                 ))\n             });\n+            let tooltip = if ignore {\n+                Some((\"Be careful when using this code, it's not being tested!\", \"ignore\"))\n+            } else if compile_fail {\n+                Some((\"This code doesn't compile so be extra careful!\", \"compile_fail\"))\n+            } else {\n+                None\n+            };\n             s.push_str(&highlight::render_with_highlighting(\n                         &text,\n-                        Some(\"rust-example-rendered\"),\n+                        Some(&format!(\"rust-example-rendered{}\",\n+                                      if ignore { \" ignore\" }\n+                                      else if compile_fail { \" compile_fail\" }\n+                                      else { \"\" })),\n                         None,\n-                        playground_button.as_ref().map(String::as_str)));\n+                        playground_button.as_ref().map(String::as_str),\n+                        tooltip));\n             Some(Event::Html(s.into()))\n         })\n     }\n@@ -556,12 +572,18 @@ pub fn render(w: &mut fmt::Formatter,\n             let origtext = str::from_utf8(text).unwrap();\n             let origtext = origtext.trim_left();\n             debug!(\"docblock: ==============\\n{:?}\\n=======\", text);\n+            let mut compile_fail = false;\n+            let mut ignore = false;\n+\n             let rendered = if lang.is_null() || origtext.is_empty() {\n                 false\n             } else {\n                 let rlang = (*lang).as_bytes();\n                 let rlang = str::from_utf8(rlang).unwrap();\n-                if !LangString::parse(rlang).rust {\n+                let parse_result = LangString::parse(rlang);\n+                compile_fail = parse_result.compile_fail;\n+                ignore = parse_result.ignore;\n+                if !parse_result.rust {\n                     (my_opaque.dfltblk)(ob, orig_text, lang,\n                                         opaque as *const hoedown_renderer_data,\n                                         line);\n@@ -616,11 +638,22 @@ pub fn render(w: &mut fmt::Formatter,\n                         url, test_escaped, channel\n                     ))\n                 });\n+                let tooltip = if ignore {\n+                    Some((\"Be careful when using this code, it's not being tested!\", \"ignore\"))\n+                } else if compile_fail {\n+                    Some((\"This code doesn't compile so be extra careful!\", \"compile_fail\"))\n+                } else {\n+                    None\n+                };\n                 s.push_str(&highlight::render_with_highlighting(\n                                &text,\n-                               Some(\"rust-example-rendered\"),\n+                               Some(&format!(\"rust-example-rendered{}\",\n+                                             if ignore { \" ignore\" }\n+                                             else if compile_fail { \" compile_fail\" }\n+                                             else { \"\" })),\n                                None,\n-                               playground_button.as_ref().map(String::as_str)));\n+                               playground_button.as_ref().map(String::as_str),\n+                               tooltip));\n                 hoedown_buffer_put(ob, s.as_ptr(), s.len());\n             })\n         }"}, {"sha": "c09ce4c4bd31ad949c1475f0803b42a2b3f081d2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1819,6 +1819,7 @@ fn render_assoc_const_value(item: &clean::Item) -> String {\n                 None,\n                 None,\n                 None,\n+                None,\n             )\n         }\n         _ => String::new(),\n@@ -3647,7 +3648,8 @@ impl<'a> fmt::Display for Source<'a> {\n             write!(fmt, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols)?;\n         }\n         write!(fmt, \"</pre>\")?;\n-        write!(fmt, \"{}\", highlight::render_with_highlighting(s, None, None, None))?;\n+        write!(fmt, \"{}\",\n+               highlight::render_with_highlighting(s, None, None, None, None))?;\n         Ok(())\n     }\n }\n@@ -3657,6 +3659,7 @@ fn item_macro(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     w.write_str(&highlight::render_with_highlighting(&t.source,\n                                                      Some(\"macro\"),\n                                                      None,\n+                                                     None,\n                                                      None))?;\n     document(w, cx, it)\n }"}, {"sha": "da4430d8a1539fc62170d39d7f25b82532f6a293", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1296,6 +1296,24 @@\n             collapseDocs(i_e.previousSibling.childNodes[0]);\n         });\n     });\n+\n+    onEach(document.getElementsByClassName('rust-example-rendered'), function(e) {\n+        if (hasClass(e, 'compile_fail')) {\n+            e.addEventListener(\"mouseover\", function(event) {\n+                e.previousElementSibling.childNodes[0].style.color = '#f00';\n+            });\n+            e.addEventListener(\"mouseout\", function(event) {\n+                e.previousElementSibling.childNodes[0].style.color = '';\n+            });\n+        } else if (hasClass(e, 'ignore')) {\n+            e.addEventListener(\"mouseover\", function(event) {\n+                e.previousElementSibling.childNodes[0].style.color = '#ff9200';\n+            });\n+            e.addEventListener(\"mouseout\", function(event) {\n+                e.previousElementSibling.childNodes[0].style.color = '';\n+            });\n+        }\n+    });\n }());\n \n // Sets the focus on the search bar at the top of the page"}, {"sha": "c15051376bf2766ee7f94efe155b02c8a696aff4", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -612,7 +612,6 @@ pre.rust .question-mark {\n \tfont-weight: bold;\n }\n \n-pre.rust { position: relative; }\n a.test-arrow {\n \tdisplay: inline-block;\n \tposition: absolute;\n@@ -813,3 +812,44 @@ span.since {\n \t\tdisplay: none;\n \t}\n }\n+\n+.information {\n+\tposition: absolute;\n+\tleft: -1px;\n+\tmargin-top: 7px;\n+}\n+\n+.tooltip {\n+\tposition: relative;\n+\tdisplay: inline-block;\n+\tcursor: pointer;\n+}\n+\n+.tooltip .tooltiptext {\n+\twidth: 120px;\n+\tdisplay: none;\n+\tbackground-color: black;\n+\tcolor: #fff;\n+\ttext-align: center;\n+\tpadding: 5px 3px;\n+\tborder-radius: 6px;\n+\tmargin-left: 5px;\n+\ttop: -5px;\n+\tleft: 105%;\n+\tz-index: 1;\n+}\n+\n+.tooltip:hover .tooltiptext {\n+\tdisplay: inline;\n+}\n+\n+.tooltip .tooltiptext::after {\n+\tcontent: \" \";\n+\tposition: absolute;\n+\ttop: 50%;\n+\tleft: 11px;\n+\tmargin-top: -5px;\n+\tborder-width: 5px;\n+\tborder-style: solid;\n+\tborder-color: transparent black transparent transparent;\n+}"}, {"sha": "42d0ec704f45f01f98fef03255209bf0b4d06453", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -202,4 +202,36 @@ a.test-arrow:hover{\n \n :target > code {\n \tbackground: #FDFFD3;\n-}\n\\ No newline at end of file\n+}\n+\n+pre.compile_fail {\n+\tborder-left: 2px solid rgba(255,0,0,.4);\n+}\n+\n+pre.compile_fail:hover, .information:hover + pre.compile_fail {\n+\tborder-left: 2px solid #f00;\n+}\n+\n+pre.ignore {\n+\tborder-left: 2px solid rgba(255,142,0,.4);\n+}\n+\n+pre.ignore:hover, .information:hover + pre.ignore {\n+\tborder-left: 2px solid #ff9200;\n+}\n+\n+.tooltip.compile_fail {\n+\tcolor: rgba(255,0,0,.3);\n+}\n+\n+.information > .compile_fail:hover {\n+\tcolor: #f00;\n+}\n+\n+.tooltip.ignore {\n+\tcolor: rgba(255,142,0,.3);\n+}\n+\n+.information > .ignore:hover {\n+\tcolor: rgba(255,142,0,1);\n+}"}, {"sha": "1a0f8b8d2177e074c7e42e33a0e097328a19c6ba", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -276,7 +276,6 @@\n #![feature(macro_reexport)]\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n-#![feature(needs_drop)]\n #![feature(never_type)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]"}, {"sha": "aff9af66444c447e68a5e488fa2596796a75a698", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1570,10 +1570,13 @@ mod tests {\n \n     #[test]\n     fn connect_timeout_unroutable() {\n-        // this IP is unroutable, so connections should always time out.\n+        // this IP is unroutable, so connections should always time out,\n+        // provided the network is reachable to begin with.\n         let addr = \"10.255.255.1:80\".parse().unwrap();\n         let e = TcpStream::connect_timeout(&addr, Duration::from_millis(250)).unwrap_err();\n-        assert_eq!(e.kind(), io::ErrorKind::TimedOut);\n+        assert!(e.kind() == io::ErrorKind::TimedOut ||\n+                e.kind() == io::ErrorKind::Other,\n+                \"bad error: {} {:?}\", e, e.kind());\n     }\n \n     #[test]"}, {"sha": "3c61593acc55b167c3c661c47411f7933dd10652", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -98,7 +98,7 @@ pub enum TryLockError<T> {\n ///\n /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-/// [`into_inner`]: ../../std/sync/struct.Mutex.html#method.into_inner\n+/// [`into_inner`]: ../../std/sync/struct.PoisonError.html#method.into_inner\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type LockResult<Guard> = Result<Guard, PoisonError<Guard>>;\n "}, {"sha": "c139cfeaebf4a42c115293c80fd7849073d5dc68", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -792,14 +792,16 @@ impl<'a> ExtCtxt<'a> {\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n-    pub fn trace_macros_diag(&self) {\n+    pub fn trace_macros_diag(&mut self) {\n         for (sp, notes) in self.expansions.iter() {\n             let mut db = self.parse_sess.span_diagnostic.span_note_diag(*sp, \"trace_macro\");\n             for note in notes {\n                 db.note(note);\n             }\n             db.emit();\n         }\n+        // Fixme: does this result in errors?\n+        self.expansions.clear();\n     }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.bug(msg);"}, {"sha": "de9c085cc78177e62f24198c68152e0eca80b708", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -384,13 +384,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.current_expansion.depth > self.cx.ecfg.recursion_limit {\n             let info = self.cx.current_expansion.mark.expn_info().unwrap();\n             let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n-            let mut err = self.cx.struct_span_fatal(info.call_site,\n+            let mut err = self.cx.struct_span_err(info.call_site,\n                 &format!(\"recursion limit reached while expanding the macro `{}`\",\n                          info.callee.name()));\n             err.help(&format!(\n                 \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n                 suggested_limit));\n             err.emit();\n+            self.cx.trace_macros_diag();\n             panic!(FatalError);\n         }\n \n@@ -439,11 +440,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", attr.path));\n+                self.cx.trace_macros_diag();\n                 kind.dummy(attr.span)\n             }\n             _ => {\n                 let msg = &format!(\"macro `{}` may not be used in attributes\", attr.path);\n                 self.cx.span_err(attr.span, msg);\n+                self.cx.trace_macros_diag();\n                 kind.dummy(attr.span)\n             }\n         }\n@@ -482,6 +485,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 if let Err(msg) = validate_and_set_expn_info(def_span.map(|(_, s)| s),\n                                                              false, false) {\n                     self.cx.span_err(path.span, &msg);\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 }\n                 kind.make_from(expand.expand(self.cx, span, mac.node.stream()))\n@@ -497,6 +501,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                                              allow_internal_unstable,\n                                                              allow_internal_unsafe) {\n                     self.cx.span_err(path.span, &msg);\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 }\n                 kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n@@ -506,6 +511,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 if ident.name == keywords::Invalid.name() {\n                     self.cx.span_err(path.span,\n                                     &format!(\"macro {}! expects an ident argument\", path));\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 };\n \n@@ -526,11 +532,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             MultiDecorator(..) | MultiModifier(..) | AttrProcMacro(..) => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", path));\n+                self.cx.trace_macros_diag();\n                 return kind.dummy(span);\n             }\n \n             ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(path.span, &format!(\"`{}` is a derive mode\", path));\n+                self.cx.trace_macros_diag();\n                 return kind.dummy(span);\n             }\n \n@@ -539,6 +547,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n                     self.cx.span_err(path.span, &msg);\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 }\n \n@@ -564,6 +573,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             let msg = format!(\"non-{kind} macro in {kind} position: {name}\",\n                               name = path.segments[0].identifier.name, kind = kind.name());\n             self.cx.span_err(path.span, &msg);\n+            self.cx.trace_macros_diag();\n             kind.dummy(span)\n         })\n     }\n@@ -617,6 +627,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             _ => {\n                 let msg = &format!(\"macro `{}` may not be used for derive attributes\", attr.path);\n                 self.cx.span_err(span, msg);\n+                self.cx.trace_macros_diag();\n                 kind.dummy(span)\n             }\n         }\n@@ -629,6 +640,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Ok(expansion) => expansion,\n             Err(mut err) => {\n                 err.emit();\n+                self.cx.trace_macros_diag();\n                 return kind.dummy(span);\n             }\n         };\n@@ -739,6 +751,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         if !traits.is_empty() &&\n            (kind == ExpansionKind::TraitItems || kind == ExpansionKind::ImplItems) {\n             self.cx.span_err(traits[0].span, \"`derive` can be only be applied to items\");\n+            self.cx.trace_macros_diag();\n             return kind.expect_from_annotatables(::std::iter::once(item));\n         }\n         self.collect(kind, InvocationKind::Attr { attr: attr, traits: traits, item: item })"}, {"sha": "5e58f003c2be7479c27d827dea1d25a62e6f0a43", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -172,7 +172,9 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     }\n \n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n-    cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    cx.span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    cx.trace_macros_diag();\n+    DummyResult::any(sp)\n }\n \n // Note that macro-by-example's input is also matched against a token tree:"}, {"sha": "accefd6b65f28b1344da2385e63b3dc70ea35cc8", "filename": "src/test/rustdoc/codeblock-title.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Frustdoc%2Fcodeblock-title.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Frustdoc%2Fcodeblock-title.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcodeblock-title.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+// @has foo/fn.bar.html '//*[@class=\"tooltip compile_fail\"]/span' \"This code doesn't compile so be extra careful!\"\n+// @has foo/fn.bar.html '//*[@class=\"tooltip ignore\"]/span' \"Be careful when using this code, it's not being tested!\"\n+\n+/// foo\n+///\n+/// ```compile_fail\n+/// foo();\n+/// ```\n+///\n+/// ```ignore (tidy)\n+/// goo();\n+/// ```\n+///\n+/// ```\n+/// let x = 0;\n+/// ```\n+pub fn bar() -> usize { 2 }"}, {"sha": "0fef709ae53637b43c0e9e0c82bf1b2f852c2bf0", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a> {\n+    x: &'a u32,\n+}\n+\n+fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n+    where &'a (): Sized,\n+          &'b u32: Sized\n+{\n+    x.push(y);\n+}\n+\n+fn main() {}"}, {"sha": "59bf5d17222b7e189a10f794b502fb20291b9040", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,11 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:18:12\n+   |\n+14 | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n+   |                           -------      ------- these two types are declared with different lifetimes...\n+...\n+18 |     x.push(y);\n+   |            ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "a91d0b55dc7abea69c25bb8f7b1730b9eb6ebe23", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a> {\n+    x: &'a u32,\n+}\n+\n+fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n+    x.push(y);\n+}\n+\n+fn main() {}"}, {"sha": "878351210681bef588a9b80a960433e2878087fe", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:15:12\n+   |\n+14 | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n+   |                           -------      ------- these two types are declared with different lifetimes...\n+15 |     x.push(y);\n+   |            ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "1b46e94584e6b33d507b03b99fa0dc8734102a11", "filename": "src/test/ui/macros/assert_eq_trailing_comma.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -4,3 +4,5 @@ error: unexpected end of macro invocation\n 12 |     assert_eq!(1, 1,);\n    |                    ^\n \n+error: aborting due to previous error\n+"}, {"sha": "33d2cb0ed82429207921e38d6e35563e82c83175", "filename": "src/test/ui/macros/assert_ne_trailing_comma.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -4,3 +4,5 @@ error: unexpected end of macro invocation\n 12 |     assert_ne!(1, 2,);\n    |                    ^\n \n+error: aborting due to previous error\n+"}, {"sha": "eb7292b0a652bd3b28d2e361e8cf5b3750ae11ec", "filename": "src/test/ui/macros/trace_faulty_macros.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z trace-macros\n+\n+#![recursion_limit=\"4\"]\n+\n+macro_rules! my_faulty_macro {\n+    () => {\n+        my_faulty_macro!(bcd);\n+    };\n+}\n+\n+macro_rules! pat_macro {\n+    () => {\n+        pat_macro!(A{a:a, b:0, c:_, ..});\n+    };\n+    ($a:pat) => {\n+        $a\n+    };\n+}\n+\n+macro_rules! my_recursive_macro {\n+    () => {\n+        my_recursive_macro!();\n+    };\n+}\n+\n+macro_rules! my_macro {\n+    () => {\n+\n+    };\n+}\n+\n+fn main() {\n+    my_faulty_macro!();\n+    my_recursive_macro!();\n+    test!();\n+    non_exisiting!();\n+    derive!(Debug);\n+    let a = pat_macro!();\n+}\n+\n+#[my_macro]\n+fn use_bang_macro_as_attr(){}\n+\n+#[derive(Debug)]\n+fn use_derive_macro_as_attr(){}"}, {"sha": "f4aeb8332f0b0643af61e8e8edf321e2159555a6", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1,47 @@\n+error: no rules expected the token `bcd`\n+  --> $DIR/trace_faulty_macros.rs:17:26\n+   |\n+17 |         my_faulty_macro!(bcd);\n+   |                          ^^^\n+...\n+43 |     my_faulty_macro!();\n+   |     ------------------- in this macro invocation\n+\n+note: trace_macro\n+  --> $DIR/trace_faulty_macros.rs:43:5\n+   |\n+43 |     my_faulty_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expanding `my_faulty_macro! {  }`\n+   = note: to `my_faulty_macro ! ( bcd ) ;`\n+   = note: expanding `my_faulty_macro! { bcd }`\n+\n+error: recursion limit reached while expanding the macro `my_recursive_macro`\n+  --> $DIR/trace_faulty_macros.rs:32:9\n+   |\n+32 |         my_recursive_macro!();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+44 |     my_recursive_macro!();\n+   |     ---------------------- in this macro invocation\n+   |\n+   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate\n+\n+note: trace_macro\n+  --> $DIR/trace_faulty_macros.rs:44:5\n+   |\n+44 |     my_recursive_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+"}, {"sha": "8118b02ac5ce49b22e049ff03316d5e1574852cf", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1 +1 @@\n-Subproject commit 33250c48b4763b01478d780e76206484a1d5b207\n+Subproject commit 8118b02ac5ce49b22e049ff03316d5e1574852cf"}, {"sha": "26c447d01d364d2a66d742158a34444f163953e0", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -517,7 +517,7 @@ pub fn make_test_name(config: &Config, testpaths: &TestPaths) -> test::TestName\n     //\n     //    run-pass/foo/bar/baz.rs\n     let path =\n-        PathBuf::from(config.mode.to_string())\n+        PathBuf::from(config.src_base.file_name().unwrap())\n         .join(&testpaths.relative_dir)\n         .join(&testpaths.file.file_name().unwrap());\n     test::DynTestName(format!(\"[{}] {}\", config.mode, path.display()))"}, {"sha": "10ef326d9db8c993306c794eab58237c44d05195", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -2174,8 +2174,6 @@ actual:\\n\\\n     }\n \n     fn run_ui_test(&self) {\n-        println!(\"ui: {}\", self.testpaths.file.display());\n-\n         let proc_res = self.compile_test();\n \n         let expected_stderr_path = self.expected_output_path(\"stderr\");"}, {"sha": "7221e38023c41ff2532ebbf54a7da296fd488b50", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -1 +1 @@\n-Subproject commit 52d48656f93eeeb2c568e6c1048e64168e5b209f\n+Subproject commit 7221e38023c41ff2532ebbf54a7da296fd488b50"}, {"sha": "a1fd68da464fc51585f351c81fc2b867211c197e", "filename": "src/tools/rustfmt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -0,0 +1 @@\n+Subproject commit a1fd68da464fc51585f351c81fc2b867211c197e"}, {"sha": "56c0b21cd53c7b7e1a1f25aa392033b29cf52573", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdd68922d143c6d1f18f66572251b7078e9e850/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=1cdd68922d143c6d1f18f66572251b7078e9e850", "patch": "@@ -64,6 +64,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rls\",\n         \"src/tools/clippy\",\n         \"src/tools/rust-installer\",\n+        \"src/tools/rustfmt\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}