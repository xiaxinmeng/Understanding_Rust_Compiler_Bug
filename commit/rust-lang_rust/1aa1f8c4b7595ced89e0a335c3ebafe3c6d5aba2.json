{"sha": "1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTFmOGM0Yjc1OTVjZWQ4OWUwYTMzNWMzZWJhZmUzYzZkNWFiYTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T21:32:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T21:32:25Z"}, "message": "Rename various things from ivec to vec", "tree": {"sha": "62f635edc75c14011aeae83b7e914c5ec888c975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f635edc75c14011aeae83b7e914c5ec888c975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "html_url": "https://github.com/rust-lang/rust/commit/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fc361823377ca10e6ac38e66824a876012b312e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc361823377ca10e6ac38e66824a876012b312e", "html_url": "https://github.com/rust-lang/rust/commit/4fc361823377ca10e6ac38e66824a876012b312e"}], "stats": {"total": 106, "additions": 52, "deletions": 54}, "files": [{"sha": "5bb5912630f474862beaf58c0897a6e9552e7a7b", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -173,7 +173,7 @@ fn nospan<T>(t: &T) -> ast::spanned<T> {\n }\n \n fn mk_tests(cx: &test_ctxt) -> @ast::item {\n-    let ret_ty = mk_test_desc_ivec_ty(cx);\n+    let ret_ty = mk_test_desc_vec_ty(cx);\n \n     let decl: ast::fn_decl =\n         {inputs: ~[],\n@@ -213,7 +213,7 @@ fn empty_fn_ty() -> ast::ty {\n }\n \n // The ast::ty of [std::test::test_desc]\n-fn mk_test_desc_ivec_ty(cx: &test_ctxt) -> @ast::ty {\n+fn mk_test_desc_vec_ty(cx: &test_ctxt) -> @ast::ty {\n     let test_desc_ty_path: ast::path =\n         nospan({global: false,\n                 idents: ~[\"std\", \"test\", \"test_desc\"],\n@@ -222,9 +222,9 @@ fn mk_test_desc_ivec_ty(cx: &test_ctxt) -> @ast::ty {\n     let test_desc_ty: ast::ty =\n         nospan(ast::ty_path(test_desc_ty_path, cx.next_node_id()));\n \n-    let ivec_mt: ast::mt = {ty: @test_desc_ty, mut: ast::imm};\n+    let vec_mt: ast::mt = {ty: @test_desc_ty, mut: ast::imm};\n \n-    ret @nospan(ast::ty_vec(ivec_mt));\n+    ret @nospan(ast::ty_vec(vec_mt));\n }\n \n fn mk_test_desc_vec(cx: &test_ctxt) -> @ast::expr {"}, {"sha": "a9a85e1190bcfc5d66a054c0d0213a7e7728f8e5", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -217,7 +217,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n       '@' { ret ty::mk_box(st.tcx, parse_mt(st, sd)); }\n       '~' { ret ty::mk_uniq(st.tcx, parse_ty(st, sd)); }\n       '*' { ret ty::mk_ptr(st.tcx, parse_mt(st, sd)); }\n-      'I' { ret ty::mk_ivec(st.tcx, parse_mt(st, sd)); }\n+      'I' { ret ty::mk_vec(st.tcx, parse_mt(st, sd)); }\n       'R' {\n         assert (next(st) as char == '[');\n         let fields: [ty::field] = ~[];"}, {"sha": "122d666cc2fc6e1fd7c9f85eb9e2b385c07929f3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -6329,7 +6329,7 @@ fn create_main_wrapper(ccx: &@crate_ctxt, sp: &span,\n                    takes_ivec: bool) -> ValueRef {\n         let ivecarg_ty: ty::arg = {\n             mode: ty::mo_val,\n-            ty: ty::mk_ivec(ccx.tcx, {\n+            ty: ty::mk_vec(ccx.tcx, {\n                 ty: ty::mk_str(ccx.tcx),\n                 mut: ast::imm\n             })"}, {"sha": "8352d5f9e28a725fc866de3c5a8a3afe145c6b2e", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -72,7 +72,7 @@ export mk_mut_ptr;\n export mk_imm_vec;\n export mk_int;\n export mk_istr;\n-export mk_ivec;\n+export mk_vec;\n export mk_mach;\n export mk_native;\n export mk_native_fn;\n@@ -563,7 +563,7 @@ fn mk_mut_ptr(cx: &ctxt, ty: &t) -> t {\n     ret mk_ptr(cx, {ty: ty, mut: ast::mut});\n }\n \n-fn mk_ivec(cx: &ctxt, tm: &mt) -> t { ret gen_ty(cx, ty_vec(tm)); }\n+fn mk_vec(cx: &ctxt, tm: &mt) -> t { ret gen_ty(cx, ty_vec(tm)); }\n \n fn mk_rec(cx: &ctxt, fs: &[field]) -> t { ret gen_ty(cx, ty_rec(fs)); }\n \n@@ -709,7 +709,7 @@ fn fold_ty(cx: &ctxt, fld: fold_mode, ty_0: t) -> t {\n         ty = mk_ptr(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n       ty_vec(tm) {\n-        ty = mk_ivec(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n+        ty = mk_vec(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n       ty_tag(tid, subtys) {\n         let new_subtys: [t] = ~[];\n@@ -2487,7 +2487,7 @@ mod unify {\n                 alt result {\n                   ures_ok(result_sub) {\n                     let mt = {ty: result_sub, mut: mut};\n-                    ret ures_ok(mk_ivec(cx.tcx, mt));\n+                    ret ures_ok(mk_vec(cx.tcx, mt));\n                   }\n                   _ { ret result; }\n                 }"}, {"sha": "7d6ba76e7ebdd9a2bbf59379e4d2452750065604", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -325,7 +325,7 @@ fn ast_ty_to_ty(tcx: &ty::ctxt, getter: &ty_getter, ast_ty: &@ast::ty) ->\n         typ = ty::mk_box(tcx, ast_mt_to_mt(tcx, getter, mt));\n       }\n       ast::ty_vec(mt) {\n-        typ = ty::mk_ivec(tcx, ast_mt_to_mt(tcx, getter, mt));\n+        typ = ty::mk_vec(tcx, ast_mt_to_mt(tcx, getter, mt));\n       }\n       ast::ty_ptr(mt) {\n         typ = ty::mk_ptr(tcx, ast_mt_to_mt(tcx, getter, mt));\n@@ -2182,7 +2182,7 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n         for e: @ast::expr in args {\n             bot |= check_expr_with(fcx, e, t);\n         }\n-        let typ = ty::mk_ivec(tcx, {ty: t, mut: mut});\n+        let typ = ty::mk_vec(tcx, {ty: t, mut: mut});\n         write::ty_only_fixup(fcx, id, typ);\n       }\n       ast::expr_tup(elts) {"}, {"sha": "ebd3bf339bbde5e58c7e9045d30928d8080b1954", "filename": "src/fuzzer/ast_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ffuzzer%2Fast_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ffuzzer%2Fast_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fast_match.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -1,7 +1,7 @@\n use std;\n import std::vec;\n \n-fn ivec_equal<T>(v: &[T], u: &[T], element_equality_test: fn(&T, &T) -> bool )\n+fn vec_equal<T>(v: &[T], u: &[T], element_equality_test: fn(&T, &T) -> bool )\n    -> bool {\n     let Lv = vec::len(v);\n     if Lv != vec::len(u) { ret false; }\n@@ -18,10 +18,10 @@ fn builtin_equal<T>(a: &T, b: &T) -> bool { ret a == b; }\n fn main() {\n     assert (builtin_equal(5, 5));\n     assert (!builtin_equal(5, 4));\n-    assert (!ivec_equal(~[5, 5], ~[5], builtin_equal));\n-    assert (!ivec_equal(~[5, 5], ~[5, 4], builtin_equal));\n-    assert (!ivec_equal(~[5, 5], ~[4, 5], builtin_equal));\n-    assert (ivec_equal(~[5, 5], ~[5, 5], builtin_equal));\n+    assert (!vec_equal(~[5, 5], ~[5], builtin_equal));\n+    assert (!vec_equal(~[5, 5], ~[5, 4], builtin_equal));\n+    assert (!vec_equal(~[5, 5], ~[4, 5], builtin_equal));\n+    assert (vec_equal(~[5, 5], ~[5, 5], builtin_equal));\n \n     log_err \"Pass\";\n }"}, {"sha": "2d6c51c42258b3ce5120e485af16aea166bde010", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -21,9 +21,9 @@ https://github.com/graydon/rust/issues/640\n */\n \n use std;\n-import std::ivec;\n-import std::ivec::slice;\n-import std::ivec::len;\n+import std::vec;\n+import std::vec::slice;\n+import std::vec::len;\n import std::int;\n \n //fn vec_reverse(&<T> v) -> [T] { ... }"}, {"sha": "c42ef07bfb2db91bd4286e5ae6b2091e76d3e78b", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -16,8 +16,7 @@ export is_true;\n export is_false;\n export to_vec;\n export to_str;\n-export eq_ivec;\n-\n+export eq_vec;\n \n // FIXME: With recursive object types, we could implement binary methods like\n //        union, intersection, and difference. At that point, we could write\n@@ -161,7 +160,7 @@ fn to_str(v: &t) -> str {\n     ret rs;\n }\n \n-fn eq_ivec(v0: &t, v1: &[uint]) -> bool {\n+fn eq_vec(v0: &t, v1: &[uint]) -> bool {\n     assert (v0.nbits == vec::len::<uint>(v1));\n     let len = v0.nbits;\n     let i = 0u;"}, {"sha": "b725507502b04f3d2c65baba7eae0bf848740d27", "filename": "src/lib/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -10,7 +10,6 @@ export test_name;\n export test_fn;\n export test_desc;\n export test_main;\n-export test_main_ivec;\n export test_result;\n export test_opts;\n export tr_ok;"}, {"sha": "d434562cf3cbd014c86bfad1fe9ba8b8959dccb0", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -64,7 +64,7 @@ fn run(handle: &handle, lib_path: &str,\n     let ch = chan(p);\n     send(handle.chan, exec(str::bytes(lib_path),\n                            str::bytes(prog),\n-                           clone_ivecstr(args),\n+                           clone_vecstr(args),\n                            ch));\n     let resp = recv(p);\n \n@@ -123,7 +123,7 @@ fn worker(p: port<request>) {\n                 {\n                     lib_path: str::unsafe_from_bytes(lib_path),\n                     prog: str::unsafe_from_bytes(prog),\n-                    args: clone_ivecu8str(args),\n+                    args: clone_vecu8str(args),\n                     respchan: respchan\n                 }\n               }\n@@ -178,15 +178,15 @@ fn append_lib_path(path: &str) { export_lib_path(util::make_new_path(path)); }\n \n fn export_lib_path(path: &str) { setenv(util::lib_path_env_var(), path); }\n \n-fn clone_ivecstr(v: &[str]) -> [[u8]] {\n+fn clone_vecstr(v: &[str]) -> [[u8]] {\n     let r = ~[];\n     for t: str in vec::slice(v, 0u, vec::len(v)) {\n         r += ~[str::bytes(t)];\n     }\n     ret r;\n }\n \n-fn clone_ivecu8str(v: &[[u8]]) -> [str] {\n+fn clone_vecu8str(v: &[[u8]]) -> [str] {\n     let r = ~[];\n     for t in vec::slice(v, 0u, vec::len(v)) {\n         r += ~[str::unsafe_from_bytes(t)];"}, {"sha": "7666063239dd1786211a9e07fab8fddcf5d96c13", "filename": "src/test/stdtest/bitv.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ftest%2Fstdtest%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2/src%2Ftest%2Fstdtest%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fbitv.rs?ref=1aa1f8c4b7595ced89e0a335c3ebafe3c6d5aba2", "patch": "@@ -11,16 +11,16 @@ fn test_0_elements() {\n     exp = vec::init_elt::<uint>(0u, 0u);\n     // FIXME: why can't I write vec::<uint>()?\n \n-    assert (bitv::eq_ivec(act, exp));\n+    assert (bitv::eq_vec(act, exp));\n }\n \n #[test]\n fn test_1_element() {\n     let act;\n     act = bitv::create(1u, false);\n-    assert (bitv::eq_ivec(act, ~[0u]));\n+    assert (bitv::eq_vec(act, ~[0u]));\n     act = bitv::create(1u, true);\n-    assert (bitv::eq_ivec(act, ~[1u]));\n+    assert (bitv::eq_vec(act, ~[1u]));\n }\n \n #[test]\n@@ -29,11 +29,11 @@ fn test_10_elements() {\n     // all 0\n \n     act = bitv::create(10u, false);\n-    assert (bitv::eq_ivec(act, ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_vec(act, ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(10u, true);\n-    assert (bitv::eq_ivec(act, ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_vec(act, ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(10u, false);\n@@ -42,7 +42,7 @@ fn test_10_elements() {\n     bitv::set(act, 2u, true);\n     bitv::set(act, 3u, true);\n     bitv::set(act, 4u, true);\n-    assert (bitv::eq_ivec(act, ~[1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_vec(act, ~[1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(10u, false);\n@@ -51,15 +51,15 @@ fn test_10_elements() {\n     bitv::set(act, 7u, true);\n     bitv::set(act, 8u, true);\n     bitv::set(act, 9u, true);\n-    assert (bitv::eq_ivec(act, ~[0u, 0u, 0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_vec(act, ~[0u, 0u, 0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(10u, false);\n     bitv::set(act, 0u, true);\n     bitv::set(act, 3u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 9u, true);\n-    assert (bitv::eq_ivec(act, ~[1u, 0u, 0u, 1u, 0u, 0u, 1u, 0u, 0u, 1u]));\n+    assert (bitv::eq_vec(act, ~[1u, 0u, 0u, 1u, 0u, 0u, 1u, 0u, 0u, 1u]));\n }\n \n #[test]\n@@ -68,14 +68,14 @@ fn test_31_elements() {\n     // all 0\n \n     act = bitv::create(31u, false);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(31u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u]));\n@@ -90,7 +90,7 @@ fn test_31_elements() {\n     bitv::set(act, 5u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 7u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u]));\n@@ -105,7 +105,7 @@ fn test_31_elements() {\n     bitv::set(act, 21u, true);\n     bitv::set(act, 22u, true);\n     bitv::set(act, 23u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u]));\n@@ -119,7 +119,7 @@ fn test_31_elements() {\n     bitv::set(act, 28u, true);\n     bitv::set(act, 29u, true);\n     bitv::set(act, 30u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u]));\n@@ -129,7 +129,7 @@ fn test_31_elements() {\n     bitv::set(act, 3u, true);\n     bitv::set(act, 17u, true);\n     bitv::set(act, 30u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 1u]));\n@@ -141,14 +141,14 @@ fn test_32_elements() {\n     // all 0\n \n     act = bitv::create(32u, false);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(32u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u, 1u]));\n@@ -163,7 +163,7 @@ fn test_32_elements() {\n     bitv::set(act, 5u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 7u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u]));\n@@ -178,7 +178,7 @@ fn test_32_elements() {\n     bitv::set(act, 21u, true);\n     bitv::set(act, 22u, true);\n     bitv::set(act, 23u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u]));\n@@ -193,7 +193,7 @@ fn test_32_elements() {\n     bitv::set(act, 29u, true);\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u, 1u]));\n@@ -204,7 +204,7 @@ fn test_32_elements() {\n     bitv::set(act, 17u, true);\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 1u, 1u]));\n@@ -216,14 +216,14 @@ fn test_33_elements() {\n     // all 0\n \n     act = bitv::create(33u, false);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(33u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n@@ -238,7 +238,7 @@ fn test_33_elements() {\n     bitv::set(act, 5u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 7u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n@@ -253,7 +253,7 @@ fn test_33_elements() {\n     bitv::set(act, 21u, true);\n     bitv::set(act, 22u, true);\n     bitv::set(act, 23u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n@@ -268,7 +268,7 @@ fn test_33_elements() {\n     bitv::set(act, 29u, true);\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n                            1u, 1u, 1u, 1u, 1u, 1u, 0u]));\n@@ -280,7 +280,7 @@ fn test_33_elements() {\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n     bitv::set(act, 32u, true);\n-    assert (bitv::eq_ivec(act,\n+    assert (bitv::eq_vec(act,\n                          ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n                            0u, 0u, 0u, 0u, 1u, 1u, 1u]));"}]}