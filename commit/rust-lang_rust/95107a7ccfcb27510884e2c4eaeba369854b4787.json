{"sha": "95107a7ccfcb27510884e2c4eaeba369854b4787", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MTA3YTdjY2ZjYjI3NTEwODg0ZTJjNGVhZWJhMzY5ODU0YjQ3ODc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-29T17:54:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-29T17:54:57Z"}, "message": "Merge #8241\n\n8241: internal: cleanup hprof r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0fcd4d70d6928cf3a53b83e13ee47f5fbd2c447a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fcd4d70d6928cf3a53b83e13ee47f5fbd2c447a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95107a7ccfcb27510884e2c4eaeba369854b4787", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYhRxCRBK7hj4Ov3rIwAAdHIIADU4hW8C4TlitTD2ixeVsWar\nnSFYQxIEqNspJ0UFI33bXeMXyR5nwNdzVh/crMFoUR9i3hdfQNr8lLfNwcWyaHkq\nDrXUXX+Gg2ic/dsBZnup1B9rBw70Av3QE/IXQ5TljqsMmcMq0CuwsdfEKC/wTqc6\nYded96BitAplckKxUk0CBDxBfDm3whqiaDZjLEGQwn3C5x3/EdSI0Y7REOVZk0Em\nAOh5ETCb4cMHlSYy479yHnTtnCheGzEnGAeML4o6An3XqUvB+UmSxrch0CW4fiy5\ntf5fkFX3Wiri7+3DXPySwDwLNtiO8A8cF6ZVISNgeUJk4UbXXuaBywAvGxAcbPQ=\n=BTkp\n-----END PGP SIGNATURE-----\n", "payload": "tree 0fcd4d70d6928cf3a53b83e13ee47f5fbd2c447a\nparent 5dd6b931388dac00d272a41a139c4f0cc3c449dc\nparent 2381a54c2f6ff1d97b9d6cb982dde5644f09a396\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617040497 +0000\ncommitter GitHub <noreply@github.com> 1617040497 +0000\n\nMerge #8241\n\n8241: internal: cleanup hprof r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95107a7ccfcb27510884e2c4eaeba369854b4787", "html_url": "https://github.com/rust-lang/rust/commit/95107a7ccfcb27510884e2c4eaeba369854b4787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95107a7ccfcb27510884e2c4eaeba369854b4787/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd6b931388dac00d272a41a139c4f0cc3c449dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd6b931388dac00d272a41a139c4f0cc3c449dc", "html_url": "https://github.com/rust-lang/rust/commit/5dd6b931388dac00d272a41a139c4f0cc3c449dc"}, {"sha": "2381a54c2f6ff1d97b9d6cb982dde5644f09a396", "url": "https://api.github.com/repos/rust-lang/rust/commits/2381a54c2f6ff1d97b9d6cb982dde5644f09a396", "html_url": "https://github.com/rust-lang/rust/commit/2381a54c2f6ff1d97b9d6cb982dde5644f09a396"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "014e906e62eee9039032a85993b95ff8f638618e", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/95107a7ccfcb27510884e2c4eaeba369854b4787/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95107a7ccfcb27510884e2c4eaeba369854b4787/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=95107a7ccfcb27510884e2c4eaeba369854b4787", "patch": "@@ -1,5 +1,4 @@\n //! Simple hierarchical profiler\n-use once_cell::sync::Lazy;\n use std::{\n     cell::RefCell,\n     collections::{BTreeMap, HashSet},\n@@ -12,6 +11,8 @@ use std::{\n     time::{Duration, Instant},\n };\n \n+use once_cell::sync::Lazy;\n+\n use crate::tree::{Idx, Tree};\n \n /// Filtering syntax\n@@ -56,12 +57,12 @@ type Label = &'static str;\n ///  0ms - profile\n ///      0ms - profile2\n /// ```\n+#[inline]\n pub fn span(label: Label) -> ProfileSpan {\n-    assert!(!label.is_empty());\n+    debug_assert!(!label.is_empty());\n \n-    if PROFILING_ENABLED.load(Ordering::Relaxed)\n-        && PROFILE_STACK.with(|stack| stack.borrow_mut().push(label))\n-    {\n+    let enabled = PROFILING_ENABLED.load(Ordering::Relaxed);\n+    if enabled && with_profile_stack(|stack| stack.push(label)) {\n         ProfileSpan(Some(ProfilerImpl { label, detail: None }))\n     } else {\n         ProfileSpan(None)\n@@ -85,14 +86,19 @@ impl ProfileSpan {\n }\n \n impl Drop for ProfilerImpl {\n+    #[inline]\n     fn drop(&mut self) {\n-        PROFILE_STACK.with(|it| it.borrow_mut().pop(self.label, self.detail.take()));\n+        with_profile_stack(|it| it.pop(self.label, self.detail.take()));\n     }\n }\n \n static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n static FILTER: Lazy<RwLock<Filter>> = Lazy::new(Default::default);\n-thread_local!(static PROFILE_STACK: RefCell<ProfileStack> = RefCell::new(ProfileStack::new()));\n+\n+fn with_profile_stack<T>(f: impl FnOnce(&mut ProfileStack) -> T) -> T {\n+    thread_local!(static STACK: RefCell<ProfileStack> = RefCell::new(ProfileStack::new()));\n+    STACK.with(|it| f(&mut *it.borrow_mut()))\n+}\n \n #[derive(Default, Clone, Debug)]\n struct Filter {"}]}