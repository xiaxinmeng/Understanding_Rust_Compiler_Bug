{"sha": "f655671e12281c1b6ea9d22a0695c14a70de54ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NTU2NzFlMTIyODFjMWI2ZWE5ZDIyYTA2OTVjMTRhNzBkZTU0ZWU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-04T07:11:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-04T07:11:49Z"}, "message": "Merge pull request #2983 from topecongiro/issue-2642\n\nHandle raw string literals in CharClasses", "tree": {"sha": "0e5b53c2dca4714511da6507dfa6d32b03ad4b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e5b53c2dca4714511da6507dfa6d32b03ad4b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f655671e12281c1b6ea9d22a0695c14a70de54ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbjjA1CRBK7hj4Ov3rIwAAdHIIACnCKH3XEWy/Xg7kvJmZ5gJH\nTVWvQeerSITJJ6P5zJDDXQXlRKOCQ6aRsrfONm5HjXMup4Rk1tvnmIVysn0rj/DW\nydIg+eeYLB2e9tWXgOsmHIB2IKu6IofhMlInOudLhg7TTUAlGqfCIfJLr20t6JO9\n2xG0ZTuMLJuXUO5D0eZwirJZHi3kF0FbrOk4GDodEkT48ij8rpvAe6DFLnlF0vLd\n5LWWYUEG5ayjGNEWIe1GWgPIgsm7MY3P8Ao+x6JKAwaO3Oa5W+bLJ5alSka2Wyk0\nxH9blRn0Lz//nsA0+ObrRHyzgbU98RytpGSaZsJJATCWQnqUWjUZ0SRxdefJX9E=\n=mK3D\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e5b53c2dca4714511da6507dfa6d32b03ad4b8b\nparent 414f98e775d1cc21c31f74b8267e24b6897e1c2f\nparent 67480422b98fce60e2f34b924cb8e85e1fb0a37f\nauthor Nick Cameron <nrc@ncameron.org> 1536045109 +1200\ncommitter GitHub <noreply@github.com> 1536045109 +1200\n\nMerge pull request #2983 from topecongiro/issue-2642\n\nHandle raw string literals in CharClasses"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f655671e12281c1b6ea9d22a0695c14a70de54ee", "html_url": "https://github.com/rust-lang/rust/commit/f655671e12281c1b6ea9d22a0695c14a70de54ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f655671e12281c1b6ea9d22a0695c14a70de54ee/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "414f98e775d1cc21c31f74b8267e24b6897e1c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/414f98e775d1cc21c31f74b8267e24b6897e1c2f", "html_url": "https://github.com/rust-lang/rust/commit/414f98e775d1cc21c31f74b8267e24b6897e1c2f"}, {"sha": "67480422b98fce60e2f34b924cb8e85e1fb0a37f", "url": "https://api.github.com/repos/rust-lang/rust/commits/67480422b98fce60e2f34b924cb8e85e1fb0a37f", "html_url": "https://github.com/rust-lang/rust/commit/67480422b98fce60e2f34b924cb8e85e1fb0a37f"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "a48012d411ec0ee35b96ae12638c22ba3dec7387", "filename": "src/comment.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f655671e12281c1b6ea9d22a0695c14a70de54ee/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f655671e12281c1b6ea9d22a0695c14a70de54ee/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=f655671e12281c1b6ea9d22a0695c14a70de54ee", "patch": "@@ -785,6 +785,9 @@ enum CharClassesStatus {\n     Normal,\n     LitString,\n     LitStringEscape,\n+    LitRawString(u32),\n+    RawStringPrefix(u32),\n+    RawStringSuffix(u32),\n     LitChar,\n     LitCharEscape,\n     // The u32 is the nesting deepness of the comment\n@@ -858,6 +861,20 @@ where\n     }\n }\n \n+fn is_raw_string_suffix<T>(iter: &mut MultiPeek<T>, count: u32) -> bool\n+where\n+    T: Iterator,\n+    T::Item: RichChar,\n+{\n+    for _ in 0..count {\n+        match iter.peek() {\n+            Some(c) if c.get_char() == '#' => continue,\n+            _ => return false,\n+        }\n+    }\n+    true\n+}\n+\n impl<T> Iterator for CharClasses<T>\n where\n     T: Iterator,\n@@ -870,6 +887,43 @@ where\n         let chr = item.get_char();\n         let mut char_kind = FullCodeCharKind::Normal;\n         self.status = match self.status {\n+            CharClassesStatus::LitRawString(sharps) => {\n+                char_kind = FullCodeCharKind::InString;\n+                match chr {\n+                    '\"' => {\n+                        if sharps == 0 {\n+                            char_kind = FullCodeCharKind::Normal;\n+                            CharClassesStatus::Normal\n+                        } else if is_raw_string_suffix(&mut self.base, sharps) {\n+                            CharClassesStatus::RawStringSuffix(sharps)\n+                        } else {\n+                            CharClassesStatus::LitRawString(sharps)\n+                        }\n+                    }\n+                    _ => CharClassesStatus::LitRawString(sharps),\n+                }\n+            }\n+            CharClassesStatus::RawStringPrefix(sharps) => {\n+                char_kind = FullCodeCharKind::InString;\n+                match chr {\n+                    '#' => CharClassesStatus::RawStringPrefix(sharps + 1),\n+                    '\"' => CharClassesStatus::LitRawString(sharps),\n+                    _ => CharClassesStatus::Normal, // Unreachable.\n+                }\n+            }\n+            CharClassesStatus::RawStringSuffix(sharps) => {\n+                match chr {\n+                    '#' => {\n+                        if sharps == 1 {\n+                            CharClassesStatus::Normal\n+                        } else {\n+                            char_kind = FullCodeCharKind::InString;\n+                            CharClassesStatus::RawStringSuffix(sharps - 1)\n+                        }\n+                    }\n+                    _ => CharClassesStatus::Normal, // Unreachable\n+                }\n+            }\n             CharClassesStatus::LitString => match chr {\n                 '\"' => CharClassesStatus::Normal,\n                 '\\\\' => {\n@@ -892,6 +946,13 @@ where\n             },\n             CharClassesStatus::LitCharEscape => CharClassesStatus::LitChar,\n             CharClassesStatus::Normal => match chr {\n+                'r' => match self.base.peek().map(|c| c.get_char()) {\n+                    Some('#') | Some('\"') => {\n+                        char_kind = FullCodeCharKind::InString;\n+                        CharClassesStatus::RawStringPrefix(0)\n+                    }\n+                    _ => CharClassesStatus::Normal,\n+                },\n                 '\"' => {\n                     char_kind = FullCodeCharKind::InString;\n                     CharClassesStatus::LitString"}, {"sha": "5aaca0c83fa3195a2f5a6b3b93bc598de51aab89", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f655671e12281c1b6ea9d22a0695c14a70de54ee/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f655671e12281c1b6ea9d22a0695c14a70de54ee/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=f655671e12281c1b6ea9d22a0695c14a70de54ee", "patch": "@@ -279,3 +279,23 @@ fn foo() {\n         }\n     }\n }\n+\n+// #2642\n+macro_rules! template {\n+    ($name: expr) => {\n+        format_args!(r##\"\n+\"http://example.com\"\n+\n+# test\n+\"##, $name)\n+    }\n+}\n+\n+macro_rules! template {\n+    () => {\n+        format_args!(r\"\n+//\n+\n+\")\n+    }\n+}"}, {"sha": "97444aef404439480370d7b1d352426287466b2c", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f655671e12281c1b6ea9d22a0695c14a70de54ee/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f655671e12281c1b6ea9d22a0695c14a70de54ee/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=f655671e12281c1b6ea9d22a0695c14a70de54ee", "patch": "@@ -333,3 +333,28 @@ fn foo() {\n         }\n     }\n }\n+\n+// #2642\n+macro_rules! template {\n+    ($name:expr) => {\n+        format_args!(\n+            r##\"\n+\"http://example.com\"\n+\n+# test\n+\"##,\n+            $name\n+        )\n+    };\n+}\n+\n+macro_rules! template {\n+    () => {\n+        format_args!(\n+            r\"\n+//\n+\n+\"\n+        )\n+    };\n+}"}]}