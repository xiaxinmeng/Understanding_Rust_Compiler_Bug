{"sha": "83173c68f5f938481a61ba370b2ef11556163ece", "node_id": "C_kwDOAAsO6NoAKDgzMTczYzY4ZjVmOTM4NDgxYTYxYmEzNzBiMmVmMTE1NTYxNjNlY2U", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-29T12:50:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-02T23:26:29Z"}, "message": "Add partial propagation test.", "tree": {"sha": "39e4f6f0574299f55f4253d8104d2727117964e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39e4f6f0574299f55f4253d8104d2727117964e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83173c68f5f938481a61ba370b2ef11556163ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83173c68f5f938481a61ba370b2ef11556163ece", "html_url": "https://github.com/rust-lang/rust/commit/83173c68f5f938481a61ba370b2ef11556163ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83173c68f5f938481a61ba370b2ef11556163ece/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ec94930b0fa85fea2684a5da4f90376e5633a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ec94930b0fa85fea2684a5da4f90376e5633a5", "html_url": "https://github.com/rust-lang/rust/commit/10ec94930b0fa85fea2684a5da4f90376e5633a5"}], "stats": {"total": 182, "additions": 162, "deletions": 20}, "files": [{"sha": "6ac460db86f8114e9e8c3ae6c0e18edfe36064e2", "filename": "tests/mir-opt/const_prop/aggregate.foo.ConstProp.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.diff?ref=83173c68f5f938481a61ba370b2ef11556163ece", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `foo` before ConstProp\n++ // MIR for `foo` after ConstProp\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n+      let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+      let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+      let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+      let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n+      let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n+      let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+      scope 1 {\n+          debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n+          let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          scope 2 {\n+              debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+          StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+          StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+          _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+          _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+          StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n+-         _3 = (_4.0: i32);                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+-         _2 = Add(move _3, const 1_i32);  // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n++         _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n++         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n+          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n+          StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n+          StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+          StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+          StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+          _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+          _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+          StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n+-         _7 = (_8.1: i32);                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+-         _6 = Add(move _7, const 2_i32);  // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n++         _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n++         _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n+          StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n+          StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n+          StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "2ef6d74e52846abc966636764c231d6284b16110", "filename": "tests/mir-opt/const_prop/aggregate.foo.PreCodegen.after.mir", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.mir?ref=83173c68f5f938481a61ba370b2ef11556163ece", "patch": "@@ -0,0 +1,49 @@\n+// MIR for `foo` after PreCodegen\n+\n+fn foo(_1: u8) -> () {\n+    debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n+    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n+    let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+    let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+    let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+    let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n+    let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n+    let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+    scope 1 {\n+        debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n+        let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        scope 2 {\n+            debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+        StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+        _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+        _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+        StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n+        _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n+        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n+        StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n+        StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+        StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+        StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+        _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+        _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+        StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n+        _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+        _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n+        StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n+        StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n+        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n+        StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "f6e58955b4f607bda88d14caaad97155edd15853", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=83173c68f5f938481a61ba370b2ef11556163ece", "patch": "@@ -3,9 +3,11 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+      let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+      let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+      let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n+      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n       }\n@@ -14,16 +16,29 @@\n           StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n           StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-          _3 = (const 0_i32, const 1_i32, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n--         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n--         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n-+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-+         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+          _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+-         _2 = (_3.1: u8);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+-         _1 = Add(move _2, const 0_u8);   // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n++         _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n++         _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n           StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n           StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n+          StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+          StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+-         _5 = _1;                         // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n++         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+          _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+                                           // mir::Constant\n+                                           // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                           // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n+          StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n       }\n   }\n   "}, {"sha": "4706af92cba982460cb000b76ce91829be11aa13", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.mir", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir?ref=83173c68f5f938481a61ba370b2ef11556163ece", "patch": "@@ -2,9 +2,11 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n-    let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n-    let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-    let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+    let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+    let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+    let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+    let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n+    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n     }\n@@ -13,13 +15,25 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n         StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n         StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        _3 = (const 0_i32, const 1_i32, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n-        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n-        _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+        _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+        _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n         StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n         StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n-        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n-        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n+        StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+        StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+        _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+        _4 = foo(move _5) -> bb1;        // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+                                         // mir::Constant\n+                                         // + span: $DIR/aggregate.rs:8:5: 8:8\n+                                         // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n+        StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n+        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n     }\n }"}, {"sha": "aa123b7a8664dfb839013275b03e6b92f55d22f7", "filename": "tests/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83173c68f5f938481a61ba370b2ef11556163ece/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=83173c68f5f938481a61ba370b2ef11556163ece", "patch": "@@ -5,4 +5,13 @@\n // EMIT_MIR aggregate.main.PreCodegen.after.mir\n fn main() {\n     let x = (0, 1, 2).1 + 0;\n+    foo(x);\n+}\n+\n+// EMIT_MIR aggregate.foo.ConstProp.diff\n+// EMIT_MIR aggregate.foo.PreCodegen.after.mir\n+fn foo(x: u8) {\n+    // Verify that we still propagate if part of the aggregate is not known.\n+    let first = (0, x).0 + 1;\n+    let second = (x, 1).1 + 2;\n }"}]}