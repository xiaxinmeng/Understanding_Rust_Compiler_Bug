{"sha": "580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MGQ1MjdhYTI5NzJhZDFmN2NiZTY1ZjJhOThhMGRiYzkyZDE0Zjc=", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@dream.(none)", "date": "2011-02-10T19:32:22Z"}, "committer": {"name": "Rafael Avila de Espindola", "email": "espindola@dream.(none)", "date": "2011-02-10T19:36:38Z"}, "message": "Add missing fold of native functions.", "tree": {"sha": "b097c7afb39fdb4f903df5db2ea0e8e50734bdc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b097c7afb39fdb4f903df5db2ea0e8e50734bdc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7", "html_url": "https://github.com/rust-lang/rust/commit/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7/comments", "author": null, "committer": null, "parents": [{"sha": "3d63aa14e0db38afa06467db8e17722c4f744eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d63aa14e0db38afa06467db8e17722c4f744eac", "html_url": "https://github.com/rust-lang/rust/commit/3d63aa14e0db38afa06467db8e17722c4f744eac"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "7e5c2d26aef5f74c40bfb599bd08af9a489b0764", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7", "patch": "@@ -872,7 +872,8 @@ fn fold_native_item[ENV](&ENV env, ast_fold[ENV] fld,\n             ret fld.fold_native_item_ty(env_, i.span, ident, id);\n         }\n         case (ast.native_item_fn(?ident, ?fn_decl, ?ty_params, ?id)) {\n-            ret fld.fold_native_item_fn(env_, i.span, ident, fn_decl,\n+            auto d = fold_fn_decl[ENV](env_, fld, fn_decl);\n+            ret fld.fold_native_item_fn(env_, i.span, ident, d,\n                                         ty_params, id);\n         }\n     }"}, {"sha": "8384906d1344354517360953af74cab0758d23d1", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=580d527aa2972ad1f7cbe65f2a98a0dbc92d14f7", "patch": "@@ -18,6 +18,7 @@ import std._vec;\n tag scope {\n     scope_crate(@ast.crate);\n     scope_item(@ast.item);\n+    scope_native_item(@ast.native_item);\n     scope_loop(@ast.decl); // there's only 1 decl per loop.\n     scope_block(ast.block);\n     scope_arm(ast.arm);\n@@ -309,6 +310,23 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n         }\n     }\n \n+    fn handle_fn_decl(ast.ident i, &ast.fn_decl decl,\n+                      &vec[ast.ty_param] ty_params) -> option.t[def_wrap] {\n+        for (ast.arg a in decl.inputs) {\n+            if (_str.eq(a.ident, i)) {\n+                auto t = ast.def_arg(a.id);\n+                ret some(def_wrap_other(t));\n+            }\n+        }\n+        for (ast.ty_param tp in ty_params) {\n+            if (_str.eq(tp.ident, i)) {\n+                auto t = ast.def_ty_arg(tp.id);\n+                ret some(def_wrap_other(t));\n+            }\n+        }\n+        ret none[def_wrap];\n+    }\n+\n     fn in_scope(ast.ident i, &scope s) -> option.t[def_wrap] {\n         alt (s) {\n \n@@ -319,18 +337,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n             case (scope_item(?it)) {\n                 alt (it.node) {\n                     case (ast.item_fn(_, ?f, ?ty_params, _, _)) {\n-                        for (ast.arg a in f.decl.inputs) {\n-                            if (_str.eq(a.ident, i)) {\n-                                auto t = ast.def_arg(a.id);\n-                                ret some(def_wrap_other(t));\n-                            }\n-                        }\n-                        for (ast.ty_param tp in ty_params) {\n-                            if (_str.eq(tp.ident, i)) {\n-                                auto t = ast.def_ty_arg(tp.id);\n-                                ret some(def_wrap_other(t));\n-                            }\n-                        }\n+                        ret handle_fn_decl(i, f.decl, ty_params);\n                     }\n                     case (ast.item_obj(_, ?ob, ?ty_params, _, _)) {\n                         for (ast.obj_field f in ob.fields) {\n@@ -364,6 +371,14 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n                 }\n             }\n \n+            case (scope_native_item(?it)) {\n+                alt (it.node) {\n+                    case (ast.native_item_fn(_, ?decl, ?ty_params, _)) {\n+                        ret handle_fn_decl(i, decl, ty_params);\n+                    }\n+                }\n+            }\n+\n             case (scope_loop(?d)) {\n                 alt (d.node) {\n                     case (ast.decl_local(?local)) {\n@@ -529,6 +544,10 @@ fn update_env_for_item(&env e, @ast.item i) -> env {\n     ret rec(scopes = cons[scope](scope_item(i), @e.scopes) with e);\n }\n \n+fn update_env_for_native_item(&env e, @ast.native_item i) -> env {\n+    ret rec(scopes = cons[scope](scope_native_item(i), @e.scopes) with e);\n+}\n+\n fn update_env_for_block(&env e, &ast.block b) -> env {\n     ret rec(scopes = cons[scope](scope_block(b), @e.scopes) with e);\n }\n@@ -555,6 +574,8 @@ fn resolve_imports(session.session sess, @ast.crate crate) -> @ast.crate {\n                     = bind fold_view_item_import(_,_,import_index,_,_,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n+                update_env_for_native_item =\n+                    bind update_env_for_native_item(_,_),\n                 update_env_for_block = bind update_env_for_block(_,_),\n                 update_env_for_arm = bind update_env_for_arm(_,_),\n                 update_env_for_expr = bind update_env_for_expr(_,_)\n@@ -577,6 +598,8 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n                 fold_ty_path = bind fold_ty_path(_,_,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n+                update_env_for_native_item =\n+                    bind update_env_for_native_item(_,_),\n                 update_env_for_block = bind update_env_for_block(_,_),\n                 update_env_for_arm = bind update_env_for_arm(_,_),\n                 update_env_for_expr = bind update_env_for_expr(_,_)"}]}