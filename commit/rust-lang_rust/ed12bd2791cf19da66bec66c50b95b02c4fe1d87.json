{"sha": "ed12bd2791cf19da66bec66c50b95b02c4fe1d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMTJiZDI3OTFjZjE5ZGE2NmJlYzY2YzUwYjk1YjAyYzRmZTFkODc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T07:39:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T07:39:53Z"}, "message": "Rename", "tree": {"sha": "046cc67ffbf9fd6bde92d90cdea3ca15da6d1ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/046cc67ffbf9fd6bde92d90cdea3ca15da6d1ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed12bd2791cf19da66bec66c50b95b02c4fe1d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed12bd2791cf19da66bec66c50b95b02c4fe1d87", "html_url": "https://github.com/rust-lang/rust/commit/ed12bd2791cf19da66bec66c50b95b02c4fe1d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed12bd2791cf19da66bec66c50b95b02c4fe1d87/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a61c8481571f8d8e6e08df9024d8dad5efc883de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61c8481571f8d8e6e08df9024d8dad5efc883de", "html_url": "https://github.com/rust-lang/rust/commit/a61c8481571f8d8e6e08df9024d8dad5efc883de"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "d427ed46bf4e6974ae515d935a10a386efbeb2c2", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed12bd2791cf19da66bec66c50b95b02c4fe1d87/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed12bd2791cf19da66bec66c50b95b02c4fe1d87/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=ed12bd2791cf19da66bec66c50b95b02c4fe1d87", "patch": "@@ -102,18 +102,13 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let node = token.parent();\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => {\n-                classify_name_ref(&sema, &name_ref).map(|d| d.definition())\n-            },\n-            ast::Name(name) => {\n-                classify_name(&sema, &name).map(|d| d.definition())\n-            },\n+            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition()),\n+            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition()),\n             _ => None,\n         }\n     };\n     if let Some(definition) = definition {\n-        let range = sema.original_range(&node).range;\n-        if let Some(text) = hover_text_from_name_kind(db, definition) {\n+        if let Some(text) = hover_for_definition(db, definition) {\n             res.markup.push_section(&text);\n         }\n         if !res.is_empty() {\n@@ -129,6 +124,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 res.push_action(action);\n             }\n \n+            let range = sema.original_range(&node).range;\n             return Some(RangeInfo::new(range, res));\n         }\n     }\n@@ -139,20 +135,14 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n     let ty = match_ast! {\n         match node {\n-            ast::MacroCall(_it) => {\n-                // If this node is a MACRO_CALL, it means that `descend_into_macros` failed to resolve.\n-                // (e.g expanding a builtin macro). So we give up here.\n-                return None;\n-            },\n-            ast::Expr(it) => {\n-                sema.type_of_expr(&it)\n-            },\n-            ast::Pat(it) => {\n-                sema.type_of_pat(&it)\n-            },\n-            _ => None,\n+            ast::Expr(it) => sema.type_of_expr(&it)?,\n+            ast::Pat(it) => sema.type_of_pat(&it)?,\n+            // If this node is a MACRO_CALL, it means that `descend_into_macros` failed to resolve.\n+            // (e.g expanding a builtin macro). So we give up here.\n+            ast::MacroCall(_it) => return None,\n+            _ => return None,\n         }\n-    }?;\n+    };\n \n     res.markup.push_section(&rust_code_markup(&ty.display(db)));\n     let range = sema.original_range(&node).range;\n@@ -300,7 +290,7 @@ fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     def.module(db).map(|module| determine_mod_path(db, module, definition_owner_name(db, def)))\n }\n \n-fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<String> {\n+fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<String> {\n     let mod_path = definition_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {"}]}