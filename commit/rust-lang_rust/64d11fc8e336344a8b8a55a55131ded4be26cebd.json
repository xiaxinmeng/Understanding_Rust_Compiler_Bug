{"sha": "64d11fc8e336344a8b8a55a55131ded4be26cebd", "node_id": "C_kwDOAAsO6NoAKDY0ZDExZmM4ZTMzNjM0NGE4YjhhNTVhNTUxMzFkZWQ0YmUyNmNlYmQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-08-25T10:30:46Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-08T08:10:21Z"}, "message": "Clarify some diagnostic messages", "tree": {"sha": "a40d573a030dfadefe4ff159769707b99219677b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a40d573a030dfadefe4ff159769707b99219677b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64d11fc8e336344a8b8a55a55131ded4be26cebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64d11fc8e336344a8b8a55a55131ded4be26cebd", "html_url": "https://github.com/rust-lang/rust/commit/64d11fc8e336344a8b8a55a55131ded4be26cebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64d11fc8e336344a8b8a55a55131ded4be26cebd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cd3cc134a41c92616ff74f652556135404ead8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd3cc134a41c92616ff74f652556135404ead8a", "html_url": "https://github.com/rust-lang/rust/commit/5cd3cc134a41c92616ff74f652556135404ead8a"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "d66cf6d099ad538a3e570326131b2418b2032858", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64d11fc8e336344a8b8a55a55131ded4be26cebd/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d11fc8e336344a8b8a55a55131ded4be26cebd/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=64d11fc8e336344a8b8a55a55131ded4be26cebd", "patch": "@@ -2940,8 +2940,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // though we can easily give a hint that ought to be\n                 // relevant.\n                 err.note(\n-                    \"lifetimes appearing in an associated type are not considered constrained\",\n+                    \"lifetimes appearing in an associated or opaque type are not considered constrained\",\n                 );\n+                err.note(\"consider introducing a named lifetime parameter\");\n             }\n \n             err.emit();"}, {"sha": "499bbd6b6fad2e1a6cdcf821cbe26c39a2254487", "filename": "src/test/ui/associated-types/issue-62200.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.rs?ref=64d11fc8e336344a8b8a55a55131ded4be26cebd", "patch": "@@ -10,6 +10,7 @@ impl T<'_> for S {\n \n fn foo(x: impl Fn(<S as T<'_>>::A) -> <S as T<'_>>::A) {}\n //~^ ERROR binding for associated type `Output` references an anonymous lifetime\n-//~^^ NOTE lifetimes appearing in an associated type are not considered constrained\n+//~| NOTE lifetimes appearing in an associated or opaque type are not considered constrained\n+//~| NOTE consider introducing a named lifetime parameter\n \n fn main() {}"}, {"sha": "04f0728f58ea86bb68a6d0df3130080757797c79", "filename": "src/test/ui/associated-types/issue-62200.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-62200.stderr?ref=64d11fc8e336344a8b8a55a55131ded4be26cebd", "patch": "@@ -4,7 +4,8 @@ error[E0582]: binding for associated type `Output` references an anonymous lifet\n LL | fn foo(x: impl Fn(<S as T<'_>>::A) -> <S as T<'_>>::A) {}\n    |                                       ^^^^^^^^^^^^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error: aborting due to previous error\n "}, {"sha": "9998ee0e8d0c69c801528a509eb6371d10af4f86", "filename": "src/test/ui/issues/issue-47511.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr?ref=64d11fc8e336344a8b8a55a55131ded4be26cebd", "patch": "@@ -4,7 +4,8 @@ error[E0581]: return type references an anonymous lifetime, which is not constra\n LL | fn f(_: X) -> X {\n    |               ^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n   --> $DIR/issue-47511.rs:12:23"}, {"sha": "03fb64b7b94d7ea02224ae7cc4b5060e847a1133", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs?ref=64d11fc8e336344a8b8a55a55131ded4be26cebd", "patch": "@@ -12,15 +12,15 @@ mod lifetime_params {\n     //~^ ERROR binding for associated type `Output` references an anonymous lifetime\n }\n \n-mod type_params {\n+mod lifetime_params_2 {\n     type Ty<'a> = impl FnOnce() -> &'a str;\n     fn defining(s: &str) -> Ty<'_> { move || s }\n     fn execute(ty: Ty<'_>) -> &str { ty() }\n     //~^ ERROR return type references an anonymous lifetime, which is not constrained by the fn input types\n }\n \n // regression test for https://github.com/rust-lang/rust/issues/97104\n-mod type_params2 {\n+mod type_params {\n     type Ty<T> = impl Sized;\n     fn define<T>(s: T) -> Ty<T> { s }\n "}, {"sha": "93953fd06d1fd70687432f25f19f175edcafcfb3", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64d11fc8e336344a8b8a55a55131ded4be26cebd/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.stderr?ref=64d11fc8e336344a8b8a55a55131ded4be26cebd", "patch": "@@ -4,47 +4,53 @@ error[E0581]: return type references an anonymous lifetime, which is not constra\n LL |     fn execute(ty: Ty<'_>) -> &str { todo!() }\n    |                               ^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n   --> $DIR/constrain_inputs.rs:9:35\n    |\n LL |     type BadFnSig = fn(Ty<'_>) -> &str;\n    |                                   ^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error[E0582]: binding for associated type `Output` references an anonymous lifetime, which does not appear in the trait input types\n   --> $DIR/constrain_inputs.rs:11:42\n    |\n LL |     type BadTraitRef = dyn Fn(Ty<'_>) -> &str;\n    |                                          ^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n   --> $DIR/constrain_inputs.rs:18:31\n    |\n LL |     fn execute(ty: Ty<'_>) -> &str { ty() }\n    |                               ^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n   --> $DIR/constrain_inputs.rs:27:37\n    |\n LL |     type BadFnSig = fn(Ty<&str>) -> &str;\n    |                                     ^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error[E0582]: binding for associated type `Output` references an anonymous lifetime, which does not appear in the trait input types\n   --> $DIR/constrain_inputs.rs:29:44\n    |\n LL |     type BadTraitRef = dyn Fn(Ty<&str>) -> &str;\n    |                                            ^^^^\n    |\n-   = note: lifetimes appearing in an associated type are not considered constrained\n+   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n+   = note: consider introducing a named lifetime parameter\n \n error: aborting due to 6 previous errors\n "}]}