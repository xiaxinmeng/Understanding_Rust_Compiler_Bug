{"sha": "907633b1bfc757cf9a415e4573098f58881469f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzYzM2IxYmZjNzU3Y2Y5YTQxNWU0NTczMDk4ZjU4ODgxNDY5ZjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-08T16:33:06Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-16T20:27:38Z"}, "message": "debuginfo: Generate template type parameters for generic functions.\n\nConflicts:\n\tsrc/librustc/lib/llvm.rs\n\tsrc/librustc/middle/trans/debuginfo.rs\n\tsrc/rustllvm/RustWrapper.cpp\n\tsrc/rustllvm/rustllvm.def.in", "tree": {"sha": "296284b285efd8ecbe8c385c62c6b2e39dbfd7ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/296284b285efd8ecbe8c385c62c6b2e39dbfd7ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907633b1bfc757cf9a415e4573098f58881469f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907633b1bfc757cf9a415e4573098f58881469f2", "html_url": "https://github.com/rust-lang/rust/commit/907633b1bfc757cf9a415e4573098f58881469f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907633b1bfc757cf9a415e4573098f58881469f2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dec27bed5b8aa609e091efdeedbd887cbc38fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dec27bed5b8aa609e091efdeedbd887cbc38fca", "html_url": "https://github.com/rust-lang/rust/commit/1dec27bed5b8aa609e091efdeedbd887cbc38fca"}], "stats": {"total": 174, "additions": 165, "deletions": 9}, "files": [{"sha": "4c204b908bc6bc2a0188eff9ceae5a4e28e39cbb", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/907633b1bfc757cf9a415e4573098f58881469f2/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907633b1bfc757cf9a415e4573098f58881469f2/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=907633b1bfc757cf9a415e4573098f58881469f2", "patch": "@@ -2086,6 +2086,16 @@ pub mod llvm {\n \n         #[fast_ffi]\n         pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);\n+\n+        #[fast_ffi]\n+        pub fn LLVMDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,\n+                                                        Scope: ValueRef,\n+                                                        Name: *c_char,\n+                                                        Ty: ValueRef,\n+                                                        File: ValueRef,\n+                                                        LineNo: c_uint,\n+                                                        ColumnNo: c_uint)\n+                                                        -> ValueRef;\n     }\n }\n "}, {"sha": "7bcf54ae62d70ffa94ebd6ec56d99d85eded858f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 88, "deletions": 9, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/907633b1bfc757cf9a415e4573098f58881469f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907633b1bfc757cf9a415e4573098f58881469f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=907633b1bfc757cf9a415e4573098f58881469f2", "patch": "@@ -271,11 +271,11 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n     let cx = fcx.ccx;\n \n     let fnitem = cx.tcx.items.get_copy(&fcx.id);\n-    let (ident, fn_decl, id) = match fnitem {\n+    let (ident, fn_decl, id, generics) = match fnitem {\n         ast_map::node_item(ref item, _) => {\n             match item.node {\n-                ast::item_fn(ref fn_decl, _, _, _, _) => {\n-                    (item.ident, fn_decl, item.id)\n+                ast::item_fn(ref fn_decl, _, _, ref generics, _) => {\n+                    (item.ident, ty, item.id, Some(generics))\n                 }\n                 _ => fcx.ccx.sess.span_bug(item.span,\n                                            \"create_function_metadata: item bound to non-function\")\n@@ -286,17 +286,21 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n                 decl: ref fn_decl,\n                 id: id,\n                 ident: ident,\n+                generics: ref generics,\n                 _\n             },\n             _,\n             _) => {\n-            (ident, fn_decl, id)\n+            (ident, fn_decl, id, Some(generics))\n         }\n         ast_map::node_expr(ref expr) => {\n             match expr.node {\n                 ast::expr_fn_block(ref fn_decl, _) => {\n                     let name = gensym_name(\"fn\");\n-                    (name, fn_decl, expr.id)\n+                    (name, fn_decl, expr.id,\n+                        // This is not quite right. It should actually inherit the generics of the\n+                        // enclosing function.\n+                        None)\n                 }\n                 _ => fcx.ccx.sess.span_bug(expr.span,\n                         \"create_function_metadata: expected an expr_fn_block here\")\n@@ -308,11 +312,12 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n                     decl: ref fn_decl,\n                     id: id,\n                     ident: ident,\n+                    generics: ref generics,\n                     _\n                 }),\n             _,\n             _) => {\n-            (ident, fn_decl, id)\n+            (ident, fn_decl, id, Some(generics))\n         }\n         _ => fcx.ccx.sess.bug(fmt!(\"create_function_metadata: unexpected sort of node: %?\", fnitem))\n     };\n@@ -336,8 +341,18 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n \n     let return_type_metadata = if cx.sess.opts.extra_debuginfo {\n         match fn_decl.output.node {\n-          ast::ty_nil => ptr::null(),\n-          _ => type_metadata(cx, ty::node_id_to_type(cx.tcx, id), fn_decl.output.span)\n+            ast::ty_nil => ptr::null(),\n+            _ => {\n+                let return_type = ty::node_id_to_type(cx.tcx, id);\n+                let return_type = match fcx.param_substs {\n+                    None => return_type,\n+                    Some(substs) => {\n+                        ty::subst_tps(cx.tcx, substs.tys, substs.self_ty, return_type)\n+                    }\n+                };\n+\n+                type_metadata(cx, return_type, ret_ty.span)\n+            }\n         }\n     } else {\n         ptr::null()\n@@ -350,6 +365,8 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n             create_DIArray(DIB(cx), [return_type_metadata]))\n     };\n \n+    let template_parameters: DIArray = get_template_parameters(cx, fcx, generics, file_metadata, span);\n+\n     let fn_metadata =\n         do cx.sess.str_of(ident).with_c_str |name| {\n         do cx.sess.str_of(ident).with_c_str |linkage| {\n@@ -368,7 +385,7 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n                     FlagPrototyped as c_uint,\n                     cx.sess.opts.optimize != session::No,\n                     fcx.llfn,\n-                    ptr::null(),\n+                    template_parameters,\n                     ptr::null())\n             }\n         }};\n@@ -396,6 +413,68 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n \n     dbg_cx(cx).created_functions.insert(id, fn_metadata);\n     return fn_metadata;\n+\n+    fn get_template_parameters(cx: &mut CrateContext,\n+                               fcx: &FunctionContext,\n+                               generics: Option<&ast::Generics>,\n+                               file_metadata: DIFile,\n+                               span: span) -> DIArray {\n+        // Normalize cases\n+        let generics = match generics {\n+            Some(generics_ref) if generics_ref.is_type_parameterized() => Some(generics_ref),\n+            _ => None\n+        };\n+\n+        match generics {\n+            None => {\n+                if (fcx.param_substs.is_some()) {\n+                    cx.sess.span_bug(span, \"debuginfo::create_function_metadata() - \\\n+                        Mismatch between ast::Generics and FunctionContext::param_substs 111\");\n+                }\n+\n+                return ptr::null();\n+            }\n+\n+            Some(generics) => {\n+                let actual_types = match fcx.param_substs {\n+                    Some(@param_substs { tys: ref actual_types, _}) => {\n+                        actual_types\n+                    }\n+                    None => {\n+                        cx.sess.span_bug(span, \"debuginfo::create_function_metadata() - \\\n+                            Mismatch between ast::Generics and FunctionContext::param_substs 222\");\n+                    }\n+                };\n+\n+                let template_params: ~[DIDescriptor] = do generics\n+                    .ty_params\n+                    .iter()\n+                    .enumerate()\n+                    .transform |(index, &ast::TyParam{ ident: ident, _ })| {\n+\n+                        let actual_type = actual_types[index];\n+                        let actual_type_metadata = type_metadata(cx,\n+                                                                 actual_type,\n+                                                                 codemap::dummy_sp());\n+\n+                        do cx.sess.str_of(ident).as_c_str |name| {\n+                            unsafe {\n+                                llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n+                                    DIB(cx),\n+                                    file_metadata,\n+                                    name,\n+                                    actual_type_metadata,\n+                                    ptr::null(),\n+                                    0,\n+                                    0)\n+                            }\n+                        }\n+                    }.collect();\n+\n+                return create_DIArray(DIB(cx), template_params);\n+            }\n+        }\n+    }\n }\n \n "}, {"sha": "61ea0d549b3f02b0800e176aff9cef2c3b47f045", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/907633b1bfc757cf9a415e4573098f58881469f2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/907633b1bfc757cf9a415e4573098f58881469f2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=907633b1bfc757cf9a415e4573098f58881469f2", "patch": "@@ -838,3 +838,21 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n     unwrap<GlobalValue>(Value)->setUnnamedAddr(Unnamed);\n }\n+\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateTemplateTypeParameter(\n+    DIBuilderRef Builder,\n+    LLVMValueRef Scope,\n+    const char* Name,\n+    LLVMValueRef Ty,\n+    LLVMValueRef File = 0,\n+    unsigned LineNo = 0,\n+    unsigned ColumnNo = 0)\n+{\n+    return wrap(Builder->createTemplateTypeParameter(\n+      unwrapDI<DIDescriptor>(Scope),\n+      Name,\n+      unwrapDI<DIType>(Ty),\n+      unwrapDI<MDNode*>(File),\n+      LineNo,\n+      ColumnNo));\n+}"}, {"sha": "0b777abfb87159c968b299c4e722d755a4ca6241", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/907633b1bfc757cf9a415e4573098f58881469f2/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/907633b1bfc757cf9a415e4573098f58881469f2/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=907633b1bfc757cf9a415e4573098f58881469f2", "patch": "@@ -613,4 +613,5 @@ LLVMDIBuilderInsertDeclareBefore\n LLVMDIBuilderCreateEnumerator\n LLVMDIBuilderCreateEnumerationType\n LLVMDIBuilderCreateUnionType\n+LLVMDIBuilderCreateTemplateTypeParameter\n LLVMSetUnnamedAddr"}, {"sha": "8271847f9d07380ceae4e5b2875437829dcf8779", "filename": "src/test/debug-info/generic-function.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/907633b1bfc757cf9a415e4573098f58881469f2/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907633b1bfc757cf9a415e4573098f58881469f2/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs?ref=907633b1bfc757cf9a415e4573098f58881469f2", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print *t0\n+// check:$1 = 1\n+// debugger:print *t1\n+// check:$2 = 2.5\n+// debugger:print ret\n+// check:$3 = {{1, 2.5}, {2.5, 1}}\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print *t0\n+// check:$4 = 3.5\n+// debugger:print *t1\n+// check:$5 = 4\n+// debugger:print ret\n+// check:$6 = {{3.5, 4}, {4, 3.5}}\n+// debugger:continue\n+\n+fn dup_tup<T0: Clone, T1: Clone>(t0: &T0, t1: &T1) -> ((T0, T1), (T1, T0)) {\n+    let ret = ((t0.clone(), t1.clone()), (t1.clone(), t0.clone()));\n+    zzz();\n+    ret\n+}\n+\n+fn main() {\n+\n+    let _ = dup_tup(&1, &2.5);\n+    let _ = dup_tup(&3.5, &4_u16);\n+\n+}\n+\n+fn zzz() {()}"}]}