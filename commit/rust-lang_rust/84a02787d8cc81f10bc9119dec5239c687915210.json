{"sha": "84a02787d8cc81f10bc9119dec5239c687915210", "node_id": "C_kwDOAAsO6NoAKDg0YTAyNzg3ZDhjYzgxZjEwYmM5MTE5ZGVjNTIzOWM2ODc5MTUyMTA", "commit": {"author": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-26T23:13:13Z"}, "committer": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-26T23:39:24Z"}, "message": "Address code review\n\n- Merge pthread_attr_getstack shim to unix/foreign_items.rs", "tree": {"sha": "4fedbffaf141f01575d30bd8c99b3cd6f90e0028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fedbffaf141f01575d30bd8c99b3cd6f90e0028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84a02787d8cc81f10bc9119dec5239c687915210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84a02787d8cc81f10bc9119dec5239c687915210", "html_url": "https://github.com/rust-lang/rust/commit/84a02787d8cc81f10bc9119dec5239c687915210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84a02787d8cc81f10bc9119dec5239c687915210/comments", "author": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "committer": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa8ebb5765146665cb5b8fdc88d12c9b67d0ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa8ebb5765146665cb5b8fdc88d12c9b67d0ca5", "html_url": "https://github.com/rust-lang/rust/commit/aaa8ebb5765146665cb5b8fdc88d12c9b67d0ca5"}], "stats": {"total": 66, "additions": 23, "deletions": 43}, "files": [{"sha": "4993690767c146f35b95658b9c268319cd25dc13", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84a02787d8cc81f10bc9119dec5239c687915210/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a02787d8cc81f10bc9119dec5239c687915210/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=84a02787d8cc81f10bc9119dec5239c687915210", "patch": "@@ -461,6 +461,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n+            // Querying system information\n+            \"pthread_attr_getstack\" => {\n+                // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n+                let [attr_place, addr_place, size_place] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.deref_operand(attr_place)?;\n+                let addr_place = this.deref_operand(addr_place)?;\n+                let size_place = this.deref_operand(size_place)?;\n+\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_ADDR, this.pointer_size()),\n+                    &addr_place.into(),\n+                )?;\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_SIZE, this.pointer_size()),\n+                    &size_place.into(),\n+                )?;\n+\n+                // Return success (`0`).\n+                this.write_null(dest)?;\n+            }\n+\n             | \"signal\"\n             | \"sigaltstack\"\n             if this.frame_in_std() => {"}, {"sha": "cad119233740434f38402fa4c1901dd09d40a0a7", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84a02787d8cc81f10bc9119dec5239c687915210/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a02787d8cc81f10bc9119dec5239c687915210/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=84a02787d8cc81f10bc9119dec5239c687915210", "patch": "@@ -18,28 +18,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n         match link_name.as_str() {\n-            // Querying system information\n-            \"pthread_attr_getstack\" => {\n-                // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n-                let [attr_place, addr_place, size_place] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.deref_operand(attr_place)?;\n-                let addr_place = this.deref_operand(addr_place)?;\n-                let size_place = this.deref_operand(size_place)?;\n-\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_ADDR, this.pointer_size()),\n-                    &addr_place.into(),\n-                )?;\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_SIZE, this.pointer_size()),\n-                    &size_place.into(),\n-                )?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n-            }\n-\n             // Linux's `pthread_getattr_np` equivalent\n             \"pthread_attr_get_np\" if this.frame_in_std() => {\n                 let [_thread, _attr] ="}, {"sha": "500250745c8b74931246c1b67b4e712db7dc56df", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84a02787d8cc81f10bc9119dec5239c687915210/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a02787d8cc81f10bc9119dec5239c687915210/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=84a02787d8cc81f10bc9119dec5239c687915210", "patch": "@@ -80,27 +80,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n-            // Querying system information\n-            \"pthread_attr_getstack\" => {\n-                // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n-                let [attr_place, addr_place, size_place] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.deref_operand(attr_place)?;\n-                let addr_place = this.deref_operand(addr_place)?;\n-                let size_place = this.deref_operand(size_place)?;\n-\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_ADDR, this.pointer_size()),\n-                    &addr_place.into(),\n-                )?;\n-                this.write_scalar(\n-                    Scalar::from_uint(STACK_SIZE, this.pointer_size()),\n-                    &size_place.into(),\n-                )?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n-            }\n+\n \n             // Threading\n             \"prctl\" => {"}]}