{"sha": "3118cbe41c7ce50c3451fd4575ca04a83b0d3e05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMThjYmU0MWM3Y2U1MGMzNDUxZmQ0NTc1Y2EwNGE4M2IwZDNlMDU=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-02-14T01:28:10Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-02-14T01:28:10Z"}, "message": "Allow two-phase borrows of &mut self in ops\n\nWe need two-phase borrows of ops to be in the initial NLL release since without\nthem lots of existing code will break. Fixes #48129", "tree": {"sha": "572c025217ca0a6be42141786543baf60786f4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572c025217ca0a6be42141786543baf60786f4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05", "html_url": "https://github.com/rust-lang/rust/commit/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "html_url": "https://github.com/rust-lang/rust/commit/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032"}], "stats": {"total": 116, "additions": 55, "deletions": 61}, "files": [{"sha": "a3dbf344ab7e090706a5474ae33328da6d06a3a8", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=3118cbe41c7ce50c3451fd4575ca04a83b0d3e05", "patch": "@@ -201,10 +201,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let mutbl = match mt.mutbl {\n                             hir::MutImmutable => AutoBorrowMutability::Immutable,\n                             hir::MutMutable => AutoBorrowMutability::Mutable {\n-                                // For initial two-phase borrow\n-                                // deployment, conservatively omit\n-                                // overloaded binary ops.\n-                                allow_two_phase_borrow: false,\n+                                // Allow two-phase borrows for binops in initial deployment\n+                                // since they desugar to methods\n+                                allow_two_phase_borrow: true,\n                             }\n                         };\n                         let autoref = Adjustment {\n@@ -219,10 +218,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let mutbl = match mt.mutbl {\n                             hir::MutImmutable => AutoBorrowMutability::Immutable,\n                             hir::MutMutable => AutoBorrowMutability::Mutable {\n-                                // For initial two-phase borrow\n-                                // deployment, conservatively omit\n-                                // overloaded binary ops.\n-                                allow_two_phase_borrow: false,\n+                                // Allow two-phase borrows for binops in initial deployment\n+                                // since they desugar to methods\n+                                allow_two_phase_borrow: true,\n                             }\n                         };\n                         let autoref = Adjustment {"}, {"sha": "a57e2fe1cc6d3472d5db98c8065cdee8e8994f4a", "filename": "src/test/compile-fail/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=3118cbe41c7ce50c3451fd4575ca04a83b0d3e05", "patch": "@@ -30,8 +30,6 @@\n // #![feature(rustc_attrs)]\n \n use std::ops::{Index, IndexMut};\n-use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n-use std::ops::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign};\n \n // This is case outlined by Niko that we want to ensure we reject\n // (at least initially).\n@@ -186,56 +184,6 @@ fn coerce_index_op() {\n     //[nll]~^^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n }\n \n-struct A(i32);\n-\n-macro_rules! trivial_binop {\n-    ($Trait:ident, $m:ident) => {\n-        impl $Trait<i32> for A { fn $m(&mut self, rhs: i32) { self.0 = rhs; } }\n-    }\n-}\n-\n-trivial_binop!(AddAssign, add_assign);\n-trivial_binop!(SubAssign, sub_assign);\n-trivial_binop!(MulAssign, mul_assign);\n-trivial_binop!(DivAssign, div_assign);\n-trivial_binop!(RemAssign, rem_assign);\n-trivial_binop!(BitAndAssign, bitand_assign);\n-trivial_binop!(BitOrAssign, bitor_assign);\n-trivial_binop!(BitXorAssign, bitxor_assign);\n-trivial_binop!(ShlAssign, shl_assign);\n-trivial_binop!(ShrAssign, shr_assign);\n-\n-fn overloaded_binops() {\n-    let mut a = A(10);\n-    a += a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a -= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a *= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a /= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a &= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a |= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a ^= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a <<= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a >>= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-}\n-\n fn main() {\n \n     // As a reminder, this is the basic case we want to ensure we handle.\n@@ -256,5 +204,4 @@ fn main() {\n \n     coerce_unsized();\n     coerce_index_op();\n-    overloaded_binops();\n }"}, {"sha": "9bded41e1f93355d1914d77afecc2532851db2bc", "filename": "src/test/run-pass/borrowck/two-phase-bin-ops.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3118cbe41c7ce50c3451fd4575ca04a83b0d3e05/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs?ref=3118cbe41c7ce50c3451fd4575ca04a83b0d3e05", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: lxl nll\n+//[lxl]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+\n+#![cfg_attr(nll, feature(nll))]\n+\n+use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n+use std::ops::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign};\n+\n+struct A(i32);\n+\n+macro_rules! trivial_binop {\n+    ($Trait:ident, $m:ident) => {\n+        impl $Trait<i32> for A { fn $m(&mut self, rhs: i32) { self.0 = rhs; } }\n+    }\n+}\n+\n+trivial_binop!(AddAssign, add_assign);\n+trivial_binop!(SubAssign, sub_assign);\n+trivial_binop!(MulAssign, mul_assign);\n+trivial_binop!(DivAssign, div_assign);\n+trivial_binop!(RemAssign, rem_assign);\n+trivial_binop!(BitAndAssign, bitand_assign);\n+trivial_binop!(BitOrAssign, bitor_assign);\n+trivial_binop!(BitXorAssign, bitxor_assign);\n+trivial_binop!(ShlAssign, shl_assign);\n+trivial_binop!(ShrAssign, shr_assign);\n+\n+fn main() {\n+    let mut a = A(10);\n+    a += a.0;\n+    a -= a.0;\n+    a *= a.0;\n+    a /= a.0;\n+    a &= a.0;\n+    a |= a.0;\n+    a ^= a.0;\n+    a <<= a.0;\n+    a >>= a.0;\n+}"}]}