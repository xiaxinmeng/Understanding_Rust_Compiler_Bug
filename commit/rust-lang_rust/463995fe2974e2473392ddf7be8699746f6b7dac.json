{"sha": "463995fe2974e2473392ddf7be8699746f6b7dac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Mzk5NWZlMjk3NGUyNDczMzkyZGRmN2JlODY5OTc0NmY2YjdkYWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T11:33:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "extract parse_external_module", "tree": {"sha": "2fff007ad240131048a27705b58bca1134ef173e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fff007ad240131048a27705b58bca1134ef173e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/463995fe2974e2473392ddf7be8699746f6b7dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/463995fe2974e2473392ddf7be8699746f6b7dac", "html_url": "https://github.com/rust-lang/rust/commit/463995fe2974e2473392ddf7be8699746f6b7dac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/463995fe2974e2473392ddf7be8699746f6b7dac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bab88f2d9d1c81ab8d80d903359900ef106d21e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bab88f2d9d1c81ab8d80d903359900ef106d21e", "html_url": "https://github.com/rust-lang/rust/commit/8bab88f2d9d1c81ab8d80d903359900ef106d21e"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "0701b733076a6c3573c5f83433ce5d9769cadbf6", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/463995fe2974e2473392ddf7be8699746f6b7dac/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463995fe2974e2473392ddf7be8699746f6b7dac/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=463995fe2974e2473392ddf7be8699746f6b7dac", "patch": "@@ -44,12 +44,8 @@ impl<'a> Parser<'a> {\n         let id = self.parse_ident()?;\n         let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n-                // This mod is in an external file. Let's go get it!\n                 let dir = &self.directory;\n-                submod_path(self.sess, id, &attrs, dir.ownership, &dir.path)\n-                    .and_then(|r| eval_src_mod(self.sess, self.cfg_mods, r.path, r.ownership, id))\n-                    .map_err(|mut err| err.emit())\n-                    .unwrap_or_default()\n+                parse_external_module(self.sess, self.cfg_mods, id, dir.ownership, &dir.path, attrs)\n             } else {\n                 Default::default()\n             }\n@@ -99,6 +95,20 @@ impl<'a> Parser<'a> {\n     }\n }\n \n+fn parse_external_module(\n+    sess: &ParseSess,\n+    cfg_mods: bool,\n+    id: ast::Ident,\n+    ownership: DirectoryOwnership,\n+    dir_path: &Path,\n+    attrs: &[Attribute],\n+) -> (Mod, Vec<Attribute>) {\n+    submod_path(sess, id, &attrs, ownership, dir_path)\n+        .and_then(|r| eval_src_mod(sess, cfg_mods, r.path, r.ownership, id))\n+        .map_err(|mut err| err.emit())\n+        .unwrap_or_default()\n+}\n+\n /// Reads a module from a source file.\n fn eval_src_mod<'a>(\n     sess: &'a ParseSess,"}]}