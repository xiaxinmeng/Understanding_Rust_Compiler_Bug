{"sha": "a625ab77e87b31ac6689e97f2f10cb09773bed38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MjVhYjc3ZTg3YjMxYWM2Njg5ZTk3ZjJmMTBjYjA5NzczYmVkMzg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-07T16:02:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-20T20:18:58Z"}, "message": "Discover Rust toolchain without Python", "tree": {"sha": "219cffb51b96a8889021bb3a381ef56f548ba207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219cffb51b96a8889021bb3a381ef56f548ba207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a625ab77e87b31ac6689e97f2f10cb09773bed38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a625ab77e87b31ac6689e97f2f10cb09773bed38", "html_url": "https://github.com/rust-lang/rust/commit/a625ab77e87b31ac6689e97f2f10cb09773bed38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a625ab77e87b31ac6689e97f2f10cb09773bed38/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21eb613e09a0ecb4eaa141712a389d05c40ffad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21eb613e09a0ecb4eaa141712a389d05c40ffad", "html_url": "https://github.com/rust-lang/rust/commit/e21eb613e09a0ecb4eaa141712a389d05c40ffad"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "e58cf0d164197926a8a68d98e5b35e8e76680780", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a625ab77e87b31ac6689e97f2f10cb09773bed38/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/a625ab77e87b31ac6689e97f2f10cb09773bed38/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=a625ab77e87b31ac6689e97f2f10cb09773bed38", "patch": "@@ -1035,12 +1035,8 @@ def bootstrap(help_triggered):\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n     env[\"BUILD_DIR\"] = build.build_dir\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n-    env[\"CARGO\"] = build.cargo()\n-    env[\"RUSTC\"] = build.rustc()\n     if toml_path:\n         env[\"BOOTSTRAP_CONFIG\"] = toml_path\n-    if build.rustfmt():\n-        env[\"RUSTFMT\"] = build.rustfmt()\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "d40b924e0ff5fbde6ce732d9abd81c9a5fdb830e", "filename": "src/bootstrap/build.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a625ab77e87b31ac6689e97f2f10cb09773bed38/src%2Fbootstrap%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a625ab77e87b31ac6689e97f2f10cb09773bed38/src%2Fbootstrap%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild.rs?ref=a625ab77e87b31ac6689e97f2f10cb09773bed38", "patch": "@@ -1,3 +1,26 @@\n+use std::env;\n+use std::path::PathBuf;\n+\n fn main() {\n-    println!(\"cargo:rustc-env=BUILD_TRIPLE={}\", std::env::var(\"HOST\").unwrap());\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+    println!(\"cargo:rustc-env=BUILD_TRIPLE={}\", env::var(\"HOST\").unwrap());\n+\n+    // This may not be a canonicalized path.\n+    let mut rustc = PathBuf::from(env::var_os(\"RUSTC\").unwrap());\n+\n+    if rustc.is_relative() {\n+        for dir in env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()) {\n+            let absolute = dir.join(&rustc);\n+            if absolute.exists() {\n+                rustc = absolute;\n+                break;\n+            }\n+        }\n+    }\n+    assert!(rustc.is_absolute());\n+\n+    // FIXME: if the path is not utf-8, this is going to break. Unfortunately\n+    // Cargo doesn't have a way for us to specify non-utf-8 paths easily, so\n+    // we'll need to invent some encoding scheme if this becomes a problem.\n+    println!(\"cargo:rustc-env=RUSTC={}\", rustc.to_str().unwrap());\n }"}, {"sha": "d4f6ce64decc788e61c96a04dc1434bbc489b71e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a625ab77e87b31ac6689e97f2f10cb09773bed38/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a625ab77e87b31ac6689e97f2f10cb09773bed38/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a625ab77e87b31ac6689e97f2f10cb09773bed38", "patch": "@@ -291,7 +291,7 @@ struct Build {\n     build_dir: Option<String>,\n     cargo: Option<String>,\n     rustc: Option<String>,\n-    rustfmt: Option<String>, /* allow bootstrap.py to use rustfmt key */\n+    rustfmt: Option<PathBuf>,\n     docs: Option<bool>,\n     compiler_docs: Option<bool>,\n     submodules: Option<bool>,\n@@ -493,9 +493,8 @@ impl Config {\n         config.src = manifest_dir.parent().unwrap().parent().unwrap().to_owned();\n         config.out = Config::path_from_python(\"BUILD_DIR\");\n \n-        config.initial_rustc = Config::path_from_python(\"RUSTC\");\n-        config.initial_cargo = Config::path_from_python(\"CARGO\");\n-        config.initial_rustfmt = env::var_os(\"RUSTFMT\").map(Config::normalize_python_path);\n+        config.initial_cargo = PathBuf::from(env!(\"CARGO\"));\n+        config.initial_rustc = PathBuf::from(env!(\"RUSTC\"));\n \n         config\n     }\n@@ -584,6 +583,9 @@ impl Config {\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n         config.tools = build.tools;\n+        if build.rustfmt.is_some() {\n+            config.initial_rustfmt = build.rustfmt;\n+        }\n         set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n         set(&mut config.profiler, build.profiler);\n@@ -838,12 +840,15 @@ impl Config {\n             set(&mut config.missing_tools, t.missing_tools);\n         }\n \n+        // Cargo does not provide a RUSTFMT environment variable, so we\n+        // synthesize it manually. Note that we also later check the config.toml\n+        // and set this to that path if necessary.\n+        let rustfmt = config.initial_rustc.with_file_name(exe(\"rustfmt\", config.build));\n+        config.initial_rustfmt = if rustfmt.exists() { Some(rustfmt) } else { None };\n+\n         // Now that we've reached the end of our configuration, infer the\n         // default values for all options that we haven't otherwise stored yet.\n \n-        set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n-        set(&mut config.initial_cargo, build.cargo.map(PathBuf::from));\n-\n         config.llvm_skip_rebuild = llvm_skip_rebuild.unwrap_or(false);\n \n         let default = false;"}]}