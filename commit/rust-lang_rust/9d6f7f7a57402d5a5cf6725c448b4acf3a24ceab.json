{"sha": "9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab", "node_id": "C_kwDOAAsO6NoAKDlkNmY3ZjdhNTc0MDJkNWE1Y2Y2NzI1YzQ0OGI0YWNmM2EyNGNlYWI", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-09T15:44:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-10T16:35:43Z"}, "message": "Add target documentation for wasm64-unknown-unknown", "tree": {"sha": "487d812e8747f024472ee360a46f613d866adc54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487d812e8747f024472ee360a46f613d866adc54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab", "html_url": "https://github.com/rust-lang/rust/commit/9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b34966184d707ac5e2038e426558211e08ef6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b34966184d707ac5e2038e426558211e08ef6d", "html_url": "https://github.com/rust-lang/rust/commit/e4b34966184d707ac5e2038e426558211e08ef6d"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "021b904debd8f6b8d3b3bd2c30b5390cfb39917d", "filename": "src/doc/rustc/src/platform-support/wasm64-unknown-unknown.md", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md?ref=9d6f7f7a57402d5a5cf6725c448b4acf3a24ceab", "patch": "@@ -0,0 +1,101 @@\n+# `wasm64-unknown-unknown`\n+\n+**Tier: 3**\n+\n+WebAssembly target which uses 64-bit memories, relying on the [memory64]\n+WebAssembly proposal.\n+\n+[memory64]: https://github.com/webassembly/memory64\n+\n+## Target maintainers\n+\n+- Alex Crichton, https://github.com/alexcrichton\n+\n+## Requirements\n+\n+This target is cross-compiled. The target supports `std` in the same manner as\n+the `wasm32-unknown-unknown` target which is to say that it comes with the\n+standard library but many I/O functions such as `std::fs` and `std::net` will\n+simply return error. Additionally I/O operations like `println!` don't actually\n+do anything and the prints aren't routed anywhere. This is the same as the\n+`wasm32-unknown-unknown` target. This target comes by default with an allocator,\n+currently [dlmalloc] which is [ported to rust][dlmalloc-rs].\n+\n+[dlmalloc]: http://gee.cs.oswego.edu/dl/html/malloc.html\n+[dlmalloc-rs]: https://github.com/alexcrichton/dlmalloc-rs\n+\n+The difference of this target with `wasm32-unknown-unknown` is that it's\n+compiled for 64-bit memories instead of 32-bit memories. This means that `usize`\n+is 8-bytes large as well as pointers. The tradeoff, though, is that the maximum\n+memory size is now the full 64-bit address space instead of the 4GB as limited\n+by the 32-bit address space for `wasm32-unknown-unknown`.\n+\n+This target is not a stable target. The [memory64] WebAssembly proposal is stil\n+in-progress and not standardized. This means that there are not many engines\n+which implement the `memory64` feature and if they do they're likely behind a\n+flag, for example:\n+\n+* Nodejs - `--experimental-wasm-memory64`\n+* Wasmtime - `--wasm-features memory64`\n+\n+Also note that at this time the `wasm64-unknown-unknown` target assumes the\n+presence of other merged wasm proposals such as (with their LLVM feature flags):\n+\n+* [Bulk memory] - `+bulk-memory`\n+* Mutable imported globals - `+mutable-globals`\n+* [Sign-extending operations] - `+sign-ext`\n+* [Non-trapping fp-to-int operations] - `+nontrapping-fptoint`\n+\n+[Bulk memory]: https://github.com/WebAssembly/spec/blob/main/proposals/bulk-memory-operations/Overview.md\n+[Sign-extending operations]: https://github.com/WebAssembly/spec/blob/main/proposals/sign-extension-ops/Overview.md\n+[Non-trapping fp-to-int operations]: https://github.com/WebAssembly/spec/blob/main/proposals/nontrapping-float-to-int-conversion/Overview.md\n+\n+The `wasm64-unknown-unknown` target intends to match the default Clang targets\n+for its `\"C\"` ABI, which is likely to be the same as Clang's\n+`wasm32-unknown-unknown` largely.\n+\n+> **Note**: due to the relatively early-days nature of this target when working\n+> with this target you may encounter LLVM bugs. If an assertion hit or a bug is\n+> found it's recommended to open an issue either with rust-lang/rust or ideally\n+> with LLVM itself.\n+\n+This target does not support `panic=unwind` at this time.\n+\n+## Building the target\n+\n+You can build Rust with support for the target by adding it to the `target`\n+list in `config.toml`, and the target also requires `lld` to be built to work.\n+\n+```toml\n+[build]\n+target = [\"wasm64-unknown-unknown\"]\n+\n+[rust]\n+lld = true\n+```\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `std` by using\n+`build-std` or similar.\n+\n+Note that the following `cfg` directives are set for `wasm64-unknown-unknown`:\n+\n+* `cfg(target_arch = \"wasm64\")`\n+* `cfg(target_family = \"wasm\")`\n+\n+## Testing\n+\n+Currently testing is not well supported for `wasm64-unknown-unknown` and the\n+Rust project doesn't run any tests for this target. Testing support sort of\n+works but without `println!` it's not the most exciting tests to run.\n+\n+## Cross-compilation toolchains and C code\n+\n+Compiling Rust code with C code for `wasm64-unknown-unknown` is theoretically\n+possible, but there are no known toolchains to do this at this time. At the time\n+of this writing there is no known \"libc\" for wasm that works with\n+`wasm64-unknown-unknown`, which means that mixing C & Rust with this target\n+effectively cannot be done."}]}