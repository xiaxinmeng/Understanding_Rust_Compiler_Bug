{"sha": "25e523833e16c291618c624c1c44c4705b77d6ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTUyMzgzM2UxNmMyOTE2MThjNjI0YzFjNDRjNDcwNWI3N2Q2ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-27T13:37:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-27T13:37:00Z"}, "message": "auto merge of #13001 : cmr/rust/unnamed-lifetime-nocapture, r=nikomatsakis\n\nCloses #6751", "tree": {"sha": "06de5a772ccdd408718f916bbb0c32a97dc61f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06de5a772ccdd408718f916bbb0c32a97dc61f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e523833e16c291618c624c1c44c4705b77d6ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e523833e16c291618c624c1c44c4705b77d6ff", "html_url": "https://github.com/rust-lang/rust/commit/25e523833e16c291618c624c1c44c4705b77d6ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e523833e16c291618c624c1c44c4705b77d6ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e560db7dab16ffe77d32a7ca14376fd54d9c2dfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e560db7dab16ffe77d32a7ca14376fd54d9c2dfc", "html_url": "https://github.com/rust-lang/rust/commit/e560db7dab16ffe77d32a7ca14376fd54d9c2dfc"}, {"sha": "5258e13d0b5ed1fb201579115d618728ab0b69c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5258e13d0b5ed1fb201579115d618728ab0b69c0", "html_url": "https://github.com/rust-lang/rust/commit/5258e13d0b5ed1fb201579115d618728ab0b69c0"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "a81301f4f3e6db4633aa4a703554a95256b249f0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25e523833e16c291618c624c1c44c4705b77d6ff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e523833e16c291618c624c1c44c4705b77d6ff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=25e523833e16c291618c624c1c44c4705b77d6ff", "patch": "@@ -246,6 +246,8 @@ fn get_extern_rust_fn(ccx: &CrateContext, inputs: &[ty::t], output: ty::t,\n pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n                     inputs: &[ty::t], output: ty::t,\n                     name: &str) -> ValueRef {\n+    use middle::ty::{BrAnon, ReLateBound};\n+\n     let llfty = type_of_rust_fn(ccx, has_env, inputs, output);\n     let llfn = decl_cdecl_fn(ccx.llmod, name, llfty, output);\n \n@@ -265,7 +267,16 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n                 }\n-            }\n+            },\n+            // When a reference in an argument has no named lifetime, it's\n+            // impossible for that reference to escape this function(ie, be\n+            // returned).\n+            ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n+                debug!(\"marking argument of {} as nocapture because of anonymous lifetime\", name);\n+                unsafe {\n+                    llvm::LLVMAddAttribute(llarg, lib::llvm::NoCaptureAttribute as c_uint);\n+                }\n+            },\n             _ => {\n                 // For non-immediate arguments the callee gets its own copy of\n                 // the value on the stack, so there are no aliases"}, {"sha": "ca751c11bdabdc436215404afc88470ebc3472f8", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/25e523833e16c291618c624c1c44c4705b77d6ff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e523833e16c291618c624c1c44c4705b77d6ff/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=25e523833e16c291618c624c1c44c4705b77d6ff", "patch": "@@ -20,7 +20,7 @@ use std::slice;\n \n use back::abi;\n use driver::session;\n-use lib::llvm::{ValueRef, NoAliasAttribute, StructRetAttribute};\n+use lib::llvm::{ValueRef, NoAliasAttribute, StructRetAttribute, NoCaptureAttribute};\n use lib::llvm::llvm;\n use metadata::csearch;\n use middle::trans::base;\n@@ -661,9 +661,15 @@ pub fn trans_call_inner<'a>(\n             llargs.push(opt_llretslot.unwrap());\n         }\n \n+        // start at 1, because index 0 is the return value of the llvm func\n+        let mut first_arg_offset = 1;\n+\n         // Push the environment (or a trait object's self).\n         match (llenv, llself) {\n-            (Some(llenv), None) => llargs.push(llenv),\n+            (Some(llenv), None) => {\n+                first_arg_offset += 1;\n+                llargs.push(llenv)\n+            },\n             (None, Some(llself)) => llargs.push(llself),\n             _ => {}\n         }\n@@ -682,6 +688,11 @@ pub fn trans_call_inner<'a>(\n         let mut attrs = Vec::new();\n         if type_of::return_uses_outptr(ccx, ret_ty) {\n             attrs.push((1, StructRetAttribute));\n+            // The outptr can be noalias and nocapture because it's entirely\n+            // invisible to the program.\n+            attrs.push((1, NoAliasAttribute));\n+            attrs.push((1, NoCaptureAttribute));\n+            first_arg_offset += 1;\n         }\n \n         // The `noalias` attribute on the return value is useful to a\n@@ -695,6 +706,30 @@ pub fn trans_call_inner<'a>(\n             _ => {}\n         }\n \n+        debug!(\"trans_callee_inner: first_arg_offset={}\", first_arg_offset);\n+\n+        for (idx, &t) in ty::ty_fn_args(callee_ty).iter().enumerate()\n+                                                  .map(|(i, v)| (i+first_arg_offset, v)) {\n+            use middle::ty::{BrAnon, ReLateBound};\n+            if !type_is_immediate(ccx, t) {\n+                // if it's not immediate, we have a program-invisible pointer,\n+                // which it can't possibly capture\n+                attrs.push((idx, NoCaptureAttribute));\n+                debug!(\"trans_callee_inner: argument {} nocapture because it's non-immediate\", idx);\n+                continue;\n+            }\n+\n+            let t_ = ty::get(t);\n+            match t_.sty {\n+                ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n+                    debug!(\"trans_callee_inner: argument {} nocapture because \\\n+                           of anonymous lifetime\", idx);\n+                    attrs.push((idx, NoCaptureAttribute));\n+                },\n+                _ => { }\n+            }\n+        }\n+\n         // Invoke the actual rust fn and update bcx/llresult.\n         let (llret, b) = base::invoke(bcx,\n                                       llfn,"}, {"sha": "d1daa1e365eca7d86408ba8d55b59f7fafcf9d9c", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25e523833e16c291618c624c1c44c4705b77d6ff/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e523833e16c291618c624c1c44c4705b77d6ff/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=25e523833e16c291618c624c1c44c4705b77d6ff", "patch": "@@ -28,6 +28,7 @@ fn silent_recurse() {\n fn loud_recurse() {\n     println!(\"hello!\");\n     loud_recurse();\n+    black_box(()); // don't optimize this into a tail call. please.\n }\n \n fn main() {"}]}