{"sha": "4256165411393e9f16ac60cbaa1b5e9f3876cbd0", "node_id": "C_kwDOAAsO6NoAKDQyNTYxNjU0MTEzOTNlOWYxNmFjNjBjYmFhMWI1ZTlmMzg3NmNiZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-10T11:10:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-10T11:10:01Z"}, "message": "Rollup merge of #93830 - camelid:cleanup-section-code, r=GuillaumeGomez\n\nRefactor sidebar printing code\n\nThis is the refactoring parts of #92660, plus the trait aliases capitalization\nconsistency fix. I think this will be necessary for #92658.\n\nr? `@GuillaumeGomez`", "tree": {"sha": "417c9519b68e78c51007d398b140305f4ff133af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/417c9519b68e78c51007d398b140305f4ff133af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4256165411393e9f16ac60cbaa1b5e9f3876cbd0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBPKKCRBK7hj4Ov3rIwAAzZUIADvWD8iLamz2dVGEMmnClPWQ\nqa1Q4PoaQLmiay879nrgKeS8Yl1zCg8FiseP9k5KxwAmzobGRTqwBtlF6NALlw3f\nnugXelqC8sww0Jz4ivI7j5amPtyCr4F0CU/MqBLaTkaahRXvQx1cgvksyG7NB0XW\n9tAYMuvDzLQB0jWQpLl8XRTNIz2P+6KzXAMOmOHLA4j4Nv58uJLEUdfokblvazHp\nYu9sVi38u+WwfhmC0BEpoymfPpBzY3A62KH7USVUNi2crHbR7O1HzHPk4pmw2x38\nCMS14z07J1EgAqiPyAjxCrYd8HTCSEug4Qyx4epAWZyb/v8GJPYrgwCkD2yskuk=\n=D1i6\n-----END PGP SIGNATURE-----\n", "payload": "tree 417c9519b68e78c51007d398b140305f4ff133af\nparent aa2095936af06baac88a88b2a62c7d77e24c972a\nparent 504f3f037d6c42606740637eb711a891d071bf53\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644491401 +0100\ncommitter GitHub <noreply@github.com> 1644491401 +0100\n\nRollup merge of #93830 - camelid:cleanup-section-code, r=GuillaumeGomez\n\nRefactor sidebar printing code\n\nThis is the refactoring parts of #92660, plus the trait aliases capitalization\nconsistency fix. I think this will be necessary for #92658.\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4256165411393e9f16ac60cbaa1b5e9f3876cbd0", "html_url": "https://github.com/rust-lang/rust/commit/4256165411393e9f16ac60cbaa1b5e9f3876cbd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4256165411393e9f16ac60cbaa1b5e9f3876cbd0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa2095936af06baac88a88b2a62c7d77e24c972a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2095936af06baac88a88b2a62c7d77e24c972a", "html_url": "https://github.com/rust-lang/rust/commit/aa2095936af06baac88a88b2a62c7d77e24c972a"}, {"sha": "504f3f037d6c42606740637eb711a891d071bf53", "url": "https://api.github.com/repos/rust-lang/rust/commits/504f3f037d6c42606740637eb711a891d071bf53", "html_url": "https://github.com/rust-lang/rust/commit/504f3f037d6c42606740637eb711a891d071bf53"}], "stats": {"total": 254, "additions": 172, "deletions": 82}, "files": [{"sha": "1c3f9b56b474e533c025746efb42a7b7dccc0094", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 156, "deletions": 64, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/4256165411393e9f16ac60cbaa1b5e9f3876cbd0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4256165411393e9f16ac60cbaa1b5e9f3876cbd0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4256165411393e9f16ac60cbaa1b5e9f3876cbd0", "patch": "@@ -2402,78 +2402,170 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n     }\n }\n \n-fn item_ty_to_strs(ty: ItemType) -> (&'static str, &'static str) {\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+enum ItemSection {\n+    Reexports,\n+    PrimitiveTypes,\n+    Modules,\n+    Macros,\n+    Structs,\n+    Enums,\n+    Constants,\n+    Statics,\n+    Traits,\n+    Functions,\n+    TypeDefinitions,\n+    Unions,\n+    Implementations,\n+    TypeMethods,\n+    Methods,\n+    StructFields,\n+    Variants,\n+    AssociatedTypes,\n+    AssociatedConstants,\n+    ForeignTypes,\n+    Keywords,\n+    OpaqueTypes,\n+    AttributeMacros,\n+    DeriveMacros,\n+    TraitAliases,\n+}\n+\n+impl ItemSection {\n+    const ALL: &'static [Self] = {\n+        use ItemSection::*;\n+        // NOTE: The order here affects the order in the UI.\n+        &[\n+            Reexports,\n+            PrimitiveTypes,\n+            Modules,\n+            Macros,\n+            Structs,\n+            Enums,\n+            Constants,\n+            Statics,\n+            Traits,\n+            Functions,\n+            TypeDefinitions,\n+            Unions,\n+            Implementations,\n+            TypeMethods,\n+            Methods,\n+            StructFields,\n+            Variants,\n+            AssociatedTypes,\n+            AssociatedConstants,\n+            ForeignTypes,\n+            Keywords,\n+            OpaqueTypes,\n+            AttributeMacros,\n+            DeriveMacros,\n+            TraitAliases,\n+        ]\n+    };\n+\n+    fn id(self) -> &'static str {\n+        match self {\n+            Self::Reexports => \"reexports\",\n+            Self::Modules => \"modules\",\n+            Self::Structs => \"structs\",\n+            Self::Unions => \"unions\",\n+            Self::Enums => \"enums\",\n+            Self::Functions => \"functions\",\n+            Self::TypeDefinitions => \"types\",\n+            Self::Statics => \"statics\",\n+            Self::Constants => \"constants\",\n+            Self::Traits => \"traits\",\n+            Self::Implementations => \"impls\",\n+            Self::TypeMethods => \"tymethods\",\n+            Self::Methods => \"methods\",\n+            Self::StructFields => \"fields\",\n+            Self::Variants => \"variants\",\n+            Self::Macros => \"macros\",\n+            Self::PrimitiveTypes => \"primitives\",\n+            Self::AssociatedTypes => \"associated-types\",\n+            Self::AssociatedConstants => \"associated-consts\",\n+            Self::ForeignTypes => \"foreign-types\",\n+            Self::Keywords => \"keywords\",\n+            Self::OpaqueTypes => \"opaque-types\",\n+            Self::AttributeMacros => \"attributes\",\n+            Self::DeriveMacros => \"derives\",\n+            Self::TraitAliases => \"trait-aliases\",\n+        }\n+    }\n+\n+    fn name(self) -> &'static str {\n+        match self {\n+            Self::Reexports => \"Re-exports\",\n+            Self::Modules => \"Modules\",\n+            Self::Structs => \"Structs\",\n+            Self::Unions => \"Unions\",\n+            Self::Enums => \"Enums\",\n+            Self::Functions => \"Functions\",\n+            Self::TypeDefinitions => \"Type Definitions\",\n+            Self::Statics => \"Statics\",\n+            Self::Constants => \"Constants\",\n+            Self::Traits => \"Traits\",\n+            Self::Implementations => \"Implementations\",\n+            Self::TypeMethods => \"Type Methods\",\n+            Self::Methods => \"Methods\",\n+            Self::StructFields => \"Struct Fields\",\n+            Self::Variants => \"Variants\",\n+            Self::Macros => \"Macros\",\n+            Self::PrimitiveTypes => \"Primitive Types\",\n+            Self::AssociatedTypes => \"Associated Types\",\n+            Self::AssociatedConstants => \"Associated Constants\",\n+            Self::ForeignTypes => \"Foreign Types\",\n+            Self::Keywords => \"Keywords\",\n+            Self::OpaqueTypes => \"Opaque Types\",\n+            Self::AttributeMacros => \"Attribute Macros\",\n+            Self::DeriveMacros => \"Derive Macros\",\n+            Self::TraitAliases => \"Trait Aliases\",\n+        }\n+    }\n+}\n+\n+fn item_ty_to_section(ty: ItemType) -> ItemSection {\n     match ty {\n-        ItemType::ExternCrate | ItemType::Import => (\"reexports\", \"Re-exports\"),\n-        ItemType::Module => (\"modules\", \"Modules\"),\n-        ItemType::Struct => (\"structs\", \"Structs\"),\n-        ItemType::Union => (\"unions\", \"Unions\"),\n-        ItemType::Enum => (\"enums\", \"Enums\"),\n-        ItemType::Function => (\"functions\", \"Functions\"),\n-        ItemType::Typedef => (\"types\", \"Type Definitions\"),\n-        ItemType::Static => (\"statics\", \"Statics\"),\n-        ItemType::Constant => (\"constants\", \"Constants\"),\n-        ItemType::Trait => (\"traits\", \"Traits\"),\n-        ItemType::Impl => (\"impls\", \"Implementations\"),\n-        ItemType::TyMethod => (\"tymethods\", \"Type Methods\"),\n-        ItemType::Method => (\"methods\", \"Methods\"),\n-        ItemType::StructField => (\"fields\", \"Struct Fields\"),\n-        ItemType::Variant => (\"variants\", \"Variants\"),\n-        ItemType::Macro => (\"macros\", \"Macros\"),\n-        ItemType::Primitive => (\"primitives\", \"Primitive Types\"),\n-        ItemType::AssocType => (\"associated-types\", \"Associated Types\"),\n-        ItemType::AssocConst => (\"associated-consts\", \"Associated Constants\"),\n-        ItemType::ForeignType => (\"foreign-types\", \"Foreign Types\"),\n-        ItemType::Keyword => (\"keywords\", \"Keywords\"),\n-        ItemType::OpaqueTy => (\"opaque-types\", \"Opaque Types\"),\n-        ItemType::ProcAttribute => (\"attributes\", \"Attribute Macros\"),\n-        ItemType::ProcDerive => (\"derives\", \"Derive Macros\"),\n-        ItemType::TraitAlias => (\"trait-aliases\", \"Trait aliases\"),\n+        ItemType::ExternCrate | ItemType::Import => ItemSection::Reexports,\n+        ItemType::Module => ItemSection::Modules,\n+        ItemType::Struct => ItemSection::Structs,\n+        ItemType::Union => ItemSection::Unions,\n+        ItemType::Enum => ItemSection::Enums,\n+        ItemType::Function => ItemSection::Functions,\n+        ItemType::Typedef => ItemSection::TypeDefinitions,\n+        ItemType::Static => ItemSection::Statics,\n+        ItemType::Constant => ItemSection::Constants,\n+        ItemType::Trait => ItemSection::Traits,\n+        ItemType::Impl => ItemSection::Implementations,\n+        ItemType::TyMethod => ItemSection::TypeMethods,\n+        ItemType::Method => ItemSection::Methods,\n+        ItemType::StructField => ItemSection::StructFields,\n+        ItemType::Variant => ItemSection::Variants,\n+        ItemType::Macro => ItemSection::Macros,\n+        ItemType::Primitive => ItemSection::PrimitiveTypes,\n+        ItemType::AssocType => ItemSection::AssociatedTypes,\n+        ItemType::AssocConst => ItemSection::AssociatedConstants,\n+        ItemType::ForeignType => ItemSection::ForeignTypes,\n+        ItemType::Keyword => ItemSection::Keywords,\n+        ItemType::OpaqueTy => ItemSection::OpaqueTypes,\n+        ItemType::ProcAttribute => ItemSection::AttributeMacros,\n+        ItemType::ProcDerive => ItemSection::DeriveMacros,\n+        ItemType::TraitAlias => ItemSection::TraitAliases,\n         ItemType::Generic => unreachable!(),\n     }\n }\n \n fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     let mut sidebar = String::new();\n \n-    // Re-exports are handled a bit differently because they can be extern crates or imports.\n-    if items.iter().any(|it| {\n-        it.name.is_some()\n-            && (it.type_() == ItemType::ExternCrate\n-                || (it.type_() == ItemType::Import && !it.is_stripped()))\n-    }) {\n-        let (id, name) = item_ty_to_strs(ItemType::Import);\n-        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", id, name));\n-    }\n-\n-    // ordering taken from item_module, reorder, where it prioritized elements in a certain order\n-    // to print its headings\n-    for &myty in &[\n-        ItemType::Primitive,\n-        ItemType::Module,\n-        ItemType::Macro,\n-        ItemType::Struct,\n-        ItemType::Enum,\n-        ItemType::Constant,\n-        ItemType::Static,\n-        ItemType::Trait,\n-        ItemType::Function,\n-        ItemType::Typedef,\n-        ItemType::Union,\n-        ItemType::Impl,\n-        ItemType::TyMethod,\n-        ItemType::Method,\n-        ItemType::StructField,\n-        ItemType::Variant,\n-        ItemType::AssocType,\n-        ItemType::AssocConst,\n-        ItemType::ForeignType,\n-        ItemType::Keyword,\n-    ] {\n-        if items.iter().any(|it| !it.is_stripped() && it.type_() == myty && it.name.is_some()) {\n-            let (id, name) = item_ty_to_strs(myty);\n-            sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", id, name));\n-        }\n+    let item_sections_in_use: FxHashSet<_> = items\n+        .iter()\n+        .filter(|it| !it.is_stripped() && it.name.is_some())\n+        .map(|it| item_ty_to_section(it.type_()))\n+        .collect();\n+    for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {\n+        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n     }\n \n     if !sidebar.is_empty() {"}, {"sha": "2ae7626b886445b2d140b14e6dd6f34bcd66edf0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4256165411393e9f16ac60cbaa1b5e9f3876cbd0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4256165411393e9f16ac60cbaa1b5e9f3876cbd0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4256165411393e9f16ac60cbaa1b5e9f3876cbd0", "patch": "@@ -16,10 +16,10 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n \n use super::{\n-    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n-    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n-    ImplRenderingParameters,\n+    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_section,\n+    notable_traits_decl, render_assoc_item, render_assoc_items, render_attributes_in_code,\n+    render_attributes_in_pre, render_impl, render_stability_since_raw, write_srclink,\n+    AssocItemLink, Context, ImplRenderingParameters,\n };\n use crate::clean;\n use crate::formats::item_type::ItemType;\n@@ -221,7 +221,9 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n     ) -> Ordering {\n         let ty1 = i1.type_();\n         let ty2 = i2.type_();\n-        if ty1 != ty2 {\n+        if item_ty_to_section(ty1) != item_ty_to_section(ty2)\n+            || (ty1 != ty2 && (ty1 == ItemType::ExternCrate || ty2 == ItemType::ExternCrate))\n+        {\n             return (reorder(ty1), idx1).cmp(&(reorder(ty2), idx2));\n         }\n         let s1 = i1.stability(tcx).as_ref().map(|s| s.level);\n@@ -270,32 +272,28 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n     });\n \n     debug!(\"{:?}\", indices);\n-    let mut curty = None;\n+    let mut last_section = None;\n \n     for &idx in &indices {\n         let myitem = &items[idx];\n         if myitem.is_stripped() {\n             continue;\n         }\n \n-        let myty = Some(myitem.type_());\n-        if curty == Some(ItemType::ExternCrate) && myty == Some(ItemType::Import) {\n-            // Put `extern crate` and `use` re-exports in the same section.\n-            curty = myty;\n-        } else if myty != curty {\n-            if curty.is_some() {\n+        let my_section = item_ty_to_section(myitem.type_());\n+        if Some(my_section) != last_section {\n+            if last_section.is_some() {\n                 w.write_str(ITEM_TABLE_CLOSE);\n             }\n-            curty = myty;\n-            let (short, name) = item_ty_to_strs(myty.unwrap());\n+            last_section = Some(my_section);\n             write!(\n                 w,\n                 \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                     <a href=\\\"#{id}\\\">{name}</a>\\\n                  </h2>\\n{}\",\n                 ITEM_TABLE_OPEN,\n-                id = cx.derive_id(short.to_owned()),\n-                name = name\n+                id = cx.derive_id(my_section.id().to_owned()),\n+                name = my_section.name(),\n             );\n         }\n \n@@ -407,7 +405,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n         }\n     }\n \n-    if curty.is_some() {\n+    if last_section.is_some() {\n         w.write_str(ITEM_TABLE_CLOSE);\n     }\n }"}, {"sha": "a0c657d9a054d09bede9897ac1ab835fb275a474", "filename": "src/test/rustdoc/trait_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4256165411393e9f16ac60cbaa1b5e9f3876cbd0/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4256165411393e9f16ac60cbaa1b5e9f3876cbd0/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=4256165411393e9f16ac60cbaa1b5e9f3876cbd0", "patch": "@@ -8,7 +8,7 @@ use std::fmt::Debug;\n // @has foo/all.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n // @has foo/all.html '//a[@href=\"traitalias.Foo.html\"]' 'Foo'\n \n-// @has foo/index.html '//h2[@id=\"trait-aliases\"]' 'Trait aliases'\n+// @has foo/index.html '//h2[@id=\"trait-aliases\"]' 'Trait Aliases'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'CopyAlias'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Alias2'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'"}]}