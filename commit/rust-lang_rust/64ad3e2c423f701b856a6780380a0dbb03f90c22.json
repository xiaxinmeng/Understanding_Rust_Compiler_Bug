{"sha": "64ad3e2c423f701b856a6780380a0dbb03f90c22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YWQzZTJjNDIzZjcwMWI4NTZhNjc4MDM4MGEwZGJiMDNmOTBjMjI=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-11-23T20:57:03Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-12-23T03:04:29Z"}, "message": "adjust enum type instead of variant suggestions for prelude enums\n\nThe present author regrets not thinking of a more eloquent way to do\nthis.", "tree": {"sha": "afeae1ade1aa0a5edfc1b7b731117e73cd591f2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afeae1ade1aa0a5edfc1b7b731117e73cd591f2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ad3e2c423f701b856a6780380a0dbb03f90c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ad3e2c423f701b856a6780380a0dbb03f90c22", "html_url": "https://github.com/rust-lang/rust/commit/64ad3e2c423f701b856a6780380a0dbb03f90c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ad3e2c423f701b856a6780380a0dbb03f90c22/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3986c964481a048100565c8d30b1937ec2eb516d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3986c964481a048100565c8d30b1937ec2eb516d", "html_url": "https://github.com/rust-lang/rust/commit/3986c964481a048100565c8d30b1937ec2eb516d"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "e543677ef06218ea378d6a6b6d71b384f80b12eb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=64ad3e2c423f701b856a6780380a0dbb03f90c22", "patch": "@@ -3237,7 +3237,17 @@ impl<'a> Resolver<'a> {\n                     err.span_suggestions_with_applicability(\n                         span,\n                         &msg,\n-                        enum_candidates.into_iter().map(|(_variant, enum_ty)| enum_ty),\n+                        enum_candidates.into_iter()\n+                            .map(|(_variant_path, enum_ty_path)| enum_ty_path)\n+                            // variants re\u00ebxported in prelude doesn't mean `prelude::v1` is the\n+                            // type name! FIXME: is there a more principled way to do this that\n+                            // would work for other re\u00ebxports?\n+                            .filter(|enum_ty_path| enum_ty_path != \"std::prelude::v1\")\n+                            // also say `Option` rather than `std::prelude::v1::Option`\n+                            .map(|enum_ty_path| {\n+                                // FIXME #56861: DRYer prelude filtering\n+                                enum_ty_path.trim_start_matches(\"std::prelude::v1::\").to_owned()\n+                            }),\n                         Applicability::MachineApplicable,\n                     );\n                 }"}, {"sha": "996b57f558cc517add601e483a2f27ee677fe851", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=64ad3e2c423f701b856a6780380a0dbb03f90c22", "patch": "@@ -123,6 +123,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let sole_field_ty = sole_field.ty(self.tcx, substs);\n                         if self.can_coerce(expr_ty, sole_field_ty) {\n                             let variant_path = self.tcx.item_path_str(variant.did);\n+                            // FIXME #56861: DRYer prelude filtering\n                             Some(variant_path.trim_start_matches(\"std::prelude::v1::\").to_string())\n                         } else {\n                             None"}, {"sha": "264cfa449942c59d57010ef99562e657b2d08906", "filename": "src/test/ui/did_you_mean/issue-56028-there-is-an-enum-variant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.rs?ref=64ad3e2c423f701b856a6780380a0dbb03f90c22", "patch": "@@ -7,6 +7,8 @@ enum Solidify { Set }\n enum UnorderedCollection { Set }\n \n fn setup() -> Set { Set }\n+//~^ ERROR cannot find type `Set` in this scope\n+//~| ERROR cannot find value `Set` in this scope\n \n fn main() {\n     setup();"}, {"sha": "652e1695a85a6fb4569566d16a286b709f28d7f4", "filename": "src/test/ui/issues/issue-35675.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64ad3e2c423f701b856a6780380a0dbb03f90c22/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr?ref=64ad3e2c423f701b856a6780380a0dbb03f90c22", "patch": "@@ -41,13 +41,10 @@ error[E0573]: expected type, found variant `Ok`\n   --> $DIR/issue-35675.rs:29:13\n    |\n LL | fn foo() -> Ok {\n-   |             ^^ not a type\n-help: try using the variant's enum\n-   |\n-LL | fn foo() -> std::prelude::v1 {\n-   |             ^^^^^^^^^^^^^^^^\n-LL | fn foo() -> std::result::Result {\n-   |             ^^^^^^^^^^^^^^^^^^^\n+   |             ^^\n+   |             |\n+   |             not a type\n+   |             help: try using the variant's enum: `std::result::Result`\n \n error[E0412]: cannot find type `Variant3` in this scope\n   --> $DIR/issue-35675.rs:34:13\n@@ -63,13 +60,10 @@ error[E0573]: expected type, found variant `Some`\n   --> $DIR/issue-35675.rs:38:13\n    |\n LL | fn qux() -> Some {\n-   |             ^^^^ not a type\n-help: try using the variant's enum\n-   |\n-LL | fn qux() -> std::prelude::v1::Option {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | fn qux() -> std::prelude::v1 {\n-   |             ^^^^^^^^^^^^^^^^\n+   |             ^^^^\n+   |             |\n+   |             not a type\n+   |             help: try using the variant's enum: `Option`\n \n error: aborting due to 7 previous errors\n "}]}