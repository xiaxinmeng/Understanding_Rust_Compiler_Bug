{"sha": "835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNWUzZTUwNzgxYWYzNzVlNmZlZjJkMTdlMWJmYTUwZDRlNGFiYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-03T16:42:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-03T16:42:26Z"}, "message": "Auto merge of #44922 - zilbuz:issue-44596/E0594, r=pnkfelix\n\nMIR borrowck: move span_label to `borrowck_errors.rs`\n\nThe calls to `span_label` are moved and factorized for:\n* E0503 (`cannot_use_when_mutably_borrowed()`)\n* E0506 (`cannot_assign_to_borrowed()`)\n\nAdditionnally, the error E0594 (`cannot_assign_static()`) has been factorized between `check_loan.rs` and `borrowc_check.rs`.\n\nPart of #44596", "tree": {"sha": "4d9a4fd2506bcb14b3c77990a7f6078305343d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9a4fd2506bcb14b3c77990a7f6078305343d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "html_url": "https://github.com/rust-lang/rust/commit/835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8891044e89a22eeed1fcea957140072c26fcc62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8891044e89a22eeed1fcea957140072c26fcc62e", "html_url": "https://github.com/rust-lang/rust/commit/8891044e89a22eeed1fcea957140072c26fcc62e"}, {"sha": "d328d264aac91f8f5d0514d52d598277389e14e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d328d264aac91f8f5d0514d52d598277389e14e0", "html_url": "https://github.com/rust-lang/rust/commit/d328d264aac91f8f5d0514d52d598277389e14e0"}], "stats": {"total": 132, "additions": 84, "deletions": 48}, "files": [{"sha": "834bde660a83347466eb0ed5e4118986ee7ac1c4", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -640,14 +640,10 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             UseOk => { }\n             UseWhileBorrowed(loan_path, loan_span) => {\n                 let desc = self.bccx.loan_path_to_string(copy_path);\n-                self.bccx.cannot_use_when_mutably_borrowed(span, &desc, Origin::Ast)\n-                    .span_label(loan_span,\n-                               format!(\"borrow of `{}` occurs here\",\n-                                       &self.bccx.loan_path_to_string(&loan_path))\n-                               )\n-                    .span_label(span,\n-                               format!(\"use of borrowed `{}`\",\n-                                        &self.bccx.loan_path_to_string(&loan_path)))\n+                self.bccx.cannot_use_when_mutably_borrowed(\n+                        span, &desc,\n+                        loan_span, &self.bccx.loan_path_to_string(&loan_path),\n+                        Origin::Ast)\n                     .emit();\n             }\n         }\n@@ -865,13 +861,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                    loan_path: &LoanPath<'tcx>,\n                                    loan: &Loan) {\n         self.bccx.cannot_assign_to_borrowed(\n-            span, &self.bccx.loan_path_to_string(loan_path), Origin::Ast)\n-            .span_label(loan.span,\n-                       format!(\"borrow of `{}` occurs here\",\n-                               self.bccx.loan_path_to_string(loan_path)))\n-            .span_label(span,\n-                       format!(\"assignment to borrowed `{}` occurs here\",\n-                               self.bccx.loan_path_to_string(loan_path)))\n+            span, loan.span, &self.bccx.loan_path_to_string(loan_path), Origin::Ast)\n             .emit();\n     }\n }"}, {"sha": "a3f1340d42911257cc7568df986e663089b75bb4", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -759,11 +759,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 let mut db = match err.cause {\n                     MutabilityViolation => {\n-                        struct_span_err!(self.tcx.sess,\n-                                         error_span,\n-                                         E0594,\n-                                         \"cannot assign to {}\",\n-                                         descr)\n+                        self.cannot_assign(error_span, &descr, Origin::Ast)\n                     }\n                     BorrowViolation(euv::ClosureCapture(_)) => {\n                         struct_span_err!(self.tcx.sess, error_span, E0595,"}, {"sha": "29c35e23d4ee37cd0227e69adbf5216f317b255e", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -742,6 +742,5 @@ b.resume();\n \n register_diagnostics! {\n //    E0385, // {} in an aliasable location\n-    E0594, // cannot assign to {}\n     E0598, // lifetime of {} is too short to guarantee its contents can be...\n }"}, {"sha": "a8c81b4fc9f3c631b938c46bfc8e2ad88e25e163", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -931,14 +931,11 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                                          _context: Context,\n                                          (lvalue, span): (&Lvalue, Span),\n                                          borrow : &BorrowData) {\n-        let described_lvalue = self.describe_lvalue(lvalue);\n-        let borrow_span = self.retrieve_borrow_span(borrow);\n \n         let mut err = self.tcx.cannot_use_when_mutably_borrowed(\n-            span, &described_lvalue, Origin::Mir);\n-\n-        err.span_label(borrow_span, format!(\"borrow of `{}` occurs here\", described_lvalue));\n-        err.span_label(span, format!(\"use of borrowed `{}`\", described_lvalue));\n+            span, &self.describe_lvalue(lvalue),\n+            self.retrieve_borrow_span(borrow), &self.describe_lvalue(&borrow.lvalue),\n+            Origin::Mir);\n \n         err.emit();\n     }\n@@ -991,14 +988,8 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                                            _: Context,\n                                            (lvalue, span): (&Lvalue, Span),\n                                            loan: &BorrowData) {\n-        let describe_lvalue = self.describe_lvalue(lvalue);\n-        let borrow_span = self.retrieve_borrow_span(loan);\n-\n         let mut err = self.tcx.cannot_assign_to_borrowed(\n-            span, &self.describe_lvalue(lvalue), Origin::Mir);\n-\n-        err.span_label(borrow_span, format!(\"borrow of `{}` occurs here\", describe_lvalue));\n-        err.span_label(span, format!(\"assignment to borrowed `{}` occurs here\", describe_lvalue));\n+            span, self.retrieve_borrow_span(loan), &self.describe_lvalue(lvalue), Origin::Mir);\n \n         err.emit();\n     }\n@@ -1019,7 +1010,6 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     fn report_assignment_to_static(&mut self, _context: Context, (lvalue, span): (&Lvalue, Span)) {\n         let mut err = self.tcx.cannot_assign_static(\n             span, &self.describe_lvalue(lvalue), Origin::Mir);\n-        // FIXME: add span labels for borrow and assignment points\n         err.emit();\n     }\n }"}, {"sha": "950bdff1d0f8fe7f3c19c5fc9b1fab3b0e30ec47", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -1005,5 +1005,6 @@ register_diagnostics! {\n     E0493, // destructors cannot be evaluated at compile-time\n     E0524, // two closures require unique access to `..` at the same time\n     E0526, // shuffle indices are not constant\n+    E0594, // cannot assign to {}\n     E0625, // thread-local statics cannot be accessed at compile-time\n }"}, {"sha": "eddcb89c344438944e1a37abf968ffd4aa429f8f", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -57,12 +57,22 @@ pub trait BorrowckErrors {\n                          desc, OGN=o)\n     }\n \n-    fn cannot_use_when_mutably_borrowed(&self, span: Span, desc: &str, o: Origin)\n+    fn cannot_use_when_mutably_borrowed(&self,\n+                                        span: Span,\n+                                        desc: &str,\n+                                        borrow_span: Span,\n+                                        borrow_desc: &str,\n+                                        o: Origin)\n                                         -> DiagnosticBuilder\n     {\n-        struct_span_err!(self, span, E0503,\n+        let mut err = struct_span_err!(self, span, E0503,\n                          \"cannot use `{}` because it was mutably borrowed{OGN}\",\n-                         desc, OGN=o)\n+                         desc, OGN=o);\n+\n+        err.span_label(borrow_span, format!(\"borrow of `{}` occurs here\", borrow_desc));\n+        err.span_label(span, format!(\"use of borrowed `{}`\", borrow_desc));\n+\n+        err\n     }\n \n     fn cannot_act_on_uninitialized_variable(&self,\n@@ -140,12 +150,17 @@ pub trait BorrowckErrors {\n                          desc_new, msg_new, kind_new, noun_old, kind_old, msg_old, OGN=o)\n     }\n \n-    fn cannot_assign_to_borrowed(&self, span: Span, desc: &str, o: Origin)\n+    fn cannot_assign_to_borrowed(&self, span: Span, borrow_span: Span, desc: &str, o: Origin)\n                                  -> DiagnosticBuilder\n     {\n-        struct_span_err!(self, span, E0506,\n+        let mut err = struct_span_err!(self, span, E0506,\n                          \"cannot assign to `{}` because it is borrowed{OGN}\",\n-                         desc, OGN=o)\n+                         desc, OGN=o);\n+\n+        err.span_label(borrow_span, format!(\"borrow of `{}` occurs here\", desc));\n+        err.span_label(span, format!(\"assignment to borrowed `{}` occurs here\", desc));\n+\n+        err\n     }\n \n     fn cannot_move_into_closure(&self, span: Span, desc: &str, o: Origin)\n@@ -164,11 +179,17 @@ pub trait BorrowckErrors {\n                          desc, OGN=o)\n     }\n \n+    fn cannot_assign(&self, span: Span, desc: &str, o: Origin) -> DiagnosticBuilder\n+    {\n+        struct_span_err!(self, span, E0594,\n+                         \"cannot assign to {}{OGN}\",\n+                         desc, OGN=o)\n+    }\n+\n     fn cannot_assign_static(&self, span: Span, desc: &str, o: Origin)\n                             -> DiagnosticBuilder\n     {\n-        self.struct_span_err(span, &format!(\"cannot assign to immutable static item {}{OGN}\",\n-                                            desc, OGN=o))\n+        self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o)\n     }\n }\n "}, {"sha": "8d33d658de9273e47b7a65fc00fc78d015da168c", "filename": "src/test/compile-fail/E0594.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2FE0594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2FE0594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0594.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+static NUM: i32 = 18;\n+\n+fn main() {\n+    NUM = 20; //[ast]~ ERROR E0594\n+              //[mir]~^ ERROR cannot assign to immutable static item (Ast)\n+              //[mir]~| ERROR cannot assign to immutable static item `NUM` (Mir)\n+}"}, {"sha": "3c93a391a6b35934af2e0f5f00aedef976fa3818", "filename": "src/test/compile-fail/borrowck/borrowck-assign-to-constants.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -8,9 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n static foo: isize = 5;\n \n fn main() {\n     // assigning to various global constants\n-    foo = 6; //~ ERROR cannot assign to immutable static item\n+    foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n+             //[mir]~^ ERROR cannot assign to immutable static item (Ast)\n+             //[mir]~| ERROR cannot assign to immutable static item `foo` (Mir)\n }"}, {"sha": "7f165e00edb79bf33b5028347b4a93511e5130ac", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-ref-index.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -57,12 +60,18 @@ fn main() {\n     let mut s = \"hello\".to_string();\n     let rs = &mut s;\n     println!(\"{}\", f[&s]);\n-    //~^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+    //[ast]~^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+    //[mir]~^^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Ast)\n+    //[mir]~| ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Mir)\n     f[&s] = 10;\n-    //~^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+    //[ast]~^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+    //[mir]~^^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Ast)\n+    //[mir]~| ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Mir)\n     let s = Bar {\n         x: 1,\n     };\n     s[2] = 20;\n-    //~^ ERROR cannot assign to immutable indexed content\n+    //[ast]~^ ERROR cannot assign to immutable indexed content\n+    //[mir]~^^ ERROR cannot assign to immutable indexed content\n+    // FIXME Error for MIR\n }"}, {"sha": "2c2c32c0e88120d3851d6986a1811c4d4b77ff65", "filename": "src/test/compile-fail/issue-5500-1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835e3e50781af375e6fef2d17e1bfa50d4e4aba3/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs?ref=835e3e50781af375e6fef2d17e1bfa50d4e4aba3", "patch": "@@ -8,13 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n struct TrieMapIterator<'a> {\n     node: &'a usize\n }\n \n fn main() {\n     let a = 5;\n     let _iter = TrieMapIterator{node: &a};\n-    _iter.node = & //~ ERROR cannot assign to immutable field\n+    _iter.node = & //[ast]~ ERROR cannot assign to immutable field\n+                   //[mir]~^ ERROR cannot assign to immutable field `_iter.node` (Ast)\n+                   // FIXME Error for MIR\n     panic!()\n }"}]}