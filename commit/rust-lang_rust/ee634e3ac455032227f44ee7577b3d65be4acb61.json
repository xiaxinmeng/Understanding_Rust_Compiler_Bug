{"sha": "ee634e3ac455032227f44ee7577b3d65be4acb61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNjM0ZTNhYzQ1NTAzMjIyN2Y0NGVlNzU3N2IzZDY1YmU0YWNiNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-02T08:51:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-02T08:51:51Z"}, "message": "auto merge of #11265 : c-a/rust/byteswap_from, r=alexcrichton\n\nThis patchset adds intrinsics similar to the to_[be|le][16|32|64] intrinsics but for going in the reverse direction, e.g. from big/little endian to host endian. Implementation wise they do exactly the same as the corresponding to_* functions but I think it anyway make sense to have them since using the to_* functions in the reverse direction is not entirely intuitive.\r\n\r\nThe first patch adds the intrinsics and the two following changes instances of bswap* to use the [to|from]_* intrinsics instead.", "tree": {"sha": "914c7550379266155b92ca9fc8380bae5c859ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/914c7550379266155b92ca9fc8380bae5c859ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee634e3ac455032227f44ee7577b3d65be4acb61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee634e3ac455032227f44ee7577b3d65be4acb61", "html_url": "https://github.com/rust-lang/rust/commit/ee634e3ac455032227f44ee7577b3d65be4acb61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee634e3ac455032227f44ee7577b3d65be4acb61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e34b1eaccec107a76513d227fe4d6f15a6281d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/e34b1eaccec107a76513d227fe4d6f15a6281d29", "html_url": "https://github.com/rust-lang/rust/commit/e34b1eaccec107a76513d227fe4d6f15a6281d29"}, {"sha": "1c3c0103c4f0719479b4737c9216b5481561c69a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3c0103c4f0719479b4737c9216b5481561c69a", "html_url": "https://github.com/rust-lang/rust/commit/1c3c0103c4f0719479b4737c9216b5481561c69a"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "b63f7e495b90a5cd27dab91b4d37b76764dea665", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee634e3ac455032227f44ee7577b3d65be4acb61/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee634e3ac455032227f44ee7577b3d65be4acb61/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=ee634e3ac455032227f44ee7577b3d65be4acb61", "patch": "@@ -122,11 +122,9 @@ pub mod reader {\n         fail!(\"vint too big\");\n     }\n \n-    #[cfg(target_arch = \"x86\")]\n-    #[cfg(target_arch = \"x86_64\")]\n     pub fn vuint_at(data: &[u8], start: uint) -> Res {\n         use std::ptr::offset;\n-        use std::unstable::intrinsics::bswap32;\n+        use std::unstable::intrinsics::from_be32;\n \n         if data.len() - start < 4 {\n             return vuint_at_slow(data, start);\n@@ -136,7 +134,7 @@ pub mod reader {\n             let (ptr, _): (*u8, uint) = transmute(data);\n             let ptr = offset(ptr, start as int);\n             let ptr: *i32 = transmute(ptr);\n-            let val = bswap32(*ptr);\n+            let val = from_be32(*ptr);\n             let val: u32 = transmute(val);\n             if (val & 0x80000000) != 0 {\n                 Res {\n@@ -162,11 +160,6 @@ pub mod reader {\n         }\n     }\n \n-    #[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n-    pub fn vuint_at(data: &[u8], start: uint) -> Res {\n-        vuint_at_slow(data, start)\n-    }\n-\n     pub fn Doc<'a>(data: &'a [u8]) -> Doc<'a> {\n         Doc { data: data, start: 0u, end: data.len() }\n     }"}, {"sha": "241a69ad4e6f15f34e09ccf0f41e44d379022b80", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee634e3ac455032227f44ee7577b3d65be4acb61/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee634e3ac455032227f44ee7577b3d65be4acb61/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=ee634e3ac455032227f44ee7577b3d65be4acb61", "patch": "@@ -26,15 +26,11 @@ use super::file::keep_going;\n #[cfg(windows)] pub type sock_t = libc::SOCKET;\n #[cfg(unix)]    pub type sock_t = super::file::fd_t;\n \n-#[cfg(target_endian = \"big\")] pub fn htons(x: u16) -> u16 { x }\n-#[cfg(target_endian = \"big\")] pub fn ntohs(x: u16) -> u16 { x }\n-#[cfg(target_endian = \"little\")]\n pub fn htons(u: u16) -> u16 {\n-    unsafe { intrinsics::bswap16(u as i16) as u16 }\n+    intrinsics::to_be16(u as i16) as u16\n }\n-#[cfg(target_endian = \"little\")]\n pub fn ntohs(u: u16) -> u16 {\n-    unsafe { intrinsics::bswap16(u as i16) as u16 }\n+    intrinsics::from_be16(u as i16) as u16\n }\n \n enum InAddr {"}, {"sha": "e0089b599c5b68f77ed787a5dff3f5aa14b48193", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee634e3ac455032227f44ee7577b3d65be4acb61/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee634e3ac455032227f44ee7577b3d65be4acb61/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=ee634e3ac455032227f44ee7577b3d65be4acb61", "patch": "@@ -500,6 +500,19 @@ extern \"rust-intrinsic\" {\n #[cfg(target_endian = \"little\")] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n #[cfg(target_endian = \"big\")]    pub fn to_be64(x: i64) -> i64 { x }\n \n+#[cfg(target_endian = \"little\")] pub fn from_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] pub fn from_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] pub fn from_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    pub fn from_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    pub fn from_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    pub fn from_be64(x: i64) -> i64 { x }\n \n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and"}]}