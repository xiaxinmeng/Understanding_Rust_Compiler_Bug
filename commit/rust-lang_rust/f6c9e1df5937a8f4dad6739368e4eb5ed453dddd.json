{"sha": "f6c9e1df5937a8f4dad6739368e4eb5ed453dddd", "node_id": "C_kwDOAAsO6NoAKGY2YzllMWRmNTkzN2E4ZjRkYWQ2NzM5MzY4ZTRlYjVlZDQ1M2RkZGQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-09T06:53:17Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-09T06:53:17Z"}, "message": "Inline and remove `TokenStream::opt_from_ast`.", "tree": {"sha": "0ed768ed71a5934854909934d2efd2b463f5e16a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed768ed71a5934854909934d2efd2b463f5e16a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd", "html_url": "https://github.com/rust-lang/rust/commit/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81eaf877d651eb5d43829b536c0e212161301007", "url": "https://api.github.com/repos/rust-lang/rust/commits/81eaf877d651eb5d43829b536c0e212161301007", "html_url": "https://github.com/rust-lang/rust/commit/81eaf877d651eb5d43829b536c0e212161301007"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "4d3620ee8b0f0bfeb05dfb8f0577508ce5a20844", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=f6c9e1df5937a8f4dad6739368e4eb5ed453dddd", "patch": "@@ -15,6 +15,7 @@\n #![feature(if_let_guard)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "b27eba9620da0d0b88fdea5b9b6a3f487fe068d6", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c9e1df5937a8f4dad6739368e4eb5ed453dddd/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=f6c9e1df5937a8f4dad6739368e4eb5ed453dddd", "patch": "@@ -410,19 +410,6 @@ impl TokenStream {\n         TokenStream(Lrc::new(self.0.iter().enumerate().map(|(i, tree)| f(i, tree)).collect()))\n     }\n \n-    fn opt_from_ast(node: &(impl HasAttrs + HasTokens)) -> Option<TokenStream> {\n-        let tokens = node.tokens()?;\n-        let attrs = node.attrs();\n-        let attr_stream = if attrs.is_empty() {\n-            tokens.create_token_stream()\n-        } else {\n-            let attr_data =\n-                AttributesData { attrs: attrs.iter().cloned().collect(), tokens: tokens.clone() };\n-            AttrTokenStream::new(vec![AttrTokenTree::Attributes(attr_data)])\n-        };\n-        Some(attr_stream.to_tokenstream())\n-    }\n-\n     // Create a token stream containing a single token with alone spacing.\n     pub fn token_alone(kind: TokenKind, span: Span) -> TokenStream {\n         TokenStream::new(vec![TokenTree::token_alone(kind, span)])\n@@ -439,8 +426,18 @@ impl TokenStream {\n     }\n \n     pub fn from_ast(node: &(impl HasAttrs + HasSpan + HasTokens + fmt::Debug)) -> TokenStream {\n-        TokenStream::opt_from_ast(node)\n-            .unwrap_or_else(|| panic!(\"missing tokens for node at {:?}: {:?}\", node.span(), node))\n+        let Some(tokens) = node.tokens() else {\n+            panic!(\"missing tokens for node at {:?}: {:?}\", node.span(), node);\n+        };\n+        let attrs = node.attrs();\n+        let attr_stream = if attrs.is_empty() {\n+            tokens.create_token_stream()\n+        } else {\n+            let attr_data =\n+                AttributesData { attrs: attrs.iter().cloned().collect(), tokens: tokens.clone() };\n+            AttrTokenStream::new(vec![AttrTokenTree::Attributes(attr_data)])\n+        };\n+        attr_stream.to_tokenstream()\n     }\n \n     pub fn from_nonterminal_ast(nt: &Nonterminal) -> TokenStream {"}]}