{"sha": "030077401d6b7c2f923b24271dc5dc80044b089a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMDA3NzQwMWQ2YjdjMmY5MjNiMjQyNzFkYzVkYzgwMDQ0YjA4OWE=", "commit": {"author": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-07-28T17:11:47Z"}, "committer": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-09-03T18:02:35Z"}, "message": "Promote EvalSnapshot to newtype", "tree": {"sha": "5c3b16df096b5f67a5e765093c0dc3f0451b5ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3b16df096b5f67a5e765093c0dc3f0451b5ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030077401d6b7c2f923b24271dc5dc80044b089a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030077401d6b7c2f923b24271dc5dc80044b089a", "html_url": "https://github.com/rust-lang/rust/commit/030077401d6b7c2f923b24271dc5dc80044b089a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030077401d6b7c2f923b24271dc5dc80044b089a/comments", "author": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fa42beef8d385e5eccf7ad86dcf022dfca1c0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa42beef8d385e5eccf7ad86dcf022dfca1c0ac", "html_url": "https://github.com/rust-lang/rust/commit/7fa42beef8d385e5eccf7ad86dcf022dfca1c0ac"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "467634f28969a544df1751bd1be56ae6bf170653", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/030077401d6b7c2f923b24271dc5dc80044b089a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030077401d6b7c2f923b24271dc5dc80044b089a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=030077401d6b7c2f923b24271dc5dc80044b089a", "patch": "@@ -196,8 +196,24 @@ impl<'tcx> LocalValue {\n }\n \n /// The virtual machine state during const-evaluation at a given point in time.\n-type EvalSnapshot<'a, 'mir, 'tcx, M>\n-    = (M, Vec<Frame<'mir, 'tcx>>, Memory<'a, 'mir, 'tcx, M>);\n+#[derive(Eq, PartialEq, Hash)]\n+pub(crate) struct EvalSnapshot<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n+    machine: M,\n+    memory: Memory<'a, 'mir, 'tcx, M>,\n+    stack: Vec<Frame<'mir, 'tcx>>,\n+}\n+\n+impl<'a, 'mir, 'tcx, M> EvalSnapshot<'a, 'mir, 'tcx, M>\n+    where M: Machine<'mir, 'tcx>,\n+{\n+    fn new<'b>(machine: &M, memory: &Memory<'a, 'mir, 'tcx, M>, stack: &[Frame<'mir, 'tcx>]) -> Self {\n+        EvalSnapshot {\n+            machine: machine.clone(),\n+            memory: memory.clone(),\n+            stack: stack.into(),\n+        }\n+    }\n+}\n \n pub(super) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// The set of all `EvalSnapshot` *hashes* observed by this detector.\n@@ -238,21 +254,20 @@ impl<'a, 'mir, 'tcx, M> InfiniteLoopDetector<'a, 'mir, 'tcx, M>\n     pub fn observe_and_analyze(\n         &mut self,\n         machine: &M,\n-        stack: &Vec<Frame<'mir, 'tcx>>,\n         memory: &Memory<'a, 'mir, 'tcx, M>,\n+        stack: &[Frame<'mir, 'tcx>],\n     ) -> EvalResult<'tcx, ()> {\n-        let snapshot = (machine, stack, memory);\n \n         let mut fx = FxHasher::default();\n-        snapshot.hash(&mut fx);\n+        (machine, memory, stack).hash(&mut fx);\n         let hash = fx.finish();\n \n         if self.hashes.insert(hash) {\n             // No collision\n             return Ok(())\n         }\n \n-        if self.snapshots.insert((machine.clone(), stack.clone(), memory.clone())) {\n+        if self.snapshots.insert(EvalSnapshot::new(machine, memory, stack)) {\n             // Spurious collision or first cycle\n             return Ok(())\n         }"}, {"sha": "f3d655c2651a9de7f445342ac4eaa38e0c204a4f", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030077401d6b7c2f923b24271dc5dc80044b089a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030077401d6b7c2f923b24271dc5dc80044b089a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=030077401d6b7c2f923b24271dc5dc80044b089a", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 \"Constant evaluating a complex constant, this might take some time\");\n         }\n \n-        self.loop_detector.observe_and_analyze(&self.machine, &self.stack, &self.memory)\n+        self.loop_detector.observe_and_analyze(&self.machine, &self.memory, &self.stack[..])\n     }\n \n     pub fn run(&mut self) -> EvalResult<'tcx> {"}]}