{"sha": "4f2134cc33f07c09fe166cec42971828843bc0ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMjEzNGNjMzNmMDdjMDlmZTE2NmNlYzQyOTcxODI4ODQzYmMwZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-01T23:18:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-02T09:21:39Z"}, "message": "Introduce EffectExpr", "tree": {"sha": "0e2440d51717dd0dfcefbf77e5ef546f1ee5c60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e2440d51717dd0dfcefbf77e5ef546f1ee5c60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f2134cc33f07c09fe166cec42971828843bc0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2134cc33f07c09fe166cec42971828843bc0ef", "html_url": "https://github.com/rust-lang/rust/commit/4f2134cc33f07c09fe166cec42971828843bc0ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f2134cc33f07c09fe166cec42971828843bc0ef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c96de5380a09fe06752ce146edeb017ae8c701c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c96de5380a09fe06752ce146edeb017ae8c701c", "html_url": "https://github.com/rust-lang/rust/commit/3c96de5380a09fe06752ce146edeb017ae8c701c"}], "stats": {"total": 503, "additions": 242, "deletions": 261}, "files": [{"sha": "eede2fe91dec903d0a3ac8a3958982ae3676df17", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -2,7 +2,7 @@ use std::{iter::once, ops::RangeInclusive};\n \n use ra_syntax::{\n     algo::replace_children,\n-    ast::{self, edit::IndentLevel, make, Block, Pat::TupleStructPat},\n+    ast::{self, edit::IndentLevel, make},\n     AstNode,\n     SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n     SyntaxNode,\n@@ -47,7 +47,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n     // Check if there is an IfLet that we can handle.\n     let if_let_pat = match cond.pat() {\n         None => None, // No IfLet, supported.\n-        Some(TupleStructPat(pat)) if pat.args().count() == 1 => {\n+        Some(ast::Pat::TupleStructPat(pat)) if pat.args().count() == 1 => {\n             let path = pat.path()?;\n             match path.qualifier() {\n                 None => {\n@@ -61,9 +61,9 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n     };\n \n     let cond_expr = cond.expr()?;\n-    let then_block = if_expr.then_branch()?.block()?;\n+    let then_block = if_expr.then_branch()?;\n \n-    let parent_block = if_expr.syntax().parent()?.ancestors().find_map(ast::Block::cast)?;\n+    let parent_block = if_expr.syntax().parent()?.ancestors().find_map(ast::BlockExpr::cast)?;\n \n     if parent_block.expr()? != if_expr.clone().into() {\n         return None;\n@@ -80,7 +80,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    let parent_container = parent_block.syntax().parent()?.parent()?;\n+    let parent_container = parent_block.syntax().parent()?;\n \n     let early_expression: ast::Expr = match parent_container.kind() {\n         WHILE_EXPR | LOOP_EXPR => make::expr_continue(),\n@@ -144,13 +144,13 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n             }\n         };\n         edit.target(if_expr.syntax().text_range());\n-        edit.replace_ast(parent_block, ast::Block::cast(new_block).unwrap());\n+        edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n         edit.set_cursor(cursor_position);\n \n         fn replace(\n             new_expr: &SyntaxNode,\n-            then_block: &Block,\n-            parent_block: &Block,\n+            then_block: &ast::BlockExpr,\n+            parent_block: &ast::BlockExpr,\n             if_expr: &ast::IfExpr,\n         ) -> SyntaxNode {\n             let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());"}, {"sha": "60ec536a7c9df8bb506c5485cb8667dd7bac0acf", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -89,6 +89,7 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n             | (ast::Expr::ParenExpr(_), _)\n             | (ast::Expr::PathExpr(_), _)\n             | (ast::Expr::BlockExpr(_), _)\n+            | (ast::Expr::EffectExpr(_), _)\n             | (_, ast::Expr::CallExpr(_))\n             | (_, ast::Expr::TupleExpr(_))\n             | (_, ast::Expr::ArrayExpr(_))"}, {"sha": "39c656305982de28e7efbd35b6af34518991ca14", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -111,7 +111,7 @@ fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n /// expression like a lambda or match arm.\n fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n     expr.syntax().ancestors().find_map(|node| {\n-        if let Some(expr) = node.parent().and_then(ast::Block::cast).and_then(|it| it.expr()) {\n+        if let Some(expr) = node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr()) {\n             if expr.syntax() == &node {\n                 tested_by!(test_introduce_var_last_expr);\n                 return Some((node, false));"}, {"sha": "b084dd9ee22ce383dfb4d9250b6f8e7eb3ad3e9d", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -113,9 +113,9 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n         \"Move condition to match guard\",\n         |edit| {\n             edit.target(if_expr.syntax().text_range());\n-            let then_only_expr = then_block.block().and_then(|it| it.statements().next()).is_none();\n+            let then_only_expr = then_block.statements().next().is_none();\n \n-            match &then_block.block().and_then(|it| it.expr()) {\n+            match &then_block.expr() {\n                 Some(then_expr) if then_only_expr => {\n                     edit.replace(if_expr.syntax().text_range(), then_expr.syntax().text())\n                 }"}, {"sha": "f910ded9da6f3ca57b6fcd9dfa2d039ffb0c3528", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -42,7 +42,6 @@ pub fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n }\n \n pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n-    let block = block.block()?;\n     let has_anything_else = |thing: &SyntaxNode| -> bool {\n         let mut non_trivial_children =\n             block.syntax().children_with_tokens().filter(|it| match it.kind() {"}, {"sha": "58b3d10d8606e503ac7908901ac183c19b0d809f", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -203,10 +203,16 @@ impl ExprCollector<'_> {\n \n                 self.alloc_expr(Expr::If { condition, then_branch, else_branch }, syntax_ptr)\n             }\n-            ast::Expr::TryBlockExpr(e) => {\n-                let body = self.collect_block_opt(e.body());\n-                self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n-            }\n+            ast::Expr::EffectExpr(e) => match e.effect() {\n+                ast::Effect::Try(_) => {\n+                    let body = self.collect_block_opt(e.block_expr());\n+                    self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n+                }\n+                // FIXME: we need to record these effects somewhere...\n+                ast::Effect::Async(_) | ast::Effect::Label(_) | ast::Effect::Unsafe(_) => {\n+                    self.collect_block_opt(e.block_expr())\n+                }\n+            },\n             ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n                 let body = self.collect_block_opt(e.loop_body());\n@@ -494,12 +500,8 @@ impl ExprCollector<'_> {\n         }\n     }\n \n-    fn collect_block(&mut self, expr: ast::BlockExpr) -> ExprId {\n-        let syntax_node_ptr = AstPtr::new(&expr.clone().into());\n-        let block = match expr.block() {\n-            Some(block) => block,\n-            None => return self.alloc_expr(Expr::Missing, syntax_node_ptr),\n-        };\n+    fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n+        let syntax_node_ptr = AstPtr::new(&block.clone().into());\n         self.collect_block_items(&block);\n         let statements = block\n             .statements()\n@@ -517,7 +519,7 @@ impl ExprCollector<'_> {\n         self.alloc_expr(Expr::Block { statements, tail }, syntax_node_ptr)\n     }\n \n-    fn collect_block_items(&mut self, block: &ast::Block) {\n+    fn collect_block_items(&mut self, block: &ast::BlockExpr) {\n         let container = ContainerId::DefWithBodyId(self.def);\n         for item in block.items() {\n             let (def, name): (ModuleDefId, Option<ast::Name>) = match item {"}, {"sha": "4c12d0a15962283f01820ccc03fabb4528bdcd6d", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -330,7 +330,7 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n             FragmentKind::Expr\n         }\n         // FIXME: Expand to statements in appropriate positions; HIR lowering needs to handle that\n-        EXPR_STMT | BLOCK => FragmentKind::Expr,\n+        EXPR_STMT | BLOCK_EXPR => FragmentKind::Expr,\n         ARG_LIST => FragmentKind::Expr,\n         TRY_EXPR => FragmentKind::Expr,\n         TUPLE_EXPR => FragmentKind::Expr,\n@@ -342,7 +342,6 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n         CONDITION => FragmentKind::Expr,\n         BREAK_EXPR => FragmentKind::Expr,\n         RETURN_EXPR => FragmentKind::Expr,\n-        BLOCK_EXPR => FragmentKind::Expr,\n         MATCH_EXPR => FragmentKind::Expr,\n         MATCH_ARM => FragmentKind::Expr,\n         MATCH_GUARD => FragmentKind::Expr,"}, {"sha": "c529752d42d9ad22955dafd7e142ed1ed2ee7a08", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -344,7 +344,7 @@ impl<'a> CompletionContext<'a> {\n                                 stmt.syntax().text_range() == name_ref.syntax().text_range(),\n                             );\n                         }\n-                        if let Some(block) = ast::Block::cast(node) {\n+                        if let Some(block) = ast::BlockExpr::cast(node) {\n                             return Some(\n                                 block.expr().map(|e| e.syntax().text_range())\n                                     == Some(name_ref.syntax().text_range()),"}, {"sha": "8657377dedaace2d1e3a0021123388ee12b648eb", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -88,7 +88,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n         | ITEM_LIST\n         | EXTERN_ITEM_LIST\n         | USE_TREE_LIST\n-        | BLOCK\n+        | BLOCK_EXPR\n         | MATCH_ARM_LIST\n         | ENUM_VARIANT_LIST\n         | TOKEN_TREE => Some(FoldKind::Block),"}, {"sha": "63fd6b3e457163107162a01dfe92f9be4c656c98", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -129,8 +129,7 @@ fn has_comma_after(node: &SyntaxNode) -> bool {\n }\n \n fn join_single_expr_block(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Option<()> {\n-    let block = ast::Block::cast(token.parent())?;\n-    let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n+    let block_expr = ast::BlockExpr::cast(token.parent())?;\n     if !block_expr.is_standalone() {\n         return None;\n     }"}, {"sha": "86c70ff830b8ff4cfa862731db1d0fdc0438d884", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 35, "deletions": 42, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -120,9 +120,8 @@ SOURCE_FILE@0..11\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..11\n-      BLOCK@9..11\n-        L_CURLY@9..10 \"{\"\n-        R_CURLY@10..11 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      R_CURLY@10..11 \"}\"\n \"#\n             .trim()\n         );\n@@ -153,26 +152,25 @@ SOURCE_FILE@0..60\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n     BLOCK_EXPR@10..60\n-      BLOCK@10..60\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        EXPR_STMT@16..58\n-          MACRO_CALL@16..57\n-            PATH@16..22\n-              PATH_SEGMENT@16..22\n-                NAME_REF@16..22\n-                  IDENT@16..22 \"assert\"\n-            BANG@22..23 \"!\"\n-            TOKEN_TREE@23..57\n-              L_PAREN@23..24 \"(\"\n-              STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n-              COMMA@52..53 \",\"\n-              WHITESPACE@53..54 \" \"\n-              STRING@54..56 \"\\\"\\\"\"\n-              R_PAREN@56..57 \")\"\n-          SEMICOLON@57..58 \";\"\n-        WHITESPACE@58..59 \"\\n\"\n-        R_CURLY@59..60 \"}\"\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      EXPR_STMT@16..58\n+        MACRO_CALL@16..57\n+          PATH@16..22\n+            PATH_SEGMENT@16..22\n+              NAME_REF@16..22\n+                IDENT@16..22 \"assert\"\n+          BANG@22..23 \"!\"\n+          TOKEN_TREE@23..57\n+            L_PAREN@23..24 \"(\"\n+            STRING@24..52 \"\\\"\\n    fn foo() {\\n     ...\"\n+            COMMA@52..53 \",\"\n+            WHITESPACE@53..54 \" \"\n+            STRING@54..56 \"\\\"\\\"\"\n+            R_PAREN@56..57 \")\"\n+        SEMICOLON@57..58 \";\"\n+      WHITESPACE@58..59 \"\\n\"\n+      R_CURLY@59..60 \"}\"\n \"#\n             .trim()\n         );\n@@ -196,9 +194,8 @@ FN_DEF@0..11\n     R_PAREN@7..8 \")\"\n   WHITESPACE@8..9 \" \"\n   BLOCK_EXPR@9..11\n-    BLOCK@9..11\n-      L_CURLY@9..10 \"{\"\n-      R_CURLY@10..11 \"}\"\n+    L_CURLY@9..10 \"{\"\n+    R_CURLY@10..11 \"}\"\n \"#\n             .trim()\n         );\n@@ -265,10 +262,9 @@ SOURCE_FILE@0..12\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n \"#\n             .trim()\n         );\n@@ -300,10 +296,9 @@ SOURCE_FILE@0..12\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n \"#\n             .trim()\n         );\n@@ -334,10 +329,9 @@ SOURCE_FILE@0..25\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n     BLOCK_EXPR@9..12\n-      BLOCK@9..12\n-        L_CURLY@9..10 \"{\"\n-        WHITESPACE@10..11 \"\\n\"\n-        R_CURLY@11..12 \"}\"\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..11 \"\\n\"\n+      R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n   FN_DEF@13..25\n     FN_KW@13..15 \"fn\"\n@@ -349,10 +343,9 @@ SOURCE_FILE@0..25\n       R_PAREN@20..21 \")\"\n     WHITESPACE@21..22 \" \"\n     BLOCK_EXPR@22..25\n-      BLOCK@22..25\n-        L_CURLY@22..23 \"{\"\n-        WHITESPACE@23..24 \"\\n\"\n-        R_CURLY@24..25 \"}\"\n+      L_CURLY@22..23 \"{\"\n+      WHITESPACE@23..24 \"\\n\"\n+      R_CURLY@24..25 \"}\"\n \"#\n             .trim()\n         );"}, {"sha": "c43003fd63df3f215d8b706b3601f4a151d4032c", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 75, "deletions": 77, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -266,21 +266,20 @@ fn test_expr_order() {\n       L_PAREN@5..6 \"(\"\n       R_PAREN@6..7 \")\"\n     BLOCK_EXPR@7..15\n-      BLOCK@7..15\n-        L_CURLY@7..8 \"{\"\n-        EXPR_STMT@8..14\n-          BIN_EXPR@8..13\n-            BIN_EXPR@8..11\n-              LITERAL@8..9\n-                INT_NUMBER@8..9 \"1\"\n-              PLUS@9..10 \"+\"\n-              LITERAL@10..11\n-                INT_NUMBER@10..11 \"1\"\n-            STAR@11..12 \"*\"\n-            LITERAL@12..13\n-              INT_NUMBER@12..13 \"2\"\n-          SEMICOLON@13..14 \";\"\n-        R_CURLY@14..15 \"}\"\"#,\n+      L_CURLY@7..8 \"{\"\n+      EXPR_STMT@8..14\n+        BIN_EXPR@8..13\n+          BIN_EXPR@8..11\n+            LITERAL@8..9\n+              INT_NUMBER@8..9 \"1\"\n+            PLUS@9..10 \"+\"\n+            LITERAL@10..11\n+              INT_NUMBER@10..11 \"1\"\n+          STAR@11..12 \"*\"\n+          LITERAL@12..13\n+            INT_NUMBER@12..13 \"2\"\n+        SEMICOLON@13..14 \";\"\n+      R_CURLY@14..15 \"}\"\"#,\n     );\n }\n \n@@ -1114,68 +1113,67 @@ fn test_vec() {\n     assert_eq!(\n         format!(\"{:#?}\", tree).trim(),\n         r#\"BLOCK_EXPR@0..45\n-  BLOCK@0..45\n-    L_CURLY@0..1 \"{\"\n-    LET_STMT@1..20\n-      LET_KW@1..4 \"let\"\n-      BIND_PAT@4..8\n-        MUT_KW@4..7 \"mut\"\n-        NAME@7..8\n-          IDENT@7..8 \"v\"\n-      EQ@8..9 \"=\"\n-      CALL_EXPR@9..19\n-        PATH_EXPR@9..17\n-          PATH@9..17\n-            PATH@9..12\n-              PATH_SEGMENT@9..12\n-                NAME_REF@9..12\n-                  IDENT@9..12 \"Vec\"\n-            COLON2@12..14 \"::\"\n-            PATH_SEGMENT@14..17\n-              NAME_REF@14..17\n-                IDENT@14..17 \"new\"\n-        ARG_LIST@17..19\n-          L_PAREN@17..18 \"(\"\n-          R_PAREN@18..19 \")\"\n-      SEMICOLON@19..20 \";\"\n-    EXPR_STMT@20..33\n-      METHOD_CALL_EXPR@20..32\n-        PATH_EXPR@20..21\n-          PATH@20..21\n-            PATH_SEGMENT@20..21\n-              NAME_REF@20..21\n-                IDENT@20..21 \"v\"\n-        DOT@21..22 \".\"\n-        NAME_REF@22..26\n-          IDENT@22..26 \"push\"\n-        ARG_LIST@26..32\n-          L_PAREN@26..27 \"(\"\n-          LITERAL@27..31\n-            INT_NUMBER@27..31 \"1u32\"\n-          R_PAREN@31..32 \")\"\n-      SEMICOLON@32..33 \";\"\n-    EXPR_STMT@33..43\n-      METHOD_CALL_EXPR@33..42\n-        PATH_EXPR@33..34\n-          PATH@33..34\n-            PATH_SEGMENT@33..34\n-              NAME_REF@33..34\n-                IDENT@33..34 \"v\"\n-        DOT@34..35 \".\"\n-        NAME_REF@35..39\n-          IDENT@35..39 \"push\"\n-        ARG_LIST@39..42\n-          L_PAREN@39..40 \"(\"\n-          LITERAL@40..41\n-            INT_NUMBER@40..41 \"2\"\n-          R_PAREN@41..42 \")\"\n-      SEMICOLON@42..43 \";\"\n-    PATH_EXPR@43..44\n-      PATH@43..44\n-        PATH_SEGMENT@43..44\n-          NAME_REF@43..44\n-            IDENT@43..44 \"v\"\n-    R_CURLY@44..45 \"}\"\"#\n+  L_CURLY@0..1 \"{\"\n+  LET_STMT@1..20\n+    LET_KW@1..4 \"let\"\n+    BIND_PAT@4..8\n+      MUT_KW@4..7 \"mut\"\n+      NAME@7..8\n+        IDENT@7..8 \"v\"\n+    EQ@8..9 \"=\"\n+    CALL_EXPR@9..19\n+      PATH_EXPR@9..17\n+        PATH@9..17\n+          PATH@9..12\n+            PATH_SEGMENT@9..12\n+              NAME_REF@9..12\n+                IDENT@9..12 \"Vec\"\n+          COLON2@12..14 \"::\"\n+          PATH_SEGMENT@14..17\n+            NAME_REF@14..17\n+              IDENT@14..17 \"new\"\n+      ARG_LIST@17..19\n+        L_PAREN@17..18 \"(\"\n+        R_PAREN@18..19 \")\"\n+    SEMICOLON@19..20 \";\"\n+  EXPR_STMT@20..33\n+    METHOD_CALL_EXPR@20..32\n+      PATH_EXPR@20..21\n+        PATH@20..21\n+          PATH_SEGMENT@20..21\n+            NAME_REF@20..21\n+              IDENT@20..21 \"v\"\n+      DOT@21..22 \".\"\n+      NAME_REF@22..26\n+        IDENT@22..26 \"push\"\n+      ARG_LIST@26..32\n+        L_PAREN@26..27 \"(\"\n+        LITERAL@27..31\n+          INT_NUMBER@27..31 \"1u32\"\n+        R_PAREN@31..32 \")\"\n+    SEMICOLON@32..33 \";\"\n+  EXPR_STMT@33..43\n+    METHOD_CALL_EXPR@33..42\n+      PATH_EXPR@33..34\n+        PATH@33..34\n+          PATH_SEGMENT@33..34\n+            NAME_REF@33..34\n+              IDENT@33..34 \"v\"\n+      DOT@34..35 \".\"\n+      NAME_REF@35..39\n+        IDENT@35..39 \"push\"\n+      ARG_LIST@39..42\n+        L_PAREN@39..40 \"(\"\n+        LITERAL@40..41\n+          INT_NUMBER@40..41 \"2\"\n+        R_PAREN@41..42 \")\"\n+    SEMICOLON@42..43 \";\"\n+  PATH_EXPR@43..44\n+    PATH@43..44\n+      PATH_SEGMENT@43..44\n+        NAME_REF@43..44\n+          IDENT@43..44 \"v\"\n+  R_CURLY@44..45 \"}\"\"#\n     );\n }\n "}, {"sha": "d9824ff9bddd28ff81fc57f0a4f49bd27726033e", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -143,7 +143,7 @@ pub(crate) fn reparser(\n     parent: Option<SyntaxKind>,\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n-        BLOCK => expressions::naked_block,\n+        BLOCK_EXPR => expressions::block,\n         RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n         RECORD_FIELD_LIST => items::record_field_list,\n         ENUM_VARIANT_LIST => items::enum_variant_list,"}, {"sha": "a23dbcacf05aed9cbc13261ca85c5b55c542ca7a", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -59,16 +59,7 @@ pub(crate) fn block(p: &mut Parser) {\n         p.error(\"expected a block\");\n         return;\n     }\n-    atom::block_expr(p, None);\n-}\n-\n-pub(crate) fn naked_block(p: &mut Parser) {\n-    assert!(p.at(T!['{']));\n-    let m = p.start();\n-    p.bump(T!['{']);\n-    expr_block_contents(p);\n-    p.expect(T!['}']);\n-    m.complete(p, BLOCK);\n+    atom::block_expr(p);\n }\n \n fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n@@ -197,7 +188,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n     }\n }\n \n-pub(crate) fn expr_block_contents(p: &mut Parser) {\n+pub(super) fn expr_block_contents(p: &mut Parser) {\n     // This is checked by a validator\n     attributes::inner_attributes(p);\n "}, {"sha": "c76b7330c58a6923c483a51f81a1996b05beb705", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -92,7 +92,10 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n                 T![loop] => loop_expr(p, Some(m)),\n                 T![for] => for_expr(p, Some(m)),\n                 T![while] => while_expr(p, Some(m)),\n-                T!['{'] => block_expr(p, Some(m)),\n+                T!['{'] => {\n+                    block_expr(p);\n+                    m.complete(p, EFFECT_EXPR)\n+                }\n                 _ => {\n                     // test_err misplaced_label_err\n                     // fn main() {\n@@ -108,13 +111,15 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             let m = p.start();\n             p.bump(T![async]);\n             p.eat(T![move]);\n-            block_expr(p, Some(m))\n+            block_expr(p);\n+            m.complete(p, EFFECT_EXPR)\n         }\n         T![match] => match_expr(p),\n         T![unsafe] if la == T!['{'] => {\n             let m = p.start();\n             p.bump(T![unsafe]);\n-            block_expr(p, Some(m))\n+            block_expr(p);\n+            m.complete(p, EFFECT_EXPR)\n         }\n         T!['{'] => {\n             // test for_range_from\n@@ -123,7 +128,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             //        break;\n             //    }\n             // }\n-            block_expr(p, None)\n+            block_expr(p)\n         }\n         T![return] => return_expr(p),\n         T![continue] => continue_expr(p),\n@@ -134,7 +139,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         }\n     };\n     let blocklike = match done.kind() {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | TRY_BLOCK_EXPR => {\n+        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | EFFECT_EXPR => {\n             BlockLike::Block\n         }\n         _ => BlockLike::NotBlock,\n@@ -234,7 +239,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n         if p.at(T!['{']) {\n             // test lambda_ret_block\n             // fn main() { || -> i32 { 92 }(); }\n-            block_expr(p, None);\n+            block_expr(p);\n         } else {\n             p.error(\"expected `{`\");\n         }\n@@ -464,10 +469,12 @@ fn match_guard(p: &mut Parser) -> CompletedMarker {\n //     unsafe {};\n //     'label: {};\n // }\n-pub(super) fn block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+pub(super) fn block_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T!['{']));\n-    let m = m.unwrap_or_else(|| p.start());\n-    naked_block(p);\n+    let m = p.start();\n+    p.bump(T!['{']);\n+    expr_block_contents(p);\n+    p.expect(T!['}']);\n     m.complete(p, BLOCK_EXPR)\n }\n \n@@ -552,8 +559,8 @@ fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     }\n \n     p.bump(T![try]);\n-    block(p);\n-    m.complete(p, TRY_EXPR)\n+    block_expr(p);\n+    m.complete(p, EFFECT_EXPR)\n }\n \n // test box_expr"}, {"sha": "e7404492a8e9399aa6a36a2cbc4555dab82d3e29", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -191,7 +191,7 @@ pub enum SyntaxKind {\n     RECORD_LIT,\n     RECORD_FIELD_LIST,\n     RECORD_FIELD,\n-    TRY_BLOCK_EXPR,\n+    EFFECT_EXPR,\n     BOX_EXPR,\n     CALL_EXPR,\n     INDEX_EXPR,\n@@ -204,7 +204,6 @@ pub enum SyntaxKind {\n     PREFIX_EXPR,\n     RANGE_EXPR,\n     BIN_EXPR,\n-    BLOCK,\n     EXTERN_BLOCK,\n     EXTERN_ITEM_LIST,\n     ENUM_VARIANT,"}, {"sha": "1876afe958e0bc817569201e7f67bc031b5ae1b8", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n+    expr_extensions::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n         StructKind, TypeBoundKind, VisibilityKind,"}, {"sha": "c507dc683c04e10d6d2302642df8211aa183fc14", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -28,7 +28,7 @@ impl ast::BinExpr {\n \n impl ast::FnDef {\n     #[must_use]\n-    pub fn with_body(&self, body: ast::Block) -> ast::FnDef {\n+    pub fn with_body(&self, body: ast::BlockExpr) -> ast::FnDef {\n         let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n         let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n             old_body.syntax().clone().into()"}, {"sha": "7ee36e60c8401004b75a6db75e11d2fc84d88d97", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -16,7 +16,7 @@ impl ast::Expr {\n             | ast::Expr::WhileExpr(_)\n             | ast::Expr::BlockExpr(_)\n             | ast::Expr::MatchExpr(_)\n-            | ast::Expr::TryBlockExpr(_) => true,\n+            | ast::Expr::EffectExpr(_) => true,\n             _ => false,\n         }\n     }\n@@ -359,6 +359,33 @@ impl ast::Literal {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum Effect {\n+    Async(SyntaxToken),\n+    Unsafe(SyntaxToken),\n+    Try(SyntaxToken),\n+    // Very much not an effect, but we stuff it into this node anyway\n+    Label(ast::Label),\n+}\n+\n+impl ast::EffectExpr {\n+    pub fn effect(&self) -> Effect {\n+        if let Some(token) = self.async_token() {\n+            return Effect::Async(token);\n+        }\n+        if let Some(token) = self.unsafe_token() {\n+            return Effect::Unsafe(token);\n+        }\n+        if let Some(token) = self.try_token() {\n+            return Effect::Try(token);\n+        }\n+        if let Some(label) = self.label() {\n+            return Effect::Label(label);\n+        }\n+        unreachable!(\"ast::EffectExpr without Effect\")\n+    }\n+}\n+\n impl ast::BlockExpr {\n     /// false if the block is an intrinsic part of the syntax and can't be\n     /// replaced with arbitrary expression.\n@@ -368,15 +395,12 @@ impl ast::BlockExpr {\n     /// const FOO: () = { stand_alone };\n     /// ```\n     pub fn is_standalone(&self) -> bool {\n-        if self.unsafe_token().is_some() || self.async_token().is_some() {\n-            return false;\n-        }\n-        let kind = match self.syntax().parent() {\n+        let parent = match self.syntax().parent() {\n+            Some(it) => it,\n             None => return true,\n-            Some(it) => it.kind(),\n         };\n-        match kind {\n-            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | TRY_BLOCK_EXPR => false,\n+        match parent.kind() {\n+            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | EFFECT_EXPR => false,\n             _ => true,\n         }\n     }"}, {"sha": "5e844d5aeab5e13120032a98dfcd35d30de2b0e6", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 25, "deletions": 49, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -476,13 +476,16 @@ impl LoopExpr {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TryBlockExpr {\n+pub struct EffectExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TryBlockExpr {}\n-impl TryBlockExpr {\n+impl ast::AttrsOwner for EffectExpr {}\n+impl EffectExpr {\n+    pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n     pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n-    pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n+    pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -551,11 +554,12 @@ pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for BlockExpr {}\n+impl ast::ModuleItemOwner for BlockExpr {}\n impl BlockExpr {\n-    pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n-    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n-    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n-    pub fn block(&self) -> Option<Block> { support::child(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n+    pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -627,8 +631,8 @@ pub struct TryExpr {\n }\n impl ast::AttrsOwner for TryExpr {}\n impl TryExpr {\n-    pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn question_mark_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![?]) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1121,19 +1125,6 @@ impl Condition {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Block {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for Block {}\n-impl ast::ModuleItemOwner for Block {}\n-impl Block {\n-    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParamList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1477,7 +1468,7 @@ pub enum Expr {\n     FieldExpr(FieldExpr),\n     AwaitExpr(AwaitExpr),\n     TryExpr(TryExpr),\n-    TryBlockExpr(TryBlockExpr),\n+    EffectExpr(EffectExpr),\n     CastExpr(CastExpr),\n     RefExpr(RefExpr),\n     PrefixExpr(PrefixExpr),\n@@ -1960,8 +1951,8 @@ impl AstNode for LoopExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TryBlockExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_BLOCK_EXPR }\n+impl AstNode for EffectExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == EFFECT_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2653,17 +2644,6 @@ impl AstNode for Condition {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Block {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BLOCK }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for ParamList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3312,8 +3292,8 @@ impl From<AwaitExpr> for Expr {\n impl From<TryExpr> for Expr {\n     fn from(node: TryExpr) -> Expr { Expr::TryExpr(node) }\n }\n-impl From<TryBlockExpr> for Expr {\n-    fn from(node: TryBlockExpr) -> Expr { Expr::TryBlockExpr(node) }\n+impl From<EffectExpr> for Expr {\n+    fn from(node: EffectExpr) -> Expr { Expr::EffectExpr(node) }\n }\n impl From<CastExpr> for Expr {\n     fn from(node: CastExpr) -> Expr { Expr::CastExpr(node) }\n@@ -3345,9 +3325,10 @@ impl AstNode for Expr {\n             TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR\n             | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL\n             | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_LIT | CALL_EXPR | INDEX_EXPR\n-            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR\n-            | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL\n-            | BOX_EXPR => true,\n+            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | EFFECT_EXPR | CAST_EXPR\n+            | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL | BOX_EXPR => {\n+                true\n+            }\n             _ => false,\n         }\n     }\n@@ -3375,7 +3356,7 @@ impl AstNode for Expr {\n             FIELD_EXPR => Expr::FieldExpr(FieldExpr { syntax }),\n             AWAIT_EXPR => Expr::AwaitExpr(AwaitExpr { syntax }),\n             TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n-            TRY_BLOCK_EXPR => Expr::TryBlockExpr(TryBlockExpr { syntax }),\n+            EFFECT_EXPR => Expr::EffectExpr(EffectExpr { syntax }),\n             CAST_EXPR => Expr::CastExpr(CastExpr { syntax }),\n             REF_EXPR => Expr::RefExpr(RefExpr { syntax }),\n             PREFIX_EXPR => Expr::PrefixExpr(PrefixExpr { syntax }),\n@@ -3412,7 +3393,7 @@ impl AstNode for Expr {\n             Expr::FieldExpr(it) => &it.syntax,\n             Expr::AwaitExpr(it) => &it.syntax,\n             Expr::TryExpr(it) => &it.syntax,\n-            Expr::TryBlockExpr(it) => &it.syntax,\n+            Expr::EffectExpr(it) => &it.syntax,\n             Expr::CastExpr(it) => &it.syntax,\n             Expr::RefExpr(it) => &it.syntax,\n             Expr::PrefixExpr(it) => &it.syntax,\n@@ -3893,7 +3874,7 @@ impl std::fmt::Display for LoopExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TryBlockExpr {\n+impl std::fmt::Display for EffectExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -4208,11 +4189,6 @@ impl std::fmt::Display for Condition {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Block {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for ParamList {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "b9a396cad5d626a14fdd333ce67b49c2da33c873", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -82,10 +82,10 @@ pub fn block_expr(\n     ast_from_text(&format!(\"fn f() {}\", buf))\n }\n \n-pub fn block_from_expr(e: ast::Expr) -> ast::Block {\n+pub fn block_from_expr(e: ast::Expr) -> ast::BlockExpr {\n     return from_text(&format!(\"{{ {} }}\", e));\n \n-    fn from_text(text: &str) -> ast::Block {\n+    fn from_text(text: &str) -> ast::BlockExpr {\n         ast_from_text(&format!(\"fn f() {}\", text))\n     }\n }"}, {"sha": "d0234cadaf4e5554fce34af29346c8bcb19d207d", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -237,8 +237,7 @@ fn api_walkthrough() {\n \n     // Let's get the `1 + 1` expression!\n     let body: ast::BlockExpr = func.body().unwrap();\n-    let block = body.block().unwrap();\n-    let expr: ast::Expr = block.expr().unwrap();\n+    let expr: ast::Expr = body.expr().unwrap();\n \n     // Enums are used to group related ast nodes together, and can be used for\n     // matching. However, because there are no public fields, it's possible to\n@@ -274,8 +273,8 @@ fn api_walkthrough() {\n     assert_eq!(text.to_string(), \"1 + 1\");\n \n     // There's a bunch of traversal methods on `SyntaxNode`:\n-    assert_eq!(expr_syntax.parent().as_ref(), Some(block.syntax()));\n-    assert_eq!(block.syntax().first_child_or_token().map(|it| it.kind()), Some(T!['{']));\n+    assert_eq!(expr_syntax.parent().as_ref(), Some(body.syntax()));\n+    assert_eq!(body.syntax().first_child_or_token().map(|it| it.kind()), Some(T!['{']));\n     assert_eq!(\n         expr_syntax.next_sibling_or_token().map(|it| it.kind()),\n         Some(SyntaxKind::WHITESPACE)"}, {"sha": "2c08f7e6ed4be68434ec1b0fa42a1e73affa60b8", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -6,19 +6,17 @@ use crate::{\n     SyntaxKind::*,\n };\n \n-pub(crate) fn validate_block_expr(expr: ast::BlockExpr, errors: &mut Vec<SyntaxError>) {\n-    if let Some(parent) = expr.syntax().parent() {\n+pub(crate) fn validate_block_expr(block: ast::BlockExpr, errors: &mut Vec<SyntaxError>) {\n+    if let Some(parent) = block.syntax().parent() {\n         match parent.kind() {\n-            FN_DEF | EXPR_STMT | BLOCK => return,\n+            FN_DEF | EXPR_STMT | BLOCK_EXPR => return,\n             _ => {}\n         }\n     }\n-    if let Some(block) = expr.block() {\n-        errors.extend(block.attrs().map(|attr| {\n-            SyntaxError::new(\n-                \"A block in this position cannot accept inner attributes\",\n-                attr.syntax().text_range(),\n-            )\n-        }))\n-    }\n+    errors.extend(block.attrs().map(|attr| {\n+        SyntaxError::new(\n+            \"A block in this position cannot accept inner attributes\",\n+            attr.syntax().text_range(),\n+        )\n+    }))\n }"}, {"sha": "028f7cbe16b66f7b6c6cf1453ad8221897b65444", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -162,7 +162,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"RECORD_LIT\",\n         \"RECORD_FIELD_LIST\",\n         \"RECORD_FIELD\",\n-        \"TRY_BLOCK_EXPR\",\n+        \"EFFECT_EXPR\",\n         \"BOX_EXPR\",\n         // postfix\n         \"CALL_EXPR\",\n@@ -177,7 +177,6 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"PREFIX_EXPR\",\n         \"RANGE_EXPR\", // just weird\n         \"BIN_EXPR\",\n-        \"BLOCK\",\n         \"EXTERN_BLOCK\",\n         \"EXTERN_ITEM_LIST\",\n         \"ENUM_VARIANT\",\n@@ -440,7 +439,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n         struct IfExpr: AttrsOwner { T![if], Condition }\n         struct LoopExpr: AttrsOwner, LoopBodyOwner { T![loop] }\n-        struct TryBlockExpr: AttrsOwner { T![try], body: BlockExpr }\n+        struct EffectExpr: AttrsOwner { Label, T![try], T![unsafe], T![async], BlockExpr }\n         struct ForExpr: AttrsOwner, LoopBodyOwner {\n             T![for],\n             Pat,\n@@ -451,7 +450,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct ContinueExpr: AttrsOwner { T![continue], T![lifetime] }\n         struct BreakExpr: AttrsOwner { T![break], T![lifetime], Expr }\n         struct Label { T![lifetime] }\n-        struct BlockExpr: AttrsOwner { Label, T![unsafe], T![async], Block  }\n+        struct BlockExpr: AttrsOwner, ModuleItemOwner {\n+            T!['{'], statements: [Stmt], Expr, T!['}'],\n+        }\n         struct ReturnExpr: AttrsOwner { Expr }\n         struct CallExpr: ArgListOwner { Expr }\n         struct MethodCallExpr: AttrsOwner, ArgListOwner {\n@@ -460,7 +461,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct IndexExpr: AttrsOwner { T!['['], T![']'] }\n         struct FieldExpr: AttrsOwner { Expr, T![.], NameRef }\n         struct AwaitExpr: AttrsOwner { Expr, T![.], T![await] }\n-        struct TryExpr: AttrsOwner { T![try], Expr }\n+        struct TryExpr: AttrsOwner { Expr, T![?] }\n         struct CastExpr: AttrsOwner { Expr, T![as], TypeRef }\n         struct RefExpr: AttrsOwner { T![&], T![raw], T![mut], Expr }\n         struct PrefixExpr: AttrsOwner { /*PrefixOp,*/ Expr }\n@@ -556,12 +557,6 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             T![;],\n         }\n         struct Condition { T![let], Pat, T![=], Expr }\n-        struct Block: AttrsOwner, ModuleItemOwner {\n-            T!['{'],\n-            statements: [Stmt],\n-            Expr,\n-            T!['}'],\n-        }\n         struct ParamList {\n             T!['('],\n             SelfParam,\n@@ -722,7 +717,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             FieldExpr,\n             AwaitExpr,\n             TryExpr,\n-            TryBlockExpr,\n+            EffectExpr,\n             CastExpr,\n             RefExpr,\n             PrefixExpr,"}, {"sha": "8028575c5791496f1036362f8ecf563a27366c1d", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f2134cc33f07c09fe166cec42971828843bc0ef/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2134cc33f07c09fe166cec42971828843bc0ef/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=4f2134cc33f07c09fe166cec42971828843bc0ef", "patch": "@@ -432,6 +432,7 @@ impl Field<'_> {\n                     \":\" => \"colon\",\n                     \"::\" => \"coloncolon\",\n                     \"#\" => \"pound\",\n+                    \"?\" => \"question_mark\",\n                     _ => name,\n                 };\n                 format_ident!(\"{}_token\", name)"}]}