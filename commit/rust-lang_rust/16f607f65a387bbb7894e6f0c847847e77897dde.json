{"sha": "16f607f65a387bbb7894e6f0c847847e77897dde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjYwN2Y2NWEzODdiYmI3ODk0ZTZmMGM4NDc4NDdlNzc4OTdkZGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T07:51:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T07:51:21Z"}, "message": "Rollup merge of #70138 - RalfJung:throw-not-return, r=oli-obk\n\ndo not 'return' in 'throw_' macros\n\nIn https://github.com/rust-lang/rust/pull/69839 we turned a closure into a `try` block, but it turns out that does not work with our `throw_` macros, which `return` so they skip the `try`.\n\nHere we fix that. For some reason that means we also have to remove some `;`.\n\nr? @oli-obk", "tree": {"sha": "4f06bbbc1d6a1981b2c8c17e13fc5d46072daec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f06bbbc1d6a1981b2c8c17e13fc5d46072daec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f607f65a387bbb7894e6f0c847847e77897dde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedcd5CRBK7hj4Ov3rIwAAdHIIABgtqfiw9SgRqtk4G6Wqs1hV\nYUysw11F8+ICvEJ1mYPO3wYDyv5d9yP+FO2KGBKrP/NdCG7S05z67YWnQRHR5vHR\nD9a/nwfifXDjV8mPVvHbe7ei8pZKdWMjtOnRZa3s7z4OslsnGffFl6GO1pm82GVg\n7BFtpC5V37U0BekvLcgTiAn9gmR7SOkEvS29bN0PHrFhu/X+jZIM1AwPT0DhGbFb\n5MY134kuc/1uctK41Dx0PIg7Knx+lKbHoaVMUBJVhX/qSS2RHbdvkP2C4cgaPny0\nreIVBxVb6KnZLDyCgiGLTft8UVhkCIuGsdeljgIsmmj45um3N+3tWI9oxnIuqso=\n=4f8/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f06bbbc1d6a1981b2c8c17e13fc5d46072daec2\nparent 569272ac05c6cae7fd64c31396bbdcb7aacd6aab\nparent e46b3c2a530316ae9c64ac03ec13e32e0b25e19e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584777081 +0100\ncommitter GitHub <noreply@github.com> 1584777081 +0100\n\nRollup merge of #70138 - RalfJung:throw-not-return, r=oli-obk\n\ndo not 'return' in 'throw_' macros\n\nIn https://github.com/rust-lang/rust/pull/69839 we turned a closure into a `try` block, but it turns out that does not work with our `throw_` macros, which `return` so they skip the `try`.\n\nHere we fix that. For some reason that means we also have to remove some `;`.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f607f65a387bbb7894e6f0c847847e77897dde", "html_url": "https://github.com/rust-lang/rust/commit/16f607f65a387bbb7894e6f0c847847e77897dde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f607f65a387bbb7894e6f0c847847e77897dde/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569272ac05c6cae7fd64c31396bbdcb7aacd6aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/569272ac05c6cae7fd64c31396bbdcb7aacd6aab", "html_url": "https://github.com/rust-lang/rust/commit/569272ac05c6cae7fd64c31396bbdcb7aacd6aab"}, {"sha": "e46b3c2a530316ae9c64ac03ec13e32e0b25e19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e46b3c2a530316ae9c64ac03ec13e32e0b25e19e", "html_url": "https://github.com/rust-lang/rust/commit/e46b3c2a530316ae9c64ac03ec13e32e0b25e19e"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "dfe5adb1bbff0ec7183631e5e4b0e207977de9cf", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16f607f65a387bbb7894e6f0c847847e77897dde/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f607f65a387bbb7894e6f0c847847e77897dde/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=16f607f65a387bbb7894e6f0c847847e77897dde", "patch": "@@ -46,9 +46,10 @@ macro_rules! err_exhaust {\n     };\n }\n \n+// In the `throw_*` macros, avoid `return` to make them work with `try {}`.\n #[macro_export]\n macro_rules! throw_unsup {\n-    ($($tt:tt)*) => { return Err(err_unsup!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_unsup!($($tt)*))? };\n }\n \n #[macro_export]\n@@ -58,12 +59,12 @@ macro_rules! throw_unsup_format {\n \n #[macro_export]\n macro_rules! throw_inval {\n-    ($($tt:tt)*) => { return Err(err_inval!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_inval!($($tt)*))? };\n }\n \n #[macro_export]\n macro_rules! throw_ub {\n-    ($($tt:tt)*) => { return Err(err_ub!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_ub!($($tt)*))? };\n }\n \n #[macro_export]\n@@ -73,13 +74,13 @@ macro_rules! throw_ub_format {\n \n #[macro_export]\n macro_rules! throw_exhaust {\n-    ($($tt:tt)*) => { return Err(err_exhaust!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_exhaust!($($tt)*))? };\n }\n \n #[macro_export]\n macro_rules! throw_machine_stop {\n     ($($tt:tt)*) => {\n-        return Err($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)).into())\n+        Err::<!, _>($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)))?\n     };\n }\n "}, {"sha": "88cb74ebf8c98bca2b1874dd578d8bd0ca7000d3", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16f607f65a387bbb7894e6f0c847847e77897dde/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f607f65a387bbb7894e6f0c847847e77897dde/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=16f607f65a387bbb7894e6f0c847847e77897dde", "patch": "@@ -171,7 +171,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Called to evaluate `Abort` MIR terminator.\n     fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, !> {\n-        throw_unsup_format!(\"aborting execution is not supported\");\n+        throw_unsup_format!(\"aborting execution is not supported\")\n     }\n \n     /// Called for all binary operations where the LHS has pointer type."}, {"sha": "8d7cafc34b3566ff2270006b292d743d89b4f3cf", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16f607f65a387bbb7894e6f0c847847e77897dde/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f607f65a387bbb7894e6f0c847847e77897dde/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=16f607f65a387bbb7894e6f0c847847e77897dde", "patch": "@@ -192,19 +192,19 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n         _unwind: Option<BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"));\n+        throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"))\n     }\n \n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _msg: &rustc::mir::AssertMessage<'tcx>,\n         _unwind: Option<rustc::mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        bug!(\"panics terminators are not evaluated in ConstProp\");\n+        bug!(\"panics terminators are not evaluated in ConstProp\")\n     }\n \n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {\n-        throw_unsup!(ConstPropUnsupported(\"ptr-to-int casts aren't supported in ConstProp\"));\n+        throw_unsup!(ConstPropUnsupported(\"ptr-to-int casts aren't supported in ConstProp\"))\n     }\n \n     fn binary_ptr_op(\n@@ -217,7 +217,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         throw_unsup!(ConstPropUnsupported(\n             \"pointer arithmetic or comparisons aren't supported \\\n             in ConstProp\"\n-        ));\n+        ))\n     }\n \n     #[inline(always)]\n@@ -240,7 +240,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"can't const prop `box` keyword\"));\n+        throw_unsup!(ConstPropUnsupported(\"can't const prop `box` keyword\"))\n     }\n \n     fn access_local("}]}