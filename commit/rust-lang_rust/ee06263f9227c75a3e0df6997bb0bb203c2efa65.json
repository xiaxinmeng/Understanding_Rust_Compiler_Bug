{"sha": "ee06263f9227c75a3e0df6997bb0bb203c2efa65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDYyNjNmOTIyN2M3NWEzZTBkZjY5OTdiYjBiYjIwM2MyZWZhNjU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-05-08T12:48:26Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-05-08T12:48:26Z"}, "message": "Fallout from fixing Issue 25199.\n\nThere are two interesting kinds of breakage illustrated here:\n\n1. `Box<Trait>` in many contexts is treated as `Box<Trait + 'static>`,\n   due to [RFC 599]. However, in a type like `&'a Box<Trait>`, the\n   `Box<Trait>` type will be expanded to `Box<Trait + 'a>`, again due\n   to [RFC 599]. This, combined with the fix to Issue 25199, leads to\n   a borrowck problem due the combination of this function signature\n   (in src/libstd/net/parser.rs):\n\n   ```rust\n   fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T>>]) -> Option<T>;\n   ```\n\n   with this call site (again in src/libstd/net/parser.rs):\n\n   ```rust\n   fn read_ip_addr(&mut self) -> Option<IpAddr> {\n       let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr().map(|v4| IpAddr::V4(v4));\n       let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr().map(|v6| IpAddr::V6(v6));\n       self.read_or(&mut [Box::new(ipv4_addr), Box::new(ipv6_addr)])\n   }\n   ```\n\n   yielding borrowck errors like:\n\n   ```\n   parser.rs:265:27: 265:69 error: borrowed value does not live long enough\n   parser.rs:265         self.read_or(&mut [Box::new(ipv4_addr), Box::new(ipv6_addr)])\n                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   ```\n\n   (full log at: https://gist.github.com/pnkfelix/e2e80f1a71580f5d3103 )\n\n   The issue here is perhaps subtle: the `parsers` argument is\n   inferred to be taking a slice of boxed objects with the implicit\n   lifetime bound attached to the `self` parameter to `read_or`.\n\n   Meanwhile, the fix to Issue 25199 (added in a forth-coming commit)\n   is forcing us to assume that each boxed object may have a\n   destructor that could refer to state of that lifetime, and\n   *therefore* that inferred lifetime is required to outlive the boxed\n   object itself.\n\n   In this case, the relevant boxed object here is not going to make\n   any such references; I believe it is just an artifact of how the\n   expression was built that it is not assigned type:\n\n     `Box<FnMut(&mut Parser) -> Option<T> + 'static>`.\n\n   (i.e., mucking with the expression is probably one way to fix this\n   problem).\n\n   But the other way to fix it, adopted here, is to change the\n   `read_or` method type to force make the (presumably-intended)\n   `'static` bound explicit on the boxed `FnMut` object.\n\n   (Note: this is still just the *first* example of breakage.)\n\n2. In `macro_rules.rs`, the `TTMacroExpander` trait defines a method\n   with signature:\n\n   ```rust\n   fn expand<'cx>(&self, cx: &'cx mut ExtCtxt, ...) -> Box<MacResult+'cx>;\n   ```\n\n   taking a `&'cx mut ExtCtxt` as an argument and returning a\n   `Box<MacResult'cx>`.\n\n   The fix to Issue 25199 (added in aforementioned forth-coming\n   commit) assumes that a value of type `Box<MacResult+'cx>` may, in\n   its destructor, refer to a reference of lifetime `'cx`; thus the\n   `'cx` lifetime is forced to outlive the returned value.\n\n   Meanwhile, within `expand.rs`, the old code was doing:\n\n   ```rust\n   match expander.expand(fld.cx, ...).make_pat() { ... => immutable borrow of fld.cx ... }\n   ```\n\n   The problem is that the `'cx` lifetime, inferred for the\n   `expander.expand` call, has now been extended so that it has to\n   outlive the temporary R-value returned by `expanded.expand`.  But\n   call is also reborrowing `fld.cx` *mutably*, which means that this\n   reborrow must end before any immutable borrow of `fld.cx`; but\n   there is one of those within the match body. (Note that the\n   temporary R-values for the input expression to `match` all live as\n   long as the whole `match` expression itself (see Issue #3511 and PR\n   #11585).\n\n   To address this, I moved the construction of the pat value into its\n   own `let`-statement, so that the `Box<MacResult>` will only live\n   for as long as the initializing expression for the `let`-statement,\n   and thus allow the subsequent immutable borrow within the `match`.\n\n[RFC 599]: https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md", "tree": {"sha": "6a8e52b67aaa797fe056c7cc76ef39c6a69a0b5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8e52b67aaa797fe056c7cc76ef39c6a69a0b5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee06263f9227c75a3e0df6997bb0bb203c2efa65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee06263f9227c75a3e0df6997bb0bb203c2efa65", "html_url": "https://github.com/rust-lang/rust/commit/ee06263f9227c75a3e0df6997bb0bb203c2efa65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee06263f9227c75a3e0df6997bb0bb203c2efa65/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b402c43f088882db8a03bfcbb5eb8429ef7def0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b402c43f088882db8a03bfcbb5eb8429ef7def0e", "html_url": "https://github.com/rust-lang/rust/commit/b402c43f088882db8a03bfcbb5eb8429ef7def0e"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "69f40d7e7befe2b8850b252c946b9fa9e9da159a", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee06263f9227c75a3e0df6997bb0bb203c2efa65/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee06263f9227c75a3e0df6997bb0bb203c2efa65/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=ee06263f9227c75a3e0df6997bb0bb203c2efa65", "patch": "@@ -61,7 +61,7 @@ impl<'a> Parser<'a> {\n     }\n \n     // Return result of first successful parser\n-    fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T>>])\n+    fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T> + 'static>])\n                -> Option<T> {\n         for pf in parsers.iter_mut() {\n             match self.read_atomically(|p: &mut Parser| pf(p)) {"}, {"sha": "c3f1b9748155fd4a4edbf9fb3fd7fd5de3482721", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee06263f9227c75a3e0df6997bb0bb203c2efa65/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee06263f9227c75a3e0df6997bb0bb203c2efa65/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ee06263f9227c75a3e0df6997bb0bb203c2efa65", "patch": "@@ -986,9 +986,10 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n                     let fm = fresh_mark();\n                     let marked_before = mark_tts(&tts[..], fm);\n                     let mac_span = fld.cx.original_span();\n-                    let expanded = match expander.expand(fld.cx,\n-                                        mac_span,\n-                                        &marked_before[..]).make_pat() {\n+                    let pat = expander.expand(fld.cx,\n+                                              mac_span,\n+                                              &marked_before[..]).make_pat();\n+                    let expanded = match pat {\n                         Some(e) => e,\n                         None => {\n                             fld.cx.span_err("}]}