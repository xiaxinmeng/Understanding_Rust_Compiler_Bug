{"sha": "f30c5ea68611abaffece63787bd1f2c06854551b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMGM1ZWE2ODYxMWFiYWZmZWNlNjM3ODdiZDFmMmMwNjg1NDU1MWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-09T13:53:13Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-09T13:53:13Z"}, "message": "Remove leftover comm.rs in std\n\n(The actual comm module lives in core.)", "tree": {"sha": "5a0cfededb3facec9ddf4feac895c7c6f7315173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a0cfededb3facec9ddf4feac895c7c6f7315173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30c5ea68611abaffece63787bd1f2c06854551b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30c5ea68611abaffece63787bd1f2c06854551b", "html_url": "https://github.com/rust-lang/rust/commit/f30c5ea68611abaffece63787bd1f2c06854551b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30c5ea68611abaffece63787bd1f2c06854551b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0945fcf1fbd964157445f99f4a945ae4110da372", "url": "https://api.github.com/repos/rust-lang/rust/commits/0945fcf1fbd964157445f99f4a945ae4110da372", "html_url": "https://github.com/rust-lang/rust/commit/0945fcf1fbd964157445f99f4a945ae4110da372"}], "stats": {"total": 206, "additions": 7, "deletions": 199}, "files": [{"sha": "ff4d34eb0584fa9697810fe564fee368924d023c", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=f30c5ea68611abaffece63787bd1f2c06854551b", "patch": "@@ -15,8 +15,6 @@ shared boxes (@T) may not be transmitted across channels.\n \n Example:\n \n-> import std::{task, comm, io};\n->\n > let p = comm::port();\n > task::spawn(comm::chan(p), fn (c: chan<str>) {\n >   comm::send(c, \"Hello, World\");"}, {"sha": "86aeed3826c4bc4e5ea35bb1439cd9294175b03d", "filename": "src/libstd/comm.rs", "status": "removed", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/0945fcf1fbd964157445f99f4a945ae4110da372/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0945fcf1fbd964157445f99f4a945ae4110da372/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=0945fcf1fbd964157445f99f4a945ae4110da372", "patch": "@@ -1,186 +0,0 @@\n-/*\n-Module: comm\n-\n-Communication between tasks\n-\n-Communication between tasks is facilitated by ports (in the receiving task),\n-and channels (in the sending task). Any number of channels may feed into a\n-single port.\n-\n-Ports and channels may only transmit values of unique types; that is,\n-values that are statically guaranteed to be accessed by a single\n-'owner' at a time.  Unique types include scalars, vectors, strings,\n-and records, tags, tuples and unique boxes (~T) thereof. Most notably,\n-shared boxes (@T) may not be transmitted across channels.\n-\n-Example:\n-\n-> use std::{task, comm, io};\n->\n-> let p = comm::port();\n-> task::spawn(comm::chan(p), fn (c: chan<str>) {\n->   comm::send(c, \"Hello, World\");\n-> });\n->\n-> io::println(comm::recv(p));\n-\n-*/\n-\n-import sys;\n-import task;\n-\n-import core::ctypes;\n-\n-export send;\n-export recv;\n-export chan;\n-export port;\n-\n-#[abi = \"cdecl\"]\n-native mod rustrt {\n-    type void;\n-    type rust_port;\n-\n-    fn chan_id_send<T: send>(t: *sys::type_desc,\n-                            target_task: task::task, target_port: port_id,\n-                            data: T) -> ctypes::uintptr_t;\n-\n-    fn new_port(unit_sz: uint) -> *rust_port;\n-    fn del_port(po: *rust_port);\n-    fn rust_port_detach(po: *rust_port);\n-    fn get_port_id(po: *rust_port) -> port_id;\n-    fn rust_port_size(po: *rust_port) -> ctypes::size_t;\n-    fn port_recv(dptr: *uint, po: *rust_port,\n-                 yield: *ctypes::uintptr_t,\n-                 killed: *ctypes::uintptr_t);\n-}\n-\n-#[abi = \"rust-intrinsic\"]\n-native mod rusti {\n-    fn call_with_retptr<T: send>(&&f: fn@(*uint)) -> T;\n-}\n-\n-type port_id = int;\n-\n-// It's critical that this only have one variant, so it has a record\n-// layout, and will work in the rust_task structure in task.rs.\n-/*\n-Type: chan\n-\n-A communication endpoint that can send messages. Channels send\n-messages to ports.\n-\n-Each channel is bound to a port when the channel is constructed, so\n-the destination port for a channel must exist before the channel\n-itself.\n-\n-Channels are weak: a channel does not keep the port it is bound to alive.\n-If a channel attempts to send data to a dead port that data will be silently\n-dropped.\n-\n-Channels may be duplicated and themselves transmitted over other channels.\n-*/\n-tag chan<T: send> {\n-    chan_t(task::task, port_id);\n-}\n-\n-resource port_ptr<T: send>(po: *rustrt::rust_port) {\n-    // Once the port is detached it's guaranteed not to receive further\n-    // messages\n-    rustrt::rust_port_detach(po);\n-    // Drain the port so that all the still-enqueued items get dropped\n-    while rustrt::rust_port_size(po) > 0u {\n-        // FIXME: For some reason if we don't assign to something here\n-        // we end up with invalid reads in the drop glue.\n-        let _t = recv_::<T>(po);\n-    }\n-    rustrt::del_port(po);\n-}\n-\n-/*\n-Type: port\n-\n-A communication endpoint that can receive messages. Ports receive\n-messages from channels.\n-\n-Each port has a unique per-task identity and may not be replicated or\n-transmitted. If a port value is copied, both copies refer to the same port.\n-\n-Ports may be associated with multiple <chan>s.\n-*/\n-tag port<T: send> { port_t(@port_ptr<T>); }\n-\n-/*\n-Function: send\n-\n-Sends data over a channel.\n-\n-The sent data is moved into the channel, whereupon the caller loses access\n-to it.\n-*/\n-fn send<T: send>(ch: chan<T>, -data: T) {\n-    let chan_t(t, p) = ch;\n-    let res = rustrt::chan_id_send(sys::get_type_desc::<T>(), t, p, data);\n-    if res != 0u unsafe {\n-        // Data sent successfully\n-        unsafe::leak(data);\n-    }\n-    task::yield();\n-}\n-\n-/*\n-Function: port\n-\n-Constructs a port.\n-*/\n-fn port<T: send>() -> port<T> {\n-    port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>())))\n-}\n-\n-/*\n-Function: recv\n-\n-Receive from a port.\n-\n-If no data is available on the port then the task will block until data\n-becomes available.\n-*/\n-fn recv<T: send>(p: port<T>) -> T { recv_(***p) }\n-\n-// Receive on a raw port pointer\n-fn recv_<T: send>(p: *rustrt::rust_port) -> T {\n-    // FIXME: Due to issue 1185 we can't use a return pointer when\n-    // calling C code, and since we can't create our own return\n-    // pointer on the stack, we're going to call a little intrinsic\n-    // that will grab the value of the return pointer, then call this\n-    // function, which we will then use to call the runtime.\n-    fn recv(dptr: *uint, port: *rustrt::rust_port,\n-            yield: *ctypes::uintptr_t,\n-            killed: *ctypes::uintptr_t) unsafe {\n-        rustrt::port_recv(dptr, port, yield, killed);\n-    }\n-    let yield = 0u;\n-    let yieldp = ptr::addr_of(yield);\n-    let killed = 0u;\n-    let killedp = ptr::addr_of(killed);\n-    let res = rusti::call_with_retptr(bind recv(_, p, yieldp, killedp));\n-    if killed != 0u {\n-        fail \"killed\";\n-    }\n-    if yield != 0u {\n-        // Data isn't available yet, so res has not been initialized.\n-        task::yield();\n-    }\n-    ret res;\n-}\n-\n-/*\n-Function: chan\n-\n-Constructs a channel.\n-\n-The channel is bound to the port used to construct it.\n-*/\n-fn chan<T: send>(p: port<T>) -> chan<T> {\n-    chan_t(task::get_task(), rustrt::get_port_id(***p))\n-}"}, {"sha": "c76497cfb7ea2cd43b27f22f4665eb2f33a22da2", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=f30c5ea68611abaffece63787bd1f2c06854551b", "patch": "@@ -7,7 +7,7 @@\n #[license = \"MIT\"];\n #[crate_type = \"lib\"];\n \n-export comm, fs, io, net, run, uv;\n+export fs, io, net, run, uv;\n export c_vec, four, tri, util;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;\n export rope;\n@@ -19,7 +19,6 @@ export generic_os, os, os_fs;\n \n // General io and system-services modules\n \n-mod comm;\n mod fs;\n mod io;\n mod net;"}, {"sha": "7a1dda0f743191548aa3181d282bb98ebb656080", "filename": "src/test/run-pass/sendfn-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs?ref=f30c5ea68611abaffece63787bd1f2c06854551b", "patch": "@@ -1,8 +1,7 @@\n use std;\n \n-import std::comm;\n-import std::comm::chan;\n-import std::comm::send;\n+import comm::chan;\n+import comm::send;\n \n fn main() { test05(); }\n "}, {"sha": "fb68e7423621582b21da6bf4e7155c3f4b080e83", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=f30c5ea68611abaffece63787bd1f2c06854551b", "patch": "@@ -1,8 +1,7 @@\n use std;\n \n-import std::comm;\n-import std::comm::chan;\n-import std::comm::send;\n+import comm::chan;\n+import comm::send;\n \n fn main() { test05(); }\n "}, {"sha": "20905ca7bb969bef3513f138c4a638ec6ead4a4e", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30c5ea68611abaffece63787bd1f2c06854551b/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=f30c5ea68611abaffece63787bd1f2c06854551b", "patch": "@@ -1,8 +1,7 @@\n use std;\n \n-import std::comm;\n-import std::comm::chan;\n-import std::comm::send;\n+import comm::chan;\n+import comm::send;\n \n fn main() { test05(); }\n "}]}