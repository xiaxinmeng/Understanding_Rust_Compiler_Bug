{"sha": "a246b6542a6660f725441dd016bddd470c761e4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDZiNjU0MmE2NjYwZjcyNTQ0MWRkMDE2YmRkZDQ3MGM3NjFlNGM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-06T01:04:11Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-07T18:49:58Z"}, "message": "Fake up #![no_std] on pretty-printing; keep it out of AST", "tree": {"sha": "0c6921054681641ef8d0109eaa1d83511bce50dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6921054681641ef8d0109eaa1d83511bce50dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a246b6542a6660f725441dd016bddd470c761e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a246b6542a6660f725441dd016bddd470c761e4c", "html_url": "https://github.com/rust-lang/rust/commit/a246b6542a6660f725441dd016bddd470c761e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a246b6542a6660f725441dd016bddd470c761e4c/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d788588dce5525b2bf5674b0c90c791a70582330", "url": "https://api.github.com/repos/rust-lang/rust/commits/d788588dce5525b2bf5674b0c90c791a70582330", "html_url": "https://github.com/rust-lang/rust/commit/d788588dce5525b2bf5674b0c90c791a70582330"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "0da15859ea2df15b961ce02c225ef55c04541ad5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a246b6542a6660f725441dd016bddd470c761e4c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a246b6542a6660f725441dd016bddd470c761e4c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a246b6542a6660f725441dd016bddd470c761e4c", "patch": "@@ -15,17 +15,19 @@ use ast;\n use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{RequiredMethod, ProvidedMethod, TypeImplItem, TypeTraitItem};\n use ast_util;\n+use attr;\n use owned_slice::OwnedSlice;\n use attr::{AttrMetaMethods, AttributeMethods};\n use codemap::{self, CodeMap, BytePos};\n use diagnostic;\n-use parse::token::{self, BinOpToken, Token};\n+use parse::token::{self, BinOpToken, Token, InternedString};\n use parse::lexer::comments;\n use parse;\n use print::pp::{self, break_offset, word, space, zerobreak, hardbreak};\n use print::pp::{Breaks, eof};\n use print::pp::Breaks::{Consistent, Inconsistent};\n use ptr::P;\n+use std_inject;\n \n use std::{ascii, mem};\n use std::old_io::{self, IoResult};\n@@ -113,6 +115,25 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                                       out,\n                                       ann,\n                                       is_expanded);\n+    if is_expanded && std_inject::use_std(krate) {\n+        // We need to print `#![no_std]` (and its feature gate) so that\n+        // compiling pretty-printed source won't inject libstd again.\n+        // However we don't want these attributes in the AST because\n+        // of the feature gate, so we fake them up here.\n+\n+        let no_std_meta = attr::mk_word_item(InternedString::new(\"no_std\"));\n+\n+        // #![feature(no_std)]\n+        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n+                                            attr::mk_list_item(InternedString::new(\"feature\"),\n+                                                               vec![no_std_meta.clone()]));\n+        try!(s.print_attribute(&fake_attr));\n+\n+        // #![no_std]\n+        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(), no_std_meta);\n+        try!(s.print_attribute(&fake_attr));\n+    }\n+\n     try!(s.print_mod(&krate.module, &krate.attrs[]));\n     try!(s.print_remaining_comments());\n     eof(&mut s.s)"}, {"sha": "98c193c7e6b850b1bfc90d6d39d8b8d7537b27ea", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a246b6542a6660f725441dd016bddd470c761e4c/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a246b6542a6660f725441dd016bddd470c761e4c/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=a246b6542a6660f725441dd016bddd470c761e4c", "patch": "@@ -69,9 +69,6 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n             span: DUMMY_SP\n         }));\n \n-        // don't add #![no_std] here, that will block the prelude injection later.\n-        // Add it during the prelude injection instead.\n-\n         krate\n     }\n }\n@@ -87,16 +84,6 @@ struct PreludeInjector<'a>;\n \n impl<'a> fold::Folder for PreludeInjector<'a> {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n-        // Add #![no_std] here, so we don't re-inject when compiling pretty-printed source.\n-        // This must happen here and not in StandardLibraryInjector because this\n-        // fold happens second.\n-\n-        let no_std_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n-                                              attr::mk_word_item(InternedString::new(\"no_std\")));\n-        // std_inject runs after feature checking so manually mark this attr\n-        attr::mark_used(&no_std_attr);\n-        krate.attrs.push(no_std_attr);\n-\n         // only add `use std::prelude::*;` if there wasn't a\n         // `#![no_implicit_prelude]` at the crate level.\n         // fold_mod() will insert glob path."}]}