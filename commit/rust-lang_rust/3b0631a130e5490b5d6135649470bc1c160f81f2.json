{"sha": "3b0631a130e5490b5d6135649470bc1c160f81f2", "node_id": "C_kwDOAAsO6NoAKDNiMDYzMWExMzBlNTQ5MGI1ZDYxMzU2NDk0NzBiYzFjMTYwZjgxZjI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T10:26:44Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T10:26:44Z"}, "message": "Sync from rust db0cbc48d4aaa300713a95d9b317a365a474490c", "tree": {"sha": "de805d06b370023a7b08fa555e86ffa4647d5333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de805d06b370023a7b08fa555e86ffa4647d5333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0631a130e5490b5d6135649470bc1c160f81f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0631a130e5490b5d6135649470bc1c160f81f2", "html_url": "https://github.com/rust-lang/rust/commit/3b0631a130e5490b5d6135649470bc1c160f81f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0631a130e5490b5d6135649470bc1c160f81f2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0547f4c99edeeb0d5f78c50bc73ef4e285d1781", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0547f4c99edeeb0d5f78c50bc73ef4e285d1781", "html_url": "https://github.com/rust-lang/rust/commit/d0547f4c99edeeb0d5f78c50bc73ef4e285d1781"}, {"sha": "bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5ac03edb1ee162fc6ace8985be98a93ba406f7", "html_url": "https://github.com/rust-lang/rust/commit/bb5ac03edb1ee162fc6ace8985be98a93ba406f7"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "63c499d48557500debfc4aaaef8083c67bbc48b1", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b0631a130e5490b5d6135649470bc1c160f81f2/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0631a130e5490b5d6135649470bc1c160f81f2/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=3b0631a130e5490b5d6135649470bc1c160f81f2", "patch": "@@ -774,7 +774,7 @@ fn codegen_stmt<'tcx>(\n                             let variant_dest = lval.downcast_variant(fx, variant_index);\n                             (variant_index, variant_dest, active_field_index)\n                         }\n-                        _ => (VariantIdx::from_u32(0), lval, None),\n+                        _ => (FIRST_VARIANT, lval, None),\n                     };\n                     if active_field_index.is_some() {\n                         assert_eq!(operands.len(), 1);"}, {"sha": "1bd03403f244b3c5b97f4f9e1d584a8a7c7e8ed0", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b0631a130e5490b5d6135649470bc1c160f81f2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0631a130e5490b5d6135649470bc1c160f81f2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3b0631a130e5490b5d6135649470bc1c160f81f2", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, TypeVisitableExt, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n+    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx, FIRST_VARIANT};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "93eefd92342d8f44f64f2b52e2b2361d8471c001", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b0631a130e5490b5d6135649470bc1c160f81f2/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0631a130e5490b5d6135649470bc1c160f81f2/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=3b0631a130e5490b5d6135649470bc1c160f81f2", "patch": "@@ -146,7 +146,7 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n             assert_eq!(def_a, def_b);\n \n-            for i in 0..def_a.variant(VariantIdx::new(0)).fields.len() {\n+            for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n                 let src_f = src.value_field(fx, mir::Field::new(i));\n                 let dst_f = dst.place_field(fx, mir::Field::new(i));\n "}]}