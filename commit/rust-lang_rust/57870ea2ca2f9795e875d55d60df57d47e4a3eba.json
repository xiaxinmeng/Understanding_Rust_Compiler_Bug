{"sha": "57870ea2ca2f9795e875d55d60df57d47e4a3eba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ODcwZWEyY2EyZjk3OTVlODc1ZDU1ZDYwZGY1N2Q0N2U0YTNlYmE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-11T14:30:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-13T15:37:51Z"}, "message": "rustc_target: Introduce `msvc_base`\n\nand inherit both `windows_msvc_base` and `uefi_msvc_base` from it.", "tree": {"sha": "b1884bc0d53e7cd324220edbdcdeb63e0d747e74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1884bc0d53e7cd324220edbdcdeb63e0d747e74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57870ea2ca2f9795e875d55d60df57d47e4a3eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57870ea2ca2f9795e875d55d60df57d47e4a3eba", "html_url": "https://github.com/rust-lang/rust/commit/57870ea2ca2f9795e875d55d60df57d47e4a3eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57870ea2ca2f9795e875d55d60df57d47e4a3eba/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c480279b9da4487aa779c26f0445aaaf268834", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c480279b9da4487aa779c26f0445aaaf268834", "html_url": "https://github.com/rust-lang/rust/commit/88c480279b9da4487aa779c26f0445aaaf268834"}], "stats": {"total": 107, "additions": 59, "deletions": 48}, "files": [{"sha": "221d5f0785cd2e421ac1a17ae35f1b071128c974", "filename": "src/librustc_target/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs?ref=57870ea2ca2f9795e875d55d60df57d47e4a3eba", "patch": "@@ -23,11 +23,6 @@ pub fn target() -> TargetResult {\n     // arguments, thus giving you access to full MMX/SSE acceleration.\n     base.features = \"-mmx,-sse,+soft-float\".to_string();\n \n-    // UEFI mirrors the calling-conventions used on windows. In case of i686 this means small\n-    // structs will be returned as int. This shouldn't matter much, since the restrictions placed\n-    // by the UEFI specifications forbid any ABI to return structures.\n-    base.abi_return_struct_as_int = true;\n-\n     // Use -GNU here, because of the reason below:\n     // Background and Problem:\n     //   If we use i686-unknown-windows, the LLVM IA32 MSVC generates compiler intrinsic"}, {"sha": "6ff812754aa7d391f81f74c59c72afcc54c26f79", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=57870ea2ca2f9795e875d55d60df57d47e4a3eba", "patch": "@@ -59,6 +59,7 @@ mod l4re_base;\n mod linux_base;\n mod linux_kernel_base;\n mod linux_musl_base;\n+mod msvc_base;\n mod netbsd_base;\n mod openbsd_base;\n mod redox_base;"}, {"sha": "4d921b5d5fe1063ef62a1cd72ba47db4ca44e275", "filename": "src/librustc_target/spec/msvc_base.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs?ref=57870ea2ca2f9795e875d55d60df57d47e4a3eba", "patch": "@@ -0,0 +1,38 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    let pre_link_args_msvc = vec![\n+        // Suppress the verbose logo and authorship debugging output, which would needlessly\n+        // clog any log files.\n+        \"/NOLOGO\".to_string(),\n+        // Tell the compiler that non-code sections can be marked as non-executable,\n+        // including stack pages.\n+        // UEFI is fully compatible to non-executable data pages.\n+        // In fact, firmware might enforce this, so we better let the linker know about this,\n+        // so it will fail if the compiler ever tries placing code on the stack\n+        // (e.g., trampoline constructs and alike).\n+        \"/NXCOMPAT\".to_string(),\n+    ];\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n+\n+    TargetOptions {\n+        executables: true,\n+        is_like_windows: true,\n+        is_like_msvc: true,\n+        // set VSLANG to 1033 can prevent link.exe from using\n+        // language packs, and avoid generating Non-UTF-8 error\n+        // messages if a link error occurred.\n+        link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n+        lld_flavor: LldFlavor::Link,\n+        pre_link_args,\n+        // UEFI mirrors the calling-conventions used on windows. In case of x86-64 and i686 this\n+        // means small structs will be returned as int. This shouldn't matter much, since the\n+        // restrictions placed by the UEFI specifications forbid any ABI to return structures.\n+        abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n+\n+        ..Default::default()\n+    }\n+}"}, {"sha": "3f7c78c8e7d47cb79876fd834ba7f83629a91828", "filename": "src/librustc_target/spec/uefi_msvc_base.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs?ref=57870ea2ca2f9795e875d55d60df57d47e4a3eba", "patch": "@@ -9,19 +9,12 @@\n // the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n // code runs in the same environment, no process separation is supported.\n \n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n+    let mut base = super::msvc_base::opts();\n+\n     let pre_link_args_msvc = vec![\n-        // Suppress the verbose logo and authorship debugging output, which would needlessly\n-        // clog any log files.\n-        \"/NOLOGO\".to_string(),\n-        // UEFI is fully compatible to non-executable data pages. Tell the compiler that\n-        // non-code sections can be marked as non-executable, including stack pages. In fact,\n-        // firmware might enforce this, so we better let the linker know about this, so it\n-        // will fail if the compiler ever tries placing code on the stack (e.g., trampoline\n-        // constructs and alike).\n-        \"/NXCOMPAT\".to_string(),\n         // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n         // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n         // spec.\n@@ -37,25 +30,29 @@ pub fn opts() -> TargetOptions {\n         // exit (default for applications).\n         \"/subsystem:efi_application\".to_string(),\n     ];\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n-    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n \n     TargetOptions {\n-        dynamic_linking: false,\n-        executables: true,\n         disable_redzone: true,\n         exe_suffix: \".efi\".to_string(),\n         allows_weak_linkage: false,\n         panic_strategy: PanicStrategy::Abort,\n         stack_probes: true,\n         singlethread: true,\n-        emit_debug_gdb_scripts: false,\n-\n         linker: Some(\"rust-lld\".to_string()),\n-        lld_flavor: LldFlavor::Link,\n-        pre_link_args,\n+        // FIXME: This should likely be `true` inherited from `msvc_base`\n+        // because UEFI follows Windows ABI and uses PE/COFF.\n+        // The `false` is probably causing ABI bugs right now.\n+        is_like_windows: false,\n+        // FIXME: This should likely be `true` inherited from `msvc_base`\n+        // because UEFI follows Windows ABI and uses PE/COFF.\n+        // The `false` is probably causing ABI bugs right now.\n+        is_like_msvc: false,\n \n-        ..Default::default()\n+        ..base\n     }\n }"}, {"sha": "77171f8672e8a2b7ea8a26a11604be5db1c04431", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=57870ea2ca2f9795e875d55d60df57d47e4a3eba", "patch": "@@ -1,33 +1,18 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    let pre_link_args_msvc = vec![\"/NOLOGO\".to_string(), \"/NXCOMPAT\".to_string()];\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n-    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n+    let base = super::msvc_base::opts();\n \n     TargetOptions {\n-        function_sections: true,\n         dynamic_linking: true,\n-        executables: true,\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n         target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        is_like_msvc: true,\n-        // set VSLANG to 1033 can prevent link.exe from using\n-        // language packs, and avoid generating Non-UTF-8 error\n-        // messages if a link error occurred.\n-        link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n-        lld_flavor: LldFlavor::Link,\n-        pre_link_args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n         // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n         // as there's been trouble in the past of linking the C++ standard\n@@ -40,6 +25,6 @@ pub fn opts() -> TargetOptions {\n         // not ever be possible for us to pass this flag.\n         no_default_libraries: false,\n \n-        ..Default::default()\n+        ..base\n     }\n }"}, {"sha": "12edc29330a49057c6cf2c1fc41b3658bf28961b", "filename": "src/librustc_target/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57870ea2ca2f9795e875d55d60df57d47e4a3eba/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs?ref=57870ea2ca2f9795e875d55d60df57d47e4a3eba", "patch": "@@ -28,11 +28,6 @@ pub fn target() -> TargetResult {\n     // places no locality-restrictions, so it fits well here.\n     base.code_model = Some(\"large\".to_string());\n \n-    // UEFI mirrors the calling-conventions used on windows. In case of x86-64 this means small\n-    // structs will be returned as int. This shouldn't matter much, since the restrictions placed\n-    // by the UEFI specifications forbid any ABI to return structures.\n-    base.abi_return_struct_as_int = true;\n-\n     Ok(Target {\n         llvm_target: \"x86_64-unknown-windows\".to_string(),\n         target_endian: \"little\".to_string(),"}]}