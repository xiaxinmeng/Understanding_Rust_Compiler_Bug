{"sha": "1879d17f082e58500c84529815a2a8ba955af999", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzlkMTdmMDgyZTU4NTAwYzg0NTI5ODE1YTJhOGJhOTU1YWY5OTk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-31T22:11:29Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-05T18:37:19Z"}, "message": "Only insert nodes which changes lint levels in the LintLevelMap", "tree": {"sha": "9a9a2f347b0c79bc68587524411c2d66c01e93f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a9a2f347b0c79bc68587524411c2d66c01e93f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1879d17f082e58500c84529815a2a8ba955af999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1879d17f082e58500c84529815a2a8ba955af999", "html_url": "https://github.com/rust-lang/rust/commit/1879d17f082e58500c84529815a2a8ba955af999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1879d17f082e58500c84529815a2a8ba955af999/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "html_url": "https://github.com/rust-lang/rust/commit/f22dca0a1bef4141e75326caacc3cd59f3d5be8e"}], "stats": {"total": 164, "additions": 80, "deletions": 84}, "files": [{"sha": "da1c541019c5dac338c443ad7662514f14ba8faa", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -1033,6 +1033,7 @@ impl<'hir> Map<'hir> {\n     pub fn attrs(&self, id: NodeId) -> &'hir [ast::Attribute] {\n         self.read(id); // reveals attributes on the node\n         let attrs = match self.find(id) {\n+            Some(Node::Local(l)) => Some(&l.attrs[..]),\n             Some(Node::Item(i)) => Some(&i.attrs[..]),\n             Some(Node::ForeignItem(fi)) => Some(&fi.attrs[..]),\n             Some(Node::TraitItem(ref ti)) => Some(&ti.attrs[..]),"}, {"sha": "3c6635c03413152e979bad18b8aa7829aac5cfff", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -157,6 +157,7 @@ pub struct LintLevelsBuilder<'a> {\n \n pub struct BuilderPush {\n     prev: u32,\n+    pub(super) changed: bool,\n }\n \n impl<'a> LintLevelsBuilder<'a> {\n@@ -454,6 +455,7 @@ impl<'a> LintLevelsBuilder<'a> {\n \n         BuilderPush {\n             prev: prev,\n+            changed: prev != self.cur,\n         }\n     }\n \n@@ -512,11 +514,6 @@ impl LintLevelMap {\n             self.sets.get_lint_level(lint, *idx, None, session)\n         })\n     }\n-\n-    /// Returns if this `id` has lint level information.\n-    pub fn lint_level_set(&self, id: HirId) -> Option<u32> {\n-        self.id_to_set.get(&id).cloned()\n-    }\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {"}, {"sha": "b3fc5612ba54783d5f97e551c180a59e1b7b288b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -721,6 +721,16 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     return err\n }\n \n+pub fn maybe_lint_level_root(tcx: TyCtxt<'_, '_, '_>, id: hir::HirId) -> bool {\n+    let attrs = tcx.hir().attrs_by_hir_id(id);\n+    for attr in attrs {\n+        if Level::from_str(&attr.name().as_str()).is_some() {\n+            true;\n+        }\n+    }\n+    false\n+}\n+\n fn lint_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, cnum: CrateNum)\n     -> Lrc<LintLevelMap>\n {\n@@ -731,9 +741,10 @@ fn lint_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, cnum: CrateNum)\n     };\n     let krate = tcx.hir().krate();\n \n-    builder.with_lint_attrs(hir::CRATE_HIR_ID, &krate.attrs, |builder| {\n-        intravisit::walk_crate(builder, krate);\n-    });\n+    let push = builder.levels.push(&krate.attrs);\n+    builder.levels.register_id(hir::CRATE_HIR_ID);\n+    intravisit::walk_crate(&mut builder, krate);\n+    builder.levels.pop(push);\n \n     Lrc::new(builder.levels.build_map())\n }\n@@ -751,7 +762,9 @@ impl<'a, 'tcx> LintLevelMapBuilder<'a, 'tcx> {\n         where F: FnOnce(&mut Self)\n     {\n         let push = self.levels.push(attrs);\n-        self.levels.register_id(id);\n+        if push.changed {\n+            self.levels.register_id(id);\n+        }\n         f(self);\n         self.levels.pop(push);\n     }"}, {"sha": "3f7018ed919cdce2bc61bdb874ee4a8b328ecee8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -2856,30 +2856,44 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         err.emit()\n     }\n \n-    pub fn lint_level_at_node(self, lint: &'static Lint, mut id: hir::HirId)\n-        -> (lint::Level, lint::LintSource)\n-    {\n-        // Right now we insert a `with_ignore` node in the dep graph here to\n-        // ignore the fact that `lint_levels` below depends on the entire crate.\n-        // For now this'll prevent false positives of recompiling too much when\n-        // anything changes.\n-        //\n-        // Once red/green incremental compilation lands we should be able to\n-        // remove this because while the crate changes often the lint level map\n-        // will change rarely.\n-        self.dep_graph.with_ignore(|| {\n-            let sets = self.lint_levels(LOCAL_CRATE);\n-            loop {\n-                if let Some(pair) = sets.level_and_source(lint, id, self.sess) {\n-                    return pair\n-                }\n-                let next = self.hir().get_parent_node_by_hir_id(id);\n-                if next == id {\n-                    bug!(\"lint traversal reached the root of the crate\");\n-                }\n-                id = next;\n+    /// Walks upwards from `id` to find a node which might change lint levels with attributes.\n+    /// It stops at `bound` and just returns it if reached.\n+    pub fn maybe_lint_level_root_bounded(\n+        self,\n+        mut id: hir::HirId,\n+        bound: hir::HirId,\n+    ) -> hir::HirId {\n+        loop {\n+            if id == bound {\n+                return bound;\n             }\n-        })\n+            if lint::maybe_lint_level_root(self, id) {\n+                return id;\n+            }\n+            let next = self.hir().get_parent_node_by_hir_id(id);\n+            if next == id {\n+                bug!(\"lint traversal reached the root of the crate\");\n+            }\n+            id = next;\n+        }\n+    }\n+\n+    pub fn lint_level_at_node(\n+        self,\n+        lint: &'static Lint,\n+        mut id: hir::HirId\n+    ) -> (lint::Level, lint::LintSource) {\n+        let sets = self.lint_levels(LOCAL_CRATE);\n+        loop {\n+            if let Some(pair) = sets.level_and_source(lint, id, self.sess) {\n+                return pair\n+            }\n+            let next = self.hir().get_parent_node_by_hir_id(id);\n+            if next == id {\n+                bug!(\"lint traversal reached the root of the crate\");\n+            }\n+            id = next;\n+        }\n     }\n \n     pub fn struct_span_lint_hir<S: Into<MultiSpan>>(self,"}, {"sha": "4aa463b37ab779f74e02fe432dc44ac89f0db4be", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -82,7 +82,6 @@ use crate::hair::LintLevel;\n use rustc::middle::region;\n use rustc::ty::Ty;\n use rustc::hir;\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::mir::*;\n use syntax_pos::{Span};\n use rustc_data_structures::fx::FxHashMap;\n@@ -309,16 +308,25 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_scope = self.source_scope;\n         let tcx = self.hir.tcx();\n         if let LintLevel::Explicit(current_hir_id) = lint_level {\n-            let same_lint_scopes = tcx.dep_graph.with_ignore(|| {\n-                let sets = tcx.lint_levels(LOCAL_CRATE);\n-                let parent_hir_id = self.source_scope_local_data[source_scope].lint_root;\n-                sets.lint_level_set(parent_hir_id) == sets.lint_level_set(current_hir_id)\n-            });\n-\n-            if !same_lint_scopes {\n-                self.source_scope =\n-                    self.new_source_scope(region_scope.1.span, lint_level,\n-                                          None);\n+            // Use `maybe_lint_level_root_bounded` with `root_lint_level` as a bound\n+            // to avoid adding Hir dependences on our parents.\n+            // We estimate the true lint roots here to avoid creating a lot of source scopes.\n+\n+            let parent_root = tcx.maybe_lint_level_root_bounded(\n+                self.source_scope_local_data[source_scope].lint_root,\n+                self.hir.root_lint_level,\n+            );\n+            let current_root = tcx.maybe_lint_level_root_bounded(\n+                current_hir_id,\n+                self.hir.root_lint_level\n+            );\n+\n+            if parent_root != current_root {\n+                self.source_scope = self.new_source_scope(\n+                    region_scope.1.span,\n+                    LintLevel::Explicit(current_root),\n+                    None\n+                );\n             }\n         }\n         self.push_scope(region_scope);"}, {"sha": "17fab6c5ddcff02e9272b605a8b308510304517e", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -103,7 +103,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         },\n                         pattern,\n                         initializer: local.init.to_ref(),\n-                        lint_level: cx.lint_level_of(local.hir_id),\n+                        lint_level: LintLevel::Explicit(local.hir_id),\n                     },\n                     opt_destruction_scope: opt_dxn_ext,\n                     span: stmt_span,"}, {"sha": "1591fa318cae8b26aa940c454c83ee06e8009ce5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             kind: ExprKind::Scope {\n                 region_scope: expr_scope,\n                 value: expr.to_ref(),\n-                lint_level: cx.lint_level_of(self.hir_id),\n+                lint_level: LintLevel::Explicit(self.hir_id),\n             },\n         };\n "}, {"sha": "c0f3989b4ba9735c4e2bbcc9cf0ea3e9daf083f8", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1879d17f082e58500c84529815a2a8ba955af999/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=1879d17f082e58500c84529815a2a8ba955af999", "patch": "@@ -6,7 +6,7 @@ use crate::hair::*;\n use crate::hair::util::UserAnnotatedTyHelpers;\n \n use rustc_data_structures::indexed_vec::Idx;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::Node;\n use rustc::middle::region;\n use rustc::infer::InferCtxt;\n@@ -76,11 +76,10 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Constants always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;\n \n-        let lint_level = lint_level_for_hir_id(tcx, src_id);\n         Cx {\n             tcx,\n             infcx,\n-            root_lint_level: lint_level,\n+            root_lint_level: src_id,\n             param_env: tcx.param_env(src_def_id),\n             identity_substs: InternalSubsts::identity_for_item(tcx.global_tcx(), src_def_id),\n             region_scope_tree: tcx.region_scope_tree(src_def_id),\n@@ -197,18 +196,6 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         ty.needs_drop(self.tcx.global_tcx(), param_env)\n     }\n \n-    fn lint_level_of(&self, hir_id: hir::HirId) -> LintLevel {\n-        let has_lint_level = self.tcx.dep_graph.with_ignore(|| {\n-            self.tcx.lint_levels(LOCAL_CRATE).lint_level_set(hir_id).is_some()\n-        });\n-\n-        if has_lint_level {\n-            LintLevel::Explicit(hir_id)\n-        } else {\n-            LintLevel::Inherited\n-        }\n-    }\n-\n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n@@ -236,30 +223,6 @@ impl UserAnnotatedTyHelpers<'gcx, 'tcx> for Cx<'_, 'gcx, 'tcx> {\n     }\n }\n \n-fn lint_level_for_hir_id(tcx: TyCtxt<'_, '_, '_>, mut id: hir::HirId) -> hir::HirId {\n-    // Right now we insert a `with_ignore` node in the dep graph here to\n-    // ignore the fact that `lint_levels` below depends on the entire crate.\n-    // For now this'll prevent false positives of recompiling too much when\n-    // anything changes.\n-    //\n-    // Once red/green incremental compilation lands we should be able to\n-    // remove this because while the crate changes often the lint level map\n-    // will change rarely.\n-    tcx.dep_graph.with_ignore(|| {\n-        let sets = tcx.lint_levels(LOCAL_CRATE);\n-        loop {\n-            if sets.lint_level_set(id).is_some() {\n-                return id\n-            }\n-            let next = tcx.hir().get_parent_node_by_hir_id(id);\n-            if next == id {\n-                bug!(\"lint traversal reached the root of the crate\");\n-            }\n-            id = next;\n-        }\n-    })\n-}\n-\n mod block;\n mod expr;\n mod to_ref;"}]}