{"sha": "15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZTM0ZGViYTNlZmE3YzA2NGJmOWZmZTBmYTFlZmY0N2Y5YjExN2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-28T22:26:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-28T22:35:21Z"}, "message": "Eliminate glue.o. Closes #990", "tree": {"sha": "32b1f995f115e0fe1d9d846c96dc702cb63f7990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b1f995f115e0fe1d9d846c96dc702cb63f7990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "html_url": "https://github.com/rust-lang/rust/commit/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1ba559c03624990e06b98d4329d5daee089acca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ba559c03624990e06b98d4329d5daee089acca", "html_url": "https://github.com/rust-lang/rust/commit/e1ba559c03624990e06b98d4329d5daee089acca"}], "stats": {"total": 104, "additions": 25, "deletions": 79}, "files": [{"sha": "5b568fc919a174ff943937ea733946cbf3bee0ba", "filename": "Makefile.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -172,7 +172,6 @@ SREQ$(1) = stage$(1)/rustc$(X)          \\\n            stage$(1)/$$(CFG_RUNTIME)     \\\n            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(1)) \\\n            stage$(1)/$$(CFG_RUSTLLVM)    \\\n-           stage$(1)/lib/glue.o          \\\n            stage$(1)/lib/main.o          \\\n            stage$(1)/lib/$$(CFG_RUNTIME) \\\n            $$(MKFILES)\n@@ -181,7 +180,6 @@ SREQ$(1) = stage$(1)/rustc$(X)          \\\n            stage$(1)/$$(CFG_RUNTIME)     \\\n            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(1)) \\\n            stage$(1)/$$(CFG_RUSTLLVM)    \\\n-           stage$(1)/lib/glue.o          \\\n            stage$(1)/lib/main.o          \\\n            stage$(1)/lib/$$(CFG_RUNTIME) \\\n            stage$(1)/lib/$$(CFG_STDLIB)  \\"}, {"sha": "7f22d7593e1ce2cc9377d8673f08fe60b3cc058b", "filename": "mk/clean.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -13,22 +13,22 @@ clean:\n \t$(Q)rm -f $(C_DEPFILES:%.d=%.d.tmp)\n \t$(Q)rm -f $(CRATE_DEPFILES:%.d=%.d.tmp)\n \t$(Q)rm -f $(GENERATED)\n-\t$(Q)rm -f stage0/rustc$(X) stage0/lib/glue* stage0/lib/main.o\n+\t$(Q)rm -f stage0/rustc$(X) stage0/lib/main.o\n \t$(Q)rm -f stage0/lib/$(CFG_RUNTIME) stage0/lib/$(CFG_STDLIB)\n \t$(Q)rm -f stage0/$(CFG_RUNTIME) stage0/$(CFG_STDLIB)\n \t$(Q)rm -f stage0/lib/libstd.rlib\n \t$(Q)rm -f stage0/$(CFG_RUSTLLVM) stage0/lib/intrinsics.bc\n-\t$(Q)rm -f stage1/rustc$(X) stage1/lib/glue* stage1/lib/main.o\n+\t$(Q)rm -f stage1/rustc$(X) stage1/lib/main.o\n \t$(Q)rm -f stage1/lib/$(CFG_RUNTIME) stage1/lib/$(CFG_STDLIB)\n \t$(Q)rm -f stage1/$(CFG_RUNTIME) stage1/$(CFG_STDLIB)\n \t$(Q)rm -f stage1/$(CFG_RUSTLLVM) stage1/lib/intrinsics.bc\n \t$(Q)rm -f stage1/lib/libstd.rlib\n-\t$(Q)rm -f stage2/rustc$(X) stage2/lib/glue* stage2/lib/main.o\n+\t$(Q)rm -f stage2/rustc$(X) stage2/lib/main.o\n \t$(Q)rm -f stage2/lib/$(CFG_RUNTIME) stage2/lib/$(CFG_STDLIB)\n \t$(Q)rm -f stage2/$(CFG_RUNTIME) stage2/$(CFG_STDLIB)\n \t$(Q)rm -f stage2/$(CFG_RUSTLLVM) stage2/lib/intrinsics.bc\n \t$(Q)rm -f stage2/lib/libstd.rlib\n-\t$(Q)rm -f stage3/rustc$(X) stage3/lib/glue* stage3/lib/main.o\n+\t$(Q)rm -f stage3/rustc$(X) stage3/lib/main.o\n \t$(Q)rm -f stage3/lib/$(CFG_RUNTIME) stage3/lib/$(CFG_STDLIB)\n \t$(Q)rm -f stage3/$(CFG_RUNTIME) stage3/$(CFG_STDLIB)\n \t$(Q)rm -f stage3/$(CFG_RUSTLLVM) stage3/lib/intrinsics.bc"}, {"sha": "f13ca3f6ca0813306cc221fab84dce9a3aba90f0", "filename": "mk/snap.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/mk%2Fsnap.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/mk%2Fsnap.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fsnap.mk?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -1,14 +1,14 @@\n \n-snap-stage1: stage1/rustc$(X) stage1/lib/glue.o stage1/lib/$(CFG_RUNTIME) \\\n+snap-stage1: stage1/rustc$(X) stage1/lib/$(CFG_RUNTIME) \\\n \tstage1/$(CFG_RUSTLLVM) stage1/lib/main.o\n \t$(S)src/etc/make-snapshot.py stage1\n \n-snap-stage2: stage2/rustc$(X) stage2/lib/glue.o stage2/lib/$(CFG_STDLIB) \\\n+snap-stage2: stage2/rustc$(X) stage2/lib/$(CFG_STDLIB) \\\n \tstage2/lib/libstd.rlib stage2/lib/$(CFG_RUNTIME) \\\n \tstage2/$(CFG_RUSTLLVM) stage2/lib/main.o\n \t$(S)src/etc/make-snapshot.py stage2\n \n-snap-stage3: stage3/rustc$(X) stage3/lib/glue.o stage3/lib/$(CFG_STDLIB) \\\n+snap-stage3: stage3/rustc$(X) stage3/lib/$(CFG_STDLIB) \\\n \tstage3/lib/libstd.rlib stage3/lib/$(CFG_RUNTIME) \\\n \tstage3/$(CFG_RUSTLLVM) stage3/lib/main.o\n \t$(S)src/etc/make-snapshot.py stage3"}, {"sha": "4ff77b4a4bc9184d9c8e40709442e11dc832a6cd", "filename": "mk/stageN.mk", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/mk%2FstageN.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/mk%2FstageN.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2FstageN.mk?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -63,14 +63,6 @@ stage$(2)/lib/intrinsics.bc: $$(INTRINSICS_BC)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/lib/glue.o: stage$(2)/rustc$$(X)        \\\n-                      stage$(2)/$$(CFG_RUNTIME)   \\\n-                      stage$(2)/$$(CFG_RUSTLLVM)  \\\n-                      stage$(2)/lib/intrinsics.bc \\\n-                      $$(SREQ$(1))\n-\t@$$(call E, generate: $$@)\n-\t$$(STAGE$(2)) -c -o $$@ --glue\n-\n stage$(2)/lib/main.o: rt/main.o\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -84,7 +76,7 @@ stage$(2)/lib/$$(CFG_STDLIB): $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n                               stage$(2)/rustc$$(X)               \\\n                               stage$(2)/$$(CFG_RUNTIME)          \\\n                               stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                              stage$(2)/lib/glue.o               \\\n+                              stage$(2)/lib/intrinsics.bc        \\\n                               $$(SREQ$(1))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2))  --lib -o $$@ $$<\n@@ -93,7 +85,7 @@ stage$(2)/lib/libstd.rlib: $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n                            stage$(2)/rustc$$(X)               \\\n                            stage$(2)/$$(CFG_RUNTIME)          \\\n                            stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                           stage$(2)/lib/glue.o               \\\n+                           stage$(2)/lib/intrinsics.bc        \\\n                            $$(SREQ$(1))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) --lib --static -o $$@ $$<\n@@ -111,15 +103,6 @@ stage$(2)/lib/rustc/$(3)/intrinsics.bc: $$(INTRINSICS_BC)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/lib/rustc/$(3)/glue.o: \\\n-         stage$(2)/rustc$$(X)        \\\n-         stage$(2)/$$(CFG_RUNTIME)   \\\n-         stage$(2)/$$(CFG_RUSTLLVM)  \\\n-         stage$(2)/lib/intrinsics.bc \\\n-         $$(SREQ$(1))\n-\t@$$(call E, generate: $$@)\n-\t$$(STAGE$(2)) -c -o $$@ --glue\n-\n stage$(2)/lib/rustc/$(3)/main.o: rt/main.o\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n@@ -135,7 +118,7 @@ stage$(2)/lib/rustc/$(3)/$$(CFG_STDLIB): \\\n         stage$(2)/rustc$$(X)               \\\n         stage$(2)/$$(CFG_RUNTIME)          \\\n         stage$(2)/$$(CFG_RUSTLLVM)         \\\n-        stage$(2)/lib/rustc/$(3)/glue.o     \\\n+        stage$(2)/lib/intrinsics.bc        \\\n         $$(SREQ$(1))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2))  --lib -o $$@ $$<\n@@ -145,7 +128,7 @@ stage$(2)/lib/rustc/$(3)/libstd.rlib: \\\n         stage$(2)/rustc$$(X)               \\\n         stage$(2)/$$(CFG_RUNTIME)          \\\n         stage$(2)/$$(CFG_RUSTLLVM)         \\\n-        stage$(2)/lib/rustc/$(3)/glue.o     \\\n+        stage$(2)/lib/intrinsics.bc        \\\n         $$(SREQ$(1))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) --lib --static -o $$@ $$<"}, {"sha": "dd952bb0db32da329952da84607ee4f144ad5616", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -497,14 +497,13 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n fn link_binary(sess: session::session,\n                binary_dir: str,\n                saved_out_filename: str) {\n-    let glu: str = binary_dir + \"/lib/glue.o\";\n     let main: str = binary_dir + \"/lib/main.o\";\n     let stage: str = \"-L\" + binary_dir + \"/lib\";\n     let prog: str = \"gcc\";\n     // The invocations of gcc share some flags across platforms\n \n     let gcc_args =\n-        [stage, \"-Lrt\", \"-lrustrt\", glu, \"-m32\", \"-o\", saved_out_filename,\n+        [stage, \"-Lrt\", \"-lrustrt\", \"-m32\", \"-o\", saved_out_filename,\n          saved_out_filename + \".o\"];\n     let lib_cmd;\n "}, {"sha": "9887664caf5ced9bb0cec2bf8c34ff250efad4bd", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -238,7 +238,6 @@ options:\n     -v --version       print version info and exit\n \n     -o <filename>      write output to <filename>\n-    --glue             generate glue.bc file\n     --lib              compile a library crate\n     --static           use or produce static libraries\n     --pretty [type]    pretty-print the input instead of compiling\n@@ -424,7 +423,7 @@ fn parse_pretty(sess: session::session, name: str) -> pp_mode {\n \n fn opts() -> [getopts::opt] {\n     ret [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n-         optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n+         optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n          optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"no-trans\"),\n          optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n@@ -458,15 +457,6 @@ fn main(args: [str]) {\n     let sess = build_session(sopts);\n     let n_inputs = vec::len::<str>(match.free);\n     let output_file = getopts::opt_maybe_str(match, \"o\");\n-    let glue = opt_present(match, \"glue\");\n-    if glue {\n-        if n_inputs > 0u {\n-            sess.fatal(\"No input files allowed with --glue.\");\n-        }\n-        let out = option::from_maybe::<str>(\"glue.bc\", output_file);\n-        middle::trans::make_common_glue(sess, out);\n-        ret;\n-    }\n     if n_inputs == 0u {\n         sess.fatal(\"No input filename given.\");\n     } else if n_inputs > 1u {"}, {"sha": "1a6f046b0cd355c49db80736086fd5cf21a6d8b5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -6044,35 +6044,6 @@ fn decl_no_op_type_glue(llmod: ModuleRef, taskptr_type: TypeRef) -> ValueRef {\n     ret decl_cdecl_fn(llmod, abi::no_op_type_glue_name(), ty);\n }\n \n-fn make_glues(llmod: ModuleRef, taskptr_type: TypeRef) -> @glue_fns {\n-    ret @{no_op_type_glue: decl_no_op_type_glue(llmod, taskptr_type)};\n-}\n-\n-fn make_common_glue(sess: session::session, output: str) {\n-    // FIXME: part of this is repetitive and is probably a good idea\n-    // to autogen it.\n-    let task_type = T_task();\n-    let taskptr_type = T_ptr(task_type);\n-\n-    let llmod = str::as_buf(\"rust_out\", {|buf|\n-        llvm::LLVMModuleCreateWithNameInContext\n-            (buf, llvm::LLVMGetGlobalContext())\n-    });\n-    let _: () =\n-        str::as_buf(x86::get_data_layout(),\n-                    {|buf| llvm::LLVMSetDataLayout(llmod, buf) });\n-    let _: () =\n-        str::as_buf(x86::get_target_triple(),\n-                    {|buf| llvm::LLVMSetTarget(llmod, buf) });\n-    mk_target_data(x86::get_data_layout());\n-    declare_intrinsics(llmod);\n-    let _: () =\n-        str::as_buf(x86::get_module_asm(),\n-                    {|buf| llvm::LLVMSetModuleInlineAsm(llmod, buf) });\n-    make_glues(llmod, taskptr_type);\n-    link::write::run_passes(sess, llmod, output);\n-}\n-\n fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     let elttype = T_struct([T_int(), T_int()]);\n     let maptype = T_array(elttype, ccx.module_data.size() + 1u);\n@@ -6183,7 +6154,6 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     tn.associate(\"taskptr\", taskptr_type);\n     let tydesc_type = T_tydesc(taskptr_type);\n     tn.associate(\"tydesc\", tydesc_type);\n-    let glues = make_glues(llmod, taskptr_type);\n     let hasher = ty::hash_ty;\n     let eqer = ty::eq_ty;\n     let tag_sizes = map::mk_hashmap::<ty::t, uint>(hasher, eqer);\n@@ -6212,7 +6182,6 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           tydescs: tydescs,\n           module_data: new_str_hash::<ValueRef>(),\n           lltypes: lltypes,\n-          glues: glues,\n           names: namegen(0),\n           sha: sha,\n           type_sha1s: sha1s,"}, {"sha": "d001abdac84e8b9f690204a01e06b912a0bb69ed", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -41,8 +41,6 @@ obj namegen(mutable i: int) {\n \n type derived_tydesc_info = {lltydesc: ValueRef, escapes: bool};\n \n-type glue_fns = {no_op_type_glue: ValueRef};\n-\n tag tydesc_kind {\n     tk_static; // Static (monomorphic) type descriptor.\n     tk_param; // Type parameter.\n@@ -111,7 +109,6 @@ type crate_ctxt =\n      tydescs: hashmap<ty::t, @tydesc_info>,\n      module_data: hashmap<str, ValueRef>,\n      lltypes: hashmap<ty::t, TypeRef>,\n-     glues: @glue_fns,\n      names: namegen,\n      sha: std::sha1::sha1,\n      type_sha1s: hashmap<ty::t, str>,"}, {"sha": "aa64a4fb49a15f4046be7bfe387bedf9c8c8e29a", "filename": "src/etc/get-snapshot.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -9,7 +9,7 @@ def unpack_snapshot(snap):\n   print(\"opening snapshot \" + dl_path)\n   tar = tarfile.open(dl_path)\n   kernel = get_kernel()\n-  for name in snapshot_files[kernel]:\n+  for name in old_snapshot_files[kernel]:\n     p = \"rust-stage0/\" + name\n     fp = os.path.join(\"stage0\", name)\n     print(\"extracting \" + fp)"}, {"sha": "e790038ade89f0b4ac69c9632803002e29acdc5b", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/15e34deba3efa7c064bf9ffe0fa1eff47f9b117e/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=15e34deba3efa7c064bf9ffe0fa1eff47f9b117e", "patch": "@@ -15,7 +15,8 @@ def scrub(b):\n download_dir_base = \"dl\"\n download_unpack_base = os.path.join(download_dir_base, \"unpack\")\n \n-snapshot_files = {\n+# FIXME: Transitional\n+old_snapshot_files = {\n     \"linux\": [\"rustc\", \"lib/glue.o\", \"lib/libstd.so\", \"lib/main.o\",\n               \"librustrt.so\", \"librustllvm.so\", \"lib/intrinsics.bc\"],\n     \"macos\": [\"rustc\", \"lib/glue.o\", \"lib/libstd.dylib\", \"lib/main.o\",\n@@ -24,6 +25,15 @@ def scrub(b):\n               \"rustrt.dll\", \"rustllvm.dll\", \"lib/intrinsics.bc\"]\n     }\n \n+snapshot_files = {\n+    \"linux\": [\"rustc\", \"lib/libstd.so\", \"lib/main.o\",\n+              \"librustrt.so\", \"librustllvm.so\", \"lib/intrinsics.bc\"],\n+    \"macos\": [\"rustc\", \"lib/libstd.dylib\", \"lib/main.o\",\n+              \"librustrt.dylib\", \"librustllvm.dylib\", \"lib/intrinsics.bc\"],\n+    \"winnt\": [\"rustc.exe\", \"lib/std.dll\", \"lib/main.o\",\n+              \"rustrt.dll\", \"rustllvm.dll\", \"lib/intrinsics.bc\"]\n+    }\n+\n def parse_line(n, line):\n   global snapshotfile\n "}]}