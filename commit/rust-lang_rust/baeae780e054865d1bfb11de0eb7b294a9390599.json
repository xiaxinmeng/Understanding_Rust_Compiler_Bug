{"sha": "baeae780e054865d1bfb11de0eb7b294a9390599", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZWFlNzgwZTA1NDg2NWQxYmZiMTFkZTBlYjdiMjk0YTkzOTA1OTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-26T21:23:05Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-03-21T17:36:14Z"}, "message": "Switch libgraphviz from type params to associated types for Node/Edge.", "tree": {"sha": "3b6caa8408315a9c1a0557f0675217371ba6aa4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b6caa8408315a9c1a0557f0675217371ba6aa4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baeae780e054865d1bfb11de0eb7b294a9390599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baeae780e054865d1bfb11de0eb7b294a9390599", "html_url": "https://github.com/rust-lang/rust/commit/baeae780e054865d1bfb11de0eb7b294a9390599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baeae780e054865d1bfb11de0eb7b294a9390599/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec8f5c3699bf16c452cff6abaeda26abaeef02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec8f5c3699bf16c452cff6abaeda26abaeef02c", "html_url": "https://github.com/rust-lang/rust/commit/7ec8f5c3699bf16c452cff6abaeda26abaeef02c"}], "stats": {"total": 138, "additions": 90, "deletions": 48}, "files": [{"sha": "f1317e80b03439eab934b0e835c2de93b7a04ca5", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 63, "deletions": 39, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=baeae780e054865d1bfb11de0eb7b294a9390599", "patch": "@@ -62,15 +62,19 @@\n //!     dot::render(&edges, output).unwrap()\n //! }\n //!\n-//! impl<'a> dot::Labeller<'a, Nd, Ed> for Edges {\n+//! impl<'a> dot::Labeller<'a> for Edges {\n+//!     type Node = Nd;\n+//!     type Edge = Ed;\n //!     fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example1\").unwrap() }\n //!\n //!     fn node_id(&'a self, n: &Nd) -> dot::Id<'a> {\n //!         dot::Id::new(format!(\"N{}\", *n)).unwrap()\n //!     }\n //! }\n //!\n-//! impl<'a> dot::GraphWalk<'a, Nd, Ed> for Edges {\n+//! impl<'a> dot::GraphWalk<'a> for Edges {\n+//!     type Node = Nd;\n+//!     type Edge = Ed;\n //!     fn nodes(&self) -> dot::Nodes<'a,Nd> {\n //!         // (assumes that |N| \\approxeq |E|)\n //!         let &Edges(ref v) = self;\n@@ -167,7 +171,9 @@\n //!     dot::render(&graph, output).unwrap()\n //! }\n //!\n-//! impl<'a> dot::Labeller<'a, Nd, Ed<'a>> for Graph {\n+//! impl<'a> dot::Labeller<'a> for Graph {\n+//!     type Node = Nd;\n+//!     type Edge = Ed<'a>;\n //!     fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example2\").unwrap() }\n //!     fn node_id(&'a self, n: &Nd) -> dot::Id<'a> {\n //!         dot::Id::new(format!(\"N{}\", n)).unwrap()\n@@ -180,7 +186,9 @@\n //!     }\n //! }\n //!\n-//! impl<'a> dot::GraphWalk<'a, Nd, Ed<'a>> for Graph {\n+//! impl<'a> dot::GraphWalk<'a> for Graph {\n+//!     type Node = Nd;\n+//!     type Edge = Ed<'a>;\n //!     fn nodes(&self) -> dot::Nodes<'a,Nd> { (0..self.nodes.len()).collect() }\n //!     fn edges(&'a self) -> dot::Edges<'a,Ed<'a>> { self.edges.iter().collect() }\n //!     fn source(&self, e: &Ed) -> Nd { let & &(s,_) = e; s }\n@@ -225,7 +233,9 @@\n //!     dot::render(&graph, output).unwrap()\n //! }\n //!\n-//! impl<'a> dot::Labeller<'a, Nd<'a>, Ed<'a>> for Graph {\n+//! impl<'a> dot::Labeller<'a> for Graph {\n+//!     type Node = Nd<'a>;\n+//!     type Edge = Ed<'a>;\n //!     fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example3\").unwrap() }\n //!     fn node_id(&'a self, n: &Nd<'a>) -> dot::Id<'a> {\n //!         dot::Id::new(format!(\"N{}\", n.0)).unwrap()\n@@ -239,7 +249,9 @@\n //!     }\n //! }\n //!\n-//! impl<'a> dot::GraphWalk<'a, Nd<'a>, Ed<'a>> for Graph {\n+//! impl<'a> dot::GraphWalk<'a> for Graph {\n+//!     type Node = Nd<'a>;\n+//!     type Edge = Ed<'a>;\n //!     fn nodes(&'a self) -> dot::Nodes<'a,Nd<'a>> {\n //!         self.nodes.iter().map(|s| &s[..]).enumerate().collect()\n //!     }\n@@ -447,45 +459,48 @@ impl<'a> Id<'a> {\n /// The graph instance is responsible for providing the DOT compatible\n /// identifiers for the nodes and (optionally) rendered labels for the nodes and\n /// edges, as well as an identifier for the graph itself.\n-pub trait Labeller<'a,N,E> {\n+pub trait Labeller<'a> {\n+    type Node;\n+    type Edge;\n+\n     /// Must return a DOT compatible identifier naming the graph.\n     fn graph_id(&'a self) -> Id<'a>;\n \n     /// Maps `n` to a unique identifier with respect to `self`. The\n     /// implementor is responsible for ensuring that the returned name\n     /// is a valid DOT identifier.\n-    fn node_id(&'a self, n: &N) -> Id<'a>;\n+    fn node_id(&'a self, n: &Self::Node) -> Id<'a>;\n \n     /// Maps `n` to one of the [graphviz `shape` names][1]. If `None`\n     /// is returned, no `shape` attribute is specified.\n     ///\n     /// [1]: http://www.graphviz.org/content/node-shapes\n-    fn node_shape(&'a self, _node: &N) -> Option<LabelText<'a>> {\n+    fn node_shape(&'a self, _node: &Self::Node) -> Option<LabelText<'a>> {\n         None\n     }\n \n     /// Maps `n` to a label that will be used in the rendered output.\n     /// The label need not be unique, and may be the empty string; the\n     /// default is just the output from `node_id`.\n-    fn node_label(&'a self, n: &N) -> LabelText<'a> {\n+    fn node_label(&'a self, n: &Self::Node) -> LabelText<'a> {\n         LabelStr(self.node_id(n).name)\n     }\n \n     /// Maps `e` to a label that will be used in the rendered output.\n     /// The label need not be unique, and may be the empty string; the\n     /// default is in fact the empty string.\n-    fn edge_label(&'a self, e: &E) -> LabelText<'a> {\n+    fn edge_label(&'a self, e: &Self::Edge) -> LabelText<'a> {\n         let _ignored = e;\n         LabelStr(\"\".into_cow())\n     }\n \n     /// Maps `n` to a style that will be used in the rendered output.\n-    fn node_style(&'a self, _n: &N) -> Style {\n+    fn node_style(&'a self, _n: &Self::Node) -> Style {\n         Style::None\n     }\n \n     /// Maps `e` to a style that will be used in the rendered output.\n-    fn edge_style(&'a self, _e: &E) -> Style {\n+    fn edge_style(&'a self, _e: &Self::Edge) -> Style {\n         Style::None\n     }\n }\n@@ -596,15 +611,18 @@ pub type Edges<'a,E> = Cow<'a,[E]>;\n /// `Cow<[T]>` to leave implementors the freedom to create\n /// entirely new vectors or to pass back slices into internally owned\n /// vectors.\n-pub trait GraphWalk<'a, N: Clone, E: Clone> {\n+pub trait GraphWalk<'a> {\n+    type Node: Clone;\n+    type Edge: Clone;\n+\n     /// Returns all the nodes in this graph.\n-    fn nodes(&'a self) -> Nodes<'a, N>;\n+    fn nodes(&'a self) -> Nodes<'a, Self::Node>;\n     /// Returns all of the edges in this graph.\n-    fn edges(&'a self) -> Edges<'a, E>;\n+    fn edges(&'a self) -> Edges<'a, Self::Edge>;\n     /// The source node for `edge`.\n-    fn source(&'a self, edge: &E) -> N;\n+    fn source(&'a self, edge: &Self::Edge) -> Self::Node;\n     /// The target node for `edge`.\n-    fn target(&'a self, edge: &E) -> N;\n+    fn target(&'a self, edge: &Self::Edge) -> Self::Node;\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -622,28 +640,26 @@ pub fn default_options() -> Vec<RenderOption> {\n \n /// Renders directed graph `g` into the writer `w` in DOT syntax.\n /// (Simple wrapper around `render_opts` that passes a default set of options.)\n-pub fn render<'a,\n-              N: Clone + 'a,\n-              E: Clone + 'a,\n-              G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n-              W: Write>\n-    (g: &'a G,\n-     w: &mut W)\n-     -> io::Result<()> {\n+pub fn render<'a,N,E,G,W>(g: &'a G, w: &mut W) -> io::Result<()>\n+    where N: Clone + 'a,\n+          E: Clone + 'a,\n+          G: Labeller<'a, Node=N, Edge=E> + GraphWalk<'a, Node=N, Edge=E>,\n+          W: Write\n+{\n     render_opts(g, w, &[])\n }\n \n /// Renders directed graph `g` into the writer `w` in DOT syntax.\n /// (Main entry point for the library.)\n-pub fn render_opts<'a,\n-                   N: Clone + 'a,\n-                   E: Clone + 'a,\n-                   G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n-                   W: Write>\n-    (g: &'a G,\n-     w: &mut W,\n-     options: &[RenderOption])\n-     -> io::Result<()> {\n+pub fn render_opts<'a, N, E, G, W>(g: &'a G,\n+                                   w: &mut W,\n+                                   options: &[RenderOption])\n+                                   -> io::Result<()>\n+    where N: Clone + 'a,\n+          E: Clone + 'a,\n+          G: Labeller<'a, Node=N, Edge=E> + GraphWalk<'a, Node=N, Edge=E>,\n+          W: Write\n+{\n     fn writeln<W: Write>(w: &mut W, arg: &[&str]) -> io::Result<()> {\n         for &s in arg {\n             try!(w.write_all(s.as_bytes()));\n@@ -858,7 +874,9 @@ mod tests {\n         Id::new(format!(\"N{}\", *n)).unwrap()\n     }\n \n-    impl<'a> Labeller<'a, Node, &'a Edge> for LabelledGraph {\n+    impl<'a> Labeller<'a> for LabelledGraph {\n+        type Node = Node;\n+        type Edge = &'a Edge;\n         fn graph_id(&'a self) -> Id<'a> {\n             Id::new(&self.name[..]).unwrap()\n         }\n@@ -882,7 +900,9 @@ mod tests {\n         }\n     }\n \n-    impl<'a> Labeller<'a, Node, &'a Edge> for LabelledGraphWithEscStrs {\n+    impl<'a> Labeller<'a> for LabelledGraphWithEscStrs {\n+        type Node = Node;\n+        type Edge = &'a Edge;\n         fn graph_id(&'a self) -> Id<'a> {\n             self.graph.graph_id()\n         }\n@@ -901,7 +921,9 @@ mod tests {\n         }\n     }\n \n-    impl<'a> GraphWalk<'a, Node, &'a Edge> for LabelledGraph {\n+    impl<'a> GraphWalk<'a> for LabelledGraph {\n+        type Node = Node;\n+        type Edge = &'a Edge;\n         fn nodes(&'a self) -> Nodes<'a, Node> {\n             (0..self.node_labels.len()).collect()\n         }\n@@ -916,7 +938,9 @@ mod tests {\n         }\n     }\n \n-    impl<'a> GraphWalk<'a, Node, &'a Edge> for LabelledGraphWithEscStrs {\n+    impl<'a> GraphWalk<'a> for LabelledGraphWithEscStrs {\n+        type Node = Node;\n+        type Edge = &'a Edge;\n         fn nodes(&'a self) -> Nodes<'a, Node> {\n             self.graph.nodes()\n         }"}, {"sha": "c9c712c2d6e105fd941d7055c84fa39c9e431e9b", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=baeae780e054865d1bfb11de0eb7b294a9390599", "patch": "@@ -52,7 +52,9 @@ fn replace_newline_with_backslash_l(s: String) -> String {\n     }\n }\n \n-impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> {\n+impl<'a, 'ast> dot::Labeller<'a> for LabelledCFG<'a, 'ast> {\n+    type Node = Node<'a>;\n+    type Edge = Edge<'a>;\n     fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(&self.name[..]).unwrap() }\n \n     fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> {\n@@ -97,7 +99,9 @@ impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> {\n     }\n }\n \n-impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for &'a cfg::CFG {\n+impl<'a> dot::GraphWalk<'a> for &'a cfg::CFG {\n+    type Node = Node<'a>;\n+    type Edge = Edge<'a>;\n     fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> {\n         let mut v = Vec::new();\n         self.graph.each_node(|i, nd| { v.push((i, nd)); true });\n@@ -116,8 +120,10 @@ impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for &'a cfg::CFG {\n     }\n }\n \n-impl<'a, 'ast> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast>\n+impl<'a, 'ast> dot::GraphWalk<'a> for LabelledCFG<'a, 'ast>\n {\n+    type Node = Node<'a>;\n+    type Edge = Edge<'a>;\n     fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }\n     fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }\n     fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }"}, {"sha": "23559e7b340ebf7cf3d25150edc4127acd313338", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=baeae780e054865d1bfb11de0eb7b294a9390599", "patch": "@@ -173,7 +173,9 @@ impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> dot::Labeller<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> {\n+impl<'a, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'tcx> {\n+    type Node = Node;\n+    type Edge = Edge;\n     fn graph_id(&self) -> dot::Id {\n         dot::Id::new(&*self.graph_name).unwrap()\n     }\n@@ -224,7 +226,9 @@ fn edge_to_nodes(e: &Edge) -> (Node, Node) {\n     }\n }\n \n-impl<'a, 'tcx> dot::GraphWalk<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> {\n+impl<'a, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'tcx> {\n+    type Node = Node;\n+    type Edge = Edge;\n     fn nodes(&self) -> dot::Nodes<Node> {\n         let mut set = FnvHashSet();\n         for node in self.node_ids.keys() {"}, {"sha": "fd23772bcda13c55cd0dc895860ede3979197a0d", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=baeae780e054865d1bfb11de0eb7b294a9390599", "patch": "@@ -129,7 +129,9 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> dot::Labeller<'a, Node<'a>, Edge<'a>> for DataflowLabeller<'a, 'tcx> {\n+impl<'a, 'tcx> dot::Labeller<'a> for DataflowLabeller<'a, 'tcx> {\n+    type Node = Node<'a>;\n+    type Edge = Edge<'a>;\n     fn graph_id(&'a self) -> dot::Id<'a> { self.inner.graph_id() }\n     fn node_id(&'a self, n: &Node<'a>) -> dot::Id<'a> { self.inner.node_id(n) }\n     fn node_label(&'a self, n: &Node<'a>) -> dot::LabelText<'a> {\n@@ -143,7 +145,9 @@ impl<'a, 'tcx> dot::Labeller<'a, Node<'a>, Edge<'a>> for DataflowLabeller<'a, 't\n     fn edge_label(&'a self, e: &Edge<'a>) -> dot::LabelText<'a> { self.inner.edge_label(e) }\n }\n \n-impl<'a, 'tcx> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for DataflowLabeller<'a, 'tcx> {\n+impl<'a, 'tcx> dot::GraphWalk<'a> for DataflowLabeller<'a, 'tcx> {\n+    type Node = Node<'a>;\n+    type Edge = Edge<'a>;\n     fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.inner.nodes() }\n     fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.inner.edges() }\n     fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.inner.source(edge) }"}, {"sha": "11386715492b64198304daf3d4945ece8613aef3", "filename": "src/librustc_trans/trans/assert_dep_graph.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baeae780e054865d1bfb11de0eb7b294a9390599/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs?ref=baeae780e054865d1bfb11de0eb7b294a9390599", "patch": "@@ -253,7 +253,9 @@ fn dump_graph(tcx: &TyCtxt) {\n \n pub struct GraphvizDepGraph(FnvHashSet<DepNode>, Vec<(DepNode, DepNode)>);\n \n-impl<'a, 'tcx> dot::GraphWalk<'a, DepNode, (DepNode, DepNode)> for GraphvizDepGraph {\n+impl<'a, 'tcx> dot::GraphWalk<'a> for GraphvizDepGraph {\n+    type Node = DepNode;\n+    type Edge = (DepNode, DepNode);\n     fn nodes(&self) -> dot::Nodes<DepNode> {\n         let nodes: Vec<_> = self.0.iter().cloned().collect();\n         nodes.into_cow()\n@@ -269,7 +271,9 @@ impl<'a, 'tcx> dot::GraphWalk<'a, DepNode, (DepNode, DepNode)> for GraphvizDepGr\n     }\n }\n \n-impl<'a, 'tcx> dot::Labeller<'a, DepNode, (DepNode, DepNode)> for GraphvizDepGraph {\n+impl<'a, 'tcx> dot::Labeller<'a> for GraphvizDepGraph {\n+    type Node = DepNode;\n+    type Edge = (DepNode, DepNode);\n     fn graph_id(&self) -> dot::Id {\n         dot::Id::new(\"DependencyGraph\").unwrap()\n     }"}]}