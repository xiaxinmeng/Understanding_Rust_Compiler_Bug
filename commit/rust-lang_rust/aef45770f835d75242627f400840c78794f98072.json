{"sha": "aef45770f835d75242627f400840c78794f98072", "node_id": "C_kwDOAAsO6NoAKGFlZjQ1NzcwZjgzNWQ3NTI0MjYyN2Y0MDA4NDBjNzg3OTRmOTgwNzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T11:01:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T11:01:13Z"}, "message": "Auto merge of #89030 - nbdd0121:box2, r=jonas-schievink\n\nIntroduce `Rvalue::ShallowInitBox`\n\nPolished version of #88700.\n\nImplements MCP rust-lang/compiler-team#460, and should allow #43596 to go forward.\n\nIn short, creating an empty box is split from a nullary-op `NullOp::Box` into two steps, first a call to `exchange_malloc`, then a `Rvalue::ShallowInitBox` which transmutes `*mut u8` to a shallow-initialized `Box<T>`. This allows the `exchange_malloc` call to unwind. Details can be found in the MCP.\n\n`NullOp::Box` is not yet removed, purely to make reverting easier in case anything goes wrong as the result of this PR. If revert is needed a reversion of \"Use Rvalue::ShallowInitBox for box expression\" commit followed by a test bless should be sufficient.\n\nExperiments in #88700 showed a very slight compile-time perf regression due to (supposedly) slightly more time spent in LLVM. We could omit unwind edge generation (in non-`oom=panic` case) in box expression MIR construction to restore perf; but I don't think it's necessary since runtime perf isn't affected and perf difference is rather small.", "tree": {"sha": "7b5865ddded53c74df393ce6f48f5dcd48275953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b5865ddded53c74df393ce6f48f5dcd48275953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef45770f835d75242627f400840c78794f98072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef45770f835d75242627f400840c78794f98072", "html_url": "https://github.com/rust-lang/rust/commit/aef45770f835d75242627f400840c78794f98072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef45770f835d75242627f400840c78794f98072/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "html_url": "https://github.com/rust-lang/rust/commit/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea"}, {"sha": "fc8edf12cd280eb1e78ccce896ca6b4fdadd1b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8edf12cd280eb1e78ccce896ca6b4fdadd1b5b", "html_url": "https://github.com/rust-lang/rust/commit/fc8edf12cd280eb1e78ccce896ca6b4fdadd1b5b"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "e2f2e2008bb2604543f1ba4814b0d92538d89fc1", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aef45770f835d75242627f400840c78794f98072/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef45770f835d75242627f400840c78794f98072/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=aef45770f835d75242627f400840c78794f98072", "patch": "@@ -194,6 +194,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n         },\n         Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => Ok(()),\n         Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n+        Rvalue::ShallowInitBox(_, _) => Ok(()),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}]}