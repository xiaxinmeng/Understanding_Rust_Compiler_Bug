{"sha": "8227a938a4970008ec333f6cd66be9d4be0e981c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMjdhOTM4YTQ5NzAwMDhlYzMzM2Y2Y2Q2NmJlOWQ0YmUwZTk4MWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-24T00:18:14Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-24T04:44:46Z"}, "message": "Point at macro definition when no rules expect token", "tree": {"sha": "5719e633333c7e6a222862d28801a08dceff4a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5719e633333c7e6a222862d28801a08dceff4a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8227a938a4970008ec333f6cd66be9d4be0e981c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8227a938a4970008ec333f6cd66be9d4be0e981c", "html_url": "https://github.com/rust-lang/rust/commit/8227a938a4970008ec333f6cd66be9d4be0e981c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8227a938a4970008ec333f6cd66be9d4be0e981c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66dc8a1489d2818b5e63f18e1464be79da1f137", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66dc8a1489d2818b5e63f18e1464be79da1f137", "html_url": "https://github.com/rust-lang/rust/commit/a66dc8a1489d2818b5e63f18e1464be79da1f137"}], "stats": {"total": 338, "additions": 256, "deletions": 82}, "files": [{"sha": "1701c8da2c5bdc6283b491a97c45d3b516ca046f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -247,8 +247,13 @@ impl<F> AttrProcMacro for F\n \n /// Represents a thing that maps token trees to Macro Results\n pub trait TTMacroExpander {\n-    fn expand<'cx>(&self, ecx: &'cx mut ExtCtxt, span: Span, input: TokenStream)\n-                   -> Box<dyn MacResult+'cx>;\n+    fn expand<'cx>(\n+        &self,\n+        ecx: &'cx mut ExtCtxt,\n+        span: Span,\n+        input: TokenStream,\n+        def_span: Option<Span>,\n+    ) -> Box<dyn MacResult+'cx>;\n }\n \n pub type MacroExpanderFn =\n@@ -259,8 +264,13 @@ impl<F> TTMacroExpander for F\n     where F: for<'cx> Fn(&'cx mut ExtCtxt, Span, &[tokenstream::TokenTree])\n     -> Box<dyn MacResult+'cx>\n {\n-    fn expand<'cx>(&self, ecx: &'cx mut ExtCtxt, span: Span, input: TokenStream)\n-                   -> Box<dyn MacResult+'cx> {\n+    fn expand<'cx>(\n+        &self,\n+        ecx: &'cx mut ExtCtxt,\n+        span: Span,\n+        input: TokenStream,\n+        _def_span: Option<Span>,\n+    ) -> Box<dyn MacResult+'cx> {\n         struct AvoidInterpolatedIdents;\n \n         impl Folder for AvoidInterpolatedIdents {"}, {"sha": "46ffdf4eba2dac7d1b43b7ca1f0d46554ada24a9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -764,7 +764,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                                                     edition) {\n                     dummy_span\n                 } else {\n-                    kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n+                    kind.make_from(expander.expand(self.cx, span, mac.node.stream(), None))\n                 }\n             }\n \n@@ -785,7 +785,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                                                     edition) {\n                     dummy_span\n                 } else {\n-                    kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n+                    kind.make_from(expander.expand(\n+                        self.cx,\n+                        span,\n+                        mac.node.stream(),\n+                        def_info.map(|(_, s)| s),\n+                    ))\n                 }\n             }\n "}, {"sha": "41e8cbe550211a47c1bc54bbb22f5fc6d3062400", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -74,16 +74,19 @@ struct MacroRulesMacroExpander {\n }\n \n impl TTMacroExpander for MacroRulesMacroExpander {\n-    fn expand<'cx>(&self,\n-                   cx: &'cx mut ExtCtxt,\n-                   sp: Span,\n-                   input: TokenStream)\n-                   -> Box<dyn MacResult+'cx> {\n+    fn expand<'cx>(\n+        &self,\n+        cx: &'cx mut ExtCtxt,\n+        sp: Span,\n+        input: TokenStream,\n+        def_span: Option<Span>,\n+    ) -> Box<dyn MacResult+'cx> {\n         if !self.valid {\n             return DummyResult::any(sp);\n         }\n         generic_extension(cx,\n                           sp,\n+                          def_span,\n                           self.name,\n                           input,\n                           &self.lhses,\n@@ -99,6 +102,7 @@ fn trace_macros_note(cx: &mut ExtCtxt, sp: Span, message: String) {\n /// Given `lhses` and `rhses`, this is the new macro we create\n fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                           sp: Span,\n+                          def_span: Option<Span>,\n                           name: ast::Ident,\n                           arg: TokenStream,\n                           lhses: &[quoted::TokenTree],\n@@ -178,7 +182,14 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     }\n \n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n-    let mut err = cx.struct_span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    let span = best_fail_spot.substitute_dummy(sp);\n+    let mut err = cx.struct_span_err(span, &best_fail_msg);\n+    err.span_label(span, best_fail_msg);\n+    if let Some(sp) = def_span {\n+        if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n+            err.span_label(sp, \"when calling this macro\");\n+        }\n+    }\n \n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n     if let Some((arg, comma_span)) = arg.add_comma() {\n@@ -189,7 +200,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n             };\n             match TokenTree::parse(cx, lhs_tt, arg.clone()) {\n                 Success(_) => {\n-                    if comma_span == DUMMY_SP {\n+                    if comma_span.is_dummy() {\n                         err.note(\"you might be missing a comma\");\n                     } else {\n                         err.span_suggestion_short_with_applicability("}, {"sha": "27169299c8a69e4e4b883de9c98fc6f7552087f1", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -38,7 +38,8 @@ impl TTMacroExpander for Expander {\n     fn expand<'cx>(&self,\n                    ecx: &'cx mut ExtCtxt,\n                    sp: Span,\n-                   _: TokenStream) -> Box<MacResult+'cx> {\n+                   _: TokenStream,\n+                   _: Option<Span>) -> Box<MacResult+'cx> {\n         let args = self.args.iter().map(|i| pprust::meta_list_item_to_string(i))\n             .collect::<Vec<_>>().join(\", \");\n         MacEager::expr(ecx.expr_str(sp, Symbol::intern(&args)))"}, {"sha": "e8f05cbb0ef70a069f26c96db3d6b665c4251368", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -2,13 +2,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3f5e1137383dda5f8350b7c04fe200ddee4b9a41", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -2,13 +2,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6ff60f1492ea99b62eb78a3ec342fcff3a45dc6", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -14,13 +14,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: expected one of `move`, `|`, or `||`, found `<eof>`\n   --> <::edition_kw_macro_2015::passes_ident macros>:1:22"}, {"sha": "ffe666a7e6442875ba5f491426a13ed0ea1dca3e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -14,13 +14,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: expected one of `move`, `|`, or `||`, found `<eof>`\n   --> <::edition_kw_macro_2018::passes_ident macros>:1:22"}, {"sha": "e15f347f49d9c1856d8a0d2e2f0046f013b6ddf9", "filename": "src/test/ui/empty/empty-comment.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -1,8 +1,13 @@\n error: unexpected end of macro invocation\n   --> $DIR/empty-comment.rs:20:5\n    |\n-LL |     one_arg_macro!(/**/); //~ ERROR unexpected end\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL | / macro_rules! one_arg_macro {\n+LL | |     ($fmt:expr) => (print!(concat!($fmt, \"/n\")));\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       one_arg_macro!(/**/); //~ ERROR unexpected end\n+   |       ^^^^^^^^^^^^^^^^^^^^^ unexpected end of macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "4a4aec5b6ac570e24c1d6c7a2f93f5caed26dbbc", "filename": "src/test/ui/fail-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Ffail-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Ffail-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffail-simple.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `@`\n   --> $DIR/fail-simple.rs:12:12\n    |\n LL |     panic!(@); //~ ERROR no rules expected the token `@`\n-   |            ^\n+   |            ^ no rules expected the token `@`\n \n error: aborting due to previous error\n "}, {"sha": "94beebf514e17b8d6ed1587d7ec603745fff54ac", "filename": "src/test/ui/issues/issue-7970a.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -1,8 +1,13 @@\n error: unexpected end of macro invocation\n   --> $DIR/issue-7970a.rs:16:5\n    |\n-LL |     one_arg_macro!();\n-   |     ^^^^^^^^^^^^^^^^^\n+LL | / macro_rules! one_arg_macro {\n+LL | |     ($fmt:expr) => (print!(concat!($fmt, \"/n\")));\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       one_arg_macro!();\n+   |       ^^^^^^^^^^^^^^^^^ unexpected end of macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "6f77eb634399b73a8332adf7ce764262735ae683", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018-feature-gate.stderr", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -51,20 +51,41 @@ LL |     ($(a)?*) => {}\n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:41:11\n    |\n-LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n-   |           ^\n+LL | / macro_rules! foo {\n+LL | |     ($(a)?) => {}\n+LL | |     //~^ERROR using the `?` macro Kleene operator for\n+LL | |     //~|ERROR expected `*` or `+`\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a?); //~ ERROR no rules expected the token `?`\n+   |             ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:42:11\n    |\n-LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+LL | / macro_rules! foo {\n+LL | |     ($(a)?) => {}\n+LL | |     //~^ERROR using the `?` macro Kleene operator for\n+LL | |     //~|ERROR expected `*` or `+`\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a?a); //~ ERROR no rules expected the token `?`\n+   |             ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:43:11\n    |\n-LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+LL | / macro_rules! foo {\n+LL | |     ($(a)?) => {}\n+LL | |     //~^ERROR using the `?` macro Kleene operator for\n+LL | |     //~|ERROR expected `*` or `+`\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a?a?a); //~ ERROR no rules expected the token `?`\n+   |             ^ no rules expected the token `?`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "3bdfae5ccdf7f4dba91f474d3e6335c43564fa06", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.stderr", "status": "modified", "additions": 77, "deletions": 22, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -7,68 +7,123 @@ LL |     ($(a),?) => {} //~ERROR the `?` macro repetition operator\n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:36:11\n    |\n-LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n-   |           ^\n+LL | / macro_rules! foo {\n+LL | |     ($(a)?) => {}\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a?); //~ ERROR no rules expected the token `?`\n+   |             ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:37:11\n    |\n-LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+LL | / macro_rules! foo {\n+LL | |     ($(a)?) => {}\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a?a); //~ ERROR no rules expected the token `?`\n+   |             ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:38:11\n    |\n-LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+LL | / macro_rules! foo {\n+LL | |     ($(a)?) => {}\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a?a?a); //~ ERROR no rules expected the token `?`\n+   |             ^ no rules expected the token `?`\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:40:5\n    |\n-LL |     barplus!(); //~ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+LL | / macro_rules! barplus {\n+LL | |     ($(a)?+) => {} // ok. matches \"a+\" and \"+\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barplus!(); //~ERROR unexpected end of macro invocation\n+   |       ^^^^^^^^^^^ unexpected end of macro invocation\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:41:14\n    |\n-LL |     barplus!(a); //~ERROR unexpected end of macro invocation\n-   |              ^\n+LL | / macro_rules! barplus {\n+LL | |     ($(a)?+) => {} // ok. matches \"a+\" and \"+\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barplus!(a); //~ERROR unexpected end of macro invocation\n+   |                ^ unexpected end of macro invocation\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:42:15\n    |\n-LL |     barplus!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^\n+LL | / macro_rules! barplus {\n+LL | |     ($(a)?+) => {} // ok. matches \"a+\" and \"+\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barplus!(a?); //~ ERROR no rules expected the token `?`\n+   |                 ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:43:15\n    |\n-LL |     barplus!(a?a); //~ ERROR no rules expected the token `?`\n-   |               ^\n+LL | / macro_rules! barplus {\n+LL | |     ($(a)?+) => {} // ok. matches \"a+\" and \"+\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barplus!(a?a); //~ ERROR no rules expected the token `?`\n+   |                 ^ no rules expected the token `?`\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:47:5\n    |\n-LL |     barstar!(); //~ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+LL | / macro_rules! barstar {\n+LL | |     ($(a)?*) => {} // ok. matches \"a*\" and \"*\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barstar!(); //~ERROR unexpected end of macro invocation\n+   |       ^^^^^^^^^^^ unexpected end of macro invocation\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:48:14\n    |\n-LL |     barstar!(a); //~ERROR unexpected end of macro invocation\n-   |              ^\n+LL | / macro_rules! barstar {\n+LL | |     ($(a)?*) => {} // ok. matches \"a*\" and \"*\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barstar!(a); //~ERROR unexpected end of macro invocation\n+   |                ^ unexpected end of macro invocation\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:49:15\n    |\n-LL |     barstar!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^\n+LL | / macro_rules! barstar {\n+LL | |     ($(a)?*) => {} // ok. matches \"a*\" and \"*\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barstar!(a?); //~ ERROR no rules expected the token `?`\n+   |                 ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:50:15\n    |\n-LL |     barstar!(a?a); //~ ERROR no rules expected the token `?`\n-   |               ^\n+LL | / macro_rules! barstar {\n+LL | |     ($(a)?*) => {} // ok. matches \"a*\" and \"*\"\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       barstar!(a?a); //~ ERROR no rules expected the token `?`\n+   |                 ^ no rules expected the token `?`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "48a93010c3b6f88038fbf180fc957295ad4c9b80", "filename": "src/test/ui/macros/macro-non-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -1,8 +1,11 @@\n error: no rules expected the token `a`\n   --> $DIR/macro-non-lifetime.rs:18:8\n    |\n+LL | macro_rules! m { ($x:lifetime) => { } }\n+   | --------------------------------------- when calling this macro\n+...\n LL |     m!(a);\n-   |        ^\n+   |        ^ no rules expected the token `a`\n \n error: aborting due to previous error\n "}, {"sha": "5548be86a13005cffac556298262dfed3a478a2b", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -7,32 +7,68 @@ LL |     println!(\"{}\" a);\n error: no rules expected the token `b`\n   --> $DIR/missing-comma.rs:22:12\n    |\n-LL |     foo!(a b);\n-   |           -^\n-   |           |\n-   |           help: missing comma here\n+LL | / macro_rules! foo {\n+LL | |     ($a:ident) => ();\n+LL | |     ($a:ident, $b:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident, $e:ident) => ();\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a b);\n+   |             -^ no rules expected the token `b`\n+   |             |\n+   |             help: missing comma here\n \n error: no rules expected the token `e`\n   --> $DIR/missing-comma.rs:24:21\n    |\n-LL |     foo!(a, b, c, d e);\n-   |                    -^\n-   |                    |\n-   |                    help: missing comma here\n+LL | / macro_rules! foo {\n+LL | |     ($a:ident) => ();\n+LL | |     ($a:ident, $b:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident, $e:ident) => ();\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a, b, c, d e);\n+   |                      -^ no rules expected the token `e`\n+   |                      |\n+   |                      help: missing comma here\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:26:18\n    |\n-LL |     foo!(a, b, c d, e);\n-   |                 -^\n-   |                 |\n-   |                 help: missing comma here\n+LL | / macro_rules! foo {\n+LL | |     ($a:ident) => ();\n+LL | |     ($a:ident, $b:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident, $e:ident) => ();\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a, b, c d, e);\n+   |                   -^ no rules expected the token `d`\n+   |                   |\n+   |                   help: missing comma here\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:28:18\n    |\n-LL |     foo!(a, b, c d e);\n-   |                  ^\n+LL | / macro_rules! foo {\n+LL | |     ($a:ident) => ();\n+LL | |     ($a:ident, $b:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident) => ();\n+LL | |     ($a:ident, $b:ident, $c:ident, $d:ident, $e:ident) => ();\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       foo!(a, b, c d e);\n+   |                    ^ no rules expected the token `d`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "23853978d371bcfe83083e267768aa30fe5efeff", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `enum E { }`\n   --> $DIR/nonterminal-matching.rs:29:10\n    |\n LL |     n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n-   |          ^^^^^^^^\n+   |          ^^^^^^^^ no rules expected the token `enum E { }`\n ...\n LL | complex_nonterminal!(enum E {});\n    | -------------------------------- in this macro invocation"}, {"sha": "ecc3694d120fa0321053769d0fa3c8c2ffd664d6", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -1,11 +1,16 @@\n error: no rules expected the token `bcd`\n   --> $DIR/trace_faulty_macros.rs:17:26\n    |\n-LL |         my_faulty_macro!(bcd); //~ ERROR no rules\n-   |                          ^^^\n+LL | / macro_rules! my_faulty_macro {\n+LL | |     () => {\n+LL | |         my_faulty_macro!(bcd); //~ ERROR no rules\n+   | |                          ^^^ no rules expected the token `bcd`\n+LL | |     };\n+LL | | }\n+   | |_- when calling this macro\n ...\n-LL |     my_faulty_macro!();\n-   |     ------------------- in this macro invocation\n+LL |       my_faulty_macro!();\n+   |       ------------------- in this macro invocation\n \n note: trace_macro\n   --> $DIR/trace_faulty_macros.rs:43:5"}, {"sha": "4fcc56ac832eb827da0b40193203072e4f3cddf0", "filename": "src/test/ui/parser/macro/macro-doc-comments-1.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -1,8 +1,13 @@\n error: no rules expected the token `!`\n   --> $DIR/macro-doc-comments-1.rs:16:5\n    |\n-LL |     //! Inner\n-   |     ^^^^^^^^^\n+LL | / macro_rules! outer {\n+LL | |     (#[$outer:meta]) => ()\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       //! Inner\n+   |       ^^^^^^^^^ no rules expected the token `!`\n \n error: aborting due to previous error\n "}, {"sha": "b34e99fbd9e77db3cde0c92bde087bb1003db91e", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -1,8 +1,13 @@\n error: no rules expected the token `[`\n   --> $DIR/macro-doc-comments-2.rs:16:5\n    |\n-LL |     /// Outer\n-   |     ^\n+LL | / macro_rules! inner {\n+LL | |     (#![$inner:meta]) => ()\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       /// Outer\n+   |       ^ no rules expected the token `[`\n \n error: aborting due to previous error\n "}, {"sha": "19d489db5723fd10a368c7fe78be0018d62c6b2d", "filename": "src/test/ui/underscore-ident-matcher.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -1,8 +1,15 @@\n error: no rules expected the token `_`\n   --> $DIR/underscore-ident-matcher.rs:18:19\n    |\n-LL |     let identity!(_) = 10; //~ ERROR no rules expected the token `_`\n-   |                   ^\n+LL | / macro_rules! identity {\n+LL | |     ($i: ident) => (\n+LL | |         $i\n+LL | |     )\n+LL | | }\n+   | |_- when calling this macro\n+...\n+LL |       let identity!(_) = 10; //~ ERROR no rules expected the token `_`\n+   |                     ^ no rules expected the token `_`\n \n error: aborting due to previous error\n "}, {"sha": "856d85ef5cdaac6deb269675d2c86b45fa88f46d", "filename": "src/test/ui/vec/vec-macro-with-comma-only.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8227a938a4970008ec333f6cd66be9d4be0e981c/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr?ref=8227a938a4970008ec333f6cd66be9d4be0e981c", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `,`\n   --> $DIR/vec-macro-with-comma-only.rs:12:10\n    |\n LL |     vec![,]; //~ ERROR no rules expected the token `,`\n-   |          ^\n+   |          ^ no rules expected the token `,`\n \n error: aborting due to previous error\n "}]}