{"sha": "60133aa6dd4bf288cacbaba72368f80c131d252c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMTMzYWE2ZGQ0YmYyODhjYWNiYWJhNzIzNjhmODBjMTMxZDI1MmM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-14T17:42:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-14T17:53:09Z"}, "message": "Remove macro, import function and enum", "tree": {"sha": "c7048d7edb825ea15604ff344237fa80b0f94104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7048d7edb825ea15604ff344237fa80b0f94104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60133aa6dd4bf288cacbaba72368f80c131d252c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60133aa6dd4bf288cacbaba72368f80c131d252c", "html_url": "https://github.com/rust-lang/rust/commit/60133aa6dd4bf288cacbaba72368f80c131d252c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60133aa6dd4bf288cacbaba72368f80c131d252c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31262c206e9d0152610572859092132555c7d492", "url": "https://api.github.com/repos/rust-lang/rust/commits/31262c206e9d0152610572859092132555c7d492", "html_url": "https://github.com/rust-lang/rust/commit/31262c206e9d0152610572859092132555c7d492"}], "stats": {"total": 313, "additions": 155, "deletions": 158}, "files": [{"sha": "f8ccbe4cecd5a63b8bec1e4b3411792662a83b7e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/60133aa6dd4bf288cacbaba72368f80c131d252c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60133aa6dd4bf288cacbaba72368f80c131d252c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=60133aa6dd4bf288cacbaba72368f80c131d252c", "patch": "@@ -26,6 +26,7 @@ use ParentLink::{self, ModuleParentLink, BlockParentLink};\n use Resolver;\n use resolve_imports::Shadowable;\n use TypeNsDef;\n+use {resolve_error, ResolutionError};\n \n use self::DuplicateCheckingMode::*;\n use self::NamespaceError::*;\n@@ -208,12 +209,12 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     // Return an error here by looking up the namespace that\n                     // had the duplicate.\n                     let ns = ns.unwrap();\n-                    ::resolve_error(\n+                    resolve_error(\n                         self,\n                         sp,\n-                        &::ResolutionError::DuplicateDefinition(\n+                        ResolutionError::DuplicateDefinition(\n                             namespace_error_to_string(duplicate_type),\n-                            &*token::get_name(name))\n+                            name)\n                     );\n                     {\n                         let r = child.span_for_namespace(ns);\n@@ -307,9 +308,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                             full_path.segments.last().unwrap().identifier.name;\n                         if &token::get_name(source_name)[..] == \"mod\" ||\n                            &token::get_name(source_name)[..] == \"self\" {\n-                            ::resolve_error(self,\n+                            resolve_error(self,\n                                             view_path.span,\n-                                            &::ResolutionError::SelfImportsOnlyAllowedWithin\n+                                            ResolutionError::SelfImportsOnlyAllowedWithin\n                             );\n                         }\n \n@@ -330,10 +331,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                             _ => None\n                         }).collect::<Vec<Span>>();\n                         if mod_spans.len() > 1 {\n-                            ::resolve_error(\n+                            resolve_error(\n                                 self,\n                                 mod_spans[0],\n-                                &::ResolutionError::SelfImportCanOnlyAppearOnceInTheList\n+                                ResolutionError::SelfImportCanOnlyAppearOnceInTheList\n                             );\n                             for other_span in mod_spans.iter().skip(1) {\n                                 self.session.span_note(*other_span,\n@@ -349,10 +350,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                     let name = match module_path.last() {\n                                         Some(name) => *name,\n                                         None => {\n-                                            ::resolve_error(\n+                                            resolve_error(\n                                                 self,\n                                                 source_item.span,\n-                                                &::ResolutionError::\n+                                                ResolutionError::\n                                                 SelfImportOnlyInImportListWithNonEmptyPrefix\n                                             );\n                                             continue;"}, {"sha": "2d48f3227249965c481349608e0be6fd153d26d2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 142, "deletions": 147, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/60133aa6dd4bf288cacbaba72368f80c131d252c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60133aa6dd4bf288cacbaba72368f80c131d252c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=60133aa6dd4bf288cacbaba72368f80c131d252c", "patch": "@@ -103,267 +103,262 @@ use resolve_imports::Shadowable;\n // registered before they are used.\n pub mod diagnostics;\n \n-macro_rules! resolve_err {\n-    ($this:expr, $span:expr, $code:ident, $($rest:tt)*) => {\n-        if $this.emit_errors {\n-            span_err!($this.session, $span, $code, $($rest)*);\n-        }\n-    }\n-}\n-\n mod check_unused;\n mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n-pub enum ResolutionError<'b> {\n+pub enum ResolutionError<'a> {\n     /// error E0401: can't use type parameters from outer function\n     TypeParametersFromOuterFunction,\n     /// error E0402: cannot use an outer type parameter in this context\n     OuterTypeParameterContext,\n     /// error E0403: the name is already used for a type parameter in this type parameter list\n-    NameAlreadyUsedInTypeParameterList(syntax::ast::Name),\n+    NameAlreadyUsedInTypeParameterList(Name),\n     /// error E0404: is not a trait\n-    IsNotATrait(&'b str),\n+    IsNotATrait(&'a str),\n     /// error E0405: use of undeclared trait name\n-    UndeclaredTraitName(&'b str),\n+    UndeclaredTraitName(&'a str),\n     /// error E0406: undeclared associated type\n     UndeclaredAssociatedType,\n     /// error E0407: method is not a member of trait\n-    MethodNotMemberOfTrait(syntax::ast::Name, &'b str),\n+    MethodNotMemberOfTrait(Name, &'a str),\n     /// error E0408: variable `{}` from pattern #1 is not bound in pattern\n-    VariableNotBoundInPattern(syntax::ast::Name, usize),\n+    VariableNotBoundInPattern(Name, usize),\n     /// error E0409: variable is bound with different mode in pattern #{} than in pattern #1\n-    VariableBoundWithDifferentMode(syntax::ast::Name, usize),\n+    VariableBoundWithDifferentMode(Name, usize),\n     /// error E0410: variable from pattern is not bound in pattern #1\n-    VariableNotBoundInParentPattern(syntax::ast::Name, usize),\n+    VariableNotBoundInParentPattern(Name, usize),\n     /// error E0411: use of `Self` outside of an impl or trait\n     SelfUsedOutsideImplOrTrait,\n     /// error E0412: use of undeclared\n-    UseOfUndeclared(&'b str, &'b str),\n+    UseOfUndeclared(&'a str, &'a str),\n     /// error E0413: declaration shadows an enum variant or unit-like struct in scope\n-    DeclarationShadowsEnumVariantOrUnitLikeStruct(syntax::ast::Name),\n+    DeclarationShadowsEnumVariantOrUnitLikeStruct(Name),\n     /// error E0414: only irrefutable patterns allowed here\n     OnlyIrrefutablePatternsAllowedHere,\n     /// error E0415: identifier is bound more than once in this parameter list\n-    IdentifierBoundMoreThanOnceInParameterList(&'b str),\n+    IdentifierBoundMoreThanOnceInParameterList(&'a str),\n     /// error E0416: identifier is bound more than once in the same pattern\n-    IdentifierBoundMoreThanOnceInSamePattern(&'b str),\n+    IdentifierBoundMoreThanOnceInSamePattern(&'a str),\n     /// error E0417: static variables cannot be referenced in a pattern\n     StaticVariableReference,\n     /// error E0418: is not an enum variant, struct or const\n-    NotAnEnumVariantStructOrConst(&'b str),\n+    NotAnEnumVariantStructOrConst(&'a str),\n     /// error E0419: unresolved enum variant, struct or const\n-    UnresolvedEnumVariantStructOrConst(&'b str),\n+    UnresolvedEnumVariantStructOrConst(&'a str),\n     /// error E0420: is not an associated const\n-    NotAnAssociatedConst(&'b str),\n+    NotAnAssociatedConst(&'a str),\n     /// error E0421: unresolved associated const\n-    UnresolvedAssociatedConst(&'b str),\n+    UnresolvedAssociatedConst(&'a str),\n     /// error E0422: does not name a struct\n-    DoesNotNameAStruct(&'b str),\n+    DoesNotNameAStruct(&'a str),\n     /// error E0423: is a struct variant name, but this expression uses it like a function name\n-    StructVariantUsedAsFunction(&'b str),\n+    StructVariantUsedAsFunction(&'a str),\n     /// error E0424: `self` is not available in a static method\n     SelfNotAvailableInStaticMethod,\n     /// error E0425: unresolved name\n-    UnresolvedName(&'b str, &'b str),\n+    UnresolvedName(&'a str, &'a str),\n     /// error E0426: use of undeclared label\n-    UndeclaredLabel(&'b str),\n+    UndeclaredLabel(&'a str),\n     /// error E0427: cannot use `ref` binding mode with ...\n-    CannotUseRefBindingModeWith(&'b str),\n+    CannotUseRefBindingModeWith(&'a str),\n     /// error E0428: duplicate definition\n-    DuplicateDefinition(&'b str, &'b str),\n+    DuplicateDefinition(&'a str, Name),\n     /// error E0429: `self` imports are only allowed within a { } list\n     SelfImportsOnlyAllowedWithin,\n     /// error E0430: `self` import can only appear once in the list\n     SelfImportCanOnlyAppearOnceInTheList,\n     /// error E0431: `self` import can only appear in an import list with a non-empty prefix\n     SelfImportOnlyInImportListWithNonEmptyPrefix,\n     /// error E0432: unresolved import\n-    UnresolvedImport(Option<(&'b str, Option<&'b str>)>),\n+    UnresolvedImport(Option<(&'a str, Option<&'a str>)>),\n     /// error E0433: failed to resolve\n-    FailedToResolve(&'b str),\n+    FailedToResolve(&'a str),\n     /// error E0434: can't capture dynamic environment in a fn item\n     CannotCaptureDynamicEnvironmentInFnItem,\n     /// error E0435: attempt to use a non-constant value in a constant\n     AttemptToUseNonConstantValueInConstant,\n }\n \n fn resolve_error<'b, 'a:'b, 'tcx:'a>(resolver: &'b Resolver<'a, 'tcx>, span: syntax::codemap::Span,\n-                                     resolution_error: &ResolutionError<'b>) {\n+                                     resolution_error: ResolutionError<'b>) {\n+    if !resolver.emit_errors {\n+        return;\n+    }\n     match resolution_error {\n-        &ResolutionError::TypeParametersFromOuterFunction => {\n-            resolve_err!(resolver, span, E0401, \"can't use type parameters from \\\n-                                                 outer function; try using a local \\\n-                                                 type parameter instead\");\n+        ResolutionError::TypeParametersFromOuterFunction => {\n+            span_err!(resolver.session, span, E0401, \"can't use type parameters from \\\n+                                                      outer function; try using a local \\\n+                                                      type parameter instead\");\n         },\n-        &ResolutionError::OuterTypeParameterContext => {\n-            resolve_err!(resolver, span, E0402,\n+        ResolutionError::OuterTypeParameterContext => {\n+            span_err!(resolver.session, span, E0402,\n                          \"cannot use an outer type parameter in this context\");\n         },\n-        &ResolutionError::NameAlreadyUsedInTypeParameterList(name) => {\n-            resolve_err!(resolver, span, E0403,\n+        ResolutionError::NameAlreadyUsedInTypeParameterList(name) => {\n+            span_err!(resolver.session, span, E0403,\n                          \"the name `{}` is already used for a type \\\n                           parameter in this type parameter list\", name);\n         },\n-        &ResolutionError::IsNotATrait(name) => {\n-            resolve_err!(resolver, span, E0404,\n+        ResolutionError::IsNotATrait(name) => {\n+            span_err!(resolver.session, span, E0404,\n                          \"`{}` is not a trait\",\n                          name);\n         },\n-        &ResolutionError::UndeclaredTraitName(name) => {\n-            resolve_err!(resolver, span, E0405,\n+        ResolutionError::UndeclaredTraitName(name) => {\n+            span_err!(resolver.session, span, E0405,\n                          \"use of undeclared trait name `{}`\",\n                          name);\n         },\n-        &ResolutionError::UndeclaredAssociatedType => {\n-            resolve_err!(resolver, span, E0406, \"undeclared associated type\");\n+        ResolutionError::UndeclaredAssociatedType => {\n+            span_err!(resolver.session, span, E0406, \"undeclared associated type\");\n         },\n-        &ResolutionError::MethodNotMemberOfTrait(method, trait_) => {\n-            resolve_err!(resolver, span, E0407,\n+        ResolutionError::MethodNotMemberOfTrait(method, trait_) => {\n+            span_err!(resolver.session, span, E0407,\n                          \"method `{}` is not a member of trait `{}`\",\n                          method,\n                          trait_);\n         },\n-        &ResolutionError::VariableNotBoundInPattern(variable_name, pattern_number) => {\n-            resolve_err!(resolver, span, E0408,\n+        ResolutionError::VariableNotBoundInPattern(variable_name, pattern_number) => {\n+            span_err!(resolver.session, span, E0408,\n                          \"variable `{}` from pattern #1 is not bound in pattern #{}\",\n                          variable_name,\n                          pattern_number);\n         },\n-        &ResolutionError::VariableBoundWithDifferentMode(variable_name, pattern_number) => {\n-            resolve_err!(resolver, span, E0409,\n+        ResolutionError::VariableBoundWithDifferentMode(variable_name, pattern_number) => {\n+            span_err!(resolver.session, span, E0409,\n                          \"variable `{}` is bound with different \\\n                          mode in pattern #{} than in pattern #1\",\n                          variable_name,\n                          pattern_number);\n         },\n-        &ResolutionError::VariableNotBoundInParentPattern(variable_name, pattern_number) => {\n-            resolve_err!(resolver, span, E0410,\n+        ResolutionError::VariableNotBoundInParentPattern(variable_name, pattern_number) => {\n+            span_err!(resolver.session, span, E0410,\n                          \"variable `{}` from pattern #{} is not bound in pattern #1\",\n                          variable_name,\n                          pattern_number);\n         },\n-        &ResolutionError::SelfUsedOutsideImplOrTrait => {\n-            resolve_err!(resolver, span, E0411, \"use of `Self` outside of an impl or trait\");\n+        ResolutionError::SelfUsedOutsideImplOrTrait => {\n+            span_err!(resolver.session, span, E0411, \"use of `Self` outside of an impl or trait\");\n         },\n-        &ResolutionError::UseOfUndeclared(kind, name) => {\n-            resolve_err!(resolver, span, E0412,\n+        ResolutionError::UseOfUndeclared(kind, name) => {\n+            span_err!(resolver.session, span, E0412,\n                          \"use of undeclared {} `{}`\",\n                          kind,\n                          name);\n         },\n-        &ResolutionError::DeclarationShadowsEnumVariantOrUnitLikeStruct(name) => {\n-            resolve_err!(resolver, span, E0413,\n+        ResolutionError::DeclarationShadowsEnumVariantOrUnitLikeStruct(name) => {\n+            span_err!(resolver.session, span, E0413,\n                          \"declaration of `{}` shadows an enum variant or unit-like struct in \\\n                           scope\",\n                          name);\n         },\n-        &ResolutionError::OnlyIrrefutablePatternsAllowedHere => {\n-            resolve_err!(resolver, span, E0414, \"only irrefutable patterns allowed here\");\n+        ResolutionError::OnlyIrrefutablePatternsAllowedHere => {\n+            span_err!(resolver.session, span, E0414, \"only irrefutable patterns allowed here\");\n         },\n-        &ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => {\n-            resolve_err!(resolver, span, E0415,\n+        ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => {\n+            span_err!(resolver.session, span, E0415,\n                          \"identifier `{}` is bound more than once in this parameter list\",\n                          identifier);\n         },\n-        &ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(identifier) => {\n-            resolve_err!(resolver, span, E0416,\n+        ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(identifier) => {\n+            span_err!(resolver.session, span, E0416,\n                          \"identifier `{}` is bound more than once in the same pattern\",\n                          identifier);\n         },\n-        &ResolutionError::StaticVariableReference => {\n-            resolve_err!(resolver, span, E0417, \"static variables cannot be \\\n-                                                 referenced in a pattern, \\\n-                                                 use a `const` instead\");\n+        ResolutionError::StaticVariableReference => {\n+            span_err!(resolver.session, span, E0417, \"static variables cannot be \\\n+                                                      referenced in a pattern, \\\n+                                                      use a `const` instead\");\n         },\n-        &ResolutionError::NotAnEnumVariantStructOrConst(name) => {\n-            resolve_err!(resolver, span, E0418,\n+        ResolutionError::NotAnEnumVariantStructOrConst(name) => {\n+            span_err!(resolver.session, span, E0418,\n                          \"`{}` is not an enum variant, struct or const\",\n                          name);\n         },\n-        &ResolutionError::UnresolvedEnumVariantStructOrConst(name) => {\n-            resolve_err!(resolver, span, E0419,\n+        ResolutionError::UnresolvedEnumVariantStructOrConst(name) => {\n+            span_err!(resolver.session, span, E0419,\n                          \"unresolved enum variant, struct or const `{}`\",\n                          name);\n         },\n-        &ResolutionError::NotAnAssociatedConst(name) => {\n-            resolve_err!(resolver, span, E0420,\n+        ResolutionError::NotAnAssociatedConst(name) => {\n+            span_err!(resolver.session, span, E0420,\n                          \"`{}` is not an associated const\",\n                          name);\n         },\n-        &ResolutionError::UnresolvedAssociatedConst(name) => {\n-            resolve_err!(resolver, span, E0421,\n+        ResolutionError::UnresolvedAssociatedConst(name) => {\n+            span_err!(resolver.session, span, E0421,\n                          \"unresolved associated const `{}`\",\n                          name);\n         },\n-        &ResolutionError::DoesNotNameAStruct(name) => {\n-            resolve_err!(resolver, span, E0422, \"`{}` does not name a structure\", name);\n+        ResolutionError::DoesNotNameAStruct(name) => {\n+            span_err!(resolver.session, span, E0422, \"`{}` does not name a structure\", name);\n         },\n-        &ResolutionError::StructVariantUsedAsFunction(path_name) => {\n-            resolve_err!(resolver, span, E0423,\n+        ResolutionError::StructVariantUsedAsFunction(path_name) => {\n+            span_err!(resolver.session, span, E0423,\n                          \"`{}` is a struct variant name, but \\\n                           this expression \\\n                           uses it like a function name\",\n                           path_name);\n         },\n-        &ResolutionError::SelfNotAvailableInStaticMethod => {\n-            resolve_err!(resolver, span, E0424, \"`self` is not available in a static method. \\\n-                                                 Maybe a `self` argument is missing?\");\n+        ResolutionError::SelfNotAvailableInStaticMethod => {\n+            span_err!(resolver.session, span, E0424, \"`self` is not available in a static method. \\\n+                                                      Maybe a `self` argument is missing?\");\n         },\n-        &ResolutionError::UnresolvedName(path, name) => {\n-            resolve_err!(resolver, span, E0425,\n+        ResolutionError::UnresolvedName(path, name) => {\n+            span_err!(resolver.session, span, E0425,\n                          \"unresolved name `{}`{}\",\n                          path,\n                          name);\n         },\n-        &ResolutionError::UndeclaredLabel(name) => {\n-            resolve_err!(resolver, span, E0426,\n+        ResolutionError::UndeclaredLabel(name) => {\n+            span_err!(resolver.session, span, E0426,\n                          \"use of undeclared label `{}`\",\n                          name);\n         },\n-        &ResolutionError::CannotUseRefBindingModeWith(descr) => {\n-            resolve_err!(resolver, span, E0427,\n+        ResolutionError::CannotUseRefBindingModeWith(descr) => {\n+            span_err!(resolver.session, span, E0427,\n                          \"cannot use `ref` binding mode with {}\",\n                          descr);\n         },\n-        &ResolutionError::DuplicateDefinition(namespace, name) => {\n-            resolve_err!(resolver, span, E0428,\n+        ResolutionError::DuplicateDefinition(namespace, name) => {\n+            span_err!(resolver.session, span, E0428,\n                          \"duplicate definition of {} `{}`\",\n                          namespace,\n                          name);\n         },\n-        &ResolutionError::SelfImportsOnlyAllowedWithin => {\n-            resolve_err!(resolver, span, E0429, \"{}\",\n+        ResolutionError::SelfImportsOnlyAllowedWithin => {\n+            span_err!(resolver.session, span, E0429, \"{}\",\n                          \"`self` imports are only allowed within a { } list\");\n         },\n-        &ResolutionError::SelfImportCanOnlyAppearOnceInTheList => {\n-            resolve_err!(resolver, span, E0430,\n+        ResolutionError::SelfImportCanOnlyAppearOnceInTheList => {\n+            span_err!(resolver.session, span, E0430,\n                          \"`self` import can only appear once in the list\");\n         },\n-        &ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix => {\n-            resolve_err!(resolver, span, E0431,\n+        ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix => {\n+            span_err!(resolver.session, span, E0431,\n                          \"`self` import can only appear in an import list with a \\\n                           non-empty prefix\");\n         }\n-        &ResolutionError::UnresolvedImport(name) => {\n+        ResolutionError::UnresolvedImport(name) => {\n             let msg = match name {\n                 Some((n, Some(p))) => format!(\"unresolved import `{}`{}\", n, p),\n                 Some((n, None)) => format!(\"unresolved import (maybe you meant `{}::*`?)\", n),\n                 None => \"unresolved import\".to_owned()\n             };\n-            resolve_err!(resolver, span, E0432, \"{}\", msg);\n+            span_err!(resolver.session, span, E0432, \"{}\", msg);\n         },\n-        &ResolutionError::FailedToResolve(msg) => {\n-            resolve_err!(resolver, span, E0433, \"failed to resolve. {}\", msg);\n+        ResolutionError::FailedToResolve(msg) => {\n+            span_err!(resolver.session, span, E0433, \"failed to resolve. {}\", msg);\n         },\n-        &ResolutionError::CannotCaptureDynamicEnvironmentInFnItem => {\n-            resolve_err!(resolver, span, E0434, \"{}\",\n+        ResolutionError::CannotCaptureDynamicEnvironmentInFnItem => {\n+            span_err!(resolver.session, span, E0434, \"{}\",\n                          \"can't capture dynamic environment in a fn item; \\\n                           use the || { ... } closure form instead\");\n         },\n-        &ResolutionError::AttemptToUseNonConstantValueInConstant =>{\n-            resolve_err!(resolver, span, E0435,\n+        ResolutionError::AttemptToUseNonConstantValueInConstant =>{\n+            span_err!(resolver.session, span, E0435,\n                          \"attempt to use a non-constant value in a constant\");\n         },\n     }\n@@ -1563,7 +1558,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                               PathSearch,\n                                               true) {\n                 Failed(Some((span, msg))) => {\n-                    resolve_error(self, span, &ResolutionError::FailedToResolve(&*msg));\n+                    resolve_error(self, span, ResolutionError::FailedToResolve(&*msg));\n                 },\n                 Failed(None) => (), // Continue up the search chain.\n                 Indeterminate => {\n@@ -1823,11 +1818,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             if sn.contains(\"::\") {\n                 resolve_error(self,\n                               (*imports)[index].span,\n-                              &ResolutionError::UnresolvedImport(None));\n+                              ResolutionError::UnresolvedImport(None));\n             } else {\n                 resolve_error(self,\n                               (*imports)[index].span,\n-                              &ResolutionError::UnresolvedImport(Some((&*sn, None))));\n+                              ResolutionError::UnresolvedImport(Some((&*sn, None))));\n             }\n         }\n \n@@ -1956,7 +1951,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             resolve_error(\n                                 self,\n                                 span,\n-                                &ResolutionError::CannotCaptureDynamicEnvironmentInFnItem\n+                                ResolutionError::CannotCaptureDynamicEnvironmentInFnItem\n                             );\n                             return None;\n                         }\n@@ -1965,7 +1960,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             resolve_error(\n                                 self,\n                                 span,\n-                                &ResolutionError::AttemptToUseNonConstantValueInConstant\n+                                ResolutionError::AttemptToUseNonConstantValueInConstant\n                             );\n                             return None;\n                         }\n@@ -1984,12 +1979,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                             resolve_error(self,\n                                           span,\n-                                          &ResolutionError::TypeParametersFromOuterFunction);\n+                                          ResolutionError::TypeParametersFromOuterFunction);\n                             return None;\n                         }\n                         ConstantItemRibKind => {\n                             // see #9186\n-                            resolve_error(self, span, &ResolutionError::OuterTypeParameterContext);\n+                            resolve_error(self, span, ResolutionError::OuterTypeParameterContext);\n                             return None;\n                         }\n                     }\n@@ -2189,7 +2184,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     if seen_bindings.contains(&name) {\n                         resolve_error(self,\n                                       type_parameter.span,\n-                                      &ResolutionError::NameAlreadyUsedInTypeParameterList(\n+                                      ResolutionError::NameAlreadyUsedInTypeParameterList(\n                                         name)\n                         );\n                     }\n@@ -2280,7 +2275,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             } else {\n                 resolve_error(self,\n                               trait_path.span,\n-                              &ResolutionError::IsNotATrait(&*path_names_to_string(trait_path,\n+                              ResolutionError::IsNotATrait(&*path_names_to_string(trait_path,\n                                                                                    path_depth))\n                              );\n \n@@ -2294,7 +2289,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         } else {\n             resolve_error(self,\n                           trait_path.span,\n-                          &ResolutionError::UndeclaredTraitName(\n+                          ResolutionError::UndeclaredTraitName(\n                             &*path_names_to_string(trait_path, path_depth))\n                          );\n             Err(())\n@@ -2316,7 +2311,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     } else {\n                         resolve_error(self,\n                                       eq_pred.span,\n-                                      &ResolutionError::UndeclaredAssociatedType);\n+                                      ResolutionError::UndeclaredAssociatedType);\n                     }\n                 }\n             }\n@@ -2443,7 +2438,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 let path_str = path_names_to_string(&trait_ref.path, 0);\n                 resolve_error(self,\n                               span,\n-                              &ResolutionError::MethodNotMemberOfTrait(name,\n+                              ResolutionError::MethodNotMemberOfTrait(name,\n                                                                        &*path_str));\n             }\n         }\n@@ -2493,14 +2488,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                   None => {\n                     resolve_error(self,\n                                   p.span,\n-                                  &ResolutionError::VariableNotBoundInPattern(key,\n+                                  ResolutionError::VariableNotBoundInPattern(key,\n                                                                               i + 1));\n                   }\n                   Some(binding_i) => {\n                     if binding_0.binding_mode != binding_i.binding_mode {\n                         resolve_error(self,\n                                       binding_i.span,\n-                                      &ResolutionError::VariableBoundWithDifferentMode(key,\n+                                      ResolutionError::VariableBoundWithDifferentMode(key,\n                                                                                        i + 1)\n                                      );\n                     }\n@@ -2512,7 +2507,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if !map_0.contains_key(&key) {\n                     resolve_error(self,\n                                   binding.span,\n-                                  &ResolutionError::VariableNotBoundInParentPattern(key,\n+                                  ResolutionError::VariableNotBoundInParentPattern(key,\n                                                                                     i + 1));\n                 }\n             }\n@@ -2629,11 +2624,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         if is_invalid_self_type_name {\n                             resolve_error(self,\n                                           ty.span,\n-                                          &ResolutionError::SelfUsedOutsideImplOrTrait);\n+                                          ResolutionError::SelfUsedOutsideImplOrTrait);\n                         } else {\n                             resolve_error(self,\n                                           ty.span,\n-                                          &ResolutionError::UseOfUndeclared(\n+                                          ResolutionError::UseOfUndeclared(\n                                                                     kind,\n                                                                     &*path_names_to_string(path,\n                                                                                            0))\n@@ -2692,7 +2687,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             resolve_error(\n                                 self,\n                                 pattern.span,\n-                                &ResolutionError::DeclarationShadowsEnumVariantOrUnitLikeStruct(\n+                                ResolutionError::DeclarationShadowsEnumVariantOrUnitLikeStruct(\n                                     renamed)\n                             );\n                         }\n@@ -2715,7 +2710,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             resolve_error(\n                                 self,\n                                 pattern.span,\n-                                &ResolutionError::OnlyIrrefutablePatternsAllowedHere\n+                                ResolutionError::OnlyIrrefutablePatternsAllowedHere\n                             );\n                         }\n                         BareIdentifierPatternUnresolved => {\n@@ -2751,7 +2746,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 resolve_error(\n                                     self,\n                                     pattern.span,\n-                                    &ResolutionError::IdentifierBoundMoreThanOnceInParameterList(\n+                                    ResolutionError::IdentifierBoundMoreThanOnceInParameterList(\n                                         &*token::get_ident(ident))\n                                 );\n                             } else if bindings_list.get(&renamed) ==\n@@ -2761,7 +2756,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 resolve_error(\n                                     self,\n                                     pattern.span,\n-                                    &ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(\n+                                    ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(\n                                         &*token::get_ident(ident))\n                                 );\n                             }\n@@ -2796,7 +2791,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             DefStatic(..) => {\n                                 resolve_error(&self,\n                                               path.span,\n-                                              &ResolutionError::StaticVariableReference);\n+                                              ResolutionError::StaticVariableReference);\n                             }\n                             _ => {\n                                 // If anything ends up here entirely resolved,\n@@ -2807,7 +2802,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     resolve_error(\n                                         self,\n                                         path.span,\n-                                        &ResolutionError::NotAnEnumVariantStructOrConst(\n+                                        ResolutionError::NotAnEnumVariantStructOrConst(\n                                             &*token::get_ident(\n                                                 path.segments.last().unwrap().identifier)\n                                             )\n@@ -2825,7 +2820,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         resolve_error(\n                             self,\n                             path.span,\n-                            &ResolutionError::UnresolvedEnumVariantStructOrConst(\n+                            ResolutionError::UnresolvedEnumVariantStructOrConst(\n                                 &*token::get_ident(path.segments.last().unwrap().identifier))\n                         );\n                     }\n@@ -2862,7 +2857,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 resolve_error(\n                                     self,\n                                     path.span,\n-                                    &ResolutionError::NotAnAssociatedConst(\n+                                    ResolutionError::NotAnAssociatedConst(\n                                         &*token::get_ident(\n                                             path.segments.last().unwrap().identifier)\n                                     )\n@@ -2873,7 +2868,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         resolve_error(\n                             self,\n                             path.span,\n-                            &ResolutionError::UnresolvedAssociatedConst(\n+                            ResolutionError::UnresolvedAssociatedConst(\n                                 &*token::get_ident(path.segments.last().unwrap().identifier)\n                             )\n                         );\n@@ -2892,7 +2887,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             resolve_error(\n                                 self,\n                                 path.span,\n-                                &ResolutionError::DoesNotNameAStruct(\n+                                ResolutionError::DoesNotNameAStruct(\n                                     &*path_names_to_string(path, 0))\n                             );\n                         }\n@@ -2942,7 +2937,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             DefStatic(..) => {\n                                 resolve_error(self,\n                                               span,\n-                                              &ResolutionError::StaticVariableReference);\n+                                              ResolutionError::StaticVariableReference);\n                                 return BareIdentifierPatternUnresolved;\n                             }\n                             _ => {\n@@ -2959,7 +2954,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Failed(err) => {\n                 match err {\n                     Some((span, msg)) => {\n-                        resolve_error(self, span, &ResolutionError::FailedToResolve(&*msg));\n+                        resolve_error(self, span, ResolutionError::FailedToResolve(&*msg));\n                     }\n                     None => ()\n                 }\n@@ -3188,7 +3183,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 };\n \n-                resolve_error(self, span, &ResolutionError::FailedToResolve(&*msg));\n+                resolve_error(self, span, ResolutionError::FailedToResolve(&*msg));\n                 return None;\n             }\n             Indeterminate => panic!(\"indeterminate unexpected\"),\n@@ -3247,7 +3242,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 };\n \n-                resolve_error(self, span, &ResolutionError::FailedToResolve(&*msg));\n+                resolve_error(self, span, ResolutionError::FailedToResolve(&*msg));\n                 return None;\n             }\n \n@@ -3343,7 +3338,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                          failed to resolve {}\", name);\n \n                 if let Some((span, msg)) = err {\n-                    resolve_error(self, span, &ResolutionError::FailedToResolve(&*msg))\n+                    resolve_error(self, span, ResolutionError::FailedToResolve(&*msg))\n                 }\n \n                 return None;\n@@ -3548,7 +3543,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                         resolve_error(self,\n                                       expr.span,\n-                                      &ResolutionError::StructVariantUsedAsFunction(&*path_name));\n+                                      ResolutionError::StructVariantUsedAsFunction(&*path_name));\n \n                         let msg = format!(\"did you mean to write: \\\n                                            `{} {{ /* fields */ }}`?\",\n@@ -3588,7 +3583,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 resolve_error(\n                                     self,\n                                     expr.span,\n-                                    &ResolutionError::StructVariantUsedAsFunction(\n+                                    ResolutionError::StructVariantUsedAsFunction(\n                                         &*path_name)\n                                 );\n \n@@ -3620,7 +3615,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 resolve_error(\n                                     self,\n                                     expr.span,\n-                                    &ResolutionError::SelfNotAvailableInStaticMethod\n+                                    ResolutionError::SelfNotAvailableInStaticMethod\n                                 );\n                             } else {\n                                 let last_name = path.segments.last().unwrap().identifier.name;\n@@ -3647,7 +3642,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                                 resolve_error(self,\n                                               expr.span,\n-                                              &ResolutionError::UnresolvedName(&*path_name,\n+                                              ResolutionError::UnresolvedName(&*path_name,\n                                                                                &*msg));\n                             }\n                         }\n@@ -3668,7 +3663,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                         resolve_error(self,\n                                       path.span,\n-                                      &ResolutionError::DoesNotNameAStruct(\n+                                      ResolutionError::DoesNotNameAStruct(\n                                                                 &*path_names_to_string(path, 0))\n                                      );\n                     }\n@@ -3697,7 +3692,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     None => {\n                         resolve_error(self,\n                                       expr.span,\n-                                      &ResolutionError::UndeclaredLabel(&*token::get_ident(label)))\n+                                      ResolutionError::UndeclaredLabel(&*token::get_ident(label)))\n                     }\n                     Some(DlDef(def @ DefLabel(_))) => {\n                         // Since this def is a label, it is never read.\n@@ -3845,7 +3840,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             BindByRef(..) => {\n                 resolve_error(self,\n                               pat.span,\n-                              &ResolutionError::CannotUseRefBindingModeWith(descr));\n+                              ResolutionError::CannotUseRefBindingModeWith(descr));\n             }\n         }\n     }"}, {"sha": "e797da7b8f64bf299a85d664e3e494e9687335d3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60133aa6dd4bf288cacbaba72368f80c131d252c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60133aa6dd4bf288cacbaba72368f80c131d252c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=60133aa6dd4bf288cacbaba72368f80c131d252c", "patch": "@@ -22,6 +22,7 @@ use ResolveResult;\n use Resolver;\n use UseLexicalScopeFlag;\n use {names_to_string, module_to_string};\n+use {resolve_error, ResolutionError};\n \n use build_reduced_graph;\n \n@@ -272,9 +273,9 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         Some((span, msg)) => (span, format!(\". {}\", msg)),\n                         None => (import_directive.span, String::new())\n                     };\n-                    ::resolve_error(self.resolver,\n+                    resolve_error(self.resolver,\n                                     span,\n-                                    &::ResolutionError::UnresolvedImport(\n+                                    ResolutionError::UnresolvedImport(\n                                                 Some((&*import_path_to_string(\n                                                         &import_directive.module_path,\n                                                         import_directive.subclass),"}]}