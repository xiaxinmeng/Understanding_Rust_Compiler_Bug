{"sha": "f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYmQ0NDE2ZmEzNTQ5Zjk2MmM4ZmZkZDY0NzRjZjRiZjBkMjFlY2E=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-07-08T22:31:26Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-09T20:35:56Z"}, "message": "std: Implement `Iterator::size_hint` method for `Option` iterators", "tree": {"sha": "5b579eb6574470f847c7167d56c996446cdaef27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b579eb6574470f847c7167d56c996446cdaef27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca", "html_url": "https://github.com/rust-lang/rust/commit/f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4af0960bd4bef820cdd10b014d1f9858ec9fa14", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4af0960bd4bef820cdd10b014d1f9858ec9fa14", "html_url": "https://github.com/rust-lang/rust/commit/a4af0960bd4bef820cdd10b014d1f9858ec9fa14"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "222952a6dc14395be0eaae6d8e677a81ab86f7b8", "filename": "src/libstd/option.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=f2bd4416fa3549f962c8ffdd6474cf4bf0d21eca", "patch": "@@ -379,6 +379,13 @@ impl<'self, A> Iterator<&'self A> for OptionIterator<'self, A> {\n     fn next(&mut self) -> Option<&'self A> {\n         util::replace(&mut self.opt, None)\n     }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        match self.opt {\n+            Some(_) => (1, Some(1)),\n+            None => (0, Some(0)),\n+        }\n+    }\n }\n \n /// Mutable iterator over an `Option<A>`\n@@ -390,6 +397,13 @@ impl<'self, A> Iterator<&'self mut A> for OptionMutIterator<'self, A> {\n     fn next(&mut self) -> Option<&'self mut A> {\n         util::replace(&mut self.opt, None)\n     }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        match self.opt {\n+            Some(_) => (1, Some(1)),\n+            None => (0, Some(0)),\n+        }\n+    }\n }\n \n #[test]\n@@ -487,3 +501,39 @@ fn test_filtered() {\n     assert_eq!(some_stuff.get(), 42);\n     assert!(modified_stuff.is_none());\n }\n+\n+#[test]\n+fn test_iter() {\n+    let val = 5;\n+\n+    let x = Some(val);\n+    let mut it = x.iter();\n+\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n+    assert_eq!(it.next(), Some(&val));\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n+    assert!(it.next().is_none());\n+}\n+\n+#[test]\n+fn test_mut_iter() {\n+    let val = 5;\n+    let new_val = 11;\n+\n+    let mut x = Some(val);\n+    let mut it = x.mut_iter();\n+\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n+\n+    match it.next() {\n+        Some(interior) => {\n+            assert_eq!(*interior, val);\n+            *interior = new_val;\n+            assert_eq!(x, Some(new_val));\n+        }\n+        None => assert!(false),\n+    }\n+\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n+    assert!(it.next().is_none());\n+}"}]}