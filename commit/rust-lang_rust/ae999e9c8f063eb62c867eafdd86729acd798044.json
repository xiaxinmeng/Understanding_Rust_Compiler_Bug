{"sha": "ae999e9c8f063eb62c867eafdd86729acd798044", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOTk5ZTljOGYwNjNlYjYyYzg2N2VhZmRkODY3MjlhY2Q3OTgwNDQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-06T12:54:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-28T16:58:06Z"}, "message": "Address review comments", "tree": {"sha": "4fc064afae4cd2069529bc2a828c9fd74db82468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc064afae4cd2069529bc2a828c9fd74db82468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae999e9c8f063eb62c867eafdd86729acd798044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae999e9c8f063eb62c867eafdd86729acd798044", "html_url": "https://github.com/rust-lang/rust/commit/ae999e9c8f063eb62c867eafdd86729acd798044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae999e9c8f063eb62c867eafdd86729acd798044/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf4682069468f231e6153b9fc910e0c720c71ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4682069468f231e6153b9fc910e0c720c71ecb", "html_url": "https://github.com/rust-lang/rust/commit/cf4682069468f231e6153b9fc910e0c720c71ecb"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "c36c88c7990d30abfb1746b70a59a7c3f120ef53", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae999e9c8f063eb62c867eafdd86729acd798044/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae999e9c8f063eb62c867eafdd86729acd798044/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ae999e9c8f063eb62c867eafdd86729acd798044", "patch": "@@ -540,8 +540,10 @@ pub enum PatKind {\n     /// Such pattern can be resolved to a unit struct/variant or a constant.\n     Path(Path),\n \n-    /// A path pattern written in qualified form, i.e. `<T as Trait>::CONST` or `<T>::CONST`.\n-    /// Such patterns can only refer to associated constants at the moment.\n+    /// An associated const named using the qualified path `<T>::CONST` or\n+    /// `<T as Trait>::CONST`. Associated consts from inherent impls can be\n+    /// referred to as simply `T::CONST`, in which case they will end up as\n+    /// PatKind::Path, and the resolver will have to sort that out.\n     QPath(QSelf, Path),\n \n     /// A tuple pattern `(a, b)`."}, {"sha": "48b5420dd6be7e7e4c8b113a5e24e87834bd7a97", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae999e9c8f063eb62c867eafdd86729acd798044/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae999e9c8f063eb62c867eafdd86729acd798044/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=ae999e9c8f063eb62c867eafdd86729acd798044", "patch": "@@ -1043,11 +1043,6 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 PatKind::Struct(..) | PatKind::TupleStruct(..) |\n                 PatKind::Path(..) | PatKind::QPath(..) => {\n                     match def_map.get(&pat.id).map(|d| d.full_def()) {\n-                        None => {\n-                            // no definition found: pat is not a\n-                            // struct or enum pattern.\n-                        }\n-\n                         Some(Def::Variant(enum_did, variant_did)) => {\n                             let downcast_cmt =\n                                 if tcx.lookup_adt_def(enum_did).is_univariant() {\n@@ -1083,7 +1078,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                             // `matched_pat` call.\n                         }\n \n-                        Some(def) => {\n+                        def => {\n                             // An enum type should never be in a pattern.\n                             // Remaining cases are e.g. Def::Fn, to\n                             // which identifiers within patterns"}, {"sha": "488d8ed2e5e357141750ad840a41131fbb5b8928", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae999e9c8f063eb62c867eafdd86729acd798044/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae999e9c8f063eb62c867eafdd86729acd798044/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ae999e9c8f063eb62c867eafdd86729acd798044", "patch": "@@ -635,8 +635,10 @@ pub enum PatKind {\n     /// Such pattern can be resolved to a unit struct/variant or a constant.\n     Path(Path),\n \n-    /// A path pattern written in qualified form, i.e. `<T as Trait>::CONST` or `<T>::CONST`.\n-    /// Such patterns can only refer to associated constants at the moment.\n+    /// An associated const named using the qualified path `<T>::CONST` or\n+    /// `<T as Trait>::CONST`. Associated consts from inherent impls can be\n+    /// referred to as simply `T::CONST`, in which case they will end up as\n+    /// PatKind::Path, and the resolver will have to sort that out.\n     QPath(QSelf, Path),\n \n     /// A tuple pattern `(a, b)`."}]}