{"sha": "b7dd609d9c3a6a336091e502caee8a10948cc2c3", "node_id": "C_kwDOAAsO6NoAKGI3ZGQ2MDlkOWMzYTZhMzM2MDkxZTUwMmNhZWU4YTEwOTQ4Y2MyYzM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-12-16T20:15:34Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-19T14:49:02Z"}, "message": "Add associated_item_for_impl_trait_in_trait query", "tree": {"sha": "16ec38e36751bd56c276e5dba18058fa068d25c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16ec38e36751bd56c276e5dba18058fa068d25c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7dd609d9c3a6a336091e502caee8a10948cc2c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPyNuAACgkQgTGiTgx5\n769YyA//d8SR+Jy++B1bstilRSCm0fGbhQc+C/fvjyIP7TtIEGLopuvZ3+npYRAW\nnzf26PgW9TKiKo6BOq4PAtjfcq6Za2+tjBCa+E1ApU4h+1wlUcOdsW3BgLi/64+c\noS5uvVBGec879aSoWHOs7ruY+U8lSnkbp8b+PWyerDvQZTbs7lSAOBYiaEif8wfw\nM7XHy0AYwN31WA2zPlcpPaokkh8ZEoiuNjzNR1xiqWsaGzMoQLa7noleXKmC0J8U\na0ZMbLTvpz8VKWPhvjX+BeAhZG4nL9xGQK0qOjM4e8j/o23ZTbCij9KgW6kjyKRf\nvh7QghFbFiiNvCw9zanqHBFEW6jVHUyLNiUtEJNW2NCIOrClTsbQW48zYIgTr8sm\nkJHaINU9hgifBpHw6KL7MuNrSIbEHoStWUU5kVtRWA23CgRodFbRp3jtDEsWOwLK\nXL3cYXLhey/ngkOnjif30qfzWEBa/Z93GmDBjlx+8JQbEwWoHW0aboDv3nfQGYmE\n2mfaN6Akt6nLUsya3UhHOBHCFJXFF26waOl47xgggSkZAh6KDbgzqaFS8fzrynKk\ndpPPZGim9Hntv75Y77x+b4X0p48rsk79SltZM1eXlHcRFhdfxvXb2uoEZ8twQZgY\nQI1gJ4pu0KhCSw3tCTwgFZz2srx1fodJQVgMApHDngma6VjsGIE=\n=DP31\n-----END PGP SIGNATURE-----", "payload": "tree 16ec38e36751bd56c276e5dba18058fa068d25c7\nparent 4e703a277220a3f52b4772f298535df232b6cb7c\nauthor Santiago Pastorino <spastorino@gmail.com> 1671221734 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676818142 -0300\n\nAdd associated_item_for_impl_trait_in_trait query\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dd609d9c3a6a336091e502caee8a10948cc2c3", "html_url": "https://github.com/rust-lang/rust/commit/b7dd609d9c3a6a336091e502caee8a10948cc2c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7dd609d9c3a6a336091e502caee8a10948cc2c3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e703a277220a3f52b4772f298535df232b6cb7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e703a277220a3f52b4772f298535df232b6cb7c", "html_url": "https://github.com/rust-lang/rust/commit/4e703a277220a3f52b4772f298535df232b6cb7c"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "859fed6ed260680b761fe6427c31f213ff700a83", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7dd609d9c3a6a336091e502caee8a10948cc2c3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dd609d9c3a6a336091e502caee8a10948cc2c3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b7dd609d9c3a6a336091e502caee8a10948cc2c3", "patch": "@@ -774,6 +774,14 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    /// Given an impl trait in trait `opaque_ty_def_id`, create and return the corresponding\n+    /// associated item.\n+    query associated_item_for_impl_trait_in_trait(opaque_ty_def_id: LocalDefId) -> LocalDefId {\n+        desc { |tcx| \"creates the associated item corresponding to the opaque type `{}`\", tcx.def_path_str(opaque_ty_def_id.to_def_id()) }\n+        cache_on_disk_if { true }\n+        separate_provide_extern\n+    }\n+\n     /// Given an `impl_id`, return the trait it implements.\n     /// Return `None` if this is an inherent impl.\n     query impl_trait_ref(impl_id: DefId) -> Option<ty::EarlyBinder<ty::TraitRef<'tcx>>> {"}, {"sha": "ef725c48da6a9f2673625d3b77a68bd2346b1bc4", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7dd609d9c3a6a336091e502caee8a10948cc2c3/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dd609d9c3a6a336091e502caee8a10948cc2c3/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=b7dd609d9c3a6a336091e502caee8a10948cc2c3", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -11,6 +12,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         associated_item_def_ids,\n         associated_items,\n         associated_items_for_impl_trait_in_trait,\n+        associated_item_for_impl_trait_in_trait,\n         impl_item_implementor_ids,\n         ..*providers\n     };\n@@ -135,14 +137,24 @@ fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -\n     if let Some(output) = tcx.hir().get_fn_output(fn_def_id.expect_local()) {\n         visitor.visit_fn_ret_ty(output);\n \n-        let trait_def_id = tcx.parent(fn_def_id).expect_local();\n-\n-        tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|_opaque_ty_def_id| {\n-            let trait_assoc_ty =\n-                tcx.at(output.span()).create_def(trait_def_id, DefPathData::ImplTraitAssocTy);\n-            trait_assoc_ty.def_id().to_def_id()\n+        tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|opaque_ty_def_id| {\n+            tcx.associated_item_for_impl_trait_in_trait(opaque_ty_def_id).to_def_id()\n         }))\n     } else {\n         &[]\n     }\n }\n+\n+fn associated_item_for_impl_trait_in_trait(\n+    tcx: TyCtxt<'_>,\n+    opaque_ty_def_id: LocalDefId,\n+) -> LocalDefId {\n+    let fn_def_id = tcx.impl_trait_in_trait_parent(opaque_ty_def_id.to_def_id());\n+    let trait_def_id = tcx.parent(fn_def_id);\n+    assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n+\n+    let span = tcx.def_span(opaque_ty_def_id);\n+    let trait_assoc_ty =\n+        tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n+    trait_assoc_ty.def_id()\n+}"}]}