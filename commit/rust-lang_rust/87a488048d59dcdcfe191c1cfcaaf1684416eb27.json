{"sha": "87a488048d59dcdcfe191c1cfcaaf1684416eb27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YTQ4ODA0OGQ1OWRjZGNmZTE5MWMxY2ZjYWFmMTY4NDQxNmViMjc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-06T21:03:17Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-06T21:03:17Z"}, "message": "Make keyword table in reference reflect reality more closely\n\nAnd remove the part about reserved words.", "tree": {"sha": "3548e994dd99655f8032049a0c98d445accfa2f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3548e994dd99655f8032049a0c98d445accfa2f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87a488048d59dcdcfe191c1cfcaaf1684416eb27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87a488048d59dcdcfe191c1cfcaaf1684416eb27", "html_url": "https://github.com/rust-lang/rust/commit/87a488048d59dcdcfe191c1cfcaaf1684416eb27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87a488048d59dcdcfe191c1cfcaaf1684416eb27/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08e589390993d27bf8504c1c8c54586bbfa3d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08e589390993d27bf8504c1c8c54586bbfa3d37", "html_url": "https://github.com/rust-lang/rust/commit/a08e589390993d27bf8504c1c8c54586bbfa3d37"}], "stats": {"total": 80, "additions": 27, "deletions": 53}, "files": [{"sha": "9b7e87c7c496cd7a4677c99b22763793657cfce2", "filename": "doc/rust.md", "status": "modified", "additions": 21, "deletions": 47, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/87a488048d59dcdcfe191c1cfcaaf1684416eb27/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/87a488048d59dcdcfe191c1cfcaaf1684416eb27/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=87a488048d59dcdcfe191c1cfcaaf1684416eb27", "patch": "@@ -102,12 +102,12 @@ Productions](#special-unicode-productions).\n \n Some rules in the grammar -- notably [unary\n operators](#unary-operator-expressions), [binary\n-operators](#binary-operator-expressions), [keywords](#keywords) and [reserved\n-words](#reserved-words) -- are given in a simplified form: as a listing of a\n-table of unquoted, printable whitespace-separated strings. These cases form a\n-subset of the rules regarding the [token](#tokens) rule, and are assumed to be\n-the result of a lexical-analysis phase feeding the parser, driven by a DFA,\n-operating over the disjunction of all such string table entries.\n+operators](#binary-operator-expressions), and [keywords](#keywords) --\n+are given in a simplified form: as a listing of a table of unquoted,\n+printable whitespace-separated strings. These cases form a subset of\n+the rules regarding the [token](#tokens) rule, and are assumed to be\n+the result of a lexical-analysis phase feeding the parser, driven by a\n+DFA, operating over the disjunction of all such string table entries.\n \n When such a string enclosed in double-quotes (`\"`) occurs inside the\n grammar, it is an implicit reference to a single member of such a string table\n@@ -139,8 +139,7 @@ The `ident` production is any nonempty Unicode string of the following form:\n    - The first character has property `XID_start`\n    - The remaining characters have property `XID_continue`\n \n-that does _not_ occur in the set of [keywords](#keywords) or [reserved\n-words](#reserved-words).\n+that does _not_ occur in the set of [keywords](#keywords).\n \n Note: `XID_start` and `XID_continue` as character properties cover the\n character ranges used to form the more familiar C and Java language-family\n@@ -190,7 +189,7 @@ with any other legal whitespace element, such as a single space character.\n ## Tokens\n \n ~~~~~~~~ {.ebnf .gram}\n-simple_token : keyword | reserved | unop | binop ;\n+simple_token : keyword | unop | binop ;\n token : simple_token | ident | literal | symbol | whitespace token ;\n ~~~~~~~~\n \n@@ -204,52 +203,32 @@ grammar as double-quoted strings. Other tokens have exact rules given.\n The keywords in [crate files](#crate-files) are the following strings:\n \n ~~~~~~~~ {.keyword}\n-import export use mod dir\n+import export use mod\n ~~~~~~~~\n \n The keywords in [source files](#source-files) are the following strings:\n \n-*TODO* split these between type keywords and regular (value) keywords,\n- and define two different `identifier` productions for the different\n- contexts.\n-\n ~~~~~~~~ {.keyword}\n-alt any as assert\n-be bind block bool break\n-char check claim const cont\n+alt assert\n+be break\n+check claim class const cont copy\n do\n else enum export\n-f32 f64 fail false float fn for\n-i16 i32 i64 i8 if iface impl import in int\n+fail false fn for\n+if iface impl import\n let log\n mod mutable\n-native note\n-of\n-prove pure\n+native\n+pure\n resource ret\n-self str syntax\n true type\n-u16 u32 u64 u8 uint unchecked unsafe use\n-vec\n+unsafe use\n while\n ~~~~~~~~\n \n Any of these have special meaning in their respective grammars, and are\n excluded from the `ident` rule.\n \n-### Reserved words\n-\n-The reserved words are the following strings:\n-\n-~~~~~~~~ {.reserved}\n-m32 m64 m128\n-f80 f16 f128\n-class trait\n-~~~~~~~~\n-\n-Any of these may have special meaning in future versions of the language, so\n-are excluded from the `ident` rule.\n-\n ### Literals\n \n A literal is an expression consisting of a single token, rather than a\n@@ -389,10 +368,6 @@ literal. There are three floating-point suffixes: `f` (for the base\n `float` type), `f32`, and `f64` (the 32-bit and 64-bit floating point\n types).\n \n-A set of suffixes are also reserved to accommodate literal support for\n-types corresponding to reserved tokens. The reserved suffixes are `f16`,\n-`f80`, `f128`, `m`, `m32`, `m64` and `m128`.\n-\n Examples of floating-point literals of various forms:\n \n ~~~~\n@@ -421,8 +396,7 @@ Symbols are a general class of printable [token](#tokens) that play structural\n roles in a variety of grammar productions. They are catalogued here for\n completeness as the set of remaining miscellaneous printable tokens that do not\n otherwise appear as [unary operators](#unary-operator-expressions), [binary\n-operators](#binary-operator-expressions), [keywords](#keywords) or [reserved\n-words](#reserved-words).\n+operators](#binary-operator-expressions), or [keywords](#keywords).\n \n \n ## Paths\n@@ -1431,9 +1405,9 @@ rec_expr : '{' ident ':' expr\n \n A _[record](#record-types) expression_ is one or more comma-separated\n name-value pairs enclosed by braces. A fieldname can be any identifier\n-(including reserved words), and is separated from its value expression\n-by a colon. To indicate that a field is mutable, the `mutable` keyword\n-is written before its name.\n+(including keywords), and is separated from its value expression by a\n+colon. To indicate that a field is mutable, the `mutable` keyword is\n+written before its name.\n \n ~~~~\n {x: 10f, y: 20f};"}, {"sha": "33b6432a09cbbca4482da5cf59572f9547e8ad2c", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87a488048d59dcdcfe191c1cfcaaf1684416eb27/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a488048d59dcdcfe191c1cfcaaf1684416eb27/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=87a488048d59dcdcfe191c1cfcaaf1684416eb27", "patch": "@@ -147,12 +147,12 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n // interpreted as a specific kind of statement, which would be confusing.\n fn bad_expr_word_table() -> hashmap<str, ()> {\n     let words = new_str_hash();\n-    for word in [\"mod\", \"if\", \"else\", \"while\", \"do\", \"alt\", \"for\", \"break\",\n-                 \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n-                 \"assert\", \"claim\", \"native\", \"fn\", \"pure\",\n-                 \"unsafe\", \"import\", \"export\", \"let\", \"const\",\n-                 \"log\", \"copy\", \"impl\", \"iface\", \"enum\",\n-                 \"class\", \"trait\"] {\n+    for word in [\"alt\", \"assert\", \"be\", \"break\", \"check\", \"claim\",\n+                 \"class\", \"const\", \"cont\", \"copy\", \"do\", \"else\", \"enum\",\n+                 \"export\", \"fail\", \"fn\", \"for\", \"if\",  \"iface\", \"impl\",\n+                 \"import\", \"let\", \"log\", \"mod\", \"mutable\", \"native\", \"pure\",\n+                 \"resource\", \"ret\", \"trait\", \"type\", \"unchecked\", \"unsafe\",\n+                 \"while\"] {\n         words.insert(word, ());\n     }\n     words"}]}