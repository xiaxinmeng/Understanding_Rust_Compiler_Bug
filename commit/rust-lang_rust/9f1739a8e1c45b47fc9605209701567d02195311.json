{"sha": "9f1739a8e1c45b47fc9605209701567d02195311", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMTczOWE4ZTFjNDViNDdmYzk2MDUyMDk3MDE1NjdkMDIxOTUzMTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-22T21:31:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-23T17:10:36Z"}, "message": "std: Fix all code examples", "tree": {"sha": "714b4caac025aa6002b6fd329e330a2c3602473a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/714b4caac025aa6002b6fd329e330a2c3602473a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1739a8e1c45b47fc9605209701567d02195311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1739a8e1c45b47fc9605209701567d02195311", "html_url": "https://github.com/rust-lang/rust/commit/9f1739a8e1c45b47fc9605209701567d02195311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1739a8e1c45b47fc9605209701567d02195311/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9c045064bd74a00d9d98add6cb66a4bf2ad76e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9c045064bd74a00d9d98add6cb66a4bf2ad76e", "html_url": "https://github.com/rust-lang/rust/commit/6c9c045064bd74a00d9d98add6cb66a4bf2ad76e"}], "stats": {"total": 237, "additions": 147, "deletions": 90}, "files": [{"sha": "a7e502be32e613ad5c704f72d9a512182acd3f67", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -51,13 +51,13 @@ let my_string = \"Hello, world!\";\n let my_c_string = my_string.to_c_str();\n my_c_string.with_ref(|c_buffer| {\n     unsafe { puts(c_buffer); }\n-})\n+});\n \n // Don't save off the allocation of the C string, the `c_buffer` will be\n // deallocated when this block returns!\n my_string.with_c_str(|c_buffer| {\n     unsafe { puts(c_buffer); }\n-})\n+});\n  ```\n \n */\n@@ -216,7 +216,11 @@ pub trait ToCStr {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let s = \"PATH\".with_c_str(|path| libc::getenv(path))\n+    /// use std::libc;\n+    ///\n+    /// let s = \"PATH\".with_c_str(|path| unsafe {\n+    ///     libc::getenv(path)\n+    /// });\n     /// ```\n     ///\n     /// # Failure"}, {"sha": "05aab2f9570a896d8c5e01f2bceac4a0235d7aaa", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -49,7 +49,9 @@ pub unsafe fn bump_box_refcount<T>(t: @T) { forget(t); }\n  * # Example\n  *\n  * ```rust\n- * let v: &[u8] = transmute(\"L\");\n+ * use std::cast;\n+ *\n+ * let v: &[u8] = unsafe { cast::transmute(\"L\") };\n  * assert!(v == [76u8]);\n  * ```\n  */"}, {"sha": "33d5d48ebdcae925035f9c3681e6027eb11e7525", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -57,7 +57,7 @@\n //!\n //! # Example\n //!\n-//! ```rust\n+//! ```rust,should_fail\n //! // Create a simple streaming channel\n //! let (port, chan) = Chan::new();\n //! do spawn {\n@@ -81,7 +81,7 @@\n //!\n //! // The call to recv() will fail!() because the channel has already hung\n //! // up (or been deallocated)\n-//! let (port, chan) = Chan::new();\n+//! let (port, chan) = Chan::<int>::new();\n //! drop(chan);\n //! port.recv();\n //! ```"}, {"sha": "9c59a93608563aa3f43da1459882ed32456903ac", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -25,7 +25,7 @@\n //!\n //! # Example\n //!\n-//! ```rust\n+//! ```rust,notest\n //! let (mut p1, c1) = Chan::new();\n //! let (mut p2, c2) = Chan::new();\n //!\n@@ -40,6 +40,7 @@\n //!         assert_eq!(val, 2);\n //!     }\n //! )\n+//! ```\n \n #[allow(dead_code)];\n "}, {"sha": "2ecae8e85d0a38d24b315e3972e6904ea353709c", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -23,13 +23,17 @@ A condition is declared through the `condition!` macro provided by the compiler:\n condition! {\n     pub my_error: int -> ~str;\n }\n- ```\n+# fn main() {}\n+```\n \n This macro declares an inner module called `my_error` with one static variable,\n `cond` that is a static `Condition` instance. To help understand what the other\n parameters are used for, an example usage of this condition would be:\n \n ```rust\n+# condition! { pub my_error: int -> ~str; }\n+# fn main() {\n+\n my_error::cond.trap(|raised_int| {\n \n     // the condition `my_error` was raised on, and the value it raised is stored\n@@ -51,6 +55,8 @@ my_error::cond.trap(|raised_int| {\n     println(my_error::cond.raise(4)); // prints \"oh well\"\n \n })\n+\n+# }\n  ```\n \n Condition handling is useful in cases where propagating errors is either to\n@@ -99,10 +105,12 @@ impl<T, U> Condition<T, U> {\n     /// ```rust\n     /// condition! { my_error: int -> int; }\n     ///\n+    /// # fn main() {\n     /// let trap = my_error::cond.trap(|error| error + 3);\n     ///\n     /// // use `trap`'s inside method to register the handler and then run a\n     /// // block of code with the handler registered\n+    /// # }\n     /// ```\n     pub fn trap<'a>(&'a self, h: 'a |T| -> U) -> Trap<'a, T, U> {\n         let h: Closure = unsafe { ::cast::transmute(h) };\n@@ -176,10 +184,12 @@ impl<'a, T, U> Trap<'a, T, U> {\n     /// ```rust\n     /// condition! { my_error: int -> int; }\n     ///\n+    /// # fn main() {\n     /// let result = my_error::cond.trap(|error| error + 3).inside(|| {\n     ///     my_error::cond.raise(4)\n     /// });\n     /// assert_eq!(result, 7);\n+    /// # }\n     /// ```\n     pub fn inside<V>(&self, inner: 'a || -> V) -> V {\n         let _g = Guard { cond: self.cond };"}, {"sha": "e4d45fddacb222eea0100d5773c958936697fd9c", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -34,12 +34,12 @@ arguments directly while performing minimal allocations.\n Some examples of the `format!` extension are:\n \n ```rust\n-format!(\"Hello\")                  // => ~\"Hello\"\n-format!(\"Hello, {:s}!\", \"world\")  // => ~\"Hello, world!\"\n-format!(\"The number is {:d}\", 1)  // => ~\"The number is 1\"\n-format!(\"{:?}\", ~[3, 4])          // => ~\"~[3, 4]\"\n-format!(\"{value}\", value=4)       // => ~\"4\"\n-format!(\"{} {}\", 1, 2)            // => ~\"1 2\"\n+format!(\"Hello\");                 // => ~\"Hello\"\n+format!(\"Hello, {:s}!\", \"world\"); // => ~\"Hello, world!\"\n+format!(\"The number is {:d}\", 1); // => ~\"The number is 1\"\n+format!(\"{:?}\", ~[3, 4]);         // => ~\"~[3, 4]\"\n+format!(\"{value}\", value=4);      // => ~\"4\"\n+format!(\"{} {}\", 1, 2);           // => ~\"1 2\"\n ```\n \n From these, you can see that the first argument is a format string. It is\n@@ -62,7 +62,7 @@ iterator over the argument. Each time a \"next argument\" specifier is seen, the\n iterator advances. This leads to behavior like this:\n \n ```rust\n-format!(\"{1} {} {0} {}\", 1, 2) // => ~\"2 1 1 2\"\n+format!(\"{1} {} {0} {}\", 1, 2); // => ~\"2 1 1 2\"\n ```\n \n The internal iterator over the argument has not been advanced by the time the\n@@ -89,9 +89,9 @@ identifier '=' expression\n For example, the following `format!` expressions all use named argument:\n \n ```rust\n-format!(\"{argument}\", argument = \"test\")       // => ~\"test\"\n-format!(\"{name} {}\", 1, name = 2)              // => ~\"2 1\"\n-format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3) // => ~\"a 3 ()\"\n+format!(\"{argument}\", argument = \"test\");       // => ~\"test\"\n+format!(\"{name} {}\", 1, name = 2);              // => ~\"2 1\"\n+format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3); // => ~\"a 3 ()\"\n ```\n \n It is illegal to put positional parameters (those without names) after arguments\n@@ -160,7 +160,11 @@ When implementing a format trait for your own time, you will have to implement a\n method of the signature:\n \n ```rust\n+# use std;\n+# struct T;\n+# trait SomeName<T> {\n fn fmt(value: &T, f: &mut std::fmt::Formatter);\n+# }\n ```\n \n Your type will be passed by-reference in `value`, and then the function should\n@@ -218,7 +222,7 @@ fn main() {\n There are a number of related macros in the `format!` family. The ones that are\n currently implemented are:\n \n-```rust\n+```rust,notest\n format!      // described above\n write!       // first argument is a &mut io::Writer, the destination\n writeln!     // same as write but appends a newline\n@@ -261,9 +265,13 @@ references information on the stack. Under the hood, all of\n the related macros are implemented in terms of this. First\n off, some example usage is:\n \n-```rust\n+```rust,ignore\n use std::fmt;\n \n+# fn lol<T>() -> T { fail!() }\n+# let my_writer: &mut ::std::io::Writer = lol();\n+# let my_fn: fn(&fmt::Arguments) = lol();\n+\n format_args!(fmt::format, \"this returns {}\", \"~str\");\n format_args!(|args| { fmt::write(my_writer, args) }, \"some {}\", \"args\");\n format_args!(my_fn, \"format {}\", \"string\");\n@@ -305,7 +313,7 @@ to reference the string value of the argument which was selected upon. As an\n example:\n \n ```rust\n-format!(\"{0, select, other{#}}\", \"hello\") // => ~\"hello\"\n+format!(\"{0, select, other{#}}\", \"hello\"); // => ~\"hello\"\n ```\n \n This example is the equivalent of `{0:s}` essentially.\n@@ -585,7 +593,9 @@ pub trait Float { fn fmt(&Self, &mut Formatter); }\n ///\n /// ```rust\n /// use std::fmt;\n-/// let w: &mut io::Writer = ...;\n+/// use std::io;\n+///\n+/// let w = &mut io::stdout() as &mut io::Writer;\n /// format_args!(|args| { fmt::write(w, args) }, \"Hello, {}!\", \"world\");\n /// ```\n pub fn write(output: &mut io::Writer, args: &Arguments) {\n@@ -650,8 +660,9 @@ pub unsafe fn write_unsafe(output: &mut io::Writer,\n ///\n /// ```rust\n /// use std::fmt;\n+///\n /// let s = format_args!(fmt::format, \"Hello, {}!\", \"world\");\n-/// assert_eq!(s, \"Hello, world!\");\n+/// assert_eq!(s, ~\"Hello, world!\");\n /// ```\n pub fn format(args: &Arguments) -> ~str {\n     unsafe { format_unsafe(args.fmt, args.args) }"}, {"sha": "03a656ec2c53faa68bde2b35d7962faaa40f4d58", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -26,6 +26,9 @@ Some examples of obvious things you might want to do\n * Read lines from stdin\n \n     ```rust\n+    use std::io::buffered::BufferedReader;\n+    use std::io::stdin;\n+\n     let mut stdin = BufferedReader::new(stdin());\n     for line in stdin.lines() {\n         print(line);\n@@ -35,19 +38,26 @@ Some examples of obvious things you might want to do\n * Read a complete file\n \n     ```rust\n+    use std::io::File;\n+\n     let contents = File::open(&Path::new(\"message.txt\")).read_to_end();\n     ```\n \n * Write a line to a file\n \n     ```rust\n+    use std::io::File;\n+\n     let mut file = File::create(&Path::new(\"message.txt\"));\n     file.write(bytes!(\"hello, file!\\n\"));\n     ```\n \n * Iterate over the lines of a file\n \n     ```rust\n+    use std::io::buffered::BufferedReader;\n+    use std::io::File;\n+\n     let path = Path::new(\"message.txt\");\n     let mut file = BufferedReader::new(File::open(&path));\n     for line in file.lines() {\n@@ -58,6 +68,9 @@ Some examples of obvious things you might want to do\n * Pull the lines of a file into a vector of strings\n \n     ```rust\n+    use std::io::buffered::BufferedReader;\n+    use std::io::File;\n+\n     let path = Path::new(\"message.txt\");\n     let mut file = BufferedReader::new(File::open(&path));\n     let lines: ~[~str] = file.lines().collect();\n@@ -67,7 +80,10 @@ Some examples of obvious things you might want to do\n   XXX This needs more improvement: TcpStream constructor taking &str,\n   `write_str` and `write_line` methods.\n \n-    ```rust\n+    ```rust,ignore\n+    use std::io::net::ip::SocketAddr;\n+    use std::io::net::tcp::TcpStream;\n+\n     let addr = from_str::<SocketAddr>(\"127.0.0.1:8080\").unwrap();\n     let mut socket = TcpStream::connect(addr).unwrap();\n     socket.write(bytes!(\"GET / HTTP/1.0\\n\\n\"));"}, {"sha": "00d84e22c25b21942872d63929a368ebb550631d", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -60,11 +60,11 @@ pub enum Signum {\n ///\n /// # Example\n ///\n-/// ```rust\n+/// ```rust,ignore\n /// use std::io::signal::{Listener, Interrupt};\n ///\n /// let mut listener = Listener::new();\n-/// listener.register(signal::Interrupt);\n+/// listener.register(Interrupt);\n ///\n /// do spawn {\n ///     loop {"}, {"sha": "9d4a72509e7fa65cdcd46f7d20b331ecccb4578c", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -17,7 +17,7 @@ and create ports which will receive notifications after a period of time.\n \n # Example\n \n-```rust\n+```rust,ignore\n \n use std::io::Timer;\n "}, {"sha": "5ace24dbbee108ea6273bcee01462180627c9d1e", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -218,8 +218,8 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let a = [100, 200, 300];\n-    /// let mut it = xs.iter().map(|&x|x).peekable();\n+    /// let xs = [100, 200, 300];\n+    /// let mut it = xs.iter().map(|x| *x).peekable();\n     /// assert_eq!(it.peek().unwrap(), &100);\n     /// assert_eq!(it.next().unwrap(), 100);\n     /// assert_eq!(it.next().unwrap(), 200);\n@@ -338,12 +338,14 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::iter::count;\n+    ///\n     /// let xs = [2u, 3];\n     /// let ys = [0u, 1, 0, 1, 2];\n     /// let mut it = xs.iter().flat_map(|&x| count(0u, 1).take(x));\n     /// // Check that `it` has the same elements as `ys`\n     /// let mut i = 0;\n-    /// for x: uint in it {\n+    /// for x in it {\n     ///     assert_eq!(x, ys[i]);\n     ///     i += 1;\n     /// }\n@@ -366,7 +368,7 @@ pub trait Iterator<A> {\n     ///     let mut sum = 0;\n     ///     for x in it {\n     ///         if x > 5 {\n-    ///             break;\n+    ///             continue;\n     ///         }\n     ///         sum += x;\n     ///     }\n@@ -391,14 +393,16 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n-    ///let xs = [1u, 4, 2, 3, 8, 9, 6];\n-    ///let sum = xs.iter()\n-    ///            .map(|&x| x)\n-    ///            .inspect(|&x| debug!(\"filtering %u\", x))\n-    ///            .filter(|&x| x % 2 == 0)\n-    ///            .inspect(|&x| debug!(\"%u made it through\", x))\n-    ///            .sum();\n-    ///println(sum.to_str());\n+    /// use std::iter::AdditiveIterator;\n+    ///\n+    /// let xs = [1u, 4, 2, 3, 8, 9, 6];\n+    /// let sum = xs.iter()\n+    ///             .map(|&x| x)\n+    ///             .inspect(|&x| debug!(\"filtering {}\", x))\n+    ///             .filter(|&x| x % 2 == 0)\n+    ///             .inspect(|&x| debug!(\"{} made it through\", x))\n+    ///             .sum();\n+    /// println(sum.to_str());\n     /// ```\n     #[inline]\n     fn inspect<'r>(self, f: 'r |&A|) -> Inspect<'r, A, Self> {\n@@ -554,8 +558,8 @@ pub trait Iterator<A> {\n     ///\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().all(|&x| *x > 0));\n-    /// assert!(!a.iter().all(|&x| *x > 2));\n+    /// assert!(a.iter().all(|x| *x > 0));\n+    /// assert!(!a.iter().all(|x| *x > 2));\n     /// ```\n     #[inline]\n     fn all(&mut self, f: |A| -> bool) -> bool {\n@@ -571,8 +575,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n-    /// assert!(it.any(|&x| *x == 3));\n-    /// assert!(!it.any(|&x| *x == 3));\n+    /// assert!(it.any(|x| *x == 3));\n+    /// assert!(!it.any(|x| *x == 3));\n     /// ```\n     #[inline]\n     fn any(&mut self, f: |A| -> bool) -> bool {\n@@ -618,7 +622,7 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let xs = [-3, 0, 1, 5, -10];\n+    /// let xs = [-3i, 0, 1, 5, -10];\n     /// assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n     #[inline]\n@@ -642,7 +646,7 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let xs = [-3, 0, 1, 5, -10];\n+    /// let xs = [-3i, 0, 1, 5, -10];\n     /// assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```\n     #[inline]\n@@ -811,6 +815,8 @@ pub trait AdditiveIterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::iter::AdditiveIterator;\n+    ///\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().map(|&x| x);\n     /// assert!(it.sum() == 15);\n@@ -834,7 +840,7 @@ pub trait MultiplicativeIterator<A> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::iter::count;\n+    /// use std::iter::{count, MultiplicativeIterator};\n     ///\n     /// fn factorial(n: uint) -> uint {\n     ///     count(1u, 1).take_while(|&i| i <= n).product()\n@@ -907,6 +913,8 @@ pub trait ClonableIterator {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::iter::{ClonableIterator, count};\n+    ///\n     /// let a = count(1,1).take(1);\n     /// let mut cy = a.cycle();\n     /// assert_eq!(cy.next(), Some(1));"}, {"sha": "652aa4d8198a26c4202d707d493189859be39244", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -29,10 +29,10 @@ local_data_key!(key_int: int)\n local_data_key!(key_vector: ~[int])\n \n local_data::set(key_int, 3);\n-local_data::get(key_int, |opt| assert_eq!(opt, Some(&3)));\n+local_data::get(key_int, |opt| assert_eq!(opt.map(|x| *x), Some(3)));\n \n local_data::set(key_vector, ~[4]);\n-local_data::get(key_vector, |opt| assert_eq!(opt, Some(&~[4])));\n+local_data::get(key_vector, |opt| assert_eq!(*opt.unwrap(), ~[4]));\n  ```\n \n */"}, {"sha": "59e57a8680d8ff8fbc268ceba935f2edaac04ab8", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -78,7 +78,7 @@ error,hello=warn     // turn on global error logging and also warn for hello\n \n Each of these macros will expand to code similar to:\n \n-```rust\n+```rust,notest\n if log_level <= my_module_log_level() {\n     ::std::logging::log(log_level, format!(...));\n }"}, {"sha": "2cb7d527618e6acb65deb9fcde6408feb2ed6fec", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -339,7 +339,8 @@ impl Round for f32 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```rust\n-    /// assert!(x == trunc(x) + fract(x))\n+    /// let x = 1.65f32;\n+    /// assert!(x == x.trunc() + x.fract())\n     /// ```\n     ///\n     #[inline]"}, {"sha": "1f01c26ad76f347ef0e8bd9ff9e51a2892845f72", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -357,7 +357,8 @@ impl Round for f64 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```rust\n-    /// assert!(x == trunc(x) + fract(x))\n+    /// let x = 1.65f64;\n+    /// assert!(x == x.trunc() + x.fract())\n     /// ```\n     ///\n     #[inline]"}, {"sha": "0f81a5faac8115341734337fbe9434ae9352f2b1", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -101,8 +101,7 @@ pub trait Unsigned: Num {}\n /// Times trait\n ///\n /// ```rust\n-/// use num::Times;\n-/// let ten = 10 as uint;\n+/// let ten = 10u;\n /// let mut accum = 0;\n /// ten.times(|| { accum += 1; })\n /// ```\n@@ -176,10 +175,10 @@ pub trait Round {\n     /// # Example\n     ///\n     /// ```rust\n-    /// assert_approx_eq!(1.3f32.round(), 1.0);\n-    /// assert_approx_eq!((-1.3f32).round(), -1.0);\n-    /// assert_approx_eq!(1.5f32.round(), 1.0);\n-    /// assert_approx_eq!((-1.5f32).round(), -1.0);\n+    /// assert_approx_eq!(1.3f32.trunc(), 1.0);\n+    /// assert_approx_eq!((-1.3f32).trunc(), -1.0);\n+    /// assert_approx_eq!(1.5f32.trunc(), 1.0);\n+    /// assert_approx_eq!((-1.5f32).trunc(), -1.0);\n     /// ```\n     fn trunc(&self) -> Self;\n \n@@ -188,10 +187,10 @@ pub trait Round {\n     /// # Example\n     ///\n     /// ```rust\n-    /// assert_approx_eq!(1.3f32.round(), 0.3);\n-    /// assert_approx_eq!((-1.3f32).round(), -0.3);\n-    /// assert_approx_eq!(1.5f32.round(), 0.5);\n-    /// assert_approx_eq!((-1.5f32).round(), -0.5);\n+    /// assert_approx_eq!(1.3f32.fract(), 0.3);\n+    /// assert_approx_eq!((-1.3f32).fract(), -0.3);\n+    /// assert_approx_eq!(1.5f32.fract(), 0.5);\n+    /// assert_approx_eq!((-1.5f32).fract(), -0.5);\n     /// ```\n     fn fract(&self) -> Self;\n }\n@@ -225,7 +224,9 @@ pub trait Algebraic {\n /// # Example\n ///\n /// ```rust\n-/// let sixteen: float = num::pow(2.0, 4.0);\n+/// use std::num;\n+///\n+/// let sixteen: f64 = num::pow(2.0, 4.0);\n /// assert_eq!(sixteen, 16.0);\n /// ```\n #[inline(always)] pub fn pow<T: Algebraic>(value: T, n: T) -> T { value.pow(&n) }\n@@ -266,6 +267,8 @@ pub trait Trigonometric {\n     /// # Example\n     ///\n     /// ```rust\n+    /// use std::f32;\n+    ///\n     /// let y = 3f32.sqrt();\n     /// let x = 1f32;\n     /// assert_approx_eq!(y.atan2(&x), f32::consts::PI / 3f32);"}, {"sha": "6488595ea4f92ddd4a0183687d2e77b42bc02138", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -54,12 +54,11 @@ actually operates on the path; it is only intended for display.\n \n ```rust\n let mut path = Path::new(\"/tmp/path\");\n-debug!(\"path: {}\", path.display());\n+println!(\"path: {}\", path.display());\n path.set_filename(\"foo\");\n path.push(\"bar\");\n-debug!(\"new path: {}\", path.display());\n-let b = std::os::path_exists(&path);\n-debug!(\"path exists: {}\", b);\n+println!(\"new path: {}\", path.display());\n+println!(\"path exists: {}\", path.exists());\n ```\n \n */"}, {"sha": "36acae9133c28bd9accf6ec99d31f5c24d614410", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -39,7 +39,7 @@ use num;\n ///\n /// fn main() {\n ///     let gamma = Gamma::new(2.0, 5.0);\n-///     let v = gamma.ind_sample(rand::task_rng());\n+///     let v = gamma.ind_sample(&mut rand::task_rng());\n ///     println!(\"{} is from a Gamma(2, 5) distribution\", v);\n /// }\n /// ```"}, {"sha": "f13f840df402e44c5df660611984c6f2c10ede16", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -98,10 +98,10 @@ pub struct Weighted<T> {\n ///     let wc = WeightedChoice::new(~[Weighted { weight: 2, item: 'a' },\n ///                                    Weighted { weight: 4, item: 'b' },\n ///                                    Weighted { weight: 1, item: 'c' }]);\n-///     let rng = rand::task_rng();\n+///     let mut rng = rand::task_rng();\n ///     for _ in range(0, 16) {\n ///          // on average prints 'a' 4 times, 'b' 8 and 'c' twice.\n-///          println!(\"{}\", wc.ind_sample(rng));\n+///          println!(\"{}\", wc.ind_sample(&mut rng));\n ///     }\n /// }\n /// ```"}, {"sha": "8b769c113c9d3468a631fe3c05a35d6d6eea70b9", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -123,7 +123,7 @@ impl IndependentSample<f64> for Normal {\n /// fn main() {\n ///     // mean 2, standard deviation 3\n ///     let log_normal = LogNormal::new(2.0, 3.0);\n-///     let v = normal.ind_sample(&mut rand::task_rng());\n+///     let v = log_normal.ind_sample(&mut rand::task_rng());\n ///     println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// }\n /// ```"}, {"sha": "fc6cdde162df4b3754d98bc446436522dcbcad95", "filename": "src/libstd/rand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -39,10 +39,10 @@ use rand::distributions::{Sample, IndependentSample};\n ///\n /// fn main() {\n ///     let between = Range::new(10u, 10000u);\n-///     let rng = rand::task_rng();\n+///     let mut rng = rand::task_rng();\n ///     let mut sum = 0;\n ///     for _ in range(0, 1000) {\n-///         sum += between.ind_sample(rng);\n+///         sum += between.ind_sample(&mut rng);\n ///     }\n ///     println!(\"{}\", sum);\n /// }"}, {"sha": "76bb6723a2ee3cdd92ab6bbe00a1b533666dec59", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -64,7 +64,7 @@ use std::rand;\n \n fn main () {\n     let tuple_ptr = rand::random::<~(f64, char)>();\n-    println!(tuple_ptr)\n+    println!(\"{:?}\", tuple_ptr)\n }\n  ```\n */\n@@ -227,7 +227,7 @@ pub trait Rng {\n     ///    let mut rng = rand::task_rng();\n     ///    let n: uint = rng.gen_range(0u, 10);\n     ///    println!(\"{}\", n);\n-    ///    let m: float = rng.gen_range(-40.0, 1.3e5);\n+    ///    let m: f64 = rng.gen_range(-40.0, 1.3e5);\n     ///    println!(\"{}\", m);\n     /// }\n     /// ```\n@@ -292,8 +292,10 @@ pub trait Rng {\n     /// use std::rand::Rng;\n     ///\n     /// fn main() {\n-    ///     println!(\"{:?}\", rand::task_rng().choose_option([1,2,4,8,16,32]));\n-    ///     println!(\"{:?}\", rand::task_rng().choose_option([]));\n+    ///     let choices = [1, 2, 4, 8, 16, 32];\n+    ///     let mut rng = rand::task_rng();\n+    ///     println!(\"{:?}\", rng.choose_option(choices));\n+    ///     println!(\"{:?}\", rng.choose_option(choices.slice_to(0)));\n     /// }\n     /// ```\n     fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {\n@@ -388,11 +390,10 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand;\n-    /// use std::rand::Rng;\n+    /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// fn main() {\n-    ///     let mut rng: rand::StdRng = rand::SeedableRng::from_seed(&[1, 2, 3, 4]);\n+    ///     let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n     ///     println!(\"{}\", rng.gen::<f64>());\n     ///     rng.reseed([5, 6, 7, 8]);\n     ///     println!(\"{}\", rng.gen::<f64>());"}, {"sha": "2f5ef932a18e6bd763c5caab0031499a4b2949c5", "filename": "src/libstd/str.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -1458,10 +1458,10 @@ pub trait StrSlice<'a> {\n     /// let v: ~[(uint, uint)] = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, ~[(0,3), (6,9), (12,15)]);\n     ///\n-    /// let v: ~[(uint, uint)] = \"1abcabc2\".split_str(\"abc\").collect();\n+    /// let v: ~[(uint, uint)] = \"1abcabc2\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, ~[(1,4), (4,7)]);\n     ///\n-    /// let v: ~[(uint, uint)] = \"ababa\".split_str(\"aba\").collect();\n+    /// let v: ~[(uint, uint)] = \"ababa\".match_indices(\"aba\").collect();\n     /// assert_eq!(v, ~[(0, 3)]); // only the first `aba`\n     /// ```\n     fn match_indices(&self, sep: &'a str) -> MatchesIndexIterator<'a>;\n@@ -1536,7 +1536,7 @@ pub trait StrSlice<'a> {\n     /// assert!(\" \\t\\n\".is_whitespace());\n     /// assert!(\"\".is_whitespace());\n     ///\n-    /// assert!( !\"abc.is_whitespace());\n+    /// assert!( !\"abc\".is_whitespace());\n     /// ```\n     fn is_whitespace(&self) -> bool;\n \n@@ -1606,7 +1606,7 @@ pub trait StrSlice<'a> {\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// assert_eq!(s.slice(0, 1), \"L\");\n     ///\n-    /// assert_eq!(s.slice(1, 9), \"\u00f6we \u8001\"));\n+    /// assert_eq!(s.slice(1, 9), \"\u00f6we \u8001\");\n     ///\n     /// // these will fail:\n     /// // byte 2 lies within `\u00f6`:\n@@ -1808,6 +1808,8 @@ pub trait StrSlice<'a> {\n     /// `.char_indices`.\n     ///\n     /// ```rust\n+    /// use std::str::CharRange;\n+    ///\n     /// let s = \"\u4e2d\u534eVi\u1ec7t Nam\";\n     /// let mut i = 0u;\n     /// while i < s.len() {\n@@ -1949,11 +1951,11 @@ pub trait StrSlice<'a> {\n     ///\n     /// ```rust\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n-    /// let (c, s1) = s.shift_slice_char();\n+    /// let (c, s1) = s.slice_shift_char();\n     /// assert_eq!(c, 'L');\n     /// assert_eq!(s1, \"\u00f6we \u8001\u864e L\u00e9opard\");\n     ///\n-    /// let (c, s2) = s1.shift_slice_char();\n+    /// let (c, s2) = s1.slice_shift_char();\n     /// assert_eq!(c, '\u00f6');\n     /// assert_eq!(s2, \"we \u8001\u864e L\u00e9opard\");\n     /// ```"}, {"sha": "97d4c2f6d1b154a4c9b38fd61be47adc8716a85c", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1739a8e1c45b47fc9605209701567d02195311/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9f1739a8e1c45b47fc9605209701567d02195311", "patch": "@@ -2174,12 +2174,12 @@ pub trait MutableVector<'a, T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = [5, 4, 1, 3, 2];\n-    /// v.sort(|a, b| a.cmp(b));\n+    /// let mut v = [5i, 4, 1, 3, 2];\n+    /// v.sort_by(|a, b| a.cmp(b));\n     /// assert_eq!(v, [1, 2, 3, 4, 5]);\n     ///\n     /// // reverse sorting\n-    /// v.sort(|a, b| b.cmp(a));\n+    /// v.sort_by(|a, b| b.cmp(a));\n     /// assert_eq!(v, [5, 4, 3, 2, 1]);\n     /// ```\n     fn sort_by(self, compare: |&T, &T| -> Ordering);\n@@ -2395,8 +2395,6 @@ pub trait MutableTotalOrdVector<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::vec;\n-    ///\n     /// let mut v = [-5, 4, 1, -3, 2];\n     ///\n     /// v.sort();"}]}