{"sha": "5b802ed6c9fd23214f9201b8e05193c8a2240e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODAyZWQ2YzlmZDIzMjE0ZjkyMDFiOGUwNTE5M2M4YTIyNDBlNzM=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "77335613+ABouttefeux@users.noreply.github.com", "date": "2021-05-22T06:59:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-22T06:59:04Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Esteban Kuber <estebank@users.noreply.github.com>", "tree": {"sha": "5ecab20ddc268c5aa740d104d6d972ac11371d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ecab20ddc268c5aa740d104d6d972ac11371d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b802ed6c9fd23214f9201b8e05193c8a2240e73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqKu4CRBK7hj4Ov3rIwAAVCkIAHSP5yul8yepKqtk2K6E37NC\nCBZebeCmgQn9u7CkQP7Oe3YoA4IYVkh+QgYQpsqX7+r3/Qg7w6Py5vb4tAmJRZ+2\n+shvdHeIbfA7GMKSbPLvNTnTuUJp6HS2cpW1q8aZvxBu4hkPf5JxVpUkeeJ9iAxG\niWsci2n3Z0qPTo94SPuP9hfsIk7O+z/kAFdhVjZMpe4y7NXPG0qtlSSdNsA1qj1v\n81PyMLvsJapxmaeX/7UPdvzd/7DCaryrMgm41SPcFWL2ywW7+Wjlie5P7x4/Gwpo\nRglugpIHjLAKYkleOCsemPTO54D0Qzbn+3T1ZpflD8FgeUE1Chf3unzMniPp2kQ=\n=M+pS\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ecab20ddc268c5aa740d104d6d972ac11371d01\nparent 6efa14b3add08188c5322db8694a8cbbea7851e5\nauthor Ali\u00e9nore Bouttefeux <77335613+ABouttefeux@users.noreply.github.com> 1621666744 +0200\ncommitter GitHub <noreply@github.com> 1621666744 +0200\n\nApply suggestions from code review\n\nCo-authored-by: Esteban Kuber <estebank@users.noreply.github.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b802ed6c9fd23214f9201b8e05193c8a2240e73", "html_url": "https://github.com/rust-lang/rust/commit/5b802ed6c9fd23214f9201b8e05193c8a2240e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b802ed6c9fd23214f9201b8e05193c8a2240e73/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6efa14b3add08188c5322db8694a8cbbea7851e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6efa14b3add08188c5322db8694a8cbbea7851e5", "html_url": "https://github.com/rust-lang/rust/commit/6efa14b3add08188c5322db8694a8cbbea7851e5"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "a36e0553c7addb6c67cec44143e06babd9538c92", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b802ed6c9fd23214f9201b8e05193c8a2240e73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b802ed6c9fd23214f9201b8e05193c8a2240e73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5b802ed6c9fd23214f9201b8e05193c8a2240e73", "patch": "@@ -384,7 +384,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         span = item_name.span;\n \n-                        // issue #81576, elision of generic argument when no methode can be found in any implementation\n+                        // Don't show generic arguments when the method can't be found in any implementation (#81576).\n                         let mut ty_str_reported = ty_str.clone();\n                         if let ty::Adt(_, ref generics) = actual.kind() {\n                             if generics.len() > 0 {\n@@ -493,22 +493,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         self.associated_item(*def_id, item_name, Namespace::ValueNS)\n                                     {\n                                         // Check for both mode is the same so we avoid suggesting\n-                                        // incorect associated item.\n-                                        match (mode, assoc.fn_has_self_parameter) {\n-                                            (Mode::MethodCall, true) => {\n-                                                if let SelfSource::MethodCall(_) = source {\n-                                                    // We check that the suggest type is actually\n-                                                    // different from the received one\n-                                                    // So we avoid suggestion method with Box<Self>\n-                                                    // for instance\n-                                                    self.tcx.at(span).type_of(*def_id) != actual\n-                                                        && self.tcx.at(span).type_of(*def_id)\n-                                                            != rcvr_ty\n-                                                } else {\n-                                                    false\n-                                                }\n+                                        // incorrect associated item.\n+                                        match (mode, assoc.fn_has_self_parameter, source) {\n+                                            (Mode::MethodCall, true, SelfSource::MethodCall(_)) => {\n+                                                // We check that the suggest type is actually\n+                                                // different from the received one\n+                                                // So we avoid suggestion method with Box<Self>\n+                                                // for instance\n+                                                self.tcx.at(span).type_of(*def_id) != actual\n+                                                    && self.tcx.at(span).type_of(*def_id)\n+                                                        != rcvr_ty\n                                             }\n-                                            (Mode::Path, false) => true,\n+                                            (Mode::Path, false, _) => true,\n                                             _ => false,\n                                         }\n                                     } else {\n@@ -521,7 +517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 inherent_impls_candidate.dedup();\n                                 // number of type to shows at most.\n                                 const LIMIT: usize = 3;\n-                                let mut note = format!(\"The {item_kind} was found for\");\n+                                let mut note = format!(\"the {item_kind} was found for\");\n                                 if inherent_impls_candidate.len() > 1 {\n                                     for impl_item in inherent_impls_candidate.iter().take(LIMIT - 2)\n                                     {"}]}