{"sha": "aea2e446f09b923d513013743b37b43fca7282dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTJlNDQ2ZjA5YjkyM2Q1MTMwMTM3NDNiMzdiNDNmY2E3MjgyZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T05:59:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T05:59:30Z"}, "message": "Auto merge of #86735 - jhpratt:rfc-3107, r=petrochenkov\n\nImplement RFC 3107: `#[derive(Default)]` on enums with a `#[default]` attribute\n\nThis PR implements RFC 3107, which permits `#[derive(Default)]` on enums where a unit variant has a `#[default]` attribute. See comments for current status.", "tree": {"sha": "ac53a52123dd478795393e478e43608b98871609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac53a52123dd478795393e478e43608b98871609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea2e446f09b923d513013743b37b43fca7282dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea2e446f09b923d513013743b37b43fca7282dc", "html_url": "https://github.com/rust-lang/rust/commit/aea2e446f09b923d513013743b37b43fca7282dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea2e446f09b923d513013743b37b43fca7282dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b50cc9a2c408caef30a1cf950c948509b2f648e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b50cc9a2c408caef30a1cf950c948509b2f648e", "html_url": "https://github.com/rust-lang/rust/commit/8b50cc9a2c408caef30a1cf950c948509b2f648e"}, {"sha": "72465b0a32e689cd6a61120479c13b38281108a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/72465b0a32e689cd6a61120479c13b38281108a7", "html_url": "https://github.com/rust-lang/rust/commit/72465b0a32e689cd6a61120479c13b38281108a7"}], "stats": {"total": 577, "additions": 506, "deletions": 71}, "files": [{"sha": "8c53094b6249669d0ef78dd9b80ed48a3f242d39", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 230, "deletions": 27, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -2,11 +2,16 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n \n use rustc_ast::ptr::P;\n+use rustc_ast::walk_list;\n+use rustc_ast::EnumDef;\n+use rustc_ast::VariantData;\n use rustc_ast::{Expr, MetaItem};\n-use rustc_errors::struct_span_err;\n+use rustc_errors::Applicability;\n use rustc_expand::base::{Annotatable, DummyResult, ExtCtxt};\n+use rustc_span::symbol::Ident;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n+use smallvec::SmallVec;\n \n pub fn expand_deriving_default(\n     cx: &mut ExtCtxt<'_>,\n@@ -15,6 +20,8 @@ pub fn expand_deriving_default(\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n ) {\n+    item.visit_with(&mut DetectNonVariantDefaultAttr { cx });\n+\n     let inline = cx.meta_word(span, sym::inline);\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n@@ -34,53 +41,249 @@ pub fn expand_deriving_default(\n             attributes: attrs,\n             is_unsafe: false,\n             unify_fieldless_variants: false,\n-            combine_substructure: combine_substructure(Box::new(|a, b, c| {\n-                default_substructure(a, b, c)\n+            combine_substructure: combine_substructure(Box::new(|cx, trait_span, substr| {\n+                match substr.fields {\n+                    StaticStruct(_, fields) => {\n+                        default_struct_substructure(cx, trait_span, substr, fields)\n+                    }\n+                    StaticEnum(enum_def, _) => {\n+                        if !cx.sess.features_untracked().derive_default_enum {\n+                            rustc_session::parse::feature_err(\n+                                cx.parse_sess(),\n+                                sym::derive_default_enum,\n+                                span,\n+                                \"deriving `Default` on enums is experimental\",\n+                            )\n+                            .emit();\n+                        }\n+                        default_enum_substructure(cx, trait_span, enum_def)\n+                    }\n+                    _ => cx.span_bug(trait_span, \"method in `derive(Default)`\"),\n+                }\n             })),\n         }],\n         associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-fn default_substructure(\n+fn default_struct_substructure(\n     cx: &mut ExtCtxt<'_>,\n     trait_span: Span,\n     substr: &Substructure<'_>,\n+    summary: &StaticFields,\n ) -> P<Expr> {\n     // Note that `kw::Default` is \"default\" and `sym::Default` is \"Default\"!\n     let default_ident = cx.std_path(&[kw::Default, sym::Default, kw::Default]);\n     let default_call = |span| cx.expr_call_global(span, default_ident.clone(), Vec::new());\n \n-    match *substr.fields {\n-        StaticStruct(_, ref summary) => match *summary {\n-            Unnamed(ref fields, is_tuple) => {\n-                if !is_tuple {\n-                    cx.expr_ident(trait_span, substr.type_ident)\n-                } else {\n-                    let exprs = fields.iter().map(|sp| default_call(*sp)).collect();\n-                    cx.expr_call_ident(trait_span, substr.type_ident, exprs)\n-                }\n+    match summary {\n+        Unnamed(ref fields, is_tuple) => {\n+            if !is_tuple {\n+                cx.expr_ident(trait_span, substr.type_ident)\n+            } else {\n+                let exprs = fields.iter().map(|sp| default_call(*sp)).collect();\n+                cx.expr_call_ident(trait_span, substr.type_ident, exprs)\n+            }\n+        }\n+        Named(ref fields) => {\n+            let default_fields = fields\n+                .iter()\n+                .map(|&(ident, span)| cx.field_imm(span, ident, default_call(span)))\n+                .collect();\n+            cx.expr_struct_ident(trait_span, substr.type_ident, default_fields)\n+        }\n+    }\n+}\n+\n+fn default_enum_substructure(\n+    cx: &mut ExtCtxt<'_>,\n+    trait_span: Span,\n+    enum_def: &EnumDef,\n+) -> P<Expr> {\n+    let default_variant = match extract_default_variant(cx, enum_def, trait_span) {\n+        Ok(value) => value,\n+        Err(()) => return DummyResult::raw_expr(trait_span, true),\n+    };\n+\n+    // At this point, we know that there is exactly one variant with a `#[default]` attribute. The\n+    // attribute hasn't yet been validated.\n+\n+    if let Err(()) = validate_default_attribute(cx, default_variant) {\n+        return DummyResult::raw_expr(trait_span, true);\n+    }\n+\n+    // We now know there is exactly one unit variant with exactly one `#[default]` attribute.\n+\n+    cx.expr_path(cx.path(\n+        default_variant.span,\n+        vec![Ident::new(kw::SelfUpper, default_variant.span), default_variant.ident],\n+    ))\n+}\n+\n+fn extract_default_variant<'a>(\n+    cx: &mut ExtCtxt<'_>,\n+    enum_def: &'a EnumDef,\n+    trait_span: Span,\n+) -> Result<&'a rustc_ast::Variant, ()> {\n+    let default_variants: SmallVec<[_; 1]> = enum_def\n+        .variants\n+        .iter()\n+        .filter(|variant| cx.sess.contains_name(&variant.attrs, kw::Default))\n+        .collect();\n+\n+    let variant = match default_variants.as_slice() {\n+        [variant] => variant,\n+        [] => {\n+            let possible_defaults = enum_def\n+                .variants\n+                .iter()\n+                .filter(|variant| matches!(variant.data, VariantData::Unit(..)))\n+                .filter(|variant| !cx.sess.contains_name(&variant.attrs, sym::non_exhaustive));\n+\n+            let mut diag = cx.struct_span_err(trait_span, \"no default declared\");\n+            diag.help(\"make a unit variant default by placing `#[default]` above it\");\n+            for variant in possible_defaults {\n+                // Suggest making each unit variant default.\n+                diag.tool_only_span_suggestion(\n+                    variant.span,\n+                    &format!(\"make `{}` default\", variant.ident),\n+                    format!(\"#[default] {}\", variant.ident),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n-            Named(ref fields) => {\n-                let default_fields = fields\n+            diag.emit();\n+\n+            return Err(());\n+        }\n+        [first, rest @ ..] => {\n+            let mut diag = cx.struct_span_err(trait_span, \"multiple declared defaults\");\n+            diag.span_label(first.span, \"first default\");\n+            diag.span_labels(rest.iter().map(|variant| variant.span), \"additional default\");\n+            diag.note(\"only one variant can be default\");\n+            for variant in &default_variants {\n+                // Suggest making each variant already tagged default.\n+                let suggestion = default_variants\n                     .iter()\n-                    .map(|&(ident, span)| cx.field_imm(span, ident, default_call(span)))\n+                    .filter_map(|v| {\n+                        if v.ident == variant.ident {\n+                            None\n+                        } else {\n+                            Some((cx.sess.find_by_name(&v.attrs, kw::Default)?.span, String::new()))\n+                        }\n+                    })\n                     .collect();\n-                cx.expr_struct_ident(trait_span, substr.type_ident, default_fields)\n+\n+                diag.tool_only_multipart_suggestion(\n+                    &format!(\"make `{}` default\", variant.ident),\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n-        },\n-        StaticEnum(..) => {\n-            struct_span_err!(\n-                &cx.sess.parse_sess.span_diagnostic,\n-                trait_span,\n-                E0665,\n-                \"`Default` cannot be derived for enums, only structs\"\n+            diag.emit();\n+\n+            return Err(());\n+        }\n+    };\n+\n+    if !matches!(variant.data, VariantData::Unit(..)) {\n+        cx.struct_span_err(\n+            variant.ident.span,\n+            \"the `#[default]` attribute may only be used on unit enum variants\",\n+        )\n+        .help(\"consider a manual implementation of `Default`\")\n+        .emit();\n+\n+        return Err(());\n+    }\n+\n+    if let Some(non_exhaustive_attr) = cx.sess.find_by_name(&variant.attrs, sym::non_exhaustive) {\n+        cx.struct_span_err(variant.ident.span, \"default variant must be exhaustive\")\n+            .span_label(non_exhaustive_attr.span, \"declared `#[non_exhaustive]` here\")\n+            .help(\"consider a manual implementation of `Default`\")\n+            .emit();\n+\n+        return Err(());\n+    }\n+\n+    Ok(variant)\n+}\n+\n+fn validate_default_attribute(\n+    cx: &mut ExtCtxt<'_>,\n+    default_variant: &rustc_ast::Variant,\n+) -> Result<(), ()> {\n+    let attrs: SmallVec<[_; 1]> =\n+        cx.sess.filter_by_name(&default_variant.attrs, kw::Default).collect();\n+\n+    let attr = match attrs.as_slice() {\n+        [attr] => attr,\n+        [] => cx.bug(\n+            \"this method must only be called with a variant that has a `#[default]` attribute\",\n+        ),\n+        [first, rest @ ..] => {\n+            // FIXME(jhpratt) Do we want to perform this check? It doesn't exist\n+            // for `#[inline]`, `#[non_exhaustive]`, and presumably others.\n+\n+            let suggestion_text =\n+                if rest.len() == 1 { \"try removing this\" } else { \"try removing these\" };\n+\n+            cx.struct_span_err(default_variant.ident.span, \"multiple `#[default]` attributes\")\n+                .note(\"only one `#[default]` attribute is needed\")\n+                .span_label(first.span, \"`#[default]` used here\")\n+                .span_label(rest[0].span, \"`#[default]` used again here\")\n+                .span_help(rest.iter().map(|attr| attr.span).collect::<Vec<_>>(), suggestion_text)\n+                // This would otherwise display the empty replacement, hence the otherwise\n+                // repetitive `.span_help` call above.\n+                .tool_only_multipart_suggestion(\n+                    suggestion_text,\n+                    rest.iter().map(|attr| (attr.span, String::new())).collect(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+\n+            return Err(());\n+        }\n+    };\n+    if !attr.is_word() {\n+        cx.struct_span_err(attr.span, \"`#[default]` attribute does not accept a value\")\n+            .span_suggestion_hidden(\n+                attr.span,\n+                \"try using `#[default]`\",\n+                \"#[default]\".into(),\n+                Applicability::MaybeIncorrect,\n             )\n             .emit();\n-            // let compilation continue\n-            DummyResult::raw_expr(trait_span, true)\n+\n+        return Err(());\n+    }\n+    Ok(())\n+}\n+\n+struct DetectNonVariantDefaultAttr<'a, 'b> {\n+    cx: &'a ExtCtxt<'b>,\n+}\n+\n+impl<'a, 'b> rustc_ast::visit::Visitor<'a> for DetectNonVariantDefaultAttr<'a, 'b> {\n+    fn visit_attribute(&mut self, attr: &'a rustc_ast::Attribute) {\n+        if attr.has_name(kw::Default) {\n+            self.cx\n+                .struct_span_err(\n+                    attr.span,\n+                    \"the `#[default]` attribute may only be used on unit enum variants\",\n+                )\n+                .emit();\n+        }\n+\n+        rustc_ast::visit::walk_attribute(self, attr);\n+    }\n+    fn visit_variant(&mut self, v: &'a rustc_ast::Variant) {\n+        self.visit_ident(v.ident);\n+        self.visit_vis(&v.vis);\n+        self.visit_variant_data(&v.data);\n+        walk_list!(self, visit_anon_const, &v.disr_expr);\n+        for attr in &v.attrs {\n+            rustc_ast::visit::walk_attribute(self, attr);\n         }\n-        _ => cx.span_bug(trait_span, \"method in `derive(Default)`\"),\n     }\n }"}, {"sha": "ae54d6d15798de5b77b32b64418e802ef7217947", "filename": "compiler/rustc_error_codes/src/error_codes/E0665.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0665.md", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0665.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0665.md?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n The `Default` trait was derived on an enum.\n \n Erroneous code example:\n \n-```compile_fail,E0665\n+```compile_fail\n #[derive(Default)]\n enum Food {\n     Sweet,"}, {"sha": "3cb1dd170386baa7b7c52116938ffc48d20acdb8", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -677,6 +677,9 @@ declare_features! (\n     /// Infer generic args for both consts and types.\n     (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n \n+    /// Allows `#[derive(Default)]` and `#[default]` on enums.\n+    (active, derive_default_enum, \"1.56.0\", Some(86985), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "5fc773e431c8b74a181503201610b324601ccc3c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -489,6 +489,7 @@ symbols! {\n         deref_mut,\n         deref_target,\n         derive,\n+        derive_default_enum,\n         destructuring_assignment,\n         diagnostic,\n         direct,"}, {"sha": "0fe88222805e5cc57abfb7bb5ce12d134804467e", "filename": "library/core/src/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -161,7 +161,8 @@ pub fn default<T: Default>() -> T {\n }\n \n /// Derive macro generating an impl of the trait `Default`.\n-#[rustc_builtin_macro]\n+#[cfg_attr(not(bootstrap), rustc_builtin_macro(Default, attributes(default)))]\n+#[cfg_attr(bootstrap, rustc_builtin_macro)]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Default($item:item) {"}, {"sha": "931ff1a5847d4784e42ca97ce5eb1d9afdc4aac1", "filename": "src/test/ui/deriving/deriving-default-enum.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(derive_default_enum)]\n+\n+// nb: does not impl Default\n+#[derive(Debug, PartialEq)]\n+struct NotDefault;\n+\n+#[derive(Debug, Default, PartialEq)]\n+enum Foo {\n+    #[default]\n+    Alpha,\n+    #[allow(dead_code)]\n+    Beta(NotDefault),\n+}\n+\n+fn main() {\n+    assert_eq!(Foo::default(), Foo::Alpha);\n+}"}, {"sha": "d8f0b27a2e5f607fd5ffe81c7b56f45f30085594", "filename": "src/test/ui/deriving/deriving-with-helper.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fderiving%2Fderiving-with-helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fderiving%2Fderiving-with-helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-with-helper.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -5,6 +5,7 @@\n #![feature(lang_items)]\n #![feature(no_core)]\n #![feature(rustc_attrs)]\n+#![feature(derive_default_enum)]\n \n #![no_core]\n \n@@ -30,7 +31,7 @@ mod default {\n trait Sized {}\n \n #[derive(Default)]\n-struct S {\n+enum S {\n     #[default] // OK\n-    field: u8,\n+    Foo,\n }"}, {"sha": "cfd42bd9aac32f0db98ec5f09f16b29eb5f3e171", "filename": "src/test/ui/error-codes/E0665.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Ferror-codes%2FE0665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Ferror-codes%2FE0665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0665.rs?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,8 +0,0 @@\n-#[derive(Default)] //~ ERROR E0665\n-enum Food {\n-    Sweet,\n-    Salty,\n-}\n-\n-fn main() {\n-}"}, {"sha": "bb8b3906ca6b0d625f6e99cf9cabf1fb9d808b44", "filename": "src/test/ui/error-codes/E0665.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b50cc9a2c408caef30a1cf950c948509b2f648e/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr?ref=8b50cc9a2c408caef30a1cf950c948509b2f648e", "patch": "@@ -1,11 +0,0 @@\n-error[E0665]: `Default` cannot be derived for enums, only structs\n-  --> $DIR/E0665.rs:1:10\n-   |\n-LL | #[derive(Default)]\n-   |          ^^^^^^^\n-   |\n-   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0665`."}, {"sha": "05a5d4e14223a0404202b1fc2b0a347d0e1153f0", "filename": "src/test/ui/feature-gates/feature-gate-derive_default_enum.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-derive_default_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-derive_default_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-derive_default_enum.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -0,0 +1,7 @@\n+#[derive(Default)] //~ ERROR deriving `Default` on enums is experimental\n+enum Foo {\n+    #[default]\n+    Alpha,\n+}\n+\n+fn main() {}"}, {"sha": "58dd4d508a7091695eb7d4b588d1bd308807c064", "filename": "src/test/ui/feature-gates/feature-gate-derive_default_enum.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-derive_default_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-derive_default_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-derive_default_enum.stderr?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -0,0 +1,13 @@\n+error[E0658]: deriving `Default` on enums is experimental\n+  --> $DIR/feature-gate-derive_default_enum.rs:1:10\n+   |\n+LL | #[derive(Default)]\n+   |          ^^^^^^^\n+   |\n+   = note: see issue #86985 <https://github.com/rust-lang/rust/issues/86985> for more information\n+   = help: add `#![feature(derive_default_enum)]` to the crate attributes to enable\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "faacc6f081d31cdf0205d9852561f0b247927a59", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -5,9 +5,94 @@\n \n #![feature(asm, llvm_asm)]\n #![feature(trace_macros, concat_idents)]\n+#![feature(stmt_expr_attributes, arbitrary_enum_discriminant)]\n+#![feature(derive_default_enum)]\n \n-#[derive(Default)] //~ ERROR\n-enum OrDeriveThis {}\n+#[derive(Default)]\n+struct DefaultInnerAttrStruct {\n+    #[default] //~ ERROR the `#[default]` attribute may only be used on unit enum variants\n+    foo: (),\n+}\n+\n+#[derive(Default)]\n+struct DefaultInnerAttrTupleStruct(#[default] ());\n+//~^ ERROR the `#[default]` attribute may only be used on unit enum variants\n+\n+#[derive(Default)]\n+#[default] //~ ERROR the `#[default]` attribute may only be used on unit enum variants\n+struct DefaultOuterAttrStruct {}\n+\n+#[derive(Default)]\n+#[default] //~ ERROR the `#[default]` attribute may only be used on unit enum variants\n+enum DefaultOuterAttrEnum {\n+    #[default]\n+    Foo,\n+}\n+\n+#[rustfmt::skip] // needs some work to handle this case\n+#[repr(u8)]\n+#[derive(Default)]\n+enum AttrOnInnerExpression {\n+    Foo = #[default] 0, //~ ERROR the `#[default]` attribute may only be used on unit enum variants\n+    Bar([u8; #[default] 1]), //~ ERROR the `#[default]` attribute may only be used on unit enum variants\n+    #[default]\n+    Baz,\n+}\n+\n+#[derive(Default)] //~ ERROR no default declared\n+enum NoDeclaredDefault {\n+    Foo,\n+    Bar,\n+}\n+\n+#[derive(Default)] //~ ERROR multiple declared defaults\n+enum MultipleDefaults {\n+    #[default]\n+    Foo,\n+    #[default]\n+    Bar,\n+    #[default]\n+    Baz,\n+}\n+\n+#[derive(Default)]\n+enum ExtraDeriveTokens {\n+    #[default = 1] //~ ERROR `#[default]` attribute does not accept a value\n+    Foo,\n+}\n+\n+#[derive(Default)]\n+enum TwoDefaultAttrs {\n+    #[default]\n+    #[default]\n+    Foo, //~ERROR multiple `#[default]` attributes\n+    Bar,\n+}\n+\n+#[derive(Default)]\n+enum ManyDefaultAttrs {\n+    #[default]\n+    #[default]\n+    #[default]\n+    #[default]\n+    Foo, //~ERROR multiple `#[default]` attributes\n+    Bar,\n+}\n+\n+#[derive(Default)]\n+enum DefaultHasFields {\n+    #[default]\n+    Foo {}, //~ ERROR the `#[default]` attribute may only be used on unit enum variants\n+    Bar,\n+}\n+\n+#[derive(Default)]\n+enum NonExhaustiveDefault {\n+    #[default]\n+    #[non_exhaustive]\n+    Foo, //~ ERROR default variant must be exhaustive\n+    Bar,\n+}\n \n fn main() {\n     asm!(invalid); //~ ERROR"}, {"sha": "e0ed8522bf6523f7ac4bf1af9a9d7c8881b778b5", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 137, "deletions": 18, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -1,57 +1,177 @@\n-error[E0665]: `Default` cannot be derived for enums, only structs\n-  --> $DIR/macros-nonfatal-errors.rs:9:10\n+error: the `#[default]` attribute may only be used on unit enum variants\n+  --> $DIR/macros-nonfatal-errors.rs:13:5\n+   |\n+LL |     #[default]\n+   |     ^^^^^^^^^^\n+\n+error: the `#[default]` attribute may only be used on unit enum variants\n+  --> $DIR/macros-nonfatal-errors.rs:18:36\n+   |\n+LL | struct DefaultInnerAttrTupleStruct(#[default] ());\n+   |                                    ^^^^^^^^^^\n+\n+error: the `#[default]` attribute may only be used on unit enum variants\n+  --> $DIR/macros-nonfatal-errors.rs:22:1\n+   |\n+LL | #[default]\n+   | ^^^^^^^^^^\n+\n+error: the `#[default]` attribute may only be used on unit enum variants\n+  --> $DIR/macros-nonfatal-errors.rs:26:1\n+   |\n+LL | #[default]\n+   | ^^^^^^^^^^\n+\n+error: the `#[default]` attribute may only be used on unit enum variants\n+  --> $DIR/macros-nonfatal-errors.rs:36:11\n+   |\n+LL |     Foo = #[default] 0,\n+   |           ^^^^^^^^^^\n+\n+error: the `#[default]` attribute may only be used on unit enum variants\n+  --> $DIR/macros-nonfatal-errors.rs:37:14\n+   |\n+LL |     Bar([u8; #[default] 1]),\n+   |              ^^^^^^^^^^\n+\n+error: no default declared\n+  --> $DIR/macros-nonfatal-errors.rs:42:10\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n    |\n+   = help: make a unit variant default by placing `#[default]` above it\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: multiple declared defaults\n+  --> $DIR/macros-nonfatal-errors.rs:48:10\n+   |\n+LL | #[derive(Default)]\n+   |          ^^^^^^^\n+...\n+LL |     Foo,\n+   |     --- first default\n+LL |     #[default]\n+LL |     Bar,\n+   |     --- additional default\n+LL |     #[default]\n+LL |     Baz,\n+   |     --- additional default\n+   |\n+   = note: only one variant can be default\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: `#[default]` attribute does not accept a value\n+  --> $DIR/macros-nonfatal-errors.rs:60:5\n+   |\n+LL |     #[default = 1]\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: try using `#[default]`\n+\n+error: multiple `#[default]` attributes\n+  --> $DIR/macros-nonfatal-errors.rs:68:5\n+   |\n+LL |     #[default]\n+   |     ---------- `#[default]` used here\n+LL |     #[default]\n+   |     ---------- `#[default]` used again here\n+LL |     Foo,\n+   |     ^^^\n+   |\n+   = note: only one `#[default]` attribute is needed\n+help: try removing this\n+  --> $DIR/macros-nonfatal-errors.rs:67:5\n+   |\n+LL |     #[default]\n+   |     ^^^^^^^^^^\n+\n+error: multiple `#[default]` attributes\n+  --> $DIR/macros-nonfatal-errors.rs:78:5\n+   |\n+LL |     #[default]\n+   |     ---------- `#[default]` used here\n+LL |     #[default]\n+   |     ---------- `#[default]` used again here\n+...\n+LL |     Foo,\n+   |     ^^^\n+   |\n+   = note: only one `#[default]` attribute is needed\n+help: try removing these\n+  --> $DIR/macros-nonfatal-errors.rs:75:5\n+   |\n+LL |     #[default]\n+   |     ^^^^^^^^^^\n+LL |     #[default]\n+   |     ^^^^^^^^^^\n+LL |     #[default]\n+   |     ^^^^^^^^^^\n+\n+error: the `#[default]` attribute may only be used on unit enum variants\n+  --> $DIR/macros-nonfatal-errors.rs:85:5\n+   |\n+LL |     Foo {},\n+   |     ^^^\n+   |\n+   = help: consider a manual implementation of `Default`\n+\n+error: default variant must be exhaustive\n+  --> $DIR/macros-nonfatal-errors.rs:93:5\n+   |\n+LL |     #[non_exhaustive]\n+   |     ----------------- declared `#[non_exhaustive]` here\n+LL |     Foo,\n+   |     ^^^\n+   |\n+   = help: consider a manual implementation of `Default`\n+\n error: asm template must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:13:10\n+  --> $DIR/macros-nonfatal-errors.rs:98:10\n    |\n LL |     asm!(invalid);\n    |          ^^^^^^^\n \n error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:14:15\n+  --> $DIR/macros-nonfatal-errors.rs:99:15\n    |\n LL |     llvm_asm!(invalid);\n    |               ^^^^^^^\n \n error: concat_idents! requires ident args.\n-  --> $DIR/macros-nonfatal-errors.rs:16:5\n+  --> $DIR/macros-nonfatal-errors.rs:101:5\n    |\n LL |     concat_idents!(\"not\", \"idents\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:18:17\n+  --> $DIR/macros-nonfatal-errors.rs:103:17\n    |\n LL |     option_env!(invalid);\n    |                 ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:19:10\n+  --> $DIR/macros-nonfatal-errors.rs:104:10\n    |\n LL |     env!(invalid);\n    |          ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:20:10\n+  --> $DIR/macros-nonfatal-errors.rs:105:10\n    |\n LL |     env!(foo, abr, baz);\n    |          ^^^\n \n error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n-  --> $DIR/macros-nonfatal-errors.rs:21:5\n+  --> $DIR/macros-nonfatal-errors.rs:106:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:23:13\n+  --> $DIR/macros-nonfatal-errors.rs:108:13\n    |\n LL |     format!(invalid);\n    |             ^^^^^^^\n@@ -62,45 +182,44 @@ LL |     format!(\"{}\", invalid);\n    |             ^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:25:14\n+  --> $DIR/macros-nonfatal-errors.rs:110:14\n    |\n LL |     include!(invalid);\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:27:18\n+  --> $DIR/macros-nonfatal-errors.rs:112:18\n    |\n LL |     include_str!(invalid);\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:28:5\n+  --> $DIR/macros-nonfatal-errors.rs:113:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:29:20\n+  --> $DIR/macros-nonfatal-errors.rs:114:20\n    |\n LL |     include_bytes!(invalid);\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:30:5\n+  --> $DIR/macros-nonfatal-errors.rs:115:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:32:5\n+  --> $DIR/macros-nonfatal-errors.rs:117:5\n    |\n LL |     trace_macros!(invalid);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 27 previous errors\n \n-For more information about this error, try `rustc --explain E0665`."}, {"sha": "fe9bf4d443e723465a5f3d62658a12558e506948", "filename": "src/test/ui/resolve/issue-2356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea2e446f09b923d513013743b37b43fca7282dc/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs?ref=aea2e446f09b923d513013743b37b43fca7282dc", "patch": "@@ -29,7 +29,7 @@ impl Clone for Cat {\n impl Default for Cat {\n   fn default() -> Self {\n     default();\n-    //~^ ERROR cannot find function `default`\n+    //~^ ERROR cannot find function `default` in this scope [E0425]\n     loop {}\n   }\n }"}]}