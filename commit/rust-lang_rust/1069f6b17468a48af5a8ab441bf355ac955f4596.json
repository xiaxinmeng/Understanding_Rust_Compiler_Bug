{"sha": "1069f6b17468a48af5a8ab441bf355ac955f4596", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjlmNmIxNzQ2OGE0OGFmNWE4YWI0NDFiZjM1NWFjOTU1ZjQ1OTY=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-08T11:58:41Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-08T11:58:41Z"}, "message": "Fix handling of as_file_handle error for `fullfsync`", "tree": {"sha": "1ee9074364fb0dd5777386938d16e894be75ff13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee9074364fb0dd5777386938d16e894be75ff13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1069f6b17468a48af5a8ab441bf355ac955f4596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1069f6b17468a48af5a8ab441bf355ac955f4596", "html_url": "https://github.com/rust-lang/rust/commit/1069f6b17468a48af5a8ab441bf355ac955f4596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1069f6b17468a48af5a8ab441bf355ac955f4596/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6", "html_url": "https://github.com/rust-lang/rust/commit/045bcab1eb9a0d0efbed0ae6d2e3dd30270284e6"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "e0b2837cae908f0c8ee198a334e2a1aa09a7c1f7", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1069f6b17468a48af5a8ab441bf355ac955f4596/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1069f6b17468a48af5a8ab441bf355ac955f4596/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=1069f6b17468a48af5a8ab441bf355ac955f4596", "patch": "@@ -501,13 +501,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let &[_, _] = check_arg_count(args)?;\n             if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n                 // FIXME: Support fullfsync for all FDs\n-                match file_descriptor.as_file_handle() {\n-                    Ok(FileHandle { file, writable }) => {\n-                        let io_result = maybe_sync_file(&file, *writable, File::sync_all);\n-                        this.try_unwrap_io_result(io_result)\n-                    },\n-                    Err(_) => this.handle_not_found(),\n-                }\n+                let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+                let io_result = maybe_sync_file(&file, *writable, File::sync_all);\n+                this.try_unwrap_io_result(io_result)\n             } else {\n                 this.handle_not_found()\n             }\n@@ -1365,10 +1361,7 @@ impl FileMetadata {\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let option = ecx.machine.file_handler.handles.get(&fd);\n         let file = match option {\n-            Some(file_descriptor) => {\n-                let FileHandle { file, writable: _ } = file_descriptor.as_file_handle()?;\n-                file\n-            },\n+            Some(file_descriptor) => &file_descriptor.as_file_handle()?.file,\n             None => return ecx.handle_not_found().map(|_: i32| None),\n         };\n         let metadata = file.metadata();"}]}