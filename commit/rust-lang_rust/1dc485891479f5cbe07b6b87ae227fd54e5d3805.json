{"sha": "1dc485891479f5cbe07b6b87ae227fd54e5d3805", "node_id": "C_kwDOAAsO6NoAKDFkYzQ4NTg5MTQ3OWY1Y2JlMDdiNmI4N2FlMjI3ZmQ1NGU1ZDM4MDU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-09T12:04:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T12:04:50Z"}, "message": "Rollup merge of #96478 - WaffleLapkin:rustc_default_body_unstable, r=Aaron1011\n\nImplement `#[rustc_default_body_unstable]`\n\nThis PR implements a new stability attribute \u2014 `#[rustc_default_body_unstable]`.\n\n`#[rustc_default_body_unstable]` controls the stability of default bodies in traits.\nFor example:\n```rust\npub trait Trait {\n    #[rustc_default_body_unstable(feature = \"feat\", isssue = \"none\")]\n    fn item() {}\n}\n```\nIn order to implement `Trait` user needs to either\n- implement `item` (even though it has a default implementation)\n- enable `#![feature(feat)]`\n\nThis is useful in conjunction with [`#[rustc_must_implement_one_of]`](https://github.com/rust-lang/rust/pull/92164), we may want to relax requirements for a trait, for example allowing implementing either of `PartialEq::{eq, ne}`, but do so in a safe way \u2014 making implementation of only `PartialEq::ne` unstable.\n\nr? `@Aaron1011`\ncc `@nrc` (iirc you were interested in this wrt `read_buf`), `@danielhenrymantilla` (you were interested in the related `#[rustc_must_implement_one_of]`)\nP.S. This is my first time working with stability attributes, so I'm not sure if I did everything right \ud83d\ude05", "tree": {"sha": "3af0068d2f6632e5cb4de349daf1be4a0cd527a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3af0068d2f6632e5cb4de349daf1be4a0cd527a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc485891479f5cbe07b6b87ae227fd54e5d3805", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8k1iCRBK7hj4Ov3rIwAA1QgIAIfDSeOubRJgoB4IuYJkkocS\neQcBfu+G5TP4umLuMhVz3nntKJDFxlPp6D6tEwQPM/PJRNZxU46CIrA8R5zjoXRm\nOtYCPFn5siZ6EXBVW9in+6jIte7qaMYjVlJzODUoU73k4hV17Mjy3yAPVOC0ve9G\nZeULX/Qvx5oVYK0gl5zCSV9vKsP+9HxuIz22LWANTKK72FXWS08PLrcwDF0l+6Qs\nIwY0SzpZsCXC9YN37YjwPbPgkTNZPu5zIpH2z8LlsSU+kd54JY/EMZ/RJ8OJm5Ix\nCMWuTCCTD3QmKn7nDXMAaKFr3psvIlAoEtZMiA3jJJdLtUf1mvDUTlxdnvc7vH0=\n=MWUT\n-----END PGP SIGNATURE-----\n", "payload": "tree 3af0068d2f6632e5cb4de349daf1be4a0cd527a4\nparent 5af97e8b0b9649ed14b0b4528a610ff841b6365e\nparent 95bf0fb917577c61e4a9d41d837e6fa132515b3d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660046690 +0530\ncommitter GitHub <noreply@github.com> 1660046690 +0530\n\nRollup merge of #96478 - WaffleLapkin:rustc_default_body_unstable, r=Aaron1011\n\nImplement `#[rustc_default_body_unstable]`\n\nThis PR implements a new stability attribute \u2014 `#[rustc_default_body_unstable]`.\n\n`#[rustc_default_body_unstable]` controls the stability of default bodies in traits.\nFor example:\n```rust\npub trait Trait {\n    #[rustc_default_body_unstable(feature = \"feat\", isssue = \"none\")]\n    fn item() {}\n}\n```\nIn order to implement `Trait` user needs to either\n- implement `item` (even though it has a default implementation)\n- enable `#![feature(feat)]`\n\nThis is useful in conjunction with [`#[rustc_must_implement_one_of]`](https://github.com/rust-lang/rust/pull/92164), we may want to relax requirements for a trait, for example allowing implementing either of `PartialEq::{eq, ne}`, but do so in a safe way \u2014 making implementation of only `PartialEq::ne` unstable.\n\nr? `@Aaron1011`\ncc `@nrc` (iirc you were interested in this wrt `read_buf`), `@danielhenrymantilla` (you were interested in the related `#[rustc_must_implement_one_of]`)\nP.S. This is my first time working with stability attributes, so I'm not sure if I did everything right \ud83d\ude05\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc485891479f5cbe07b6b87ae227fd54e5d3805", "html_url": "https://github.com/rust-lang/rust/commit/1dc485891479f5cbe07b6b87ae227fd54e5d3805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc485891479f5cbe07b6b87ae227fd54e5d3805/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5af97e8b0b9649ed14b0b4528a610ff841b6365e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af97e8b0b9649ed14b0b4528a610ff841b6365e", "html_url": "https://github.com/rust-lang/rust/commit/5af97e8b0b9649ed14b0b4528a610ff841b6365e"}, {"sha": "95bf0fb917577c61e4a9d41d837e6fa132515b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/95bf0fb917577c61e4a9d41d837e6fa132515b3d", "html_url": "https://github.com/rust-lang/rust/commit/95bf0fb917577c61e4a9d41d837e6fa132515b3d"}], "stats": {"total": 376, "additions": 348, "deletions": 28}, "files": [{"sha": "ededa7c2ecfb74c8be877bab297d29fdd522d512", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -4626,6 +4626,7 @@ dependencies = [\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_hir_pretty\","}, {"sha": "97eee56f948076d3379c7439c4094a1824f0eaaa", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -417,6 +417,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 || attr.has_name(sym::stable)\n                 || attr.has_name(sym::rustc_const_unstable)\n                 || attr.has_name(sym::rustc_const_stable)\n+                || attr.has_name(sym::rustc_default_body_unstable)\n             {\n                 struct_span_err!(\n                     self.sess,"}, {"sha": "62ccd734fe7206a09e255a5358cb145d7ac6253e", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -131,6 +131,14 @@ impl ConstStability {\n     }\n }\n \n+/// Represents the `#[rustc_default_body_unstable]` attribute.\n+#[derive(Encodable, Decodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n+pub struct DefaultBodyStability {\n+    pub level: StabilityLevel,\n+    pub feature: Symbol,\n+}\n+\n /// The available stability levels.\n #[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]\n@@ -214,22 +222,24 @@ pub fn find_stability(\n     sess: &Session,\n     attrs: &[Attribute],\n     item_sp: Span,\n-) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>) {\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>, Option<(DefaultBodyStability, Span)>)\n+{\n     find_stability_generic(sess, attrs.iter(), item_sp)\n }\n \n fn find_stability_generic<'a, I>(\n     sess: &Session,\n     attrs_iter: I,\n     item_sp: Span,\n-) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>)\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>, Option<(DefaultBodyStability, Span)>)\n where\n     I: Iterator<Item = &'a Attribute>,\n {\n     use StabilityLevel::*;\n \n     let mut stab: Option<(Stability, Span)> = None;\n     let mut const_stab: Option<(ConstStability, Span)> = None;\n+    let mut body_stab: Option<(DefaultBodyStability, Span)> = None;\n     let mut promotable = false;\n     let mut allowed_through_unstable_modules = false;\n \n@@ -243,6 +253,7 @@ where\n             sym::stable,\n             sym::rustc_promotable,\n             sym::rustc_allowed_through_unstable_modules,\n+            sym::rustc_default_body_unstable,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -280,7 +291,7 @@ where\n \n             let meta_name = meta.name_or_empty();\n             match meta_name {\n-                sym::rustc_const_unstable | sym::unstable => {\n+                sym::rustc_const_unstable | sym::rustc_default_body_unstable | sym::unstable => {\n                     if meta_name == sym::unstable && stab.is_some() {\n                         handle_errors(\n                             &sess.parse_sess,\n@@ -295,6 +306,13 @@ where\n                             AttrError::MultipleStabilityLevels,\n                         );\n                         break;\n+                    } else if meta_name == sym::rustc_default_body_unstable && body_stab.is_some() {\n+                        handle_errors(\n+                            &sess.parse_sess,\n+                            attr.span,\n+                            AttrError::MultipleStabilityLevels,\n+                        );\n+                        break;\n                     }\n \n                     let mut feature = None;\n@@ -405,11 +423,16 @@ where\n                             };\n                             if sym::unstable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n-                            } else {\n+                            } else if sym::rustc_const_unstable == meta_name {\n                                 const_stab = Some((\n                                     ConstStability { level, feature, promotable: false },\n                                     attr.span,\n                                 ));\n+                            } else if sym::rustc_default_body_unstable == meta_name {\n+                                body_stab =\n+                                    Some((DefaultBodyStability { level, feature }, attr.span));\n+                            } else {\n+                                unreachable!(\"Unknown stability attribute {meta_name}\");\n                             }\n                         }\n                         (None, _, _) => {\n@@ -542,7 +565,7 @@ where\n         }\n     }\n \n-    (stab, const_stab)\n+    (stab, const_stab, body_stab)\n }\n \n pub fn find_crate_name(sess: &Session, attrs: &[Attribute]) -> Option<Symbol> {"}, {"sha": "852ea806b20ff51c64139e3b5a2b293f7496b877", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -772,7 +772,7 @@ impl SyntaxExtension {\n                 )\n             })\n             .unwrap_or_else(|| (None, helper_attrs));\n-        let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n+        let (stability, const_stability, body_stability) = attr::find_stability(&sess, attrs, span);\n         if let Some((_, sp)) = const_stability {\n             sess.parse_sess\n                 .span_diagnostic\n@@ -784,6 +784,17 @@ impl SyntaxExtension {\n                 )\n                 .emit();\n         }\n+        if let Some((_, sp)) = body_stability {\n+            sess.parse_sess\n+                .span_diagnostic\n+                .struct_span_err(sp, \"macros cannot have body stability attributes\")\n+                .span_label(sp, \"invalid body stability attribute\")\n+                .span_label(\n+                    sess.source_map().guess_head_span(span),\n+                    \"body stability attribute affects this macro\",\n+                )\n+                .emit();\n+        }\n \n         SyntaxExtension {\n             kind,"}, {"sha": "ee46a364546a92fa94cf3786bfc57698e94abddf", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -499,6 +499,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(\n+        rustc_default_body_unstable, Normal,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk\n+    ),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"allow_internal_unstable side-steps feature gating and stability checks\","}, {"sha": "61f16be1d6b24016c21c851a9dad358bd69cb72f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -207,6 +207,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     def_ident_span => { table }\n     lookup_stability => { table }\n     lookup_const_stability => { table }\n+    lookup_default_body_stability => { table }\n     lookup_deprecation_entry => { table }\n     visibility => { table }\n     unused_generic_params => { table }"}, {"sha": "f68005c0526350192a1d19c4a9e3d27c5df9ab3c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -1029,6 +1029,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if should_encode_stability(def_kind) {\n                 self.encode_stability(def_id);\n                 self.encode_const_stability(def_id);\n+                self.encode_default_body_stability(def_id);\n                 self.encode_deprecation(def_id);\n             }\n             if should_encode_variances(def_kind) {\n@@ -1385,6 +1386,18 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n+    fn encode_default_body_stability(&mut self, def_id: DefId) {\n+        debug!(\"EncodeContext::encode_default_body_stability({:?})\", def_id);\n+\n+        // The query lookup can take a measurable amount of time in crates with many items. Check if\n+        // the stability attributes are even enabled before using their queries.\n+        if self.feat.staged_api || self.tcx.sess.opts.unstable_opts.force_unstable_if_unmarked {\n+            if let Some(stab) = self.tcx.lookup_default_body_stability(def_id) {\n+                record!(self.tables.lookup_default_body_stability[def_id] <- stab)\n+            }\n+        }\n+    }\n+\n     fn encode_deprecation(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_deprecation({:?})\", def_id);\n         if let Some(depr) = self.tcx.lookup_deprecation(def_id) {"}, {"sha": "8efe5051b01cb928031bcffde1ed85dfb2667508", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -343,6 +343,7 @@ define_tables! {\n     def_ident_span: Table<DefIndex, LazyValue<Span>>,\n     lookup_stability: Table<DefIndex, LazyValue<attr::Stability>>,\n     lookup_const_stability: Table<DefIndex, LazyValue<attr::ConstStability>>,\n+    lookup_default_body_stability: Table<DefIndex, LazyValue<attr::DefaultBodyStability>>,\n     lookup_deprecation_entry: Table<DefIndex, LazyValue<attr::Deprecation>>,\n     // As an optimization, a missing entry indicates an empty `&[]`.\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,"}, {"sha": "7a9ad44d1d9ae86cec2b46303159c13950e95674", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 68, "deletions": 7, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -5,7 +5,7 @@ pub use self::StabilityLevel::*;\n \n use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n-use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n+use rustc_attr::{self as attr, ConstStability, DefaultBodyStability, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n@@ -61,6 +61,7 @@ pub struct Index {\n     /// are filled by the annotator.\n     pub stab_map: FxHashMap<LocalDefId, Stability>,\n     pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n+    pub default_body_stab_map: FxHashMap<LocalDefId, DefaultBodyStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n     /// Mapping from feature name to feature name based on the `implied_by` field of `#[unstable]`\n     /// attributes. If a `#[unstable(feature = \"implier\", implied_by = \"impliee\")]` attribute\n@@ -86,6 +87,10 @@ impl Index {\n         self.const_stab_map.get(&def_id).copied()\n     }\n \n+    pub fn local_default_body_stability(&self, def_id: LocalDefId) -> Option<DefaultBodyStability> {\n+        self.default_body_stab_map.get(&def_id).copied()\n+    }\n+\n     pub fn local_deprecation_entry(&self, def_id: LocalDefId) -> Option<DeprecationEntry> {\n         self.depr_map.get(&def_id).cloned()\n     }\n@@ -416,19 +421,19 @@ impl<'tcx> TyCtxt<'tcx> {\n             return EvalResult::Allow;\n         }\n \n+        // Only the cross-crate scenario matters when checking unstable APIs\n+        let cross_crate = !def_id.is_local();\n+        if !cross_crate {\n+            return EvalResult::Allow;\n+        }\n+\n         let stability = self.lookup_stability(def_id);\n         debug!(\n             \"stability: \\\n                 inspecting def_id={:?} span={:?} of stability={:?}\",\n             def_id, span, stability\n         );\n \n-        // Only the cross-crate scenario matters when checking unstable APIs\n-        let cross_crate = !def_id.is_local();\n-        if !cross_crate {\n-            return EvalResult::Allow;\n-        }\n-\n         // Issue #38412: private items lack stability markers.\n         if skip_stability_check_due_to_privacy(self, def_id) {\n             return EvalResult::Allow;\n@@ -492,6 +497,62 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Evaluates the default-impl stability of an item.\n+    ///\n+    /// Returns `EvalResult::Allow` if the item's default implementation is stable, or unstable but the corresponding\n+    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending\n+    /// unstable feature otherwise.\n+    pub fn eval_default_body_stability(self, def_id: DefId, span: Span) -> EvalResult {\n+        let is_staged_api = self.lookup_stability(def_id.krate.as_def_id()).is_some();\n+        if !is_staged_api {\n+            return EvalResult::Allow;\n+        }\n+\n+        // Only the cross-crate scenario matters when checking unstable APIs\n+        let cross_crate = !def_id.is_local();\n+        if !cross_crate {\n+            return EvalResult::Allow;\n+        }\n+\n+        let stability = self.lookup_default_body_stability(def_id);\n+        debug!(\n+            \"body stability: inspecting def_id={def_id:?} span={span:?} of stability={stability:?}\"\n+        );\n+\n+        // Issue #38412: private items lack stability markers.\n+        if skip_stability_check_due_to_privacy(self, def_id) {\n+            return EvalResult::Allow;\n+        }\n+\n+        match stability {\n+            Some(DefaultBodyStability {\n+                level: attr::Unstable { reason, issue, is_soft, .. },\n+                feature,\n+            }) => {\n+                if span.allows_unstable(feature) {\n+                    debug!(\"body stability: skipping span={:?} since it is internal\", span);\n+                    return EvalResult::Allow;\n+                }\n+                if self.features().active(feature) {\n+                    return EvalResult::Allow;\n+                }\n+\n+                EvalResult::Deny {\n+                    feature,\n+                    reason: reason.to_opt_reason(),\n+                    issue,\n+                    suggestion: None,\n+                    is_soft,\n+                }\n+            }\n+            Some(_) => {\n+                // Stable APIs are always ok to call\n+                EvalResult::Allow\n+            }\n+            None => EvalResult::Unmarked,\n+        }\n+    }\n+\n     /// Checks if an item is stable or error out.\n     ///\n     /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not"}, {"sha": "cdda6ad7f80bba0f6d8517c0d637bbc012668c9a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -1094,6 +1094,11 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query lookup_default_body_stability(def_id: DefId) -> Option<attr::DefaultBodyStability> {\n+        desc { |tcx| \"looking up default body stability of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n+    }\n+\n     query should_inherit_track_caller(def_id: DefId) -> bool {\n         desc { |tcx| \"computing should_inherit_track_caller of `{}`\", tcx.def_path_str(def_id) }\n     }"}, {"sha": "ae6e2eecbffb5f46516c54904a487f75c2d8ca9b", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -64,6 +64,7 @@ trivially_parameterized_over_tcx! {\n     rustc_ast::Attribute,\n     rustc_ast::MacArgs,\n     rustc_attr::ConstStability,\n+    rustc_attr::DefaultBodyStability,\n     rustc_attr::Deprecation,\n     rustc_attr::Stability,\n     rustc_hir::Constness,"}, {"sha": "868887c66cdec7a95e1bc723a460718c5d365c0d", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -29,11 +29,16 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n-        let stab_attrs =\n-            [sym::stable, sym::unstable, sym::rustc_const_stable, sym::rustc_const_unstable];\n+        let stab_attrs = [\n+            sym::stable,\n+            sym::unstable,\n+            sym::rustc_const_stable,\n+            sym::rustc_const_unstable,\n+            sym::rustc_default_body_unstable,\n+        ];\n \n         // Find a stability attribute: one of #[stable(\u2026)], #[unstable(\u2026)],\n-        // #[rustc_const_stable(\u2026)], or #[rustc_const_unstable(\u2026)].\n+        // #[rustc_const_stable(\u2026)], #[rustc_const_unstable(\u2026)] or #[rustc_default_body_unstable].\n         if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| attr.has_name(**stab_attr)) {\n             let meta_kind = attr.meta_kind();\n             if let Some(MetaItemKind::List(ref metas)) = meta_kind {\n@@ -53,8 +58,12 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                     // This additional check for stability is to make sure we\n                     // don't emit additional, irrelevant errors for malformed\n                     // attributes.\n-                    let is_unstable =\n-                        matches!(*stab_attr, sym::unstable | sym::rustc_const_unstable);\n+                    let is_unstable = matches!(\n+                        *stab_attr,\n+                        sym::unstable\n+                            | sym::rustc_const_unstable\n+                            | sym::rustc_default_body_unstable\n+                    );\n                     if since.is_some() || is_unstable {\n                         return Some((feature, since, attr.span));\n                     }"}, {"sha": "be920601ee43f2c19d6b9cd43731a6ae4ec0c098", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -1,8 +1,9 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use attr::StabilityLevel;\n-use rustc_attr::{self as attr, ConstStability, Stability, Unstable, UnstableReason};\n+use rustc_attr::{\n+    self as attr, ConstStability, Stability, StabilityLevel, Unstable, UnstableReason,\n+};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -161,7 +162,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             return;\n         }\n \n-        let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n+        let (stab, const_stab, body_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n         let mut const_span = None;\n \n         let const_stab = const_stab.map(|(const_stab, const_span_node)| {\n@@ -209,6 +210,13 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n+        if let Some((body_stab, _span)) = body_stab {\n+            // FIXME: check that this item can have body stability\n+\n+            self.index.default_body_stab_map.insert(def_id, body_stab);\n+            debug!(?self.index.default_body_stab_map);\n+        }\n+\n         let stab = stab.map(|(stab, span)| {\n             // Error if prohibited, or can't inherit anything from a container.\n             if kind == AnnotationKind::Prohibited\n@@ -613,6 +621,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n     let mut index = Index {\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n+        default_body_stab_map: Default::default(),\n         depr_map: Default::default(),\n         implications: Default::default(),\n     };\n@@ -673,6 +682,9 @@ pub(crate) fn provide(providers: &mut Providers) {\n         stability_implications: |tcx, _| tcx.stability().implications.clone(),\n         lookup_stability: |tcx, id| tcx.stability().local_stability(id.expect_local()),\n         lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id.expect_local()),\n+        lookup_default_body_stability: |tcx, id| {\n+            tcx.stability().local_default_body_stability(id.expect_local())\n+        },\n         lookup_deprecation_entry: |tcx, id| {\n             tcx.stability().local_deprecation_entry(id.expect_local())\n         },\n@@ -723,7 +735,8 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 let features = self.tcx.features();\n                 if features.staged_api {\n                     let attrs = self.tcx.hir().attrs(item.hir_id());\n-                    let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item.span);\n+                    let (stab, const_stab, _) =\n+                        attr::find_stability(&self.tcx.sess, attrs, item.span);\n \n                     // If this impl block has an #[unstable] attribute, give an\n                     // error if all involved types and traits are stable, because"}, {"sha": "2f3519e3edd778b88cb08f09c14c18158bfe7f52", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -1218,6 +1218,7 @@ symbols! {\n         rustc_conversion_suggestion,\n         rustc_deallocator,\n         rustc_def_path,\n+        rustc_default_body_unstable,\n         rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n         rustc_dirty,"}, {"sha": "cae29c1d3c5f938a2b103d103a962c2b790d77ca", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -30,3 +30,4 @@ rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n rustc_lint = { path = \"../rustc_lint\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n+rustc_feature = { path = \"../rustc_feature\" }"}, {"sha": "6e3ef15f88433ebf4e6f83c35fb67b27aafc3f36", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -18,6 +18,7 @@ use rustc_infer::infer::{DefiningAnchor, RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_lint::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n@@ -1103,12 +1104,28 @@ fn check_impl_items_against_trait<'tcx>(\n                 missing_items.push(tcx.associated_item(trait_item_id));\n             }\n \n-            if let Some(required_items) = &must_implement_one_of {\n-                // true if this item is specifically implemented in this impl\n-                let is_implemented_here = ancestors\n-                    .leaf_def(tcx, trait_item_id)\n-                    .map_or(false, |node_item| !node_item.defining_node.is_from_trait());\n+            // true if this item is specifically implemented in this impl\n+            let is_implemented_here = ancestors\n+                .leaf_def(tcx, trait_item_id)\n+                .map_or(false, |node_item| !node_item.defining_node.is_from_trait());\n+\n+            if !is_implemented_here {\n+                match tcx.eval_default_body_stability(trait_item_id, full_impl_span) {\n+                    EvalResult::Deny { feature, reason, issue, .. } => default_body_is_unstable(\n+                        tcx,\n+                        full_impl_span,\n+                        trait_item_id,\n+                        feature,\n+                        reason,\n+                        issue,\n+                    ),\n \n+                    // Unmarked default bodies are considered stable (at least for now).\n+                    EvalResult::Allow | EvalResult::Unmarked => {}\n+                }\n+            }\n+\n+            if let Some(required_items) = &must_implement_one_of {\n                 if is_implemented_here {\n                     let trait_item = tcx.associated_item(trait_item_id);\n                     if required_items.contains(&trait_item.ident(tcx)) {"}, {"sha": "b73d9a9eb7599d13081679922cc31a86dc9cdf39", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -121,13 +121,14 @@ use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{self, BytePos, Span};\n+use rustc_span::{self, BytePos, Span, Symbol};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::recursive_type_with_infinite_size_error;\n use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n use std::cell::RefCell;\n+use std::num::NonZeroU32;\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n@@ -661,6 +662,37 @@ fn missing_items_must_implement_one_of_err(\n     err.emit();\n }\n \n+fn default_body_is_unstable(\n+    tcx: TyCtxt<'_>,\n+    impl_span: Span,\n+    item_did: DefId,\n+    feature: Symbol,\n+    reason: Option<Symbol>,\n+    issue: Option<NonZeroU32>,\n+) {\n+    let missing_item_name = &tcx.associated_item(item_did).name;\n+    let use_of_unstable_library_feature_note = match reason {\n+        Some(r) => format!(\"use of unstable library feature '{feature}': {r}\"),\n+        None => format!(\"use of unstable library feature '{feature}'\"),\n+    };\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0046,\n+        \"not all trait items implemented, missing: `{missing_item_name}`\",\n+    );\n+    err.note(format!(\"default implementation of `{missing_item_name}` is unstable\"));\n+    err.note(use_of_unstable_library_feature_note);\n+    rustc_session::parse::add_feature_diagnostics_for_issue(\n+        &mut err,\n+        &tcx.sess.parse_sess,\n+        feature,\n+        rustc_feature::GateIssue::Library(issue),\n+    );\n+    err.emit();\n+}\n+\n /// Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "3a177419d666ddd48d7e3b20c830b5be1ca0ce72", "filename": "src/test/ui/stability-attribute/auxiliary/default_body.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fdefault_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fdefault_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fdefault_body.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -0,0 +1,29 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api, rustc_attrs)]\n+#![stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+pub trait JustTrait {\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    #[rustc_default_body_unstable(feature = \"constant_default_body\", issue = \"none\")]\n+    const CONSTANT: usize = 0;\n+\n+    #[rustc_default_body_unstable(feature = \"fun_default_body\", issue = \"none\")]\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    fn fun() {}\n+}\n+\n+#[rustc_must_implement_one_of(eq, neq)]\n+#[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+pub trait Equal {\n+    #[rustc_default_body_unstable(feature = \"eq_default_body\", issue = \"none\")]\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    fn eq(&self, other: &Self) -> bool {\n+        !self.neq(other)\n+    }\n+\n+    #[stable(feature = \"stable_feature\", since = \"1.0.0\")]\n+    fn neq(&self, other: &Self) -> bool {\n+        !self.eq(other)\n+    }\n+}"}, {"sha": "ecb281bccf604d1ed3173ee309f47b5fae92c4f9", "filename": "src/test/ui/stability-attribute/default-body-stability-err.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:default_body.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate default_body;\n+\n+use default_body::{Equal, JustTrait};\n+\n+struct Type;\n+\n+impl JustTrait for Type {}\n+//~^ ERROR not all trait items implemented, missing: `CONSTANT` [E0046]\n+//~| ERROR not all trait items implemented, missing: `fun` [E0046]\n+\n+impl Equal for Type {\n+    //~^ ERROR not all trait items implemented, missing: `eq` [E0046]\n+    fn neq(&self, other: &Self) -> bool {\n+        false\n+    }\n+}"}, {"sha": "ef666f30fc2a294fd5a3a4b6715aada8adee7f17", "filename": "src/test/ui/stability-attribute/default-body-stability-err.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -0,0 +1,38 @@\n+error[E0046]: not all trait items implemented, missing: `CONSTANT`\n+  --> $DIR/default-body-stability-err.rs:10:1\n+   |\n+LL | impl JustTrait for Type {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: default implementation of `CONSTANT` is unstable\n+   = note: use of unstable library feature 'constant_default_body'\n+   = help: add `#![feature(constant_default_body)]` to the crate attributes to enable\n+\n+error[E0046]: not all trait items implemented, missing: `fun`\n+  --> $DIR/default-body-stability-err.rs:10:1\n+   |\n+LL | impl JustTrait for Type {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: default implementation of `fun` is unstable\n+   = note: use of unstable library feature 'fun_default_body'\n+   = help: add `#![feature(fun_default_body)]` to the crate attributes to enable\n+\n+error[E0046]: not all trait items implemented, missing: `eq`\n+  --> $DIR/default-body-stability-err.rs:14:1\n+   |\n+LL | / impl Equal for Type {\n+LL | |\n+LL | |     fn neq(&self, other: &Self) -> bool {\n+LL | |         false\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: default implementation of `eq` is unstable\n+   = note: use of unstable library feature 'eq_default_body'\n+   = help: add `#![feature(eq_default_body)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "bdc7522f48dde92f9fb89f5e88688484be90540a", "filename": "src/test/ui/stability-attribute/default-body-stability-ok-enables.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-enables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-enables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-enables.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// aux-build:default_body.rs\n+#![crate_type = \"lib\"]\n+#![feature(fun_default_body, eq_default_body, constant_default_body)]\n+\n+extern crate default_body;\n+\n+use default_body::{Equal, JustTrait};\n+\n+struct Type;\n+\n+impl JustTrait for Type {}\n+\n+impl Equal for Type {\n+    fn neq(&self, other: &Self) -> bool {\n+        false\n+    }\n+}"}, {"sha": "e1f5c017096ab74261933767b74020b9efaf6866", "filename": "src/test/ui/stability-attribute/default-body-stability-ok-impls.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc485891479f5cbe07b6b87ae227fd54e5d3805/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-ok-impls.rs?ref=1dc485891479f5cbe07b6b87ae227fd54e5d3805", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// aux-build:default_body.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate default_body;\n+\n+use default_body::{Equal, JustTrait};\n+\n+struct Type;\n+\n+impl JustTrait for Type {\n+    const CONSTANT: usize = 1;\n+\n+    fn fun() {}\n+}\n+\n+impl Equal for Type {\n+    fn eq(&self, other: &Self) -> bool {\n+        false\n+    }\n+}"}]}