{"sha": "e29a6fcfa2bab56728fd3882ded01220ad7421b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOWE2ZmNmYTJiYWI1NjcyOGZkMzg4MmRlZDAxMjIwYWQ3NDIxYjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-14T05:36:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-14T05:36:58Z"}, "message": "Rollup merge of #65379 - Centril:refactor-bso_and_cc, r=petrochenkov\n\nrefactor session::config::build_session_options_and_crate_config\n\nI'm not exactly sure what happened in https://github.com/rust-lang/rust/pull/65361#issuecomment-541420179 so in an effort to bisect the error I'm extracting out the first commit so it can hopefully land (I suspect the error is in the 2nd-3rd commits.)\n\nr? @petrochenkov\n\n(I'll r=you when the PR builder is happy)", "tree": {"sha": "a8e50174e26b87452104df297f1ce8796a2f7031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e50174e26b87452104df297f1ce8796a2f7031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29a6fcfa2bab56728fd3882ded01220ad7421b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpAl6CRBK7hj4Ov3rIwAAdHIIAJwn42MgG9OLszhCa2Z5cjV6\n6+NOAPzUTKdgUZ8fnbqrjLjO7umMEYYXVn6jw1GUJhq/ZEhqRXPxTcORvKJySIHL\n+hgiaUuT1uHfa7k3ADLDzISsIto9/dAtFBHv9IYI/E7xMKTMiOXYAUdvC9iG58o1\naS/FCnll2Rj5JeYnpoNJSlXOhvtSZAMmVSoLRwYi8ZtPkUV+MJBwoyT0Cj9S0M0o\nHaMgVgPlQqVxUdBIboqllVqgzK/mRLLZb0Rd5txUZrOYRgBTkz9lCxKs+BoINp1n\nitvDMBg0LimZXFWLZ8hblMFz2LxP1AI+Gds6/M+r/6mQdFexQuQMtGK6s1aTnwg=\n=CcEx\n-----END PGP SIGNATURE-----\n", "payload": "tree a8e50174e26b87452104df297f1ce8796a2f7031\nparent 2800bc240e1f4789bb54080b4cd30ec382a1337f\nparent 9d766ed593f7ab9811324856c03730312d3425e3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571031418 +0200\ncommitter GitHub <noreply@github.com> 1571031418 +0200\n\nRollup merge of #65379 - Centril:refactor-bso_and_cc, r=petrochenkov\n\nrefactor session::config::build_session_options_and_crate_config\n\nI'm not exactly sure what happened in https://github.com/rust-lang/rust/pull/65361#issuecomment-541420179 so in an effort to bisect the error I'm extracting out the first commit so it can hopefully land (I suspect the error is in the 2nd-3rd commits.)\n\nr? @petrochenkov\n\n(I'll r=you when the PR builder is happy)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29a6fcfa2bab56728fd3882ded01220ad7421b6", "html_url": "https://github.com/rust-lang/rust/commit/e29a6fcfa2bab56728fd3882ded01220ad7421b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29a6fcfa2bab56728fd3882ded01220ad7421b6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2800bc240e1f4789bb54080b4cd30ec382a1337f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2800bc240e1f4789bb54080b4cd30ec382a1337f", "html_url": "https://github.com/rust-lang/rust/commit/2800bc240e1f4789bb54080b4cd30ec382a1337f"}, {"sha": "9d766ed593f7ab9811324856c03730312d3425e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d766ed593f7ab9811324856c03730312d3425e3", "html_url": "https://github.com/rust-lang/rust/commit/9d766ed593f7ab9811324856c03730312d3425e3"}], "stats": {"total": 482, "additions": 298, "deletions": 184}, "files": [{"sha": "84102cea8ad9fff84e24177d090c61aa36363c81", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 283, "deletions": 181, "changes": 464, "blob_url": "https://github.com/rust-lang/rust/blob/e29a6fcfa2bab56728fd3882ded01220ad7421b6/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29a6fcfa2bab56728fd3882ded01220ad7421b6/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e29a6fcfa2bab56728fd3882ded01220ad7421b6", "patch": "@@ -2038,11 +2038,7 @@ pub fn parse_error_format(\n     return error_format;\n }\n \n-pub fn build_session_options_and_crate_config(\n-    matches: &getopts::Matches,\n-) -> (Options, FxHashSet<(String, Option<String>)>) {\n-    let color = parse_color(matches);\n-\n+fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n     let edition = match matches.opt_str(\"edition\") {\n         Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_|\n             early_error(\n@@ -2069,19 +2065,14 @@ pub fn build_session_options_and_crate_config(\n         )\n     }\n \n-    let (json_rendered, json_artifact_notifications) = parse_json(matches);\n-\n-    let error_format = parse_error_format(matches, color, json_rendered);\n-\n-    let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n-    let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n-        .unwrap_or_else(|e| early_error(error_format, &e[..]));\n-\n-\n-    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n-\n-    let mut debugging_opts = build_debugging_options(matches, error_format);\n+    edition\n+}\n \n+fn check_debug_option_stability(\n+    debugging_opts: &DebuggingOptions,\n+    error_format: ErrorOutputType,\n+    json_rendered: HumanReadableErrorType,\n+) {\n     if !debugging_opts.unstable_options {\n         if let ErrorOutputType::Json { pretty: true, json_rendered } = error_format {\n             early_error(\n@@ -2097,7 +2088,13 @@ pub fn build_session_options_and_crate_config(\n             );\n         }\n     }\n+}\n \n+fn parse_output_types(\n+    debugging_opts: &DebuggingOptions,\n+    matches: &getopts::Matches,\n+    error_format: ErrorOutputType,\n+) -> OutputTypes {\n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n@@ -2122,14 +2119,19 @@ pub fn build_session_options_and_crate_config(\n     if output_types.is_empty() {\n         output_types.insert(OutputType::Exe, None);\n     }\n+    OutputTypes(output_types)\n+}\n \n-    let mut cg = build_codegen_options(matches, error_format);\n-    let mut codegen_units = cg.codegen_units;\n+fn should_override_cgus_and_disable_thinlto(\n+    output_types: &OutputTypes,\n+    matches: &getopts::Matches,\n+    error_format: ErrorOutputType,\n+    mut codegen_units: Option<usize>,\n+) -> (bool, Option<usize>) {\n     let mut disable_thinlto = false;\n-\n     // Issue #30063: if user requests LLVM-related output to one\n     // particular path, disable codegen-units.\n-    let incompatible: Vec<_> = output_types\n+    let incompatible: Vec<_> = output_types.0\n         .iter()\n         .map(|ot_path| ot_path.0)\n         .filter(|ot| !ot.is_compatible_with_codegen_units_and_single_output_file())\n@@ -2161,29 +2163,39 @@ pub fn build_session_options_and_crate_config(\n         }\n     }\n \n-    if debugging_opts.threads == 0 {\n+    if codegen_units == Some(0) {\n         early_error(\n             error_format,\n-            \"value for threads must be a positive non-zero integer\",\n+            \"value for codegen units must be a positive non-zero integer\",\n         );\n     }\n \n-    if debugging_opts.threads > 1 && debugging_opts.fuel.is_some() {\n+    (disable_thinlto, codegen_units)\n+}\n+\n+fn check_thread_count(debugging_opts: &DebuggingOptions, error_format: ErrorOutputType) {\n+    if debugging_opts.threads == 0 {\n         early_error(\n             error_format,\n-            \"optimization fuel is incompatible with multiple threads\",\n+            \"value for threads must be a positive non-zero integer\",\n         );\n     }\n \n-    if codegen_units == Some(0) {\n+    if debugging_opts.threads > 1 && debugging_opts.fuel.is_some() {\n         early_error(\n             error_format,\n-            \"value for codegen units must be a positive non-zero integer\",\n+            \"optimization fuel is incompatible with multiple threads\",\n         );\n     }\n+}\n \n-    let incremental = match (&debugging_opts.incremental, &cg.incremental) {\n-        (&Some(ref path1), &Some(ref path2)) => {\n+fn select_incremental_path(\n+    debugging_opts: &DebuggingOptions,\n+    cg: &CodegenOptions,\n+    error_format: ErrorOutputType,\n+) -> Option<PathBuf> {\n+    match (&debugging_opts.incremental, &cg.incremental) {\n+        (Some(path1), Some(path2)) => {\n             if path1 != path2 {\n                 early_error(\n                     error_format,\n@@ -2197,25 +2209,19 @@ pub fn build_session_options_and_crate_config(\n                 Some(path1)\n             }\n         }\n-        (&Some(ref path), &None) => Some(path),\n-        (&None, &Some(ref path)) => Some(path),\n-        (&None, &None) => None,\n-    }.map(|m| PathBuf::from(m));\n-\n-    if debugging_opts.profile && incremental.is_some() {\n-        early_error(\n-            error_format,\n-            \"can't instrument with gcov profiling when compiling incrementally\",\n-        );\n-    }\n-\n-    if cg.profile_generate.enabled() && cg.profile_use.is_some() {\n-        early_error(\n-            error_format,\n-            \"options `-C profile-generate` and `-C profile-use` are exclusive\",\n-        );\n-    }\n+        (Some(path), None) => Some(path),\n+        (None, Some(path)) => Some(path),\n+        (None, None) => None,\n+    }.map(|m| PathBuf::from(m))\n+}\n \n+fn collect_print_requests(\n+    cg: &mut CodegenOptions,\n+    dopts: &mut DebuggingOptions,\n+    matches: &getopts::Matches,\n+    is_unstable_enabled: bool,\n+    error_format: ErrorOutputType,\n+) -> Vec<PrintRequest> {\n     let mut prints = Vec::<PrintRequest>::new();\n     if cg.target_cpu.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::TargetCPUs);\n@@ -2233,72 +2239,105 @@ pub fn build_session_options_and_crate_config(\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n     }\n-    if debugging_opts\n+    if dopts\n         .tls_model\n         .as_ref()\n         .map_or(false, |s| s == \"help\")\n     {\n         prints.push(PrintRequest::TlsModels);\n-        debugging_opts.tls_model = None;\n+        dopts.tls_model = None;\n     }\n \n-    let cg = cg;\n+    prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n+        \"crate-name\" => PrintRequest::CrateName,\n+        \"file-names\" => PrintRequest::FileNames,\n+        \"sysroot\" => PrintRequest::Sysroot,\n+        \"cfg\" => PrintRequest::Cfg,\n+        \"target-list\" => PrintRequest::TargetList,\n+        \"target-cpus\" => PrintRequest::TargetCPUs,\n+        \"target-features\" => PrintRequest::TargetFeatures,\n+        \"relocation-models\" => PrintRequest::RelocationModels,\n+        \"code-models\" => PrintRequest::CodeModels,\n+        \"tls-models\" => PrintRequest::TlsModels,\n+        \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n+        \"target-spec-json\" => {\n+            if is_unstable_enabled {\n+                PrintRequest::TargetSpec\n+            } else {\n+                early_error(\n+                    error_format,\n+                    \"the `-Z unstable-options` flag must also be passed to \\\n+                     enable the target-spec-json print option\",\n+                );\n+            }\n+        }\n+        req => early_error(error_format, &format!(\"unknown print request `{}`\", req)),\n+    }));\n \n-    let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n-    let target_triple = if let Some(target) = matches.opt_str(\"target\") {\n-        if target.ends_with(\".json\") {\n+    prints\n+}\n+\n+fn parse_target_triple(matches: &getopts::Matches, error_format: ErrorOutputType) -> TargetTriple {\n+    match matches.opt_str(\"target\") {\n+        Some(target) if target.ends_with(\".json\") => {\n             let path = Path::new(&target);\n             TargetTriple::from_path(&path).unwrap_or_else(|_|\n                 early_error(error_format, &format!(\"target file {:?} does not exist\", path)))\n+        }\n+        Some(target) => TargetTriple::TargetTriple(target),\n+        _ => TargetTriple::from_triple(host_triple()),\n+    }\n+}\n+\n+fn parse_opt_level(\n+    matches: &getopts::Matches,\n+    cg: &CodegenOptions,\n+    error_format: ErrorOutputType,\n+) -> OptLevel {\n+    // The `-O` and `-C opt-level` flags specify the same setting, so we want to be able\n+    // to use them interchangeably. However, because they're technically different flags,\n+    // we need to work out manually which should take precedence if both are supplied (i.e.\n+    // the rightmost flag). We do this by finding the (rightmost) position of both flags and\n+    // comparing them. Note that if a flag is not found, its position will be `None`, which\n+    // always compared less than `Some(_)`.\n+    let max_o = matches.opt_positions(\"O\").into_iter().max();\n+    let max_c = matches.opt_strs_pos(\"C\").into_iter().flat_map(|(i, s)| {\n+        if let Some(\"opt-level\") = s.splitn(2, '=').next() {\n+            Some(i)\n         } else {\n-            TargetTriple::TargetTriple(target)\n+            None\n         }\n+    }).max();\n+    if max_o > max_c {\n+        OptLevel::Default\n     } else {\n-        TargetTriple::from_triple(host_triple())\n-    };\n-    let opt_level = {\n-        // The `-O` and `-C opt-level` flags specify the same setting, so we want to be able\n-        // to use them interchangeably. However, because they're technically different flags,\n-        // we need to work out manually which should take precedence if both are supplied (i.e.\n-        // the rightmost flag). We do this by finding the (rightmost) position of both flags and\n-        // comparing them. Note that if a flag is not found, its position will be `None`, which\n-        // always compared less than `Some(_)`.\n-        let max_o = matches.opt_positions(\"O\").into_iter().max();\n-        let max_c = matches.opt_strs_pos(\"C\").into_iter().flat_map(|(i, s)| {\n-            if let Some(\"opt-level\") = s.splitn(2, '=').next() {\n-                Some(i)\n-            } else {\n-                None\n-            }\n-        }).max();\n-        if max_o > max_c {\n-            OptLevel::Default\n-        } else {\n-            match cg.opt_level.as_ref().map(String::as_ref) {\n-                None => OptLevel::No,\n-                Some(\"0\") => OptLevel::No,\n-                Some(\"1\") => OptLevel::Less,\n-                Some(\"2\") => OptLevel::Default,\n-                Some(\"3\") => OptLevel::Aggressive,\n-                Some(\"s\") => OptLevel::Size,\n-                Some(\"z\") => OptLevel::SizeMin,\n-                Some(arg) => {\n-                    early_error(\n-                        error_format,\n-                        &format!(\n-                            \"optimization level needs to be \\\n-                             between 0-3, s or z (instead was `{}`)\",\n-                            arg\n-                        ),\n-                    );\n-                }\n+        match cg.opt_level.as_ref().map(String::as_ref) {\n+            None => OptLevel::No,\n+            Some(\"0\") => OptLevel::No,\n+            Some(\"1\") => OptLevel::Less,\n+            Some(\"2\") => OptLevel::Default,\n+            Some(\"3\") => OptLevel::Aggressive,\n+            Some(\"s\") => OptLevel::Size,\n+            Some(\"z\") => OptLevel::SizeMin,\n+            Some(arg) => {\n+                early_error(\n+                    error_format,\n+                    &format!(\n+                        \"optimization level needs to be \\\n+                            between 0-3, s or z (instead was `{}`)\",\n+                        arg\n+                    ),\n+                );\n             }\n         }\n-    };\n-    // The `-g` and `-C debuginfo` flags specify the same setting, so we want to be able\n-    // to use them interchangeably. See the note above (regarding `-O` and `-C opt-level`)\n-    // for more details.\n-    let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == OptLevel::No);\n+    }\n+}\n+\n+fn select_debuginfo(\n+    matches: &getopts::Matches,\n+    cg: &CodegenOptions,\n+    error_format: ErrorOutputType,\n+) -> DebugInfo {\n     let max_g = matches.opt_positions(\"g\").into_iter().max();\n     let max_c = matches.opt_strs_pos(\"C\").into_iter().flat_map(|(i, s)| {\n         if let Some(\"debuginfo\") = s.splitn(2, '=').next() {\n@@ -2307,7 +2346,7 @@ pub fn build_session_options_and_crate_config(\n             None\n         }\n     }).max();\n-    let debuginfo = if max_g > max_c {\n+    if max_g > max_c {\n         DebugInfo::Full\n     } else {\n         match cg.debuginfo {\n@@ -2325,14 +2364,14 @@ pub fn build_session_options_and_crate_config(\n                 );\n             }\n         }\n-    };\n-\n-    let mut search_paths = vec![];\n-    for s in &matches.opt_strs(\"L\") {\n-        search_paths.push(SearchPath::from_cli_opt(&s[..], error_format));\n     }\n+}\n \n-    let libs = matches\n+fn parse_libs(\n+    matches: &getopts::Matches,\n+    error_format: ErrorOutputType,\n+) -> Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> {\n+    matches\n         .opt_strs(\"l\")\n         .into_iter()\n         .map(|s| {\n@@ -2371,52 +2410,23 @@ pub fn build_session_options_and_crate_config(\n             let new_name = name_parts.next();\n             (name.to_owned(), new_name.map(|n| n.to_owned()), kind)\n         })\n-        .collect();\n-\n-    let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n-    let test = matches.opt_present(\"test\");\n-\n-    let is_unstable_enabled = nightly_options::is_unstable_enabled(matches);\n-\n-    prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n-        \"crate-name\" => PrintRequest::CrateName,\n-        \"file-names\" => PrintRequest::FileNames,\n-        \"sysroot\" => PrintRequest::Sysroot,\n-        \"cfg\" => PrintRequest::Cfg,\n-        \"target-list\" => PrintRequest::TargetList,\n-        \"target-cpus\" => PrintRequest::TargetCPUs,\n-        \"target-features\" => PrintRequest::TargetFeatures,\n-        \"relocation-models\" => PrintRequest::RelocationModels,\n-        \"code-models\" => PrintRequest::CodeModels,\n-        \"tls-models\" => PrintRequest::TlsModels,\n-        \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n-        \"target-spec-json\" => {\n-            if is_unstable_enabled {\n-                PrintRequest::TargetSpec\n-            } else {\n-                early_error(\n-                    error_format,\n-                    \"the `-Z unstable-options` flag must also be passed to \\\n-                     enable the target-spec-json print option\",\n-                );\n-            }\n-        }\n-        req => early_error(error_format, &format!(\"unknown print request `{}`\", req)),\n-    }));\n+        .collect()\n+}\n \n-    let borrowck_mode = match debugging_opts.borrowck.as_ref().map(|s| &s[..]) {\n+fn parse_borrowck_mode(dopts: &DebuggingOptions, error_format: ErrorOutputType) -> BorrowckMode {\n+    match dopts.borrowck.as_ref().map(|s| &s[..]) {\n         None | Some(\"migrate\") => BorrowckMode::Migrate,\n         Some(\"mir\") => BorrowckMode::Mir,\n         Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n-    };\n-\n-    if !cg.remark.is_empty() && debuginfo == DebugInfo::None {\n-        early_warn(\n-            error_format,\n-            \"-C remark requires \\\"-C debuginfo=n\\\" to show source locations\",\n-        );\n     }\n+}\n \n+fn parse_externs(\n+    matches: &getopts::Matches,\n+    debugging_opts: &DebuggingOptions,\n+    error_format: ErrorOutputType,\n+    is_unstable_enabled: bool,\n+) -> Externs {\n     if matches.opt_present(\"extern-private\") && !debugging_opts.unstable_options {\n         early_error(\n             ErrorOutputType::default(),\n@@ -2457,10 +2467,14 @@ pub fn build_session_options_and_crate_config(\n         // flag\n         entry.is_private_dep |= private;\n     }\n+    Externs(externs)\n+}\n \n-    let crate_name = matches.opt_str(\"crate-name\");\n-\n-    let remap_path_prefix = matches\n+fn parse_remap_path_prefix(\n+    matches: &getopts::Matches,\n+    error_format: ErrorOutputType\n+) -> Vec<(PathBuf, PathBuf)> {\n+    matches\n         .opt_strs(\"remap-path-prefix\")\n         .into_iter()\n         .map(|remap| {\n@@ -2475,42 +2489,130 @@ pub fn build_session_options_and_crate_config(\n                 ),\n             }\n         })\n-        .collect();\n+        .collect()\n+}\n \n-    (\n-        Options {\n-            crate_types,\n-            optimize: opt_level,\n-            debuginfo,\n-            lint_opts,\n-            lint_cap,\n-            describe_lints,\n-            output_types: OutputTypes(output_types),\n-            search_paths,\n-            maybe_sysroot: sysroot_opt,\n-            target_triple,\n-            test,\n-            incremental,\n-            debugging_opts,\n-            prints,\n-            borrowck_mode,\n-            cg,\n+pub fn build_session_options(matches: &getopts::Matches) -> Options {\n+    let color = parse_color(matches);\n+\n+    let edition = parse_crate_edition(matches);\n+\n+    let (json_rendered, json_artifact_notifications) = parse_json(matches);\n+\n+    let error_format = parse_error_format(matches, color, json_rendered);\n+\n+    let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n+    let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n+        .unwrap_or_else(|e| early_error(error_format, &e[..]));\n+\n+    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n+\n+    let mut debugging_opts = build_debugging_options(matches, error_format);\n+    check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n+\n+    let output_types = parse_output_types(&debugging_opts, matches, error_format);\n+\n+    let mut cg = build_codegen_options(matches, error_format);\n+    let (disable_thinlto, codegen_units) = should_override_cgus_and_disable_thinlto(\n+        &output_types,\n+        matches,\n+        error_format,\n+        cg.codegen_units,\n+    );\n+\n+    check_thread_count(&debugging_opts, error_format);\n+\n+    let incremental = select_incremental_path(&debugging_opts, &cg, error_format);\n+\n+    if debugging_opts.profile && incremental.is_some() {\n+        early_error(\n             error_format,\n-            externs: Externs(externs),\n-            crate_name,\n-            alt_std_name: None,\n-            libs,\n-            unstable_features: UnstableFeatures::from_environment(),\n-            debug_assertions,\n-            actually_rustdoc: false,\n-            cli_forced_codegen_units: codegen_units,\n-            cli_forced_thinlto_off: disable_thinlto,\n-            remap_path_prefix,\n-            edition,\n-            json_artifact_notifications,\n-        },\n-        cfg,\n-    )\n+            \"can't instrument with gcov profiling when compiling incrementally\",\n+        );\n+    }\n+\n+    if cg.profile_generate.enabled() && cg.profile_use.is_some() {\n+        early_error(\n+            error_format,\n+            \"options `-C profile-generate` and `-C profile-use` are exclusive\",\n+        );\n+    }\n+\n+    let is_unstable_enabled = nightly_options::is_unstable_enabled(matches);\n+    let prints = collect_print_requests(\n+        &mut cg,\n+        &mut debugging_opts,\n+        matches,\n+        is_unstable_enabled,\n+        error_format,\n+    );\n+\n+    let cg = cg;\n+\n+    let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n+    let target_triple = parse_target_triple(matches, error_format);\n+    let opt_level = parse_opt_level(matches, &cg, error_format);\n+    // The `-g` and `-C debuginfo` flags specify the same setting, so we want to be able\n+    // to use them interchangeably. See the note above (regarding `-O` and `-C opt-level`)\n+    // for more details.\n+    let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == OptLevel::No);\n+    let debuginfo = select_debuginfo(matches, &cg, error_format);\n+\n+    let mut search_paths = vec![];\n+    for s in &matches.opt_strs(\"L\") {\n+        search_paths.push(SearchPath::from_cli_opt(&s[..], error_format));\n+    }\n+\n+    let libs = parse_libs(matches, error_format);\n+\n+    let test = matches.opt_present(\"test\");\n+\n+    let borrowck_mode = parse_borrowck_mode(&debugging_opts, error_format);\n+\n+    if !cg.remark.is_empty() && debuginfo == DebugInfo::None {\n+        early_warn(\n+            error_format,\n+            \"-C remark requires \\\"-C debuginfo=n\\\" to show source locations\",\n+        );\n+    }\n+\n+    let externs = parse_externs(matches, &debugging_opts, error_format, is_unstable_enabled);\n+\n+    let crate_name = matches.opt_str(\"crate-name\");\n+\n+    let remap_path_prefix = parse_remap_path_prefix(matches, error_format);\n+\n+    Options {\n+        crate_types,\n+        optimize: opt_level,\n+        debuginfo,\n+        lint_opts,\n+        lint_cap,\n+        describe_lints,\n+        output_types,\n+        search_paths,\n+        maybe_sysroot: sysroot_opt,\n+        target_triple,\n+        test,\n+        incremental,\n+        debugging_opts,\n+        prints,\n+        borrowck_mode,\n+        cg,\n+        error_format,\n+        externs,\n+        crate_name,\n+        alt_std_name: None,\n+        libs,\n+        unstable_features: UnstableFeatures::from_environment(),\n+        debug_assertions,\n+        actually_rustdoc: false,\n+        cli_forced_codegen_units: codegen_units,\n+        cli_forced_thinlto_off: disable_thinlto,\n+        remap_path_prefix,\n+        edition,\n+        json_artifact_notifications,\n+    }\n }\n \n pub fn make_crate_type_option() -> RustcOptGroup {"}, {"sha": "061bbdc307fc4bf4d9d03b7251fec8934c1602cf", "filename": "src/librustc/session/config/tests.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e29a6fcfa2bab56728fd3882ded01220ad7421b6/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29a6fcfa2bab56728fd3882ded01220ad7421b6/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs?ref=e29a6fcfa2bab56728fd3882ded01220ad7421b6", "patch": "@@ -3,8 +3,9 @@ use crate::lint;\n use crate::middle::cstore;\n use crate::session::config::{\n     build_configuration,\n-    build_session_options_and_crate_config,\n-    to_crate_config\n+    build_session_options,\n+    to_crate_config,\n+    parse_cfgspecs,\n };\n use crate::session::config::{LtoCli, LinkerPluginLto, SwitchWithOptPath, ExternEntry};\n use crate::session::build_session;\n@@ -18,6 +19,16 @@ use syntax::symbol::sym;\n use syntax::edition::{Edition, DEFAULT_EDITION};\n use syntax;\n use super::Options;\n+use rustc_data_structures::fx::FxHashSet;\n+\n+pub fn build_session_options_and_crate_config(\n+    matches: &getopts::Matches,\n+) -> (Options, FxHashSet<(String, Option<String>)>) {\n+    (\n+        build_session_options(matches),\n+        parse_cfgspecs(matches.opt_strs(\"cfg\")),\n+    )\n+}\n \n impl ExternEntry {\n     fn new_public<S: Into<String>,"}, {"sha": "806afbd1af68c47f9fddf7dcc22c47a200b9f7a0", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e29a6fcfa2bab56728fd3882ded01220ad7421b6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29a6fcfa2bab56728fd3882ded01220ad7421b6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e29a6fcfa2bab56728fd3882ded01220ad7421b6", "patch": "@@ -166,7 +166,8 @@ pub fn run_compiler(\n         None => return Ok(()),\n     };\n \n-    let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n+    let sopts = config::build_session_options(&matches);\n+    let cfg = config::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n \n     let mut dummy_config = |sopts, cfg, diagnostic_output| {\n         let mut config = interface::Config {"}]}