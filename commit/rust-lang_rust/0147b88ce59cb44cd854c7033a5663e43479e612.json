{"sha": "0147b88ce59cb44cd854c7033a5663e43479e612", "node_id": "C_kwDOAAsO6NoAKDAxNDdiODhjZTU5Y2I0NGNkODU0YzcwMzNhNTY2M2U0MzQ3OWU2MTI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-03T19:44:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-03T19:44:50Z"}, "message": "use binary_op over overflowing_binary_op", "tree": {"sha": "76d5e660b3a0c478b0d0153df1a1b76640863a34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d5e660b3a0c478b0d0153df1a1b76640863a34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0147b88ce59cb44cd854c7033a5663e43479e612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0147b88ce59cb44cd854c7033a5663e43479e612", "html_url": "https://github.com/rust-lang/rust/commit/0147b88ce59cb44cd854c7033a5663e43479e612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0147b88ce59cb44cd854c7033a5663e43479e612/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c3f424b9ead2d665104ef96547e070053836c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c3f424b9ead2d665104ef96547e070053836c0", "html_url": "https://github.com/rust-lang/rust/commit/80c3f424b9ead2d665104ef96547e070053836c0"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "a6ef56a0c20453dbaa7db2fa0043617ddae719ad", "filename": "src/data_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0147b88ce59cb44cd854c7033a5663e43479e612/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0147b88ce59cb44cd854c7033a5663e43479e612/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=0147b88ce59cb44cd854c7033a5663e43479e612", "patch": "@@ -553,7 +553,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         let this = self.eval_context_mut();\n \n         let old = this.allow_data_races_mut(|this| this.read_immediate(&place.into()))?;\n-        let lt = this.overflowing_binary_op(mir::BinOp::Lt, &old, &rhs)?.0.to_bool()?;\n+        let lt = this.binary_op(mir::BinOp::Lt, &old, &rhs)?.to_scalar()?.to_bool()?;\n \n         let new_val = if min {\n             if lt { &old } else { &rhs }\n@@ -593,11 +593,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         // Read as immediate for the sake of `binary_op()`\n         let old = this.allow_data_races_mut(|this| this.read_immediate(&(place.into())))?;\n         // `binary_op` will bail if either of them is not a scalar.\n-        let eq = this.overflowing_binary_op(mir::BinOp::Eq, &old, expect_old)?.0;\n+        let eq = this.binary_op(mir::BinOp::Eq, &old, expect_old)?;\n         // If the operation would succeed, but is \"weak\", fail some portion\n         // of the time, based on `rate`.\n         let rate = this.memory.extra.cmpxchg_weak_failure_rate;\n-        let cmpxchg_success = eq.to_bool()?\n+        let cmpxchg_success = eq.to_scalar()?.to_bool()?\n             && (!can_fail_spuriously || this.memory.extra.rng.get_mut().gen::<f64>() < rate);\n         let res = Immediate::ScalarPair(\n             old.to_scalar_or_uninit(),"}]}