{"sha": "29f36362827dc97bf5710482242c71e6a73f005d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZjM2MzYyODI3ZGM5N2JmNTcxMDQ4MjI0MmM3MWU2YTczZjAwNWQ=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-11T17:22:34Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Add explanations to tests", "tree": {"sha": "bca5d3783f9664473b8974c399130c48e890445e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca5d3783f9664473b8974c399130c48e890445e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f36362827dc97bf5710482242c71e6a73f005d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f36362827dc97bf5710482242c71e6a73f005d", "html_url": "https://github.com/rust-lang/rust/commit/29f36362827dc97bf5710482242c71e6a73f005d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f36362827dc97bf5710482242c71e6a73f005d/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcff5a78b3ae8b3803928386755ee56e72eafa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcff5a78b3ae8b3803928386755ee56e72eafa81", "html_url": "https://github.com/rust-lang/rust/commit/bcff5a78b3ae8b3803928386755ee56e72eafa81"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "583befed1e8287bf8d82f23f38a71f3e24a4a71b", "filename": "src/test/compile-fail/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can't pass other types for !\n+\n #![feature(never_type)]\n \n fn foo(x: !) -> ! {"}, {"sha": "57e0bca6a6d770a36b7b43e09671e1bdbcff8b7a", "filename": "src/test/compile-fail/never-assign-dead-code.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that an assignment of type ! makes the rest of the block dead code.\n+\n #![feature(never_type)]\n #![deny(unused, unreachable_code)]\n "}, {"sha": "53d96aaf4fe89ad95c8e7350eac5362e0599e7fe", "filename": "src/test/compile-fail/never-assign-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can't use another type in place of !\n+\n #![feature(never_type)]\n \n fn main() {"}, {"sha": "11b9f412957eb52c2ef5c5da3241c942a13733bd", "filename": "src/test/compile-fail/never-disabled.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-disabled.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that ! errors when used in illegal positions with feature(never_type) disabled\n+\n trait Foo {\n     type Wub;\n }"}, {"sha": "ca7b715547d2596b8dc73d398ddbbb0b53533574", "filename": "src/test/compile-fail/never-fallback.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Fnever-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-fallback.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that diverging types default to ! when feature(never_type) is enabled. This test is the\n+// same as run-pass/unit-fallback.rs except that ! is enabled.\n+\n #![feature(never_type)]\n \n trait Balls: Sized {"}, {"sha": "cec59faa918bc6a9146846ec440088388f3755af", "filename": "src/test/compile-fail/return-from-diverging.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Freturn-from-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Freturn-from-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freturn-from-diverging.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that return another type in place of ! raises a type mismatch.\n+\n fn fail() -> ! {\n     return \"wow\"; //~ ERROR mismatched types\n }"}, {"sha": "ae2a325b24a9236d5fede3ea2d6a9ce2f1218437", "filename": "src/test/compile-fail/return-unit-from-diverging.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Freturn-unit-from-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Fcompile-fail%2Freturn-unit-from-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freturn-unit-from-diverging.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we get the usual error that we'd get for any other return type and not something about\n+// diverging functions not being able to return.\n+\n fn fail() -> ! {\n     return; //~ ERROR in a function whose return type is not\n }"}, {"sha": "ccdb1ca15bba019f10811f2591326986990d1c00", "filename": "src/test/run-fail/adjust_never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fadjust_never.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that a variable of type ! can coerce to another type.\n+\n #![feature(never_type)]\n \n // error-pattern:explicit"}, {"sha": "95101e70db95192aae510e6593b4a6175cbfa902", "filename": "src/test/run-fail/call-fn-never-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can use a ! for an argument of type !\n+\n // error-pattern:wowzers!\n \n #![feature(never_type)]"}, {"sha": "acd002494f4eea001af3e740ecf2660c2e78420e", "filename": "src/test/run-fail/cast-never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fcast-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fcast-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcast-never.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can explicitly cast ! to another type\n+\n #![feature(never_type)]\n \n // error-pattern:explicit"}, {"sha": "345674f3f522ad0c2f914a8c4c7c2c5e0bf732ab", "filename": "src/test/run-fail/never-associated-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can use ! as an associated type.\n+\n #![feature(never_type)]\n \n // error-pattern:kapow!"}, {"sha": "826ca3a08c0e1dc5e67c30aa80b2c30fef3c33ac", "filename": "src/test/run-fail/never-type-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can use ! as an argument to a trait impl.\n+\n // error-pattern:oh no!\n \n #![feature(never_type)]"}, {"sha": "4cd93ac7e1a5d23fd9e45cd12ef757a5c7f0013c", "filename": "src/test/run-fail/return-never-coerce.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Freturn-never-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-fail%2Freturn-never-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Freturn-never-coerce.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that ! coerces to other types.\n+\n // error-pattern:aah!\n \n fn call_another_fn<T, F: FnOnce() -> T>(f: F) -> T {"}, {"sha": "4bb4e0128afa85d56b3ffab77018cc6ac2158a0c", "filename": "src/test/run-pass/impl-for-never.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can call static methods on ! both directly and when it appears in a generic\n+\n #![feature(never_type)]\n \n trait StringifyType {"}, {"sha": "5c0af392f44df27c659d6cebedccf666c1c4dee7", "filename": "src/test/run-pass/never-result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever-result.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that we can extract a ! through pattern matching then use it as several different types.\n+\n #![feature(never_type)]\n \n fn main() {"}, {"sha": "dfba5d2c3da0a754b7d1ac92113402f5d8778886", "filename": "src/test/run-pass/never_coercions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Fnever_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Fnever_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever_coercions.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that having something of type ! doesn't screw up type-checking and that it coerces to the\n+// LUB type of the other match arms.\n+\n fn main() {\n     let v: Vec<u32> = Vec::new();\n     match 0u32 {"}, {"sha": "c5c337dc0823e9828f47456a1a783e64b5b6281a", "filename": "src/test/run-pass/unit-fallback.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Funit-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f36362827dc97bf5710482242c71e6a73f005d/src%2Ftest%2Frun-pass%2Funit-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-fallback.rs?ref=29f36362827dc97bf5710482242c71e6a73f005d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that diverging types default to () (with feature(never_type) disabled).\n+\n trait Balls: Sized {\n     fn smeg() -> Result<Self, ()>;\n }"}]}