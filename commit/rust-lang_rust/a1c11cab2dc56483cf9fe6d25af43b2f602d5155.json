{"sha": "a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzExY2FiMmRjNTY0ODNjZjlmZTZkMjVhZjQzYjJmNjAyZDUxNTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-30T02:23:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-30T02:23:15Z"}, "message": "rustc: Make `<=`, `>=`, and `>` use traits as well", "tree": {"sha": "7eb884301bb31d4bed8d99c26cd38109b64ac41e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eb884301bb31d4bed8d99c26cd38109b64ac41e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "html_url": "https://github.com/rust-lang/rust/commit/a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d3633c0b66c247b97f721653d33264ddfc680f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d3633c0b66c247b97f721653d33264ddfc680f", "html_url": "https://github.com/rust-lang/rust/commit/70d3633c0b66c247b97f721653d33264ddfc680f"}], "stats": {"total": 215, "additions": 192, "deletions": 23}, "files": [{"sha": "d876a9c679f363106f4de60c09ff8fed6ff277f6", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -42,6 +42,24 @@ impl package : cmp::Ord {\n         if self.versions.lt(other.versions) { return true; }\n         return false;\n     }\n+    pure fn le(&&other: package) -> bool {\n+        if self.name.lt(other.name) { return true; }\n+        if other.name.lt(self.name) { return false; }\n+        if self.uuid.lt(other.uuid) { return true; }\n+        if other.uuid.lt(self.uuid) { return false; }\n+        if self.url.lt(other.url) { return true; }\n+        if other.url.lt(self.url) { return false; }\n+        if self.method.lt(other.method) { return true; }\n+        if other.method.lt(self.method) { return false; }\n+        if self.description.lt(other.description) { return true; }\n+        if other.description.lt(self.description) { return false; }\n+        if self.tags.lt(other.tags) { return true; }\n+        if other.tags.lt(self.tags) { return false; }\n+        if self.versions.le(other.versions) { return true; }\n+        return false;\n+    }\n+    pure fn ge(&&other: package) -> bool { !other.lt(self) }\n+    pure fn gt(&&other: package) -> bool { !other.le(self) }\n }\n \n type local_package = {"}, {"sha": "73676f1bc4c4529e5428fcd4d41978b6df240055", "filename": "src/libcore/box.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -19,6 +19,9 @@ impl<T:Eq> @const T : Eq {\n \n impl<T:Ord> @const T : Ord {\n     pure fn lt(&&other: @const T) -> bool { *self < *other }\n+    pure fn le(&&other: @const T) -> bool { *self <= *other }\n+    pure fn ge(&&other: @const T) -> bool { *self >= *other }\n+    pure fn gt(&&other: @const T) -> bool { *self > *other }\n }\n \n #[test]"}, {"sha": "6647963bc5e7785cdcfefb9040fc9e870b0a1778", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -9,11 +9,17 @@\n #[lang=\"ord\"]\n trait Ord {\n     pure fn lt(&&other: self) -> bool;\n+    pure fn le(&&other: self) -> bool;\n+    pure fn ge(&&other: self) -> bool;\n+    pure fn gt(&&other: self) -> bool;\n }\n \n #[cfg(test)]\n trait Ord {\n     pure fn lt(&&other: self) -> bool;\n+    pure fn le(&&other: self) -> bool;\n+    pure fn ge(&&other: self) -> bool;\n+    pure fn gt(&&other: self) -> bool;\n }\n \n #[cfg(notest)]\n@@ -38,3 +44,12 @@ pure fn le<T: Ord Eq>(v1: &T, v2: &T) -> bool {\n pure fn eq<T: Eq>(v1: &T, v2: &T) -> bool {\n     v1.eq(v2)\n }\n+\n+pure fn ge<T: Ord>(v1: &T, v2: &T) -> bool {\n+    v1.ge(v2)\n+}\n+\n+pure fn gt<T: Ord>(v1: &T, v2: &T) -> bool {\n+    v1.gt(v2)\n+}\n+"}, {"sha": "32fbcf209f6fc8e97650eb67c381642bef83720e", "filename": "src/libcore/float.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -421,6 +421,9 @@ impl float: Eq {\n \n impl float: Ord {\n     pure fn lt(&&other: float) -> bool { self < other }\n+    pure fn le(&&other: float) -> bool { self <= other }\n+    pure fn ge(&&other: float) -> bool { self >= other }\n+    pure fn gt(&&other: float) -> bool { self > other }\n }\n \n impl float: num::Num {"}, {"sha": "6b572d12626279effb83c76b29d7d2c655d09bba", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -68,9 +68,10 @@ pure fn abs(i: T) -> T {\n }\n \n impl T: Ord {\n-    pure fn lt(&&other: T) -> bool {\n-        return self < other;\n-    }\n+    pure fn lt(&&other: T) -> bool { return self < other; }\n+    pure fn le(&&other: T) -> bool { return self <= other; }\n+    pure fn ge(&&other: T) -> bool { return self >= other; }\n+    pure fn gt(&&other: T) -> bool { return self > other; }\n }\n \n impl T: Eq {"}, {"sha": "0c4e9a7c35631c995056c686cc952e5b4f854080", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -188,6 +188,21 @@ impl<T> *const T : Ord {\n         let b: uint = unsafe::reinterpret_cast(other);\n         return a < b;\n     }\n+    pure fn le(&&other: *const T) -> bool unsafe {\n+        let a: uint = unsafe::reinterpret_cast(self);\n+        let b: uint = unsafe::reinterpret_cast(other);\n+        return a <= b;\n+    }\n+    pure fn ge(&&other: *const T) -> bool unsafe {\n+        let a: uint = unsafe::reinterpret_cast(self);\n+        let b: uint = unsafe::reinterpret_cast(other);\n+        return a >= b;\n+    }\n+    pure fn gt(&&other: *const T) -> bool unsafe {\n+        let a: uint = unsafe::reinterpret_cast(self);\n+        let b: uint = unsafe::reinterpret_cast(other);\n+        return a > b;\n+    }\n }\n \n // Equality for region pointers\n@@ -199,9 +214,10 @@ impl<T:Eq> &const T : Eq {\n \n // Comparison for region pointers\n impl<T:Ord> &const T : Ord {\n-    pure fn lt(&&other: &const T) -> bool {\n-        return *self < *other;\n-    }\n+    pure fn lt(&&other: &const T) -> bool { *self < *other }\n+    pure fn le(&&other: &const T) -> bool { *self <= *other }\n+    pure fn ge(&&other: &const T) -> bool { *self >= *other }\n+    pure fn gt(&&other: &const T) -> bool { *self > *other }\n }\n \n #[test]"}, {"sha": "4564bd2cc1387c8f7f72ae4aaa2d8d19d424c5e7", "filename": "src/libcore/str.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -707,7 +707,30 @@ pure fn lt(a: &str, b: &str) -> bool {\n }\n \n /// Bytewise less than or equal\n-pure fn le(a: &~str, b: &~str) -> bool { *a <= *b }\n+pure fn le(a: &str, b: &str) -> bool {\n+    let (a_len, b_len) = (a.len(), b.len());\n+    let mut end = uint::min(&a_len, &b_len);\n+\n+    let mut i = 0;\n+    while i < end {\n+        let (c_a, c_b) = (a[i], b[i]);\n+        if c_a < c_b { return true; }\n+        if c_a > c_b { return false; }\n+        i += 1;\n+    }\n+\n+    return a_len <= b_len;\n+}\n+\n+/// Bytewise greater than or equal\n+pure fn ge(a: &str, b: &str) -> bool {\n+    !lt(b, a)\n+}\n+\n+/// Bytewise greater than\n+pure fn gt(a: &str, b: &str) -> bool {\n+    !le(b, a)\n+}\n \n impl &str: Eq {\n     #[inline(always)]\n@@ -733,16 +756,34 @@ impl @str: Eq {\n impl ~str : Ord {\n     #[inline(always)]\n     pure fn lt(&&other: ~str) -> bool { lt(self, other) }\n+    #[inline(always)]\n+    pure fn le(&&other: ~str) -> bool { le(self, other) }\n+    #[inline(always)]\n+    pure fn ge(&&other: ~str) -> bool { ge(self, other) }\n+    #[inline(always)]\n+    pure fn gt(&&other: ~str) -> bool { gt(self, other) }\n }\n \n impl &str : Ord {\n     #[inline(always)]\n     pure fn lt(&&other: &str) -> bool { lt(self, other) }\n+    #[inline(always)]\n+    pure fn le(&&other: &str) -> bool { le(self, other) }\n+    #[inline(always)]\n+    pure fn ge(&&other: &str) -> bool { ge(self, other) }\n+    #[inline(always)]\n+    pure fn gt(&&other: &str) -> bool { gt(self, other) }\n }\n \n impl @str : Ord {\n     #[inline(always)]\n     pure fn lt(&&other: @str) -> bool { lt(self, other) }\n+    #[inline(always)]\n+    pure fn le(&&other: @str) -> bool { le(self, other) }\n+    #[inline(always)]\n+    pure fn ge(&&other: @str) -> bool { ge(self, other) }\n+    #[inline(always)]\n+    pure fn gt(&&other: @str) -> bool { gt(self, other) }\n }\n \n /// String hash function"}, {"sha": "2f34e69573f947803da7a72811937aecbf6fa655", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -96,6 +96,22 @@ impl<A: Ord, B: Ord> (A, B): Ord {\n             }\n         }\n     }\n+    pure fn le(&&other: (A, B)) -> bool {\n+        match self {\n+            (self_a, self_b) => {\n+                match other {\n+                    (other_a, other_b) => {\n+                        if self_a.lt(other_a) { return true; }\n+                        if other_a.lt(self_a) { return false; }\n+                        if self_b.le(other_b) { return true; }\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    pure fn ge(&&other: (A, B)) -> bool { !other.lt(self) }\n+    pure fn gt(&&other: (A, B)) -> bool { !other.ge(self) }\n }\n \n impl<A: Eq, B: Eq, C: Eq> (A, B, C): Eq {\n@@ -133,6 +149,24 @@ impl<A: Ord, B: Ord, C: Ord> (A, B, C): Ord {\n             }\n         }\n     }\n+    pure fn le(&&other: (A, B, C)) -> bool {\n+        match self {\n+            (self_a, self_b, self_c) => {\n+                match other {\n+                    (other_a, other_b, other_c) => {\n+                        if self_a.lt(other_a) { return true; }\n+                        if other_a.lt(self_a) { return false; }\n+                        if self_b.lt(other_b) { return true; }\n+                        if other_b.lt(self_b) { return false; }\n+                        if self_c.le(other_c) { return true; }\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    pure fn ge(&&other: (A, B, C)) -> bool { !other.lt(self) }\n+    pure fn gt(&&other: (A, B, C)) -> bool { !other.ge(self) }\n }\n \n #[test]"}, {"sha": "5119a5dd562d46243bda81db0b233bcb6640c0cc", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -61,9 +61,10 @@ pure fn compl(i: T) -> T {\n }\n \n impl T: Ord {\n-    pure fn lt(&&other: T) -> bool {\n-        return self < other;\n-    }\n+    pure fn lt(&&other: T) -> bool { self < other }\n+    pure fn le(&&other: T) -> bool { self <= other }\n+    pure fn ge(&&other: T) -> bool { self >= other }\n+    pure fn gt(&&other: T) -> bool { self > other }\n }\n \n impl T: Eq {"}, {"sha": "a5e624079b7e4d451265d1bbd4e2acce64414f56", "filename": "src/libcore/uniq.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funiq.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -8,5 +8,8 @@ impl<T:Eq> ~const T : Eq {\n \n impl<T:Ord> ~const T : Ord {\n     pure fn lt(&&other: ~const T) -> bool { *self < *other }\n+    pure fn le(&&other: ~const T) -> bool { *self <= *other }\n+    pure fn ge(&&other: ~const T) -> bool { *self >= *other }\n+    pure fn gt(&&other: ~const T) -> bool { *self > *other }\n }\n "}, {"sha": "dcdea639084a25fa1aef7ac2cd8a8de450adf266", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -1443,25 +1443,55 @@ pure fn lt<T: Ord>(a: &[T], b: &[T]) -> bool {\n     return a_len < b_len;\n }\n \n+pure fn le<T: Ord>(a: &[T], b: &[T]) -> bool {\n+    let (a_len, b_len) = (a.len(), b.len());\n+    let mut end = uint::min(&a_len, &b_len);\n+\n+    let mut i = 0;\n+    while i < end {\n+        let (c_a, c_b) = (&a[i], &b[i]);\n+        if *c_a < *c_b { return true; }\n+        if *c_a > *c_b { return false; }\n+        i += 1;\n+    }\n+\n+    return a_len <= b_len;\n+}\n+\n+pure fn ge<T: Ord>(a: &[T], b: &[T]) -> bool { !lt(b, a) }\n+pure fn gt<T: Ord>(a: &[T], b: &[T]) -> bool { !le(b, a) }\n+\n impl<T: Ord> &[T]: Ord {\n     #[inline(always)]\n-    pure fn lt(&&other: &[T]) -> bool {\n-        lt(self, other)\n-    }\n+    pure fn lt(&&other: &[T]) -> bool { lt(self, other) }\n+    #[inline(always)]\n+    pure fn le(&&other: &[T]) -> bool { le(self, other) }\n+    #[inline(always)]\n+    pure fn ge(&&other: &[T]) -> bool { ge(self, other) }\n+    #[inline(always)]\n+    pure fn gt(&&other: &[T]) -> bool { gt(self, other) }\n }\n \n impl<T: Ord> ~[T]: Ord {\n     #[inline(always)]\n-    pure fn lt(&&other: ~[T]) -> bool {\n-        lt(self, other)\n-    }\n+    pure fn lt(&&other: ~[T]) -> bool { lt(self, other) }\n+    #[inline(always)]\n+    pure fn le(&&other: ~[T]) -> bool { le(self, other) }\n+    #[inline(always)]\n+    pure fn ge(&&other: ~[T]) -> bool { ge(self, other) }\n+    #[inline(always)]\n+    pure fn gt(&&other: ~[T]) -> bool { gt(self, other) }\n }\n \n impl<T: Ord> @[T]: Ord {\n     #[inline(always)]\n-    pure fn lt(&&other: @[T]) -> bool {\n-        lt(self, other)\n-    }\n+    pure fn lt(&&other: @[T]) -> bool { lt(self, other) }\n+    #[inline(always)]\n+    pure fn le(&&other: @[T]) -> bool { le(self, other) }\n+    #[inline(always)]\n+    pure fn ge(&&other: @[T]) -> bool { ge(self, other) }\n+    #[inline(always)]\n+    pure fn gt(&&other: @[T]) -> bool { gt(self, other) }\n }\n \n #[cfg(notest)]"}, {"sha": "2c67ae8b262858b375ca9984bccef1ea08214788", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -217,7 +217,7 @@ fn print_failures(st: console_test_state) {\n     st.out.write_line(~\"\\nfailures:\");\n     let failures = copy st.failures;\n     let failures = vec::map(failures, |test| test.name);\n-    let failures = sort::merge_sort(str::le, failures);\n+    let failures = sort::merge_sort(|x, y| str::le(*x, *y), failures);\n     for vec::each(failures) |name| {\n         st.out.write_line(fmt!(\"    %s\", name));\n     }\n@@ -371,7 +371,7 @@ fn filter_tests(opts: test_opts,\n     // Sort the tests alphabetically\n     filtered = {\n         pure fn lteq(t1: &test_desc, t2: &test_desc) -> bool {\n-            str::le(&t1.name, &t2.name)\n+            str::le(t1.name, t2.name)\n         }\n         sort::merge_sort(lteq, filtered)\n     };"}, {"sha": "8e9ca7bd098d3548a171be220f162a5b0876d436", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -106,8 +106,11 @@ pure fn binop_to_method_name(op: binop) -> Option<~str> {\n       shl => return Some(~\"shl\"),\n       shr => return Some(~\"shr\"),\n       lt => return Some(~\"lt\"),\n+      le => return Some(~\"le\"),\n+      ge => return Some(~\"ge\"),\n+      gt => return Some(~\"gt\"),\n       eq => return Some(~\"eq\"),\n-      and | or | le | ne | ge | gt => return None\n+      and | or | ne => return None\n     }\n }\n "}, {"sha": "ba3155bb07dbc6c2dff999c9d57c48f95752ebb4", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c11cab2dc56483cf9fe6d25af43b2f602d5155/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=a1c11cab2dc56483cf9fe6d25af43b2f602d5155", "patch": "@@ -4341,7 +4341,8 @@ struct Resolver {\n                 self.add_fixed_trait_for_expr(expr.id,\n                                               self.lang_items.shr_trait);\n             }\n-            expr_binary(lt, _, _) => {\n+            expr_binary(lt, _, _) | expr_binary(le, _, _) |\n+            expr_binary(ge, _, _) | expr_binary(gt, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n                                               self.lang_items.ord_trait);\n             }"}]}