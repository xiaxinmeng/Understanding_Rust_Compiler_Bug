{"sha": "63176834c2a9cc6718a4e7b20238b607331f1f1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTc2ODM0YzJhOWNjNjcxOGE0ZTdiMjAyMzhiNjA3MzMxZjFmMWQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-18T15:17:53Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-23T01:18:11Z"}, "message": "cargo dev crater: fixes and debug prints", "tree": {"sha": "f111cad5320fa93b49700626ace4938f15699e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f111cad5320fa93b49700626ace4938f15699e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63176834c2a9cc6718a4e7b20238b607331f1f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63176834c2a9cc6718a4e7b20238b607331f1f1d", "html_url": "https://github.com/rust-lang/rust/commit/63176834c2a9cc6718a4e7b20238b607331f1f1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63176834c2a9cc6718a4e7b20238b607331f1f1d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d85942cf4fee5148a6b994c9ec8bd1190a5122", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d85942cf4fee5148a6b994c9ec8bd1190a5122", "html_url": "https://github.com/rust-lang/rust/commit/30d85942cf4fee5148a6b994c9ec8bd1190a5122"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "cade6c38bc15d18b16e6c1a2a369c86faf514a74", "filename": "clippy_dev/src/crater.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63176834c2a9cc6718a4e7b20238b607331f1f1d/clippy_dev%2Fsrc%2Fcrater.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63176834c2a9cc6718a4e7b20238b607331f1f1d/clippy_dev%2Fsrc%2Fcrater.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fcrater.rs?ref=63176834c2a9cc6718a4e7b20238b607331f1f1d", "patch": "@@ -17,7 +17,7 @@ struct Krate {\n }\n \n impl KrateSource {\n-    fn new(version: &str, name: &str) -> Self {\n+    fn new(name: &str, version: &str) -> Self {\n         KrateSource {\n             version: version.into(),\n             name: name.into(),\n@@ -33,19 +33,24 @@ impl KrateSource {\n             \"https://crates.io/api/v1/crates/{}/{}/download\",\n             self.name, self.version\n         );\n-        print!(\"Downloading {}, {}\", self.name, self.version);\n+        println!(\"Downloading {}, {} / {}\", self.name, self.version, url);\n+        std::fs::create_dir(\"target/crater/\").unwrap();\n \n-        let krate_name = format!(\"{}-{}.crate\", &self.name, &self.version);\n+        std::fs::create_dir(&krate_download_dir).unwrap();\n+        std::fs::create_dir(&extract_dir).unwrap();\n+\n+        let krate_name = format!(\"{}-{}.crate.tar.gz\", &self.name, &self.version);\n         let mut krate_dest = std::fs::File::create(krate_download_dir.join(krate_name)).unwrap();\n         let mut krate_req = ureq::get(&url).call().unwrap().into_reader();\n         std::io::copy(&mut krate_req, &mut krate_dest).unwrap();\n-\n-        // extract\n         let krate = krate_dest;\n-        let tar = flate2::read::GzDecoder::new(krate);\n+        dbg!(&krate);\n+        let tar = flate2::read::GzDecoder::new(&krate);\n         let mut archiv = tar::Archive::new(tar);\n-        let extracted_path = extract_dir.join(format!(\"{}-{}/\", self.name, self.version));\n+        let extracted_path = extract_dir.join(format!(\"{}-{}\", self.name, self.version));\n+      // println!(\"ar:  p: {:?}\", &krate, extracted_path);\n         archiv.unpack(&extracted_path).expect(\"Failed to extract!\");\n+        // extract\n \n         Krate {\n             version: self.version.clone(),\n@@ -71,20 +76,23 @@ fn build_clippy() {\n // the main fn\n pub fn run() {\n     let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\");\n-    let clippy_driver_path: PathBuf = PathBuf::from(\"target/debug/cargo-driver\");\n+    let clippy_driver_path: PathBuf = PathBuf::from(\"target/debug/clippy-driver\");\n \n     // crates we want to check:\n     let krates: Vec<KrateSource> = vec![KrateSource::new(\"cargo\", \"0.49.0\"), KrateSource::new(\"regex\", \"1.4.2\")];\n \n+    println!(\"Compiling clippy...\");\n     build_clippy();\n+    println!(\"Done compiling\");\n+\n     // assert that clippy is found\n     assert!(\n         cargo_clippy_path.is_file(),\n-        \"target/debug/cargo-clippy binary not found!\"\n+        \"target/debug/cargo-clippy binary not found! {}\", cargo_clippy_path.display()\n     );\n     assert!(\n         clippy_driver_path.is_file(),\n-        \"target/debug/clippy-driver binary not found!\"\n+        \"target/debug/clippy-driver binary not found! {}\", clippy_driver_path.display()\n     );\n \n     // download and extract the crates, then run clippy on them and collect clippys warnings"}]}