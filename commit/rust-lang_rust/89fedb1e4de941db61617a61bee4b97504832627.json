{"sha": "89fedb1e4de941db61617a61bee4b97504832627", "node_id": "C_kwDOAAsO6NoAKDg5ZmVkYjFlNGRlOTQxZGI2MTYxN2E2MWJlZTRiOTc1MDQ4MzI2Mjc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-27T09:11:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-27T09:11:18Z"}, "message": "Sync from rust 04006d8e3b5043131ec56a5f3605b1edcb33194d", "tree": {"sha": "8f58ea2b583f44fbab2c00bec0ff028d0e2f648e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f58ea2b583f44fbab2c00bec0ff028d0e2f648e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89fedb1e4de941db61617a61bee4b97504832627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89fedb1e4de941db61617a61bee4b97504832627", "html_url": "https://github.com/rust-lang/rust/commit/89fedb1e4de941db61617a61bee4b97504832627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89fedb1e4de941db61617a61bee4b97504832627/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55994730848b435b6241f6027ea23573685f4e6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55994730848b435b6241f6027ea23573685f4e6b", "html_url": "https://github.com/rust-lang/rust/commit/55994730848b435b6241f6027ea23573685f4e6b"}, {"sha": "500e22e340ee260c3fcd0e34e20e5c5d71df04bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/500e22e340ee260c3fcd0e34e20e5c5d71df04bf", "html_url": "https://github.com/rust-lang/rust/commit/500e22e340ee260c3fcd0e34e20e5c5d71df04bf"}], "stats": {"total": 108, "additions": 86, "deletions": 22}, "files": [{"sha": "61d40702a32842d2769040023e6a59f0c1c2fcc3", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89fedb1e4de941db61617a61bee4b97504832627/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/89fedb1e4de941db61617a61bee4b97504832627/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=89fedb1e4de941db61617a61bee4b97504832627", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n crate-type = [\"dylib\"]"}, {"sha": "15bb90678059daa9be2156909d3b127a9805dfb1", "filename": "src/abi/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/89fedb1e4de941db61617a61bee4b97504832627/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fedb1e4de941db61617a61bee4b97504832627/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=89fedb1e4de941db61617a61bee4b97504832627", "patch": "@@ -5,7 +5,7 @@ mod pass_mode;\n mod returning;\n \n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n \n@@ -53,7 +53,11 @@ pub(crate) fn get_function_sig<'tcx>(\n     inst: Instance<'tcx>,\n ) -> Signature {\n     assert!(!inst.substs.needs_infer());\n-    clif_sig_from_fn_abi(tcx, triple, &FnAbi::of_instance(&RevealAllLayoutCx(tcx), inst, &[]))\n+    clif_sig_from_fn_abi(\n+        tcx,\n+        triple,\n+        &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, ty::List::empty()),\n+    )\n }\n \n /// Instance must be monomorphized\n@@ -350,14 +354,13 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     let extra_args = &args[fn_sig.inputs().len()..];\n-    let extra_args = extra_args\n-        .iter()\n-        .map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx)))\n-        .collect::<Vec<_>>();\n+    let extra_args = fx\n+        .tcx\n+        .mk_type_list(extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))));\n     let fn_abi = if let Some(instance) = instance {\n-        FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), instance, &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, extra_args)\n     } else {\n-        FnAbi::of_fn_ptr(&RevealAllLayoutCx(fx.tcx), fn_ty.fn_sig(fx.tcx), &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), extra_args)\n     };\n \n     let is_cold = instance\n@@ -525,7 +528,8 @@ pub(crate) fn codegen_drop<'tcx>(\n                     def: ty::InstanceDef::Virtual(drop_instance.def_id(), 0),\n                     substs: drop_instance.substs,\n                 };\n-                let fn_abi = FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), virtual_drop, &[]);\n+                let fn_abi =\n+                    RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, ty::List::empty());\n \n                 let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n                 let sig = fx.bcx.import_signature(sig);\n@@ -534,7 +538,8 @@ pub(crate) fn codegen_drop<'tcx>(\n             _ => {\n                 assert!(!matches!(drop_instance.def, InstanceDef::Virtual(_, _)));\n \n-                let fn_abi = FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), drop_instance, &[]);\n+                let fn_abi =\n+                    RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(drop_instance, ty::List::empty());\n \n                 let arg_value = drop_place.place_ref(\n                     fx,"}, {"sha": "1b30edd293862b1d221cbfb4529c1b9f8883a52e", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89fedb1e4de941db61617a61bee4b97504832627/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fedb1e4de941db61617a61bee4b97504832627/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=89fedb1e4de941db61617a61bee4b97504832627", "patch": "@@ -3,8 +3,7 @@\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n-use rustc_middle::ty::layout::FnAbiExt;\n-use rustc_target::abi::call::FnAbi;\n+use rustc_middle::ty::layout::FnAbiOf;\n \n use crate::constant::ConstantCx;\n use crate::prelude::*;\n@@ -62,7 +61,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         instance,\n         symbol_name,\n         mir,\n-        fn_abi: Some(FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n+        fn_abi: Some(RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, ty::List::empty())),\n \n         bcx,\n         block_map,\n@@ -702,6 +701,13 @@ fn codegen_stmt<'tcx>(\n                     let len = codegen_array_len(fx, place);\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n                 }\n+                Rvalue::ShallowInitBox(ref operand, content_ty) => {\n+                    let content_ty = fx.monomorphize(content_ty);\n+                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n+                    let operand = codegen_operand(fx, operand);\n+                    let operand = operand.load_scalar(fx);\n+                    lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n+                }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n                     let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n                     let content_ty = fx.monomorphize(content_ty);"}, {"sha": "0e84681d9ad94f4c40db9dcff7854c22f6017dd9", "filename": "src/common.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/89fedb1e4de941db61617a61bee4b97504832627/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fedb1e4de941db61617a61bee4b97504832627/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=89fedb1e4de941db61617a61bee4b97504832627", "patch": "@@ -1,5 +1,7 @@\n use rustc_index::vec::IndexVec;\n-use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers};\n+use rustc_middle::ty::layout::{\n+    FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers,\n+};\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -239,7 +241,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) instance: Instance<'tcx>,\n     pub(crate) symbol_name: SymbolName<'tcx>,\n     pub(crate) mir: &'tcx Body<'tcx>,\n-    pub(crate) fn_abi: Option<FnAbi<'tcx, Ty<'tcx>>>,\n+    pub(crate) fn_abi: Option<&'tcx FnAbi<'tcx, Ty<'tcx>>>,\n \n     pub(crate) bcx: FunctionBuilder<'clif>,\n     pub(crate) block_map: IndexVec<BasicBlock, Block>,\n@@ -266,6 +268,20 @@ impl<'tcx> LayoutOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     }\n }\n \n+impl<'tcx> FnAbiOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n+    ) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_fn_abi_err(err, span, fn_abi_request)\n+    }\n+}\n+\n impl<'tcx> layout::HasTyCtxt<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n@@ -378,6 +394,43 @@ impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n     }\n }\n \n+impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n+    ) -> ! {\n+        if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            match fn_abi_request {\n+                FnAbiRequest::OfFnPtr { sig, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_fn_ptr({}, {:?})` failed: {}\",\n+                        sig,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+                FnAbiRequest::OfInstance { instance, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_instance({}, {:?})` failed: {}\",\n+                        instance,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> layout::HasTyCtxt<'tcx> for RevealAllLayoutCx<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.0"}, {"sha": "ba52bd0c648b975fdbb8faa379d4adb606170a4d", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89fedb1e4de941db61617a61bee4b97504832627/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fedb1e4de941db61617a61bee4b97504832627/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=89fedb1e4de941db61617a61bee4b97504832627", "patch": "@@ -129,9 +129,7 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(uv)\n-            if fx.tcx.is_static(uv.def.did) =>\n-        {\n+        ConstKind::Unevaluated(uv) if fx.tcx.is_static(uv.def.did) => {\n             assert!(uv.substs(fx.tcx).is_empty());\n             assert!(uv.promoted.is_none());\n "}, {"sha": "ec846d71960b89863e7cb49e0d9eddf30d5a04fe", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89fedb1e4de941db61617a61bee4b97504832627/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fedb1e4de941db61617a61bee4b97504832627/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=89fedb1e4de941db61617a61bee4b97504832627", "patch": "@@ -61,9 +61,8 @@ use cranelift_codegen::{\n     write::{FuncWriter, PlainWriter},\n };\n \n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_session::config::OutputType;\n-use rustc_target::abi::call::FnAbi;\n \n use crate::prelude::*;\n \n@@ -81,7 +80,10 @@ impl CommentWriter {\n             vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n-                format!(\"abi {:?}\", FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n+                format!(\n+                    \"abi {:?}\",\n+                    RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, ty::List::empty())\n+                ),\n                 String::new(),\n             ]\n         } else {"}]}