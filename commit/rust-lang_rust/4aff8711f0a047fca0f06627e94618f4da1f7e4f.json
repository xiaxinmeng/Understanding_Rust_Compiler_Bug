{"sha": "4aff8711f0a047fca0f06627e94618f4da1f7e4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZmY4NzExZjBhMDQ3ZmNhMGYwNjYyN2U5NDYxOGY0ZGExZjdlNGY=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-01T07:21:32Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-01T17:18:45Z"}, "message": "Fix ICE in vec_box lint and add run-rustfix\n\n`hir::Ty` doesn't seem to know anything about type bounds and\n`cx.tcx.type_of(def_id)` caused an ICE when it was passed a generic type\nwith a bound:\n\n```\nsrc/librustc_typeck/collect.rs:1311: unexpected non-type Node::GenericParam: Type { default: None, synthetic: None }\n```\n\nConverting it to a proper `Ty` fixes the ICE and catches a few more\nplaces where the lint applies.", "tree": {"sha": "8f04b4a0115f57f37bd267b8a9c5784deaec4331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f04b4a0115f57f37bd267b8a9c5784deaec4331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aff8711f0a047fca0f06627e94618f4da1f7e4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxUf3UACgkQtvoGpuDi\nZlvPchAAs9bdGlO0DMN52c/86h7pQ3xVBVT2wb14aeKMbPwJZXcV9/EZ0wsglDdj\nNCdxuUt3VwrwIoebf478A/b7bYKW9/Neqpt2ss0Jk2AQjiTFgDceV634265AOEd3\n4Dk3hXaBRipFHz0ZHJeSHTdK2uI6mUuFuQoiK6Dbbw10aLH/5EqsfUPkhb7P3ocl\nW1ZY1arjezaOf0Y+x8yhsUST5rLPuk4hUuRDevQ7R2V/JVAR4MF9ASRV9XJGQ95n\nr0MzrKsM3qCxwOMANAOVuy58l2OE3Noi0UQHL7Jm8DgPmfwTIgO3s8FviQTJVqFr\nHrSekvHgwFQCUX6sHdTLF/CjNtq/wFXY777z1LIZAKwCvFL9dhKoRD3HsBaVIk+4\nq6H5tB6IitoW4J2sBvJdRkz8YS31nLuPKG5tuBatVJE+WsbN4Qv2B2qjDJZMuVS8\nkH4BhJTmoW4K95lybMuvKl9eCBd9mxj10ARPYnmbKYOlGvAbiuTBNfyEJsLmT3TA\nCDqNJHPMCMmELeOccBbD5+5LrK5WUSmHem5STl5aVuO7+wpeSzcnAUHr2JPezPr5\n5rk98sB2O7mcmXP4H4uj/Jh+srBENUBlkzliov/FgpvueJ6pl1bph5jvZHkFBPz2\nQbf91fayPvSkNGMRyHL1oswLQZRfIhTIazq00wcc0pFPahYvwf0=\n=eBHf\n-----END PGP SIGNATURE-----", "payload": "tree 8f04b4a0115f57f37bd267b8a9c5784deaec4331\nparent 5176a5c4b70423ca1fc4dbaa77ada0f40afdb479\nauthor Philipp Hansch <dev@phansch.net> 1549005692 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1549041525 +0100\n\nFix ICE in vec_box lint and add run-rustfix\n\n`hir::Ty` doesn't seem to know anything about type bounds and\n`cx.tcx.type_of(def_id)` caused an ICE when it was passed a generic type\nwith a bound:\n\n```\nsrc/librustc_typeck/collect.rs:1311: unexpected non-type Node::GenericParam: Type { default: None, synthetic: None }\n```\n\nConverting it to a proper `Ty` fixes the ICE and catches a few more\nplaces where the lint applies.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aff8711f0a047fca0f06627e94618f4da1f7e4f", "html_url": "https://github.com/rust-lang/rust/commit/4aff8711f0a047fca0f06627e94618f4da1f7e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aff8711f0a047fca0f06627e94618f4da1f7e4f/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5176a5c4b70423ca1fc4dbaa77ada0f40afdb479", "url": "https://api.github.com/repos/rust-lang/rust/commits/5176a5c4b70423ca1fc4dbaa77ada0f40afdb479", "html_url": "https://github.com/rust-lang/rust/commit/5176a5c4b70423ca1fc4dbaa77ada0f40afdb479"}], "stats": {"total": 127, "additions": 96, "deletions": 31}, "files": [{"sha": "75e2f75ffcd4623df48b0fa90c0826d32c2bd819", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4aff8711f0a047fca0f06627e94618f4da1f7e4f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aff8711f0a047fca0f06627e94618f4da1f7e4f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4aff8711f0a047fca0f06627e94618f4da1f7e4f", "patch": "@@ -275,26 +275,24 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                         if Some(def_id) == cx.tcx.lang_items().owned_box();\n                         // At this point, we know ty is Box<T>, now get T\n                         if let Some(ref last) = last_path_segment(ty_qpath).args;\n-                        if let Some(ty) = last.args.iter().find_map(|arg| match arg {\n+                        if let Some(boxed_ty) = last.args.iter().find_map(|arg| match arg {\n                             GenericArg::Type(ty) => Some(ty),\n                             GenericArg::Lifetime(_) => None,\n                         });\n-                        if let TyKind::Path(ref ty_qpath) = ty.node;\n-                        let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n-                        if let Some(def_id) = opt_def_id(def);\n-                        let boxed_type = cx.tcx.type_of(def_id);\n-                        if boxed_type.is_sized(cx.tcx.at(ty.span), cx.param_env);\n                         then {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                VEC_BOX,\n-                                hir_ty.span,\n-                                \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n-                                \"try\",\n-                                format!(\"Vec<{}>\", boxed_type),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            return; // don't recurse into the type\n+                            let ty_ty = hir_ty_to_ty(cx.tcx, boxed_ty);\n+                            if ty_ty.is_sized(cx.tcx.at(ty.span), cx.param_env) {\n+                                span_lint_and_sugg(\n+                                    cx,\n+                                    VEC_BOX,\n+                                    hir_ty.span,\n+                                    \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n+                                    \"try\",\n+                                    format!(\"Vec<{}>\", ty_ty),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                return; // don't recurse into the type\n+                            }\n                         }\n                     }\n                 } else if match_def_path(cx.tcx, def_id, &paths::OPTION) {"}, {"sha": "be61fb6b9be613cca8bd66f622644b253af6cabd", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=4aff8711f0a047fca0f06627e94618f4da1f7e4f", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(unused, clippy::needless_pass_by_value)]\n+#![allow(unused, clippy::needless_pass_by_value, clippy::vec_box)]\n #![feature(associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "a56dac8aa232200d14ea6d6e4577891b058f2d82", "filename": "tests/ui/vec_box_sized.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fvec_box_sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fvec_box_sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.fixed?ref=4aff8711f0a047fca0f06627e94618f4da1f7e4f", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+struct SizedStruct(i32);\n+struct UnsizedStruct([i32]);\n+\n+/// The following should trigger the lint\n+mod should_trigger {\n+    use super::SizedStruct;\n+\n+    struct StructWithVecBox {\n+        sized_type: Vec<SizedStruct>,\n+    }\n+\n+    struct A(Vec<SizedStruct>);\n+    struct B(Vec<Vec<u32>>);\n+}\n+\n+/// The following should not trigger the lint\n+mod should_not_trigger {\n+    use super::UnsizedStruct;\n+\n+    struct C(Vec<Box<UnsizedStruct>>);\n+\n+    struct StructWithVecBoxButItsUnsized {\n+        unsized_type: Vec<Box<UnsizedStruct>>,\n+    }\n+\n+    struct TraitVec<T: ?Sized> {\n+        // Regression test for #3720. This was causing an ICE.\n+        inner: Vec<Box<T>>,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "32d1e940f2712d40a776c48d361ce4e36a25a0b1", "filename": "tests/ui/vec_box_sized.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fvec_box_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fvec_box_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.rs?ref=4aff8711f0a047fca0f06627e94618f4da1f7e4f", "patch": "@@ -1,17 +1,36 @@\n-struct SizedStruct {\n-    _a: i32,\n-}\n+// run-rustfix\n \n-struct UnsizedStruct {\n-    _a: [i32],\n-}\n+#![allow(dead_code)]\n+\n+struct SizedStruct(i32);\n+struct UnsizedStruct([i32]);\n+\n+/// The following should trigger the lint\n+mod should_trigger {\n+    use super::SizedStruct;\n \n-struct StructWithVecBox {\n-    sized_type: Vec<Box<SizedStruct>>,\n+    struct StructWithVecBox {\n+        sized_type: Vec<Box<SizedStruct>>,\n+    }\n+\n+    struct A(Vec<Box<SizedStruct>>);\n+    struct B(Vec<Vec<Box<(u32)>>>);\n }\n \n-struct StructWithVecBoxButItsUnsized {\n-    unsized_type: Vec<Box<UnsizedStruct>>,\n+/// The following should not trigger the lint\n+mod should_not_trigger {\n+    use super::UnsizedStruct;\n+\n+    struct C(Vec<Box<UnsizedStruct>>);\n+\n+    struct StructWithVecBoxButItsUnsized {\n+        unsized_type: Vec<Box<UnsizedStruct>>,\n+    }\n+\n+    struct TraitVec<T: ?Sized> {\n+        // Regression test for #3720. This was causing an ICE.\n+        inner: Vec<Box<T>>,\n+    }\n }\n \n fn main() {}"}, {"sha": "b33880b46bd8886344aa40c0ac169b4a294d2a2d", "filename": "tests/ui/vec_box_sized.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fvec_box_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aff8711f0a047fca0f06627e94618f4da1f7e4f/tests%2Fui%2Fvec_box_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.stderr?ref=4aff8711f0a047fca0f06627e94618f4da1f7e4f", "patch": "@@ -1,10 +1,22 @@\n error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n-  --> $DIR/vec_box_sized.rs:10:17\n+  --> $DIR/vec_box_sized.rs:13:21\n    |\n-LL |     sized_type: Vec<Box<SizedStruct>>,\n-   |                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n+LL |         sized_type: Vec<Box<SizedStruct>>,\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n    |\n    = note: `-D clippy::vec-box` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+  --> $DIR/vec_box_sized.rs:16:14\n+   |\n+LL |     struct A(Vec<Box<SizedStruct>>);\n+   |              ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n+\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+  --> $DIR/vec_box_sized.rs:17:18\n+   |\n+LL |     struct B(Vec<Vec<Box<(u32)>>>);\n+   |                  ^^^^^^^^^^^^^^^ help: try: `Vec<u32>`\n+\n+error: aborting due to 3 previous errors\n "}]}