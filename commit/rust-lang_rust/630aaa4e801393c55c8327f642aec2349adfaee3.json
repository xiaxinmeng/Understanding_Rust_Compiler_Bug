{"sha": "630aaa4e801393c55c8327f642aec2349adfaee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMGFhYTRlODAxMzkzYzU1YzgzMjdmNjQyYWVjMjM0OWFkZmFlZTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-21T14:10:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-28T09:48:38Z"}, "message": "avoid some raw ptr casts in BTreeMap", "tree": {"sha": "91f0d3c6c6364464bdc21e545e3e305afe34d906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91f0d3c6c6364464bdc21e545e3e305afe34d906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/630aaa4e801393c55c8327f642aec2349adfaee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/630aaa4e801393c55c8327f642aec2349adfaee3", "html_url": "https://github.com/rust-lang/rust/commit/630aaa4e801393c55c8327f642aec2349adfaee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/630aaa4e801393c55c8327f642aec2349adfaee3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd73df7559be73398679d7f09447379dd0c2098", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd73df7559be73398679d7f09447379dd0c2098", "html_url": "https://github.com/rust-lang/rust/commit/ffd73df7559be73398679d7f09447379dd0c2098"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "8dd4aec136aa8f87dfde191b07e4728c59849243", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/630aaa4e801393c55c8327f642aec2349adfaee3/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630aaa4e801393c55c8327f642aec2349adfaee3/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=630aaa4e801393c55c8327f642aec2349adfaee3", "patch": "@@ -95,8 +95,8 @@ struct LeafNode<K, V> {\n \n     /// The arrays storing the actual data of the node. Only the first `len` elements of each\n     /// array are initialized and valid.\n-    keys: MaybeUninit<[K; CAPACITY]>,\n-    vals: MaybeUninit<[V; CAPACITY]>,\n+    keys: [MaybeUninit<K>; CAPACITY],\n+    vals: [MaybeUninit<V>; CAPACITY],\n }\n \n impl<K, V> LeafNode<K, V> {\n@@ -106,8 +106,11 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: MaybeUninit::uninitialized(),\n-            vals: MaybeUninit::uninitialized(),\n+            // Creating a `[MaybeUninit; N]` array by first creating a\n+            // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n+            // array does not require initialization.\n+            keys: MaybeUninit::uninitialized().into_inner(),\n+            vals: MaybeUninit::uninitialized().into_inner(),\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninitialized(),\n             len: 0\n@@ -626,7 +629,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n         // We cannot be the root, so `as_leaf` is okay\n         unsafe {\n             slice::from_raw_parts(\n-                self.as_leaf().vals.as_ptr() as *const V,\n+                MaybeUninit::first_ptr(&self.as_leaf().vals),\n                 self.len()\n             )\n         }\n@@ -653,7 +656,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         } else {\n             unsafe {\n                 slice::from_raw_parts_mut(\n-                    (*self.as_leaf_mut()).keys.as_mut_ptr() as *mut K,\n+                    MaybeUninit::first_mut_ptr(&mut (*self.as_leaf_mut()).keys),\n                     self.len()\n                 )\n             }\n@@ -664,7 +667,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts_mut(\n-                (*self.as_leaf_mut()).vals.as_mut_ptr() as *mut V,\n+                MaybeUninit::first_mut_ptr(&mut (*self.as_leaf_mut()).vals),\n                 self.len()\n             )\n         }"}]}