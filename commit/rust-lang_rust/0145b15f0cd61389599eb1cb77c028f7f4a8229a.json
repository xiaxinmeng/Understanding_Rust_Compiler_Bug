{"sha": "0145b15f0cd61389599eb1cb77c028f7f4a8229a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDViMTVmMGNkNjEzODk1OTllYjFjYjc3YzAyOGY3ZjRhODIyOWE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-09T16:44:55Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T10:11:45Z"}, "message": "Pass type with params intact as item_type for method callees\n\nThis prevents trans_args from optimizing out nil return types. The\nmethod might be generic, in which case it *will* write to a nil retptr.", "tree": {"sha": "2b2a71143eabcd7cac4b184ca8039854bf7bc984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b2a71143eabcd7cac4b184ca8039854bf7bc984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0145b15f0cd61389599eb1cb77c028f7f4a8229a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0145b15f0cd61389599eb1cb77c028f7f4a8229a", "html_url": "https://github.com/rust-lang/rust/commit/0145b15f0cd61389599eb1cb77c028f7f4a8229a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0145b15f0cd61389599eb1cb77c028f7f4a8229a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef895b96320a9d5c64090bad1c8a147b0431eef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef895b96320a9d5c64090bad1c8a147b0431eef1", "html_url": "https://github.com/rust-lang/rust/commit/ef895b96320a9d5c64090bad1c8a147b0431eef1"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "7fb21547589ab5880fc1c4b8634f5341634e76a9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0145b15f0cd61389599eb1cb77c028f7f4a8229a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145b15f0cd61389599eb1cb77c028f7f4a8229a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=0145b15f0cd61389599eb1cb77c028f7f4a8229a", "patch": "@@ -1313,7 +1313,7 @@ fn make_take_glue(cx: @block_ctxt, v: ValueRef, t: ty::t) {\n     let tcx = bcx_tcx(cx);\n     // NB: v is an *alias* of type t here, not a direct value.\n     bcx = alt ty::struct(tcx, t) {\n-      ty::ty_box(_) {\n+      ty::ty_box(_) | ty::ty_iface(_, _) {\n         incr_refcnt_of_boxed(bcx, Load(bcx, v))\n       }\n       ty::ty_uniq(_) {\n@@ -3078,7 +3078,7 @@ fn trans_cast(cx: @block_ctxt, e: @ast::expr, id: ast::node_id,\n     ret store_in_dest(e_res.bcx, newval, dest);\n }\n \n-fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty0: TypeRef,\n+fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty: TypeRef,\n                   &to_zero: [{v: ValueRef, t: ty::t}],\n                   &to_revoke: [{v: ValueRef, t: ty::t}], e: @ast::expr) ->\n    result {\n@@ -3092,8 +3092,8 @@ fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty0: TypeRef,\n         // For values of type _|_, we generate an\n         // \"undef\" value, as such a value should never\n         // be inspected. It's important for the value\n-        // to have type lldestty0 (the callee's expected type).\n-        val = llvm::LLVMGetUndef(lldestty0);\n+        // to have type lldestty (the callee's expected type).\n+        val = llvm::LLVMGetUndef(lldestty);\n     } else if arg.mode == ast::by_ref || arg.mode == ast::by_val {\n         let copied = false, imm = ty::type_is_immediate(ccx.tcx, e_ty);\n         if arg.mode == ast::by_ref && lv.kind != owned && imm {\n@@ -3134,7 +3134,6 @@ fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty0: TypeRef,\n     }\n \n     if !is_bot && ty::type_contains_params(ccx.tcx, arg.ty) {\n-        let lldestty = lldestty0;\n         val = PointerCast(bcx, val, lldestty);\n     }\n "}, {"sha": "bb17553b2f037ef7b15a3a394f57214c81058d68", "filename": "src/comp/middle/trans_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0145b15f0cd61389599eb1cb77c028f7f4a8229a/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145b15f0cd61389599eb1cb77c028f7f4a8229a/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=0145b15f0cd61389599eb1cb77c028f7f4a8229a", "patch": "@@ -73,7 +73,7 @@ fn trans_vtable_callee(bcx: @block_ctxt, self: ValueRef, dict: ValueRef,\n                        n_method: uint) -> lval_maybe_callee {\n     let bcx = bcx, ccx = bcx_ccx(bcx), tcx = ccx.tcx;\n     let method = ty::iface_methods(tcx, iface_id)[n_method];\n-    let fty = ty::expr_ty(tcx, fld_expr);\n+    let fty = ty::mk_fn(tcx, method.fty);\n     let bare_fn_ty = type_of_fn_from_ty(ccx, ast_util::dummy_sp(),\n                                         fty, *method.tps);\n     let {inputs: bare_inputs, output} = llfn_arg_tys(bare_fn_ty);\n@@ -82,7 +82,7 @@ fn trans_vtable_callee(bcx: @block_ctxt, self: ValueRef, dict: ValueRef,\n                              T_ptr(T_array(T_ptr(fn_ty), n_method + 1u)));\n     let mptr = Load(bcx, GEPi(bcx, vtable, [0, n_method as int]));\n     let generic = none;\n-    if vec::len(*method.tps) > 0u {\n+    if vec::len(*method.tps) > 0u || ty::type_contains_params(tcx, fty) {\n         let tydescs = [], tis = [];\n         let tptys = ty::node_id_to_type_params(tcx, fld_expr.id);\n         for t in vec::tail_n(tptys, vec::len(tptys) - vec::len(*method.tps)) {"}]}