{"sha": "157d936c31e4f5ff51cc6f20c748e16537f33b9c", "node_id": "C_kwDOAAsO6NoAKDE1N2Q5MzZjMzFlNGY1ZmY1MWNjNmYyMGM3NDhlMTY1MzdmMzNiOWM", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-26T01:42:13Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-26T17:16:30Z"}, "message": "Stop normalizing so many different prefixes\n\nPreviously, we would normalize *all* of\n- the absolute path to the repository checkout\n- the /rustc/$sha for stage1 (if `remap-debuginfo` was enabled)\n- the /rustc/$sha for download-rustc\n- the sysroot for download-rustc\n\nNow, we consistently only normalize /rustc/FAKE_PREFIX. Not only is this\nmuch simpler, but it also avoids ongoing maintenance for download-rustc\nand makes it much less likely that tests break by accident.\n\n- Change `tests/ui/track-diagnostics/track6.rs` to use a relative path\n  instead of an absolute one. I am not actually sure why `track_caller`\nworks here, but it does seem to work :shrug:\n\n- Pass `-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX` to all\n  suites, not just UI. In particular, mir-opt tests emit /rustc/ paths\n  in their output.", "tree": {"sha": "1ce181b08b9fee921b6452a27c8be26b5bf66fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce181b08b9fee921b6452a27c8be26b5bf66fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157d936c31e4f5ff51cc6f20c748e16537f33b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157d936c31e4f5ff51cc6f20c748e16537f33b9c", "html_url": "https://github.com/rust-lang/rust/commit/157d936c31e4f5ff51cc6f20c748e16537f33b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157d936c31e4f5ff51cc6f20c748e16537f33b9c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9da7bfa375ad58bcb946115f3191a2756785e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9da7bfa375ad58bcb946115f3191a2756785e5", "html_url": "https://github.com/rust-lang/rust/commit/eb9da7bfa375ad58bcb946115f3191a2756785e5"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "0184fec8e3ee15611fbe5b65d546d54998ef57ec", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/157d936c31e4f5ff51cc6f20c748e16537f33b9c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157d936c31e4f5ff51cc6f20c748e16537f33b9c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=157d936c31e4f5ff51cc6f20c748e16537f33b9c", "patch": "@@ -84,6 +84,7 @@ impl SymbolGallery {\n \n /// Construct a diagnostic for a language feature error due to the given `span`.\n /// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n+#[track_caller]\n pub fn feature_err(\n     sess: &ParseSess,\n     feature: Symbol,"}, {"sha": "b495ed652689e445ac1defda935a4861b5d214a5", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/157d936c31e4f5ff51cc6f20c748e16537f33b9c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157d936c31e4f5ff51cc6f20c748e16537f33b9c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=157d936c31e4f5ff51cc6f20c748e16537f33b9c", "patch": "@@ -1753,10 +1753,6 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             cmd.arg(\"--git-hash\");\n         }\n \n-        if let Some(commit) = builder.config.download_rustc_commit() {\n-            cmd.env(\"FAKE_DOWNLOAD_RUSTC_PREFIX\", format!(\"/rustc/{commit}\"));\n-        }\n-\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!("}, {"sha": "c2e18ce2547577afedec20a0c77d40baddcb8d83", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/157d936c31e4f5ff51cc6f20c748e16537f33b9c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157d936c31e4f5ff51cc6f20c748e16537f33b9c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=157d936c31e4f5ff51cc6f20c748e16537f33b9c", "patch": "@@ -1939,6 +1939,17 @@ impl<'test> TestCx<'test> {\n         // Use a single thread for efficiency and a deterministic error message order\n         rustc.arg(\"-Zthreads=1\");\n \n+        // Hide libstd sources from ui tests to make sure we generate the stderr\n+        // output that users will see.\n+        // Without this, we may be producing good diagnostics in-tree but users\n+        // will not see half the information.\n+        //\n+        // This also has the benefit of more effectively normalizing output between different\n+        // compilers, so that we don't have to know the `/rustc/$sha` output to normalize after the\n+        // fact.\n+        rustc.arg(\"-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX\");\n+        rustc.arg(\"-Ztranslate-remapped-path-to-local-path=no\");\n+\n         // Optionally prevent default --sysroot if specified in test compile-flags.\n         if !self.props.compile_flags.iter().any(|flag| flag.starts_with(\"--sysroot\")) {\n             // In stage 0, make sure we use `stage0-sysroot` instead of the bootstrap sysroot.\n@@ -2014,13 +2025,6 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(\"-Ccodegen-units=1\");\n                 // Hide line numbers to reduce churn\n                 rustc.arg(\"-Zui-testing\");\n-                // Hide libstd sources from ui tests to make sure we generate the stderr\n-                // output that users will see.\n-                // Without this, we may be producing good diagnostics in-tree but users\n-                // will not see half the information.\n-                rustc.arg(\"-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX\");\n-                rustc.arg(\"-Ztranslate-remapped-path-to-local-path=no\");\n-\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n                 // FIXME: use this for other modes too, for perf?\n                 rustc.arg(\"-Cstrip=debuginfo\");\n@@ -3729,28 +3733,13 @@ impl<'test> TestCx<'test> {\n             normalize_path(&remapped_parent_dir, \"$DIR\");\n         }\n \n-        let source_bases = &[\n-            // Source base on the current filesystem (calculated as parent of `tests/$suite`):\n-            Some(self.config.src_base.parent().unwrap().parent().unwrap().into()),\n-            // Source base on the sysroot (from the src components downloaded by `download-rustc`):\n-            Some(self.config.sysroot_base.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\")),\n-            // Virtual `/rustc/$sha` remapped paths (if `remap-debuginfo` is enabled):\n-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n-            // Virtual `/rustc/$sha` coming from download-rustc:\n-            std::env::var_os(\"FAKE_DOWNLOAD_RUSTC_PREFIX\").map(PathBuf::from),\n-            // Tests using -Zsimulate-remapped-rust-src-base should use this fake path\n-            Some(\"/rustc/FAKE_PREFIX\".into()),\n-        ];\n-        for base_dir in source_bases {\n-            if let Some(base_dir) = base_dir {\n-                // Paths into the libstd/libcore\n-                normalize_path(&base_dir.join(\"library\"), \"$SRC_DIR\");\n-                // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n-                // `rustc_macros`\n-                // eg. /home/user/rust/compiler\n-                normalize_path(&base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n-            }\n-        }\n+        let base_dir = Path::new(\"/rustc/FAKE_PREFIX\");\n+        // Paths into the libstd/libcore\n+        normalize_path(&base_dir.join(\"library\"), \"$SRC_DIR\");\n+        // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n+        // `rustc_macros`\n+        // eg. /home/user/rust/compiler\n+        normalize_path(&base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n \n         // Paths into the build directory\n         let test_build_dir = &self.config.build_base;"}, {"sha": "583b02555b4537bf55de079d5bedc3a225964202", "filename": "tests/ui/track-diagnostics/track6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157d936c31e4f5ff51cc6f20c748e16537f33b9c/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/157d936c31e4f5ff51cc6f20c748e16537f33b9c/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr?ref=157d936c31e4f5ff51cc6f20c748e16537f33b9c", "patch": "@@ -3,7 +3,7 @@ error[E0658]: specialization is unstable\n    |\n LL |     default fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^\n--Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:LL:CC\n+-Ztrack-diagnostics: created at compiler/rustc_ast_passes/src/feature_gate.rs:LL:CC\n    |\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: add `#![feature(specialization)]` to the crate attributes to enable"}]}