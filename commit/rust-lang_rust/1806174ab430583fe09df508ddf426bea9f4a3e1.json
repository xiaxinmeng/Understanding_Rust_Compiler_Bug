{"sha": "1806174ab430583fe09df508ddf426bea9f4a3e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDYxNzRhYjQzMDU4M2ZlMDlkZjUwOGRkZjQyNmJlYTlmNGEzZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-25T14:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-25T14:16:22Z"}, "message": "Auto merge of #27994 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #27905, #27968, #27978, #27982, #27988\n- Failed merges:", "tree": {"sha": "8ee9c47afca7f1eb6cfc201180e973a29563ef82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ee9c47afca7f1eb6cfc201180e973a29563ef82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1806174ab430583fe09df508ddf426bea9f4a3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1806174ab430583fe09df508ddf426bea9f4a3e1", "html_url": "https://github.com/rust-lang/rust/commit/1806174ab430583fe09df508ddf426bea9f4a3e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1806174ab430583fe09df508ddf426bea9f4a3e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74728862339e156ecc10dd5a515f51bbaf9b4192", "url": "https://api.github.com/repos/rust-lang/rust/commits/74728862339e156ecc10dd5a515f51bbaf9b4192", "html_url": "https://github.com/rust-lang/rust/commit/74728862339e156ecc10dd5a515f51bbaf9b4192"}, {"sha": "c4847a11dabf108c49ce2c035e44c0a8c32ac18c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4847a11dabf108c49ce2c035e44c0a8c32ac18c", "html_url": "https://github.com/rust-lang/rust/commit/c4847a11dabf108c49ce2c035e44c0a8c32ac18c"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "70e3145903fbfc46ea20b89760dcb71d1748023b", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1806174ab430583fe09df508ddf426bea9f4a3e1", "patch": "@@ -1452,7 +1452,7 @@ fn draw_twice<T: Shape>(surface: Surface, sh: T) {\n }\n ```\n \n-Traits also define an [trait object](#trait-objects) with the same\n+Traits also define a [trait object](#trait-objects) with the same\n name as the trait. Values of this type are created by coercing from a\n pointer of some specific type to a pointer of trait type. For example,\n `&T` could be coerced to `&Shape` if `T: Shape` holds (and similarly"}, {"sha": "518e65f35c0080f46336999e10e0821932f9eed0", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=1806174ab430583fe09df508ddf426bea9f4a3e1", "patch": "@@ -208,8 +208,8 @@ Because these kinds of situations are relatively rare, use panics sparingly.\n \n In certain circumstances, even though a function may fail, we may want to treat\n it as a panic instead. For example, `io::stdin().read_line(&mut buffer)` returns\n-a `Result<usize>`, when there is an error reading the line. This allows us to\n-handle and possibly recover from error.\n+a `Result<usize>`, which can indicate an error if one occurs when reading the line.\n+This allows us to handle and possibly recover from errors.\n \n If we don't want to handle this error, and would rather just abort the program,\n we can use the `unwrap()` method:"}, {"sha": "78803afd5c1ad030ad9ca847f5693576d808d9da", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=1806174ab430583fe09df508ddf426bea9f4a3e1", "patch": "@@ -219,6 +219,66 @@ fn it_works() {\n This is a very common use of `assert_eq!`: call some function with\n some known arguments and compare it to the expected output.\n \n+# The `ignore` attribute\n+\n+Sometimes a few specific tests can be very time-consuming to execute. These\n+can be disabled by default by using the `ignore` attribute:\n+\n+```rust\n+#[test]\n+fn it_works() {\n+    assert_eq!(4, add_two(2));\n+}\n+\n+#[test]\n+#[ignore]\n+fn expensive_test() {\n+    // code that takes an hour to run\n+}\n+```\n+\n+Now we run our tests and see that `it_works` is run, but `expensive_test` is\n+not:\n+\n+```bash\n+$ cargo test\n+   Compiling adder v0.0.1 (file:///home/you/projects/adder)\n+     Running target/adder-91b3e234d4ed382a\n+\n+running 2 tests\n+test expensive_test ... ignored\n+test it_works ... ok\n+\n+test result: ok. 1 passed; 0 failed; 1 ignored; 0 measured\n+\n+   Doc-tests adder\n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n+```\n+\n+The expensive tests can be run explicitly using `cargo test -- --ignored`:\n+\n+```bash\n+$ cargo test -- --ignored\n+     Running target/adder-91b3e234d4ed382a\n+\n+running 1 test\n+test expensive_test ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+\n+   Doc-tests adder\n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n+```\n+\n+The `--ignored` argument is an argument to the test binary, and not to cargo,\n+which is why the command is `cargo test -- --ignored`.\n+\n # The `tests` module\n \n There is one way in which our existing example is not idiomatic: it's"}, {"sha": "5f907c6cbeee8b92d588074748bdf7e63e6e17cb", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1806174ab430583fe09df508ddf426bea9f4a3e1/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=1806174ab430583fe09df508ddf426bea9f4a3e1", "patch": "@@ -731,9 +731,14 @@ type X = u32; // ok!\n \"##,\n \n E0133: r##\"\n-Using unsafe functionality, such as dereferencing raw pointers and calling\n-functions via FFI or marked as unsafe, is potentially dangerous and disallowed\n-by safety checks. These safety checks can be relaxed for a section of the code\n+Using unsafe functionality, is potentially dangerous and disallowed\n+by safety checks. Examples:\n+\n+- Dereferencing raw pointers\n+- Calling functions via FFI\n+- Calling functions marked unsafe\n+\n+These safety checks can be relaxed for a section of the code\n by wrapping the unsafe instructions with an `unsafe` block. For instance:\n \n ```\n@@ -831,9 +836,7 @@ is a size mismatch in one of the impls.\n It is also possible to manually transmute:\n \n ```\n-let result: SomeType = mem::uninitialized();\n-unsafe { copy_nonoverlapping(&v, &result) };\n-result // `v` transmuted to type `SomeType`\n+ptr::read(&v as *const _ as *const SomeType) // `v` transmuted to `SomeType`\n ```\n \"##,\n "}]}