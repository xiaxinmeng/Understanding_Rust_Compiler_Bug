{"sha": "85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "node_id": "C_kwDOAAsO6NoAKDg1YjY4YjFmN2RkOWExOTgzYTRiZmEwYjlhYjAyMTJhZWExOGRlNDI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T15:27:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-17T15:27:12Z"}, "message": "Inline PathQualifierCtx", "tree": {"sha": "96225a3e4382afdb7d64a4ae25df97516925e926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96225a3e4382afdb7d64a4ae25df97516925e926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "html_url": "https://github.com/rust-lang/rust/commit/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f161ffa900db3e88ff262571971b8dde7a8a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f161ffa900db3e88ff262571971b8dde7a8a91", "html_url": "https://github.com/rust-lang/rust/commit/d6f161ffa900db3e88ff262571971b8dde7a8a91"}], "stats": {"total": 87, "additions": 39, "deletions": 48}, "files": [{"sha": "fe5bdeec66209ee49a1a61c04a1a3b08f0359fc3", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -18,9 +18,7 @@ use syntax::{\n \n use crate::{\n     completions::module_or_attr,\n-    context::{\n-        CompletionContext, IdentContext, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified,\n-    },\n+    context::{CompletionContext, IdentContext, PathCompletionCtx, PathKind, Qualified},\n     item::CompletionItem,\n     Completions,\n };\n@@ -84,7 +82,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+        Qualified::With { resolution, is_super_chain, .. } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }"}, {"sha": "aefb986535ef9e933da441476f352a850a2652a1", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -5,7 +5,7 @@ use itertools::Itertools;\n use syntax::SmolStr;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified},\n+    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n     item::CompletionItem,\n     Completions,\n };\n@@ -21,7 +21,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n     let core = ctx.famous_defs().core();\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+        Qualified::With { resolution, is_super_chain, .. } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }"}, {"sha": "fcd2144809e344ff5ff13d37f5c6c3731ed914e1", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -4,9 +4,7 @@ use hir::ScopeDef;\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{\n-        NameRefContext, NameRefKind, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified,\n-    },\n+    context::{NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -67,7 +65,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n             .into_iter()\n             .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n             .for_each(|item| add_assoc_item(acc, ctx, item)),\n-        Qualified::With(PathQualifierCtx { resolution, .. }) => {\n+        Qualified::With { resolution, .. } => {\n             let resolution = match resolution {\n                 Some(it) => it,\n                 None => return,"}, {"sha": "2e03935086dfe32d7471f20c02ce78ab11ad0b84", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{ItemListKind, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified},\n+    context::{ItemListKind, PathCompletionCtx, PathKind, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -44,7 +44,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+        Qualified::With { resolution, is_super_chain, .. } => {\n             if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = resolution {\n                 for (name, def) in module.scope(ctx.db, Some(ctx.module)) {\n                     if let Some(def) = module_or_fn_macro(ctx.db, def) {"}, {"sha": "b2630798bbca69d40eca00fccd2a9fc25f9bb95c", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -5,7 +5,7 @@ use ide_db::FxHashSet;\n use syntax::ast::Pat;\n \n use crate::{\n-    context::{PathCompletionCtx, PathQualifierCtx, PatternRefutability, Qualified},\n+    context::{PathCompletionCtx, PatternRefutability, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -114,7 +114,7 @@ fn pattern_path_completion(\n     PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n ) {\n     match qualified {\n-        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+        Qualified::With { resolution, is_super_chain, .. } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }"}, {"sha": "b6666ef1a4a844c2e678e87dc400bc508ece4bfa", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -5,10 +5,7 @@ use ide_db::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n-    context::{\n-        PathCompletionCtx, PathKind, PathQualifierCtx, Qualified, TypeAscriptionTarget,\n-        TypeLocation,\n-    },\n+    context::{PathCompletionCtx, PathKind, Qualified, TypeAscriptionTarget, TypeLocation},\n     render::render_type_inference,\n     CompletionContext, Completions,\n };\n@@ -61,7 +58,7 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n             .into_iter()\n             .flat_map(|it| hir::Trait::from(it).items(ctx.sema.db))\n             .for_each(|item| add_assoc_item(acc, item)),\n-        Qualified::With(PathQualifierCtx { resolution, .. }) => {\n+        Qualified::With { resolution, .. } => {\n             let resolution = match resolution {\n                 Some(it) => it,\n                 None => return,"}, {"sha": "64fa426395945d8ebe3ee9cacfc0e0ee0e4801d6", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -6,25 +6,30 @@ use syntax::{ast, AstNode};\n \n use crate::{\n     context::{\n-        CompletionContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind,\n-        PathQualifierCtx, Qualified,\n+        CompletionContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified,\n     },\n     item::Builder,\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (qualified, name_ref) = match ctx.nameref_ctx() {\n+    let (qualified, name_ref, use_tree_parent) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n-            kind: Some(NameRefKind::Path(PathCompletionCtx { kind: PathKind::Use, qualified, .. })),\n+            kind:\n+                Some(NameRefKind::Path(PathCompletionCtx {\n+                    kind: PathKind::Use,\n+                    qualified,\n+                    use_tree_parent,\n+                    ..\n+                })),\n             nameref,\n             ..\n-        }) => (qualified, nameref),\n+        }) => (qualified, nameref, use_tree_parent),\n         _ => return,\n     };\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx { path, resolution, is_super_chain, use_tree_parent }) => {\n+        Qualified::With { path, resolution, is_super_chain } => {\n             if *is_super_chain {\n                 acc.add_keyword(ctx, \"super::\");\n             }"}, {"sha": "319976737e899c2f9012dc9463887630a4bf6a77", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -3,7 +3,7 @@\n use hir::ScopeDef;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx, Qualified},\n+    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n     Completions,\n };\n \n@@ -16,7 +16,7 @@ pub(crate) fn complete_vis_path(acc: &mut Completions, ctx: &CompletionContext)\n     };\n \n     match qualified {\n-        Qualified::With(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n+        Qualified::With { resolution, is_super_chain, .. } => {\n             // Try completing next child module of the path that is still a parent of the current module\n             if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) = resolution {\n                 let next_towards_current = ctx"}, {"sha": "6af24f87489c96edd0735da1fc19b81c63a36362", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -64,6 +64,8 @@ pub(crate) struct PathCompletionCtx {\n     pub(super) kind: PathKind,\n     /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,\n+    /// Whether the qualifier comes from a use tree parent or not\n+    pub(crate) use_tree_parent: bool,\n }\n \n impl PathCompletionCtx {\n@@ -149,24 +151,18 @@ pub(super) enum ItemListKind {\n #[derive(Debug)]\n pub(super) enum Qualified {\n     No,\n-    With(PathQualifierCtx),\n+    With {\n+        path: ast::Path,\n+        resolution: Option<PathResolution>,\n+        /// Whether this path consists solely of `super` segments\n+        is_super_chain: bool,\n+    },\n     /// <_>::\n     Infer,\n     /// Whether the path is an absolute path\n     Absolute,\n }\n \n-/// The path qualifier state of the path we are completing.\n-#[derive(Debug)]\n-pub(crate) struct PathQualifierCtx {\n-    pub(crate) path: ast::Path,\n-    pub(crate) resolution: Option<PathResolution>,\n-    /// Whether this path consists solely of `super` segments\n-    pub(crate) is_super_chain: bool,\n-    /// Whether the qualifier comes from a use tree parent or not\n-    pub(crate) use_tree_parent: bool,\n-}\n-\n /// The state of the pattern we are completing.\n #[derive(Debug)]\n pub(super) struct PatternContext {\n@@ -410,7 +406,7 @@ impl<'a> CompletionContext<'a> {\n \n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n         self.path_context().and_then(|it| match &it.qualified {\n-            Qualified::With(it) => Some(&it.path),\n+            Qualified::With { path, .. } => Some(path),\n             _ => None,\n         })\n     }"}, {"sha": "25b384d32380256de1e4cc575d6532395615fafa", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=85b68b1f7dd9a1983a4bfa0b9ab0212aea18de42", "patch": "@@ -13,8 +13,8 @@ use syntax::{\n use crate::context::{\n     CompletionContext, DotAccess, DotAccessKind, IdentContext, ItemListKind, LifetimeContext,\n     LifetimeKind, NameContext, NameKind, NameRefContext, NameRefKind, ParamKind, PathCompletionCtx,\n-    PathKind, PathQualifierCtx, PatternContext, PatternRefutability, Qualified, QualifierCtx,\n-    TypeAscriptionTarget, TypeLocation, COMPLETION_MARKER,\n+    PathKind, PatternContext, PatternRefutability, Qualified, QualifierCtx, TypeAscriptionTarget,\n+    TypeLocation, COMPLETION_MARKER,\n };\n \n impl<'a> CompletionContext<'a> {\n@@ -589,6 +589,7 @@ impl<'a> CompletionContext<'a> {\n             parent: path.parent_path(),\n             kind: PathKind::Item { kind: ItemListKind::SourceFile },\n             has_type_args: false,\n+            use_tree_parent: false,\n         };\n \n         let is_in_block = |it: &SyntaxNode| {\n@@ -853,6 +854,7 @@ impl<'a> CompletionContext<'a> {\n \n         // calculate the qualifier context\n         if let Some((path, use_tree_parent)) = path_or_use_tree_qualifier(&path) {\n+            path_ctx.use_tree_parent = use_tree_parent;\n             if !use_tree_parent && segment.coloncolon_token().is_some() {\n                 path_ctx.qualified = Qualified::Absolute;\n             } else {\n@@ -878,12 +880,7 @@ impl<'a> CompletionContext<'a> {\n                         let is_super_chain =\n                             iter::successors(Some(path.clone()), |p| p.qualifier())\n                                 .all(|p| p.segment().and_then(|s| s.super_token()).is_some());\n-                        Qualified::With(PathQualifierCtx {\n-                            path,\n-                            resolution: res,\n-                            is_super_chain,\n-                            use_tree_parent,\n-                        })\n+                        Qualified::With { path, resolution: res, is_super_chain }\n                     }\n                 };\n             }"}]}