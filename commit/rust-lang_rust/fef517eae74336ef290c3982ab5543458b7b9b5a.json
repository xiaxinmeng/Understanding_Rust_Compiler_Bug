{"sha": "fef517eae74336ef290c3982ab5543458b7b9b5a", "node_id": "C_kwDOAAsO6NoAKGZlZjUxN2VhZTc0MzM2ZWYyOTBjMzk4MmFiNTU0MzQ1OGI3YjliNWE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-13T14:31:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-13T16:55:55Z"}, "message": "Remove almost all remaining feature gates\n\nOnly rustc_private is still enabled as cg_clif by definition needs to\nuse internal rustc api's.", "tree": {"sha": "e111a3d9daaf1a75e32d889b2839b8f0c020b0f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e111a3d9daaf1a75e32d889b2839b8f0c020b0f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fef517eae74336ef290c3982ab5543458b7b9b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fef517eae74336ef290c3982ab5543458b7b9b5a", "html_url": "https://github.com/rust-lang/rust/commit/fef517eae74336ef290c3982ab5543458b7b9b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fef517eae74336ef290c3982ab5543458b7b9b5a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc1a2cd6832f62aed7be6292a89e31dc29da056", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc1a2cd6832f62aed7be6292a89e31dc29da056", "html_url": "https://github.com/rust-lang/rust/commit/cfc1a2cd6832f62aed7be6292a89e31dc29da056"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "30e9627c48d749f17324ba2dab559af13ba4e956", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fef517eae74336ef290c3982ab5543458b7b9b5a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fef517eae74336ef290c3982ab5543458b7b9b5a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fef517eae74336ef290c3982ab5543458b7b9b5a", "patch": "@@ -228,6 +228,12 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"once_cell\"\n+version = \"1.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"87f3e037eac156d1775da914196f0f37741a274155e34a0b7e427c35d2a2ecb9\"\n+\n [[package]]\n name = \"regalloc\"\n version = \"0.0.34\"\n@@ -272,6 +278,7 @@ dependencies = [\n  \"indexmap\",\n  \"libloading\",\n  \"object\",\n+ \"once_cell\",\n  \"smallvec\",\n  \"target-lexicon\",\n ]"}, {"sha": "dbe370d9f013bb71563da9b20f1a12c756099dae", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fef517eae74336ef290c3982ab5543458b7b9b5a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fef517eae74336ef290c3982ab5543458b7b9b5a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fef517eae74336ef290c3982ab5543458b7b9b5a", "patch": "@@ -21,6 +21,7 @@ object = { version = \"0.27.0\", default-features = false, features = [\"std\", \"rea\n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.8.0\"\n libloading = { version = \"0.6.0\", optional = true }\n+once_cell = { version = \"1.10.0\", optional = true }\n smallvec = \"1.6.1\"\n \n [patch.crates-io]\n@@ -37,7 +38,7 @@ smallvec = \"1.6.1\"\n [features]\n # Enable features not ready to be enabled when compiling as part of rustc\n unstable-features = [\"jit\", \"inline_asm\"]\n-jit = [\"cranelift-jit\", \"libloading\"]\n+jit = [\"cranelift-jit\", \"libloading\", \"once_cell\"]\n inline_asm = []\n \n # Disable optimizations and debuginfo of build scripts and some of the heavy build deps, as the"}, {"sha": "d26392c4913b508a3ab68335d2ea771243c6b42d", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fef517eae74336ef290c3982ab5543458b7b9b5a/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef517eae74336ef290c3982ab5543458b7b9b5a/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=fef517eae74336ef290c3982ab5543458b7b9b5a", "patch": "@@ -81,6 +81,8 @@ impl UnwindContext {\n \n     #[cfg(all(feature = \"jit\", not(windows)))]\n     pub(crate) unsafe fn register_jit(self, jit_module: &cranelift_jit::JITModule) {\n+        use std::mem::ManuallyDrop;\n+\n         let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(self.endian));\n         self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n \n@@ -95,17 +97,16 @@ impl UnwindContext {\n \n         // FIXME support unregistering unwind tables once cranelift-jit supports deallocating\n         // individual functions\n-        #[allow(unused_variables)]\n-        let (eh_frame, eh_frame_len, _) = Vec::into_raw_parts(eh_frame);\n+        let eh_frame = ManuallyDrop::new(eh_frame);\n \n         // =======================================================================\n         // Everything after this line up to the end of the file is loosely based on\n         // https://github.com/bytecodealliance/wasmtime/blob/4471a82b0c540ff48960eca6757ccce5b1b5c3e4/crates/jit/src/unwind/systemv.rs\n         #[cfg(target_os = \"macos\")]\n         {\n             // On macOS, `__register_frame` takes a pointer to a single FDE\n-            let start = eh_frame;\n-            let end = start.add(eh_frame_len);\n+            let start = eh_frame.as_ptr();\n+            let end = start.add(eh_frame.len());\n             let mut current = start;\n \n             // Walk all of the entries in the frame table and register them\n@@ -124,7 +125,7 @@ impl UnwindContext {\n         #[cfg(not(target_os = \"macos\"))]\n         {\n             // On other platforms, `__register_frame` will walk the FDEs until an entry of length 0\n-            __register_frame(eh_frame);\n+            __register_frame(eh_frame.as_ptr());\n         }\n     }\n }"}, {"sha": "6c22296db716d297cf02b57e5f5fac7ddfe1fba4", "filename": "src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fef517eae74336ef290c3982ab5543458b7b9b5a/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef517eae74336ef290c3982ab5543458b7b9b5a/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=fef517eae74336ef290c3982ab5543458b7b9b5a", "patch": "@@ -3,7 +3,6 @@\n \n use std::cell::RefCell;\n use std::ffi::CString;\n-use std::lazy::SyncOnceCell;\n use std::os::raw::{c_char, c_int};\n use std::sync::{mpsc, Mutex};\n \n@@ -14,6 +13,9 @@ use rustc_span::Symbol;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n+// FIXME use std::lazy::SyncOnceCell once it stabilizes\n+use once_cell::sync::OnceCell;\n+\n use crate::{prelude::*, BackendConfig};\n use crate::{CodegenCx, CodegenMode};\n \n@@ -27,8 +29,7 @@ thread_local! {\n }\n \n /// The Sender owned by the rustc thread\n-static GLOBAL_MESSAGE_SENDER: SyncOnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> =\n-    SyncOnceCell::new();\n+static GLOBAL_MESSAGE_SENDER: OnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> = OnceCell::new();\n \n /// A message that is sent from the jitted runtime to the rustc thread.\n /// Senders are responsible for upholding `Send` semantics."}, {"sha": "a3c794fb156b46c0334f009ad9f816f138da3b7d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fef517eae74336ef290c3982ab5543458b7b9b5a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef517eae74336ef290c3982ab5543458b7b9b5a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fef517eae74336ef290c3982ab5543458b7b9b5a", "patch": "@@ -1,5 +1,5 @@\n #![feature(rustc_private)]\n-#![cfg_attr(feature = \"jit\", feature(never_type, vec_into_raw_parts, once_cell))]\n+// Note: please avoid adding other feature gates where possible\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]\n@@ -196,7 +196,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             CodegenMode::Aot => driver::aot::run_aot(tcx, config, metadata, need_metadata_module),\n             CodegenMode::Jit | CodegenMode::JitLazy => {\n                 #[cfg(feature = \"jit\")]\n-                let _: ! = driver::jit::run_jit(tcx, config);\n+                driver::jit::run_jit(tcx, config);\n \n                 #[cfg(not(feature = \"jit\"))]\n                 tcx.sess.fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");"}]}