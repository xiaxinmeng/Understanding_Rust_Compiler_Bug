{"sha": "aa9aca0d3d6aa371691d226bd41b4dd4af083a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOWFjYTBkM2Q2YWEzNzE2OTFkMjI2YmQ0MWI0ZGQ0YWYwODNhNDY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-14T04:55:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-14T04:55:21Z"}, "message": "De-overlap the lifetimes of `flow_inits` and `flow_{un,ever_}inits`.\n\nThis reduces `max-rss` for an `nll-check` build by 27% for `keccak`, and\nby 8% for `inflate`.", "tree": {"sha": "878ae522f906ec6b5743c045f2f1600f05c308dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/878ae522f906ec6b5743c045f2f1600f05c308dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa9aca0d3d6aa371691d226bd41b4dd4af083a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9aca0d3d6aa371691d226bd41b4dd4af083a46", "html_url": "https://github.com/rust-lang/rust/commit/aa9aca0d3d6aa371691d226bd41b4dd4af083a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa9aca0d3d6aa371691d226bd41b4dd4af083a46/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6720cc810ea3dc9e051a95ff1a8dc9755c3bdb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6720cc810ea3dc9e051a95ff1a8dc9755c3bdb5", "html_url": "https://github.com/rust-lang/rust/commit/d6720cc810ea3dc9e051a95ff1a8dc9755c3bdb5"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "8b379c5ce697016b37da377f48a403105f853203", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aa9aca0d3d6aa371691d226bd41b4dd4af083a46/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9aca0d3d6aa371691d226bd41b4dd4af083a46/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=aa9aca0d3d6aa371691d226bd41b4dd4af083a46", "patch": "@@ -177,24 +177,6 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         MaybeInitializedPlaces::new(tcx, mir, &mdpe),\n         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n     ));\n-    let flow_uninits = FlowAtLocation::new(do_dataflow(\n-        tcx,\n-        mir,\n-        id,\n-        &attributes,\n-        &dead_unwinds,\n-        MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n-        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n-    ));\n-    let flow_ever_inits = FlowAtLocation::new(do_dataflow(\n-        tcx,\n-        mir,\n-        id,\n-        &attributes,\n-        &dead_unwinds,\n-        EverInitializedPlaces::new(tcx, mir, &mdpe),\n-        |bd, i| DebugFormatted::new(&bd.move_data().inits[i]),\n-    ));\n \n     let locals_are_invalidated_at_exit = match tcx.hir.body_owner_kind(id) {\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n@@ -216,6 +198,12 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &borrow_set,\n         &mut errors_buffer,\n     );\n+\n+    // The various `flow_*` structures can be large. We drop `flow_inits` here\n+    // so it doesn't overlap with the others below. This reduces peak memory\n+    // usage significantly on some benchmarks.\n+    drop(flow_inits);\n+\n     let regioncx = Rc::new(regioncx);\n \n     let flow_borrows = FlowAtLocation::new(do_dataflow(\n@@ -227,6 +215,24 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         Borrows::new(tcx, mir, regioncx.clone(), def_id, body_id, &borrow_set),\n         |rs, i| DebugFormatted::new(&rs.location(i)),\n     ));\n+    let flow_uninits = FlowAtLocation::new(do_dataflow(\n+        tcx,\n+        mir,\n+        id,\n+        &attributes,\n+        &dead_unwinds,\n+        MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n+        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n+    ));\n+    let flow_ever_inits = FlowAtLocation::new(do_dataflow(\n+        tcx,\n+        mir,\n+        id,\n+        &attributes,\n+        &dead_unwinds,\n+        EverInitializedPlaces::new(tcx, mir, &mdpe),\n+        |bd, i| DebugFormatted::new(&bd.move_data().inits[i]),\n+    ));\n \n     let movable_generator = match tcx.hir.get(id) {\n         Node::Expr(&hir::Expr {"}]}