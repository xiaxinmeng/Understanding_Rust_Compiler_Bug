{"sha": "a857e6003e3f1ee1023bb8ec50cf652164bf5e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NTdlNjAwM2UzZjFlZTEwMjNiYjhlYzUwY2Y2NTIxNjRiZjVlMTE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-10T05:40:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-14T23:43:02Z"}, "message": "Make CodeMap thread-safe", "tree": {"sha": "51484e8e9ebeb9ad98038c4ba6737ec0059ff555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51484e8e9ebeb9ad98038c4ba6737ec0059ff555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a857e6003e3f1ee1023bb8ec50cf652164bf5e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a857e6003e3f1ee1023bb8ec50cf652164bf5e11", "html_url": "https://github.com/rust-lang/rust/commit/a857e6003e3f1ee1023bb8ec50cf652164bf5e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a857e6003e3f1ee1023bb8ec50cf652164bf5e11/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426c51d6ea567170e237a66b49d512fab24cd32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/426c51d6ea567170e237a66b49d512fab24cd32c", "html_url": "https://github.com/rust-lang/rust/commit/426c51d6ea567170e237a66b49d512fab24cd32c"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "829ba386d3528733e2b949c82c4193b9bfcd9675", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a857e6003e3f1ee1023bb8ec50cf652164bf5e11/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a857e6003e3f1ee1023bb8ec50cf652164bf5e11/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=a857e6003e3f1ee1023bb8ec50cf652164bf5e11", "patch": "@@ -24,8 +24,7 @@ pub use self::ExpnFormat::*;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::Lrc;\n-use std::cell::{RefCell, Ref};\n+use rustc_data_structures::sync::{Lrc, Lock, LockGuard};\n use std::cmp;\n use std::hash::Hash;\n use std::path::{Path, PathBuf};\n@@ -126,12 +125,12 @@ impl StableFilemapId {\n //\n \n pub struct CodeMap {\n-    pub(super) files: RefCell<Vec<Lrc<FileMap>>>,\n+    pub(super) files: Lock<Vec<Lrc<FileMap>>>,\n     file_loader: Box<FileLoader + Sync + Send>,\n     // This is used to apply the file path remapping as specified via\n     // --remap-path-prefix to all FileMaps allocated within this CodeMap.\n     path_mapping: FilePathMapping,\n-    stable_id_to_filemap: RefCell<FxHashMap<StableFilemapId, Lrc<FileMap>>>,\n+    stable_id_to_filemap: Lock<FxHashMap<StableFilemapId, Lrc<FileMap>>>,\n     /// In case we are in a doctest, replace all file names with the PathBuf,\n     /// and add the given offsets to the line info\n     doctest_offset: Option<(FileName, isize)>,\n@@ -140,10 +139,10 @@ pub struct CodeMap {\n impl CodeMap {\n     pub fn new(path_mapping: FilePathMapping) -> CodeMap {\n         CodeMap {\n-            files: RefCell::new(Vec::new()),\n+            files: Lock::new(Vec::new()),\n             file_loader: Box::new(RealFileLoader),\n             path_mapping,\n-            stable_id_to_filemap: RefCell::new(FxHashMap()),\n+            stable_id_to_filemap: Lock::new(FxHashMap()),\n             doctest_offset: None,\n         }\n     }\n@@ -161,10 +160,10 @@ impl CodeMap {\n                             path_mapping: FilePathMapping)\n                             -> CodeMap {\n         CodeMap {\n-            files: RefCell::new(Vec::new()),\n-            file_loader,\n+            files: Lock::new(Vec::new()),\n+            file_loader: file_loader,\n             path_mapping,\n-            stable_id_to_filemap: RefCell::new(FxHashMap()),\n+            stable_id_to_filemap: Lock::new(FxHashMap()),\n             doctest_offset: None,\n         }\n     }\n@@ -187,7 +186,7 @@ impl CodeMap {\n         Ok(self.new_filemap(filename, src))\n     }\n \n-    pub fn files(&self) -> Ref<Vec<Lrc<FileMap>>> {\n+    pub fn files(&self) -> LockGuard<Vec<Lrc<FileMap>>> {\n         self.files.borrow()\n     }\n \n@@ -209,7 +208,6 @@ impl CodeMap {\n     /// intend to set the line information yourself, you should use new_filemap_and_lines.\n     pub fn new_filemap(&self, filename: FileName, src: String) -> Lrc<FileMap> {\n         let start_pos = self.next_start_pos();\n-        let mut files = self.files.borrow_mut();\n \n         // The path is used to determine the directory for loading submodules and\n         // include files, so it must be before remapping.\n@@ -233,7 +231,7 @@ impl CodeMap {\n             Pos::from_usize(start_pos),\n         ));\n \n-        files.push(filemap.clone());\n+        self.files.borrow_mut().push(filemap.clone());\n \n         self.stable_id_to_filemap\n             .borrow_mut()\n@@ -273,7 +271,6 @@ impl CodeMap {\n                                 mut file_local_non_narrow_chars: Vec<NonNarrowChar>)\n                                 -> Lrc<FileMap> {\n         let start_pos = self.next_start_pos();\n-        let mut files = self.files.borrow_mut();\n \n         let end_pos = Pos::from_usize(start_pos + source_len);\n         let start_pos = Pos::from_usize(start_pos);\n@@ -297,16 +294,16 @@ impl CodeMap {\n             crate_of_origin,\n             src: None,\n             src_hash,\n-            external_src: RefCell::new(ExternalSource::AbsentOk),\n+            external_src: Lock::new(ExternalSource::AbsentOk),\n             start_pos,\n             end_pos,\n-            lines: RefCell::new(file_local_lines),\n-            multibyte_chars: RefCell::new(file_local_multibyte_chars),\n-            non_narrow_chars: RefCell::new(file_local_non_narrow_chars),\n+            lines: Lock::new(file_local_lines),\n+            multibyte_chars: Lock::new(file_local_multibyte_chars),\n+            non_narrow_chars: Lock::new(file_local_non_narrow_chars),\n             name_hash,\n         });\n \n-        files.push(filemap.clone());\n+        self.files.borrow_mut().push(filemap.clone());\n \n         self.stable_id_to_filemap\n             .borrow_mut()\n@@ -401,8 +398,7 @@ impl CodeMap {\n     pub fn lookup_line(&self, pos: BytePos) -> Result<FileMapAndLine, Lrc<FileMap>> {\n         let idx = self.lookup_filemap_idx(pos);\n \n-        let files = self.files.borrow();\n-        let f = (*files)[idx].clone();\n+        let f = (*self.files.borrow())[idx].clone();\n \n         match f.lookup_line(pos) {\n             Some(line) => Ok(FileMapAndLine { fm: f, line: line }),\n@@ -810,8 +806,7 @@ impl CodeMap {\n     /// Converts an absolute BytePos to a CharPos relative to the filemap.\n     pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {\n         let idx = self.lookup_filemap_idx(bpos);\n-        let files = self.files.borrow();\n-        let map = &(*files)[idx];\n+        let map = &(*self.files.borrow())[idx];\n \n         // The number of extra bytes due to multibyte chars in the FileMap\n         let mut total_extra_bytes = 0;"}]}