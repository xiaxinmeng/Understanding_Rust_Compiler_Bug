{"sha": "37df40bd1c9374ca91112f2d1ea0e27127130c09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZGY0MGJkMWM5Mzc0Y2E5MTExMmYyZDFlYTBlMjcxMjcxMzBjMDk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-01T00:13:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-01T00:13:34Z"}, "message": "Rollup merge of #77202 - ehuss:defer-apple-sdkroot, r=petrochenkov\n\nDefer Apple SDKROOT detection to link time.\n\nThis defers the detection of the SDKROOT for Apple iOS/tvOS targets to link time, instead of when the `Target` is defined. This allows commands that don't need to link to work (like `rustdoc` or `rustc --print=target-list`). This also makes `--print=target-list` a bit faster.\n\nThis also removes the note in the platform support documentation about these targets being missing. When I wrote it, I misunderstood how the SDKROOT stuff worked.\n\nNotes:\n* This means that JSON spec targets can't explicitly override these flags. I think that is probably fine, as I believe the value is generally required, and can be set with the SDKROOT environment variable.\n* This changes `x86_64-apple-tvos` to use `appletvsimulator`. I think the original code was wrong (it was using `iphonesimulator`). Also, `x86_64-apple-tvos` seems broken in general, and I cannot build it locally. The `data_layout` does not appear to be correct (it is a copy of the arm64 layout instead of the x86_64 layout). I have not tried building Apple's LLVM to see if that helps, but I suspect it is just wrong (I'm uncertain since I don't know how the tvOS simulator works with its bitcode-only requirements).\n* I'm tempted to remove the use of `Result` for built-in target definitions, since I don't think they should be fallible. This was added in https://github.com/rust-lang/rust/pull/34980, but that only relates to JSON definitions. I think the built-in targets shouldn't fail. I can do this now, or not.\n\nFixes #36156\nFixes #76584", "tree": {"sha": "b262ff0dcb381edea7a7ba38fdcc3746e7c65738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b262ff0dcb381edea7a7ba38fdcc3746e7c65738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37df40bd1c9374ca91112f2d1ea0e27127130c09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfdR8uCRBK7hj4Ov3rIwAAdHIIAIw1qnskX89PaoKe36g+Fs8J\nqBSpWN0QMMDoRSMr+XpQHnqYGR5a6+E4gmcSU3Gz1hSD3xtFUGhDVN8qJrKpfJkQ\nQ0LHUD2vRv0nVZ/wFbYRPI78mT4oqMpTeFjVFnJNPVuICRZlCfhKxKCQUtciGFmI\nyRKKiQilClBdjnRovIRUa6B2rhyySLOWOWe20gnF3qyhHW7OE/mhCD/A4xL2uSkC\nUq3Oc3ENnaGYiUsMTBHroCS5C79KIYXHsJmeF9sscSOykxbk0XzIIQiCBX3t6366\nFziGFOi+XJEL8J51EkuLKLj+gWgBumxQo5GDeM+sH+XZTmlkjL0p/x7UnSwUFRU=\n=D/yR\n-----END PGP SIGNATURE-----\n", "payload": "tree b262ff0dcb381edea7a7ba38fdcc3746e7c65738\nparent 8ccc063fbc54e5fea3a4811310ff0bb0821d2992\nparent 7420d7a98044ea1bf727ab369cbc77232dd99694\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601511214 +0200\ncommitter GitHub <noreply@github.com> 1601511214 +0200\n\nRollup merge of #77202 - ehuss:defer-apple-sdkroot, r=petrochenkov\n\nDefer Apple SDKROOT detection to link time.\n\nThis defers the detection of the SDKROOT for Apple iOS/tvOS targets to link time, instead of when the `Target` is defined. This allows commands that don't need to link to work (like `rustdoc` or `rustc --print=target-list`). This also makes `--print=target-list` a bit faster.\n\nThis also removes the note in the platform support documentation about these targets being missing. When I wrote it, I misunderstood how the SDKROOT stuff worked.\n\nNotes:\n* This means that JSON spec targets can't explicitly override these flags. I think that is probably fine, as I believe the value is generally required, and can be set with the SDKROOT environment variable.\n* This changes `x86_64-apple-tvos` to use `appletvsimulator`. I think the original code was wrong (it was using `iphonesimulator`). Also, `x86_64-apple-tvos` seems broken in general, and I cannot build it locally. The `data_layout` does not appear to be correct (it is a copy of the arm64 layout instead of the x86_64 layout). I have not tried building Apple's LLVM to see if that helps, but I suspect it is just wrong (I'm uncertain since I don't know how the tvOS simulator works with its bitcode-only requirements).\n* I'm tempted to remove the use of `Result` for built-in target definitions, since I don't think they should be fallible. This was added in https://github.com/rust-lang/rust/pull/34980, but that only relates to JSON definitions. I think the built-in targets shouldn't fail. I can do this now, or not.\n\nFixes #36156\nFixes #76584\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37df40bd1c9374ca91112f2d1ea0e27127130c09", "html_url": "https://github.com/rust-lang/rust/commit/37df40bd1c9374ca91112f2d1ea0e27127130c09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37df40bd1c9374ca91112f2d1ea0e27127130c09/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "html_url": "https://github.com/rust-lang/rust/commit/8ccc063fbc54e5fea3a4811310ff0bb0821d2992"}, {"sha": "7420d7a98044ea1bf727ab369cbc77232dd99694", "url": "https://api.github.com/repos/rust-lang/rust/commits/7420d7a98044ea1bf727ab369cbc77232dd99694", "html_url": "https://github.com/rust-lang/rust/commit/7420d7a98044ea1bf727ab369cbc77232dd99694"}], "stats": {"total": 253, "additions": 114, "deletions": 139}, "files": [{"sha": "010fd4e9c5a2b675024a382f5ed7c382431ac898", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1524,6 +1524,9 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_pre_link_args(cmd, sess, flavor);\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO\n+    add_apple_sdk(cmd, sess, flavor);\n+\n     // NO-OPT-OUT\n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n@@ -2083,3 +2086,86 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n         config::Lto::No | config::Lto::ThinLocal => false,\n     }\n }\n+\n+fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n+    let arch = &sess.target.target.arch;\n+    let os = &sess.target.target.target_os;\n+    let llvm_target = &sess.target.target.llvm_target;\n+    if sess.target.target.target_vendor != \"apple\"\n+        || !matches!(os.as_str(), \"ios\" | \"tvos\")\n+        || flavor != LinkerFlavor::Gcc\n+    {\n+        return;\n+    }\n+    let sdk_name = match (arch.as_str(), os.as_str()) {\n+        (\"aarch64\", \"tvos\") => \"appletvos\",\n+        (\"x86_64\", \"tvos\") => \"appletvsimulator\",\n+        (\"arm\", \"ios\") => \"iphoneos\",\n+        (\"aarch64\", \"ios\") => \"iphoneos\",\n+        (\"x86\", \"ios\") => \"iphonesimulator\",\n+        (\"x86_64\", \"ios\") if llvm_target.contains(\"macabi\") => \"macosx10.15\",\n+        (\"x86_64\", \"ios\") => \"iphonesimulator\",\n+        _ => {\n+            sess.err(&format!(\"unsupported arch `{}` for os `{}`\", arch, os));\n+            return;\n+        }\n+    };\n+    let sdk_root = match get_apple_sdk_root(sdk_name) {\n+        Ok(s) => s,\n+        Err(e) => {\n+            sess.err(&e);\n+            return;\n+        }\n+    };\n+    let arch_name = llvm_target.split('-').next().expect(\"LLVM target must have a hyphen\");\n+    cmd.args(&[\"-arch\", arch_name, \"-isysroot\", &sdk_root, \"-Wl,-syslibroot\", &sdk_root]);\n+}\n+\n+fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {\n+    // Following what clang does\n+    // (https://github.com/llvm/llvm-project/blob/\n+    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n+    // to allow the SDK path to be set. (For clang, xcrun sets\n+    // SDKROOT; for rustc, the user or build system can set it, or we\n+    // can fall back to checking for xcrun on PATH.)\n+    if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n+        let p = Path::new(&sdkroot);\n+        match sdk_name {\n+            // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n+            \"appletvos\"\n+                if sdkroot.contains(\"TVSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"appletvsimulator\"\n+                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"iphoneos\"\n+                if sdkroot.contains(\"iPhoneSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n+            \"iphonesimulator\"\n+                if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {\n+            }\n+            \"macosx10.15\"\n+                if sdkroot.contains(\"iPhoneOS.platform\")\n+                    || sdkroot.contains(\"iPhoneSimulator.platform\") => {}\n+            // Ignore `SDKROOT` if it's not a valid path.\n+            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => {}\n+            _ => return Ok(sdkroot),\n+        }\n+    }\n+    let res =\n+        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n+            |output| {\n+                if output.status.success() {\n+                    Ok(String::from_utf8(output.stdout).unwrap())\n+                } else {\n+                    let error = String::from_utf8(output.stderr);\n+                    let error = format!(\"process exit with error: {}\", error.unwrap());\n+                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n+                }\n+            },\n+        );\n+\n+    match res {\n+        Ok(output) => Ok(output.trim().to_string()),\n+        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n+    }\n+}"}, {"sha": "168cd01878e52082d347e0e738f8b9f5591d4192", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Arm64, AppleOS::iOS)?;\n+    let base = opts(Arch::Arm64);\n     Ok(Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "5e2cab0df1e550ef13650a2a637fa29fcefaf085", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Arm64, AppleOS::tvOS)?;\n+    let base = opts(Arch::Arm64);\n     Ok(Target {\n         llvm_target: \"arm64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "e34277d5af04cc374f8c5972f31c5df9a3435d7b", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 4, "deletions": 112, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::env;\n-use std::io;\n-use std::path::Path;\n-use std::process::Command;\n+use crate::spec::TargetOptions;\n \n use Arch::*;\n #[allow(non_camel_case_types)]\n@@ -16,108 +12,6 @@ pub enum Arch {\n     X86_64_macabi,\n }\n \n-#[allow(non_camel_case_types)]\n-#[derive(Copy, Clone)]\n-pub enum AppleOS {\n-    tvOS,\n-    iOS,\n-}\n-\n-impl Arch {\n-    pub fn to_string(self) -> &'static str {\n-        match self {\n-            Armv7 => \"armv7\",\n-            Armv7s => \"armv7s\",\n-            Arm64 => \"arm64\",\n-            I386 => \"i386\",\n-            X86_64 => \"x86_64\",\n-            X86_64_macabi => \"x86_64\",\n-        }\n-    }\n-}\n-\n-pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n-    // Following what clang does\n-    // (https://github.com/llvm/llvm-project/blob/\n-    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n-    // to allow the SDK path to be set. (For clang, xcrun sets\n-    // SDKROOT; for rustc, the user or build system can set it, or we\n-    // can fall back to checking for xcrun on PATH.)\n-    if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n-        let p = Path::new(&sdkroot);\n-        match sdk_name {\n-            // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n-            \"appletvos\"\n-                if sdkroot.contains(\"TVSimulator.platform\")\n-                    || sdkroot.contains(\"MacOSX.platform\") => {}\n-            \"appletvsimulator\"\n-                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {}\n-            \"iphoneos\"\n-                if sdkroot.contains(\"iPhoneSimulator.platform\")\n-                    || sdkroot.contains(\"MacOSX.platform\") => {}\n-            \"iphonesimulator\"\n-                if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {\n-            }\n-            \"macosx10.15\"\n-                if sdkroot.contains(\"iPhoneOS.platform\")\n-                    || sdkroot.contains(\"iPhoneSimulator.platform\") => {}\n-            // Ignore `SDKROOT` if it's not a valid path.\n-            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => {}\n-            _ => return Ok(sdkroot),\n-        }\n-    }\n-    let res =\n-        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n-            |output| {\n-                if output.status.success() {\n-                    Ok(String::from_utf8(output.stdout).unwrap())\n-                } else {\n-                    let error = String::from_utf8(output.stderr);\n-                    let error = format!(\"process exit with error: {}\", error.unwrap());\n-                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n-                }\n-            },\n-        );\n-\n-    match res {\n-        Ok(output) => Ok(output.trim().to_string()),\n-        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n-    }\n-}\n-\n-fn build_pre_link_args(arch: Arch, os: AppleOS) -> Result<LinkArgs, String> {\n-    let sdk_name = match (arch, os) {\n-        (Arm64, AppleOS::tvOS) => \"appletvos\",\n-        (X86_64, AppleOS::tvOS) => \"appletvsimulator\",\n-        (Armv7, AppleOS::iOS) => \"iphoneos\",\n-        (Armv7s, AppleOS::iOS) => \"iphoneos\",\n-        (Arm64, AppleOS::iOS) => \"iphoneos\",\n-        (I386, AppleOS::iOS) => \"iphonesimulator\",\n-        (X86_64, AppleOS::iOS) => \"iphonesimulator\",\n-        (X86_64_macabi, AppleOS::iOS) => \"macosx10.15\",\n-        _ => unreachable!(),\n-    };\n-\n-    let arch_name = arch.to_string();\n-\n-    let sdk_root = get_sdk_root(sdk_name)?;\n-\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            \"-arch\".to_string(),\n-            arch_name.to_string(),\n-            \"-isysroot\".to_string(),\n-            sdk_root.clone(),\n-            \"-Wl,-syslibroot\".to_string(),\n-            sdk_root,\n-        ],\n-    );\n-\n-    Ok(args)\n-}\n-\n fn target_cpu(arch: Arch) -> String {\n     match arch {\n         Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n@@ -137,15 +31,13 @@ fn link_env_remove(arch: Arch) -> Vec<String> {\n     }\n }\n \n-pub fn opts(arch: Arch, os: AppleOS) -> Result<TargetOptions, String> {\n-    let pre_link_args = build_pre_link_args(arch, os)?;\n-    Ok(TargetOptions {\n+pub fn opts(arch: Arch) -> TargetOptions {\n+    TargetOptions {\n         cpu: target_cpu(arch),\n         executables: true,\n-        pre_link_args,\n         link_env_remove: link_env_remove(arch),\n         has_elf_tls: false,\n         eliminate_frame_pointer: false,\n         ..super::apple_base::opts()\n-    })\n+    }\n }"}, {"sha": "6dafcc2c3453a3f3d3c066f50a00ae105909bbf5", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7, AppleOS::iOS)?;\n+    let base = opts(Arch::Armv7);\n     Ok(Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "d6c99c4ade6e807936138ed27cc517ef34a2a8a3", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7s, AppleOS::iOS)?;\n+    let base = opts(Arch::Armv7s);\n     Ok(Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "6cb209ab1c0739ceb9c44a1587574c4241926e9f", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::I386, AppleOS::iOS)?;\n+    let base = opts(Arch::I386);\n     Ok(Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "fd3e4e2f57b669079bc592d02c32d483665aa489", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n+    let base = opts(Arch::X86_64);\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "4cfbd9eba06c78957d41ed7134d7bd938c33850d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64_macabi, AppleOS::iOS)?;\n+    let base = opts(Arch::X86_64_macabi);\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "664a3ed8816c4c7fe67319f4ea8a3172fe44a27e", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n+    let base = opts(Arch::X86_64);\n     Ok(Target {\n         llvm_target: \"x86_64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "6c605f045e5e8e2759119bb2a398a7fe71c5fcf8", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -57,7 +57,7 @@ Specifically, these platforms are required to have each of the following:\n \n target | std | host | notes\n -------|-----|------|-------\n-`aarch64-apple-ios` | \u2713[^apple] |  | ARM64 iOS\n+`aarch64-apple-ios` | \u2713 |  | ARM64 iOS\n `aarch64-fuchsia` | \u2713 |  | ARM64 Fuchsia\n `aarch64-linux-android` | \u2713 |  | ARM64 Android\n `aarch64-pc-windows-msvc` | \u2713 |  | ARM64 Windows MSVC\n@@ -122,7 +122,7 @@ target | std | host | notes\n `wasm32-unknown-emscripten` | \u2713 |  | WebAssembly via Emscripten\n `wasm32-unknown-unknown` | \u2713 |  | WebAssembly\n `wasm32-wasi` | \u2713 |  | WebAssembly with WASI\n-`x86_64-apple-ios` | \u2713[^apple] |  | 64-bit x86 iOS\n+`x86_64-apple-ios` | \u2713 |  | 64-bit x86 iOS\n `x86_64-fortanix-unknown-sgx` | \u2713 |  | [Fortanix ABI] for 64-bit Intel SGX\n `x86_64-fuchsia` | \u2713 |  | 64-bit Fuchsia\n `x86_64-linux-android` | \u2713 |  | 64-bit x86 Android\n@@ -146,7 +146,7 @@ not available.\n target | std | host | notes\n -------|-----|------|-------\n `aarch64-apple-darwin` | ? |  | ARM64 macOS\n-`aarch64-apple-tvos` | *[^apple] |  | ARM64 tvOS\n+`aarch64-apple-tvos` | * |  | ARM64 tvOS\n `aarch64-unknown-cloudabi` | \u2713 |  | ARM64 CloudABI\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |\n@@ -158,16 +158,16 @@ target | std | host | notes\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n `armv6-unknown-netbsd-eabihf` | ? |  |\n-`armv7-apple-ios` | \u2713[^apple] |  | ARMv7 iOS, Cortex-a8\n+`armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n `armv7-unknown-cloudabi-eabihf` | \u2713 |  | ARMv7 CloudABI, hardfloat\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | ? |  |\n `armv7-wrs-vxworks-eabihf` | ? |  |\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n-`armv7s-apple-ios` | \u2713[^apple] |  |\n+`armv7s-apple-ios` | \u2713 |  |\n `avr-unknown-gnu-atmega328` | \u2717 |  | AVR. Requires `-Z build-std=core`\n `hexagon-unknown-linux-musl` | ? |  |\n-`i386-apple-ios` | \u2713[^apple] |  | 32-bit x86 iOS\n+`i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit OSX (10.7+, Lion+)\n `i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n `i686-unknown-cloudabi` | \u2713 |  | 32-bit CloudABI\n@@ -203,8 +203,8 @@ target | std | host | notes\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n `thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n `thumbv4t-none-eabi` | * |  | ARMv4T T32\n-`x86_64-apple-ios-macabi` | \u2713[^apple] |  | Apple Catalyst\n-`x86_64-apple-tvos` | *[^apple] | | x86 64-bit tvOS\n+`x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst\n+`x86_64-apple-tvos` | * | | x86 64-bit tvOS\n `x86_64-linux-kernel` | * |  | Linux kernel modules\n `x86_64-pc-solaris` | ? |  |\n `x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support\n@@ -221,4 +221,3 @@ target | std | host | notes\n `x86_64-wrs-vxworks` | ? |  |\n \n [runs on NVIDIA GPUs]: https://github.com/japaric-archived/nvptx#targets\n-[^apple]: These targets are only available on macOS."}, {"sha": "6a492bbff4d4027ea3c150e11ca912cc6ecf2704", "filename": "src/tools/tier-check/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37df40bd1c9374ca91112f2d1ea0e27127130c09/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df40bd1c9374ca91112f2d1ea0e27127130c09/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs?ref=37df40bd1c9374ca91112f2d1ea0e27127130c09", "patch": "@@ -25,8 +25,6 @@ fn main() {\n     let doc_targets: HashSet<_> = doc_targets_md\n         .lines()\n         .filter(|line| line.starts_with('`') && line.contains('|'))\n-        // These platforms only exist on macos.\n-        .filter(|line| !line.contains(\"[^apple]\") || cfg!(target_os = \"macos\"))\n         .map(|line| line.split('`').skip(1).next().expect(\"expected target code span\"))\n         .collect();\n "}]}