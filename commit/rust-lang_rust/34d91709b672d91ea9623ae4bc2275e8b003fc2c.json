{"sha": "34d91709b672d91ea9623ae4bc2275e8b003fc2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZDkxNzA5YjY3MmQ5MWVhOTYyM2FlNGJjMjI3NWU4YjAwM2ZjMmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T15:00:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:49Z"}, "message": "parse: refactor fun ret ty & param ty", "tree": {"sha": "9b7b2c12d75a6ff4e8e9af725c778b09d1bba319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b7b2c12d75a6ff4e8e9af725c778b09d1bba319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34d91709b672d91ea9623ae4bc2275e8b003fc2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34d91709b672d91ea9623ae4bc2275e8b003fc2c", "html_url": "https://github.com/rust-lang/rust/commit/34d91709b672d91ea9623ae4bc2275e8b003fc2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34d91709b672d91ea9623ae4bc2275e8b003fc2c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404013e015d9a9f4835cda47e56aab5223f278ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/404013e015d9a9f4835cda47e56aab5223f278ed", "html_url": "https://github.com/rust-lang/rust/commit/404013e015d9a9f4835cda47e56aab5223f278ed"}], "stats": {"total": 184, "additions": 77, "deletions": 107}, "files": [{"sha": "e2c99f456e988dacfb93f221ebdda3dc354a34d6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -2092,29 +2092,19 @@ impl<'a> LoweringContext<'a> {\n                     .iter()\n                     .map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed()))\n                     .collect();\n+                let output_ty = match output {\n+                    FunctionRetTy::Ty(ty) => this.lower_ty(&ty, ImplTraitContext::disallowed()),\n+                    FunctionRetTy::Default(_) => P(this.ty_tup(span, hir::HirVec::new())),\n+                };\n+                let args = hir_vec![GenericArg::Type(this.ty_tup(span, inputs))];\n+                let binding = hir::TypeBinding {\n+                    hir_id: this.next_id(),\n+                    ident: Ident::with_dummy_span(FN_OUTPUT_NAME),\n+                    span: output_ty.span,\n+                    kind: hir::TypeBindingKind::Equality { ty: output_ty },\n+                };\n                 (\n-                    hir::GenericArgs {\n-                        args: hir_vec![GenericArg::Type(this.ty_tup(span, inputs))],\n-                        bindings: hir_vec![\n-                            hir::TypeBinding {\n-                                hir_id: this.next_id(),\n-                                ident: Ident::with_dummy_span(FN_OUTPUT_NAME),\n-                                kind: hir::TypeBindingKind::Equality {\n-                                    ty: output\n-                                        .as_ref()\n-                                        .map(|ty| this.lower_ty(\n-                                            &ty,\n-                                            ImplTraitContext::disallowed()\n-                                        ))\n-                                        .unwrap_or_else(||\n-                                            P(this.ty_tup(span, hir::HirVec::new()))\n-                                        ),\n-                                },\n-                                span: output.as_ref().map_or(span, |ty| ty.span),\n-                            }\n-                        ],\n-                        parenthesized: true,\n-                    },\n+                    hir::GenericArgs { args, bindings: hir_vec![binding], parenthesized: true },\n                     false,\n                 )\n             }"}, {"sha": "ca7c4ba878638bc8bb4ea44b82cfc6966e5f6a0a", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -712,8 +712,8 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n         ret\n     }\n \n-    fn should_ignore_fn(ret_ty: &ast::FnDecl) -> bool {\n-        if let ast::FunctionRetTy::Ty(ref ty) = ret_ty.output {\n+    fn should_ignore_fn(ret_ty: &ast::FunctionRetTy) -> bool {\n+        if let ast::FunctionRetTy::Ty(ref ty) = ret_ty {\n             fn involves_impl_trait(ty: &ast::Ty) -> bool {\n                 match ty.kind {\n                     ast::TyKind::ImplTrait(..) => true,\n@@ -742,7 +742,7 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                             },\n                             Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n                                 any_involves_impl_trait(data.inputs.iter()) ||\n-                                any_involves_impl_trait(data.output.iter())\n+                                ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n                             }\n                         }\n                     }),\n@@ -762,7 +762,7 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n \n     fn is_sig_const(sig: &ast::FnSig) -> bool {\n         sig.header.constness.node == ast::Constness::Const ||\n-            ReplaceBodyWithLoop::should_ignore_fn(&sig.decl)\n+            ReplaceBodyWithLoop::should_ignore_fn(&sig.decl.output)\n     }\n }\n "}, {"sha": "e4dff07e92cb89518a164cada5e9a837b790641d", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -1381,7 +1381,7 @@ impl<'a> Parser<'a> {\n                 args\n             }\n         };\n-        let output = self.parse_ret_ty(true)?;\n+        let output = self.parse_ret_ty(true, true)?;\n \n         Ok(P(FnDecl {\n             inputs: inputs_captures,"}, {"sha": "f391eda976ce49fff7863a740553edb41cd14cb1", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -1900,7 +1900,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<FnDecl>> {\n         Ok(P(FnDecl {\n             inputs: self.parse_fn_params(cfg)?,\n-            output: self.parse_ret_ty(ret_allow_plus)?,\n+            output: self.parse_ret_ty(ret_allow_plus, true)?,\n         }))\n     }\n \n@@ -2002,12 +2002,12 @@ impl<'a> Parser<'a> {\n             }\n \n             self.eat_incorrect_doc_comment_for_param_type();\n-            (pat, self.parse_ty_common(true, true, cfg.allow_c_variadic)?)\n+            (pat, self.parse_ty_for_param(cfg.allow_c_variadic)?)\n         } else {\n             debug!(\"parse_param_general ident_to_pat\");\n             let parser_snapshot_before_ty = self.clone();\n             self.eat_incorrect_doc_comment_for_param_type();\n-            let mut ty = self.parse_ty_common(true, true, cfg.allow_c_variadic);\n+            let mut ty = self.parse_ty_for_param(cfg.allow_c_variadic);\n             if ty.is_ok() && self.token != token::Comma &&\n                self.token != token::CloseDelim(token::Paren) {\n                 // This wasn't actually a type, but a pattern looking like a type,"}, {"sha": "aeba6dd2f67c57fe5e5fd3cbe22a88da599c24d9", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -182,11 +182,7 @@ impl<'a> Parser<'a> {\n                 // `(T, U) -> R`\n                 let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n                 let span = ident.span.to(self.prev_span);\n-                let output = if self.eat(&token::RArrow) {\n-                    Some(self.parse_ty_common(false, false, false)?)\n-                } else {\n-                    None\n-                };\n+                let output = self.parse_ret_ty(false, false)?;\n                 ParenthesizedArgs { inputs, output, span }.into()\n             };\n "}, {"sha": "1dffa6c94a898ea7d17722c3abd3a14f68611c5e", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -30,6 +30,13 @@ impl<'a> Parser<'a> {\n         self.parse_ty_common(true, true, false)\n     }\n \n+    /// Parse a type suitable for a function or function pointer parameter.\n+    /// The difference from `parse_ty` is that this version allows `...`\n+    /// (`CVarArgs`) at the top level of the the type.\n+    pub(super) fn parse_ty_for_param(&mut self, allow_c_variadic: bool) -> PResult<'a, P<Ty>> {\n+        self.parse_ty_common(true, true, allow_c_variadic)\n+    }\n+\n     /// Parses a type in restricted contexts where `+` is not permitted.\n     ///\n     /// Example 1: `&'a TYPE`\n@@ -41,17 +48,26 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an optional return type `[ -> TY ]` in a function declaration.\n-    pub(super) fn parse_ret_ty(&mut self, allow_plus: bool) -> PResult<'a, FunctionRetTy> {\n+    pub(super) fn parse_ret_ty(\n+        &mut self,\n+        allow_plus: bool,\n+        allow_qpath_recovery: bool,\n+    ) -> PResult<'a, FunctionRetTy> {\n         Ok(if self.eat(&token::RArrow) {\n             // FIXME(Centril): Can we unconditionally `allow_plus`?\n-            FunctionRetTy::Ty(self.parse_ty_common(allow_plus, true, false)?)\n+            FunctionRetTy::Ty(self.parse_ty_common(allow_plus, allow_qpath_recovery, false)?)\n         } else {\n             FunctionRetTy::Default(self.token.span.shrink_to_lo())\n         })\n     }\n \n-    pub(super) fn parse_ty_common(&mut self, allow_plus: bool, allow_qpath_recovery: bool,\n-                       allow_c_variadic: bool) -> PResult<'a, P<Ty>> {\n+    fn parse_ty_common(\n+        &mut self,\n+        allow_plus: bool,\n+        allow_qpath_recovery: bool,\n+        // Is `...` (`CVarArgs`) legal in the immediate top level call?\n+        allow_c_variadic: bool,\n+    ) -> PResult<'a, P<Ty>> {\n         maybe_recover_from_interpolated_ty_qpath!(self, allow_qpath_recovery);\n         maybe_whole!(self, NtTy, |x| x);\n \n@@ -198,6 +214,8 @@ impl<'a> Parser<'a> {\n                 self.eat(&token::DotDotDot);\n                 TyKind::CVarArgs\n             } else {\n+                // FIXME(Centril): Should we just allow `...` syntactically\n+                // anywhere in a type and use semantic restrictions instead?\n                 return Err(struct_span_fatal!(\n                     self.sess.span_diagnostic,\n                     self.token.span,"}, {"sha": "8be97155d8c61fcd8e5821d97a25bc7cde185048", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -674,10 +674,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             GenericArgs::Parenthesized(ref data) => {\n                 walk_list!(self, visit_ty, &data.inputs);\n-                if let Some(ref type_) = data.output {\n+                if let FunctionRetTy::Ty(ty) = &data.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| this.visit_ty(type_));\n+                    self.with_impl_trait(None, |this| this.visit_ty(ty));\n                 }\n             }\n         }"}, {"sha": "cc0f3c512f53ee1fe0ad63f29043eb9078216e92", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -811,18 +811,17 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 match **generic_args {\n                     ast::GenericArgs::AngleBracketed(ref data) => {\n                         for arg in &data.args {\n-                            match arg {\n-                                ast::GenericArg::Type(ty) => self.visit_ty(ty),\n-                                _ => {}\n+                            if let ast::GenericArg::Type(ty) = arg {\n+                                self.visit_ty(ty);\n                             }\n                         }\n                     }\n                     ast::GenericArgs::Parenthesized(ref data) => {\n                         for t in &data.inputs {\n                             self.visit_ty(t);\n                         }\n-                        if let Some(ref t) = data.output {\n-                            self.visit_ty(t);\n+                        if let ast::FunctionRetTy::Ty(ty) = &data.output {\n+                            self.visit_ty(ty);\n                         }\n                     }\n                 }"}, {"sha": "d90d74d7a262ce2eca590d835644303fa536c993", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -254,7 +254,7 @@ pub struct ParenthesizedArgs {\n     pub inputs: Vec<P<Ty>>,\n \n     /// `C`\n-    pub output: Option<P<Ty>>,\n+    pub output: FunctionRetTy,\n }\n \n impl ParenthesizedArgs {\n@@ -2185,7 +2185,7 @@ impl fmt::Debug for ImplPolarity {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum FunctionRetTy {\n+pub enum FunctionRetTy { // FIXME(Centril): Rename to `FnRetTy` and in HIR also.\n     /// Returns type is not specified.\n     ///\n     /// Functions default to `()` and closures default to inference."}, {"sha": "97a85b0fe7e35806c1eb7ffd8878f3e2f0a07f19", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -553,7 +553,7 @@ pub fn noop_visit_parenthesized_parameter_data<T: MutVisitor>(args: &mut Parenth\n                                                               vis: &mut T) {\n     let ParenthesizedArgs { inputs, output, span } = args;\n     visit_vec(inputs, |input| vis.visit_ty(input));\n-    visit_opt(output, |output| vis.visit_ty(output));\n+    noop_visit_fn_ret_ty(output, vis);\n     vis.visit_span(span);\n }\n \n@@ -742,7 +742,11 @@ pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T)\n pub fn noop_visit_fn_decl<T: MutVisitor>(decl: &mut P<FnDecl>, vis: &mut T) {\n     let FnDecl { inputs, output } = decl.deref_mut();\n     inputs.flat_map_in_place(|param| vis.flat_map_param(param));\n-    match output {\n+    noop_visit_fn_ret_ty(output, vis);\n+}\n+\n+pub fn noop_visit_fn_ret_ty<T: MutVisitor>(fn_ret_ty: &mut FunctionRetTy, vis: &mut T) {\n+    match fn_ret_ty {\n         FunctionRetTy::Default(span) => vis.visit_span(span),\n         FunctionRetTy::Ty(ty) => vis.visit_ty(ty),\n     }"}, {"sha": "a141d4d71bbda64eaba894fdfa8800d7bddf7fbd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 56, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -887,17 +887,9 @@ impl<'a> PrintState<'a> for State<'a> {\n \n             ast::GenericArgs::Parenthesized(ref data) => {\n                 self.s.word(\"(\");\n-                self.commasep(\n-                    Inconsistent,\n-                    &data.inputs,\n-                    |s, ty| s.print_type(ty));\n+                self.commasep(Inconsistent, &data.inputs, |s, ty| s.print_type(ty));\n                 self.s.word(\")\");\n-\n-                if let Some(ref ty) = data.output {\n-                    self.space_if_not_bol();\n-                    self.word_space(\"->\");\n-                    self.print_type(ty);\n-                }\n+                self.print_fn_ret_ty(&data.output);\n             }\n         }\n     }\n@@ -1579,6 +1571,7 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::SubItem(ti.id))\n     }\n \n+    // FIXME(Centril): merge with function above.\n     crate fn print_impl_item(&mut self, ii: &ast::ImplItem) {\n         self.ann.pre(self, AnnNode::SubItem(ii.id));\n         self.hardbreak_if_not_bol();\n@@ -2104,7 +2097,7 @@ impl<'a> State<'a> {\n                 self.print_asyncness(asyncness);\n                 self.print_capture_clause(capture_clause);\n \n-                self.print_fn_block_params(decl);\n+                self.print_fn_params_and_ret(decl, true);\n                 self.s.space();\n                 self.print_expr(body);\n                 self.end(); // need to close a box\n@@ -2535,36 +2528,16 @@ impl<'a> State<'a> {\n             self.print_ident(name);\n         }\n         self.print_generic_params(&generics.params);\n-        self.print_fn_params_and_ret(decl);\n+        self.print_fn_params_and_ret(decl, false);\n         self.print_where_clause(&generics.where_clause)\n     }\n \n-    crate fn print_fn_params_and_ret(&mut self, decl: &ast::FnDecl) {\n-        self.popen();\n-        self.commasep(Inconsistent, &decl.inputs, |s, param| s.print_param(param, false));\n-        self.pclose();\n-\n-        self.print_fn_output(decl)\n-    }\n-\n-    crate fn print_fn_block_params(&mut self, decl: &ast::FnDecl) {\n-        self.s.word(\"|\");\n-        self.commasep(Inconsistent, &decl.inputs, |s, param| s.print_param(param, true));\n-        self.s.word(\"|\");\n-\n-        if let ast::FunctionRetTy::Default(..) = decl.output {\n-            return;\n-        }\n-\n-        self.space_if_not_bol();\n-        self.word_space(\"->\");\n-        match decl.output {\n-            ast::FunctionRetTy::Ty(ref ty) => {\n-                self.print_type(ty);\n-                self.maybe_print_comment(ty.span.lo())\n-            }\n-            ast::FunctionRetTy::Default(..) => unreachable!(),\n-        }\n+    crate fn print_fn_params_and_ret(&mut self, decl: &ast::FnDecl, is_closure: bool) {\n+        let (open, close) = if is_closure { (\"|\", \"|\") } else { (\"(\", \")\") };\n+        self.word(open);\n+        self.commasep(Inconsistent, &decl.inputs, |s, param| s.print_param(param, is_closure));\n+        self.word(close);\n+        self.print_fn_ret_ty(&decl.output)\n     }\n \n     crate fn print_movability(&mut self, movability: ast::Movability) {\n@@ -2786,24 +2759,14 @@ impl<'a> State<'a> {\n         self.end();\n     }\n \n-    crate fn print_fn_output(&mut self, decl: &ast::FnDecl) {\n-        if let ast::FunctionRetTy::Default(..) = decl.output {\n-            return;\n-        }\n-\n-        self.space_if_not_bol();\n-        self.ibox(INDENT_UNIT);\n-        self.word_space(\"->\");\n-        match decl.output {\n-            ast::FunctionRetTy::Default(..) => unreachable!(),\n-            ast::FunctionRetTy::Ty(ref ty) =>\n-                self.print_type(ty),\n-        }\n-        self.end();\n-\n-        match decl.output {\n-            ast::FunctionRetTy::Ty(ref output) => self.maybe_print_comment(output.span.lo()),\n-            _ => {}\n+    crate fn print_fn_ret_ty(&mut self, fn_ret_ty: &ast::FunctionRetTy) {\n+        if let ast::FunctionRetTy::Ty(ty) = fn_ret_ty {\n+            self.space_if_not_bol();\n+            self.ibox(INDENT_UNIT);\n+            self.word_space(\"->\");\n+            self.print_type(ty);\n+            self.end();\n+            self.maybe_print_comment(ty.span.lo());\n         }\n     }\n "}, {"sha": "74df808b37e3634fd748d9165a8398b8ba7b22bb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d91709b672d91ea9623ae4bc2275e8b003fc2c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=34d91709b672d91ea9623ae4bc2275e8b003fc2c", "patch": "@@ -420,7 +420,7 @@ pub fn walk_generic_args<'a, V>(visitor: &mut V,\n         }\n         GenericArgs::Parenthesized(ref data) => {\n             walk_list!(visitor, visit_ty, &data.inputs);\n-            walk_list!(visitor, visit_ty, &data.output);\n+            walk_fn_ret_ty(visitor, &data.output);\n         }\n     }\n }"}]}