{"sha": "ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMTY2MzlkZmEwOWEzZWMwNmY3YWJlMWJkYzIyZThmM2U1ZDI4Yzk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-01T17:54:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-01T18:39:20Z"}, "message": "Slightly more aggressive about inserting whitespace. Getting frustrated with comments.", "tree": {"sha": "782d75248f8a3752f4aeabf0ec5643ffce2b7ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782d75248f8a3752f4aeabf0ec5643ffce2b7ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9", "html_url": "https://github.com/rust-lang/rust/commit/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649a7bf38a59e16da26cda03f7131f2b006d8178", "url": "https://api.github.com/repos/rust-lang/rust/commits/649a7bf38a59e16da26cda03f7131f2b006d8178", "html_url": "https://github.com/rust-lang/rust/commit/649a7bf38a59e16da26cda03f7131f2b006d8178"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "1d218beba27db5fff536ceb0cc74e9799bed3adb", "filename": "src/comp/pretty/pp.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9/src%2Fcomp%2Fpretty%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9/src%2Fcomp%2Fpretty%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpp.rs?ref=ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9", "patch": "@@ -442,6 +442,16 @@ obj printer(io::writer out,\n         }\n     }\n \n+    fn top() -> print_stack_elt {\n+        auto n = vec::len(print_stack);\n+        let print_stack_elt top =\n+            rec(offset=0, pbreak=broken(inconsistent));;\n+        if (n != 0u) {\n+            top = print_stack.(n - 1u);\n+        }\n+        ret top;\n+    }\n+\n     fn print(token x, int L) {\n         log #fmt(\"print %s %d (remaining line space=%d)\",\n                  tok_str(x), L, space);\n@@ -471,12 +481,7 @@ obj printer(io::writer out,\n \n             case (BREAK(?b)) {\n \n-                auto n = vec::len(print_stack);\n-                let print_stack_elt top =\n-                    rec(offset=0, pbreak=broken(inconsistent));;\n-                if (n != 0u) {\n-                    top = print_stack.(n - 1u);\n-                }\n+                auto top = self.top();\n \n                 alt (top.pbreak) {\n                     case (fits) {\n@@ -552,6 +557,9 @@ fn word(printer p, str wrd) {\n fn huge_word(printer p, str wrd) {\n     p.pretty_print(STRING(wrd, 0xffff));\n }\n+fn zero_word(printer p, str wrd) {\n+    p.pretty_print(STRING(wrd, 0));\n+}\n fn spaces(printer p, uint n) { break_offset(p, n, 0); }\n fn zerobreak(printer p) { spaces(p, 0u); }\n fn space(printer p) { spaces(p, 1u); }"}, {"sha": "44a3489d29b1cd8fa2c431a28208c35afa07729b", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=ae16639dfa09a3ec06f7abe1bdc22e8f3e5d28c9", "patch": "@@ -18,6 +18,7 @@ import pp::cbox;\n import pp::ibox;\n import pp::word;\n import pp::huge_word;\n+import pp::zero_word;\n import pp::space;\n import pp::zerobreak;\n import pp::hardbreak;\n@@ -1191,14 +1192,21 @@ fn print_comment(&ps s, lexer::cmnt cmnt) {\n             word(s.s, cmnt.lines.(0));\n             zerobreak(s.s);\n         }\n-        case (_) {\n+        case (lexer::isolated) {\n+            hardbreak(s.s);\n+            for (str line in cmnt.lines) {\n+                zero_word(s.s, line);\n+                hardbreak(s.s);\n+            }\n+        }\n+        case (lexer::trailing) {\n             if (vec::len(cmnt.lines) == 1u) {\n-                word(s.s, cmnt.lines.(0));\n+                zero_word(s.s, cmnt.lines.(0));\n                 hardbreak(s.s);\n             } else {\n                 ibox(s.s, 0u);\n                 for (str line in cmnt.lines) {\n-                    word(s.s, line);\n+                    zero_word(s.s, line);\n                     hardbreak(s.s);\n                 }\n                 end(s.s);"}]}