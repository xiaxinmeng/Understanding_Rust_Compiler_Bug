{"sha": "765bd47fa0f0e0d5d893283a94c76e2b1009d680", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NWJkNDdmYTBmMGUwZDVkODkzMjgzYTk0Yzc2ZTJiMTAwOWQ2ODA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-27T15:35:12Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-27T15:53:42Z"}, "message": "Recover extra trailing angle brackets in struct definition\n\nThis commit applies the existing 'extra angle bracket recovery' logic\nwhen parsing fields in struct definitions. This allows us to continue\nparsing the struct's fields, avoiding spurious 'missing field' errors in\ncode that tries to use the struct.", "tree": {"sha": "fe2ffb3a78441bdb16ab503ff7e490a2f490f3ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe2ffb3a78441bdb16ab503ff7e490a2f490f3ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/765bd47fa0f0e0d5d893283a94c76e2b1009d680", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl73a4cACgkQtAh+UQ6Y\nsWQu8hAAhnY0vXGlH2pr8riXvY/9IkJS5fFBEVVSg3D1H9QahImpJEsZiJ/oaeRh\nJV9Vn4+PhX3Gm0E9RTjsYnOaGRojIUFmYOzR4k4Ky1PDobqer/sYm6wLqJteiW+q\nwQXdM0kp81mYgLeWqWnedRnYk90LXhyMGeZeYUVduZQgMJIRSMraJorMPrE2ZWVs\nqYK+qw/54GBwusGMaDZOhj72zwlgRE4nj9l1H2Mka+UMdJ9OBrRiHJdRsiB3GAqf\n5l+jQUl5x5ku2fY4NYU0fBwN2S1Jb63/VkB6D4s9H1YdoTOjDdOUcycrdETU4IYQ\nTbjqvrLdeB2ukyxmeciU5tfEbp7VaVrHBndMW4F7jVg1M7Mx8MjGbGqNaAZvYmC9\nZffn75zTmE13WGFHkLUqlgk+jI6m2AQT9IuohCgqt/Fgd+JHPCCEgMGKZ++hC52d\nEaB4pHo8P13KuQSx+HM2ehTmLtVRy4YCcDAx41zHYCJcVUdcutUpbIXcxNfhkYKp\nHzAtjZg+FsxEUgWAEMEyANNFudPiF52hO6x0grgk+k7aYHWn7tK0Qbymgbry12pq\nCwwR3eQPoXW9C0Cco2g0XwtEYteaMQBpwHUWnodl43IP4v8HvTTsvOfn9416/Myw\nGac3+MBE6UfV774AZEFDLDHnHlzfsCc/ZBFwKnd+x5dgcIL5QwQ=\n=Ea1C\n-----END PGP SIGNATURE-----", "payload": "tree fe2ffb3a78441bdb16ab503ff7e490a2f490f3ed\nparent 7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772\nauthor Aaron Hill <aa1ronham@gmail.com> 1593272112 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1593273222 -0400\n\nRecover extra trailing angle brackets in struct definition\n\nThis commit applies the existing 'extra angle bracket recovery' logic\nwhen parsing fields in struct definitions. This allows us to continue\nparsing the struct's fields, avoiding spurious 'missing field' errors in\ncode that tries to use the struct.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/765bd47fa0f0e0d5d893283a94c76e2b1009d680", "html_url": "https://github.com/rust-lang/rust/commit/765bd47fa0f0e0d5d893283a94c76e2b1009d680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/765bd47fa0f0e0d5d893283a94c76e2b1009d680/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "url": "https://api.github.com/repos/rust-lang/rust/commits/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "html_url": "https://github.com/rust-lang/rust/commit/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "4b060bf108f4e8995e3fc37c19a28338d9e3fcda", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=765bd47fa0f0e0d5d893283a94c76e2b1009d680", "patch": "@@ -376,7 +376,14 @@ impl<'a> Parser<'a> {\n     /// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n     ///                                                        ^^ help: remove extra angle brackets\n     /// ```\n-    pub(super) fn check_trailing_angle_brackets(&mut self, segment: &PathSegment, end: TokenKind) {\n+    ///\n+    /// If `true` is returned, then trailing brackets were recovered, tokens were consumed\n+    /// up until one of the tokens in 'end' was encountered, and an error was emitted.\n+    pub(super) fn check_trailing_angle_brackets(\n+        &mut self,\n+        segment: &PathSegment,\n+        end: &[&TokenKind],\n+    ) -> bool {\n         // This function is intended to be invoked after parsing a path segment where there are two\n         // cases:\n         //\n@@ -409,7 +416,7 @@ impl<'a> Parser<'a> {\n             parsed_angle_bracket_args,\n         );\n         if !parsed_angle_bracket_args {\n-            return;\n+            return false;\n         }\n \n         // Keep the span at the start so we can highlight the sequence of `>` characters to be\n@@ -447,18 +454,18 @@ impl<'a> Parser<'a> {\n             number_of_gt, number_of_shr,\n         );\n         if number_of_gt < 1 && number_of_shr < 1 {\n-            return;\n+            return false;\n         }\n \n         // Finally, double check that we have our end token as otherwise this is the\n         // second case.\n         if self.look_ahead(position, |t| {\n             trace!(\"check_trailing_angle_brackets: t={:?}\", t);\n-            *t == end\n+            end.contains(&&t.kind)\n         }) {\n             // Eat from where we started until the end token so that parsing can continue\n             // as if we didn't have those extra angle brackets.\n-            self.eat_to_tokens(&[&end]);\n+            self.eat_to_tokens(end);\n             let span = lo.until(self.token.span);\n \n             let total_num_of_gt = number_of_gt + number_of_shr * 2;\n@@ -473,7 +480,9 @@ impl<'a> Parser<'a> {\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n+            return true;\n         }\n+        false\n     }\n \n     /// Check to see if a pair of chained operators looks like an attempt at chained comparison,"}, {"sha": "fb38fdc26c7826252d67ae25eaa93e264c7e2012", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=765bd47fa0f0e0d5d893283a94c76e2b1009d680", "patch": "@@ -867,7 +867,7 @@ impl<'a> Parser<'a> {\n \n         let fn_span_lo = self.token.span;\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n-        self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n+        self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(token::Paren)]);\n \n         if self.check(&token::OpenDelim(token::Paren)) {\n             // Method call `expr.f()`"}, {"sha": "fa6264c98e4f00338bae7ee6ae8d967c515e13bf", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=765bd47fa0f0e0d5d893283a94c76e2b1009d680", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind,\n use rustc_ast::ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\n use rustc_ast::ast::{BindingMode, Block, FnDecl, FnSig, Param, SelfKind};\n use rustc_ast::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n-use rustc_ast::ast::{FnHeader, ForeignItem, PathSegment, Visibility, VisibilityKind};\n+use rustc_ast::ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, VisibilityKind};\n use rustc_ast::ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n@@ -1262,6 +1262,25 @@ impl<'a> Parser<'a> {\n                     sp,\n                     &format!(\"expected `,`, or `}}`, found {}\", super::token_descr(&self.token)),\n                 );\n+\n+                // Try to recover extra trailing angle brackets\n+                let mut recovered = false;\n+                if let TyKind::Path(_, Path { segments, .. }) = &a_var.ty.kind {\n+                    if let Some(last_segment) = segments.last() {\n+                        recovered = self.check_trailing_angle_brackets(\n+                            last_segment,\n+                            &[&token::Comma, &token::CloseDelim(token::Brace)],\n+                        );\n+                        if recovered {\n+                            // Handle a case like `Vec<u8>>,` where we can continue parsing fields\n+                            // after the comma\n+                            self.eat(&token::Comma);\n+                            // `check_trailing_angle_brackets` already emitted a nicer error\n+                            err.cancel();\n+                        }\n+                    }\n+                }\n+\n                 if self.token.is_ident() {\n                     // This is likely another field; emit the diagnostic and keep going\n                     err.span_suggestion(\n@@ -1271,6 +1290,14 @@ impl<'a> Parser<'a> {\n                         Applicability::MachineApplicable,\n                     );\n                     err.emit();\n+                    recovered = true;\n+                }\n+\n+                if recovered {\n+                    // Make sure an error was emitted (either by recovering an angle bracket,\n+                    // or by finding an identifier as the next token), since we're\n+                    // going to continue parsing\n+                    assert!(self.sess.span_diagnostic.has_errors());\n                 } else {\n                     return Err(err);\n                 }"}, {"sha": "67e9b3af4a8cfad21ddb0ba0a9712a73db25f30f", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=765bd47fa0f0e0d5d893283a94c76e2b1009d680", "patch": "@@ -169,7 +169,7 @@ impl<'a> Parser<'a> {\n                 // `PathStyle::Expr` is only provided at the root invocation and never in\n                 // `parse_path_segment` to recurse and therefore can be checked to maintain\n                 // this invariant.\n-                self.check_trailing_angle_brackets(&segment, token::ModSep);\n+                self.check_trailing_angle_brackets(&segment, &[&token::ModSep]);\n             }\n             segments.push(segment);\n "}, {"sha": "5e0e00bcb5e8d3eed1c34a9cd6c73d38e4a9eb2f", "filename": "src/test/ui/parser/recover-field-extra-angle-brackets.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.rs?ref=765bd47fa0f0e0d5d893283a94c76e2b1009d680", "patch": "@@ -0,0 +1,14 @@\n+// Tests that we recover from extra trailing angle brackets\n+// in a struct field\n+\n+struct BadStruct {\n+    first: Vec<u8>>, //~ ERROR unmatched angle bracket\n+    second: bool\n+}\n+\n+fn bar(val: BadStruct) {\n+    val.first;\n+    val.second;\n+}\n+\n+fn main() {}"}, {"sha": "318e55f6e99ac993f06b32aeb00e457ca16a4569", "filename": "src/test/ui/parser/recover-field-extra-angle-brackets.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/765bd47fa0f0e0d5d893283a94c76e2b1009d680/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.stderr?ref=765bd47fa0f0e0d5d893283a94c76e2b1009d680", "patch": "@@ -0,0 +1,8 @@\n+error: unmatched angle bracket\n+  --> $DIR/recover-field-extra-angle-brackets.rs:5:19\n+   |\n+LL |     first: Vec<u8>>,\n+   |                   ^ help: remove extra angle bracket\n+\n+error: aborting due to previous error\n+"}]}