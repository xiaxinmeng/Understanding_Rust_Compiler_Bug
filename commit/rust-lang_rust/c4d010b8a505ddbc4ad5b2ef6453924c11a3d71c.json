{"sha": "c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZDAxMGI4YTUwNWRkYmM0YWQ1YjJlZjY0NTM5MjRjMTFhM2Q3MWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T11:49:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T11:49:33Z"}, "message": "Deduplicate debug section defining and linking", "tree": {"sha": "5e5cc9056f7b4ae5ade91c72c52feb58abd63373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e5cc9056f7b4ae5ade91c72c52feb58abd63373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c", "html_url": "https://github.com/rust-lang/rust/commit/c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddbbb267b63bf51b813be1d9b151563474c7e8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbbb267b63bf51b813be1d9b151563474c7e8d8", "html_url": "https://github.com/rust-lang/rust/commit/ddbbb267b63bf51b813be1d9b151563474c7e8d8"}], "stats": {"total": 147, "additions": 26, "deletions": 121}, "files": [{"sha": "7dd9a47bd05fe41cbb5960e759e901ff93fcb4fe", "filename": "src/debuginfo.rs", "status": "modified", "additions": 26, "deletions": 121, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=c4d010b8a505ddbc4ad5b2ef6453924c11a3d71c", "patch": "@@ -200,127 +200,37 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n             )\n             .unwrap();\n \n-        artifact\n-            .declare_with(\n-                SectionId::DebugAbbrev.name(),\n-                Decl::DebugSection,\n-                debug_abbrev.0.writer.into_vec(),\n-            )\n-            .unwrap();\n-        artifact\n-            .declare_with(\n-                SectionId::DebugInfo.name(),\n-                Decl::DebugSection,\n-                debug_info.0.writer.into_vec(),\n-            )\n-            .unwrap();\n-        artifact\n-            .declare_with(\n-                SectionId::DebugStr.name(),\n-                Decl::DebugSection,\n-                debug_str.0.writer.into_vec(),\n-            )\n-            .unwrap();\n-        artifact\n-            .declare_with(\n-                SectionId::DebugLine.name(),\n-                Decl::DebugSection,\n-                debug_line.0.writer.into_vec(),\n-            )\n-            .unwrap();\n-\n-        let debug_ranges_not_empty = !debug_ranges.0.writer.slice().is_empty();\n-        if debug_ranges_not_empty {\n+        macro decl_section($section:ident = $name:ident) {\n             artifact\n                 .declare_with(\n-                    SectionId::DebugRanges.name(),\n+                    SectionId::$section.name(),\n                     Decl::DebugSection,\n-                    debug_ranges.0.writer.into_vec(),\n+                    $name.0.writer.into_vec(),\n                 )\n                 .unwrap();\n         }\n \n-        let debug_rnglists_not_empty = !debug_rnglists.0.writer.slice().is_empty();\n-        if debug_rnglists_not_empty {\n-            artifact\n-                .declare_with(\n-                    SectionId::DebugRngLists.name(),\n-                    Decl::DebugSection,\n-                    debug_rnglists.0.writer.into_vec(),\n-                )\n-                .unwrap();\n-        }\n-\n-        for reloc in debug_abbrev.0.relocs {\n-            artifact\n-                .link_with(\n-                    faerie::Link {\n-                        from: SectionId::DebugAbbrev.name(),\n-                        to: &reloc.name,\n-                        at: u64::from(reloc.offset),\n-                    },\n-                    faerie::Reloc::Debug {\n-                        size: reloc.size,\n-                        addend: reloc.addend as i32,\n-                    },\n-                )\n-                .expect(\"faerie relocation error\");\n-        }\n-\n-        for reloc in debug_info.0.relocs {\n-            artifact\n-                .link_with(\n-                    faerie::Link {\n-                        from: SectionId::DebugInfo.name(),\n-                        to: &reloc.name,\n-                        at: u64::from(reloc.offset),\n-                    },\n-                    faerie::Reloc::Debug {\n-                        size: reloc.size,\n-                        addend: reloc.addend as i32,\n-                    },\n-                )\n-                .expect(\"faerie relocation error\");\n-        }\n+        decl_section!(DebugAbbrev = debug_abbrev);\n+        decl_section!(DebugInfo = debug_info);\n+        decl_section!(DebugStr = debug_str);\n+        decl_section!(DebugLine = debug_line);\n \n-        for reloc in debug_str.0.relocs {\n-            artifact\n-                .link_with(\n-                    faerie::Link {\n-                        from: SectionId::DebugStr.name(),\n-                        to: &reloc.name,\n-                        at: u64::from(reloc.offset),\n-                    },\n-                    faerie::Reloc::Debug {\n-                        size: reloc.size,\n-                        addend: reloc.addend as i32,\n-                    },\n-                )\n-                .expect(\"faerie relocation error\");\n+        let debug_ranges_not_empty = !debug_ranges.0.writer.slice().is_empty();\n+        if debug_ranges_not_empty {\n+            decl_section!(DebugRanges = debug_ranges);\n         }\n \n-        for reloc in debug_line.0.relocs {\n-            artifact\n-                .link_with(\n-                    faerie::Link {\n-                        from: SectionId::DebugLine.name(),\n-                        to: &reloc.name,\n-                        at: u64::from(reloc.offset),\n-                    },\n-                    faerie::Reloc::Debug {\n-                        size: reloc.size,\n-                        addend: reloc.addend as i32,\n-                    },\n-                )\n-                .expect(\"faerie relocation error\");\n+        let debug_rnglists_not_empty = !debug_rnglists.0.writer.slice().is_empty();\n+        if debug_rnglists_not_empty {\n+            decl_section!(DebugRngLists = debug_rnglists);\n         }\n \n-        if debug_ranges_not_empty {\n-            for reloc in debug_ranges.0.relocs {\n+        macro sect_relocs($section:ident = $name:ident) {\n+            for reloc in $name.0.relocs {\n                 artifact\n                     .link_with(\n                         faerie::Link {\n-                            from: SectionId::DebugRanges.name(),\n+                            from: SectionId::$section.name(),\n                             to: &reloc.name,\n                             at: u64::from(reloc.offset),\n                         },\n@@ -333,22 +243,17 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n             }\n         }\n \n+        sect_relocs!(DebugAbbrev = debug_abbrev);\n+        sect_relocs!(DebugInfo = debug_info);\n+        sect_relocs!(DebugStr = debug_str);\n+        sect_relocs!(DebugLine = debug_line);\n+\n+        if debug_ranges_not_empty {\n+            sect_relocs!(DebugRanges = debug_ranges);\n+        }\n+\n         if debug_rnglists_not_empty {\n-            for reloc in debug_rnglists.0.relocs {\n-                artifact\n-                    .link_with(\n-                        faerie::Link {\n-                            from: SectionId::DebugRngLists.name(),\n-                            to: &reloc.name,\n-                            at: u64::from(reloc.offset),\n-                        },\n-                        faerie::Reloc::Debug {\n-                            size: reloc.size,\n-                            addend: reloc.addend as i32,\n-                        },\n-                    )\n-                    .expect(\"faerie relocation error\");\n-            }\n+            sect_relocs!(DebugRngLists = debug_rnglists);\n         }\n     }\n "}]}