{"sha": "00856722bad5e9d96048319fb41f4b7e249820cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwODU2NzIyYmFkNWU5ZDk2MDQ4MzE5ZmI0MWY0YjdlMjQ5ODIwY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-13T22:24:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-13T22:24:33Z"}, "message": "Auto merge of #59949 - Centril:rollup-lsiqq1g, r=Centril\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #59675 (Stabilize the `alloc` crate.)\n - #59708 (Mark variables captured by reference as mutable correctly)\n - #59735 (remove lookup_char_pos_adj)\n - #59747 (Copy book.toml unstable book generator)\n - #59796 (Retire `IsNotConst` naming)\n - #59804 (Clean up jobserver integration)\n - #59818 (Eliminate `FnBox` usages from libstd.)\n - #59830 (Fix links on keyword docs.)\n - #59835 (Re-export NonZero signed variant in std)\n - #59852 (std: Add `{read,write}_vectored` for more types)\n - #59855 (Fix attributes position in type declaration)\n - #59858 (Make duplicate matcher bindings a hard error)\n - #59899 (In `-Zprint-type-size` output, sort enum variants by size.)\n - #59912 (MaybeUninit: remove deprecated functions)\n - #59925 (Fix paste error in split_ascii_whitespace docs.)\n - #59930 (Exclude some copies of old book editions from search engines)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9c813b5a9ac58b59d765a510e2f03c84446b6962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c813b5a9ac58b59d765a510e2f03c84446b6962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00856722bad5e9d96048319fb41f4b7e249820cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00856722bad5e9d96048319fb41f4b7e249820cd", "html_url": "https://github.com/rust-lang/rust/commit/00856722bad5e9d96048319fb41f4b7e249820cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00856722bad5e9d96048319fb41f4b7e249820cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c66afba5d69356879570aeff22db5a38566a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c66afba5d69356879570aeff22db5a38566a86", "html_url": "https://github.com/rust-lang/rust/commit/e4c66afba5d69356879570aeff22db5a38566a86"}, {"sha": "cf370b40dc9955ed3cff90f94b96507513ad6ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf370b40dc9955ed3cff90f94b96507513ad6ded", "html_url": "https://github.com/rust-lang/rust/commit/cf370b40dc9955ed3cff90f94b96507513ad6ded"}], "stats": {"total": 1083, "additions": 584, "deletions": 499}, "files": [{"sha": "61ee12739fb37426603b65e857060f03aefb3434", "filename": "src/doc/robots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fdoc%2Frobots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fdoc%2Frobots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frobots.txt?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -17,3 +17,11 @@ Disallow: /1.0.0-beta.2/\n Disallow: /1.0.0-beta.3/\n Disallow: /1.0.0-beta.4/\n Disallow: /1.0.0-beta.5/\n+Disallow: /book/first-edition/\n+Disallow: /book/second-edition/\n+Disallow: /stable/book/first-edition/\n+Disallow: /stable/book/second-edition/\n+Disallow: /beta/book/first-edition/\n+Disallow: /beta/book/second-edition/\n+Disallow: /nightly/book/first-edition/\n+Disallow: /nightly/book/second-edition/"}, {"sha": "5b2e19bd7aa78eeaf345ad29921cf276d6e16aba", "filename": "src/doc/unstable-book/book.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fdoc%2Funstable-book%2Fbook.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fdoc%2Funstable-book%2Fbook.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fbook.toml?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,2 +1,3 @@\n [book]\n title = \"The Rust Unstable Book\"\n+author = \"The Rust Community\""}, {"sha": "7f3acc933d413f5809af7ed4e412c1a17262ae7f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -51,10 +51,7 @@\n //! default global allocator. It is not compatible with the libc allocator API.\n \n #![allow(unused_attributes)]\n-#![unstable(feature = \"alloc\",\n-            reason = \"this library is unlikely to be stabilized in its current \\\n-                      form or name\",\n-            issue = \"27783\")]\n+#![stable(feature = \"alloc\", since = \"1.36.0\")]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]"}, {"sha": "0534ad3edc79d541ebe1695f81ffaf7ff455d441", "filename": "src/liballoc/prelude/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fliballoc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fliballoc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fprelude%2Fmod.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -5,7 +5,6 @@\n //!\n //! ```\n //! # #![allow(unused_imports)]\n-//! # #![feature(alloc)]\n //! #![feature(alloc_prelude)]\n //! extern crate alloc;\n //! use alloc::prelude::v1::*;"}, {"sha": "d1fc5ac3b30d44abe088ce33ca3487f5c3cfef21", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -256,7 +256,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc, raw_vec_internals)]\n+    /// # #![feature(raw_vec_internals)]\n     /// # extern crate alloc;\n     /// # use std::ptr;\n     /// # use alloc::raw_vec::RawVec;\n@@ -460,7 +460,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc, raw_vec_internals)]\n+    /// # #![feature(raw_vec_internals)]\n     /// # extern crate alloc;\n     /// # use std::ptr;\n     /// # use alloc::raw_vec::RawVec;"}, {"sha": "cfe317a00f9067fb2a994dcc91bd8ab6435923af", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -14,7 +14,6 @@\n #![deny(rust_2018_idioms)]\n #![cfg_attr(not(stage0), deny(internal))]\n \n-#![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(raw_vec_internals)]"}, {"sha": "e887426554701deef8436f873acbce82b916af8c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1152,15 +1152,6 @@ impl<T> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    // FIXME: still used by stdsimd\n-    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `uninit` instead\")]\n-    pub const fn uninitialized() -> MaybeUninit<T> {\n-        Self::uninit()\n-    }\n-\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,\n@@ -1221,14 +1212,6 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `write` instead\")]\n-    pub fn set(&mut self, val: T) -> &mut T {\n-        self.write(val)\n-    }\n-\n     /// Gets a pointer to the contained value. Reading from this pointer or turning it\n     /// into a reference is undefined behavior unless the `MaybeUninit<T>` is initialized.\n     ///\n@@ -1346,15 +1329,6 @@ impl<T> MaybeUninit<T> {\n         ManuallyDrop::into_inner(self.value)\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    // FIXME: still used by stdsimd\n-    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `assume_init` instead\")]\n-    pub unsafe fn into_initialized(self) -> T {\n-        self.assume_init()\n-    }\n-\n     /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject\n     /// to the usual drop handling.\n     ///\n@@ -1417,14 +1391,6 @@ impl<T> MaybeUninit<T> {\n         self.as_ptr().read()\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `read` instead\")]\n-    pub unsafe fn read_initialized(&self) -> T {\n-        self.read()\n-    }\n-\n     /// Gets a reference to the contained value.\n     ///\n     /// # Safety"}, {"sha": "8d28be621d647c36a5d0b18727654cc3bf88eb73", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -2712,7 +2712,7 @@ impl str {\n     /// All kinds of ASCII whitespace are considered:\n     ///\n     /// ```\n-    /// let mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_whitespace();\n+    /// let mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\n     /// assert_eq!(Some(\"Mary\"), iter.next());\n     /// assert_eq!(Some(\"had\"), iter.next());\n     /// assert_eq!(Some(\"a\"), iter.next());"}, {"sha": "72ddafb420ce75be56db4c704f75cc0c35e73f73", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -19,8 +19,6 @@\n \n #![deny(rust_2018_idioms)]\n \n-#![feature(allocator_api)]\n-#![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(lang_items)]\n #![feature(libc)]"}, {"sha": "6b2b0c24c77a9f8e7ca59636e6a0a216efed2e61", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -278,7 +278,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn explain_span(self, heading: &str, span: Span) -> (String, Option<Span>) {\n-        let lo = self.sess.source_map().lookup_char_pos_adj(span.lo());\n+        let lo = self.sess.source_map().lookup_char_pos(span.lo());\n         (\n             format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize() + 1),\n             Some(span),"}, {"sha": "28a2a1eaf6b492e8f44e6871f3dc69e33a6a290e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -352,12 +352,6 @@ declare_lint! {\n     \"outlives requirements can be inferred\"\n }\n \n-declare_lint! {\n-    pub DUPLICATE_MATCHER_BINDING_NAME,\n-    Deny,\n-    \"duplicate macro matcher binding name\"\n-}\n-\n /// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n pub mod parser {\n     declare_lint! {\n@@ -462,7 +456,6 @@ declare_lint_pass! {\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         NESTED_IMPL_TRAIT,\n-        DUPLICATE_MATCHER_BINDING_NAME,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n     ]\n }"}, {"sha": "112c247d4d663c763d91b97328d137bf57b33279", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -26,7 +26,7 @@ use rustc_data_structures::sync::{self, Lrc};\n use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n use crate::hir::intravisit;\n use crate::hir;\n-use crate::lint::builtin::{BuiltinLintDiagnostics, DUPLICATE_MATCHER_BINDING_NAME};\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n use crate::session::{Session, DiagnosticMessageId};\n use crate::ty::TyCtxt;\n@@ -82,7 +82,6 @@ impl Lint {\n         match lint_id {\n             BufferedEarlyLintId::QuestionMarkMacroSep => QUESTION_MARK_MACRO_SEP,\n             BufferedEarlyLintId::IllFormedAttributeInput => ILL_FORMED_ATTRIBUTE_INPUT,\n-            BufferedEarlyLintId::DuplicateMacroMatcherBindingName => DUPLICATE_MATCHER_BINDING_NAME,\n         }\n     }\n "}, {"sha": "b9c4d312adb7b1ea09d8db0b3fc4a5c59c135672", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -65,8 +65,8 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n                 write!(f, \"inside call to `{}`\", self.instance)?;\n             }\n             if !self.call_site.is_dummy() {\n-                let lo = tcx.sess.source_map().lookup_char_pos_adj(self.call_site.lo());\n-                write!(f, \" at {}:{}:{}\", lo.filename, lo.line, lo.col.to_usize() + 1)?;\n+                let lo = tcx.sess.source_map().lookup_char_pos(self.call_site.lo());\n+                write!(f, \" at {}:{}:{}\", lo.file.name, lo.line, lo.col.to_usize() + 1)?;\n             }\n             Ok(())\n         })"}, {"sha": "0f535249b5e2afa3ebacbe2fa95017f5f9366c2e", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -57,7 +57,13 @@ impl CodeStats {\n                                          overall_size: Size,\n                                          packed: bool,\n                                          opt_discr_size: Option<Size>,\n-                                         variants: Vec<VariantInfo>) {\n+                                         mut variants: Vec<VariantInfo>) {\n+        // Sort variants so the largest ones are shown first. A stable sort is\n+        // used here so that source code order is preserved for all variants\n+        // that have the same size.\n+        variants.sort_by(|info1, info2| {\n+            info2.size.cmp(&info1.size)\n+        });\n         let info = TypeSizeInfo {\n             kind,\n             type_description: type_desc.to_string(),"}, {"sha": "d586b376d45b69570ead0be0ee0e0e69af30bb77", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -12,7 +12,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n ena = \"0.13\"\n log = \"0.4\"\n-jobserver_crate = { version = \"0.1\", package = \"jobserver\" }\n+jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n lazy_static = \"1\"\n rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "b42ccb932b9dcd67bbc6bf808b62ae27ef15fd01", "filename": "src/librustc_data_structures/jobserver.rs", "status": "modified", "additions": 7, "deletions": 121, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_data_structures%2Fjobserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_data_structures%2Fjobserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fjobserver.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,89 +1,5 @@\n-use jobserver_crate::{Client, HelperThread, Acquired};\n+use jobserver_crate::Client;\n use lazy_static::lazy_static;\n-use std::sync::{Condvar, Arc, Mutex};\n-use std::mem;\n-\n-#[derive(Default)]\n-struct LockedProxyData {\n-    /// The number of free thread tokens, this may include the implicit token given to the process\n-    free: usize,\n-\n-    /// The number of threads waiting for a token\n-    waiters: usize,\n-\n-    /// The number of tokens we requested from the server\n-    requested: usize,\n-\n-    /// Stored tokens which will be dropped when we no longer need them\n-    tokens: Vec<Acquired>,\n-}\n-\n-impl LockedProxyData {\n-    fn request_token(&mut self, thread: &Mutex<HelperThread>) {\n-        self.requested += 1;\n-        thread.lock().unwrap().request_token();\n-    }\n-\n-    fn release_token(&mut self, cond_var: &Condvar) {\n-        if self.waiters > 0 {\n-            self.free += 1;\n-            cond_var.notify_one();\n-        } else {\n-            if self.tokens.is_empty() {\n-                // We are returning the implicit token\n-                self.free += 1;\n-            } else {\n-                // Return a real token to the server\n-                self.tokens.pop().unwrap();\n-            }\n-        }\n-    }\n-\n-    fn take_token(&mut self, thread: &Mutex<HelperThread>) -> bool {\n-        if self.free > 0 {\n-            self.free -= 1;\n-            self.waiters -= 1;\n-\n-            // We stole some token reqested by someone else\n-            // Request another one\n-            if self.requested + self.free < self.waiters {\n-                self.request_token(thread);\n-            }\n-\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-\n-    fn new_requested_token(&mut self, token: Acquired, cond_var: &Condvar) {\n-        self.requested -= 1;\n-\n-        // Does anything need this token?\n-        if self.waiters > 0 {\n-            self.free += 1;\n-            self.tokens.push(token);\n-            cond_var.notify_one();\n-        } else {\n-            // Otherwise we'll just drop it\n-            mem::drop(token);\n-        }\n-    }\n-}\n-\n-#[derive(Default)]\n-struct ProxyData {\n-    lock: Mutex<LockedProxyData>,\n-    cond_var: Condvar,\n-}\n-\n-/// A helper type which makes managing jobserver tokens easier.\n-/// It also allows you to treat the implicit token given to the process\n-/// in the same manner as requested tokens.\n-struct Proxy {\n-    thread: Mutex<HelperThread>,\n-    data: Arc<ProxyData>,\n-}\n \n lazy_static! {\n     // We can only call `from_env` once per process\n@@ -105,52 +21,22 @@ lazy_static! {\n     // per-process.\n     static ref GLOBAL_CLIENT: Client = unsafe {\n         Client::from_env().unwrap_or_else(|| {\n-            Client::new(32).expect(\"failed to create jobserver\")\n+            let client = Client::new(32).expect(\"failed to create jobserver\");\n+            // Acquire a token for the main thread which we can release later\n+            client.acquire_raw().ok();\n+            client\n         })\n     };\n-\n-    static ref GLOBAL_PROXY: Proxy = {\n-        let data = Arc::new(ProxyData::default());\n-\n-        Proxy {\n-            data: data.clone(),\n-            thread: Mutex::new(client().into_helper_thread(move |token| {\n-                data.lock.lock().unwrap().new_requested_token(token.unwrap(), &data.cond_var);\n-            }).unwrap()),\n-        }\n-    };\n }\n \n pub fn client() -> Client {\n     GLOBAL_CLIENT.clone()\n }\n \n pub fn acquire_thread() {\n-    GLOBAL_PROXY.acquire_token();\n+    GLOBAL_CLIENT.acquire_raw().ok();\n }\n \n pub fn release_thread() {\n-    GLOBAL_PROXY.release_token();\n-}\n-\n-impl Proxy {\n-    fn release_token(&self) {\n-        self.data.lock.lock().unwrap().release_token(&self.data.cond_var);\n-    }\n-\n-    fn acquire_token(&self) {\n-        let mut data = self.data.lock.lock().unwrap();\n-        data.waiters += 1;\n-        if data.take_token(&self.thread) {\n-            return;\n-        }\n-        // Request a token for us\n-        data.request_token(&self.thread);\n-        loop {\n-            data = self.data.cond_var.wait(data).unwrap();\n-            if data.take_token(&self.thread) {\n-                return;\n-            }\n-        }\n-    }\n+    GLOBAL_CLIENT.release_raw().ok();\n }"}, {"sha": "4a2d6dc68ae596afe32f32b66b323cb5da86ffdd", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -428,11 +428,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n             edition: None,\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(DUPLICATE_MATCHER_BINDING_NAME),\n-            reference: \"issue #57593 <https://github.com/rust-lang/rust/issues/57593>\",\n-            edition: None,\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(NESTED_IMPL_TRAIT),\n             reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n@@ -494,6 +489,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"no longer a warning, #[no_mangle] statics always exported\");\n     store.register_removed(\"bad_repr\",\n         \"replaced with a generic attribute input check\");\n+    store.register_removed(\"duplicate_matcher_binding_name\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/57742\");\n }\n \n pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {"}, {"sha": "0b2c90b9160453993facdef22bd0a23c67daa097", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 76, "deletions": 20, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -30,7 +30,7 @@ use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n \n use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n-use crate::dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError};\n+use crate::dataflow::move_paths::{HasMoveData, InitLocation, LookupResult, MoveData, MoveError};\n use crate::dataflow::Borrows;\n use crate::dataflow::DataflowResultsConsumer;\n use crate::dataflow::FlowAtLocation;\n@@ -1277,25 +1277,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         } = self.infcx.tcx.mir_borrowck(def_id);\n                         debug!(\"{:?} used_mut_upvars={:?}\", def_id, used_mut_upvars);\n                         for field in used_mut_upvars {\n-                            // This relies on the current way that by-value\n-                            // captures of a closure are copied/moved directly\n-                            // when generating MIR.\n-                            match operands[field.index()] {\n-                                Operand::Move(Place::Base(PlaceBase::Local(local)))\n-                                | Operand::Copy(Place::Base(PlaceBase::Local(local))) => {\n-                                    self.used_mut.insert(local);\n-                                }\n-                                Operand::Move(ref place @ Place::Projection(_))\n-                                | Operand::Copy(ref place @ Place::Projection(_)) => {\n-                                    if let Some(field) = place.is_upvar_field_projection(\n-                                            self.mir, &self.infcx.tcx) {\n-                                        self.used_mut_upvars.push(field);\n-                                    }\n-                                }\n-                                Operand::Move(Place::Base(PlaceBase::Static(..)))\n-                                | Operand::Copy(Place::Base(PlaceBase::Static(..)))\n-                                | Operand::Constant(..) => {}\n-                            }\n+                            self.propagate_closure_used_mut_upvar(&operands[field.index()]);\n                         }\n                     }\n                     AggregateKind::Adt(..)\n@@ -1310,6 +1292,80 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn propagate_closure_used_mut_upvar(&mut self, operand: &Operand<'tcx>) {\n+        let propagate_closure_used_mut_place = |this: &mut Self, place: &Place<'tcx>| {\n+            match *place {\n+                Place::Projection { .. } => {\n+                    if let Some(field) = place.is_upvar_field_projection(\n+                            this.mir, &this.infcx.tcx) {\n+                        this.used_mut_upvars.push(field);\n+                    }\n+                }\n+                Place::Base(PlaceBase::Local(local)) => {\n+                    this.used_mut.insert(local);\n+                }\n+                Place::Base(PlaceBase::Static(_)) => {}\n+            }\n+        };\n+\n+        // This relies on the current way that by-value\n+        // captures of a closure are copied/moved directly\n+        // when generating MIR.\n+        match *operand {\n+            Operand::Move(Place::Base(PlaceBase::Local(local)))\n+            | Operand::Copy(Place::Base(PlaceBase::Local(local)))\n+                if self.mir.local_decls[local].is_user_variable.is_none() =>\n+            {\n+                if self.mir.local_decls[local].ty.is_mutable_pointer() {\n+                    // The variable will be marked as mutable by the borrow.\n+                    return;\n+                }\n+                // This is an edge case where we have a `move` closure\n+                // inside a non-move closure, and the inner closure\n+                // contains a mutation:\n+                //\n+                // let mut i = 0;\n+                // || { move || { i += 1; }; };\n+                //\n+                // In this case our usual strategy of assuming that the\n+                // variable will be captured by mutable reference is\n+                // wrong, since `i` can be copied into the inner\n+                // closure from a shared reference.\n+                //\n+                // As such we have to search for the local that this\n+                // capture comes from and mark it as being used as mut.\n+\n+                let temp_mpi = self.move_data.rev_lookup.find_local(local);\n+                let init = if let [init_index] = *self.move_data.init_path_map[temp_mpi] {\n+                    &self.move_data.inits[init_index]\n+                } else {\n+                    bug!(\"temporary should be initialized exactly once\")\n+                };\n+\n+                let loc = match init.location {\n+                    InitLocation::Statement(stmt) => stmt,\n+                    _ => bug!(\"temporary initialized in arguments\"),\n+                };\n+\n+                let bbd = &self.mir[loc.block];\n+                let stmt = &bbd.statements[loc.statement_index];\n+                debug!(\"temporary assigned in: stmt={:?}\", stmt);\n+\n+                if let StatementKind::Assign(_, box Rvalue::Ref(_, _, ref source)) = stmt.kind {\n+                    propagate_closure_used_mut_place(self, source);\n+                } else {\n+                    bug!(\"closures should only capture user variables \\\n+                        or references to user variables\");\n+                }\n+            }\n+            Operand::Move(ref place)\n+            | Operand::Copy(ref place) => {\n+                propagate_closure_used_mut_place(self, place);\n+            }\n+            Operand::Constant(..) => {}\n+        }\n+    }\n+\n     fn consume_operand(\n         &mut self,\n         context: Context,"}, {"sha": "ddf963c7fa9b5bef357f0ab5c1bf176f3471f542", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -44,8 +44,8 @@ pub enum TempState {\n impl TempState {\n     pub fn is_promotable(&self) -> bool {\n         debug!(\"is_promotable: self={:?}\", self);\n-        if let TempState::Defined { uses, .. } = *self {\n-            uses > 0\n+        if let TempState::Defined { .. } = *self {\n+            true\n         } else {\n             false\n         }\n@@ -80,9 +80,14 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n                    context: PlaceContext<'tcx>,\n                    location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n-        // We're only interested in temporaries\n-        if self.mir.local_kind(index) != LocalKind::Temp {\n-            return;\n+        // We're only interested in temporaries and the return place\n+        match self.mir.local_kind(index) {\n+            | LocalKind::Temp\n+            | LocalKind::ReturnPointer\n+            => {},\n+            | LocalKind::Arg\n+            | LocalKind::Var\n+            => return,\n         }\n \n         // Ignore drops, if the temp gets promoted,\n@@ -101,7 +106,6 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n         if *temp == TempState::Undefined {\n             match context {\n                 PlaceContext::MutatingUse(MutatingUseContext::Store) |\n-                PlaceContext::MutatingUse(MutatingUseContext::AsmOutput) |\n                 PlaceContext::MutatingUse(MutatingUseContext::Call) => {\n                     *temp = TempState::Defined {\n                         location,"}, {"sha": "3154f8e89e3945921d3928b09a2bab840fc73a83", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -365,11 +365,11 @@ impl Qualif for NeedsDrop {\n     }\n }\n \n-// Not constant at all - non-`const fn` calls, asm!,\n+// Not promotable at all - non-`const fn` calls, asm!,\n // pointer comparisons, ptr-to-int casts, etc.\n-struct IsNotConst;\n+struct IsNotPromotable;\n \n-impl Qualif for IsNotConst {\n+impl Qualif for IsNotPromotable {\n     const IDX: usize = 2;\n \n     fn in_static(cx: &ConstCx<'_, 'tcx>, static_: &Static<'tcx>) -> bool {\n@@ -508,13 +508,17 @@ impl Qualif for IsNotConst {\n     }\n }\n \n-// Refers to temporaries which cannot be promoted as\n-// promote_consts decided they weren't simple enough.\n-// FIXME(oli-obk,eddyb): Remove this flag entirely and\n-// solely process this information via `IsNotConst`.\n-struct IsNotPromotable;\n-\n-impl Qualif for IsNotPromotable {\n+/// Refers to temporaries which cannot be promoted *implicitly*.\n+/// Explicit promotion happens e.g. for constant arguments declared via `rustc_args_required_const`.\n+/// Inside a const context all constness rules\n+/// apply, so implicit promotion simply has to follow the regular constant rules (modulo interior\n+/// mutability or `Drop` rules which are handled `HasMutInterior` and `NeedsDrop` respectively).\n+/// Implicit promotion inside regular functions does not happen if `const fn` calls are involved,\n+/// as the call may be perfectly alright at runtime, but fail at compile time e.g. due to addresses\n+/// being compared inside the function.\n+struct IsNotImplicitlyPromotable;\n+\n+impl Qualif for IsNotImplicitlyPromotable {\n     const IDX: usize = 3;\n \n     fn in_call(\n@@ -550,33 +554,36 @@ macro_rules! static_assert_seq_qualifs {\n         static_assert!(SEQ_QUALIFS: QUALIF_COUNT == $i);\n     };\n }\n-static_assert_seq_qualifs!(0 => HasMutInterior, NeedsDrop, IsNotConst, IsNotPromotable);\n+static_assert_seq_qualifs!(\n+    0 => HasMutInterior, NeedsDrop, IsNotPromotable, IsNotImplicitlyPromotable\n+);\n \n impl ConstCx<'_, 'tcx> {\n     fn qualifs_in_any_value_of_ty(&self, ty: Ty<'tcx>) -> PerQualif<bool> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs[NeedsDrop] = NeedsDrop::in_any_value_of_ty(self, ty).unwrap_or(false);\n-        qualifs[IsNotConst] = IsNotConst::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs[IsNotPromotable] = IsNotPromotable::in_any_value_of_ty(self, ty).unwrap_or(false);\n+        qualifs[IsNotImplicitlyPromotable] =\n+            IsNotImplicitlyPromotable::in_any_value_of_ty(self, ty).unwrap_or(false);\n         qualifs\n     }\n \n     fn qualifs_in_local(&self, local: Local) -> PerQualif<bool> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_local(self, local);\n         qualifs[NeedsDrop] = NeedsDrop::in_local(self, local);\n-        qualifs[IsNotConst] = IsNotConst::in_local(self, local);\n         qualifs[IsNotPromotable] = IsNotPromotable::in_local(self, local);\n+        qualifs[IsNotImplicitlyPromotable] = IsNotImplicitlyPromotable::in_local(self, local);\n         qualifs\n     }\n \n     fn qualifs_in_value(&self, source: ValueSource<'_, 'tcx>) -> PerQualif<bool> {\n         let mut qualifs = PerQualif::default();\n         qualifs[HasMutInterior] = HasMutInterior::in_value(self, source);\n         qualifs[NeedsDrop] = NeedsDrop::in_value(self, source);\n-        qualifs[IsNotConst] = IsNotConst::in_value(self, source);\n         qualifs[IsNotPromotable] = IsNotPromotable::in_value(self, source);\n+        qualifs[IsNotImplicitlyPromotable] = IsNotImplicitlyPromotable::in_value(self, source);\n         qualifs\n     }\n }\n@@ -631,26 +638,21 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         };\n \n         for (local, decl) in mir.local_decls.iter_enumerated() {\n-            match mir.local_kind(local) {\n-                LocalKind::Arg => {\n-                    let qualifs = cx.qualifs_in_any_value_of_ty(decl.ty);\n-                    for (per_local, qualif) in &mut cx.per_local.as_mut().zip(qualifs).0 {\n-                        if *qualif {\n-                            per_local.insert(local);\n-                        }\n+            if let LocalKind::Arg = mir.local_kind(local) {\n+                let qualifs = cx.qualifs_in_any_value_of_ty(decl.ty);\n+                for (per_local, qualif) in &mut cx.per_local.as_mut().zip(qualifs).0 {\n+                    if *qualif {\n+                        per_local.insert(local);\n                     }\n-                    cx.per_local[IsNotConst].insert(local);\n                 }\n-\n-                LocalKind::Var if mode == Mode::Fn => {\n-                    cx.per_local[IsNotConst].insert(local);\n-                }\n-\n-                LocalKind::Temp if !temps[local].is_promotable() => {\n-                    cx.per_local[IsNotConst].insert(local);\n-                }\n-\n-                _ => {}\n+            }\n+            if !temps[local].is_promotable() {\n+                cx.per_local[IsNotPromotable].insert(local);\n+            }\n+            if let LocalKind::Var = mir.local_kind(local) {\n+                // Sanity check to prevent implicit and explicit promotion of\n+                // named locals\n+                assert!(cx.per_local[IsNotPromotable].contains(local));\n             }\n         }\n \n@@ -698,11 +700,11 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             // the borrowed place is disallowed from being borrowed,\n             // due to either a mutable borrow (with some exceptions),\n             // or an shared borrow of a value with interior mutability.\n-            // Then `HasMutInterior` is replaced with `IsNotConst`,\n+            // Then `HasMutInterior` is replaced with `IsNotPromotable`,\n             // to avoid duplicate errors (e.g. from reborrowing).\n             if qualifs[HasMutInterior] {\n                 qualifs[HasMutInterior] = false;\n-                qualifs[IsNotConst] = true;\n+                qualifs[IsNotPromotable] = true;\n \n                 if self.mode != Mode::Fn {\n                     if let BorrowKind::Mut { .. } = kind {\n@@ -817,15 +819,15 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             }\n         }\n \n-        // Ensure the `IsNotConst` qualification is preserved.\n+        // Ensure the `IsNotPromotable` qualification is preserved.\n         // NOTE(eddyb) this is actually unnecessary right now, as\n         // we never replace the local's qualif, but we might in\n         // the future, and so it serves to catch changes that unset\n         // important bits (in which case, asserting `contains` could\n         // be replaced with calling `insert` to re-set the bit).\n         if kind == LocalKind::Temp {\n             if !self.temp_promotion_state[index].is_promotable() {\n-                assert!(self.cx.per_local[IsNotConst].contains(index));\n+                assert!(self.cx.per_local[IsNotPromotable].contains(index));\n             }\n         }\n     }\n@@ -911,7 +913,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         // Account for errors in consts by using the\n         // conservative type qualification instead.\n-        if qualifs[IsNotConst] {\n+        if qualifs[IsNotPromotable] {\n             qualifs = self.qualifs_in_any_value_of_ty(mir.return_ty());\n         }\n \n@@ -1326,7 +1328,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     // which happens even without the user requesting it.\n                     // We can error out with a hard error if the argument is not\n                     // constant here.\n-                    if !IsNotConst::in_operand(self, arg) {\n+                    if !IsNotPromotable::in_operand(self, arg) {\n                         debug!(\"visit_terminator_kind: candidate={:?}\", candidate);\n                         self.promotion_candidates.push(candidate);\n                     } else {\n@@ -1444,7 +1446,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if mir.return_ty().references_error() {\n         tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n-        return (1 << IsNotConst::IDX, Lrc::new(BitSet::new_empty(0)));\n+        return (1 << IsNotPromotable::IDX, Lrc::new(BitSet::new_empty(0)));\n     }\n \n     Checker::new(tcx, def_id, mir, Mode::Const).check_const()"}, {"sha": "b6cfd26e2555ee17818d37614cde4aefd2690a8f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -3136,23 +3136,20 @@ fn item_trait(\n             // FIXME: we should be using a derived_id for the Anchors here\n             write!(w, \"{{\\n\")?;\n             for t in &types {\n-                write!(w, \"    \")?;\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait)?;\n                 write!(w, \";\\n\")?;\n             }\n             if !types.is_empty() && !consts.is_empty() {\n                 w.write_str(\"\\n\")?;\n             }\n             for t in &consts {\n-                write!(w, \"    \")?;\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait)?;\n                 write!(w, \";\\n\")?;\n             }\n             if !consts.is_empty() && !required.is_empty() {\n                 w.write_str(\"\\n\")?;\n             }\n             for (pos, m) in required.iter().enumerate() {\n-                write!(w, \"    \")?;\n                 render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait)?;\n                 write!(w, \";\\n\")?;\n \n@@ -3164,7 +3161,6 @@ fn item_trait(\n                 w.write_str(\"\\n\")?;\n             }\n             for (pos, m) in provided.iter().enumerate() {\n-                write!(w, \"    \")?;\n                 render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait)?;\n                 match m.inner {\n                     clean::MethodItem(ref inner) if !inner.generics.where_predicates.is_empty() => {\n@@ -3473,8 +3469,9 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n             (0, true)\n         };\n         render_attributes(w, meth)?;\n-        write!(w, \"{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n+        write!(w, \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n+               if parent == ItemType::Trait { \"    \" } else { \"\" },\n                VisSpace(&meth.visibility),\n                ConstnessSpace(header.constness),\n                UnsafetySpace(header.unsafety),\n@@ -3775,7 +3772,7 @@ const ATTRIBUTE_WHITELIST: &'static [&'static str] = &[\n     \"non_exhaustive\"\n ];\n \n-fn render_attributes(w: &mut fmt::Formatter<'_>, it: &clean::Item) -> fmt::Result {\n+fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item) -> fmt::Result {\n     let mut attrs = String::new();\n \n     for attr in &it.attrs.other_attrs {"}, {"sha": "2228e58b0d232853ca4beb363b9ae3a80fa596a6", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1577,3 +1577,17 @@ div.name.expand::before {\n \tleft: -15px;\n \ttop: 2px;\n }\n+\n+/* This part is to fix the \"Expand attributes\" part in the type declaration. */\n+.type-decl > pre > :first-child {\n+\tmargin-left: 0 !important;\n+}\n+.type-decl > pre > :nth-child(2) {\n+\tmargin-left: 1.8em !important;\n+}\n+.type-decl > pre > .toggle-attributes {\n+\tmargin-left: 2.2em;\n+}\n+.type-decl > pre > .docblock.attributes {\n+\tmargin-left: 4em;\n+}"}, {"sha": "dea198d8c917825b264117fea679fcf73bd85116", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -9,7 +9,7 @@\n \n use crate::fmt;\n use crate::ffi::OsString;\n-use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write};\n+use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n@@ -615,6 +615,10 @@ impl Read for File {\n         self.inner.read(buf)\n     }\n \n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -625,6 +629,11 @@ impl Write for File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -639,6 +648,10 @@ impl Read for &File {\n         self.inner.read(buf)\n     }\n \n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -649,6 +662,11 @@ impl Write for &File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1848ddeab655661989de71706614acac1f5a1bd6", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -5,7 +5,7 @@ use crate::io::prelude::*;\n use crate::cell::RefCell;\n use crate::fmt;\n use crate::io::lazy::Lazy;\n-use crate::io::{self, Initializer, BufReader, LineWriter};\n+use crate::io::{self, Initializer, BufReader, LineWriter, IoVec, IoVecMut};\n use crate::sync::{Arc, Mutex, MutexGuard};\n use crate::sys::stdio;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n@@ -75,17 +75,31 @@ fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.0.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n     }\n }\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.0.flush() }\n }\n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> { self.0.flush() }\n }\n \n@@ -102,6 +116,14 @@ impl<W: io::Write> io::Write for Maybe<W> {\n         }\n     }\n \n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        let total = bufs.iter().map(|b| b.len()).sum();\n+        match self {\n+            Maybe::Real(w) => handle_ebadf(w.write_vectored(bufs), total),\n+            Maybe::Fake => Ok(total),\n+        }\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         match *self {\n             Maybe::Real(ref mut w) => handle_ebadf(w.flush(), ()),\n@@ -117,6 +139,13 @@ impl<R: io::Read> io::Read for Maybe<R> {\n             Maybe::Fake => Ok(0)\n         }\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self {\n+            Maybe::Real(r) => handle_ebadf(r.read_vectored(bufs), 0),\n+            Maybe::Fake => Ok(0)\n+        }\n+    }\n }\n \n fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n@@ -305,6 +334,9 @@ impl Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.lock().read(buf)\n     }\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.lock().read_vectored(bufs)\n+    }\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -325,6 +357,11 @@ impl Read for StdinLock<'_> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -483,6 +520,9 @@ impl Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.lock().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -498,6 +538,9 @@ impl Write for StdoutLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.borrow_mut().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }\n@@ -636,6 +679,9 @@ impl Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.lock().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.lock().flush()\n     }\n@@ -651,6 +697,9 @@ impl Write for StderrLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.borrow_mut().write_vectored(bufs)\n+    }\n     fn flush(&mut self) -> io::Result<()> {\n         self.inner.borrow_mut().flush()\n     }"}, {"sha": "ffe50f11e8a50a5671067bef55def4530b664f45", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -25,8 +25,7 @@\n ///\n /// For more information on what `as` is capable of, see the [Reference]\n ///\n-/// [Reference]:\n-/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n+/// [Reference]: ../reference/expressions/operator-expr.html#type-cast-expressions\n /// [`crate`]: keyword.crate.html\n mod as_keyword { }\n \n@@ -80,8 +79,8 @@ mod as_keyword { }\n ///\n /// [pointer]: primitive.pointer.html\n /// [Rust Book]:\n-/// https://doc.rust-lang.org/stable/book/2018-edition/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n-/// [Reference]: https://doc.rust-lang.org/reference/items/constant-items.html\n+/// ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n+/// [Reference]: ../reference/items/constant-items.html\n mod const_keyword { }\n \n #[doc(keyword = \"crate\")]\n@@ -114,7 +113,7 @@ mod const_keyword { }\n /// }\n /// ```\n ///\n-/// [Reference]: https://doc.rust-lang.org/reference/items/extern-crates.html\n+/// [Reference]: ../reference/items/extern-crates.html\n mod crate_keyword { }\n \n #[doc(keyword = \"enum\")]\n@@ -169,8 +168,8 @@ mod crate_keyword { }\n ///\n /// [Algebraic Data Types]: https://en.wikipedia.org/wiki/Algebraic_data_type\n /// [`Option`]: option/enum.Option.html\n-/// [Rust Book]: https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html\n-/// [Reference]: https://doc.rust-lang.org/reference/items/enumerations.html\n+/// [Rust Book]: ../book/ch06-01-defining-an-enum.html\n+/// [Reference]: ../reference/items/enumerations.html\n mod enum_keyword { }\n \n #[doc(keyword = \"extern\")]\n@@ -211,8 +210,8 @@ mod enum_keyword { }\n /// For more information on FFI, check the [Rust book] or the [Reference].\n ///\n /// [Rust book]:\n-/// https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n-/// [Reference]: https://doc.rust-lang.org/reference/items/external-blocks.html\n+/// ../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n+/// [Reference]: ../reference/items/external-blocks.html\n mod extern_keyword { }\n \n #[doc(keyword = \"fn\")]\n@@ -278,8 +277,8 @@ mod extern_keyword { }\n ///\n /// [`impl`]: keyword.impl.html\n /// [`extern`]: keyword.extern.html\n-/// [Rust book]: https://doc.rust-lang.org/book/ch03-03-how-functions-work.html\n-/// [Reference]: https://doc.rust-lang.org/reference/items/functions.html\n+/// [Rust book]: ../book/ch03-03-how-functions-work.html\n+/// [Reference]: ../reference/items/functions.html\n mod fn_keyword { }\n \n #[doc(keyword = \"for\")]\n@@ -352,12 +351,11 @@ mod fn_keyword { }\n /// For more information on for-loops, see the [Rust book] or the [Reference].\n ///\n /// [`impl`]: keyword.impl.html\n-/// [higher-ranked trait bounds]:\n-/// https://doc.rust-lang.org/nightly/reference/trait-bounds.html#higher-ranked-trait-bounds\n+/// [higher-ranked trait bounds]: ../reference/trait-bounds.html#higher-ranked-trait-bounds\n /// [`IntoIterator`]: iter/trait.IntoIterator.html\n /// [Rust book]:\n-/// https://doc.rust-lang.org/book/2018-edition/ch03-05-control-flow.html#looping-through-a-collection-with-for\n-/// [Reference]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#iterator-loops\n+/// ../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n+/// [Reference]: ../reference/expressions/loop-expr.html#iterator-loops\n mod for_keyword { }\n \n #[doc(keyword = \"if\")]\n@@ -430,9 +428,8 @@ mod for_keyword { }\n ///\n /// For more information on `if` expressions, see the [Rust book] or the [Reference].\n ///\n-/// [Rust book]:\n-/// https://doc.rust-lang.org/stable/book/2018-edition/ch03-05-control-flow.html#if-expressions\n-/// [Reference]: https://doc.rust-lang.org/reference/expressions/if-expr.html\n+/// [Rust book]: ../book/ch03-05-control-flow.html#if-expressions\n+/// [Reference]: ../reference/expressions/if-expr.html\n mod if_keyword { }\n \n #[doc(keyword = \"impl\")]\n@@ -493,10 +490,9 @@ mod if_keyword { }\n ///\n /// For more information on `impl Trait` syntax, see the [Rust book][book2].\n ///\n-/// [book1]: https://doc.rust-lang.org/stable/book/2018-edition/ch05-03-method-syntax.html\n-/// [Reference]: https://doc.rust-lang.org/reference/items/implementations.html\n-/// [book2]:\n-/// https://doc.rust-lang.org/stable/book/2018-edition/ch10-02-traits.html#returning-traits\n+/// [book1]: ../book/ch05-03-method-syntax.html\n+/// [Reference]: ../reference/items/implementations.html\n+/// [book2]: ../book/ch10-02-traits.html#returning-types-that-implement-traits\n mod impl_keyword { }\n \n #[doc(keyword = \"let\")]\n@@ -554,13 +550,12 @@ mod impl_keyword { }\n /// enumerations. `while let` also exists, which runs a loop with a pattern matched value until\n /// that pattern can't be matched.\n ///\n-/// For more information on the `let` keyword, see the [Rust book] or the [Reference]\n+/// For more information on the `let` keyword, see the [Rust book][book2] or the [Reference]\n ///\n-/// [book1]: https://doc.rust-lang.org/stable/book/2018-edition/ch06-02-match.html\n+/// [book1]: ../book/ch06-02-match.html\n /// [`if`]: keyword.if.html\n-/// [book2]:\n-/// https://doc.rust-lang.org/stable/book/2018-edition/ch18-01-all-the-places-for-patterns.html#let-statements\n-/// [Reference]: https://doc.rust-lang.org/reference/statements.html#let-statements\n+/// [book2]: ../book/ch18-01-all-the-places-for-patterns.html#let-statements\n+/// [Reference]: ../reference/statements.html#let-statements\n mod let_keyword { }\n \n #[doc(keyword = \"loop\")]\n@@ -605,7 +600,7 @@ mod let_keyword { }\n ///\n /// For more information on `loop` and loops in general, see the [Reference].\n ///\n-/// [Reference]: https://doc.rust-lang.org/reference/expressions/loop-expr.html\n+/// [Reference]: ../reference/expressions/loop-expr.html\n mod loop_keyword { }\n \n #[doc(keyword = \"struct\")]\n@@ -712,6 +707,6 @@ mod loop_keyword { }\n /// [Reference][reference].\n ///\n /// [`PhantomData`]: marker/struct.PhantomData.html\n-/// [book]: https://doc.rust-lang.org/book/ch05-01-defining-structs.html\n-/// [reference]: https://doc.rust-lang.org/reference/items/structs.html\n+/// [book]: ../book/ch05-01-defining-structs.html\n+/// [reference]: ../reference/items/structs.html\n mod struct_keyword { }"}, {"sha": "ee6ba3f438f15af911a2b7e040c477d94a053cea", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -229,7 +229,6 @@\n #![feature(align_offset)]\n #![feature(alloc_error_handler)]\n #![feature(alloc_layout_extra)]\n-#![feature(alloc)]\n #![feature(allocator_api)]\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]"}, {"sha": "d67d0b55a799dbdb13d17b8ef6a992b9d56e7406", "filename": "src/libstd/num.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -13,6 +13,8 @@ pub use core::num::Wrapping;\n \n #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n+#[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n+pub use core::num::{NonZeroI8, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI128, NonZeroIsize};\n \n #[cfg(test)] use crate::fmt;\n #[cfg(test)] use crate::ops::{Add, Sub, Mul, Div, Rem};"}, {"sha": "ef5626700e87ae15c550c7d7b48a8683fb684874", "filename": "src/libstd/process.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -111,7 +111,7 @@ use crate::io::prelude::*;\n use crate::ffi::OsStr;\n use crate::fmt;\n use crate::fs;\n-use crate::io::{self, Initializer};\n+use crate::io::{self, Initializer, IoVec, IoVecMut};\n use crate::path::Path;\n use crate::str;\n use crate::sys::pipe::{read2, AnonPipe};\n@@ -225,6 +225,10 @@ impl Write for ChildStdin {\n         self.inner.write(buf)\n     }\n \n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n@@ -271,6 +275,11 @@ impl Read for ChildStdout {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()\n@@ -318,6 +327,11 @@ impl Read for ChildStderr {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n         Initializer::nop()"}, {"sha": "abd7f0fd3ee5783afb08f48c329ada70e87bc9e0", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom};\n+use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -198,10 +198,18 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "804d3e001ac15679ba9f69bb46b9a913868cb506", "filename": "src/libstd/sys/cloudabi/shims/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,10 +8,18 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "7da16c4d247aa287e1bbfee79651343460254fdf", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n@@ -22,7 +21,7 @@ unsafe impl Sync for Thread {}\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>) -> io::Result<Thread> {\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();\n         let mut attr: libc::pthread_attr_t = mem::zeroed();"}, {"sha": "c86c6000eaead7581b9f8973ce343666eda2785e", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom};\n+use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n@@ -278,10 +278,18 @@ impl File {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> { Ok(()) }\n \n     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {"}, {"sha": "b926968f7b32581fde4f24fa4acfda0c410aed1e", "filename": "src/libstd/sys/redox/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::{cvt, syscall};\n use crate::sys::fd::FileDesc;\n \n@@ -24,10 +24,18 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n+    }\n+\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n     pub fn into_fd(self) -> FileDesc { self.0 }\n }"}, {"sha": "9d40a7e8bb8b35d30d098822d6c595e165dc18d1", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n@@ -19,7 +18,7 @@ unsafe impl Sync for Thread {}\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, p: Box<dyn FnBox()>) -> io::Result<Thread> {\n+    pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n         let p = box p;\n \n         let id = cvt(syscall::clone(syscall::CLONE_VM | syscall::CLONE_FS | syscall::CLONE_FILES))?;"}, {"sha": "c3c898eb23e56a72a8d74a4e6bb1582b0c99de2a", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom};\n+use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,10 +200,18 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "804d3e001ac15679ba9f69bb46b9a913868cb506", "filename": "src/libstd/sys/sgx/pipe.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,18 +8,23 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }\n }\n \n-pub fn read2(p1: AnonPipe,\n-             _v1: &mut Vec<u8>,\n-             _p2: AnonPipe,\n-             _v2: &mut Vec<u8>) -> io::Result<()> {\n+pub fn read2(p1: AnonPipe, _v1: &mut Vec<u8>, _p2: AnonPipe, _v2: &mut Vec<u8>) -> io::Result<()> {\n     match p1.0 {}\n }"}, {"sha": "b9f42d4ad1c594409bb5c13ea7d33733b2fbbe8c", "filename": "src/libstd/sys/sgx/thread.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,5 +1,4 @@\n #![cfg_attr(test, allow(dead_code))] // why is this necessary?\n-use crate::boxed::FnBox;\n use crate::ffi::CStr;\n use crate::io;\n use crate::time::Duration;\n@@ -13,17 +12,16 @@ pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n mod task_queue {\n     use crate::sync::{Mutex, MutexGuard, Once};\n     use crate::sync::mpsc;\n-    use crate::boxed::FnBox;\n \n     pub type JoinHandle = mpsc::Receiver<()>;\n \n     pub(super) struct Task {\n-        p: Box<dyn FnBox()>,\n+        p: Box<dyn FnOnce()>,\n         done: mpsc::Sender<()>,\n     }\n \n     impl Task {\n-        pub(super) fn new(p: Box<dyn FnBox()>) -> (Task, JoinHandle) {\n+        pub(super) fn new(p: Box<dyn FnOnce()>) -> (Task, JoinHandle) {\n             let (done, recv) = mpsc::channel();\n             (Task { p, done }, recv)\n         }\n@@ -51,7 +49,7 @@ mod task_queue {\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, p: Box<dyn FnBox()>)\n+    pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>)\n         -> io::Result<Thread>\n     {\n         let mut queue_lock = task_queue::lock();"}, {"sha": "a14db108c3423675f74b2d8bd20784345a4b73fe", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{CString, CStr, OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, ErrorKind, SeekFrom};\n+use crate::io::{self, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -560,6 +560,10 @@ impl File {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.0.read_vectored(bufs)\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.0.read_at(buf, offset)\n     }\n@@ -568,6 +572,10 @@ impl File {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.0.write_at(buf, offset)\n     }"}, {"sha": "a7792d42af9ed83eb8839bf855fa1fe0e23d7634", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::mem;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::fd::FileDesc;\n@@ -60,10 +60,18 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.0.read_vectored(bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.0.write_vectored(bufs)\n+    }\n+\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n     pub fn into_fd(self) -> FileDesc { self.0 }\n }"}, {"sha": "bc2986f624e5ce56da5a6edb50986bd2980df7ec", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,5 +1,6 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::fd::FileDesc;\n+use crate::mem::ManuallyDrop;\n \n pub struct Stdin(());\n pub struct Stdout(());\n@@ -11,10 +12,11 @@ impl Stdin {\n \n impl io::Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDIN_FILENO);\n-        let ret = fd.read(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n+        ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read(buf)\n+    }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read_vectored(bufs)\n     }\n }\n \n@@ -24,10 +26,11 @@ impl Stdout {\n \n impl io::Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDOUT_FILENO);\n-        let ret = fd.write(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n+        ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write(buf)\n+    }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write_vectored(bufs)\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n@@ -41,10 +44,11 @@ impl Stderr {\n \n impl io::Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDERR_FILENO);\n-        let ret = fd.write(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n+        ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write(buf)\n+    }\n+\n+    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write_vectored(bufs)\n     }\n \n     fn flush(&mut self) -> io::Result<()> {"}, {"sha": "f7d604ac4c8c1d95570addc93c27987f51b9a2fa", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n@@ -39,7 +38,7 @@ unsafe fn pthread_attr_setstacksize(_attr: *mut libc::pthread_attr_t,\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>)\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>)\n                           -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();"}, {"sha": "aa6bf8076f6495512c5496aace8ce423de5a59a0", "filename": "src/libstd/sys/wasi/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,10 +8,18 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "bdad40848916efda219fdb31c87dbb919ed6d6cb", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -13,8 +13,12 @@ impl Stdin {\n     }\n \n     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+        self.read_vectored(&mut [IoVecMut::new(data)])\n+    }\n+\n+    pub fn read_vectored(&self, data: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDIN_FILENO as u32) })\n-            .read(&mut [IoVecMut::new(data)])\n+            .read(data)\n     }\n }\n \n@@ -24,8 +28,12 @@ impl Stdout {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        self.write_vectored(&[IoVec::new(data)])\n+    }\n+\n+    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDOUT_FILENO as u32) })\n-            .write(&[IoVec::new(data)])\n+            .write(data)\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n@@ -39,8 +47,12 @@ impl Stderr {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        self.write_vectored(&[IoVec::new(data)])\n+    }\n+\n+    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDERR_FILENO as u32) })\n-            .write(&[IoVec::new(data)])\n+            .write(data)\n     }\n \n     pub fn flush(&self) -> io::Result<()> {"}, {"sha": "5e69e4d948fee42c853b5d6334e34893cd8b9299", "filename": "src/libstd/sys/wasi/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n@@ -13,7 +12,7 @@ pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, _p: Box<dyn FnBox()>)\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>)\n         -> io::Result<Thread>\n     {\n         unsupported()"}, {"sha": "c3c898eb23e56a72a8d74a4e6bb1582b0c99de2a", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom};\n+use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,10 +200,18 @@ impl File {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         match self.0 {}\n     }"}, {"sha": "aa6bf8076f6495512c5496aace8ce423de5a59a0", "filename": "src/libstd/sys/wasm/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,10 +8,18 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n+    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n+    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n     pub fn diverge(&self) -> ! {\n         match self.0 {}\n     }"}, {"sha": "1dc786cd5d7b60e9e67f3082fe0aa1c4a0e6b8e0", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::ffi::CStr;\n use crate::io;\n use crate::sys::{unsupported, Void};\n@@ -10,7 +9,7 @@ pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, _p: Box<dyn FnBox()>)\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>)\n         -> io::Result<Thread>\n     {\n         unsupported()"}, {"sha": "1d8e47a4793eff1623dab5714195968883cd575d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -2,7 +2,7 @@ use crate::os::windows::prelude::*;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom};\n+use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -314,6 +314,10 @@ impl File {\n         self.handle.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.handle.read_vectored(bufs)\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.handle.read_at(buf, offset)\n     }\n@@ -322,6 +326,10 @@ impl File {\n         self.handle.write(buf)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.handle.write_vectored(bufs)\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.handle.write_at(buf, offset)\n     }"}, {"sha": "c3fa6c4e0bd51baeb1647f71837778febfbe643a", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"0\", feature = \"windows_handle\")]\n \n use crate::cmp;\n-use crate::io::{self, ErrorKind, Read};\n+use crate::io::{self, ErrorKind, Read, IoVec, IoVecMut};\n use crate::mem;\n use crate::ops::Deref;\n use crate::ptr;\n@@ -89,6 +89,10 @@ impl RawHandle {\n         }\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n+    }\n+\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;\n@@ -169,6 +173,10 @@ impl RawHandle {\n         Ok(amt as usize)\n     }\n \n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n+    }\n+\n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         let mut written = 0;\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;\n@@ -199,4 +207,8 @@ impl<'a> Read for &'a RawHandle {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n+\n+    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        (**self).read_vectored(bufs)\n+    }\n }"}, {"sha": "6613d3a056775f7a9b6923c2064dbbede048648f", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,7 +1,7 @@\n use crate::os::windows::prelude::*;\n \n use crate::ffi::OsStr;\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::mem;\n use crate::path::Path;\n use crate::ptr;\n@@ -166,9 +166,17 @@ impl AnonPipe {\n         self.inner.read(buf)\n     }\n \n+    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        self.inner.read_vectored(bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n+\n+    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+        self.inner.write_vectored(bufs)\n+    }\n }\n \n pub fn read2(p1: AnonPipe,"}, {"sha": "ebdf3612e0602f7a5b9b3be0912642c7feb37a87", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::io;\n use crate::ffi::CStr;\n use crate::mem;\n@@ -20,7 +19,7 @@ pub struct Thread {\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(stack: usize, p: Box<dyn FnBox()>)\n+    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>)\n                           -> io::Result<Thread> {\n         let p = box p;\n "}, {"sha": "cdb72ee872e04040292f81c32f36d0f6f116909a", "filename": "src/libstd/sys_common/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -2,12 +2,11 @@\n //!\n //! Documentation can be found on the `rt::at_exit` function.\n \n-use crate::boxed::FnBox;\n use crate::ptr;\n use crate::mem;\n use crate::sys_common::mutex::Mutex;\n \n-type Queue = Vec<Box<dyn FnBox()>>;\n+type Queue = Vec<Box<dyn FnOnce()>>;\n \n // NB these are specifically not types from `std::sync` as they currently rely\n // on poisoning and this module needs to operate at a lower level than requiring\n@@ -61,7 +60,7 @@ pub fn cleanup() {\n     }\n }\n \n-pub fn push(f: Box<dyn FnBox()>) -> bool {\n+pub fn push(f: Box<dyn FnOnce()>) -> bool {\n     unsafe {\n         let _guard = LOCK.lock();\n         if init() {"}, {"sha": "6ab0d5cbe9c9651d1d370170477c00e1fb02e42a", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-use crate::boxed::FnBox;\n use crate::env;\n use crate::sync::atomic::{self, Ordering};\n use crate::sys::stack_overflow;\n@@ -11,7 +10,7 @@ pub unsafe fn start_thread(main: *mut u8) {\n     let _handler = stack_overflow::Handler::new();\n \n     // Finally, let's run some code.\n-    Box::from_raw(main as *mut Box<dyn FnBox()>)()\n+    Box::from_raw(main as *mut Box<dyn FnOnce()>)()\n }\n \n pub fn min_stack() -> usize {"}, {"sha": "c59226e0c0b98d0a1d1e1e9fdf0c55886a04ae2e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -157,7 +157,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::any::Any;\n-use crate::boxed::FnBox;\n use crate::cell::UnsafeCell;\n use crate::ffi::{CStr, CString};\n use crate::fmt;\n@@ -488,7 +487,9 @@ impl Builder {\n             // returning.\n             native: Some(imp::Thread::new(\n                 stack_size,\n-                mem::transmute::<Box<dyn FnBox() + 'a>, Box<dyn FnBox() + 'static>>(Box::new(main))\n+                mem::transmute::<Box<dyn FnOnce() + 'a>, Box<dyn FnOnce() + 'static>>(Box::new(\n+                    main,\n+                )),\n             )?),\n             thread: my_thread,\n             packet: Packet(my_packet),"}, {"sha": "53f37bb10bdc0ecfb61bb228826c27c66fea896d", "filename": "src/libsyntax/diagnostics/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -36,9 +36,9 @@ pub struct ErrorLocation {\n impl ErrorLocation {\n     /// Creates an error location from a span.\n     pub fn from_span(ecx: &ExtCtxt<'_>, sp: Span) -> ErrorLocation {\n-        let loc = ecx.source_map().lookup_char_pos_adj(sp.lo());\n+        let loc = ecx.source_map().lookup_char_pos(sp.lo());\n         ErrorLocation {\n-            filename: loc.filename,\n+            filename: loc.file.name.clone(),\n             line: loc.line\n         }\n     }"}, {"sha": "977e6d4587709be238c9b86080c42c7ee20e54d2", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -12,8 +12,6 @@ pub enum BufferedEarlyLintId {\n     /// Usage of `?` as a macro separator is deprecated.\n     QuestionMarkMacroSep,\n     IllFormedAttributeInput,\n-    /// Usage of a duplicate macro matcher binding name.\n-    DuplicateMacroMatcherBindingName,\n }\n \n /// Stores buffered lint info which can later be passed to `librustc`."}, {"sha": "b1b9d25b3d56b52624a75c10023cf69f25a099f3", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -497,22 +497,14 @@ fn check_lhs_duplicate_matcher_bindings(\n     node_id: ast::NodeId,\n ) -> bool {\n     use self::quoted::TokenTree;\n-    use crate::early_buffered_lints::BufferedEarlyLintId;\n     for tt in tts {\n         match *tt {\n             TokenTree::MetaVarDecl(span, name, _kind) => {\n                 if let Some(&prev_span) = metavar_names.get(&name) {\n-                    // FIXME(mark-i-m): in a few cycles, make this a hard error.\n-                    // sess.span_diagnostic\n-                    //     .struct_span_err(span, \"duplicate matcher binding\")\n-                    //     .span_note(prev_span, \"previous declaration was here\")\n-                    //     .emit();\n-                    sess.buffer_lint(\n-                        BufferedEarlyLintId::DuplicateMacroMatcherBindingName,\n-                        crate::source_map::MultiSpan::from(vec![prev_span, span]),\n-                        node_id,\n-                        \"duplicate matcher binding\"\n-                    );\n+                    sess.span_diagnostic\n+                        .struct_span_err(span, \"duplicate matcher binding\")\n+                        .span_note(prev_span, \"previous declaration was here\")\n+                        .emit();\n                     return false;\n                 } else {\n                     metavar_names.insert(name, span);"}, {"sha": "08abbf5e8a4dc647b912d68488f79866ed838ebb", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -388,16 +388,6 @@ impl SourceMap {\n         }\n     }\n \n-    pub fn lookup_char_pos_adj(&self, pos: BytePos) -> LocWithOpt {\n-        let loc = self.lookup_char_pos(pos);\n-        LocWithOpt {\n-            filename: loc.file.name.clone(),\n-            line: loc.line,\n-            col: loc.col,\n-            file: Some(loc.file)\n-        }\n-    }\n-\n     /// Returns `Some(span)`, a union of the lhs and rhs span. The lhs must precede the rhs. If\n     /// there are gaps between lhs and rhs, the resulting union will cross these gaps.\n     /// For this to work, the spans have to be:\n@@ -438,10 +428,10 @@ impl SourceMap {\n             return \"no-location\".to_string();\n         }\n \n-        let lo = self.lookup_char_pos_adj(sp.lo());\n-        let hi = self.lookup_char_pos_adj(sp.hi());\n+        let lo = self.lookup_char_pos(sp.lo());\n+        let hi = self.lookup_char_pos(sp.hi());\n         format!(\"{}:{}:{}: {}:{}\",\n-                        lo.filename,\n+                        lo.file.name,\n                         lo.line,\n                         lo.col.to_usize() + 1,\n                         hi.line,"}, {"sha": "81cf804cf0b73f7f3fd9bd32039cdcf589aafe89", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1295,7 +1295,7 @@ impl Sub for CharPos {\n }\n \n // _____________________________________________________________________________\n-// Loc, LocWithOpt, SourceFileAndLine, SourceFileAndBytePos\n+// Loc, SourceFileAndLine, SourceFileAndBytePos\n //\n \n /// A source code location used for error reporting.\n@@ -1311,17 +1311,6 @@ pub struct Loc {\n     pub col_display: usize,\n }\n \n-/// A source code location used as the result of `lookup_char_pos_adj`.\n-// Actually, *none* of the clients use the filename *or* file field;\n-// perhaps they should just be removed.\n-#[derive(Debug)]\n-pub struct LocWithOpt {\n-    pub filename: FileName,\n-    pub line: usize,\n-    pub col: CharPos,\n-    pub file: Option<Lrc<SourceFile>>,\n-}\n-\n // Used to be structural records.\n #[derive(Debug)]\n pub struct SourceFileAndLine { pub sf: Lrc<SourceFile>, pub line: usize }"}, {"sha": "855b6421cf822bab317ba5719dbabb8ed4ffc77d", "filename": "src/test/run-make-fulldeps/sysroot-crates-are-unstable/test.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-make-fulldeps%2Fsysroot-crates-are-unstable%2Ftest.py", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-make-fulldeps%2Fsysroot-crates-are-unstable%2Ftest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsysroot-crates-are-unstable%2Ftest.py?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -7,8 +7,8 @@\n \n # This is a whitelist of files which are stable crates or simply are not crates,\n # we don't check for the instability of these crates as they're all stable!\n-STABLE_CRATES = ['std', 'core', 'proc_macro', 'rsbegin.o', 'rsend.o', 'dllcrt2.o', 'crt2.o',\n-                 'clang_rt']\n+STABLE_CRATES = ['std', 'alloc', 'core', 'proc_macro',\n+                 'rsbegin.o', 'rsend.o', 'dllcrt2.o', 'crt2.o', 'clang_rt']\n \n \n def convert_to_string(s):"}, {"sha": "443895f7c48245be7068a0aa57875f0a24b833fd", "filename": "src/test/run-pass/array-slice-vec/vec-macro-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -2,7 +2,7 @@\n \n // ignore-emscripten no no_std executables\n \n-#![feature(lang_items, start, rustc_private, alloc)]\n+#![feature(lang_items, start, rustc_private)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "f0d43404b004617ad11bdb9dc30360bcc3f33894", "filename": "src/test/run-pass/extern/extern-prelude-core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(extern_prelude, lang_items, start, alloc)]\n+#![feature(extern_prelude, lang_items, start)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "8d2a0b7425f2a9ed4e1a301d0f61492b17fe9007", "filename": "src/test/run-pass/extern/extern-prelude-core.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,7 +1,7 @@\n warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer requires an attribute to enable\n   --> $DIR/extern-prelude-core.rs:2:12\n    |\n-LL | #![feature(extern_prelude, lang_items, start, alloc)]\n+LL | #![feature(extern_prelude, lang_items, start)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: #[warn(stable_features)] on by default"}, {"sha": "65a33c5f16f1d35c5d533de8d76b58a967a89598", "filename": "src/test/run-pass/for-loop-while/for-loop-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-no-std.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(unused_imports)]\n-#![feature(lang_items, start, alloc)]\n+#![feature(lang_items, start)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "32f7a4a07c4992e624f40411b59ce42a4bae569c", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,6 +1,6 @@\n // ignore-emscripten no no_std executables\n \n-#![feature(lang_items, start, alloc)]\n+#![feature(lang_items, start)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "980fd97e2c678f90954c8c94de8ecf4eb7d99853", "filename": "src/test/run-pass/structs-enums/unit-like-struct-drop-run.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fstructs-enums%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Frun-pass%2Fstructs-enums%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Funit-like-struct-drop-run.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -3,9 +3,6 @@\n \n // Make sure the destructor is run for unit-like structs.\n \n-\n-#![feature(alloc)]\n-\n use std::thread;\n \n struct Foo;"}, {"sha": "7a8d86b8da18cf08df1f0225a654fd40851a15d6", "filename": "src/test/ui/allocator-submodule.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fallocator-submodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fallocator-submodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator-submodule.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,8 +1,6 @@\n // Tests that it is possible to create a global allocator in a submodule, rather than in the crate\n // root.\n \n-#![feature(alloc, allocator_api, global_allocator)]\n-\n extern crate alloc;\n \n use std::{"}, {"sha": "91c7c0f6b8e24fd3f8035c093b706d0011f6a284", "filename": "src/test/ui/allocator-submodule.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator-submodule.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,5 +1,5 @@\n error: `global_allocator` cannot be used in submodules\n-  --> $DIR/allocator-submodule.rs:27:5\n+  --> $DIR/allocator-submodule.rs:25:5\n    |\n LL |     static MY_HEAP: MyAlloc = MyAlloc;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d166aff56579201bc86a40c047b8a6636fb510eb", "filename": "src/test/ui/error-codes/E0254.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-#![feature(alloc)]\n #![allow(unused_extern_crates, non_camel_case_types)]\n \n extern crate alloc;"}, {"sha": "10456fd5a5dc1e67ace3e36c3793d63b6d640361", "filename": "src/test/ui/error-codes/E0254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,5 +1,5 @@\n error[E0254]: the name `alloc` is defined multiple times\n-  --> $DIR/E0254.rs:12:5\n+  --> $DIR/E0254.rs:11:5\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here"}, {"sha": "c83561be9c6a5b509cb8a37449924ab240f4cfe6", "filename": "src/test/ui/error-codes/E0259.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,4 @@\n-#![feature(alloc, rustc_private)]\n+#![feature(rustc_private)]\n #![allow(unused_extern_crates)]\n \n extern crate alloc;"}, {"sha": "73b8934159fcf82384117dcc8ac29f42a7c3d4a0", "filename": "src/test/ui/error-codes/E0260.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-#![feature(alloc)]\n #![allow(unused_extern_crates)]\n \n extern crate alloc;"}, {"sha": "7d0b3022914d82a887b6d649b4477b526fac79cd", "filename": "src/test/ui/error-codes/E0260.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,5 +1,5 @@\n error[E0260]: the name `alloc` is defined multiple times\n-  --> $DIR/E0260.rs:6:1\n+  --> $DIR/E0260.rs:5:1\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here"}, {"sha": "7d39dc0a52f2ecb226f980f6d9107fa78ec68718", "filename": "src/test/ui/macros/macro-multiple-matcher-bindings.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,16 +1,11 @@\n // Test that duplicate matcher binding names are caught at declaration time, rather than at macro\n // invocation time.\n-//\n-// FIXME(mark-i-m): Update this when it becomes a hard error.\n-\n-// compile-pass\n \n #![allow(unused_macros)]\n-#![warn(duplicate_matcher_binding_name)]\n \n macro_rules! foo1 {\n-    ($a:ident, $a:ident) => {}; //~WARNING duplicate matcher binding\n-    ($a:ident, $a:path) => {};  //~WARNING duplicate matcher binding\n+    ($a:ident, $a:ident) => {}; //~ERROR duplicate matcher binding\n+    ($a:ident, $a:path) => {};  //~ERROR duplicate matcher binding\n }\n \n macro_rules! foo2 {\n@@ -19,8 +14,8 @@ macro_rules! foo2 {\n }\n \n macro_rules! foo3 {\n-    ($a:ident, $($a:ident),*) => {}; //~WARNING duplicate matcher binding\n-    ($($a:ident)+ # $($($a:path),+);*) => {}; //~WARNING duplicate matcher binding\n+    ($a:ident, $($a:ident),*) => {}; //~ERROR duplicate matcher binding\n+    ($($a:ident)+ # $($($a:path),+);*) => {}; //~ERROR duplicate matcher binding\n }\n \n fn main() {}"}, {"sha": "65362388d7de168a2e3c6ba414278fd068d90cc7", "filename": "src/test/ui/macros/macro-multiple-matcher-bindings.stderr", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,41 +1,50 @@\n-warning: duplicate matcher binding\n-  --> $DIR/macro-multiple-matcher-bindings.rs:12:6\n+error: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:7:16\n    |\n LL |     ($a:ident, $a:ident) => {};\n-   |      ^^^^^^^^  ^^^^^^^^\n+   |                ^^^^^^^^\n    |\n-note: lint level defined here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:9:9\n+note: previous declaration was here\n+  --> $DIR/macro-multiple-matcher-bindings.rs:7:6\n    |\n-LL | #![warn(duplicate_matcher_binding_name)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+LL |     ($a:ident, $a:ident) => {};\n+   |      ^^^^^^^^\n \n-warning: duplicate matcher binding\n-  --> $DIR/macro-multiple-matcher-bindings.rs:13:6\n+error: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:8:16\n    |\n LL |     ($a:ident, $a:path) => {};\n-   |      ^^^^^^^^  ^^^^^^^\n+   |                ^^^^^^^\n+   |\n+note: previous declaration was here\n+  --> $DIR/macro-multiple-matcher-bindings.rs:8:6\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+LL |     ($a:ident, $a:path) => {};\n+   |      ^^^^^^^^\n \n-warning: duplicate matcher binding\n-  --> $DIR/macro-multiple-matcher-bindings.rs:22:6\n+error: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:17:18\n    |\n LL |     ($a:ident, $($a:ident),*) => {};\n-   |      ^^^^^^^^    ^^^^^^^^\n+   |                  ^^^^^^^^\n+   |\n+note: previous declaration was here\n+  --> $DIR/macro-multiple-matcher-bindings.rs:17:6\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+LL |     ($a:ident, $($a:ident),*) => {};\n+   |      ^^^^^^^^\n \n-warning: duplicate matcher binding\n-  --> $DIR/macro-multiple-matcher-bindings.rs:23:8\n+error: duplicate matcher binding\n+  --> $DIR/macro-multiple-matcher-bindings.rs:18:25\n    |\n LL |     ($($a:ident)+ # $($($a:path),+);*) => {};\n-   |        ^^^^^^^^         ^^^^^^^\n+   |                         ^^^^^^^\n+   |\n+note: previous declaration was here\n+  --> $DIR/macro-multiple-matcher-bindings.rs:18:8\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #57593 <https://github.com/rust-lang/rust/issues/57593>\n+LL |     ($($a:ident)+ # $($($a:path),+);*) => {};\n+   |        ^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "ae0c067bb5f3ebd5c4ca44d2bf8eeed420ec3d36", "filename": "src/test/ui/missing/missing-alloc_error_handler.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -3,7 +3,7 @@\n \n #![no_std]\n #![crate_type = \"staticlib\"]\n-#![feature(panic_handler, alloc_error_handler, alloc)]\n+#![feature(panic_handler, alloc_error_handler)]\n \n #[panic_handler]\n fn panic(_: &core::panic::PanicInfo) -> ! {"}, {"sha": "6d867e2e8b48e12b980e564c72892b80f5fc37ef", "filename": "src/test/ui/missing/missing-allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -3,7 +3,7 @@\n \n #![no_std]\n #![crate_type = \"staticlib\"]\n-#![feature(panic_handler, alloc_error_handler, alloc)]\n+#![feature(panic_handler, alloc_error_handler)]\n \n #[panic_handler]\n fn panic(_: &core::panic::PanicInfo) -> ! {"}, {"sha": "6d0d6e16a677588fc15e8c568fa32a5bf2ab083b", "filename": "src/test/ui/nll/extra-unused-mut.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fnll%2Fextra-unused-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fnll%2Fextra-unused-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fextra-unused-mut.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,6 +1,6 @@\n // extra unused mut lint tests for #51918\n \n-// run-pass\n+// compile-pass\n \n #![feature(generators, nll)]\n #![deny(unused_mut)]\n@@ -53,11 +53,14 @@ fn if_guard(x: Result<i32, i32>) {\n     }\n }\n \n-fn main() {\n-    ref_argument(0);\n-    mutable_upvar();\n-    generator_mutable_upvar();\n-    ref_closure_argument();\n-    parse_dot_or_call_expr_with(Vec::new());\n-    if_guard(Ok(0));\n+// #59620\n+fn nested_closures() {\n+    let mut i = 0;\n+    [].iter().for_each(|_: &i32| {\n+        [].iter().for_each(move |_: &i32| {\n+            i += 1;\n+        });\n+    });\n }\n+\n+fn main() {}"}, {"sha": "64118815458432f819d282b01a3a645c66303b82", "filename": "src/test/ui/print_type_sizes/multiple_types.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stdout?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,9 +1,9 @@\n print-type-size type: `Enum`: 51 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n-print-type-size     variant `Small`: 7 bytes\n-print-type-size         field `.0`: 7 bytes\n print-type-size     variant `Large`: 50 bytes\n print-type-size         field `.0`: 50 bytes\n+print-type-size     variant `Small`: 7 bytes\n+print-type-size         field `.0`: 7 bytes\n print-type-size type: `FiftyBytes`: 50 bytes, alignment: 1 bytes\n print-type-size     field `.0`: 50 bytes\n print-type-size type: `SevenBytes`: 7 bytes, alignment: 1 bytes"}, {"sha": "9cdb2ae4f57e0aeb99097f211545210d8c75f1c2", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -4,75 +4,75 @@ print-type-size     field `.post`: 2 bytes\n print-type-size     field `.pre`: 1 bytes\n print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<IndirectNonZero>`: 12 bytes, alignment: 4 bytes\n-print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n-print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n print-type-size     variant `Record`: 7 bytes\n print-type-size         field `.val`: 4 bytes\n print-type-size         field `.post`: 2 bytes\n print-type-size         field `.pre`: 1 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size     end padding: 1 bytes\n print-type-size type: `NestedNonZero`: 8 bytes, alignment: 4 bytes\n print-type-size     field `.val`: 4 bytes\n print-type-size     field `.post`: 2 bytes\n print-type-size     field `.pre`: 1 bytes\n print-type-size     end padding: 1 bytes\n print-type-size type: `Enum4<(), char, (), ()>`: 4 bytes, alignment: 4 bytes\n-print-type-size     variant `One`: 0 bytes\n-print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Two`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `One`: 0 bytes\n+print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Three`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Four`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size type: `MyOption<char>`: 4 bytes, alignment: 4 bytes\n-print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n-print-type-size type: `MyOption<std::num::NonZeroU32>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size type: `MyOption<std::num::NonZeroU32>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `std::num::NonZeroU32`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.0`: 4 bytes\n print-type-size type: `Enum4<(), (), (), MyOption<u8>>`: 2 bytes, alignment: 1 bytes\n+print-type-size     variant `Four`: 2 bytes\n+print-type-size         field `.0`: 2 bytes\n print-type-size     variant `One`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Two`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Three`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n-print-type-size     variant `Four`: 2 bytes\n-print-type-size         field `.0`: 2 bytes\n print-type-size type: `MyOption<MyOption<u8>>`: 2 bytes, alignment: 1 bytes\n-print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 2 bytes\n print-type-size         field `.0`: 2 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `MyOption<u8>`: 2 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n-print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 1 bytes\n print-type-size         field `.0`: 1 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `Enum4<(), (), bool, ()>`: 1 bytes, alignment: 1 bytes\n+print-type-size     variant `Three`: 1 bytes\n+print-type-size         field `.0`: 1 bytes\n print-type-size     variant `One`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size     variant `Two`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n-print-type-size     variant `Three`: 1 bytes\n-print-type-size         field `.0`: 1 bytes\n print-type-size     variant `Four`: 0 bytes\n print-type-size         field `.0`: 0 bytes\n print-type-size type: `MyOption<bool>`: 1 bytes, alignment: 1 bytes\n-print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 1 bytes\n print-type-size         field `.0`: 1 bytes\n-print-type-size type: `MyOption<std::cmp::Ordering>`: 1 bytes, alignment: 1 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size type: `MyOption<std::cmp::Ordering>`: 1 bytes, alignment: 1 bytes\n print-type-size     variant `Some`: 1 bytes\n print-type-size         field `.0`: 1 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `std::cmp::Ordering`: 1 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Less`: 0 bytes"}, {"sha": "9afdf76245df79a7f82df0c3595de94a6dbde4af", "filename": "src/test/ui/print_type_sizes/padding.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,21 +1,21 @@\n print-type-size type: `E1`: 12 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n+print-type-size     variant `B`: 11 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size     variant `A`: 7 bytes\n print-type-size         field `.1`: 1 bytes\n print-type-size         padding: 2 bytes\n print-type-size         field `.0`: 4 bytes, alignment: 4 bytes\n+print-type-size type: `E2`: 12 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 1 bytes\n print-type-size     variant `B`: 11 bytes\n print-type-size         padding: 3 bytes\n print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n-print-type-size type: `E2`: 12 bytes, alignment: 4 bytes\n-print-type-size     discriminant: 1 bytes\n print-type-size     variant `A`: 7 bytes\n print-type-size         field `.0`: 1 bytes\n print-type-size         padding: 2 bytes\n print-type-size         field `.1`: 4 bytes, alignment: 4 bytes\n-print-type-size     variant `B`: 11 bytes\n-print-type-size         padding: 3 bytes\n-print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size type: `S`: 8 bytes, alignment: 4 bytes\n print-type-size     field `.g`: 4 bytes\n print-type-size     field `.a`: 1 bytes"}, {"sha": "33671bd8e14bc79a314716cea954515829afff75", "filename": "src/test/ui/print_type_sizes/repr-align.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.stdout?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,10 +1,10 @@\n print-type-size type: `E`: 32 bytes, alignment: 16 bytes\n print-type-size     discriminant: 4 bytes\n-print-type-size     variant `A`: 4 bytes\n-print-type-size         field `.0`: 4 bytes\n print-type-size     variant `B`: 28 bytes\n print-type-size         padding: 12 bytes\n print-type-size         field `.0`: 16 bytes, alignment: 16 bytes\n+print-type-size     variant `A`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n print-type-size type: `S`: 32 bytes, alignment: 16 bytes\n print-type-size     field `.c`: 16 bytes\n print-type-size     field `.a`: 4 bytes"}, {"sha": "64118815458432f819d282b01a3a645c66303b82", "filename": "src/test/ui/print_type_sizes/variants.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.stdout?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,9 +1,9 @@\n print-type-size type: `Enum`: 51 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n-print-type-size     variant `Small`: 7 bytes\n-print-type-size         field `.0`: 7 bytes\n print-type-size     variant `Large`: 50 bytes\n print-type-size         field `.0`: 50 bytes\n+print-type-size     variant `Small`: 7 bytes\n+print-type-size         field `.0`: 7 bytes\n print-type-size type: `FiftyBytes`: 50 bytes, alignment: 1 bytes\n print-type-size     field `.0`: 50 bytes\n print-type-size type: `SevenBytes`: 7 bytes, alignment: 1 bytes"}, {"sha": "a9423830d9040509d76ad774f9fb4948ad2a59dc", "filename": "src/test/ui/resolve_self_super_hint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,4 +1,3 @@\n-#![feature(alloc)]\n #![allow(unused_extern_crates)]\n \n mod a {"}, {"sha": "14cdae97d14f3484077694b1c25e53c5a0785eb9", "filename": "src/test/ui/resolve_self_super_hint.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,17 +1,17 @@\n error[E0432]: unresolved import `alloc`\n-  --> $DIR/resolve_self_super_hint.rs:6:9\n+  --> $DIR/resolve_self_super_hint.rs:5:9\n    |\n LL |     use alloc::HashMap;\n    |         ^^^^^ help: a similar path exists: `self::alloc`\n \n error[E0432]: unresolved import `alloc`\n-  --> $DIR/resolve_self_super_hint.rs:11:13\n+  --> $DIR/resolve_self_super_hint.rs:10:13\n    |\n LL |         use alloc::HashMap;\n    |             ^^^^^ help: a similar path exists: `super::alloc`\n \n error[E0432]: unresolved import `alloc`\n-  --> $DIR/resolve_self_super_hint.rs:16:17\n+  --> $DIR/resolve_self_super_hint.rs:15:17\n    |\n LL |             use alloc::HashMap;\n    |                 ^^^^^\n@@ -20,7 +20,7 @@ LL |             use alloc::HashMap;\n    |                 help: a similar path exists: `a::alloc`\n \n error[E0432]: unresolved import `alloc`\n-  --> $DIR/resolve_self_super_hint.rs:21:21\n+  --> $DIR/resolve_self_super_hint.rs:20:21\n    |\n LL |                 use alloc::HashMap;\n    |                     ^^^^^"}, {"sha": "17449caf84fb41ea835e42a5c56b9378ca93d0f9", "filename": "src/test/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -4,7 +4,6 @@\n // aux-build:remove-extern-crate.rs\n // compile-flags:--extern remove_extern_crate\n \n-#![feature(alloc)]\n #![warn(rust_2018_idioms)]\n \n "}, {"sha": "fb2217df0005d4e8c7e250a54cea76473d8ea222", "filename": "src/test/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -4,7 +4,6 @@\n // aux-build:remove-extern-crate.rs\n // compile-flags:--extern remove_extern_crate\n \n-#![feature(alloc)]\n #![warn(rust_2018_idioms)]\n \n extern crate core;"}, {"sha": "549693201b70346a426bb61cb7a10723abcf3716", "filename": "src/test/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,24 +1,24 @@\n warning: unused extern crate\n-  --> $DIR/remove-extern-crate.rs:10:1\n+  --> $DIR/remove-extern-crate.rs:9:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n-  --> $DIR/remove-extern-crate.rs:8:9\n+  --> $DIR/remove-extern-crate.rs:7:9\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:11:1\n+  --> $DIR/remove-extern-crate.rs:10:1\n    |\n LL | extern crate core as another_name;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:29:5\n+  --> $DIR/remove-extern-crate.rs:28:5\n    |\n LL |     extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^ help: convert it to a `use`"}, {"sha": "07e7149793c146b8f9820a088f4201306312641c", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -6,9 +6,9 @@ LL |         Err(\"\")?;\n    |\n    = help: the following implementations were found:\n              <i32 as std::convert::From<bool>>\n-             <i32 as std::convert::From<core::num::NonZeroI32>>\n              <i32 as std::convert::From<i16>>\n              <i32 as std::convert::From<i8>>\n+             <i32 as std::convert::From<std::num::NonZeroI32>>\n            and 2 others\n    = note: required by `std::convert::From::from`\n "}, {"sha": "67eaaf4b6c21b65b5868da5b4cfc288bbacb2b8e", "filename": "src/test/ui/unnecessary-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n \n #![deny(unused_extern_crates)]\n-#![feature(alloc, test, rustc_private, crate_visibility_modifier)]\n+#![feature(test, rustc_private, crate_visibility_modifier)]\n \n extern crate libc;\n //~^ ERROR unused extern crate"}, {"sha": "f7e40ce4bae36e2aa84884116247fbce891bc772", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -3,13 +3,13 @@ use std::fs;\n use std::path;\n use crate::features::{collect_lang_features, collect_lib_features, Features, Status};\n \n-pub const PATH_STR: &str = \"doc/unstable-book/src\";\n+pub const PATH_STR: &str = \"doc/unstable-book\";\n \n-pub const COMPILER_FLAGS_DIR: &str = \"compiler-flags\";\n+pub const COMPILER_FLAGS_DIR: &str = \"src/compiler-flags\";\n \n-pub const LANG_FEATURES_DIR: &str = \"language-features\";\n+pub const LANG_FEATURES_DIR: &str = \"src/language-features\";\n \n-pub const LIB_FEATURES_DIR: &str = \"library-features\";\n+pub const LIB_FEATURES_DIR: &str = \"src/library-features\";\n \n /// Builds the path to the Unstable Book source directory from the Rust 'src' directory.\n pub fn unstable_book_path(base_src_path: &path::Path) -> path::PathBuf {"}, {"sha": "e92d174a4e1d45a362be130cc3a05a387b2b6882", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00856722bad5e9d96048319fb41f4b7e249820cd/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=00856722bad5e9d96048319fb41f4b7e249820cd", "patch": "@@ -52,7 +52,7 @@ fn set_to_summary_str(set: &BTreeSet<String>, dir: &str\n \n fn generate_summary(path: &Path, lang_features: &Features, lib_features: &Features) {\n     let compiler_flags = collect_unstable_book_section_file_names(\n-        &path.join(\"compiler-flags\"));\n+        &path.join(\"src/compiler-flags\"));\n \n     let compiler_flags_str = set_to_summary_str(&compiler_flags,\n                                                 \"compiler-flags\");\n@@ -61,11 +61,11 @@ fn generate_summary(path: &Path, lang_features: &Features, lib_features: &Featur\n     let unstable_lib_features = collect_unstable_feature_names(&lib_features);\n \n     let lang_features_str = set_to_summary_str(&unstable_lang_features,\n-                                               LANG_FEATURES_DIR);\n+                                               \"language-features\");\n     let lib_features_str = set_to_summary_str(&unstable_lib_features,\n-                                              LIB_FEATURES_DIR);\n+                                              \"library-features\");\n \n-    let mut file = t!(File::create(&path.join(\"SUMMARY.md\")));\n+    let mut file = t!(File::create(&path.join(\"src/SUMMARY.md\")));\n     t!(file.write_fmt(format_args!(include_str!(\"SUMMARY.md\"),\n                                    compiler_flags = compiler_flags_str,\n                                    language_features = lang_features_str,\n@@ -102,8 +102,8 @@ fn generate_unstable_book_files(src :&Path, out: &Path, features :&Features) {\n     }\n }\n \n-fn copy_recursive(path: &Path, to: &Path) {\n-    for entry in t!(fs::read_dir(path)) {\n+fn copy_recursive(from: &Path, to: &Path) {\n+    for entry in t!(fs::read_dir(from)) {\n         let e = t!(entry);\n         let t = t!(e.metadata());\n         let dest = &to.join(e.file_name());\n@@ -120,7 +120,7 @@ fn main() {\n     let src_path_str = env::args_os().skip(1).next().expect(\"source path required\");\n     let dest_path_str = env::args_os().skip(2).next().expect(\"destination path required\");\n     let src_path = Path::new(&src_path_str);\n-    let dest_path = Path::new(&dest_path_str).join(\"src\");\n+    let dest_path = Path::new(&dest_path_str);\n \n     let lang_features = collect_lang_features(src_path, &mut false);\n     let lib_features = collect_lib_features(src_path).into_iter().filter(|&(ref name, _)| {"}]}