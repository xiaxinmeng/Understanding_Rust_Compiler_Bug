{"sha": "ac21131f7859836cd3fcb39231c0162fd892d960", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjExMzFmNzg1OTgzNmNkM2ZjYjM5MjMxYzAxNjJmZDg5MmQ5NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-28T07:29:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-28T07:29:07Z"}, "message": "Auto merge of #63820 - oli-obk:eager_const_eval, r=nikomatsakis\n\nSimplify eager normalization of constants\n\nr? @nikomatsakis", "tree": {"sha": "6ee393b7e16de069560f9407c5b07d7fc6527af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ee393b7e16de069560f9407c5b07d7fc6527af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac21131f7859836cd3fcb39231c0162fd892d960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac21131f7859836cd3fcb39231c0162fd892d960", "html_url": "https://github.com/rust-lang/rust/commit/ac21131f7859836cd3fcb39231c0162fd892d960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac21131f7859836cd3fcb39231c0162fd892d960/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd48e6f166739344528a5fff4f02516b77d7916", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd48e6f166739344528a5fff4f02516b77d7916", "html_url": "https://github.com/rust-lang/rust/commit/bbd48e6f166739344528a5fff4f02516b77d7916"}, {"sha": "181ed55e96e589afe565e5ad4e7f1cd6a8000894", "url": "https://api.github.com/repos/rust-lang/rust/commits/181ed55e96e589afe565e5ad4e7f1cd6a8000894", "html_url": "https://github.com/rust-lang/rust/commit/181ed55e96e589afe565e5ad4e7f1cd6a8000894"}], "stats": {"total": 94, "additions": 13, "deletions": 81}, "files": [{"sha": "87a23f655a8f33560917b9db59563381a8c42fdf", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=ac21131f7859836cd3fcb39231c0162fd892d960", "patch": "@@ -15,7 +15,6 @@ use super::util;\n use crate::hir::def_id::DefId;\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::mir::interpret::{GlobalId, ConstValue};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use rustc_macros::HashStable;\n use syntax::ast::Ident;\n@@ -397,40 +396,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n-            let tcx = self.selcx.tcx().global_tcx();\n-            let param_env = self.param_env;\n-            if !param_env.has_local_value() {\n-                if substs.needs_infer() || substs.has_placeholders() {\n-                    let identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                    let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n-                    if let Some(instance) = instance {\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None\n-                        };\n-                        if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                            let evaluated = evaluated.subst(tcx, substs);\n-                            return evaluated;\n-                        }\n-                    }\n-                } else {\n-                    if !substs.has_local_value() {\n-                        let instance = ty::Instance::resolve(tcx, param_env, def_id, substs);\n-                        if let Some(instance) = instance {\n-                            let cid = GlobalId {\n-                                instance,\n-                                promoted: None\n-                            };\n-                            if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return evaluated;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        constant\n+        constant.eval(self.selcx.tcx(), self.param_env)\n     }\n }\n "}, {"sha": "c31ff3ab1b55ddfba793327ca3665875abd26d4d", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=ac21131f7859836cd3fcb39231c0162fd892d960", "patch": "@@ -5,11 +5,10 @@\n use crate::infer::at::At;\n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n-use crate::mir::interpret::{GlobalId, ConstValue};\n use crate::traits::project::Normalized;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n-use crate::ty::subst::{Subst, InternalSubsts};\n+use crate::ty::subst::Subst;\n use crate::ty::{self, Ty, TyCtxt};\n \n use super::NoSolution;\n@@ -191,40 +190,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n-            let tcx = self.infcx.tcx.global_tcx();\n-            let param_env = self.param_env;\n-            if !param_env.has_local_value() {\n-                if substs.needs_infer() || substs.has_placeholders() {\n-                    let identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                    let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n-                    if let Some(instance) = instance {\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                            let evaluated = evaluated.subst(tcx, substs);\n-                            return evaluated;\n-                        }\n-                    }\n-                } else {\n-                    if !substs.has_local_value() {\n-                        let instance = ty::Instance::resolve(tcx, param_env, def_id, substs);\n-                        if let Some(instance) = instance {\n-                            let cid = GlobalId {\n-                                instance,\n-                                promoted: None,\n-                            };\n-                            if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return evaluated;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        constant\n+        constant.eval(self.infcx.tcx, self.param_env)\n     }\n }\n "}, {"sha": "fdba359e7464ab7cd0312fc8b085a35533b7e5b8", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=ac21131f7859836cd3fcb39231c0162fd892d960", "patch": "@@ -4,18 +4,18 @@ error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{con\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n+  --> $DIR/const-size_of-cycle.rs:6:17\n+   |\n+LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n   --> $SRC_DIR/libcore/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/const-size_of-cycle.rs:6:17\n-   |\n-LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n   --> $DIR/const-size_of-cycle.rs:5:1"}, {"sha": "8008e53f65f4d3150ec23628386aba06b088b0d2", "filename": "src/test/ui/issues/issue-44415.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac21131f7859836cd3fcb39231c0162fd892d960/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr?ref=ac21131f7859836cd3fcb39231c0162fd892d960", "patch": "@@ -4,18 +4,18 @@ error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{con\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^\n    |\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n+  --> $DIR/issue-44415.rs:6:17\n+   |\n+LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n+   |                 ^^^^^^\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n   --> $DIR/issue-44415.rs:6:26\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/issue-44415.rs:6:17\n-   |\n-LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                 ^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n   --> $DIR/issue-44415.rs:5:1"}]}