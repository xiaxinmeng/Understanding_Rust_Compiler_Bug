{"sha": "640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MGNmYzg1MmFlMTdkNTFhMmY1ZTc1ZmNhZTlhOTM0MzFhM2IzOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-01T22:43:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-01T22:43:15Z"}, "message": "Auto merge of #43576 - arielb1:no-unneeded-unwind, r=eddyb\n\nrustc_mir: don't build unused unwind cleanup blocks\n\nWhen building a scope exit, don't build unwind cleanup blocks unless they will actually be used by the unwind path of a drop - the unused blocks are removed by SimplifyCfg, but they can cause a significant performance slowdown before they are removed. That fixes #43511.\n\nAlso a few other small MIR cleanups & optimizations.\n\nr? @eddyb", "tree": {"sha": "e66ffa71b26ca70a34cacbd4b81e8422a12c5e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66ffa71b26ca70a34cacbd4b81e8422a12c5e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "html_url": "https://github.com/rust-lang/rust/commit/640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8", "html_url": "https://github.com/rust-lang/rust/commit/dd53dd5f9e21dce1fbc06b7f9f451d1009bdcfd8"}, {"sha": "ce0ca763808f4b5d153aaa2787ea253286b449ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0ca763808f4b5d153aaa2787ea253286b449ef", "html_url": "https://github.com/rust-lang/rust/commit/ce0ca763808f4b5d153aaa2787ea253286b449ef"}], "stats": {"total": 388, "additions": 210, "deletions": 178}, "files": [{"sha": "a24b2ad0e4324d22579ff09d7d8f0aecfc16214b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -14,7 +14,6 @@ use ty::subst::Substs;\n use ty::{ClosureSubsts, Region, Ty};\n use mir::*;\n use rustc_const_math::ConstUsize;\n-use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n // # The MIR Visitor\n@@ -260,9 +259,15 @@ macro_rules! make_mir_visitor {\n \n             fn super_mir(&mut self,\n                          mir: & $($mutability)* Mir<'tcx>) {\n-                for index in 0..mir.basic_blocks().len() {\n-                    let block = BasicBlock::new(index);\n-                    self.visit_basic_block_data(block, &$($mutability)* mir[block]);\n+                // for best performance, we want to use an iterator rather\n+                // than a for-loop, to avoid calling Mir::invalidate for\n+                // each basic block.\n+                macro_rules! basic_blocks {\n+                    (mut) => (mir.basic_blocks_mut().iter_enumerated_mut());\n+                    () => (mir.basic_blocks().iter_enumerated());\n+                };\n+                for (bb, data) in basic_blocks!($($mutability)*) {\n+                    self.visit_basic_block_data(bb, data);\n                 }\n \n                 for scope in &$($mutability)* mir.visibility_scopes {"}, {"sha": "4583d80b83ddce228a8db1f122e33342d2dfa8cc", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let tcx = this.hir.tcx();\n \n                     // Enter the remainder scope, i.e. the bindings' destruction scope.\n-                    this.push_scope(remainder_scope);\n+                    this.push_scope((remainder_scope, source_info));\n                     let_extent_stack.push(remainder_scope);\n \n                     // Declare the bindings, which may create a visibility scope."}, {"sha": "7ae5d6b0ec19aa483151274f9641115f9ecdc12a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             .collect();\n \n                     let success = this.cfg.start_new_block();\n-                    let cleanup = this.diverge_cleanup(expr_span);\n+                    let cleanup = this.diverge_cleanup();\n                     this.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: fun,\n                         args: args,"}, {"sha": "28386fa598ce6c7890ddd6762a44d3e4bb65d369", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let bool_ty = self.hir.bool_ty();\n                     let eq_result = self.temp(bool_ty, test.span);\n                     let eq_block = self.cfg.start_new_block();\n-                    let cleanup = self.diverge_cleanup(test.span);\n+                    let cleanup = self.diverge_cleanup();\n                     self.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: Operand::Constant(box Constant {\n                             span: test.span,"}, {"sha": "ccba87a4d26a69e4c632a551982187d22cbe726f", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 72, "deletions": 42, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -107,6 +107,9 @@ pub struct Scope<'tcx> {\n     /// the extent of this scope within source code.\n     extent: CodeExtent,\n \n+    /// the span of that extent\n+    extent_span: Span,\n+\n     /// Whether there's anything to do for the cleanup path, that is,\n     /// when unwinding through this scope. This includes destructors,\n     /// but not StorageDead statements, which don't get emitted at all\n@@ -116,7 +119,7 @@ pub struct Scope<'tcx> {\n     ///  * pollutting the cleanup MIR with StorageDead creates\n     ///    landing pads even though there's no actual destructors\n     ///  * freeing up stack space has no effect during unwinding\n-    pub(super) needs_cleanup: bool,\n+    needs_cleanup: bool,\n \n     /// set of lvalues to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n@@ -197,6 +200,15 @@ pub struct BreakableScope<'tcx> {\n     pub break_destination: Lvalue<'tcx>,\n }\n \n+impl DropKind {\n+    fn may_panic(&self) -> bool {\n+        match *self {\n+            DropKind::Value { .. } => true,\n+            DropKind::Storage => false\n+        }\n+    }\n+}\n+\n impl<'tcx> Scope<'tcx> {\n     /// Invalidate all the cached blocks in the scope.\n     ///\n@@ -282,7 +294,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_opt_scope(opt_extent={:?}, block={:?})\", opt_extent, block);\n-        if let Some(extent) = opt_extent { self.push_scope(extent.0); }\n+        if let Some(extent) = opt_extent { self.push_scope(extent); }\n         let rv = unpack!(block = f(self));\n         if let Some(extent) = opt_extent {\n             unpack!(block = self.pop_scope(extent, block));\n@@ -301,7 +313,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(extent={:?}, block={:?})\", extent, block);\n-        self.push_scope(extent.0);\n+        self.push_scope(extent);\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(extent, block));\n         debug!(\"in_scope: exiting extent={:?} block={:?}\", extent, block);\n@@ -312,12 +324,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// scope and call `pop_scope` afterwards. Note that these two\n     /// calls must be paired; using `in_scope` as a convenience\n     /// wrapper maybe preferable.\n-    pub fn push_scope(&mut self, extent: CodeExtent) {\n+    pub fn push_scope(&mut self, extent: (CodeExtent, SourceInfo)) {\n         debug!(\"push_scope({:?})\", extent);\n         let vis_scope = self.visibility_scope;\n         self.scopes.push(Scope {\n             visibility_scope: vis_scope,\n-            extent: extent,\n+            extent: extent.0,\n+            extent_span: extent.1.span,\n             needs_cleanup: false,\n             drops: vec![],\n             free: None,\n@@ -333,9 +346,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                      mut block: BasicBlock)\n                      -> BlockAnd<()> {\n         debug!(\"pop_scope({:?}, {:?})\", extent, block);\n-        // We need to have `cached_block`s available for all the drops, so we call diverge_cleanup\n-        // to make sure all the `cached_block`s are filled in.\n-        self.diverge_cleanup(extent.1.span);\n+        // If we are emitting a `drop` statement, we need to have the cached\n+        // diverge cleanup pads ready in case that drop panics.\n+        let may_panic =\n+            self.scopes.last().unwrap().drops.iter().any(|s| s.kind.may_panic());\n+        if may_panic {\n+            self.diverge_cleanup();\n+        }\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.extent, extent.0);\n         unpack!(block = build_scope_drops(&mut self.cfg,\n@@ -366,6 +383,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let len = self.scopes.len();\n         assert!(scope_count < len, \"should not use `exit_scope` to pop ALL scopes\");\n         let tmp = self.get_unit_temp();\n+\n+        // If we are emitting a `drop` statement, we need to have the cached\n+        // diverge cleanup pads ready in case that drop panics.\n+        let may_panic = self.scopes[(len - scope_count)..].iter()\n+            .any(|s| s.drops.iter().any(|s| s.kind.may_panic()));\n+        if may_panic {\n+            self.diverge_cleanup();\n+        }\n+\n         {\n         let mut rest = &mut self.scopes[(len - scope_count)..];\n         while let Some((scope, rest_)) = {rest}.split_last_mut() {\n@@ -618,7 +644,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// This path terminates in Resume. Returns the start of the path.\n     /// See module comment for more details. None indicates there\u2019s no\n     /// cleanup to do at this point.\n-    pub fn diverge_cleanup(&mut self, span: Span) -> Option<BasicBlock> {\n+    pub fn diverge_cleanup(&mut self) -> Option<BasicBlock> {\n         if !self.scopes.iter().any(|scope| scope.needs_cleanup) {\n             return None;\n         }\n@@ -652,7 +678,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         for scope in scopes.iter_mut() {\n-            target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, span, scope, target);\n+            target = build_diverge_scope(\n+                hir.tcx(), cfg, &unit_temp, scope.extent_span, scope, target);\n         }\n         Some(target)\n     }\n@@ -668,7 +695,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup(span);\n+        let diverge_target = self.diverge_cleanup();\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Drop {\n                                location: location,\n@@ -686,7 +713,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                   value: Operand<'tcx>) -> BlockAnd<()> {\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup(span);\n+        let diverge_target = self.diverge_cleanup();\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::DropAndReplace {\n                                location: location,\n@@ -709,7 +736,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n \n         let success_block = self.cfg.start_new_block();\n-        let cleanup = self.diverge_cleanup(span);\n+        let cleanup = self.diverge_cleanup();\n \n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Assert {\n@@ -731,45 +758,48 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                            mut block: BasicBlock,\n                            arg_count: usize)\n                            -> BlockAnd<()> {\n+    debug!(\"build_scope_drops({:?} -> {:?})\", block, scope);\n     let mut iter = scope.drops.iter().rev().peekable();\n     while let Some(drop_data) = iter.next() {\n         let source_info = scope.source_info(drop_data.span);\n-        if let DropKind::Value { .. } = drop_data.kind {\n-            // Try to find the next block with its cached block\n-            // for us to diverge into in case the drop panics.\n-            let on_diverge = iter.peek().iter().filter_map(|dd| {\n-                match dd.kind {\n-                    DropKind::Value { cached_block } => cached_block,\n-                    DropKind::Storage => None\n-                }\n-            }).next();\n-            // If there\u2019s no `cached_block`s within current scope,\n-            // we must look for one in the enclosing scope.\n-            let on_diverge = on_diverge.or_else(||{\n-                earlier_scopes.iter().rev().flat_map(|s| s.cached_block()).next()\n-            });\n-            let next = cfg.start_new_block();\n-            cfg.terminate(block, source_info, TerminatorKind::Drop {\n-                location: drop_data.location.clone(),\n-                target: next,\n-                unwind: on_diverge\n-            });\n-            block = next;\n-        }\n         match drop_data.kind {\n-            DropKind::Value { .. } |\n-            DropKind::Storage => {\n-                // Only temps and vars need their storage dead.\n-                match drop_data.location {\n-                    Lvalue::Local(index) if index.index() > arg_count => {}\n-                    _ => continue\n-                }\n+            DropKind::Value { .. } => {\n+                // Try to find the next block with its cached block\n+                // for us to diverge into in case the drop panics.\n+                let on_diverge = iter.peek().iter().filter_map(|dd| {\n+                    match dd.kind {\n+                        DropKind::Value { cached_block: None } =>\n+                            span_bug!(drop_data.span, \"cached block not present?\"),\n+                        DropKind::Value { cached_block } => cached_block,\n+                        DropKind::Storage => None\n+                    }\n+                }).next();\n+                // If there\u2019s no `cached_block`s within current scope,\n+                // we must look for one in the enclosing scope.\n+                let on_diverge = on_diverge.or_else(|| {\n+                    earlier_scopes.iter().rev().flat_map(|s| s.cached_block()).next()\n+                });\n+                let next = cfg.start_new_block();\n+                cfg.terminate(block, source_info, TerminatorKind::Drop {\n+                    location: drop_data.location.clone(),\n+                    target: next,\n+                    unwind: on_diverge\n+                });\n+                block = next;\n+            }\n+            DropKind::Storage => {}\n+        }\n \n+        // Drop the storage for both value and storage drops.\n+        // Only temps and vars need their storage dead.\n+        match drop_data.location {\n+            Lvalue::Local(index) if index.index() > arg_count => {\n                 cfg.push(block, Statement {\n                     source_info: source_info,\n                     kind: StatementKind::StorageDead(drop_data.location.clone())\n                 });\n             }\n+            _ => continue\n         }\n     }\n     block.unit()"}, {"sha": "a1d56ccd874a11a228d6a3e47c71ad6a94a8166f", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -105,6 +105,8 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n     }\n \n     pub fn simplify(mut self) {\n+        self.strip_nops();\n+\n         loop {\n             let mut changed = false;\n \n@@ -141,8 +143,6 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n \n             if !changed { break }\n         }\n-\n-        self.strip_nops()\n     }\n \n     // Collapse a goto chain starting from `start`"}, {"sha": "d3bf7f68785d568d93e28654985d735bd7331d5e", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -47,42 +47,36 @@ fn main() {\n //         StorageDead(_3);\n //         StorageLive(_4);\n //         _4 = std::option::Option<std::boxed::Box<u32>>::None;\n+//         StorageLive(_5);\n //         StorageLive(_6);\n-//         StorageLive(_7);\n-//         _7 = _4;\n-//         replace(_6 <- _7) -> [return: bb6, unwind: bb7];\n+//         _6 = _4;\n+//         replace(_5 <- _6) -> [return: bb1, unwind: bb5];\n //     }\n //     bb1: {\n-//         resume;\n+//         drop(_6) -> [return: bb6, unwind: bb4];\n //     }\n //     bb2: {\n-//         drop(_4) -> bb1;\n+//         resume;\n //     }\n //     bb3: {\n-//         goto -> bb2;\n+//         drop(_4) -> bb2;\n //     }\n //     bb4: {\n-//         drop(_6) -> bb3;\n+//         drop(_5) -> bb3;\n //     }\n //     bb5: {\n-//         goto -> bb4;\n+//         drop(_6) -> bb4;\n //     }\n //     bb6: {\n-//         drop(_7) -> [return: bb8, unwind: bb4];\n+//         StorageDead(_6);\n+//         _0 = ();\n+//         drop(_5) -> [return: bb7, unwind: bb3];\n //     }\n //     bb7: {\n-//         drop(_7) -> bb5;\n+//         StorageDead(_5);\n+//         drop(_4) -> bb8;\n //     }\n //     bb8: {\n-//         StorageDead(_7);\n-//         _0 = ();\n-//         drop(_6) -> [return: bb9, unwind: bb2];\n-//     }\n-//     bb9: {\n-//         StorageDead(_6);\n-//         drop(_4) -> bb10;\n-//     }\n-//     bb10: {\n //         StorageDead(_4);\n //         StorageDead(_2);\n //         StorageDead(_1);"}, {"sha": "bfb1b3b65289034f5e3c435512ce1e60bf188987", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -32,41 +32,41 @@ fn foo(i: i32) {\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     let _1: D;\n-//     let _3: i32;\n-//     let _4: &'6_2rce i32;\n+//     let _2: i32;\n+//     let _3: &'6_2rce i32;\n //     let _7: &'6_4rce i32;\n-//     let mut _5: ();\n-//     let mut _6: i32;\n-//\n+//     let mut _4: ();\n+//     let mut _5: i32;\n+//     let mut _6: ();\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_2);\n+//         _2 = const 0i32;\n //         StorageLive(_3);\n-//         _3 = const 0i32;\n-//         StorageLive(_4);\n-//         _4 = &'6_2rce _3;\n-//         StorageLive(_6);\n-//         _6 = (*_4);\n-//         _5 = const foo(_6) -> [return: bb2, unwind: bb3];\n+//         _3 = &'6_2rce _2;\n+//         StorageLive(_5);\n+//         _5 = (*_3);\n+//         _4 = const foo(_5) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_6);\n+//         StorageDead(_5);\n //         StorageLive(_7);\n-//         _7 = &'6_4rce _3;\n+//         _7 = &'6_4rce _2;\n //         _0 = ();\n //         StorageDead(_7);\n //         EndRegion('6_4rce);\n-//         StorageDead(_4);\n-//         EndRegion('6_2rce);\n //         StorageDead(_3);\n+//         EndRegion('6_2rce);\n+//         StorageDead(_2);\n //         drop(_1) -> bb4;\n //     }\n+//     bb2: {\n+//         resume;\n+//     }\n //     bb3: {\n //         EndRegion('6_2rce);\n-//         drop(_1) -> bb1;\n+//         drop(_1) -> bb2;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "773a348a939770cb61dcbb2b26bdd7b8a2c6f6f3", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -31,32 +31,31 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let mut _0: ();\n //     let _1: D;\n //     let mut _2: ();\n-//     let mut _3: ();\n-//     let mut _4: [closure@NodeId(18) d: &'19mce D];\n-//     let mut _5: &'19mce D;\n-//\n+//     let mut _3: [closure@NodeId(18) d:&'19mce D];\n+//     let mut _4: &'19mce D;\n+//     let mut _5: ();\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n //         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = &'19mce _1;\n-//         _4 = [closure@NodeId(18)] { d: _5 };\n-//         StorageDead(_5);\n-//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//         _4 = &'19mce _1;\n+//         _3 = [closure@NodeId(18)] { d: _4 };\n+//         StorageDead(_4);\n+//         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_4);\n+//         StorageDead(_3);\n //         EndRegion('19mce);\n //         _0 = ();\n //         drop(_1) -> bb4;\n //     }\n+//     bb2: {\n+//         resume;\n+//     }\n //     bb3: {\n //         EndRegion('19mce);\n-//         drop(_1) -> bb1;\n+//         drop(_1) -> bb2;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "112c93843e042e4691267ffba357eb661aaf4d8c", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -27,35 +27,35 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n \n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n //     let mut _0: ();\n //     let _1: D;\n //     let mut _2: ();\n-//     let mut _3: ();\n-//     let mut _4: [closure@NodeId(22) d:&'23mce D];\n-//     let mut _5: &'23mce D;\n-//\n+//     let mut _3: [closure@NodeId(22) d:&'23mce D];\n+//     let mut _4: &'23mce D;\n+//     let mut _5: ();\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n //         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = &'23mce _1;\n-//         _4 = [closure@NodeId(22)] { d: _5 };\n-//         StorageDead(_5);\n-//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//         _4 = &'23mce _1;\n+//         _3 = [closure@NodeId(22)] { d: _4 };\n+//         StorageDead(_4);\n+//         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_4);\n+//         StorageDead(_3);\n //         EndRegion('23mce);\n //         _0 = ();\n //         drop(_1) -> bb4;\n //     }\n+//     bb2: {\n+//         resume;\n+//     }\n //     bb3: {\n //         EndRegion('23mce);\n-//         drop(_1) -> bb1;\n+//         drop(_1) -> bb2;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "913986ae816a65024890c6230095cf2e0390632b", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -31,18 +31,18 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let mut _0: ();\n //     let _1: D;\n //     let mut _2: ();\n-//     let mut _3: ();\n-//     let mut _4: [closure@NodeId(22) d:D];\n-//     let mut _5: D;\n+//     let mut _3: [closure@NodeId(22) d:D];\n+//     let mut _4: D;\n+//     let mut _5: ();\n //\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n //         StorageLive(_4);\n-//         StorageLive(_5);\n-//         _5 = _1;\n-//         _4 = [closure@NodeId(22)] { d: _5 };\n-//         drop(_5) -> [return: bb4, unwind: bb3];\n+//         _4 = _1;\n+//         _3 = [closure@NodeId(22)] { d: _4 };\n+//         drop(_4) -> [return: bb4, unwind: bb3];\n //     }\n //     bb1: {\n //         resume;\n@@ -51,17 +51,17 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         drop(_1) -> bb1;\n //     }\n //     bb3: {\n-//         drop(_4) -> bb2;\n+//         drop(_3) -> bb2;\n //     }\n //     bb4: {\n-//         StorageDead(_5);\n-//         _3 = const foo(_4) -> [return: bb5, unwind: bb3];\n+//         StorageDead(_4);\n+//         _2 = const foo(_3) -> [return: bb5, unwind: bb3];\n //     }\n //     bb5: {\n-//         drop(_4) -> [return: bb6, unwind: bb2];\n+//         drop(_3) -> [return: bb6, unwind: bb2];\n //     }\n //     bb6: {\n-//         StorageDead(_4);\n+//         StorageDead(_3);\n //         _0 = ();\n //         drop(_1) -> bb7;\n //     }\n@@ -76,16 +76,16 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:D]) -> i32 {\n //     let mut _0: i32;\n //     let _2: &'14_0rce D;\n-//     let mut _3: ();\n-//     let mut _4: i32;\n+//     let mut _3: i32;\n+//     let mut _4: ();\n //\n //     bb0: {\n //         StorageLive(_2);\n //         _2 = &'14_0rce (_1.0: D);\n-//         StorageLive(_4);\n-//         _4 = ((*_2).0: i32);\n-//         _0 = _4;\n-//         StorageDead(_4);\n+//         StorageLive(_3);\n+//         _3 = ((*_2).0: i32);\n+//         _0 = _3;\n+//         StorageDead(_3);\n //         StorageDead(_2);\n //         EndRegion('14_0rce);\n //         drop(_1) -> bb1;"}, {"sha": "dc8f8ea11f51c5d2a263d1702bc32607b87317a2", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -29,44 +29,43 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n // fn main() -> () {\n-//     let mut _0: ();\n-//     let _1: D;\n-//     let _3: &'6_1rce D;\n-//     let mut _2: ();\n-//     let mut _4: ();\n-//     let mut _5: [closure@NodeId(22) r:&'6_1rce D];\n-//     let mut _6: &'6_1rce D;\n-//\n-//     bb0: {\n-//         StorageLive(_1);\n-//         _1 = D::{{constructor}}(const 0i32,);\n-//         StorageLive(_3);\n-//         _3 = &'6_1rce _1;\n-//         StorageLive(_5);\n-//         StorageLive(_6);\n-//         _6 = _3;\n-//         _5 = [closure@NodeId(22)] { r: _6 };\n-//         StorageDead(_6);\n-//         _4 = const foo(_5) -> [return: bb2, unwind: bb3];\n-//     }\n-//     bb1: {\n-//         resume;\n-//     }\n-//     bb2: {\n-//         StorageDead(_5);\n-//         _0 = ();\n-//         StorageDead(_3);\n-//         EndRegion('6_1rce);\n-//         drop(_1) -> bb4;\n-//     }\n-//     bb3: {\n-//         EndRegion('6_1rce);\n-//         drop(_1) -> bb1;\n-//     }\n-//     bb4: {\n-//         StorageDead(_1);\n-//         return;\n-//     }\n+//    let mut _0: ();\n+//    let _1: D;\n+//    let _2: &'6_1rce D;\n+//    let mut _3: ();\n+//    let mut _4: [closure@NodeId(22) r:&'6_1rce D];\n+//    let mut _5: &'6_1rce D;\n+//    let mut _6: ();\n+//    bb0: {\n+//        StorageLive(_1);\n+//        _1 = D::{{constructor}}(const 0i32,);\n+//        StorageLive(_2);\n+//        _2 = &'6_1rce _1;\n+//        StorageLive(_4);\n+//        StorageLive(_5);\n+//        _5 = _2;\n+//        _4 = [closure@NodeId(22)] { r: _5 };\n+//        StorageDead(_5);\n+//        _3 = const foo(_4) -> [return: bb1, unwind: bb3];\n+//    }\n+//    bb1: {\n+//        StorageDead(_4);\n+//        _0 = ();\n+//        StorageDead(_2);\n+//        EndRegion('6_1rce);\n+//        drop(_1) -> bb4;\n+//    }\n+//    bb2: {\n+//        resume;\n+//    }\n+//    bb3: {\n+//        EndRegion('6_1rce);\n+//        drop(_1) -> bb2;\n+//    }\n+//    bb4: {\n+//        StorageDead(_1);\n+//        return;\n+//    }\n // }\n // END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n "}, {"sha": "1daa18256dceec73615a4a01263c89dc168e7bac", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cfc852ae17d51a2f5e75fcae9a93431a3b38c/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=640cfc852ae17d51a2f5e75fcae9a93431a3b38c", "patch": "@@ -34,18 +34,23 @@ impl S {\n \n // END RUST SOURCE\n // START rustc.node4.ElaborateDrops.after.mir\n+//    let mut _0: ();\n+//    let _1: ();\n //    let mut _2: S;\n-//    let mut _3: ();\n+//    let mut _3: S;\n //    let mut _4: S;\n-//    let mut _5: S;\n+//    let mut _5: ();\n //    let mut _6: bool;\n //\n //    bb0: {\n // END rustc.node4.ElaborateDrops.after.mir\n // START rustc.node13.ElaborateDrops.after.mir\n-//    let mut _2: ();\n-//    let mut _4: ();\n-//    let mut _5: S;\n+//    let mut _0: ();\n+//    let _1: S;\n+//    let mut _2: S;\n+//    let mut _3: ();\n+//    let mut _4: S;\n+//    let mut _5: ();\n //    let mut _6: S;\n //    let mut _7: bool;\n //"}]}