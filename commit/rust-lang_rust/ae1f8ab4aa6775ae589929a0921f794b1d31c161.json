{"sha": "ae1f8ab4aa6775ae589929a0921f794b1d31c161", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMWY4YWI0YWE2Nzc1YWU1ODk5MjlhMDkyMWY3OTRiMWQzMWMxNjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-07T10:52:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-07T10:52:56Z"}, "message": "fix miri engine debug output for uninitialized locals", "tree": {"sha": "d6974ecad222a722b01fe48639e18c3d6fdb6458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6974ecad222a722b01fe48639e18c3d6fdb6458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1f8ab4aa6775ae589929a0921f794b1d31c161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1f8ab4aa6775ae589929a0921f794b1d31c161", "html_url": "https://github.com/rust-lang/rust/commit/ae1f8ab4aa6775ae589929a0921f794b1d31c161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1f8ab4aa6775ae589929a0921f794b1d31c161/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525c68cf95d465a69372bf55cb75c20b2688f443", "url": "https://api.github.com/repos/rust-lang/rust/commits/525c68cf95d465a69372bf55cb75c20b2688f443", "html_url": "https://github.com/rust-lang/rust/commit/525c68cf95d465a69372bf55cb75c20b2688f443"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "600d20be397c5e58103edc90355729151c938a4c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae1f8ab4aa6775ae589929a0921f794b1d31c161/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1f8ab4aa6775ae589929a0921f794b1d31c161/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ae1f8ab4aa6775ae589929a0921f794b1d31c161", "patch": "@@ -698,15 +698,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n                 }\n                 write!(msg, \":\").unwrap();\n \n-                match self.stack[frame].locals[local].access() {\n-                    Err(err) => {\n-                        if let InterpError::DeadLocal = err.kind {\n-                            write!(msg, \" is dead\").unwrap();\n-                        } else {\n-                            panic!(\"Failed to access local: {:?}\", err);\n-                        }\n-                    }\n-                    Ok(Operand::Indirect(mplace)) => {\n+                match self.stack[frame].locals[local].state {\n+                    LocalValue::Dead => write!(msg, \" is dead\").unwrap(),\n+                    LocalValue::Uninitialized => write!(msg, \" is uninitialized\").unwrap(),\n+                    LocalValue::Live(Operand::Indirect(mplace)) => {\n                         let (ptr, align) = mplace.to_scalar_ptr_align();\n                         match ptr {\n                             Scalar::Ptr(ptr) => {\n@@ -716,13 +711,13 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n                             ptr => write!(msg, \" by integral ref: {:?}\", ptr).unwrap(),\n                         }\n                     }\n-                    Ok(Operand::Immediate(Immediate::Scalar(val))) => {\n+                    LocalValue::Live(Operand::Immediate(Immediate::Scalar(val))) => {\n                         write!(msg, \" {:?}\", val).unwrap();\n                         if let ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr)) = val {\n                             allocs.push(ptr.alloc_id);\n                         }\n                     }\n-                    Ok(Operand::Immediate(Immediate::ScalarPair(val1, val2))) => {\n+                    LocalValue::Live(Operand::Immediate(Immediate::ScalarPair(val1, val2))) => {\n                         write!(msg, \" ({:?}, {:?})\", val1, val2).unwrap();\n                         if let ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr)) = val1 {\n                             allocs.push(ptr.alloc_id);"}]}