{"sha": "145279709dde6b5576185902c8731cb6e6d1b7f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NTI3OTcwOWRkZTZiNTU3NjE4NTkwMmM4NzMxY2I2ZTZkMWI3ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-06T21:46:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-06T21:46:41Z"}, "message": "auto merge of #6980 : Kimundi/rust/iterator-collect3, r=thestinger", "tree": {"sha": "68f88966307a6c9eca1b6f499ffe1894ca6c7a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f88966307a6c9eca1b6f499ffe1894ca6c7a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/145279709dde6b5576185902c8731cb6e6d1b7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/145279709dde6b5576185902c8731cb6e6d1b7f1", "html_url": "https://github.com/rust-lang/rust/commit/145279709dde6b5576185902c8731cb6e6d1b7f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/145279709dde6b5576185902c8731cb6e6d1b7f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "533425e242db3f8cfe7ad9849b2b96d04ca5ac3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/533425e242db3f8cfe7ad9849b2b96d04ca5ac3e", "html_url": "https://github.com/rust-lang/rust/commit/533425e242db3f8cfe7ad9849b2b96d04ca5ac3e"}, {"sha": "cac489115458af3eed301d8d4f9c6c7d6779b058", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac489115458af3eed301d8d4f9c6c7d6779b058", "html_url": "https://github.com/rust-lang/rust/commit/cac489115458af3eed301d8d4f9c6c7d6779b058"}], "stats": {"total": 94, "additions": 56, "deletions": 38}, "files": [{"sha": "3528f20cfb3cff9fda3e76e7b92905b903ce6c66", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=145279709dde6b5576185902c8731cb6e6d1b7f1", "patch": "@@ -207,19 +207,19 @@ mod test {\n     fn test_each() {\n         let mut e1: EnumSet<Foo> = EnumSet::empty();\n \n-        assert_eq!(~[], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(A);\n-        assert_eq!(~[A], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(C);\n-        assert_eq!(~[A,C], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(C);\n-        assert_eq!(~[A,C], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n \n         e1.add(B);\n-        assert_eq!(~[A,B,C], iter::to_vec(|f| e1.each(f)))\n+        assert_eq!(~[A,B,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -236,12 +236,12 @@ mod test {\n         e2.add(C);\n \n         let e_union = e1 | e2;\n-        assert_eq!(~[A,B,C], iter::to_vec(|f| e_union.each(f)))\n+        assert_eq!(~[A,B,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_union.each(f)))\n \n         let e_intersection = e1 & e2;\n-        assert_eq!(~[C], iter::to_vec(|f| e_intersection.each(f)))\n+        assert_eq!(~[C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_intersection.each(f)))\n \n         let e_subtract = e1 - e2;\n-        assert_eq!(~[A], iter::to_vec(|f| e_subtract.each(f)))\n+        assert_eq!(~[A], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_subtract.each(f)))\n     }\n }"}, {"sha": "8a0ec3ade4d4e0ae76c7e2a7596740c49143dcc2", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=145279709dde6b5576185902c8731cb6e6d1b7f1", "patch": "@@ -51,22 +51,18 @@ pub trait Times {\n     fn times(&self, it: &fn() -> bool) -> bool;\n }\n \n-/**\n- * Transform an internal iterator into an owned vector.\n- *\n- * # Example:\n- *\n- * ~~~ {.rust}\n- * let xs = ~[1, 2, 3];\n- * let ys = do iter::to_vec |f| { xs.each(|x| f(*x)) };\n- * assert_eq!(xs, ys);\n- * ~~~\n- */\n-#[inline(always)]\n-pub fn to_vec<T>(iter: &fn(f: &fn(T) -> bool) -> bool) -> ~[T] {\n-    let mut v = ~[];\n-    for iter |x| { v.push(x) }\n-    v\n+#[allow(missing_doc)]\n+pub trait FromIter<T> {\n+    /// Build a container with elements from an internal iterator.\n+    ///\n+    /// # Example:\n+    ///\n+    /// ~~~ {.rust}\n+    /// let xs = ~[1, 2, 3];\n+    /// let ys: ~[int] = do FromIter::from_iter |f| { xs.each(|x| f(*x)) };\n+    /// assert_eq!(xs, ys);\n+    /// ~~~\n+    pub fn from_iter(iter: &fn(f: &fn(T) -> bool) -> bool) -> Self;\n }\n \n /**\n@@ -262,9 +258,9 @@ mod tests {\n     use uint;\n \n     #[test]\n-    fn test_to_vec() {\n+    fn test_from_iter() {\n         let xs = ~[1, 2, 3];\n-        let ys = do to_vec |f| { xs.each(|x| f(*x)) };\n+        let ys: ~[int] = do FromIter::from_iter |f| { xs.each(|x| f(*x)) };\n         assert_eq!(xs, ys);\n     }\n "}, {"sha": "7f723e44c2b056d2658b229a6df1d81341180fa9", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=145279709dde6b5576185902c8731cb6e6d1b7f1", "patch": "@@ -19,8 +19,12 @@ implementing the `Iterator` trait.\n \n use cmp;\n use iter;\n+use iter::{FromIter, Times};\n use num::{Zero, One};\n-use prelude::*;\n+use option::{Option, Some, None};\n+use ops::{Add, Mul};\n+use cmp::Ord;\n+use clone::Clone;\n \n /// An interface for dealing with \"external iterators\". These types of iterators\n /// can be resumed at any time as all state is stored internally as opposed to\n@@ -241,19 +245,19 @@ pub trait IteratorUtil<A> {\n     /// ~~~\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n \n-    /// Loops through the entire iterator, accumulating all of the elements into\n-    /// a vector.\n+    /// Loops through the entire iterator, collecting all of the elements into\n+    /// a container implementing `FromIter`.\n     ///\n     /// # Example\n     ///\n     /// ~~~ {.rust}\n     /// use std::iterator::*;\n     ///\n     /// let a = [1, 2, 3, 4, 5];\n-    /// let b = a.iter().transform(|&x| x).to_vec();\n+    /// let b: ~[int] = a.iter().transform(|&x| x).collect();\n     /// assert!(a == b);\n     /// ~~~\n-    fn to_vec(&mut self) -> ~[A];\n+    fn collect<B: FromIter<A>>(&mut self) -> B;\n \n     /// Loops through `n` iterations, returning the `n`th element of the\n     /// iterator.\n@@ -415,8 +419,8 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n \n     #[inline(always)]\n-    fn to_vec(&mut self) -> ~[A] {\n-        iter::to_vec::<A>(|f| self.advance(f))\n+    fn collect<B: FromIter<A>>(&mut self) -> B {\n+        FromIter::from_iter::<A, B>(|f| self.advance(f))\n     }\n \n     /// Return the `n`th item yielded by an iterator.\n@@ -870,9 +874,9 @@ mod tests {\n     use uint;\n \n     #[test]\n-    fn test_counter_to_vec() {\n+    fn test_counter_from_iter() {\n         let mut it = Counter::new(0, 5).take(10);\n-        let xs = iter::to_vec(|f| it.advance(f));\n+        let xs: ~[int] = iter::FromIter::from_iter::<int, ~[int]>(|f| it.advance(f));\n         assert_eq!(xs, ~[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n     }\n \n@@ -903,7 +907,7 @@ mod tests {\n     fn test_filter_map() {\n         let mut it = Counter::new(0u, 1u).take(10)\n             .filter_map(|x: uint| if x.is_even() { Some(x*x) } else { None });\n-        assert_eq!(it.to_vec(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n+        assert_eq!(it.collect::<~[uint]>(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n     }\n \n     #[test]\n@@ -1062,6 +1066,13 @@ mod tests {\n         assert_eq!(v.slice(0, 0).iter().transform(|&x| x).min(), None);\n     }\n \n+    #[test]\n+    fn test_collect() {\n+        let a = ~[1, 2, 3, 4, 5];\n+        let b: ~[int] = a.iter().transform(|&x| x).collect();\n+        assert_eq!(a, b);\n+    }\n+\n     #[test]\n     fn test_all() {\n         let v = ~&[1, 2, 3, 4, 5];"}, {"sha": "bb10cec30edf77d4925bdca3dfbfefca89aae410", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=145279709dde6b5576185902c8731cb6e6d1b7f1", "patch": "@@ -14,7 +14,7 @@ Many programming languages have a 'prelude': a particular subset of the\n libraries that come with the language. Every program imports the prelude by\n default.\n \n-For example, it would be annoying to add `use io::println;` to every single\n+For example, it would be annoying to add `use std::io::println;` to every single\n program, and the vast majority of Rust programs will wish to print to standard\n output. Therefore, it makes sense to import it into every program.\n \n@@ -49,7 +49,8 @@ pub use hash::Hash;\n pub use old_iter::{BaseIter, ReverseIter, MutableIter, ExtendedIter, EqIter};\n pub use old_iter::{CopyableIter, CopyableOrderedIter, CopyableNonstrictIter};\n pub use old_iter::{ExtendedMutableIter};\n-pub use iter::Times;\n+pub use iter::{Times, FromIter};\n+// FIXME: #5898 pub use iterator::{Iterator, IteratorUtil};\n pub use num::{Num, NumCast};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};"}, {"sha": "8340b956b658fd09171523d4bc4c610d29533cfe", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145279709dde6b5576185902c8731cb6e6d1b7f1/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=145279709dde6b5576185902c8731cb6e6d1b7f1", "patch": "@@ -20,6 +20,7 @@ use clone::Clone;\n use old_iter::BaseIter;\n use old_iter;\n use iterator::Iterator;\n+use iter::FromIter;\n use kinds::Copy;\n use libc;\n use old_iter::CopyableIter;\n@@ -2996,6 +2997,15 @@ impl<'self, T> Iterator<&'self mut T> for MutVecIterator<'self, T> {\n     }\n }\n \n+impl<T> FromIter<T> for ~[T]{\n+    #[inline(always)]\n+    pub fn from_iter(iter: &fn(f: &fn(T) -> bool) -> bool) -> ~[T] {\n+        let mut v = ~[];\n+        for iter |x| { v.push(x) }\n+        v\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use option::{None, Option, Some};"}]}