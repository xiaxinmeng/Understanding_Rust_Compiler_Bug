{"sha": "9615d27ab7327abdb2ba4aef5f797c693d02ef17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MTVkMjdhYjczMjdhYmRiMmJhNGFlZjVmNzk3YzY5M2QwMmVmMTc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T22:05:19Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T22:05:19Z"}, "message": "Don't see `{{}}` as placeholder in panic_fmt lint.", "tree": {"sha": "e6a7c638e77a0e4b6866f855b5fb18f48a3c1a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6a7c638e77a0e4b6866f855b5fb18f48a3c1a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9615d27ab7327abdb2ba4aef5f797c693d02ef17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9615d27ab7327abdb2ba4aef5f797c693d02ef17", "html_url": "https://github.com/rust-lang/rust/commit/9615d27ab7327abdb2ba4aef5f797c693d02ef17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9615d27ab7327abdb2ba4aef5f797c693d02ef17/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd262e385646fa94b85b5340f260efb01284261b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd262e385646fa94b85b5340f260efb01284261b", "html_url": "https://github.com/rust-lang/rust/commit/dd262e385646fa94b85b5340f260efb01284261b"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "75ee0896510f00d3c89dbdfcd2e463a98e211b87", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9615d27ab7327abdb2ba4aef5f797c693d02ef17/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9615d27ab7327abdb2ba4aef5f797c693d02ef17/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=9615d27ab7327abdb2ba4aef5f797c693d02ef17", "patch": "@@ -47,19 +47,18 @@ impl<'tcx> LateLintPass<'tcx> for PanicFmt {\n fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tcx hir::Expr<'tcx>) {\n     if let hir::ExprKind::Lit(lit) = &arg.kind {\n         if let ast::LitKind::Str(sym, _) = lit.node {\n-            let s = sym.as_str();\n-            let open = s.find('{');\n-            let close = s[open.unwrap_or(0)..].find('}');\n-            let looks_like_placeholder = match (open, close) {\n-                (Some(_), Some(_)) => true,\n-                (Some(_), None) | (None, Some(_)) => false,\n-                (None, None) => return, // OK, no braces.\n-            };\n             let expn = f.span.ctxt().outer_expn_data();\n             if let Some(id) = expn.macro_def_id {\n                 if cx.tcx.is_diagnostic_item(sym::std_panic_macro, id)\n                     || cx.tcx.is_diagnostic_item(sym::core_panic_macro, id)\n                 {\n+                    let s = sym.as_str();\n+                    if !s.contains(&['{', '}'][..]) {\n+                        return;\n+                    }\n+                    let s = s.replace(\"{{\", \"\").replace(\"}}\", \"\");\n+                    let looks_like_placeholder =\n+                        s.find('{').map_or(false, |i| s[i + 1..].contains('}'));\n                     let expn = {\n                         // Unwrap another level of macro expansion if this\n                         // panic!() was expanded from assert!()."}]}