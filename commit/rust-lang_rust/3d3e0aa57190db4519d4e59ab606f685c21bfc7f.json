{"sha": "3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkM2UwYWE1NzE5MGRiNDUxOWQ0ZTU5YWI2MDZmNjg1YzIxYmZjN2Y=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-07-18T21:10:08Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-23T12:20:12Z"}, "message": "Buffer errors in MIR borrow check\n\n(pnkfelix updated to address tidy, and to change the buffer from\n`Vec<DiagnosticBuilder<'errs>>` to a `Vec<Diagnostic>` in order to\navoid painful lifetime maintenance.)", "tree": {"sha": "e8a3c3d4776e5fd085aee38b85e802cde873d062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8a3c3d4776e5fd085aee38b85e802cde873d062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "html_url": "https://github.com/rust-lang/rust/commit/3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da935e96a11973c4ee3470f1b831eba1ac7a87c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da935e96a11973c4ee3470f1b831eba1ac7a87c3", "html_url": "https://github.com/rust-lang/rust/commit/da935e96a11973c4ee3470f1b831eba1ac7a87c3"}], "stats": {"total": 130, "additions": 87, "deletions": 43}, "files": [{"sha": "8f99ad87cb8e023699640a6d49f5d056d93f167c", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -88,6 +88,18 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.cancel();\n     }\n \n+    /// Buffers the diagnostic for later emission.\n+    pub fn buffer(self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n+        // We need to use `ptr::read` because `DiagnosticBuilder`\n+        // implements `Drop`.\n+        let diagnostic;\n+        unsafe {\n+            diagnostic = ::std::ptr::read(&self.diagnostic);\n+            ::std::mem::forget(self);\n+        };\n+        buffered_diagnostics.push(diagnostic);\n+    }\n+\n     pub fn is_error(&self) -> bool {\n         match self.level {\n             Level::Bug |"}, {"sha": "9e822d28056de25425dfd0e845ef7c6f8cdc8a8d", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -58,17 +58,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 Some(name) => format!(\"`{}`\", name),\n                 None => \"value\".to_owned(),\n             };\n-            self.tcx\n+            let mut err = self.tcx\n                 .cannot_act_on_uninitialized_variable(\n                     span,\n                     desired_action.as_noun(),\n                     &self\n                         .describe_place_with_options(place, IncludingDowncast(true))\n                         .unwrap_or(\"_\".to_owned()),\n                     Origin::Mir,\n-                )\n-                .span_label(span, format!(\"use of possibly uninitialized {}\", item_msg))\n-                .emit();\n+                );\n+            err.span_label(span, format!(\"use of possibly uninitialized {}\", item_msg));\n+            err.buffer(&mut self.errors_buffer);\n         } else {\n             let msg = \"\"; //FIXME: add \"partially \" or \"collaterally \"\n \n@@ -143,7 +143,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            err.emit();\n+            err.buffer(&mut self.errors_buffer);\n         }\n     }\n \n@@ -173,7 +173,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n         self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     pub(super) fn report_use_while_mutably_borrowed(\n@@ -194,8 +194,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     /// Finds the span of arguments of a closure (within `maybe_closure_span`) and its usage of\n@@ -391,7 +390,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         self.explain_why_borrow_contains_point(context, issued_borrow, None, &mut err);\n \n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     pub(super) fn report_borrowed_value_does_not_live_long_enough(\n@@ -513,7 +512,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             format!(\"`{}` dropped here while still borrowed\", name),\n         );\n         self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     fn report_scoped_temporary_value_does_not_live_long_enough(\n@@ -535,7 +534,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n         err.note(\"consider using a `let` binding to increase its lifetime\");\n         self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     fn report_unscoped_local_value_does_not_live_long_enough(\n@@ -563,7 +562,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.span_label(drop_span, \"borrowed value only lives until here\");\n \n         self.explain_why_borrow_contains_point(context, borrow, kind_place, &mut err);\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     fn report_unscoped_temporary_value_does_not_live_long_enough(\n@@ -589,7 +588,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.span_label(drop_span, \"temporary value only lives until here\");\n \n         self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     pub(super) fn report_illegal_mutation_of_borrowed(\n@@ -608,7 +607,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         self.explain_why_borrow_contains_point(context, loan, None, &mut err);\n \n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     /// Reports an illegal reassignment; for example, an assignment to\n@@ -679,7 +678,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n         err.span_label(span, msg);\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n }\n "}, {"sha": "08500efe8efed55025c44acc62e8f49876a221d9", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -23,6 +23,7 @@ use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n \n+use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -148,6 +149,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let mir = &mir; // no further changes\n     let location_table = &LocationTable::new(mir);\n \n+    let mut errors_buffer = Vec::new();\n     let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<MoveError<'tcx>>>) =\n         match MoveData::gather_moves(mir, tcx) {\n             Ok(move_data) => (move_data, None),\n@@ -214,6 +216,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &mut flow_inits,\n         &mdpe.move_data,\n         &borrow_set,\n+        &mut errors_buffer,\n     );\n     let regioncx = Rc::new(regioncx);\n \n@@ -252,6 +255,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         access_place_error_reported: FxHashSet(),\n         reservation_error_reported: FxHashSet(),\n         moved_error_reported: FxHashSet(),\n+        errors_buffer,\n         nonlexical_regioncx: regioncx,\n         used_mut: FxHashSet(),\n         used_mut_upvars: SmallVec::new(),\n@@ -287,10 +291,12 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n \n+    let used_mut = mbcx.used_mut;\n+\n     for local in mbcx\n         .mir\n         .mut_vars_and_args_iter()\n-        .filter(|local| !mbcx.used_mut.contains(local))\n+        .filter(|local| !used_mut.contains(local))\n     {\n         if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.source_scope_local_data {\n             let local_decl = &mbcx.mir.local_decls[local];\n@@ -311,16 +317,22 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             let span = local_decl.source_info.span;\n             let mut_span = tcx.sess.codemap().span_until_non_whitespace(span);\n \n-            tcx.struct_span_lint_node(\n+            let mut err = tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n                 vsi[local_decl.source_info.scope].lint_root,\n                 span,\n                 \"variable does not need to be mutable\",\n-            ).span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned())\n-                .emit();\n+            );\n+            err.span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned());\n+\n+            err.buffer(&mut mbcx.errors_buffer);\n         }\n     }\n \n+    for diag in mbcx.errors_buffer.drain(..) {\n+        DiagnosticBuilder::new_diagnostic(mbcx.tcx.sess.diagnostic(), diag).emit();\n+    }\n+\n     let result = BorrowCheckResult {\n         closure_requirements: opt_closure_req,\n         used_mut_upvars: mbcx.used_mut_upvars,\n@@ -367,6 +379,8 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     /// This field keeps track of errors reported in the checking of moved variables,\n     /// so that we don't report seemingly duplicate errors.\n     moved_error_reported: FxHashSet<Place<'tcx>>,\n+    /// Errors to be reported buffer\n+    errors_buffer: Vec<Diagnostic>,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n     /// Used for the warning issued by an unused mutable local variable.\n     used_mut: FxHashSet<Local>,\n@@ -1353,13 +1367,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         debug!(\"check_for_local_borrow({:?})\", borrow);\n \n         if borrow_of_local_data(&borrow.borrowed_place) {\n-            self.tcx\n+            let err = self.tcx\n                 .cannot_borrow_across_generator_yield(\n                     self.retrieve_borrow_span(borrow),\n                     yield_span,\n                     Origin::Mir,\n-                )\n-                .emit();\n+                );\n+\n+            err.buffer(&mut self.errors_buffer);\n         }\n     }\n "}, {"sha": "eacdbe8e9455ea6473422abbdf2e7b8681709f98", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -59,7 +59,7 @@ enum GroupedMoveError<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n-    pub(crate) fn report_move_errors(&self, move_errors: Vec<MoveError<'tcx>>) {\n+    pub(crate) fn report_move_errors(&mut self, move_errors: Vec<MoveError<'tcx>>) {\n         let grouped_errors = self.group_move_errors(move_errors);\n         for error in grouped_errors {\n             self.report(error);\n@@ -218,7 +218,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         };\n     }\n \n-    fn report(&self, error: GroupedMoveError<'tcx>) {\n+    fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n             let (span, kind): (Span, &IllegalMoveOriginKind) = match error {\n                 GroupedMoveError::MovesFromMatchPlace { span, ref kind, .. }\n@@ -286,7 +286,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         self.add_move_hints(error, &mut err, err_span);\n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     fn add_move_hints("}, {"sha": "760d0a91b795c910a34770fec591052d9c55a21f", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -378,7 +378,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        err.emit();\n+        err.buffer(&mut self.errors_buffer);\n     }\n \n     // Does this place refer to what the user sees as an upvar"}, {"sha": "b8b38b583195e3e6c107ce85f1cfe04ac6356ddf", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -23,6 +23,7 @@ use rustc::infer::InferCtxt;\n use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc::util::nodemap::FxHashMap;\n+use rustc_errors::Diagnostic;\n use std::collections::BTreeSet;\n use std::fmt::Debug;\n use std::env;\n@@ -91,6 +92,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'cx, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n+    errors_buffer: &mut Vec<Diagnostic>,\n ) -> (\n     RegionInferenceContext<'tcx>,\n     Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n@@ -190,7 +192,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     });\n \n     // Solve the region constraints.\n-    let closure_region_requirements = regioncx.solve(infcx, &mir, def_id);\n+    let closure_region_requirements = regioncx.solve(infcx, &mir, def_id, errors_buffer);\n \n     // Dump MIR results into a file, if that is enabled. This let us\n     // write unit-tests, as well as helping with debugging.\n@@ -205,7 +207,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n \n     // We also have a `#[rustc_nll]` annotation that causes us to dump\n     // information\n-    dump_annotation(infcx, &mir, def_id, &regioncx, &closure_region_requirements);\n+    dump_annotation(infcx, &mir, def_id, &regioncx, &closure_region_requirements, errors_buffer);\n \n     (regioncx, polonius_output, closure_region_requirements)\n }\n@@ -323,6 +325,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n     mir_def_id: DefId,\n     regioncx: &RegionInferenceContext,\n     closure_region_requirements: &Option<ClosureRegionRequirements>,\n+    errors_buffer: &mut Vec<Diagnostic>,\n ) {\n     let tcx = infcx.tcx;\n     let base_def_id = tcx.closure_base_def_id(mir_def_id);\n@@ -357,14 +360,15 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n             Ok(())\n         }).unwrap();\n \n-        err.emit();\n+        err.buffer(errors_buffer);\n     } else {\n         let mut err = tcx\n             .sess\n             .diagnostic()\n             .span_note_diag(mir.span, \"No external requirements\");\n         regioncx.annotate(&mut err);\n-        err.emit();\n+\n+        err.buffer(errors_buffer);\n     }\n }\n "}, {"sha": "131e1defc1f9e47fd35bca7591e99b1062b82259", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -18,6 +18,7 @@ use rustc::mir::{self, Location, Mir, Place, Rvalue, StatementKind, TerminatorKi\n use rustc::ty::RegionVid;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_errors::Diagnostic;\n use std::fmt;\n use syntax_pos::Span;\n \n@@ -199,6 +200,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr: RegionVid,\n         outlived_fr: RegionVid,\n         blame_span: Span,\n+        errors_buffer: &mut Vec<Diagnostic>,\n     ) {\n         debug!(\"report_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n@@ -247,9 +249,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         match category {\n             ConstraintCategory::AssignmentToUpvar |\n             ConstraintCategory::CallArgumentToUpvar =>\n-                self.report_closure_error(mir, infcx, mir_def_id, fr, outlived_fr, category, span),\n+                self.report_closure_error(\n+                    mir, infcx, mir_def_id, fr, outlived_fr, category, span, errors_buffer),\n             _ =>\n-                self.report_general_error(mir, infcx, mir_def_id, fr, outlived_fr, category, span),\n+                self.report_general_error(\n+                    mir, infcx, mir_def_id, fr, outlived_fr, category, span, errors_buffer),\n         }\n     }\n \n@@ -262,18 +266,19 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         outlived_fr: RegionVid,\n         category: &ConstraintCategory,\n         span: &Span,\n+        errors_buffer: &mut Vec<Diagnostic>,\n     ) {\n         let fr_name_and_span  = self.get_var_name_and_span_for_region(\n             infcx.tcx, mir, fr);\n         let outlived_fr_name_and_span = self.get_var_name_and_span_for_region(\n             infcx.tcx, mir,outlived_fr);\n \n         if fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none() {\n-            return self.report_general_error(mir, infcx, mir_def_id, fr, outlived_fr, category,\n-                                             span);\n+            return self.report_general_error(\n+                mir, infcx, mir_def_id, fr, outlived_fr, category, span, errors_buffer);\n         }\n \n-        let diag = &mut infcx.tcx.sess.struct_span_err(\n+        let mut diag = infcx.tcx.sess.struct_span_err(\n             *span, &format!(\"borrowed data escapes outside of closure\"),\n         );\n \n@@ -297,7 +302,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         }\n \n-        diag.emit();\n+        diag.buffer(errors_buffer);\n     }\n \n     fn report_general_error(\n@@ -309,23 +314,24 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         outlived_fr: RegionVid,\n         category: &ConstraintCategory,\n         span: &Span,\n+        errors_buffer: &mut Vec<Diagnostic>,\n     ) {\n-        let diag = &mut infcx.tcx.sess.struct_span_err(\n+        let mut diag = infcx.tcx.sess.struct_span_err(\n             *span, &format!(\"unsatisfied lifetime constraints\"), // FIXME\n         );\n \n         let counter = &mut 1;\n         let fr_name = self.give_region_a_name(\n-            infcx.tcx, mir, mir_def_id, fr, counter, diag);\n+            infcx.tcx, mir, mir_def_id, fr, counter, &mut diag);\n         let outlived_fr_name = self.give_region_a_name(\n-            infcx.tcx, mir, mir_def_id, outlived_fr, counter, diag);\n+            infcx.tcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n \n         diag.span_label(*span, format!(\n             \"{} requires that `{}` must outlive `{}`\",\n             category, fr_name, outlived_fr_name,\n         ));\n \n-        diag.emit();\n+        diag.buffer(errors_buffer);\n     }\n \n     // Find some constraint `X: Y` where:"}, {"sha": "37df311805edc47047206d649fe5ea11b1b2f0bf", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3e0aa57190db4519d4e59ab606f685c21bfc7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=3d3e0aa57190db4519d4e59ab606f685c21bfc7f", "patch": "@@ -30,6 +30,7 @@ use rustc::util::common;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_set::{IdxSet, IdxSetBuf};\n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_errors::Diagnostic;\n \n use std::rc::Rc;\n \n@@ -360,11 +361,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n+        errors_buffer: &mut Vec<Diagnostic>,\n     ) -> Option<ClosureRegionRequirements<'gcx>> {\n         common::time(\n             infcx.tcx.sess,\n             &format!(\"solve_nll_region_constraints({:?})\", mir_def_id),\n-            || self.solve_inner(infcx, mir, mir_def_id),\n+            || self.solve_inner(infcx, mir, mir_def_id, errors_buffer),\n         )\n     }\n \n@@ -373,6 +375,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n+        errors_buffer: &mut Vec<Diagnostic>,\n     ) -> Option<ClosureRegionRequirements<'gcx>> {\n         self.propagate_constraints(mir);\n \n@@ -389,7 +392,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         self.check_type_tests(infcx, mir, mir_def_id, outlives_requirements.as_mut());\n \n-        self.check_universal_regions(infcx, mir, mir_def_id, outlives_requirements.as_mut());\n+        self.check_universal_regions(\n+            infcx, mir, mir_def_id, outlives_requirements.as_mut(), errors_buffer);\n \n         let outlives_requirements = outlives_requirements.unwrap_or(vec![]);\n \n@@ -834,6 +838,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n+        errors_buffer: &mut Vec<Diagnostic>,\n     ) {\n         // The universal regions are always found in a prefix of the\n         // full list.\n@@ -851,6 +856,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 mir_def_id,\n                 fr,\n                 &mut propagated_outlives_requirements,\n+                errors_buffer,\n             );\n         }\n     }\n@@ -870,6 +876,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         longer_fr: RegionVid,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n+        errors_buffer: &mut Vec<Diagnostic>,\n     ) {\n         debug!(\"check_universal_region(fr={:?})\", longer_fr);\n \n@@ -924,7 +931,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // Note: in this case, we use the unapproximated regions\n             // to report the error. This gives better error messages\n             // in some cases.\n-            self.report_error(mir, infcx, mir_def_id, longer_fr, shorter_fr, blame_span);\n+            self.report_error(\n+                mir, infcx, mir_def_id, longer_fr, shorter_fr, blame_span, errors_buffer);\n         }\n     }\n }"}]}