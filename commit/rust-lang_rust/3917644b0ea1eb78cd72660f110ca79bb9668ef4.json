{"sha": "3917644b0ea1eb78cd72660f110ca79bb9668ef4", "node_id": "C_kwDOAAsO6NoAKDM5MTc2NDRiMGVhMWViNzhjZDcyNjYwZjExMGNhNzliYjk2NjhlZjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-27T13:32:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-27T13:32:41Z"}, "message": "Rollup merge of #109418 - rohaquinlop:108240-rename-native.rs-to-llvm.rs, r=Mark-Simulacrum\n\nRename 'src/bootstrap/native.rs' to llvm.rs\n\nFixed #108240\n\nRenamed 'native.rs' to 'llvm.rs', also moved `TestHelpers` to `test.rs`. Replaced all the `native.rs` occurrences at `src/bootstrap` files to `llvm.rs`", "tree": {"sha": "6384e9f55aae479ccf90fcfba8f8681c43fd3da2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6384e9f55aae479ccf90fcfba8f8681c43fd3da2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3917644b0ea1eb78cd72660f110ca79bb9668ef4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkIZr5CRBK7hj4Ov3rIwAAwxYIAKlakEFusntk3gimEPBtlMY2\nf0nOVnSxyouO8c515D/yg0j7ghfT4GZ/oOY6rteJWKFHe7eO3qNfSAf06WHeoN+T\ncKGN+dH21Rzv4PV67u8N4a2qufmkbnvkGnxUvYap+sTTEI+niPZ5eRzCA37qk0Ye\nnK2RGcWO6GJ9O5mCWRlAeWx5wBgjmHvmrlNPzuygo/p5CRi2qPro31OMNmb9/JdF\nOBbG8Ys8Ufvr2/X6t2mr+nVHv2wSLuV4/e1XFGdZ2ppBeVARKT6x0B+jWfddWmuC\nRZVmeJbVvYwAx1sz6OSF8xAiEmL53WKbYRwS8zdrYOZtv6JGNzBDJCHoM6Xpx1M=\n=U60l\n-----END PGP SIGNATURE-----\n", "payload": "tree 6384e9f55aae479ccf90fcfba8f8681c43fd3da2\nparent 84a7540a83040cc25411d6b7387657aa002df938\nparent 291ddb85fd5d1499f944021db1f698613a068b72\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679923961 +0200\ncommitter GitHub <noreply@github.com> 1679923961 +0200\n\nRollup merge of #109418 - rohaquinlop:108240-rename-native.rs-to-llvm.rs, r=Mark-Simulacrum\n\nRename 'src/bootstrap/native.rs' to llvm.rs\n\nFixed #108240\n\nRenamed 'native.rs' to 'llvm.rs', also moved `TestHelpers` to `test.rs`. Replaced all the `native.rs` occurrences at `src/bootstrap` files to `llvm.rs`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3917644b0ea1eb78cd72660f110ca79bb9668ef4", "html_url": "https://github.com/rust-lang/rust/commit/3917644b0ea1eb78cd72660f110ca79bb9668ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3917644b0ea1eb78cd72660f110ca79bb9668ef4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a7540a83040cc25411d6b7387657aa002df938", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a7540a83040cc25411d6b7387657aa002df938", "html_url": "https://github.com/rust-lang/rust/commit/84a7540a83040cc25411d6b7387657aa002df938"}, {"sha": "291ddb85fd5d1499f944021db1f698613a068b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/291ddb85fd5d1499f944021db1f698613a068b72", "html_url": "https://github.com/rust-lang/rust/commit/291ddb85fd5d1499f944021db1f698613a068b72"}], "stats": {"total": 202, "additions": 101, "deletions": 101}, "files": [{"sha": "4d528a767e43f1b87b2d2181316e5ea00f358a5e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -16,7 +16,7 @@ use crate::config::{SplitDebuginfo, TargetSelection};\n use crate::doc;\n use crate::flags::{Color, Subcommand};\n use crate::install;\n-use crate::native;\n+use crate::llvm;\n use crate::run;\n use crate::setup;\n use crate::test;\n@@ -636,13 +636,13 @@ impl<'a> Builder<'a> {\n                 tool::Rustdoc,\n                 tool::Clippy,\n                 tool::CargoClippy,\n-                native::Llvm,\n-                native::Sanitizers,\n+                llvm::Llvm,\n+                llvm::Sanitizers,\n                 tool::Rustfmt,\n                 tool::Miri,\n                 tool::CargoMiri,\n-                native::Lld,\n-                native::CrtBeginEnd\n+                llvm::Lld,\n+                llvm::CrtBeginEnd\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,\n@@ -1101,7 +1101,7 @@ impl<'a> Builder<'a> {\n     /// check build or dry-run, where there's no need to build all of LLVM.\n     fn llvm_config(&self, target: TargetSelection) -> Option<PathBuf> {\n         if self.config.llvm_enabled() && self.kind != Kind::Check && !self.config.dry_run() {\n-            let native::LlvmResult { llvm_config, .. } = self.ensure(native::Llvm { target });\n+            let llvm::LlvmResult { llvm_config, .. } = self.ensure(llvm::Llvm { target });\n             if llvm_config.is_file() {\n                 return Some(llvm_config);\n             }\n@@ -1227,7 +1227,7 @@ impl<'a> Builder<'a> {\n             // rustc_llvm. But if LLVM is stale, that'll be a tiny amount\n             // of work comparatively, and we'd likely need to rebuild it anyway,\n             // so that's okay.\n-            if crate::native::prebuilt_llvm_config(self, target).is_err() {\n+            if crate::llvm::prebuilt_llvm_config(self, target).is_err() {\n                 cargo.env(\"RUST_CHECK\", \"1\");\n             }\n         }"}, {"sha": "67bd573a855ca37cfbd438170f7348ff520f8cfd", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -24,7 +24,7 @@ use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::config::{LlvmLibunwind, RustcLto, TargetSelection};\n use crate::dist;\n-use crate::native;\n+use crate::llvm;\n use crate::tool::SourceType;\n use crate::util::get_clang_cl_resource_dir;\n use crate::util::{exe, is_debug_info, is_dylib, output, symlink_dir, t, up_to_date};\n@@ -191,7 +191,7 @@ fn copy_and_stamp(\n }\n \n fn copy_llvm_libunwind(builder: &Builder<'_>, target: TargetSelection, libdir: &Path) -> PathBuf {\n-    let libunwind_path = builder.ensure(native::Libunwind { target });\n+    let libunwind_path = builder.ensure(llvm::Libunwind { target });\n     let libunwind_source = libunwind_path.join(\"libunwind.a\");\n     let libunwind_target = libdir.join(\"libunwind.a\");\n     builder.copy(&libunwind_source, &libunwind_target);\n@@ -266,7 +266,7 @@ fn copy_self_contained_objects(\n                 DependencyType::TargetSelfContained,\n             );\n         }\n-        let crt_path = builder.ensure(native::CrtBeginEnd { target });\n+        let crt_path = builder.ensure(llvm::CrtBeginEnd { target });\n         for &obj in &[\"crtbegin.o\", \"crtbeginS.o\", \"crtend.o\", \"crtendS.o\"] {\n             let src = crt_path.join(obj);\n             let target = libdir_self_contained.join(obj);\n@@ -474,7 +474,7 @@ fn copy_sanitizers(\n     compiler: &Compiler,\n     target: TargetSelection,\n ) -> Vec<PathBuf> {\n-    let runtimes: Vec<native::SanitizerRuntime> = builder.ensure(native::Sanitizers { target });\n+    let runtimes: Vec<llvm::SanitizerRuntime> = builder.ensure(llvm::Sanitizers { target });\n \n     if builder.config.dry_run() {\n         return Vec::new();\n@@ -876,12 +876,12 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     // busting caches (e.g. like #71152).\n     if builder.config.llvm_enabled()\n         && (builder.kind != Kind::Check\n-            || crate::native::prebuilt_llvm_config(builder, target).is_ok())\n+            || crate::llvm::prebuilt_llvm_config(builder, target).is_ok())\n     {\n         if builder.is_rust_llvm(target) {\n             cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n         }\n-        let native::LlvmResult { llvm_config, .. } = builder.ensure(native::Llvm { target });\n+        let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n         cargo.env(\"LLVM_CONFIG\", &llvm_config);\n         if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n             cargo.env(\"CFG_LLVM_ROOT\", s);\n@@ -1359,7 +1359,7 @@ impl Step for Assemble {\n         }\n \n         let lld_install = if builder.config.lld_enabled {\n-            Some(builder.ensure(native::Lld { target: target_compiler.host }))\n+            Some(builder.ensure(llvm::Lld { target: target_compiler.host }))\n         } else {\n             None\n         };\n@@ -1423,8 +1423,8 @@ impl Step for Assemble {\n         }\n \n         if builder.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {\n-            let native::LlvmResult { llvm_config, .. } =\n-                builder.ensure(native::Llvm { target: target_compiler.host });\n+            let llvm::LlvmResult { llvm_config, .. } =\n+                builder.ensure(llvm::Llvm { target: target_compiler.host });\n             if !builder.config.dry_run() {\n                 let llvm_bin_dir = output(Command::new(llvm_config).arg(\"--bindir\"));\n                 let llvm_bin_dir = Path::new(llvm_bin_dir.trim());"}, {"sha": "0eba18c3a63cc3ef2e9537afc085c4b53c9975ee", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -1207,11 +1207,11 @@ impl Config {\n             config.llvm_from_ci = match llvm.download_ci_llvm {\n                 Some(StringOrBool::String(s)) => {\n                     assert!(s == \"if-available\", \"unknown option `{}` for download-ci-llvm\", s);\n-                    crate::native::is_ci_llvm_available(&config, asserts)\n+                    crate::llvm::is_ci_llvm_available(&config, asserts)\n                 }\n                 Some(StringOrBool::Bool(b)) => b,\n                 None => {\n-                    config.channel == \"dev\" && crate::native::is_ci_llvm_available(&config, asserts)\n+                    config.channel == \"dev\" && crate::llvm::is_ci_llvm_available(&config, asserts)\n                 }\n             };\n \n@@ -1254,7 +1254,7 @@ impl Config {\n             }\n         } else {\n             config.llvm_from_ci =\n-                config.channel == \"dev\" && crate::native::is_ci_llvm_available(&config, false);\n+                config.channel == \"dev\" && crate::llvm::is_ci_llvm_available(&config, false);\n         }\n \n         if let Some(t) = toml.target {"}, {"sha": "5cea143e0a7870e4d69b242e74799129c1fcc2f2", "filename": "src/bootstrap/config/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig%2Ftests.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -11,7 +11,7 @@ fn parse(config: &str) -> Config {\n \n #[test]\n fn download_ci_llvm() {\n-    if crate::native::is_ci_llvm_modified(&parse(\"\")) {\n+    if crate::llvm::is_ci_llvm_modified(&parse(\"\")) {\n         eprintln!(\"Detected LLVM as non-available: running in CI and modified LLVM in this change\");\n         return;\n     }"}, {"sha": "2ce54d9a3b43fe38cd942b3fe7fe95dd1329557f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -27,7 +27,7 @@ use crate::channel;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::doc::DocumentationFormat;\n-use crate::native;\n+use crate::llvm;\n use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, output, t, timeit};\n@@ -1965,8 +1965,8 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n             builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n         !builder.config.dry_run()\n-    } else if let Ok(native::LlvmResult { llvm_config, .. }) =\n-        native::prebuilt_llvm_config(builder, target)\n+    } else if let Ok(llvm::LlvmResult { llvm_config, .. }) =\n+        llvm::prebuilt_llvm_config(builder, target)\n     {\n         let mut cmd = Command::new(llvm_config);\n         cmd.arg(\"--libfiles\");\n@@ -2154,7 +2154,7 @@ impl Step for LlvmTools {\n             }\n         }\n \n-        builder.ensure(crate::native::Llvm { target });\n+        builder.ensure(crate::llvm::Llvm { target });\n \n         let mut tarball = Tarball::new(builder, \"llvm-tools\", &target.triple);\n         tarball.set_overlay(OverlayKind::LLVM);\n@@ -2213,10 +2213,10 @@ impl Step for RustDev {\n         let mut tarball = Tarball::new(builder, \"rust-dev\", &target.triple);\n         tarball.set_overlay(OverlayKind::LLVM);\n \n-        builder.ensure(crate::native::Llvm { target });\n+        builder.ensure(crate::llvm::Llvm { target });\n \n         // We want to package `lld` to use it with `download-ci-llvm`.\n-        builder.ensure(crate::native::Lld { target });\n+        builder.ensure(crate::llvm::Lld { target });\n \n         let src_bindir = builder.llvm_out(target).join(\"bin\");\n         // If updating this list, you likely want to change"}, {"sha": "8fbc034965a6c9c19a8cbb4675956175c7b7b601", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -12,7 +12,7 @@ use xz2::bufread::XzDecoder;\n \n use crate::{\n     config::RustfmtMetadata,\n-    native::detect_llvm_sha,\n+    llvm::detect_llvm_sha,\n     t,\n     util::{check_run, exe, program_out_of_date, try_run},\n     Config,"}, {"sha": "20b92b294fec5f6dc17cb5e04d2791cfc0f58a49", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -53,8 +53,8 @@ mod download;\n mod flags;\n mod format;\n mod install;\n+mod llvm;\n mod metadata;\n-mod native;\n mod render_tests;\n mod run;\n mod sanity;"}, {"sha": "de06f8ca8c0bb32543f1584b2d699a61942c00f5", "filename": "src/bootstrap/llvm.rs", "status": "renamed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -869,71 +869,6 @@ impl Step for Lld {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct TestHelpers {\n-    pub target: TargetSelection,\n-}\n-\n-impl Step for TestHelpers {\n-    type Output = ();\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"tests/auxiliary/rust_test_helpers.c\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(TestHelpers { target: run.target })\n-    }\n-\n-    /// Compiles the `rust_test_helpers.c` library which we used in various\n-    /// `run-pass` tests for ABI testing.\n-    fn run(self, builder: &Builder<'_>) {\n-        if builder.config.dry_run() {\n-            return;\n-        }\n-        // The x86_64-fortanix-unknown-sgx target doesn't have a working C\n-        // toolchain. However, some x86_64 ELF objects can be linked\n-        // without issues. Use this hack to compile the test helpers.\n-        let target = if self.target == \"x86_64-fortanix-unknown-sgx\" {\n-            TargetSelection::from_user(\"x86_64-unknown-linux-gnu\")\n-        } else {\n-            self.target\n-        };\n-        let dst = builder.test_helpers_out(target);\n-        let src = builder.src.join(\"tests/auxiliary/rust_test_helpers.c\");\n-        if up_to_date(&src, &dst.join(\"librust_test_helpers.a\")) {\n-            return;\n-        }\n-\n-        builder.info(\"Building test helpers\");\n-        t!(fs::create_dir_all(&dst));\n-        let mut cfg = cc::Build::new();\n-        // FIXME: Workaround for https://github.com/emscripten-core/emscripten/issues/9013\n-        if target.contains(\"emscripten\") {\n-            cfg.pic(false);\n-        }\n-\n-        // We may have found various cross-compilers a little differently due to our\n-        // extra configuration, so inform cc of these compilers. Note, though, that\n-        // on MSVC we still need cc's detection of env vars (ugh).\n-        if !target.contains(\"msvc\") {\n-            if let Some(ar) = builder.ar(target) {\n-                cfg.archiver(ar);\n-            }\n-            cfg.compiler(builder.cc(target));\n-        }\n-        cfg.cargo_metadata(false)\n-            .out_dir(&dst)\n-            .target(&target.triple)\n-            .host(&builder.config.build.triple)\n-            .opt_level(0)\n-            .warnings(false)\n-            .debug(false)\n-            .file(builder.src.join(\"tests/auxiliary/rust_test_helpers.c\"))\n-            .compile(\"rust_test_helpers\");\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Sanitizers {\n     pub target: TargetSelection,", "previous_filename": "src/bootstrap/native.rs"}, {"sha": "92a7603a9df6b83497fc05ccce488fce2d6e9fe2", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -19,11 +19,11 @@ use crate::config::TargetSelection;\n use crate::dist;\n use crate::doc::DocumentationFormat;\n use crate::flags::Subcommand;\n-use crate::native;\n+use crate::llvm;\n use crate::render_tests::add_flags_and_try_run_tests;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n-use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t};\n+use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t, up_to_date};\n use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/local/tmp/work\";\n@@ -1434,11 +1434,11 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         builder.ensure(compile::Std::new(compiler, compiler.host));\n \n         // Also provide `rust_test_helpers` for the host.\n-        builder.ensure(native::TestHelpers { target: compiler.host });\n+        builder.ensure(TestHelpers { target: compiler.host });\n \n         // As well as the target, except for plain wasm32, which can't build it\n         if !target.contains(\"wasm\") || target.contains(\"emscripten\") {\n-            builder.ensure(native::TestHelpers { target });\n+            builder.ensure(TestHelpers { target });\n         }\n \n         builder.ensure(RemoteCopyLibs { compiler, target });\n@@ -1625,8 +1625,8 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         let mut llvm_components_passed = false;\n         let mut copts_passed = false;\n         if builder.config.llvm_enabled() {\n-            let native::LlvmResult { llvm_config, .. } =\n-                builder.ensure(native::Llvm { target: builder.config.build });\n+            let llvm::LlvmResult { llvm_config, .. } =\n+                builder.ensure(llvm::Llvm { target: builder.config.build });\n             if !builder.config.dry_run() {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n@@ -1664,7 +1664,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n                 // If LLD is available, add it to the PATH\n                 if builder.config.lld_enabled {\n                     let lld_install_root =\n-                        builder.ensure(native::Lld { target: builder.config.build });\n+                        builder.ensure(llvm::Lld { target: builder.config.build });\n \n                     let lld_bin_path = lld_install_root.join(\"bin\");\n \n@@ -2747,3 +2747,68 @@ impl Step for RustInstaller {\n         run.builder.ensure(Self);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct TestHelpers {\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for TestHelpers {\n+    type Output = ();\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"tests/auxiliary/rust_test_helpers.c\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(TestHelpers { target: run.target })\n+    }\n+\n+    /// Compiles the `rust_test_helpers.c` library which we used in various\n+    /// `run-pass` tests for ABI testing.\n+    fn run(self, builder: &Builder<'_>) {\n+        if builder.config.dry_run() {\n+            return;\n+        }\n+        // The x86_64-fortanix-unknown-sgx target doesn't have a working C\n+        // toolchain. However, some x86_64 ELF objects can be linked\n+        // without issues. Use this hack to compile the test helpers.\n+        let target = if self.target == \"x86_64-fortanix-unknown-sgx\" {\n+            TargetSelection::from_user(\"x86_64-unknown-linux-gnu\")\n+        } else {\n+            self.target\n+        };\n+        let dst = builder.test_helpers_out(target);\n+        let src = builder.src.join(\"tests/auxiliary/rust_test_helpers.c\");\n+        if up_to_date(&src, &dst.join(\"librust_test_helpers.a\")) {\n+            return;\n+        }\n+\n+        builder.info(\"Building test helpers\");\n+        t!(fs::create_dir_all(&dst));\n+        let mut cfg = cc::Build::new();\n+        // FIXME: Workaround for https://github.com/emscripten-core/emscripten/issues/9013\n+        if target.contains(\"emscripten\") {\n+            cfg.pic(false);\n+        }\n+\n+        // We may have found various cross-compilers a little differently due to our\n+        // extra configuration, so inform cc of these compilers. Note, though, that\n+        // on MSVC we still need cc's detection of env vars (ugh).\n+        if !target.contains(\"msvc\") {\n+            if let Some(ar) = builder.ar(target) {\n+                cfg.archiver(ar);\n+            }\n+            cfg.compiler(builder.cc(target));\n+        }\n+        cfg.cargo_metadata(false)\n+            .out_dir(&dst)\n+            .target(&target.triple)\n+            .host(&builder.config.build.triple)\n+            .opt_level(0)\n+            .warnings(false)\n+            .debug(false)\n+            .file(builder.src.join(\"tests/auxiliary/rust_test_helpers.c\"))\n+            .compile(\"rust_test_helpers\");\n+    }\n+}"}, {"sha": "7cd5e88f6a28574f3db8f80be2e0d82bdded69cb", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/3917644b0ea1eb78cd72660f110ca79bb9668ef4/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=3917644b0ea1eb78cd72660f110ca79bb9668ef4", "patch": "@@ -727,7 +727,7 @@ def record_metrics(pipeline: Pipeline, timer: Timer):\n     metrics = load_last_metrics(pipeline.metrics_path())\n     if metrics is None:\n         return\n-    llvm_steps = tuple(metrics.find_all_by_type(\"bootstrap::native::Llvm\"))\n+    llvm_steps = tuple(metrics.find_all_by_type(\"bootstrap::llvm::Llvm\"))\n     assert len(llvm_steps) > 0\n     llvm_duration = sum(step.duration for step in llvm_steps)\n "}]}