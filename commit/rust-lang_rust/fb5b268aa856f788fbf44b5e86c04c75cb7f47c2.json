{"sha": "fb5b268aa856f788fbf44b5e86c04c75cb7f47c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNWIyNjhhYTg1NmY3ODhmYmY0NGI1ZTg2YzA0Yzc1Y2I3ZjQ3YzI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-17T13:46:08Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-17T15:54:42Z"}, "message": "Pull out a statement that all match arms are executing", "tree": {"sha": "693e02fbec594f2b494ac3f824fcd9e2a8fe7824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693e02fbec594f2b494ac3f824fcd9e2a8fe7824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2", "html_url": "https://github.com/rust-lang/rust/commit/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bff385fdadb999f19afb7b1482df7863034d742", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bff385fdadb999f19afb7b1482df7863034d742", "html_url": "https://github.com/rust-lang/rust/commit/4bff385fdadb999f19afb7b1482df7863034d742"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "96d0563c12d5127faa8d28793b747cedabde3d54", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=fb5b268aa856f788fbf44b5e86c04c75cb7f47c2", "patch": "@@ -771,16 +771,15 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             Cast(kind, ref operand, cast_ty) => {\n                 debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest_ty);\n                 use rustc::mir::CastKind::*;\n+                let src = self.eval_operand(operand)?;\n                 match kind {\n                     Unsize => {\n-                        let src = self.eval_operand(operand)?;\n                         let src_layout = self.layout_of(src.ty)?;\n                         let dst_layout = self.layout_of(dest_ty)?;\n                         self.unsize_into(src.value, src_layout, dest, dst_layout)?;\n                     }\n \n                     Misc => {\n-                        let src = self.eval_operand(operand)?;\n                         if self.type_is_fat_ptr(src.ty) {\n                             match (src.value, self.type_is_fat_ptr(dest_ty)) {\n                                 (Value::ByRef { .. }, _) |\n@@ -840,7 +839,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     }\n \n                     ReifyFnPointer => {\n-                        match self.eval_operand(operand)?.ty.sty {\n+                        match src.ty.sty {\n                             ty::TyFnDef(def_id, substs) => {\n                                 if self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n                                     bug!(\"reifying a fn ptr that requires \\\n@@ -866,7 +865,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     UnsafeFnPointer => {\n                         match dest_ty.sty {\n                             ty::TyFnPtr(_) => {\n-                                let mut src = self.eval_operand(operand)?;\n+                                let mut src = src;\n                                 src.ty = dest_ty;\n                                 self.write_value(src, dest)?;\n                             }\n@@ -875,7 +874,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     }\n \n                     ClosureFnPointer => {\n-                        match self.eval_operand(operand)?.ty.sty {\n+                        match src.ty.sty {\n                             ty::TyClosure(def_id, substs) => {\n                                 let substs = self.tcx.subst_and_normalize_erasing_regions(\n                                     self.substs(),"}]}