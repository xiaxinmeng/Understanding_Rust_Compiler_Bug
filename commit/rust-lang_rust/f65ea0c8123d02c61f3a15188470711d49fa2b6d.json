{"sha": "f65ea0c8123d02c61f3a15188470711d49fa2b6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NWVhMGM4MTIzZDAyYzYxZjNhMTUxODg0NzA3MTFkNDlmYTJiNmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-17T00:49:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-30T03:56:50Z"}, "message": "core: Add extension methods for option", "tree": {"sha": "da9aef6be9d6bfd78aa69c7b05d73b827ebbf6ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da9aef6be9d6bfd78aa69c7b05d73b827ebbf6ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65ea0c8123d02c61f3a15188470711d49fa2b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65ea0c8123d02c61f3a15188470711d49fa2b6d", "html_url": "https://github.com/rust-lang/rust/commit/f65ea0c8123d02c61f3a15188470711d49fa2b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65ea0c8123d02c61f3a15188470711d49fa2b6d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392d3c8d444721b726c3e593651737b989a8df02", "url": "https://api.github.com/repos/rust-lang/rust/commits/392d3c8d444721b726c3e593651737b989a8df02", "html_url": "https://github.com/rust-lang/rust/commit/392d3c8d444721b726c3e593651737b989a8df02"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "cf06ad1b1584dc8369c3d32a20d54854a11646c6", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f65ea0c8123d02c61f3a15188470711d49fa2b6d/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65ea0c8123d02c61f3a15188470711d49fa2b6d/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=f65ea0c8123d02c61f3a15188470711d49fa2b6d", "patch": "@@ -7,6 +7,7 @@ import option = option::option;\n import path = path::path;\n import vec::vec_len;\n import str::extensions;\n+import option::extensions;\n export path, option, some, none, vec_len, unreachable;\n export extensions;\n "}, {"sha": "d89593f14c42d19774ac5be7ccbfcba59ed3156d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f65ea0c8123d02c61f3a15188470711d49fa2b6d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65ea0c8123d02c61f3a15188470711d49fa2b6d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=f65ea0c8123d02c61f3a15188470711d49fa2b6d", "patch": "@@ -87,6 +87,34 @@ fn unwrap<T>(-opt: option<T>) -> T unsafe {\n     ret liberated_value;\n }\n \n+impl extensions<T:copy> for option<T> {\n+    #[doc = \"\n+    Update an optional value by optionally running its content through a\n+    function that returns an option.\n+    \"]\n+    fn chain<U>(f: fn(T) -> option<U>) -> option<U> { chain(self, f) }\n+    #[doc = \"Returns the contained value or a default\"]\n+    fn from_maybe(def: T) -> T { from_maybe(self, def) }\n+    #[doc = \"Applies a function to the contained value or returns a default\"]\n+    fn maybe<U: copy>(def: U, f: fn(T) -> U) -> U { maybe(self, def, f) }\n+    #[doc = \"Performs an operation on the contained value or does nothing\"]\n+    fn may(f: fn(T)) { may(self, f) }\n+    #[doc = \"\n+    Gets the value out of an option\n+\n+    # Failure\n+\n+    Fails if the value equals `none`\n+    \"]\n+    fn get() -> T { get(self) }\n+    #[doc = \"Returns true if the option equals `none`\"]\n+    fn is_none() -> bool { is_none(self) }\n+    #[doc = \"Returns true if the option contains some value\"]\n+    fn is_some() -> bool { is_some(self) }\n+    #[doc = \"Maps a `some` value from one type to another\"]\n+    fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n+}\n+\n #[test]\n fn test_unwrap_ptr() {\n     let x = ~0;"}]}