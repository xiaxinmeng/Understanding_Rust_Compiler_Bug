{"sha": "1ec99179c1ccb4305354d2d4ee503c40adcd714d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzk5MTc5YzFjY2I0MzA1MzU0ZDJkNGVlNTAzYzQwYWRjZDcxNGQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T23:05:26Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-10T21:03:08Z"}, "message": "Add an `into_engine` method to `Analysis`\n\nThis makes it more ergonomic to create a dataflow engine and obviates\nthe need to pick between `new_gen_kill` and `new_generic`.", "tree": {"sha": "4c9de3b00ef68ebdc0a7f47daf01c974e949b179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c9de3b00ef68ebdc0a7f47daf01c974e949b179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec99179c1ccb4305354d2d4ee503c40adcd714d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec99179c1ccb4305354d2d4ee503c40adcd714d", "html_url": "https://github.com/rust-lang/rust/commit/1ec99179c1ccb4305354d2d4ee503c40adcd714d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec99179c1ccb4305354d2d4ee503c40adcd714d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b9d6ebd6808c2ac564cfde1a98793d9f00c9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b9d6ebd6808c2ac564cfde1a98793d9f00c9a3", "html_url": "https://github.com/rust-lang/rust/commit/e2b9d6ebd6808c2ac564cfde1a98793d9f00c9a3"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "ed742143150f749aadf3dd6b1ab68247f3c8eed2", "filename": "src/librustc_mir/dataflow/generic/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ec99179c1ccb4305354d2d4ee503c40adcd714d/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec99179c1ccb4305354d2d4ee503c40adcd714d/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs?ref=1ec99179c1ccb4305354d2d4ee503c40adcd714d", "patch": "@@ -35,6 +35,8 @@\n use std::io;\n \n use rustc::mir::{self, BasicBlock, Location};\n+use rustc::ty::TyCtxt;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::{Idx, IndexVec};\n \n@@ -166,6 +168,22 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n         args: &[mir::Operand<'tcx>],\n         return_place: &mir::Place<'tcx>,\n     );\n+\n+    /// Creates an `Engine` to find the fixpoint for this dataflow problem.\n+    ///\n+    /// This is functionally equivalent to calling the appropriate `Engine` constructor. It should\n+    /// not be overridden. Its purpose is to allow consumers of this API to use method-chaining.\n+    fn into_engine(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        body: &'mir mir::Body<'tcx>,\n+        def_id: DefId,\n+    ) -> Engine<'mir, 'tcx, Self>\n+    where\n+        Self: Sized,\n+    {\n+        Engine::new_generic(tcx, body, def_id, self)\n+    }\n }\n \n /// A gen/kill dataflow problem.\n@@ -272,6 +290,18 @@ where\n     ) {\n         self.call_return_effect(state, block, func, args, return_place);\n     }\n+\n+    fn into_engine(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        body: &'mir mir::Body<'tcx>,\n+        def_id: DefId,\n+    ) -> Engine<'mir, 'tcx, Self>\n+    where\n+        Self: Sized,\n+    {\n+        Engine::new_gen_kill(tcx, body, def_id, self)\n+    }\n }\n \n /// The legal operations for a transfer function in a gen/kill problem."}, {"sha": "aad471c785acc1d07fec4e2f58f4c09409f38ede", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ec99179c1ccb4305354d2d4ee503c40adcd714d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec99179c1ccb4305354d2d4ee503c40adcd714d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=1ec99179c1ccb4305354d2d4ee503c40adcd714d", "patch": "@@ -22,6 +22,7 @@ use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstKind, Item, Qualif};\n use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n use crate::dataflow::{self as old_dataflow, generic as dataflow};\n+use dataflow::Analysis;\n \n pub type IndirectlyMutableResults<'mir, 'tcx> =\n     old_dataflow::DataflowResultsCursor<'mir, 'tcx, IndirectlyMutableLocals<'mir, 'tcx>>;\n@@ -33,10 +34,10 @@ struct QualifCursor<'a, 'mir, 'tcx, Q: Qualif> {\n \n impl<Q: Qualif> QualifCursor<'a, 'mir, 'tcx, Q> {\n     pub fn new(q: Q, item: &'a Item<'mir, 'tcx>) -> Self {\n-        let analysis = FlowSensitiveAnalysis::new(q, item);\n-        let results = dataflow::Engine::new_generic(item.tcx, &item.body, item.def_id, analysis)\n-            .iterate_to_fixpoint();\n-        let cursor = dataflow::ResultsCursor::new(*item.body, results);\n+        let cursor = FlowSensitiveAnalysis::new(q, item)\n+            .into_engine(item.tcx, &item.body, item.def_id)\n+            .iterate_to_fixpoint()\n+            .into_results_cursor(*item.body);\n \n         let mut in_any_value_of_ty = BitSet::new_empty(item.body.local_decls.len());\n         for (local, decl) in item.body.local_decls.iter_enumerated() {"}]}