{"sha": "83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYmViMGExMThmNzUwOGIyYTE4ODhiZmVjZjRlNDY2NDBiOWIzYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-25T22:44:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-25T22:44:39Z"}, "message": "Auto merge of #68546 - JohnTitor:rollup-znuot4b, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #68485 (add a test for #60976)\n - #68498 (Add some type-alias-impl-trait regression tests)\n - #68514 (Use Self instead of self return type)\n - #68534 (Update submodules to rust-lang)\n - #68540 (clean up error codes E0229 and E0261)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0c26e650eec40a1bf8c994e89c98290f0c7d22af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c26e650eec40a1bf8c994e89c98290f0c7d22af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "html_url": "https://github.com/rust-lang/rust/commit/83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3f4e0aab3e36ceb8b83d1e9467514685f6b751", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3f4e0aab3e36ceb8b83d1e9467514685f6b751", "html_url": "https://github.com/rust-lang/rust/commit/6d3f4e0aab3e36ceb8b83d1e9467514685f6b751"}, {"sha": "5774dd053b103f2d169962b2af7a145e14d51211", "url": "https://api.github.com/repos/rust-lang/rust/commits/5774dd053b103f2d169962b2af7a145e14d51211", "html_url": "https://github.com/rust-lang/rust/commit/5774dd053b103f2d169962b2af7a145e14d51211"}], "stats": {"total": 126, "additions": 109, "deletions": 17}, "files": [{"sha": "003e50d0788e4c6efb0d4315556a8c1ce0cf73ef", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -15,13 +15,13 @@\n \turl = https://github.com/rust-lang/book.git\n [submodule \"src/tools/rls\"]\n \tpath = src/tools/rls\n-\turl = https://github.com/rust-lang-nursery/rls.git\n+\turl = https://github.com/rust-lang/rls.git\n [submodule \"src/tools/clippy\"]\n \tpath = src/tools/clippy\n-\turl = https://github.com/rust-lang-nursery/rust-clippy.git\n+\turl = https://github.com/rust-lang/rust-clippy.git\n [submodule \"src/tools/rustfmt\"]\n \tpath = src/tools/rustfmt\n-\turl = https://github.com/rust-lang-nursery/rustfmt.git\n+\turl = https://github.com/rust-lang/rustfmt.git\n [submodule \"src/tools/miri\"]\n \tpath = src/tools/miri\n \turl = https://github.com/rust-lang/miri.git"}, {"sha": "8ba0e422e8f1358820c785bc146882735f2ad012", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n+    pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 if !self.has_fields {\n@@ -330,7 +330,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n+    pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 if self.fields == 0 {\n@@ -492,7 +492,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugSet<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut Self {\n         self.inner.entry(entry);\n         self\n     }\n@@ -521,7 +521,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>\n+    pub fn entries<D, I>(&mut self, entries: I) -> &mut Self\n     where\n         D: fmt::Debug,\n         I: IntoIterator<Item = D>,\n@@ -624,7 +624,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugList<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut Self {\n         self.inner.entry(entry);\n         self\n     }\n@@ -653,7 +653,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugList<'a, 'b>\n+    pub fn entries<D, I>(&mut self, entries: I) -> &mut Self\n     where\n         D: fmt::Debug,\n         I: IntoIterator<Item = D>,\n@@ -760,7 +760,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut Self {\n         self.key(key).value(value)\n     }\n \n@@ -797,7 +797,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[unstable(feature = \"debug_map_key_value\", reason = \"recently added\", issue = \"62482\")]\n-    pub fn key(&mut self, key: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn key(&mut self, key: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             assert!(\n                 !self.has_key,\n@@ -862,7 +862,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[unstable(feature = \"debug_map_key_value\", reason = \"recently added\", issue = \"62482\")]\n-    pub fn value(&mut self, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn value(&mut self, value: &dyn fmt::Debug) -> &mut Self {\n         self.result = self.result.and_then(|_| {\n             assert!(self.has_key, \"attempted to format a map value before its key\");\n \n@@ -908,7 +908,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b>\n+    pub fn entries<K, V, I>(&mut self, entries: I) -> &mut Self\n     where\n         K: fmt::Debug,\n         V: fmt::Debug,"}, {"sha": "a8fab057d43a0ac60498c264a15e088f3c5832cc", "filename": "src/librustc_error_codes/error_codes/E0229.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0229.md", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0229.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0229.md?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -1,5 +1,7 @@\n An associated type binding was done outside of the type parameter declaration\n-and `where` clause. Erroneous code example:\n+and `where` clause.\n+\n+Erroneous code example:\n \n ```compile_fail,E0229\n pub trait Foo {"}, {"sha": "e326843739638ec02b72c477d3dfac9e429f561f", "filename": "src/librustc_error_codes/error_codes/E0261.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0261.md", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0261.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0261.md?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -1,7 +1,6 @@\n-When using a lifetime like `'a` in a type, it must be declared before being\n-used.\n+An undeclared lifetime was used.\n \n-These two examples illustrate the problem:\n+Erroneous code example:\n \n ```compile_fail,E0261\n // error, use of undeclared lifetime name `'a`"}, {"sha": "1c2051e7eaeebef25bdef7008e334b58493be71a", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for issue #57611\n+// Ensures that we don't ICE\n+// FIXME: This should compile, but it currently doesn't\n+\n+#![feature(trait_alias)]\n+#![feature(type_alias_impl_trait)]\n+\n+trait Foo {\n+    type Bar: Baz<Self, Self>;\n+\n+    fn bar(&self) -> Self::Bar;\n+}\n+\n+struct X;\n+\n+impl Foo for X {\n+    type Bar = impl Baz<Self, Self>; //~ ERROR type mismatch in closure arguments\n+    //~^ ERROR type mismatch resolving\n+\n+    fn bar(&self) -> Self::Bar {\n+        |x| x\n+    }\n+}\n+\n+trait Baz<A, B> = Fn(&A) -> &B;\n+\n+fn main() {}"}, {"sha": "f648b7bfc991d947bc10cac690ca628e38cfe907", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -0,0 +1,23 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/issue-57611-trait-alias.rs:17:5\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected signature of `for<'r> fn(&'r X) -> _`\n+...\n+LL |         |x| x\n+   |         ----- found signature of `fn(_) -> _`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-57611-trait-alias.rs:21:9: 21:14] as std::ops::FnOnce<(&'r X,)>>::Output == &'r X`\n+  --> $DIR/issue-57611-trait-alias.rs:17:5\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0271, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "fcab2c7db2605a341fd2be2d2a66e74caed89247", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -0,0 +1,31 @@\n+// Regression test for issue #57807 - ensure\n+// that we properly unify associated types within\n+// a type alias impl trait\n+// check-pass\n+#![feature(type_alias_impl_trait)]\n+\n+trait Bar {\n+    type A;\n+}\n+\n+impl Bar for () {\n+    type A = ();\n+}\n+\n+trait Foo {\n+    type A;\n+    type B: Bar<A = Self::A>;\n+\n+    fn foo() -> Self::B;\n+}\n+\n+impl Foo for () {\n+    type A = ();\n+    type B = impl Bar<A = Self::A>;\n+\n+    fn foo() -> Self::B {\n+        ()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3c7756ef7e679663897c7f63df423a6b941353fb", "filename": "src/test/ui/use/auxiliary/extern-use-primitive-type-lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Fuse%2Fauxiliary%2Fextern-use-primitive-type-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Fuse%2Fauxiliary%2Fextern-use-primitive-type-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fauxiliary%2Fextern-use-primitive-type-lib.rs?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --edition=2018\n+\n+pub use u32;"}, {"sha": "4cd458302a49895e0259cccc398d05fb91b24be9", "filename": "src/test/ui/use/issue-60976-extern-use-primitive-type.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Fuse%2Fissue-60976-extern-use-primitive-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83beb0a118f7508b2a1888bfecf4e46640b9b3c2/src%2Ftest%2Fui%2Fuse%2Fissue-60976-extern-use-primitive-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fissue-60976-extern-use-primitive-type.rs?ref=83beb0a118f7508b2a1888bfecf4e46640b9b3c2", "patch": "@@ -0,0 +1,7 @@\n+// Regression test for #60976: ICE (with <=1.36.0) when another file had `use <primitive_type>;`.\n+// check-pass\n+// aux-build:extern-use-primitive-type-lib.rs\n+\n+extern crate extern_use_primitive_type_lib;\n+\n+fn main() {}"}]}