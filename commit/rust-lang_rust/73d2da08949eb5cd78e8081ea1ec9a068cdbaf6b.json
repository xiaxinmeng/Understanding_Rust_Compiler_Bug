{"sha": "73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZDJkYTA4OTQ5ZWI1Y2Q3OGU4MDgxZWExZWM5YTA2OGNkYmFmNmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-14T22:56:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T08:44:22Z"}, "message": "Remove `Spanned` from `mk_name_value_item_str` and `expr_to_spanned_string`", "tree": {"sha": "0b6f78d473ba85197456890dcaed18f2342ddea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b6f78d473ba85197456890dcaed18f2342ddea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "html_url": "https://github.com/rust-lang/rust/commit/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc", "html_url": "https://github.com/rust-lang/rust/commit/1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "ec5d86b2c611da4076610301e4ee3c9f7b0512a9", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -3,7 +3,6 @@ use super::*;\n use syntax_pos::DUMMY_SP;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::source_map::dummy_spanned;\n use syntax::symbol::Symbol;\n use syntax::with_default_globals;\n \n@@ -181,7 +180,8 @@ fn test_parse_ok() {\n \n         let mi = attr::mk_name_value_item_str(\n             Ident::from_str(\"all\"),\n-            dummy_spanned(Symbol::intern(\"done\"))\n+            Symbol::intern(\"done\"),\n+            DUMMY_SP,\n         );\n         assert_eq!(Cfg::parse(&mi), Ok(name_value_cfg(\"all\", \"done\")));\n "}, {"sha": "983adc0eae80444bc1d1edade1811263bf119f7e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -29,7 +29,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n use syntax::ext::base::MacroKind;\n-use syntax::source_map::{dummy_spanned, Spanned};\n+use syntax::source_map::{DUMMY_SP, Spanned};\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::symbol::InternedString;\n use syntax_pos::{self, Pos, FileName};\n@@ -930,8 +930,8 @@ impl Attributes {\n             if attr.check_name(sym::enable) {\n                 if let Some(feat) = attr.value_str() {\n                     let meta = attr::mk_name_value_item_str(\n-                        Ident::with_empty_ctxt(sym::target_feature),\n-                        dummy_spanned(feat));\n+                        Ident::with_empty_ctxt(sym::target_feature), feat, DUMMY_SP\n+                    );\n                     if let Ok(feat_cfg) = Cfg::parse(&meta) {\n                         cfg &= feat_cfg;\n                     }"}, {"sha": "c6d006213ca2378c97d4a3e8f6e052c310fcaeea", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -939,8 +939,6 @@ pub struct Field {\n     pub id: NodeId,\n }\n \n-pub type SpannedIdent = Spanned<Ident>;\n-\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BlockCheckMode {\n     Default,"}, {"sha": "85c661d320a7bdec799514d8fadf312e2bf85eba", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -13,7 +13,7 @@ use crate::ast::{AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n-use crate::source_map::{BytePos, Spanned, dummy_spanned};\n+use crate::source_map::{BytePos, Spanned, DUMMY_SP};\n use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crate::parse::parser::Parser;\n use crate::parse::{self, ParseSess, PResult};\n@@ -328,7 +328,9 @@ impl Attribute {\n             let comment = self.value_str().unwrap();\n             let meta = mk_name_value_item_str(\n                 Ident::with_empty_ctxt(sym::doc),\n-                dummy_spanned(Symbol::intern(&strip_doc_comment_decoration(&comment.as_str()))));\n+                Symbol::intern(&strip_doc_comment_decoration(&comment.as_str())),\n+                DUMMY_SP,\n+            );\n             f(&Attribute {\n                 id: self.id,\n                 style: self.style,\n@@ -345,9 +347,9 @@ impl Attribute {\n \n /* Constructors */\n \n-pub fn mk_name_value_item_str(ident: Ident, value: Spanned<Symbol>) -> MetaItem {\n-    let lit_kind = LitKind::Str(value.node, ast::StrStyle::Cooked);\n-    mk_name_value_item(ident, lit_kind, value.span)\n+pub fn mk_name_value_item_str(ident: Ident, str: Symbol, str_span: Span) -> MetaItem {\n+    let lit_kind = LitKind::Str(str, ast::StrStyle::Cooked);\n+    mk_name_value_item(ident, lit_kind, str_span)\n }\n \n pub fn mk_name_value_item(ident: Ident, lit_kind: LitKind, lit_span: Span) -> MetaItem {"}, {"sha": "edeca046c7b8fc9c0b8984e82cd035d68f23979f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -1,6 +1,6 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n use crate::attr::{HasAttrs, Stability, Deprecation};\n-use crate::source_map::{SourceMap, Spanned, respan};\n+use crate::source_map::SourceMap;\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n use crate::ext::hygiene::{ExpnId, SyntaxContext, Transparency};\n@@ -916,7 +916,7 @@ pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     mut expr: P<ast::Expr>,\n     err_msg: &str,\n-) -> Result<Spanned<(Symbol, ast::StrStyle)>, Option<DiagnosticBuilder<'a>>> {\n+) -> Result<(Symbol, ast::StrStyle, Span), Option<DiagnosticBuilder<'a>>> {\n     // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n     expr.span = expr.span.apply_mark(cx.current_expansion.id);\n \n@@ -926,7 +926,7 @@ pub fn expr_to_spanned_string<'a>(\n \n     Err(match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n-            ast::LitKind::Str(s, style) => return Ok(respan(expr.span, (s, style))),\n+            ast::LitKind::Str(s, style) => return Ok((s, style, expr.span)),\n             ast::LitKind::Err(_) => None,\n             _ => Some(cx.struct_span_err(l.span, err_msg))\n         },\n@@ -940,7 +940,7 @@ pub fn expr_to_string(cx: &mut ExtCtxt<'_>, expr: P<ast::Expr>, err_msg: &str)\n     expr_to_spanned_string(cx, expr, err_msg)\n         .map_err(|err| err.map(|mut err| err.emit()))\n         .ok()\n-        .map(|s| s.node)\n+        .map(|(symbol, style, _)| (symbol, style))\n }\n \n /// Non-fatally assert that `tts` is empty. Note that this function"}, {"sha": "6cd9b2efdd2f050b8e2d9d8a9b5e49d57f46abab", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -1,7 +1,7 @@\n use crate::ast::{self, Block, Ident, LitKind, NodeId, PatKind, Path};\n use crate::ast::{MacStmtStyle, StmtKind, ItemKind};\n use crate::attr::{self, HasAttrs};\n-use crate::source_map::{dummy_spanned, respan};\n+use crate::source_map::respan;\n use crate::config::StripUnconfigured;\n use crate::ext::base::*;\n use crate::ext::proc_macro::collect_derives;\n@@ -1251,13 +1251,15 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n                                         Ident::with_empty_ctxt(sym::file),\n-                                        dummy_spanned(file),\n+                                        file,\n+                                        DUMMY_SP,\n                                     ),\n                                 ),\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n                                         Ident::with_empty_ctxt(sym::contents),\n-                                        dummy_spanned(src_interned),\n+                                        src_interned,\n+                                        DUMMY_SP,\n                                     ),\n                                 ),\n                             ];"}, {"sha": "443a6434b789121df497fdebaf1e2e8f58df6ed4", "filename": "src/libsyntax/parse/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftests.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -172,8 +172,8 @@ fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n     impl<'a> crate::visit::Visitor<'a> for PatIdentVisitor {\n         fn visit_pat(&mut self, p: &'a ast::Pat) {\n             match p.node {\n-                PatKind::Ident(_ , ref spannedident, _) => {\n-                    self.spans.push(spannedident.span.clone());\n+                PatKind::Ident(_ , ref ident, _) => {\n+                    self.spans.push(ident.span.clone());\n                 }\n                 _ => {\n                     crate::visit::walk_pat(self, p);"}, {"sha": "83764205a198e340aa0717e90d0454f561d67e5b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "patch": "@@ -846,9 +846,9 @@ pub fn expand_preparsed_format_args(\n \n     let msg = \"format argument must be a string literal\";\n     let fmt_sp = efmt.span;\n-    let fmt = match expr_to_spanned_string(ecx, efmt, msg) {\n+    let (fmt_str, fmt_style, fmt_span) = match expr_to_spanned_string(ecx, efmt, msg) {\n         Ok(mut fmt) if append_newline => {\n-            fmt.node.0 = Symbol::intern(&format!(\"{}\\n\", fmt.node.0));\n+            fmt.0 = Symbol::intern(&format!(\"{}\\n\", fmt.0));\n             fmt\n         }\n         Ok(fmt) => fmt,\n@@ -875,7 +875,7 @@ pub fn expand_preparsed_format_args(\n         _ => (false, None),\n     };\n \n-    let str_style = match fmt.node.1 {\n+    let str_style = match fmt_style {\n         ast::StrStyle::Cooked => None,\n         ast::StrStyle::Raw(raw) => {\n             Some(raw as usize)\n@@ -981,7 +981,7 @@ pub fn expand_preparsed_format_args(\n         vec![]\n     };\n \n-    let fmt_str = &*fmt.node.0.as_str();  // for the suggestions below\n+    let fmt_str = &*fmt_str.as_str();  // for the suggestions below\n     let mut parser = parse::Parser::new(fmt_str, str_style, skips, append_newline);\n \n     let mut unverified_pieces = Vec::new();\n@@ -995,23 +995,23 @@ pub fn expand_preparsed_format_args(\n \n     if !parser.errors.is_empty() {\n         let err = parser.errors.remove(0);\n-        let sp = fmt.span.from_inner(err.span);\n+        let sp = fmt_span.from_inner(err.span);\n         let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\",\n                                                      err.description));\n         e.span_label(sp, err.label + \" in format string\");\n         if let Some(note) = err.note {\n             e.note(&note);\n         }\n         if let Some((label, span)) = err.secondary_label {\n-            let sp = fmt.span.from_inner(span);\n+            let sp = fmt_span.from_inner(span);\n             e.span_label(sp, label);\n         }\n         e.emit();\n         return DummyResult::raw_expr(sp, true);\n     }\n \n     let arg_spans = parser.arg_places.iter()\n-        .map(|span| fmt.span.from_inner(*span))\n+        .map(|span| fmt_span.from_inner(*span))\n         .collect();\n \n     let named_pos: FxHashSet<usize> = names.values().cloned().collect();\n@@ -1034,7 +1034,7 @@ pub fn expand_preparsed_format_args(\n         str_pieces: Vec::with_capacity(unverified_pieces.len()),\n         all_pieces_simple: true,\n         macsp,\n-        fmtsp: fmt.span,\n+        fmtsp: fmt_span,\n         invalid_refs: Vec::new(),\n         arg_spans,\n         arg_with_formatting: Vec::new(),"}]}