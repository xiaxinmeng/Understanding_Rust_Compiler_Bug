{"sha": "f697041b37e8c9c86dfe463262501ad61dd2d4a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OTcwNDFiMzdlOGM5Yzg2ZGZlNDYzMjYyNTAxYWQ2MWRkMmQ0YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-11T14:30:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-11T14:30:08Z"}, "message": "Auto merge of #25303 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25280, #25284, #25286, #25287, #25290, #25291, #25297\n- Failed merges:", "tree": {"sha": "58542ee8299b1e8c911712c499e825aabbf5020b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58542ee8299b1e8c911712c499e825aabbf5020b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f697041b37e8c9c86dfe463262501ad61dd2d4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f697041b37e8c9c86dfe463262501ad61dd2d4a3", "html_url": "https://github.com/rust-lang/rust/commit/f697041b37e8c9c86dfe463262501ad61dd2d4a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f697041b37e8c9c86dfe463262501ad61dd2d4a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8004fc9fe0591f9537c0f6e993234eb86989c538", "url": "https://api.github.com/repos/rust-lang/rust/commits/8004fc9fe0591f9537c0f6e993234eb86989c538", "html_url": "https://github.com/rust-lang/rust/commit/8004fc9fe0591f9537c0f6e993234eb86989c538"}, {"sha": "2b0191e6d55981a7a8d56ff14150f2474f89aef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0191e6d55981a7a8d56ff14150f2474f89aef2", "html_url": "https://github.com/rust-lang/rust/commit/2b0191e6d55981a7a8d56ff14150f2474f89aef2"}], "stats": {"total": 222, "additions": 130, "deletions": 92}, "files": [{"sha": "fb7562e7bdf8b28b8ebcb3537d66016d120efe5c", "filename": "src/doc/grammar.md", "status": "modified", "additions": 68, "deletions": 66, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -253,7 +253,7 @@ The two values of the boolean type are written `true` and `false`.\n ### Symbols\n \n ```antlr\n-symbol : \"::\" \"->\"\n+symbol : \"::\" | \"->\"\n        | '#' | '[' | ']' | '(' | ')' | '{' | '}'\n        | ',' | ';' ;\n ```\n@@ -304,7 +304,7 @@ transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n ## Items\n \n ```antlr\n-item : mod_item | fn_item | type_item | struct_item | enum_item\n+item : vis ? mod_item | fn_item | type_item | struct_item | enum_item\n      | const_item | static_item | trait_item | impl_item | extern_block ;\n ```\n \n@@ -322,7 +322,7 @@ mod : [ view_item | item ] * ;\n #### View items\n \n ```antlr\n-view_item : extern_crate_decl | use_decl ;\n+view_item : extern_crate_decl | use_decl ';' ;\n ```\n \n ##### Extern crate declarations\n@@ -335,14 +335,14 @@ crate_name: ident | ( ident \"as\" ident )\n ##### Use declarations\n \n ```antlr\n-use_decl : \"pub\" ? \"use\" [ path \"as\" ident\n-                          | path_glob ] ;\n+use_decl : vis ? \"use\" [ path \"as\" ident\n+                        | path_glob ] ;\n \n path_glob : ident [ \"::\" [ path_glob\n                           | '*' ] ] ?\n           | '{' path_item [ ',' path_item ] * '}' ;\n \n-path_item : ident | \"mod\" ;\n+path_item : ident | \"self\" ;\n ```\n \n ### Functions\n@@ -414,16 +414,17 @@ extern_block : [ foreign_fn ] * ;\n \n ## Visibility and Privacy\n \n-**FIXME:** grammar?\n-\n+```antlr\n+vis : \"pub\" ;\n+```\n ### Re-exporting and Visibility\n \n-**FIXME:** grammar?\n+See [Use declarations](#use-declarations).\n \n ## Attributes\n \n ```antlr\n-attribute : \"#!\" ? '[' meta_item ']' ;\n+attribute : '#' '!' ? '[' meta_item ']' ;\n meta_item : ident [ '=' literal\n                   | '(' meta_seq ')' ] ? ;\n meta_seq : meta_item [ ',' meta_seq ] ? ;\n@@ -433,26 +434,19 @@ meta_seq : meta_item [ ',' meta_seq ] ? ;\n \n ## Statements\n \n-**FIXME:** grammar?\n+```antlr\n+stmt : decl_stmt | expr_stmt ;\n+```\n \n ### Declaration statements\n \n-**FIXME:** grammar?\n-\n-A _declaration statement_ is one that introduces one or more *names* into the\n-enclosing statement block. The declared names may denote new variables or new\n-items.\n+```antlr\n+decl_stmt : item | let_decl ;\n+```\n \n #### Item declarations\n \n-**FIXME:** grammar?\n-\n-An _item declaration statement_ has a syntactic form identical to an\n-[item](#items) declaration within a module. Declaring an item &mdash; a\n-function, enumeration, structure, type, static, trait, implementation or module\n-&mdash; locally within a statement block is simply a way of restricting its\n-scope to a narrow region containing all of its uses; it is otherwise identical\n-in meaning to declaring the item outside the statement block.\n+See [Items](#items).\n \n #### Variable declarations\n \n@@ -463,11 +457,21 @@ init : [ '=' ] expr ;\n \n ### Expression statements\n \n-**FIXME:** grammar?\n+```antlr\n+expr_stmt : expr ';' ;\n+```\n \n ## Expressions\n \n-**FIXME:** grammar?\n+```antlr\n+expr : literal | path | tuple_expr | unit_expr | struct_expr\n+     | block_expr | method_call_expr | field_expr | array_expr\n+     | idx_expr | range_expr | unop_expr | binop_expr\n+     | paren_expr | call_expr | lambda_expr | while_expr\n+     | loop_expr | break_expr | continue_expr | for_expr\n+     | if_expr | match_expr | if_let_expr | while_let_expr\n+     | return_expr ;\n+```\n \n #### Lvalues, rvalues and temporaries\n \n@@ -479,19 +483,23 @@ init : [ '=' ] expr ;\n \n ### Literal expressions\n \n-**FIXME:** grammar?\n+See [Literals](#literals).\n \n ### Path expressions\n \n-**FIXME:** grammar?\n+See [Paths](#paths).\n \n ### Tuple expressions\n \n-**FIXME:** grammar?\n+```antlr\n+tuple_expr : '(' [ expr [ ',' expr ] * | expr ',' ] ? ')' ;\n+```\n \n ### Unit expressions\n \n-**FIXME:** grammar?\n+```antlr\n+unit_expr : \"()\" ;\n+```\n \n ### Structure expressions\n \n@@ -507,8 +515,7 @@ struct_expr : expr_path '{' ident ':' expr\n ### Block expressions\n \n ```antlr\n-block_expr : '{' [ view_item ] *\n-                 [ stmt ';' | item ] *\n+block_expr : '{' [ stmt ';' | item ] *\n                  [ expr ] '}' ;\n ```\n \n@@ -529,7 +536,7 @@ field_expr : expr '.' ident ;\n ```antlr\n array_expr : '[' \"mut\" ? array_elems? ']' ;\n \n-array_elems : [expr [',' expr]*] | [expr ',' \"..\" expr] ;\n+array_elems : [expr [',' expr]*] | [expr ';' expr] ;\n ```\n \n ### Index expressions\n@@ -549,65 +556,60 @@ range_expr : expr \"..\" expr |\n \n ### Unary operator expressions\n \n-**FIXME:** grammar?\n+```antlr\n+unop_expr : unop expr ;\n+unop : '-' | '*' | '!' ;\n+```\n \n ### Binary operator expressions\n \n ```antlr\n-binop_expr : expr binop expr ;\n+binop_expr : expr binop expr | type_cast_expr\n+           | assignment_expr | compound_assignment_expr ;\n+binop : arith_op | bitwise_op | lazy_bool_op | comp_op\n ```\n \n #### Arithmetic operators\n \n-**FIXME:** grammar?\n+```antlr\n+arith_op : '+' | '-' | '*' | '/' | '%' ;\n+```\n \n #### Bitwise operators\n \n-**FIXME:** grammar?\n+```antlr\n+bitwise_op : '&' | '|' | '^' | \"<<\" | \">>\" ;\n+```\n \n #### Lazy boolean operators\n \n-**FIXME:** grammar?\n+```antlr\n+lazy_bool_op : \"&&\" | \"||\" ;\n+```\n \n #### Comparison operators\n \n-**FIXME:** grammar?\n+```antlr\n+comp_op : \"==\" | \"!=\" | '<' | '>' | \"<=\" | \">=\" ;\n+```\n \n #### Type cast expressions\n \n-**FIXME:** grammar?\n+```antlr\n+type_cast_expr : value \"as\" type ;\n+```\n \n #### Assignment expressions\n \n-**FIXME:** grammar?\n+```antlr\n+assignment_expr : expr '=' expr ;\n+```\n \n #### Compound assignment expressions\n \n-**FIXME:** grammar?\n-\n-#### Operator precedence\n-\n-The precedence of Rust binary operators is ordered as follows, going from\n-strong to weak:\n-\n-```text\n-* / %\n-as\n-+ -\n-<< >>\n-&\n-^\n-|\n-< > <= >=\n-== !=\n-&&\n-||\n-=\n-```\n-\n-Operators at the same precedence level are evaluated left-to-right. [Unary\n-operators](#unary-operator-expressions) have the same precedence level and it\n-is stronger than any of the binary operators'.\n+```antlr\n+compound_assignment_expr : expr [ arith_op | bitwise_op ] '=' expr ;\n+```\n \n ### Grouped expressions\n "}, {"sha": "66a7f543ad95f2337604a5e4d3f81096704054c9", "filename": "src/doc/reference.md", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -653,9 +653,10 @@ There are several kinds of item:\n * [`use` declarations](#use-declarations)\n * [modules](#modules)\n * [functions](#functions)\n-* [type definitions](#type-definitions)\n+* [type aliases](#type-aliases)\n * [structures](#structures)\n * [enumerations](#enumerations)\n+* [constant items](#constant-items)\n * [static items](#static-items)\n * [traits](#traits)\n * [implementations](#implementations)\n@@ -672,16 +673,16 @@ which sub-item declarations may appear.\n \n ### Type Parameters\n \n-All items except modules may be *parameterized* by type. Type parameters are\n-given as a comma-separated list of identifiers enclosed in angle brackets\n-(`<...>`), after the name of the item and before its definition. The type\n-parameters of an item are considered \"part of the name\", not part of the type\n-of the item. A referencing [path](#paths) must (in principle) provide type\n-arguments as a list of comma-separated types enclosed within angle brackets, in\n-order to refer to the type-parameterized item. In practice, the type-inference\n-system can usually infer such argument types from context. There are no\n-general type-parametric types, only type-parametric items. That is, Rust has\n-no notion of type abstraction: there are no first-class \"forall\" types.\n+All items except modules, constants and statics may be *parameterized* by type.\n+Type parameters are given as a comma-separated list of identifiers enclosed in\n+angle brackets (`<...>`), after the name of the item and before its definition.\n+The type parameters of an item are considered \"part of the name\", not part of\n+the type of the item. A referencing [path](#paths) must (in principle) provide\n+type arguments as a list of comma-separated types enclosed within angle\n+brackets, in order to refer to the type-parameterized item. In practice, the\n+type-inference system can usually infer such argument types from context. There\n+are no general type-parametric types, only type-parametric items. That is, Rust\n+has no notion of type abstraction: there are no first-class \"forall\" types.\n \n ### Modules\n \n@@ -743,7 +744,7 @@ mod thread {\n }\n ```\n \n-##### Extern crate declarations\n+#### Extern crate declarations\n \n An _`extern crate` declaration_ specifies a dependency on an external crate.\n The external crate is then bound into the declaring scope as the `ident`\n@@ -767,7 +768,7 @@ extern crate std; // equivalent to: extern crate std as std;\n extern crate std as ruststd; // linking to 'std' under another name\n ```\n \n-##### Use declarations\n+#### Use declarations\n \n A _use declaration_ creates one or more local name bindings synonymous with\n some other [path](#paths). Usually a `use` declaration is used to shorten the\n@@ -842,7 +843,7 @@ module declarations should be at the crate root if direct usage of the declared\n modules within `use` items is desired. It is also possible to use `self` and\n `super` at the beginning of a `use` item to refer to the current and direct\n parent modules respectively. All rules regarding accessing declared modules in\n-`use` declarations applies to both module declarations and `extern crate`\n+`use` declarations apply to both module declarations and `extern crate`\n declarations.\n \n An example of what will and will not work for `use` items:\n@@ -2564,12 +2565,19 @@ array is mutable, the resulting [lvalue](#lvalues,-rvalues-and-temporaries) can\n be assigned to.\n \n Indices are zero-based, and may be of any integral type. Vector access is\n-bounds-checked at run-time. When the check fails, it will put the thread in a\n-_panicked state_.\n+bounds-checked at compile-time for constant arrays being accessed with a constant index value.\n+Otherwise a check will be performed at run-time that will put the thread in a _panicked state_ if it fails.\n \n ```{should-fail}\n ([1, 2, 3, 4])[0];\n-([\"a\", \"b\"])[10]; // panics\n+\n+let x = ([\"a\", \"b\"])[10]; // compiler error: const index-expr is out of bounds\n+\n+let n = 10;\n+let y = ([\"a\", \"b\"])[n]; // panics\n+\n+let arr = [\"a\", \"b\"];\n+arr[10]; // panics\n ```\n \n ### Range expressions\n@@ -3064,6 +3072,20 @@ of a condition expression it expects a refutable let statement. If the value of\n expression on the right hand side of the let statement matches the pattern, the corresponding\n block will execute, otherwise flow proceeds to the first `else` block that follows.\n \n+```\n+let dish = (\"Ham\", \"Eggs\");\n+\n+// this body will be skipped because the pattern is refuted\n+if let (\"Bacon\", b) = dish {\n+    println!(\"Bacon is served with {}\", b);\n+}\n+\n+// this body will execute\n+if let (\"Ham\", b) = dish {\n+    println!(\"Ham is served with {}\", b);\n+}\n+```\n+\n ### While let loops\n \n A `while let` loop is semantically identical to a `while` loop but in place of a"}, {"sha": "e5702ed163542f8aa7fcdbd850c2599d02064e36", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -273,7 +273,7 @@ information\u2019. Why throw it away? Well, for a basic program, we just want to\n print a generic error, as basically any issue means we can\u2019t continue. The\n [`ok()` method][ok] returns a value which has another method defined on it:\n `expect()`. The [`expect()` method][expect] takes a value it\u2019s called on, and\n-if it isn\u2019t a successful one, [`panic!`][panic]s with a message you passed you\n+if it isn\u2019t a successful one, [`panic!`][panic]s with a message you\n passed it. A `panic!` like this will cause our program to crash, displaying\n the message.\n "}, {"sha": "c434371ce59d319ed4044c15d80440b204fabb35", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -6,7 +6,7 @@ become quite acquainted. Ownership is how Rust achieves its largest goal,\n memory safety. There are a few distinct concepts, each with its own\n chapter:\n \n-* [ownership][ownership], ownership, the key concept\n+* [ownership][ownership], the key concept\n * borrowing, which you\u2019re reading now\n * [lifetimes][lifetimes], an advanced concept of borrowing\n \n@@ -368,4 +368,4 @@ statement 1 at 3:14\n     \n     println!(\"{}\", y);\n }\n-```\n\\ No newline at end of file\n+```"}, {"sha": "d5a069b194a5de3535c7fdc4664faf70ea095733", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -1002,7 +1002,7 @@ pub trait SliceConcatExt<T: ?Sized> {\n     /// The resulting type after concatenation\n     type Output;\n \n-    /// Flattens a slice of `T` into a single value `U`.\n+    /// Flattens a slice of `T` into a single value `Self::Output`.\n     ///\n     /// # Examples\n     ///\n@@ -1012,7 +1012,8 @@ pub trait SliceConcatExt<T: ?Sized> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn concat(&self) -> Self::Output;\n \n-    /// Flattens a slice of `T` into a single value `U`, placing a given separator between each.\n+    /// Flattens a slice of `T` into a single value `Self::Output`, placing a given separator\n+    /// between each.\n     ///\n     /// # Examples\n     ///"}, {"sha": "11ca6e332b5713da5c204c7cd65755269aaab7b0", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -44,8 +44,11 @@ pub trait FromStr {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Err;\n \n-    /// Parses a string `s` to return an optional value of this type. If the\n-    /// string is ill-formatted, the None is returned.\n+    /// Parses a string `s` to return a value of this type.\n+    ///\n+    /// If parsing succeeds, return the value inside `Ok`, otherwise\n+    /// when the string is ill-formatted return an error specific to the\n+    /// inside `Err`. The error type is specific to implementation of the trait.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_str(s: &str) -> Result<Self, Self::Err>;\n }"}, {"sha": "e7b2b01d09f35eea9e12efee7b654d43cdf6ce34", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -844,7 +844,7 @@ impl fmt::Display for CharsError {\n /// An iterator over the contents of an instance of `BufRead` split on a\n /// particular byte.\n ///\n-/// See `BufReadExt::split` for more information.\n+/// See `BufRead::split` for more information.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<B> {\n     buf: B,\n@@ -873,7 +873,7 @@ impl<B: BufRead> Iterator for Split<B> {\n /// An iterator over the lines of an instance of `BufRead` split on a newline\n /// byte.\n ///\n-/// See `BufReadExt::lines` for more information.\n+/// See `BufRead::lines` for more information.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Lines<B> {\n     buf: B,"}, {"sha": "21f873e687743ed7918202f9b3f10e3ecb12d6b9", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -1449,6 +1449,8 @@ impl Path {\n \n     /// Determines whether `base` is a prefix of `self`.\n     ///\n+    /// Only considers whole path components to match.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1457,6 +1459,8 @@ impl Path {\n     /// let path = Path::new(\"/etc/passwd\");\n     ///\n     /// assert!(path.starts_with(\"/etc\"));\n+    ///\n+    /// assert!(!path.starts_with(\"/e\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool {\n@@ -1465,6 +1469,8 @@ impl Path {\n \n     /// Determines whether `child` is a suffix of `self`.\n     ///\n+    /// Only considers whole path components to match.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "2e043c58a5da94e9cf733a59d100d31545c16b78", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -85,6 +85,8 @@ pub struct LocalKey<T> {\n }\n \n /// Declare a new thread local storage key of type `std::thread::LocalKey`.\n+///\n+/// See [LocalKey documentation](thread/struct.LocalKey.html) for more information.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]"}, {"sha": "e195c3aaa3f8f8c0b021fb2b6df45d37f0a30364", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f697041b37e8c9c86dfe463262501ad61dd2d4a3/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=f697041b37e8c9c86dfe463262501ad61dd2d4a3", "patch": "@@ -66,6 +66,8 @@ pub struct ScopedKey<T> { #[doc(hidden)] pub inner: __impl::KeyInner<T> }\n ///\n /// This macro declares a `static` item on which methods are used to get and\n /// set the value stored within.\n+///\n+/// See [ScopedKey documentation](thread/struct.ScopedKey.html) for more information.\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! scoped_thread_local {"}]}