{"sha": "15bfd9da8543b523571bebf0d7864b3b217947be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YmZkOWRhODU0M2I1MjM1NzFiZWJmMGQ3ODY0YjNiMjE3OTQ3YmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-12T11:58:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-12T11:58:12Z"}, "message": "Introduce CompileMonoItem DepNode", "tree": {"sha": "3c69dfd6ddfd227cee0cf9558529b29e34f3c77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c69dfd6ddfd227cee0cf9558529b29e34f3c77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15bfd9da8543b523571bebf0d7864b3b217947be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15bfd9da8543b523571bebf0d7864b3b217947be", "html_url": "https://github.com/rust-lang/rust/commit/15bfd9da8543b523571bebf0d7864b3b217947be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15bfd9da8543b523571bebf0d7864b3b217947be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e402f94693f0bcf44381db4d92d2da164eb99a", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e402f94693f0bcf44381db4d92d2da164eb99a", "html_url": "https://github.com/rust-lang/rust/commit/67e402f94693f0bcf44381db4d92d2da164eb99a"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "aa54d1ae7b9d118426d9702dac6384725e0b50c4", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=15bfd9da8543b523571bebf0d7864b3b217947be", "patch": "@@ -32,8 +32,8 @@\n //! `DepNode` definition happens in the `define_dep_nodes!()` macro. This macro\n //! defines the `DepKind` enum. Each `DepKind` has its own parameters that are\n //! needed at runtime in order to construct a valid `DepNode` fingerprint.\n-//! However, only `CompileCodegenUnit` is constructed explicitly (with\n-//! `make_compile_codegen_unit`).\n+//! However, only `CompileCodegenUnit` and `CompileMonoItem` are constructed\n+//! explicitly (with `make_compile_codegen_unit` cq `make_compile_mono_item`).\n //!\n //! Because the macro sees what parameters a given `DepKind` requires, it can\n //! \"infer\" some properties for each kind of `DepNode`:\n@@ -46,15 +46,17 @@\n //!   `DefId` it was computed from. In other cases, too much information gets\n //!   lost during fingerprint computation.\n //!\n-//! `make_compile_codegen_unit`, together with `DepNode::new()`, ensures that only\n-//! valid `DepNode` instances can be constructed. For example, the API does not\n-//! allow for constructing parameterless `DepNode`s with anything other\n-//! than a zeroed out fingerprint. More generally speaking, it relieves the\n-//! user of the `DepNode` API of having to know how to compute the expected\n-//! fingerprint for a given set of node parameters.\n+//! `make_compile_codegen_unit` and `make_compile_mono_items`, together with\n+//! `DepNode::new()`, ensures that only valid `DepNode` instances can be\n+//! constructed. For example, the API does not allow for constructing\n+//! parameterless `DepNode`s with anything other than a zeroed out fingerprint.\n+//! More generally speaking, it relieves the user of the `DepNode` API of\n+//! having to know how to compute the expected fingerprint for a given set of\n+//! node parameters.\n //!\n //! [dependency graph]: https://rustc-dev-guide.rust-lang.org/query.html\n \n+use crate::mir::mono::MonoItem;\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -175,6 +177,14 @@ pub mod dep_kind {\n         can_reconstruct_query_key: || false,\n     };\n \n+    pub const CompileMonoItem: DepKindStruct = DepKindStruct {\n+        has_params: true,\n+        is_anon: false,\n+        is_eval_always: false,\n+\n+        can_reconstruct_query_key: || false,\n+    };\n+\n     macro_rules! define_query_dep_kinds {\n         ($(\n             [$($attrs:tt)*]\n@@ -251,6 +261,10 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n \n     // WARNING: if `Symbol` is changed, make sure you update `make_compile_codegen_unit` below.\n     [] CompileCodegenUnit(Symbol),\n+\n+    // WARNING: if `MonoItem` is changed, make sure you update `make_compile_mono_item` below.\n+    // Only used by rustc_codegen_cranelift\n+    [] CompileMonoItem(MonoItem),\n ]);\n \n // WARNING: `construct` is generic and does not know that `CompileCodegenUnit` takes `Symbol`s as keys.\n@@ -259,6 +273,12 @@ crate fn make_compile_codegen_unit(tcx: TyCtxt<'_>, name: Symbol) -> DepNode {\n     DepNode::construct(tcx, DepKind::CompileCodegenUnit, &name)\n }\n \n+// WARNING: `construct` is generic and does not know that `CompileMonoItem` takes `MonoItem`s as keys.\n+// Be very careful changing this type signature!\n+crate fn make_compile_mono_item(tcx: TyCtxt<'tcx>, mono_item: &MonoItem<'tcx>) -> DepNode {\n+    DepNode::construct(tcx, DepKind::CompileMonoItem, mono_item)\n+}\n+\n pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n \n // We keep a lot of `DepNode`s in memory during compilation. It's not"}, {"sha": "31bea8329587d7469350bd4bc8c550f2a9fbf029", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=15bfd9da8543b523571bebf0d7864b3b217947be", "patch": "@@ -12,8 +12,8 @@ pub use rustc_query_system::dep_graph::{\n     SerializedDepNodeIndex, WorkProduct, WorkProductId,\n };\n \n-crate use dep_node::make_compile_codegen_unit;\n pub use dep_node::{label_strs, DepKind, DepNode, DepNodeExt};\n+crate use dep_node::{make_compile_codegen_unit, make_compile_mono_item};\n \n pub type DepGraph = rustc_query_system::dep_graph::DepGraph<DepKind>;\n pub type TaskDeps = rustc_query_system::dep_graph::TaskDeps<DepKind>;"}, {"sha": "46f9ace26cdfeb678692c8b8626f674935a9a416", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=15bfd9da8543b523571bebf0d7864b3b217947be", "patch": "@@ -181,6 +181,10 @@ impl<'tcx> MonoItem<'tcx> {\n         }\n         .map(|hir_id| tcx.hir().span(hir_id))\n     }\n+\n+    pub fn codegen_dep_node(&self, tcx: TyCtxt<'tcx>) -> DepNode {\n+        crate::dep_graph::make_compile_mono_item(tcx, self)\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for MonoItem<'tcx> {"}, {"sha": "ee914fa1ba95cfb2cedf993b0a1da6168042dd79", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bfd9da8543b523571bebf0d7864b3b217947be/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=15bfd9da8543b523571bebf0d7864b3b217947be", "patch": "@@ -438,6 +438,11 @@ macro_rules! define_queries {\n                 try_load_from_on_disk_cache: |_, _| {},\n             };\n \n+            pub const CompileMonoItem: QueryStruct = QueryStruct {\n+                force_from_dep_node: |_, _| false,\n+                try_load_from_on_disk_cache: |_, _| {},\n+            };\n+\n             $(pub const $name: QueryStruct = {\n                 const is_anon: bool = is_anon!([$($modifiers)*]);\n "}]}