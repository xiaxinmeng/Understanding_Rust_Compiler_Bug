{"sha": "19288951e1968abbfa552f6340a693d23e5e0254", "node_id": "C_kwDOAAsO6NoAKDE5Mjg4OTUxZTE5NjhhYmJmYTU1MmY2MzQwYTY5M2QyM2U1ZTAyNTQ", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-09T22:26:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T23:58:22Z"}, "message": "Delete Decoder::read_struct_field", "tree": {"sha": "4880421657fa368a6c319b567032e5d9d19dec4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4880421657fa368a6c319b567032e5d9d19dec4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19288951e1968abbfa552f6340a693d23e5e0254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19288951e1968abbfa552f6340a693d23e5e0254", "html_url": "https://github.com/rust-lang/rust/commit/19288951e1968abbfa552f6340a693d23e5e0254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19288951e1968abbfa552f6340a693d23e5e0254/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c021ba48a70e69fa681ea6617512ae2028e2677a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c021ba48a70e69fa681ea6617512ae2028e2677a", "html_url": "https://github.com/rust-lang/rust/commit/c021ba48a70e69fa681ea6617512ae2028e2677a"}], "stats": {"total": 91, "additions": 31, "deletions": 60}, "files": [{"sha": "783b47a49e5d7dd9cf2a6af9dfc292945f6f6a4a", "filename": "compiler/rustc_macros/src/serialize.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs?ref=19288951e1968abbfa552f6340a693d23e5e0254", "patch": "@@ -42,13 +42,13 @@ fn decodable_body(\n     }\n     let ty_name = s.ast().ident.to_string();\n     let decode_body = match s.variants() {\n-        [vi] => vi.construct(|field, index| decode_field(field, index, true)),\n+        [vi] => vi.construct(|field, _index| decode_field(field)),\n         variants => {\n             let match_inner: TokenStream = variants\n                 .iter()\n                 .enumerate()\n                 .map(|(idx, vi)| {\n-                    let construct = vi.construct(|field, index| decode_field(field, index, false));\n+                    let construct = vi.construct(|field, _index| decode_field(field));\n                     quote! { #idx => { #construct } }\n                 })\n                 .collect();\n@@ -80,7 +80,7 @@ fn decodable_body(\n     )\n }\n \n-fn decode_field(field: &syn::Field, index: usize, is_struct: bool) -> proc_macro2::TokenStream {\n+fn decode_field(field: &syn::Field) -> proc_macro2::TokenStream {\n     let field_span = field.ident.as_ref().map_or(field.ty.span(), |ident| ident.span());\n \n     let decode_inner_method = if let syn::Type::Reference(_) = field.ty {\n@@ -89,22 +89,9 @@ fn decode_field(field: &syn::Field, index: usize, is_struct: bool) -> proc_macro\n         quote! { ::rustc_serialize::Decodable::decode }\n     };\n     let __decoder = quote! { __decoder };\n-    let decode_call = if is_struct {\n-        let field_name = field.ident.as_ref().map_or_else(|| index.to_string(), |i| i.to_string());\n-        let decode_method = proc_macro2::Ident::new(\"read_struct_field\", field_span);\n-        // Use the span of the field for the method call, so\n-        // that backtraces will point to the field.\n-        quote_spanned! {field_span=>\n-            ::rustc_serialize::Decoder::#decode_method(\n-                    #__decoder, #field_name, #decode_inner_method)\n-        }\n-    } else {\n-        // Use the span of the field for the method call, so\n-        // that backtraces will point to the field.\n-        quote_spanned! {field_span=> #decode_inner_method(#__decoder) }\n-    };\n-\n-    quote! { #decode_call }\n+    // Use the span of the field for the method call, so\n+    // that backtraces will point to the field.\n+    quote_spanned! {field_span=> #decode_inner_method(#__decoder) }\n }\n \n pub fn type_encodable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {"}, {"sha": "29db5a9878e028b9668a554d5c38e5a064f9b0aa", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=19288951e1968abbfa552f6340a693d23e5e0254", "patch": "@@ -122,25 +122,23 @@ impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<\n         let mut edge_list_data = Vec::with_capacity(edge_count);\n \n         for _index in 0..node_count {\n-            let dep_node: DepNode<K> = d.read_struct_field(\"node\", Decodable::decode);\n+            let dep_node: DepNode<K> = Decodable::decode(d);\n             let _i: SerializedDepNodeIndex = nodes.push(dep_node);\n             debug_assert_eq!(_i.index(), _index);\n \n-            let fingerprint: Fingerprint = d.read_struct_field(\"fingerprint\", Decodable::decode);\n+            let fingerprint: Fingerprint = Decodable::decode(d);\n             let _i: SerializedDepNodeIndex = fingerprints.push(fingerprint);\n             debug_assert_eq!(_i.index(), _index);\n \n-            d.read_struct_field(\"edges\", |d| {\n-                d.read_seq(|d, len| {\n-                    let start = edge_list_data.len().try_into().unwrap();\n-                    for _ in 0..len {\n-                        let edge = d.read_seq_elt(Decodable::decode);\n-                        edge_list_data.push(edge);\n-                    }\n-                    let end = edge_list_data.len().try_into().unwrap();\n-                    let _i: SerializedDepNodeIndex = edge_list_indices.push((start, end));\n-                    debug_assert_eq!(_i.index(), _index);\n-                })\n+            d.read_seq(|d, len| {\n+                let start = edge_list_data.len().try_into().unwrap();\n+                for _ in 0..len {\n+                    let edge = d.read_seq_elt(Decodable::decode);\n+                    edge_list_data.push(edge);\n+                }\n+                let end = edge_list_data.len().try_into().unwrap();\n+                let _i: SerializedDepNodeIndex = edge_list_indices.push((start, end));\n+                debug_assert_eq!(_i.index(), _index);\n             })\n         }\n "}, {"sha": "4996e02d7d784ee9502861f9ef22845a7abbaf3f", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=19288951e1968abbfa552f6340a693d23e5e0254", "patch": "@@ -210,14 +210,6 @@ pub trait Decoder {\n         f(self, disr)\n     }\n \n-    #[inline]\n-    fn read_struct_field<T, F>(&mut self, _f_name: &str, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self) -> T,\n-    {\n-        f(self)\n-    }\n-\n     #[inline]\n     fn read_tuple<T, F>(&mut self, _len: usize, f: F) -> T\n     where"}, {"sha": "56da7c437280472bab4d7a0120fe7d6b21ad4255", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=19288951e1968abbfa552f6340a693d23e5e0254", "patch": "@@ -299,10 +299,7 @@ impl<E: Encoder> Encodable<E> for DefId {\n \n impl<D: Decoder> Decodable<D> for DefId {\n     default fn decode(d: &mut D) -> DefId {\n-        DefId {\n-            krate: d.read_struct_field(\"krate\", Decodable::decode),\n-            index: d.read_struct_field(\"index\", Decodable::decode),\n-        }\n+        DefId { krate: Decodable::decode(d), index: Decodable::decode(d) }\n     }\n }\n "}, {"sha": "e51030eedf82fa6cb74f70f960d1b4e9c1685f6c", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19288951e1968abbfa552f6340a693d23e5e0254/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=19288951e1968abbfa552f6340a693d23e5e0254", "patch": "@@ -979,8 +979,8 @@ impl<E: Encoder> Encodable<E> for Span {\n }\n impl<D: Decoder> Decodable<D> for Span {\n     default fn decode(s: &mut D) -> Span {\n-        let lo = s.read_struct_field(\"lo\", Decodable::decode);\n-        let hi = s.read_struct_field(\"hi\", Decodable::decode);\n+        let lo = Decodable::decode(s);\n+        let hi = Decodable::decode(s);\n \n         Span::new(lo, hi, SyntaxContext::root(), None)\n     }\n@@ -1438,11 +1438,11 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n \n impl<D: Decoder> Decodable<D> for SourceFile {\n     fn decode(d: &mut D) -> SourceFile {\n-        let name: FileName = d.read_struct_field(\"name\", |d| Decodable::decode(d));\n-        let src_hash: SourceFileHash = d.read_struct_field(\"src_hash\", |d| Decodable::decode(d));\n-        let start_pos: BytePos = d.read_struct_field(\"start_pos\", |d| Decodable::decode(d));\n-        let end_pos: BytePos = d.read_struct_field(\"end_pos\", |d| Decodable::decode(d));\n-        let lines: Vec<BytePos> = d.read_struct_field(\"lines\", |d| {\n+        let name: FileName = Decodable::decode(d);\n+        let src_hash: SourceFileHash = Decodable::decode(d);\n+        let start_pos: BytePos = Decodable::decode(d);\n+        let end_pos: BytePos = Decodable::decode(d);\n+        let lines: Vec<BytePos> = {\n             let num_lines: u32 = Decodable::decode(d);\n             let mut lines = Vec::with_capacity(num_lines as usize);\n \n@@ -1469,15 +1469,12 @@ impl<D: Decoder> Decodable<D> for SourceFile {\n             }\n \n             lines\n-        });\n-        let multibyte_chars: Vec<MultiByteChar> =\n-            d.read_struct_field(\"multibyte_chars\", |d| Decodable::decode(d));\n-        let non_narrow_chars: Vec<NonNarrowChar> =\n-            d.read_struct_field(\"non_narrow_chars\", |d| Decodable::decode(d));\n-        let name_hash: u128 = d.read_struct_field(\"name_hash\", |d| Decodable::decode(d));\n-        let normalized_pos: Vec<NormalizedPos> =\n-            d.read_struct_field(\"normalized_pos\", |d| Decodable::decode(d));\n-        let cnum: CrateNum = d.read_struct_field(\"cnum\", |d| Decodable::decode(d));\n+        };\n+        let multibyte_chars: Vec<MultiByteChar> = Decodable::decode(d);\n+        let non_narrow_chars: Vec<NonNarrowChar> = Decodable::decode(d);\n+        let name_hash: u128 = Decodable::decode(d);\n+        let normalized_pos: Vec<NormalizedPos> = Decodable::decode(d);\n+        let cnum: CrateNum = Decodable::decode(d);\n         SourceFile {\n             name,\n             start_pos,"}]}