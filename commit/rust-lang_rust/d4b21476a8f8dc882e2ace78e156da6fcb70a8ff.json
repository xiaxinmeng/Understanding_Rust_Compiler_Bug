{"sha": "d4b21476a8f8dc882e2ace78e156da6fcb70a8ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YjIxNDc2YThmOGRjODgyZTJhY2U3OGUxNTZkYTZmY2I3MGE4ZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-03T08:52:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-03T08:52:35Z"}, "message": "Derive local roots from Workspaces", "tree": {"sha": "2cc697aecf90f5c15db2974dd7be01d63dc82e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cc697aecf90f5c15db2974dd7be01d63dc82e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff", "html_url": "https://github.com/rust-lang/rust/commit/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca80544f4baef69f3bb80e6b069291fbc89a927c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca80544f4baef69f3bb80e6b069291fbc89a927c", "html_url": "https://github.com/rust-lang/rust/commit/ca80544f4baef69f3bb80e6b069291fbc89a927c"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "2e5499485f293eedd8a322b5029021282ea0d976", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d4b21476a8f8dc882e2ace78e156da6fcb70a8ff", "patch": "@@ -164,7 +164,6 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n         }\n \n         WorldState::new(\n-            ws_roots,\n             workspaces,\n             config.lru_capacity,\n             &globs,"}, {"sha": "c1010e86aac502828145240744b46f1309209108", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b21476a8f8dc882e2ace78e156da6fcb70a8ff/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=d4b21476a8f8dc882e2ace78e156da6fcb70a8ff", "patch": "@@ -58,7 +58,7 @@ fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) ->\n #[derive(Debug)]\n pub struct WorldState {\n     pub config: Config,\n-    pub roots: Vec<PathBuf>,\n+    pub local_roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n@@ -81,7 +81,6 @@ pub struct WorldSnapshot {\n \n impl WorldState {\n     pub fn new(\n-        folder_roots: Vec<PathBuf>,\n         workspaces: Vec<ProjectWorkspace>,\n         lru_capacity: Option<usize>,\n         exclude_globs: &[Glob],\n@@ -93,19 +92,24 @@ impl WorldState {\n         let extern_dirs: FxHashSet<_> =\n             workspaces.iter().flat_map(ProjectWorkspace::out_dirs).collect();\n \n+        let mut local_roots = Vec::new();\n         let roots: Vec<_> = {\n             let create_filter = |is_member| {\n                 RustPackageFilterBuilder::default()\n                     .set_member(is_member)\n                     .exclude(exclude_globs.iter().cloned())\n                     .into_vfs_filter()\n             };\n-            folder_roots\n+            workspaces\n                 .iter()\n-                .map(|path| RootEntry::new(path.clone(), create_filter(true)))\n-                .chain(workspaces.iter().flat_map(ProjectWorkspace::to_roots).map(|pkg_root| {\n-                    RootEntry::new(pkg_root.path().to_owned(), create_filter(pkg_root.is_member()))\n-                }))\n+                .flat_map(ProjectWorkspace::to_roots)\n+                .map(|pkg_root| {\n+                    let path = pkg_root.path().to_owned();\n+                    if pkg_root.is_member() {\n+                        local_roots.push(path.clone());\n+                    }\n+                    RootEntry::new(path, create_filter(pkg_root.is_member()))\n+                })\n                 .chain(\n                     extern_dirs\n                         .iter()\n@@ -121,7 +125,7 @@ impl WorldState {\n         let mut extern_source_roots = FxHashMap::default();\n         for r in vfs_roots {\n             let vfs_root_path = vfs.root2path(r);\n-            let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n+            let is_local = local_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0), is_local);\n             change.set_debug_root_path(SourceRootId(r.0), vfs_root_path.display().to_string());\n \n@@ -178,7 +182,7 @@ impl WorldState {\n         analysis_host.apply_change(change);\n         WorldState {\n             config,\n-            roots: folder_roots,\n+            local_roots,\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n             vfs: Arc::new(RwLock::new(vfs)),\n@@ -216,7 +220,7 @@ impl WorldState {\n             match c {\n                 VfsChange::AddRoot { root, files } => {\n                     let root_path = self.vfs.read().root2path(root);\n-                    let is_local = self.roots.iter().any(|r| root_path.starts_with(r));\n+                    let is_local = self.local_roots.iter().any(|r| root_path.starts_with(r));\n                     if is_local {\n                         *roots_scanned += 1;\n                         for (file, path, text) in files {"}]}