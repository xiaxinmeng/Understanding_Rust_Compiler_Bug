{"sha": "fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "node_id": "C_kwDOAAsO6NoAKGZhMmNkOTQ1YWY2YmZiMTRjMTZjZmFhOGI3NGM2MzZkZmI4MjFiNDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T04:20:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T04:20:18Z"}, "message": "Rollup merge of #107306 - compiler-errors:correct-sugg-for-closure-arg-needs-borrow, r=oli-obk\n\nCorrect suggestions for closure arguments that need a borrow\n\nFixes #107301 by dealing with binders correctly\nFixes another issue where we were suggesting adding just `&` when we expected `&mut _` in a closure arg", "tree": {"sha": "f076f9f83877cd9f6e9008c9353978a0e234a0f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f076f9f83877cd9f6e9008c9353978a0e234a0f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1KKCCRBK7hj4Ov3rIwAAGi0IAKKbPUlmJN95uhsOLIBP/aCV\nvX2wXQXG83SKr3g0pEFUcK3nWq6zL5xT3O1K21a7duTMV4PD1gs2+Mhrv+0/RkW4\n/9guxBPodNJai/RUWzY/FJG5NNXhNCuCdUifh7HqMicQPJE1TviZowlMgnaDZ7oI\n047vdgyM1AXOtRaXWxm975f8ZYeRB+CjoTXaEaSJCFSoqRzhC5T1I5rzUZpaRQjp\nAl7D+OfXyH60ZmSp4brkzTPU+dA2kHG3Vtx3j0VQDueSWwlAxMtNyd09eT9xj3AY\nEDlQ6HHxjsqqkL+sYtg7uwSUlQgJrw9LojgSd584m5V6jrr+bUIEJUbUbJ1APSw=\n=8fk+\n-----END PGP SIGNATURE-----\n", "payload": "tree f076f9f83877cd9f6e9008c9353978a0e234a0f2\nparent 260e04879ee52a768a66ad131c7bd1b56526e609\nparent b83ab0ce965356308921acabe8a40fe88bcdd8c7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674879618 +0100\ncommitter GitHub <noreply@github.com> 1674879618 +0100\n\nRollup merge of #107306 - compiler-errors:correct-sugg-for-closure-arg-needs-borrow, r=oli-obk\n\nCorrect suggestions for closure arguments that need a borrow\n\nFixes #107301 by dealing with binders correctly\nFixes another issue where we were suggesting adding just `&` when we expected `&mut _` in a closure arg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "html_url": "https://github.com/rust-lang/rust/commit/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "260e04879ee52a768a66ad131c7bd1b56526e609", "url": "https://api.github.com/repos/rust-lang/rust/commits/260e04879ee52a768a66ad131c7bd1b56526e609", "html_url": "https://github.com/rust-lang/rust/commit/260e04879ee52a768a66ad131c7bd1b56526e609"}, {"sha": "b83ab0ce965356308921acabe8a40fe88bcdd8c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b83ab0ce965356308921acabe8a40fe88bcdd8c7", "html_url": "https://github.com/rust-lang/rust/commit/b83ab0ce965356308921acabe8a40fe88bcdd8c7"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "26c0b3beb37ba91df6fc0bc309f331d161c40061", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "patch": "@@ -3807,13 +3807,13 @@ fn hint_missing_borrow<'tcx>(\n     err: &mut Diagnostic,\n ) {\n     let found_args = match found.kind() {\n-        ty::FnPtr(f) => f.inputs().skip_binder().iter(),\n+        ty::FnPtr(f) => infcx.replace_bound_vars_with_placeholders(*f).inputs().iter(),\n         kind => {\n             span_bug!(span, \"found was converted to a FnPtr above but is now {:?}\", kind)\n         }\n     };\n     let expected_args = match expected.kind() {\n-        ty::FnPtr(f) => f.inputs().skip_binder().iter(),\n+        ty::FnPtr(f) => infcx.replace_bound_vars_with_placeholders(*f).inputs().iter(),\n         kind => {\n             span_bug!(span, \"expected was converted to a FnPtr above but is now {:?}\", kind)\n         }\n@@ -3824,12 +3824,12 @@ fn hint_missing_borrow<'tcx>(\n \n     let args = fn_decl.inputs.iter().map(|ty| ty);\n \n-    fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, usize) {\n-        let mut refs = 0;\n+    fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, Vec<hir::Mutability>) {\n+        let mut refs = vec![];\n \n-        while let ty::Ref(_, new_ty, _) = ty.kind() {\n+        while let ty::Ref(_, new_ty, mutbl) = ty.kind() {\n             ty = *new_ty;\n-            refs += 1;\n+            refs.push(*mutbl);\n         }\n \n         (ty, refs)\n@@ -3843,11 +3843,21 @@ fn hint_missing_borrow<'tcx>(\n         let (expected_ty, expected_refs) = get_deref_type_and_refs(*expected_arg);\n \n         if infcx.can_eq(param_env, found_ty, expected_ty).is_ok() {\n-            if found_refs < expected_refs {\n-                to_borrow.push((arg.span.shrink_to_lo(), \"&\".repeat(expected_refs - found_refs)));\n-            } else if found_refs > expected_refs {\n+            // FIXME: This could handle more exotic cases like mutability mismatches too!\n+            if found_refs.len() < expected_refs.len()\n+                && found_refs[..] == expected_refs[expected_refs.len() - found_refs.len()..]\n+            {\n+                to_borrow.push((\n+                    arg.span.shrink_to_lo(),\n+                    expected_refs[..expected_refs.len() - found_refs.len()]\n+                        .iter()\n+                        .map(|mutbl| format!(\"&{}\", mutbl.prefix_str()))\n+                        .collect::<Vec<_>>()\n+                        .join(\"\"),\n+                ));\n+            } else if found_refs.len() > expected_refs.len() {\n                 let mut span = arg.span.shrink_to_lo();\n-                let mut left = found_refs - expected_refs;\n+                let mut left = found_refs.len() - expected_refs.len();\n                 let mut ty = arg;\n                 while let hir::TyKind::Ref(_, mut_ty) = &ty.kind && left > 0 {\n                     span = span.with_hi(mut_ty.ty.span.lo());"}, {"sha": "3bf6b7bb9b19e484ea0de703d880777df2316433", "filename": "tests/ui/suggestions/late-bound-in-borrow-closure-sugg.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.rs?ref=fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "patch": "@@ -0,0 +1,28 @@\n+use std::cell::RefCell;\n+use std::collections::HashMap;\n+use std::rc::Rc;\n+\n+pub struct Trader<'a> {\n+    closure: Box<dyn Fn(&mut Trader) + 'a>,\n+}\n+\n+impl<'a> Trader<'a> {\n+    pub fn new() -> Self {\n+        Trader {\n+            closure: Box::new(|_| {}),\n+        }\n+    }\n+    pub fn set_closure(&mut self, function: impl Fn(&mut Trader) + 'a) {\n+        //foo\n+    }\n+}\n+\n+fn main() {\n+    let closure = |trader : Trader| {\n+        println!(\"Woooosh!\");\n+    };\n+\n+    let mut trader = Trader::new();\n+    trader.set_closure(closure);\n+    //~^ ERROR type mismatch in closure arguments\n+}"}, {"sha": "6820af1fd45c36e03418bf26e18241566b6ff667", "filename": "tests/ui/suggestions/late-bound-in-borrow-closure-sugg.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.stderr?ref=fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "patch": "@@ -0,0 +1,26 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/late-bound-in-borrow-closure-sugg.rs:26:24\n+   |\n+LL |     let closure = |trader : Trader| {\n+   |                   ----------------- found signature defined here\n+...\n+LL |     trader.set_closure(closure);\n+   |            ----------- ^^^^^^^ expected due to this\n+   |            |\n+   |            required by a bound introduced by this call\n+   |\n+   = note: expected closure signature `for<'a, 'b> fn(&'a mut Trader<'b>) -> _`\n+              found closure signature `for<'a> fn(Trader<'a>) -> _`\n+note: required by a bound in `Trader::<'a>::set_closure`\n+  --> $DIR/late-bound-in-borrow-closure-sugg.rs:15:50\n+   |\n+LL |     pub fn set_closure(&mut self, function: impl Fn(&mut Trader) + 'a) {\n+   |                                                  ^^^^^^^^^^^^^^^ required by this bound in `Trader::<'a>::set_closure`\n+help: consider borrowing the argument\n+   |\n+LL |     let closure = |trader : &mut Trader| {\n+   |                             ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}]}