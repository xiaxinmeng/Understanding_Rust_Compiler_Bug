{"sha": "7498d036935b9a7cbf651765783cbf92fa3e0f09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OThkMDM2OTM1YjlhN2NiZjY1MTc2NTc4M2NiZjkyZmEzZTBmMDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-09T01:41:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-09T01:55:01Z"}, "message": "Improve the error message for import glob collisions. Closes #482\n\nInstead of noting where the imported things were defined, note where they were\nimported. This is more useful and avoids issue #482.", "tree": {"sha": "c05e48e9942bebabe660438325aa75944b9ba4f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c05e48e9942bebabe660438325aa75944b9ba4f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7498d036935b9a7cbf651765783cbf92fa3e0f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7498d036935b9a7cbf651765783cbf92fa3e0f09", "html_url": "https://github.com/rust-lang/rust/commit/7498d036935b9a7cbf651765783cbf92fa3e0f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7498d036935b9a7cbf651765783cbf92fa3e0f09/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "394b8fcd1c4b545002ef7e4b7b1259f55a6e2878", "url": "https://api.github.com/repos/rust-lang/rust/commits/394b8fcd1c4b545002ef7e4b7b1259f55a6e2878", "html_url": "https://github.com/rust-lang/rust/commit/394b8fcd1c4b545002ef7e4b7b1259f55a6e2878"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "32976aadedea2d5c14a541e425fce8da66a6efb2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7498d036935b9a7cbf651765783cbf92fa3e0f09/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7498d036935b9a7cbf651765783cbf92fa3e0f09/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=7498d036935b9a7cbf651765783cbf92fa3e0f09", "patch": "@@ -92,10 +92,13 @@ tag mod_index_entry {\n \n type mod_index = hashmap[ident, list[mod_index_entry]];\n \n+// A tuple of an imported def and the import stmt that brung it\n+type glob_imp_def = tup(def, @ast::view_item);\n+\n type indexed_mod =\n     rec(option::t[ast::_mod] m,\n         mod_index index,\n-        mutable vec[def] glob_imports,\n+        mutable vec[glob_imp_def] glob_imports,\n         hashmap[str, import_state] glob_imported_names);\n \n \n@@ -105,7 +108,7 @@ type indexed_mod =\n type def_map = hashmap[node_id, def];\n \n type env =\n-    rec(cstore::use_crate_map crate_map,\n+    rec(cstore::cstore cstore,\n         def_map def_map,\n         constr_table fn_constrs,\n         ast_map::map ast_map,\n@@ -125,7 +128,7 @@ tag namespace { ns_value; ns_type; ns_module; }\n fn resolve_crate(session sess, &ast_map::map amap, @ast::crate crate) ->\n    tup(def_map, constr_table) {\n     auto e =\n-        @rec(crate_map=sess.get_cstore().use_crate_map,\n+        @rec(cstore=sess.get_cstore(),\n              def_map=new_int_hash[def](),\n              fn_constrs = new_int_hash[ty::constr_def[]](),\n              ast_map=amap,\n@@ -158,7 +161,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n     e.mod_map.insert(-1,\n                      @rec(m=some(c.node.module),\n                           index=index_mod(c.node.module),\n-                          mutable glob_imports=vec::empty[def](),\n+                          mutable glob_imports=[],\n                           glob_imported_names=new_str_hash[import_state]()));\n     fn index_vi(@env e, &@ast::view_item i, &scopes sc, &vt[scopes] v) {\n         alt (i.node) {\n@@ -176,15 +179,15 @@ fn map_crate(&@env e, &@ast::crate c) {\n                 e.mod_map.insert(i.id,\n                                  @rec(m=some(md),\n                                       index=index_mod(md),\n-                                      mutable glob_imports=vec::empty[def](),\n+                                      mutable glob_imports=[],\n                                       glob_imported_names=s));\n             }\n             case (ast::item_native_mod(?nmd)) {\n                 auto s = new_str_hash[import_state]();\n                 e.mod_map.insert(i.id,\n                                  @rec(m=none[ast::_mod],\n                                       index=index_nmod(nmd),\n-                                      mutable glob_imports=vec::empty[def](),\n+                                      mutable glob_imports=[],\n                                       glob_imported_names=s));\n             }\n             case (_) { }\n@@ -225,7 +228,7 @@ fn map_crate(&@env e, &@ast::crate c) {\n                 auto imp = follow_import(*e, sc, path, vi.span);\n                 if (option::is_some(imp)) {\n                     find_mod(e, sc).glob_imports +=\n-                        [option::get(imp)];\n+                        [tup(option::get(imp), vi)];\n                 }\n             }\n             case (_) { }\n@@ -883,7 +886,8 @@ fn found_view_item(&env e, @ast::view_item vi, namespace ns) ->\n    option::t[def] {\n     alt (vi.node) {\n         case (ast::view_item_use(_, _, ?id)) {\n-            ret some(ast::def_mod(tup(e.crate_map.get(id), -1)));\n+            auto crate_map = e.cstore.use_crate_map;\n+            ret some(ast::def_mod(tup(crate_map.get(id), -1)));\n         }\n         case (ast::view_item_import(_, _, ?id)) {\n             ret lookup_import(e, local_def(id), ns);\n@@ -954,21 +958,31 @@ fn lookup_glob_in_mod(&env e, @indexed_mod info, &span sp, &ident id,\n                       namespace wanted_ns, dir dr) -> option::t[def] {\n     fn per_ns(&env e, @indexed_mod info, &span sp, &ident id, namespace ns,\n               dir dr) -> option::t[def] {\n+\n+        fn lookup_in_mod_(&env e, &glob_imp_def def, &span sp,\n+                          &ident name, namespace ns,\n+                          dir dr) -> option::t[glob_imp_def] {\n+            alt (lookup_in_mod(e, def._0, sp, name, ns, dr)) {\n+                case (option::some(?d)) {\n+                    option::some(tup(d, def._1))\n+                }\n+                case (option::none) {\n+                    option::none\n+                }\n+            }\n+        }\n+\n         auto matches =\n-            vec::filter_map(bind lookup_in_mod(e, _, sp, id, ns, dr),\n+            vec::filter_map(bind lookup_in_mod_(e, _, sp, id, ns, dr),\n                             { info.glob_imports });\n         if (vec::len(matches) == 0u) {\n             ret none[def];\n         } else if (vec::len(matches) == 1u) {\n-            ret some[def](matches.(0));\n+            ret some[def](matches.(0)._0);\n         } else {\n-            for (def match in matches) {\n-                auto span = alt (e.ast_map.get(ast::def_id_of_def(match)._1)){\n-                    case (ast_map::node_item(?it)) { it.span }\n-                    case (ast_map::node_obj_ctor(?it)) { it.span }\n-                    case (ast_map::node_native_item(?it)) { it.span }\n-                };\n-                e.sess.span_note(span, \"'\" + id + \"' is defined here.\");\n+            for (glob_imp_def match in matches) {\n+                auto sp = match._1.span;\n+                e.sess.span_note(sp, #fmt(\"'%s' is imported here\", id));\n             }\n             e.sess.span_fatal(sp,\n                             \"'\" + id + \"' is glob-imported from\" +"}, {"sha": "f29d553a4860ad76e5a3251d8876d29b8160395d", "filename": "src/test/compile-fail/cross-crate-glob-collision.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7498d036935b9a7cbf651765783cbf92fa3e0f09/src%2Ftest%2Fcompile-fail%2Fcross-crate-glob-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7498d036935b9a7cbf651765783cbf92fa3e0f09/src%2Ftest%2Fcompile-fail%2Fcross-crate-glob-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-crate-glob-collision.rs?ref=7498d036935b9a7cbf651765783cbf92fa3e0f09", "patch": "@@ -0,0 +1,14 @@\n+// xfail-stage0\n+// error-pattern:'swap' is glob-imported from multiple different modules\n+// issue #482\n+\n+use std;\n+// expecting swap to be defined in vec\n+import std::vec::*;\n+import alternate_supplier::*;\n+\n+mod alternate_supplier {\n+  fn swap() {}\n+}\n+\n+fn main() { swap() }"}]}