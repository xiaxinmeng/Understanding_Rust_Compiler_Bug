{"sha": "21fab435da99d6ef14c1c870650ee976499564f3", "node_id": "C_kwDOAAsO6NoAKDIxZmFiNDM1ZGE5OWQ2ZWYxNGMxYzg3MDY1MGVlOTc2NDk5NTY0ZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T09:54:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T09:54:21Z"}, "message": "Auto merge of #104844 - cjgillot:mention-eval-place, r=jackh726,RalfJung\n\nEvaluate place expression in `PlaceMention`\n\nhttps://github.com/rust-lang/rust/pull/102256 introduces a `PlaceMention(place)` MIR statement which keep trace of `let _ = place` statements from surface rust, but without semantics.\n\nThis PR proposes to change the behaviour of `let _ =` patterns with respect to the borrow-checker to verify that the bound place is live.\n\nSpecifically, consider this code:\n```rust\nlet _ = {\n    let a = 5;\n    &a\n};\n```\n\nThis passes borrowck without error on stable. Meanwhile, replacing `_` by `_: _` or `_p` errors with \"error[E0597]: `a` does not live long enough\", [see playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=c448d25a7c205dc95a0967fe96bccce8).\n\nThis PR *does not* change how `_` patterns behave with respect to initializedness: it remains ok to bind a moved-from place to `_`.\n\nThe relevant test is `tests/ui/borrowck/let_underscore_temporary.rs`. Crater check found no regression.\n\nFor consistency, this PR changes miri to evaluate the place found in `PlaceMention`, and report eventual dangling pointers found within it.\n\nr? `@RalfJung`", "tree": {"sha": "b95343fbae959c8db04ea9f9fcc6b0dc19bc24c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b95343fbae959c8db04ea9f9fcc6b0dc19bc24c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21fab435da99d6ef14c1c870650ee976499564f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21fab435da99d6ef14c1c870650ee976499564f3", "html_url": "https://github.com/rust-lang/rust/commit/21fab435da99d6ef14c1c870650ee976499564f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21fab435da99d6ef14c1c870650ee976499564f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb6290e437bdeccbd509795f00a2390dad1fbeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb6290e437bdeccbd509795f00a2390dad1fbeb", "html_url": "https://github.com/rust-lang/rust/commit/ccb6290e437bdeccbd509795f00a2390dad1fbeb"}, {"sha": "2870d269f5eb26e77ccf7718080afc62edaca8da", "url": "https://api.github.com/repos/rust-lang/rust/commits/2870d269f5eb26e77ccf7718080afc62edaca8da", "html_url": "https://github.com/rust-lang/rust/commit/2870d269f5eb26e77ccf7718080afc62edaca8da"}], "stats": {"total": 240, "additions": 201, "deletions": 39}, "files": [{"sha": "6259722b6940f1d3f2de5a2f34989e087e856a2a", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -52,12 +52,16 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n \n+        // `PlaceMention` and `AscribeUserType` both evaluate the place, which must not\n+        // contain dangling references.\n+        PlaceContext::NonUse(NonUseContext::PlaceMention) |\n+        PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n+\n         PlaceContext::MutatingUse(MutatingUseContext::AddressOf) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) |\n-        PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n         PlaceContext::MutatingUse(MutatingUseContext::Retag) =>\n             Some(DefUse::Use),\n \n@@ -72,8 +76,6 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n         PlaceContext::MutatingUse(MutatingUseContext::Drop) =>\n             Some(DefUse::Drop),\n \n-        // This statement exists to help unsafeck. It does not require the place to be live.\n-        PlaceContext::NonUse(NonUseContext::PlaceMention) => None,\n         // Debug info is neither def nor use.\n         PlaceContext::NonUse(NonUseContext::VarDebugInfo) => None,\n "}, {"sha": "06986f848bfeb75331abea476e244364dd2deb32", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -79,7 +79,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             }\n             // Only relevant for mir typeck\n             StatementKind::AscribeUserType(..)\n-            // Only relevant for unsafeck\n+            // Only relevant for liveness and unsafeck\n             | StatementKind::PlaceMention(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)"}, {"sha": "5bf3e7632ac21d7dce301fbf51cf39a3bb51a969", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -665,7 +665,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             }\n             // Only relevant for mir typeck\n             StatementKind::AscribeUserType(..)\n-            // Only relevant for unsafeck\n+            // Only relevant for liveness and unsafeck\n             | StatementKind::PlaceMention(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)"}, {"sha": "319b80d66e18eda264185a7eba8bd56e516e22c1", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -113,8 +113,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Intrinsic(box intrinsic) => self.emulate_nondiverging_intrinsic(intrinsic)?,\n \n-            // Statements we do not track.\n-            PlaceMention(..) | AscribeUserType(..) => {}\n+            // Evaluate the place expression, without reading from it.\n+            PlaceMention(box place) => {\n+                let _ = self.eval_place(*place)?;\n+            }\n+\n+            // This exists purely to guide borrowck lifetime inference, and does not have\n+            // an operational effect.\n+            AscribeUserType(..) => {}\n \n             // Currently, Miri discards Coverage statements. Coverage statements are only injected\n             // via an optional compile time MIR pass and have no side effects. Since Coverage"}, {"sha": "b8809d29c77d5d11c590edb4d20af698114ac8f2", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -802,14 +802,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     }\n                 }\n             }\n-            StatementKind::PlaceMention(..) => {\n-                if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n-                    self.fail(\n-                        location,\n-                        \"`PlaceMention` should have been removed after drop lowering phase\",\n-                    );\n-                }\n-            }\n             StatementKind::AscribeUserType(..) => {\n                 if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n                     self.fail(\n@@ -919,6 +911,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             StatementKind::StorageDead(_)\n             | StatementKind::Coverage(_)\n             | StatementKind::ConstEvalCounter\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Nop => {}\n         }\n "}, {"sha": "7b0b5102c2db655a8c0c7fbdcf6eb222ee1b59c0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -768,6 +768,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_enable_passes, vec![(\"DestProp\".to_string(), false)]);\n+    tracked!(mir_keep_place_mention, true);\n     tracked!(mir_opt_level, Some(4));\n     tracked!(move_size_limit, Some(4096));\n     tracked!(mutable_noalias, false);"}, {"sha": "69ce6835ba681cd091a2f3e20f4fd2a1ed2101b5", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -331,9 +331,8 @@ pub enum StatementKind<'tcx> {\n     /// This is especially useful for `let _ = PLACE;` bindings that desugar to a single\n     /// `PlaceMention(PLACE)`.\n     ///\n-    /// When executed at runtime this is a nop.\n-    ///\n-    /// Disallowed after drop elaboration.\n+    /// When executed at runtime, this computes the given place, but then discards\n+    /// it without doing a load. It is UB if the place is not pointing to live memory.\n     PlaceMention(Box<Place<'tcx>>),\n \n     /// Encodes a user's type ascription. These need to be preserved"}, {"sha": "d435d3ee69b76a94eda4fe73a4ff40d60eb8aa0d", "filename": "compiler/rustc_mir_transform/src/cleanup_post_borrowck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -24,7 +24,6 @@ impl<'tcx> MirPass<'tcx> for CleanupPostBorrowck {\n             for statement in basic_block.statements.iter_mut() {\n                 match statement.kind {\n                     StatementKind::AscribeUserType(..)\n-                    | StatementKind::PlaceMention(..)\n                     | StatementKind::Assign(box (_, Rvalue::Ref(_, BorrowKind::Shallow, _)))\n                     | StatementKind::FakeRead(..) => statement.make_nop(),\n                     _ => (),"}, {"sha": "7bc5183a00a8255658f64d25cb6d58b377b8bb79", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -54,11 +54,10 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::Coverage(_)\n                 | StatementKind::Intrinsic(_)\n                 | StatementKind::ConstEvalCounter\n+                | StatementKind::PlaceMention(_)\n                 | StatementKind::Nop => (),\n \n-                StatementKind::FakeRead(_)\n-                | StatementKind::PlaceMention(_)\n-                | StatementKind::AscribeUserType(_, _) => {\n+                StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {\n                     bug!(\"{:?} not found in this MIR phase!\", &statement.kind)\n                 }\n             }"}, {"sha": "78758e2db28abfdb7ad77277ac6c5c65d83a9b16", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -582,10 +582,9 @@ impl WriteInfo {\n             | StatementKind::Nop\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageLive(_)\n-            | StatementKind::StorageDead(_) => (),\n-            StatementKind::FakeRead(_)\n-            | StatementKind::AscribeUserType(_, _)\n-            | StatementKind::PlaceMention(_) => {\n+            | StatementKind::StorageDead(_)\n+            | StatementKind::PlaceMention(_) => (),\n+            StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {\n                 bug!(\"{:?} not found in this MIR phase\", statement)\n             }\n         }"}, {"sha": "6d8b4dc91f49de5b7c25d3bb9432bccd0f2fdf5c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -48,6 +48,7 @@ mod add_retag;\n mod check_const_item_mutation;\n mod check_packed_ref;\n pub mod check_unsafety;\n+mod remove_place_mention;\n // This pass is public to allow external drivers to perform MIR cleanup\n pub mod cleanup_post_borrowck;\n mod const_debuginfo;\n@@ -460,8 +461,11 @@ fn run_runtime_lowering_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n /// Returns the sequence of passes that do the initial cleanup of runtime MIR.\n fn run_runtime_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let passes: &[&dyn MirPass<'tcx>] =\n-        &[&lower_intrinsics::LowerIntrinsics, &simplify::SimplifyCfg::ElaborateDrops];\n+    let passes: &[&dyn MirPass<'tcx>] = &[\n+        &lower_intrinsics::LowerIntrinsics,\n+        &remove_place_mention::RemovePlaceMention,\n+        &simplify::SimplifyCfg::ElaborateDrops,\n+    ];\n \n     pm::run_passes(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::PostCleanup)));\n "}, {"sha": "8be1c37572d14d5cded6c477ffeb9e4899ef0632", "filename": "compiler/rustc_mir_transform/src/remove_place_mention.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_place_mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_place_mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_place_mention.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -0,0 +1,23 @@\n+//! This pass removes `PlaceMention` statement, which has no effect at codegen.\n+\n+use crate::MirPass;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+\n+pub struct RemovePlaceMention;\n+\n+impl<'tcx> MirPass<'tcx> for RemovePlaceMention {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        !sess.opts.unstable_opts.mir_keep_place_mention\n+    }\n+\n+    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        trace!(\"Running RemovePlaceMention on {:?}\", body.source);\n+        for data in body.basic_blocks.as_mut_preserves_cfg() {\n+            data.statements.retain(|statement| match statement.kind {\n+                StatementKind::PlaceMention(..) | StatementKind::Nop => false,\n+                _ => true,\n+            })\n+        }\n+    }\n+}"}, {"sha": "d9f03fe14072ee9ca13971c44b870ebe7fb196cb", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -1558,6 +1558,9 @@ options! {\n         \"use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be \\\n         enabled, overriding all other checks. Passes that are not specified are enabled or \\\n         disabled by other flags as usual.\"),\n+    mir_keep_place_mention: bool = (false, parse_bool, [TRACKED],\n+        \"keep place mention MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n+        (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::mir_opt_level` instead of this field\")]\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),"}, {"sha": "35ce89c79864997d89152fe2c6152b2038debc27", "filename": "src/tools/clippy/tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -25,7 +25,7 @@ fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n     let _ = string.map_or(0, |s| s.len());\n     let _ = num.as_ref().map_or(&0, |s| s);\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });\n@@ -34,7 +34,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         s += 1;\n         s\n     });\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });"}, {"sha": "c8683e5aae2d0a2fa298f6c62982442bb0cced67", "filename": "src/tools/clippy/tests/ui/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -33,7 +33,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n     let _ = if let Some(ref s) = num { s } else { &0 };\n     let _ = if let Some(mut s) = num {\n@@ -46,7 +46,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n }\n "}, {"sha": "f5e4affb67229cd8019736e61b54381a76158b5a", "filename": "src/tools/clippy/tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -30,13 +30,13 @@ LL |       let _ = if let Some(s) = &mut num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });\n@@ -76,13 +76,13 @@ LL |       let _ = if let Some(ref mut s) = num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });"}, {"sha": "fc938080a0efdb102ad1a0557e96aa6f1d78a982", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -130,6 +130,7 @@ pub const MIRI_DEFAULT_ARGS: &[&str] = &[\n     \"-Zalways-encode-mir\",\n     \"-Zextra-const-ub-checks\",\n     \"-Zmir-emit-retag\",\n+    \"-Zmir-keep-place-mention\",\n     \"-Zmir-opt-level=0\",\n     \"-Zmir-enable-passes=-CheckAlignment\",\n ];"}, {"sha": "7c5f440b774f2bb9b7d3b8cb0e7a63b9b50da16d", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_deref_underscore.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -0,0 +1,13 @@\n+// Make sure we find these even with many checks disabled.\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+\n+fn main() {\n+    let p = {\n+        let b = Box::new(42);\n+        &*b as *const i32\n+    };\n+    unsafe {\n+        let _ = *p; //~ ERROR: dereferenced after this allocation got freed\n+    }\n+    panic!(\"this should never print\");\n+}"}, {"sha": "7b76389c753594a5282c902e62b975600c7e29d2", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_deref_underscore.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/dangling_pointer_deref_underscore.rs:LL:CC\n+   |\n+LL |         let _ = *p;\n+   |                 ^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/dangling_pointer_deref_underscore.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "835cd20798f06b413dc2a6eb49a43b8bdc05012c", "filename": "tests/ui/borrowck/let_underscore_temporary.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.rs?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// check-fail\n \n fn let_underscore(string: &Option<&str>, mut num: Option<i32>) {\n     let _ = if let Some(s) = *string { s.len() } else { 0 };\n@@ -8,6 +8,7 @@ fn let_underscore(string: &Option<&str>, mut num: Option<i32>) {\n         s\n     } else {\n         &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n     };\n     let _ = if let Some(ref s) = num { s } else { &0 };\n     let _ = if let Some(mut s) = num {\n@@ -21,6 +22,33 @@ fn let_underscore(string: &Option<&str>, mut num: Option<i32>) {\n         s\n     } else {\n         &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n+    };\n+}\n+\n+fn let_ascribe(string: &Option<&str>, mut num: Option<i32>) {\n+    let _: _ = if let Some(s) = *string { s.len() } else { 0 };\n+    let _: _ = if let Some(s) = &num { s } else { &0 };\n+    let _: _ = if let Some(s) = &mut num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n+    };\n+    let _: _ = if let Some(ref s) = num { s } else { &0 };\n+    let _: _ = if let Some(mut s) = num {\n+        s += 1;\n+        s\n+    } else {\n+        0\n+    };\n+    let _: _ = if let Some(ref mut s) = num {\n+        *s += 1;\n+        s\n+    } else {\n+        &mut 0\n+        //~^ ERROR temporary value dropped while borrowed\n     };\n }\n "}, {"sha": "74f3598c4d001fc9159a102300520d6f6f68c042", "filename": "tests/ui/borrowck/let_underscore_temporary.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Flet_underscore_temporary.stderr?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -0,0 +1,79 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:10:14\n+   |\n+LL |       let _ = if let Some(s) = &mut num {\n+   |  _____________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:24:14\n+   |\n+LL |       let _ = if let Some(ref mut s) = num {\n+   |  _____________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:36:14\n+   |\n+LL |       let _: _ = if let Some(s) = &mut num {\n+   |  ________________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/let_underscore_temporary.rs:50:14\n+   |\n+LL |       let _: _ = if let Some(ref mut s) = num {\n+   |  ________________-\n+LL | |         *s += 1;\n+LL | |         s\n+LL | |     } else {\n+LL | |         &mut 0\n+   | |              ^ creates a temporary value which is freed while still in use\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |_____temporary value is freed at the end of this statement\n+   |       borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "c825cc8d668659a2a584fd29ff3eb536e6e36aff", "filename": "tests/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21fab435da99d6ef14c1c870650ee976499564f3/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21fab435da99d6ef14c1c870650ee976499564f3/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=21fab435da99d6ef14c1c870650ee976499564f3", "patch": "@@ -25,8 +25,6 @@ LL |     };\n error[E0597]: `x` does not live long enough\n   --> $DIR/send-is-not-static-std-sync-2.rs:31:25\n    |\n-LL |     let (_tx, rx) = {\n-   |          --- borrow later used here\n LL |         let x = 1;\n    |             - binding `x` declared here\n LL |         let (tx, rx) = mpsc::channel();"}]}