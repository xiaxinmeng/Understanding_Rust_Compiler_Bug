{"sha": "a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NzEwNTM5Y2I3NWJhYzViZGQyYjRiY2ViZTI5MmQ2YTlhNDQ0YzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T13:39:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T13:39:43Z"}, "message": "expand the patterns test with a bunch more scenarios", "tree": {"sha": "93fc2988ba6e9afeb30ad1204f5ef28e62ab73ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93fc2988ba6e9afeb30ad1204f5ef28e62ab73ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "html_url": "https://github.com/rust-lang/rust/commit/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6628ecec60afd4b6a797a9e193f9a02d395924", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6628ecec60afd4b6a797a9e193f9a02d395924", "html_url": "https://github.com/rust-lang/rust/commit/2f6628ecec60afd4b6a797a9e193f9a02d395924"}], "stats": {"total": 177, "additions": 172, "deletions": 5}, "files": [{"sha": "c4ed72c7482deffa3f605a8dfd61d25b1d5d8c97", "filename": "src/test/ui/nll/user-annotations/patterns.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs?ref=a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "patch": "@@ -2,7 +2,23 @@\n \n #![feature(nll)]\n \n-fn main() {\n+fn variable_no_initializer() {\n+    // FIXME: It is unclear to me whether this should be an error or not.\n+\n+    let x = 22;\n+    let y: &'static u32;\n+    y = &x;\n+}\n+\n+fn variable_with_initializer() {\n+    let x = 22;\n+    let y: &'static u32 = &x; //~ ERROR\n+}\n+\n+fn underscore_with_initializer() {\n+    let x = 22;\n+    let _: &'static u32 = &x; //~ ERROR\n+\n     let _: Vec<&'static String> = vec![&String::new()];\n     //~^ ERROR borrowed value does not live long enough [E0597]\n \n@@ -12,3 +28,65 @@ fn main() {\n     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n     //~^ ERROR borrowed value does not live long enough [E0597]\n }\n+\n+fn pair_underscores_with_initializer() {\n+    let x = 22;\n+    let (_, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n+}\n+\n+fn pair_variable_with_initializer() {\n+    let x = 22;\n+    let (y, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n+}\n+\n+struct Single<T> { value: T }\n+\n+fn struct_single_field_variable_with_initializer() {\n+    let x = 22;\n+    let Single { value: y }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n+}\n+\n+fn struct_single_field_underscore_with_initializer() {\n+    let x = 22;\n+    let Single { value: _ }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n+}\n+\n+struct Double<T> { value1: T, value2: T }\n+\n+fn struct_double_field_underscore_with_initializer() {\n+    let x = 22;\n+    let Double { value1: _, value2: _ }: Double<&'static u32> = Double {\n+        value1: &x, //~ ERROR\n+        value2: &44,\n+    };\n+}\n+\n+fn static_to_a_to_static_through_variable<'a>(x: &'a u32) -> &'static u32 {\n+    // The error in this test is inconsistency with\n+    // `static_to_a_to_static_through_tuple`, but \"feels right\" to\n+    // me. It occurs because we special case the single binding case\n+    // and force the type of `y` to be `&'a u32`, even though the\n+    // right-hand side has type `&'static u32`.\n+\n+    let y: &'a u32 = &22;\n+    y //~ ERROR\n+}\n+\n+fn static_to_a_to_static_through_tuple<'a>(x: &'a u32) -> &'static u32 {\n+    // FIXME: The fact that this type-checks is perhaps surprising.\n+    // What happens is that the right-hand side is constrained to have\n+    // type `&'a u32`, which is possible, because it has type\n+    // `&'static u32`. The variable `y` is then forced to have type\n+    // `&'static u32`, but it is constrained only by the right-hand\n+    // side, not the ascribed type, and hence it passes.\n+\n+    let (y, _z): (&'a u32, u32) = (&22, 44);\n+    y\n+}\n+\n+fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n+    let (y, _z): (&'static u32, u32) = (x, 44); //~ ERROR\n+    y\n+}\n+\n+fn main() { }"}, {"sha": "e1208bfb5ec97ed6fb7867d0eb7561ef77eeafcc", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 93, "deletions": 4, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "patch": "@@ -1,5 +1,26 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:15:27\n+   |\n+LL |     let y: &'static u32 = &x; //~ ERROR\n+   |                           ^^ borrowed value does not live long enough\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:20:27\n+   |\n+LL |     let _: &'static u32 = &x; //~ ERROR\n+   |                           ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/patterns.rs:6:41\n+  --> $DIR/patterns.rs:22:41\n    |\n LL |     let _: Vec<&'static String> = vec![&String::new()];\n    |                                         ^^^^^^^^^^^^^ - temporary value only lives until here\n@@ -9,7 +30,7 @@ LL |     let _: Vec<&'static String> = vec![&String::new()];\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/patterns.rs:9:52\n+  --> $DIR/patterns.rs:25:52\n    |\n LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    |                                                    ^^^^^^^^^^^^^      - temporary value only lives until here\n@@ -19,7 +40,7 @@ LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/patterns.rs:12:53\n+  --> $DIR/patterns.rs:28:53\n    |\n LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    |                                                     ^^^^^^^^^^^^^      - temporary value only lives until here\n@@ -28,6 +49,74 @@ LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:34:40\n+   |\n+LL |     let (_, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n+   |                                        ^^ borrowed value does not live long enough\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:39:40\n+   |\n+LL |     let (y, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n+   |                                        ^^ borrowed value does not live long enough\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:46:69\n+   |\n+LL |     let Single { value: y }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n+   |                                                                     ^^ borrowed value does not live long enough\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:51:69\n+   |\n+LL |     let Single { value: _ }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n+   |                                                                     ^^ borrowed value does not live long enough\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:59:17\n+   |\n+LL |         value1: &x, //~ ERROR\n+   |                 ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/patterns.rs:72:5\n+   |\n+LL | fn static_to_a_to_static_through_variable<'a>(x: &'a u32) -> &'static u32 {\n+   |                                           -- lifetime `'a` defined here\n+...\n+LL |     y //~ ERROR\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/patterns.rs:88:40\n+   |\n+LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n+   |                            -- lifetime `'a` defined here\n+LL |     let (y, _z): (&'static u32, u32) = (x, 44); //~ ERROR\n+   |                                        ^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}]}