{"sha": "c6b81bc013b5278b917d109b723405e0df413323", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YjgxYmMwMTNiNTI3OGI5MTdkMTA5YjcyMzQwNWUwZGY0MTMzMjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-07T15:09:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-07T15:18:28Z"}, "message": "Rename AssitLabel -> Assist", "tree": {"sha": "fde5c7d0fe22a474ce3b0527254427f96b3ac8ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fde5c7d0fe22a474ce3b0527254427f96b3ac8ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b81bc013b5278b917d109b723405e0df413323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b81bc013b5278b917d109b723405e0df413323", "html_url": "https://github.com/rust-lang/rust/commit/c6b81bc013b5278b917d109b723405e0df413323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b81bc013b5278b917d109b723405e0df413323/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e305731c922a2d32eda89ff22cb636059bc4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e305731c922a2d32eda89ff22cb636059bc4e7", "html_url": "https://github.com/rust-lang/rust/commit/c7e305731c922a2d32eda89ff22cb636059bc4e7"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "81052ab493a7c852707900b84a9633f12b2a1677", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=c6b81bc013b5278b917d109b723405e0df413323", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n+use crate::{Assist, AssistId, GroupLabel, ResolvedAssist};\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n ///\n@@ -91,7 +91,7 @@ impl<'a> AssistContext<'a> {\n pub(crate) struct Assists {\n     resolve: bool,\n     file: FileId,\n-    buf: Vec<(AssistLabel, Option<SourceChange>)>,\n+    buf: Vec<(Assist, Option<SourceChange>)>,\n }\n \n impl Assists {\n@@ -102,7 +102,7 @@ impl Assists {\n         Assists { resolve: false, file: ctx.frange.file_id, buf: Vec::new() }\n     }\n \n-    pub(crate) fn finish_unresolved(self) -> Vec<AssistLabel> {\n+    pub(crate) fn finish_unresolved(self) -> Vec<Assist> {\n         assert!(!self.resolve);\n         self.finish()\n             .into_iter()\n@@ -117,7 +117,7 @@ impl Assists {\n         assert!(self.resolve);\n         self.finish()\n             .into_iter()\n-            .map(|(label, edit)| ResolvedAssist { label, source_change: edit.unwrap() })\n+            .map(|(label, edit)| ResolvedAssist { assist: label, source_change: edit.unwrap() })\n             .collect()\n     }\n \n@@ -128,7 +128,7 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = AssistLabel::new(id, label.into(), None, target);\n+        let label = Assist::new(id, label.into(), None, target);\n         self.add_impl(label, f)\n     }\n     pub(crate) fn add_group(\n@@ -139,10 +139,10 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = AssistLabel::new(id, label.into(), Some(group.clone()), target);\n+        let label = Assist::new(id, label.into(), Some(group.clone()), target);\n         self.add_impl(label, f)\n     }\n-    fn add_impl(&mut self, label: AssistLabel, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n+    fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n         let change_label = label.label.clone();\n         let source_change = if self.resolve {\n             let mut builder = AssistBuilder::new(self.file);\n@@ -156,7 +156,7 @@ impl Assists {\n         Some(())\n     }\n \n-    fn finish(mut self) -> Vec<(AssistLabel, Option<SourceChange>)> {\n+    fn finish(mut self) -> Vec<(Assist, Option<SourceChange>)> {\n         self.buf.sort_by_key(|(label, _edit)| label.target.len());\n         self.buf\n     }"}, {"sha": "a91975d8cca3cddd3da861be1404bd5594ffb74d", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=c6b81bc013b5278b917d109b723405e0df413323", "patch": "@@ -30,7 +30,7 @@ pub(crate) use crate::assist_context::{AssistContext, Assists};\n pub struct AssistId(pub &'static str);\n \n #[derive(Debug, Clone)]\n-pub struct AssistLabel {\n+pub struct Assist {\n     pub id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n@@ -43,30 +43,30 @@ pub struct AssistLabel {\n #[derive(Clone, Debug)]\n pub struct GroupLabel(pub String);\n \n-impl AssistLabel {\n+impl Assist {\n     pub(crate) fn new(\n         id: AssistId,\n         label: String,\n         group: Option<GroupLabel>,\n         target: TextRange,\n-    ) -> AssistLabel {\n+    ) -> Assist {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        AssistLabel { id, label, group, target }\n+        Assist { id, label, group, target }\n     }\n }\n \n #[derive(Debug, Clone)]\n pub struct ResolvedAssist {\n-    pub label: AssistLabel,\n+    pub assist: Assist,\n     pub source_change: SourceChange,\n }\n \n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n /// returned, without actual edits.\n-pub fn unresolved_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n+pub fn unresolved_assists(db: &RootDatabase, range: FileRange) -> Vec<Assist> {\n     let sema = Semantics::new(db);\n     let ctx = AssistContext::new(sema, range);\n     let mut acc = Assists::new_unresolved(&ctx);"}, {"sha": "a81c54d07214dea416c565c1bbbd06ebb4d8da2a", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=c6b81bc013b5278b917d109b723405e0df413323", "patch": "@@ -43,14 +43,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n \n     let mut assist = resolved_assists(&db, frange)\n         .into_iter()\n-        .find(|assist| assist.label.id.0 == assist_id)\n+        .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n                 resolved_assists(&db, frange)\n                     .into_iter()\n-                    .map(|assist| assist.label.id.0)\n+                    .map(|assist| assist.assist.id.0)\n                     .collect::<Vec<_>>()\n                     .join(\", \")\n             )\n@@ -119,7 +119,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n             assert_eq_text!(after, &actual);\n         }\n         (Some(assist), ExpectedResult::Target(target)) => {\n-            let range = assist.label.target;\n+            let range = assist.assist.target;\n             assert_eq_text!(&text_without_caret[range], target);\n         }\n         (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n@@ -140,10 +140,10 @@ fn assist_order_field_struct() {\n     let mut assists = assists.iter();\n \n     assert_eq!(\n-        assists.next().expect(\"expected assist\").label.label,\n+        assists.next().expect(\"expected assist\").assist.label,\n         \"Change visibility to pub(crate)\"\n     );\n-    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n+    assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Add `#[derive]`\");\n }\n \n #[test]\n@@ -162,6 +162,6 @@ fn assist_order_if_expr() {\n     let assists = resolved_assists(&db, frange);\n     let mut assists = assists.iter();\n \n-    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n+    assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n+    assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Replace with match\");\n }"}, {"sha": "0e15f1ccd9135f5807633ee5d859bd317f1797e6", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b81bc013b5278b917d109b723405e0df413323/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=c6b81bc013b5278b917d109b723405e0df413323", "patch": "@@ -475,9 +475,9 @@ impl Analysis {\n             ra_assists::resolved_assists(db, frange)\n                 .into_iter()\n                 .map(|assist| Assist {\n-                    id: assist.label.id,\n-                    label: assist.label.label,\n-                    group_label: assist.label.group.map(|it| it.0),\n+                    id: assist.assist.id,\n+                    label: assist.assist.label,\n+                    group_label: assist.assist.group.map(|it| it.0),\n                     source_change: assist.source_change,\n                 })\n                 .collect()"}]}