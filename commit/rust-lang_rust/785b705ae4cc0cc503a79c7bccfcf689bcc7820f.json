{"sha": "785b705ae4cc0cc503a79c7bccfcf689bcc7820f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NWI3MDVhZTRjYzBjYzUwM2E3OWM3YmNjZmNmNjg5YmNjNzgyMGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-03T17:57:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-28T16:05:34Z"}, "message": "Only run HTML check on rustdoc generated items", "tree": {"sha": "2c38d8c85ccd4e974962606e95ab5ff8c21e6212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c38d8c85ccd4e974962606e95ab5ff8c21e6212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/785b705ae4cc0cc503a79c7bccfcf689bcc7820f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/785b705ae4cc0cc503a79c7bccfcf689bcc7820f", "html_url": "https://github.com/rust-lang/rust/commit/785b705ae4cc0cc503a79c7bccfcf689bcc7820f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/785b705ae4cc0cc503a79c7bccfcf689bcc7820f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af37ed738a0b9b03c350ef225e9682f486dcbfad", "url": "https://api.github.com/repos/rust-lang/rust/commits/af37ed738a0b9b03c350ef225e9682f486dcbfad", "html_url": "https://github.com/rust-lang/rust/commit/af37ed738a0b9b03c350ef225e9682f486dcbfad"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "bf2830254e8190cfeff90f9fe2ca429ad7f2cc48", "filename": "src/tools/html-checker/main.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/785b705ae4cc0cc503a79c7bccfcf689bcc7820f/src%2Ftools%2Fhtml-checker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785b705ae4cc0cc503a79c7bccfcf689bcc7820f/src%2Ftools%2Fhtml-checker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2Fmain.rs?ref=785b705ae4cc0cc503a79c7bccfcf689bcc7820f", "patch": "@@ -11,22 +11,10 @@ fn check_html_file(file: &Path) -> usize {\n         // If a <span> contains only HTML elements and no text, it complains about it.\n         \"TRIM_EMPTY_ELEMENT\",\n         // FIXME: the three next warnings are about <pre> elements which are not supposed to\n-        //        contain HTML. The solution here would be to replace them with a <div> with\n-        //        \"\"\n+        //        contain HTML. The solution here would be to replace them with a <div>\n         \"MISSING_ENDTAG_BEFORE\",\n         \"INSERTING_TAG\",\n         \"DISCARDING_UNEXPECTED\",\n-        // FIXME: mdbook repeats the name attribute on <input>. When the fix is merged upstream,\n-        //        this warning can be used again.\n-        \"REPEATED_ATTRIBUTE\",\n-        // FIXME: mdbook uses \"align\" attribute on <td>, which is not allowed.\n-        \"MISMATCHED_ATTRIBUTE_WARN\",\n-        // FIXME: mdbook doesn't add \"alt\" attribute on images.\n-        \"MISSING_ATTRIBUTE\",\n-        // FIXME: mdbook doesn't escape `&` (in \"&String\" for example).\n-        \"UNKNOWN_ENTITY\",\n-        // Compiler docs have some inlined <style> in the markdown.\n-        \"MOVED_STYLE_TO_HEAD\",\n     ];\n     let to_mute_s = to_mute.join(\",\");\n     let mut command = Command::new(\"tidy\");\n@@ -58,12 +46,21 @@ fn check_html_file(file: &Path) -> usize {\n     }\n }\n \n+const DOCS_TO_CHECK: &[&str] =\n+    &[\"alloc\", \"core\", \"proc_macro\", \"implementors\", \"src\", \"std\", \"test\"];\n+\n // Returns the number of files read and the number of errors.\n fn find_all_html_files(dir: &Path) -> (usize, usize) {\n     let mut files_read = 0;\n     let mut errors = 0;\n \n-    for entry in walkdir::WalkDir::new(dir) {\n+    for entry in walkdir::WalkDir::new(dir).into_iter().filter_entry(|e| {\n+        e.depth() != 1\n+            || e.file_name()\n+                .to_str()\n+                .map(|s| DOCS_TO_CHECK.into_iter().any(|d| *d == s))\n+                .unwrap_or(false)\n+    }) {\n         let entry = entry.expect(\"failed to read file\");\n         if !entry.file_type().is_file() {\n             continue;"}]}