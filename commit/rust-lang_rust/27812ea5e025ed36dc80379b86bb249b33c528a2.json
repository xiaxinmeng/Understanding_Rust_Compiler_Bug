{"sha": "27812ea5e025ed36dc80379b86bb249b33c528a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODEyZWE1ZTAyNWVkMzZkYzgwMzc5Yjg2YmIyNDliMzNjNTI4YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T03:34:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T03:34:29Z"}, "message": "auto merge of #8091 : kevinmehall/rust/const-struct-base, r=alexcrichton\n\nWith an expression like\r\n\r\n    static w : foo = foo { a:5, ..x };\r\n\r\nRust currently gives the error \"constant contains unimplemented expression type\". This branch implements support for constant structs with `..base`.", "tree": {"sha": "d70ce8e8d3067076d66a4e6458cd6cfd1e439398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70ce8e8d3067076d66a4e6458cd6cfd1e439398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27812ea5e025ed36dc80379b86bb249b33c528a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27812ea5e025ed36dc80379b86bb249b33c528a2", "html_url": "https://github.com/rust-lang/rust/commit/27812ea5e025ed36dc80379b86bb249b33c528a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27812ea5e025ed36dc80379b86bb249b33c528a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dbe138cfd462f443fe209bcab12de418786e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dbe138cfd462f443fe209bcab12de418786e45", "html_url": "https://github.com/rust-lang/rust/commit/52dbe138cfd462f443fe209bcab12de418786e45"}, {"sha": "1493141bfdb478c42fb073ef6872540de3b125f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1493141bfdb478c42fb073ef6872540de3b125f0", "html_url": "https://github.com/rust-lang/rust/commit/1493141bfdb478c42fb073ef6872540de3b125f0"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "f31ee2b07ae982d048de33c928cb9cc6ccb08b7a", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=27812ea5e025ed36dc80379b86bb249b33c528a2", "patch": "@@ -160,7 +160,7 @@ pub fn check_expr(sess: Session,\n           expr_field(*) |\n           expr_index(*) |\n           expr_tup(*) |\n-          expr_struct(_, _, None) => { }\n+          expr_struct(*) => { }\n           expr_addr_of(*) => {\n                 sess.span_err(\n                     e.span,"}, {"sha": "3b5cdc51c94a670d7b72b5144676a34411db74af", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=27812ea5e025ed36dc80379b86bb249b33c528a2", "patch": "@@ -485,20 +485,30 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               let vals = es.map(|&e| const_expr(cx, e));\n               adt::trans_const(cx, repr, 0, vals)\n           }\n-          ast::expr_struct(_, ref fs, None) => {\n+          ast::expr_struct(_, ref fs, ref base_opt) => {\n               let ety = ty::expr_ty(cx.tcx, e);\n               let repr = adt::represent_type(cx, ety);\n               let tcx = cx.tcx;\n+\n+              let base_val = match *base_opt {\n+                Some(base) => Some(const_expr(cx, base)),\n+                None => None\n+              };\n+\n               do expr::with_field_tys(tcx, ety, Some(e.id))\n                   |discr, field_tys| {\n-                  let cs = field_tys.map(|field_ty| {\n+                  let cs: ~[ValueRef] = field_tys.iter().enumerate()\n+                      .transform(|(ix, &field_ty)| {\n                       match fs.iter().find_(|f| field_ty.ident == f.ident) {\n                           Some(f) => const_expr(cx, (*f).expr),\n                           None => {\n-                              cx.tcx.sess.span_bug(e.span, \"missing struct field\");\n+                              match base_val {\n+                                Some(bv) => adt::const_get_field(cx, repr, bv, discr, ix),\n+                                None => cx.tcx.sess.span_bug(e.span, \"missing struct field\")\n+                              }\n                           }\n                       }\n-                  });\n+                  }).collect();\n                   adt::trans_const(cx, repr, discr, cs)\n               }\n           }"}, {"sha": "51c47acff0e48ae35e8424d4a6cb3b10c6ae3312", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=27812ea5e025ed36dc80379b86bb249b33c528a2", "patch": "@@ -498,7 +498,7 @@ pub enum expr_ {\n     expr_mac(mac),\n \n     // A struct literal expression.\n-    expr_struct(Path, ~[Field], Option<@expr>),\n+    expr_struct(Path, ~[Field], Option<@expr> /* base */),\n \n     // A vector literal constructed from one repeated element.\n     expr_repeat(@expr /* element */, @expr /* count */, mutability),"}, {"sha": "adda356298d9f1782658bae0dc300743360f5aa8", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=27812ea5e025ed36dc80379b86bb249b33c528a2", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo { a: int, b: int }\n+struct Bar { x: int }\n+\n+static bar: Bar = Bar { x: 5 };\n+static foo: Foo = Foo { a: 2, ..bar }; //~ ERROR mismatched types: expected `Foo` but found `Bar`\n+static foo_i: Foo = Foo { a: 2, ..4 }; //~ ERROR mismatched types: expected `Foo`\n+\n+fn main() {\n+    let b = Bar { x: 5 };\n+    let f = Foo { a: 2, ..b }; //~ ERROR mismatched types: expected `Foo` but found `Bar`\n+    let f_i = Foo { a: 2, ..4 }; //~ ERROR mismatched types: expected `Foo`\n+}"}, {"sha": "684111c491730c4ceecb9a1b3434be94350caa48", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27812ea5e025ed36dc80379b86bb249b33c528a2/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=27812ea5e025ed36dc80379b86bb249b33c528a2", "patch": "@@ -25,11 +25,14 @@ impl cmp::Eq for foo {\n static x : foo = foo { a:1, b:2, c: 3 };\n static y : foo = foo { b:2, c:3, a: 1 };\n static z : &'static foo = &foo { a: 10, b: 22, c: 12 };\n+static w : foo = foo { a:5, ..x };\n \n pub fn main() {\n     assert_eq!(x.b, 2);\n     assert_eq!(x, y);\n     assert_eq!(z.b, 22);\n+    assert_eq!(w.a, 5);\n+    assert_eq!(w.c, 3);\n     printfln!(\"0x%x\", x.b as uint);\n     printfln!(\"0x%x\", z.c as uint);\n }"}]}