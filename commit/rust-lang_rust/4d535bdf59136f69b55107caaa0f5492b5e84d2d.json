{"sha": "4d535bdf59136f69b55107caaa0f5492b5e84d2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNTM1YmRmNTkxMzZmNjliNTUxMDdjYWFhMGY1NDkyYjVlODRkMmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-18T19:29:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T10:56:54Z"}, "message": "Move standard library injection into libsyntax_ext", "tree": {"sha": "656d97ef9c892f9671aa8aae29c990da3662c61b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/656d97ef9c892f9671aa8aae29c990da3662c61b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d535bdf59136f69b55107caaa0f5492b5e84d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d535bdf59136f69b55107caaa0f5492b5e84d2d", "html_url": "https://github.com/rust-lang/rust/commit/4d535bdf59136f69b55107caaa0f5492b5e84d2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d535bdf59136f69b55107caaa0f5492b5e84d2d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6eda9937956667c01bc567ab4a9bd6a19f71635", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6eda9937956667c01bc567ab4a9bd6a19f71635", "html_url": "https://github.com/rust-lang/rust/commit/f6eda9937956667c01bc567ab4a9bd6a19f71635"}], "stats": {"total": 70, "additions": 30, "deletions": 40}, "files": [{"sha": "0d431b010d61e9a64ea76fd99593e658404b2d4d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -63,7 +63,6 @@ use syntax::errors;\n use syntax::ext::hygiene::ExpnId;\n use syntax::print::pprust;\n use syntax::source_map::{respan, ExpnInfo, ExpnKind, DesugaringKind, Spanned};\n-use syntax::std_inject;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::parse::token::{self, Token};\n@@ -241,7 +240,7 @@ pub fn lower_crate(\n     dep_graph.assert_ignored();\n \n     LoweringContext {\n-        crate_root: std_inject::injected_crate_name().map(Symbol::intern),\n+        crate_root: sess.parse_sess.injected_crate_name.try_get().copied(),\n         sess,\n         cstore,\n         resolver,"}, {"sha": "c7be6276f4ac10cc0cf1febba766c22ddea268ab", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -278,7 +278,12 @@ pub fn register_plugins<'a>(\n \n     krate = time(sess, \"crate injection\", || {\n         let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| &**s);\n-        syntax::std_inject::maybe_inject_crates_ref(krate, alt_std_name, sess.edition())\n+        let (krate, name) =\n+            syntax_ext::standard_library_imports::inject(krate, alt_std_name, sess.edition());\n+        if let Some(name) = name {\n+            sess.parse_sess.injected_crate_name.set(name);\n+        }\n+        krate\n     });\n \n     let registrars = time(sess, \"plugin loading\", || {"}, {"sha": "41349cf72a16024c5ef48bcc6a333cbc084e4c39", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -34,7 +34,6 @@ use syntax::ext::hygiene::ExpnId;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::span_err;\n-use syntax::std_inject::injected_crate_name;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n \n@@ -367,8 +366,10 @@ impl<'a> Resolver<'a> {\n                 };\n \n                 self.populate_module_if_necessary(module);\n-                if injected_crate_name().map_or(false, |name| ident.name.as_str() == name) {\n-                    self.injected_crate = Some(module);\n+                if let Some(name) = self.session.parse_sess.injected_crate_name.try_get() {\n+                    if name.as_str() == ident.name.as_str() {\n+                        self.injected_crate = Some(module);\n+                    }\n                 }\n \n                 let used = self.process_legacy_macro_imports(item, module, &parent_scope);"}, {"sha": "bb6a8dfb1411ecf5c355103a458a38229e8047c8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -153,7 +153,6 @@ pub mod mut_visit;\n pub mod parse;\n pub mod ptr;\n pub mod show_span;\n-pub mod std_inject;\n pub use syntax_pos::edition;\n pub use syntax_pos::symbol;\n pub mod tokenstream;"}, {"sha": "1aac8bbb7aa46589d9d07a3af0017a1757f838ef", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -10,9 +10,10 @@ use crate::parse::token::TokenKind;\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust;\n+use crate::symbol::Symbol;\n \n use errors::{Applicability, FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n-use rustc_data_structures::sync::{Lrc, Lock};\n+use rustc_data_structures::sync::{Lrc, Lock, Once};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use syntax_pos::edition::Edition;\n \n@@ -58,6 +59,7 @@ pub struct ParseSess {\n     pub let_chains_spans: Lock<Vec<Span>>,\n     // Places where `async || ..` exprs were used and should be feature gated.\n     pub async_closure_spans: Lock<Vec<Span>>,\n+    pub injected_crate_name: Once<Symbol>,\n }\n \n impl ParseSess {\n@@ -86,6 +88,7 @@ impl ParseSess {\n             param_attr_spans: Lock::new(Vec::new()),\n             let_chains_spans: Lock::new(Vec::new()),\n             async_closure_spans: Lock::new(Vec::new()),\n+            injected_crate_name: Once::new(),\n         }\n     }\n "}, {"sha": "c462357639506d50a29a18f625151d0c703bac1e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -10,7 +10,6 @@ use crate::parse::{self, ParseSess};\n use crate::print::pp::{self, Breaks};\n use crate::print::pp::Breaks::{Consistent, Inconsistent};\n use crate::ptr::P;\n-use crate::std_inject;\n use crate::symbol::{kw, sym};\n use crate::tokenstream::{self, TokenStream, TokenTree};\n \n@@ -114,7 +113,7 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n         is_expanded,\n     };\n \n-    if is_expanded && std_inject::injected_crate_name().is_some() {\n+    if is_expanded && sess.injected_crate_name.try_get().is_some() {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However we don't want these attributes in the AST because"}, {"sha": "f49c75d7424d95920d4be553b56f8102226a1b76", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -43,6 +43,7 @@ mod trace_macros;\n \n pub mod plugin_macro_defs;\n pub mod proc_macro_decls;\n+pub mod standard_library_imports;\n pub mod test_harness;\n \n pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, edition: Edition) {"}, {"sha": "81bb32d79a2aa84eead684dbbe190065925ea2de", "filename": "src/libsyntax_ext/standard_library_imports.rs", "status": "renamed", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d535bdf59136f69b55107caaa0f5492b5e84d2d/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fstandard_library_imports.rs?ref=4d535bdf59136f69b55107caaa0f5492b5e84d2d", "patch": "@@ -1,37 +1,22 @@\n-use crate::ast;\n-use crate::attr;\n-use crate::edition::Edition;\n-use crate::ext::hygiene::{ExpnId, MacroKind};\n-use crate::symbol::{Ident, Symbol, kw, sym};\n-use crate::source_map::{ExpnInfo, ExpnKind, dummy_spanned, respan};\n-use crate::ptr::P;\n-use crate::tokenstream::TokenStream;\n-\n-use std::cell::Cell;\n-use std::iter;\n+use syntax::{ast, attr};\n+use syntax::edition::Edition;\n+use syntax::ext::hygiene::{ExpnId, MacroKind};\n+use syntax::ptr::P;\n+use syntax::source_map::{ExpnInfo, ExpnKind, dummy_spanned, respan};\n+use syntax::symbol::{Ident, Symbol, kw, sym};\n+use syntax::tokenstream::TokenStream;\n use syntax_pos::DUMMY_SP;\n \n-pub fn injected_crate_name() -> Option<&'static str> {\n-    INJECTED_CRATE_NAME.with(|name| name.get())\n-}\n-\n-thread_local! {\n-    // A `Symbol` might make more sense here, but it doesn't work, probably for\n-    // reasons relating to the use of thread-local storage for the Symbol\n-    // interner.\n-    static INJECTED_CRATE_NAME: Cell<Option<&'static str>> = Cell::new(None);\n-}\n+use std::iter;\n \n-pub fn maybe_inject_crates_ref(\n-    mut krate: ast::Crate,\n-    alt_std_name: Option<&str>,\n-    edition: Edition,\n-) -> ast::Crate {\n+pub fn inject(\n+    mut krate: ast::Crate, alt_std_name: Option<&str>, edition: Edition\n+) -> (ast::Crate, Option<Symbol>) {\n     let rust_2018 = edition >= Edition::Edition2018;\n \n     // the first name in this list is the crate name of the crate with the prelude\n     let names: &[&str] = if attr::contains_name(&krate.attrs, sym::no_core) {\n-        return krate;\n+        return (krate, None);\n     } else if attr::contains_name(&krate.attrs, sym::no_std) {\n         if attr::contains_name(&krate.attrs, sym::compiler_builtins) {\n             &[\"core\"]\n@@ -73,8 +58,6 @@ pub fn maybe_inject_crates_ref(\n     // the prelude.\n     let name = names[0];\n \n-    INJECTED_CRATE_NAME.with(|opt_name| opt_name.set(Some(name)));\n-\n     let span = DUMMY_SP.fresh_expansion(ExpnId::root(), ExpnInfo::allow_unstable(\n         ExpnKind::Macro(MacroKind::Attr, sym::std_inject), DUMMY_SP, edition,\n         [sym::prelude_import][..].into(),\n@@ -108,5 +91,5 @@ pub fn maybe_inject_crates_ref(\n         tokens: None,\n     }));\n \n-    krate\n+    (krate, Some(Symbol::intern(name)))\n }", "previous_filename": "src/libsyntax/std_inject.rs"}]}