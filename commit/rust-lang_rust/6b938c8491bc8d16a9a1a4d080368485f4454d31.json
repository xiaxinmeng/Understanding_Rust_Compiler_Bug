{"sha": "6b938c8491bc8d16a9a1a4d080368485f4454d31", "node_id": "C_kwDOAAsO6NoAKDZiOTM4Yzg0OTFiYzhkMTZhOWExYTRkMDgwMzY4NDg1ZjQ0NTRkMzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-04T20:25:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-04T20:25:02Z"}, "message": "Rollup merge of #100093 - wcampbell0x2a:unused-parens-for-match-arms, r=petrochenkov\n\nEnable unused_parens for match arms\n\nFixes: https://github.com/rust-lang/rust/issues/92751\n\nCurrently I can't get the `stderr` to work with `./x.py test`, but this should fix the issue. Help would be appreciated!", "tree": {"sha": "3b64e51f9b87427d80439f52038e85cecaf74fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b64e51f9b87427d80439f52038e85cecaf74fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b938c8491bc8d16a9a1a4d080368485f4454d31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7CseCRBK7hj4Ov3rIwAAXHYIACd0h9Vquo69XgMpiZjGr7NK\nus7xyPp9PnltPX/+TDOaCr7bqpSIjej6V2iN2xiRDT8Yey9O+5jvHgyutrV4WtAW\nlmuNUlZXPLM+0q6m9PYUVQHOnxFJ/Ao6p8wBW6Z5A788fTFpx3GfSnE1DiTyXfYJ\nUbrt2iYVS+y10ntsQWBub4dBICoCM0hvLXGsYnH5Tp215R6YCJsDqJSpF6d22/PN\nCshWK0huEC0FBRKfY1MQStg+YrPvB3msJEHErgjmi4y2N3kdKsKbZquBZEPTg7jv\nIEYhHzAJMZG2Cq2hgilSWoQMYcknDi3gGjEmD/vuG6hWFEOeZbDsZLX+mROn1OU=\n=fspO\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b64e51f9b87427d80439f52038e85cecaf74fce\nparent d3aa757ff8244f83a7dfe4995fe5d2da78399252\nparent 8dd44f1af4ac49331d0998eebae21d54b0ab5bde\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659644702 +0200\ncommitter GitHub <noreply@github.com> 1659644702 +0200\n\nRollup merge of #100093 - wcampbell0x2a:unused-parens-for-match-arms, r=petrochenkov\n\nEnable unused_parens for match arms\n\nFixes: https://github.com/rust-lang/rust/issues/92751\n\nCurrently I can't get the `stderr` to work with `./x.py test`, but this should fix the issue. Help would be appreciated!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b938c8491bc8d16a9a1a4d080368485f4454d31", "html_url": "https://github.com/rust-lang/rust/commit/6b938c8491bc8d16a9a1a4d080368485f4454d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b938c8491bc8d16a9a1a4d080368485f4454d31/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3aa757ff8244f83a7dfe4995fe5d2da78399252", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3aa757ff8244f83a7dfe4995fe5d2da78399252", "html_url": "https://github.com/rust-lang/rust/commit/d3aa757ff8244f83a7dfe4995fe5d2da78399252"}, {"sha": "8dd44f1af4ac49331d0998eebae21d54b0ab5bde", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd44f1af4ac49331d0998eebae21d54b0ab5bde", "html_url": "https://github.com/rust-lang/rust/commit/8dd44f1af4ac49331d0998eebae21d54b0ab5bde"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "5eb7bf6347f7bb5a6b13e85294fd1b29f5d20e36", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=6b938c8491bc8d16a9a1a4d080368485f4454d31", "patch": "@@ -377,7 +377,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n \n     fn print_string(&mut self, st: &str, style: ast::StrStyle) {\n         let st = match style {\n-            ast::StrStyle::Cooked => (format!(\"\\\"{}\\\"\", st.escape_debug())),\n+            ast::StrStyle::Cooked => format!(\"\\\"{}\\\"\", st.escape_debug()),\n             ast::StrStyle::Raw(n) => {\n                 format!(\"r{delim}\\\"{string}\\\"{delim}\", delim = \"#\".repeat(n as usize), string = st)\n             }"}, {"sha": "a87e8bd5ba16fc276183bc1366a121107141dd94", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=6b938c8491bc8d16a9a1a4d080368485f4454d31", "patch": "@@ -839,7 +839,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             hir::Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                 ..\n-            }) => (tcx.sess.source_map().end_point(fn_decl_span)),\n+            }) => tcx.sess.source_map().end_point(fn_decl_span),\n             _ => self.body.span,\n         };\n "}, {"sha": "b6cf182916cb930c81f74c36eff47c1983d45aec", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=6b938c8491bc8d16a9a1a4d080368485f4454d31", "patch": "@@ -396,6 +396,7 @@ enum UnusedDelimsCtx {\n     LetScrutineeExpr,\n     ArrayLenExpr,\n     AnonConst,\n+    MatchArmExpr,\n }\n \n impl From<UnusedDelimsCtx> for &'static str {\n@@ -414,6 +415,7 @@ impl From<UnusedDelimsCtx> for &'static str {\n             UnusedDelimsCtx::BlockRetValue => \"block return value\",\n             UnusedDelimsCtx::LetScrutineeExpr => \"`let` scrutinee expression\",\n             UnusedDelimsCtx::ArrayLenExpr | UnusedDelimsCtx::AnonConst => \"const expression\",\n+            UnusedDelimsCtx::MatchArmExpr => \"match arm expression\",\n         }\n     }\n }\n@@ -805,6 +807,18 @@ impl EarlyLintPass for UnusedParens {\n                 }\n                 return;\n             }\n+            ExprKind::Match(ref _expr, ref arm) => {\n+                for a in arm {\n+                    self.check_unused_delims_expr(\n+                        cx,\n+                        &a.body,\n+                        UnusedDelimsCtx::MatchArmExpr,\n+                        false,\n+                        None,\n+                        None,\n+                    );\n+                }\n+            }\n             _ => {}\n         }\n "}, {"sha": "8d6f8efb6003f9fd7745b02e331859f14cc3ab77", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b938c8491bc8d16a9a1a4d080368485f4454d31/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=6b938c8491bc8d16a9a1a4d080368485f4454d31", "patch": "@@ -617,7 +617,7 @@ impl SplitVarLenSlice {\n             // The only admissible fixed-length slice is one of the array size. Whether `max_slice`\n             // is fixed-length or variable-length, it will be the only relevant slice to output\n             // here.\n-            Some(_) => (0..0), // empty range\n+            Some(_) => 0..0, // empty range\n             // We cover all arities in the range `(self.arity..infinity)`. We split that range into\n             // two: lengths smaller than `max_slice.arity()` are treated independently as\n             // fixed-lengths slices, and lengths above are captured by `max_slice`."}, {"sha": "2fb292736d1368cc949e18b742bb3f53ffa47d45", "filename": "src/test/ui/lint/unused/issue-92751.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b938c8491bc8d16a9a1a4d080368485f4454d31/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-92751.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b938c8491bc8d16a9a1a4d080368485f4454d31/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-92751.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-92751.rs?ref=6b938c8491bc8d16a9a1a4d080368485f4454d31", "patch": "@@ -0,0 +1,9 @@\n+#[deny(unused)]\n+pub fn broken(x: Option<()>) -> i32 {\n+    match x {\n+        Some(()) => (1), //~ ERROR unnecessary parentheses around match arm expression\n+        None => (2), //~ ERROR unnecessary parentheses around match arm expression\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "0a8d8e6729cf5c2c309e5c8c8d76fc3cdf40a267", "filename": "src/test/ui/lint/unused/issue-92751.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b938c8491bc8d16a9a1a4d080368485f4454d31/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-92751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b938c8491bc8d16a9a1a4d080368485f4454d31/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-92751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-92751.stderr?ref=6b938c8491bc8d16a9a1a4d080368485f4454d31", "patch": "@@ -0,0 +1,32 @@\n+error: unnecessary parentheses around match arm expression\n+  --> $DIR/issue-92751.rs:4:21\n+   |\n+LL |         Some(()) => (1),\n+   |                     ^ ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-92751.rs:1:8\n+   |\n+LL | #[deny(unused)]\n+   |        ^^^^^^\n+   = note: `#[deny(unused_parens)]` implied by `#[deny(unused)]`\n+help: remove these parentheses\n+   |\n+LL -         Some(()) => (1),\n+LL +         Some(()) => 1,\n+   |\n+\n+error: unnecessary parentheses around match arm expression\n+  --> $DIR/issue-92751.rs:5:17\n+   |\n+LL |         None => (2),\n+   |                 ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         None => (2),\n+LL +         None => 2,\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}]}