{"sha": "97a8870022ec819c8b92b4c192242726c77e19f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YTg4NzAwMjJlYzgxOWM4YjkyYjRjMTkyMjQyNzI2Yzc3ZTE5ZjM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-30T18:15:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T18:15:28Z"}, "message": "Rollup merge of #71597 - CohenArthur:refactor-unique-empty, r=shepmaster\n\nRename Unique::empty() -> Unique::dangling()\n\nA `FIXME` comment in `src/libcore/ptr/unique.rs` suggested refactoring `Unique::empty()` to `Unique::dangling()` which this PR does.", "tree": {"sha": "03560a70ca5e38fced3b468d9320d33f5811b28e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03560a70ca5e38fced3b468d9320d33f5811b28e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a8870022ec819c8b92b4c192242726c77e19f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqxXBCRBK7hj4Ov3rIwAAdHIIAFgzoGDDoRDnvvkr2hvonOWT\nd7XHzR9hnV22Ya4h0gmWy6gzv3AMVOoTh+MjlFqvHkrWrNn5maJx6P9vu/pXGlgB\nyaWtsgs1UtO/jX0w5MaVOM9oFV74TcJDfTdpmOODSypKE4tuT76eS3eNb4WcnoDC\n0Tzu2+5cQKFkEG5G8TGYlgpBGxbpFu4oyLuXkTU4TXES67r1VyP0+wyxRj1k2OV+\nyD6gfbYaUYJpqRf08JgoyWdfCVGysH39jGGTiuNleBw0yoS7ikcivBZ6K/C5dWzS\njciA5V0DzcZsexc2ygi31kdh7On30Jz1ybWAxJJ2AFa5NfjQeZqpyHngQqKElng=\n=tzLm\n-----END PGP SIGNATURE-----\n", "payload": "tree 03560a70ca5e38fced3b468d9320d33f5811b28e\nparent 2770f820aa770080770df2b29c03113e14f5bdc8\nparent eda7f8fdff16aee5ff30b150555c479f885ba993\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588270528 +0200\ncommitter GitHub <noreply@github.com> 1588270528 +0200\n\nRollup merge of #71597 - CohenArthur:refactor-unique-empty, r=shepmaster\n\nRename Unique::empty() -> Unique::dangling()\n\nA `FIXME` comment in `src/libcore/ptr/unique.rs` suggested refactoring `Unique::empty()` to `Unique::dangling()` which this PR does.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a8870022ec819c8b92b4c192242726c77e19f3", "html_url": "https://github.com/rust-lang/rust/commit/97a8870022ec819c8b92b4c192242726c77e19f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a8870022ec819c8b92b4c192242726c77e19f3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2770f820aa770080770df2b29c03113e14f5bdc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2770f820aa770080770df2b29c03113e14f5bdc8", "html_url": "https://github.com/rust-lang/rust/commit/2770f820aa770080770df2b29c03113e14f5bdc8"}, {"sha": "eda7f8fdff16aee5ff30b150555c479f885ba993", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda7f8fdff16aee5ff30b150555c479f885ba993", "html_url": "https://github.com/rust-lang/rust/commit/eda7f8fdff16aee5ff30b150555c479f885ba993"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "a8e19c9cbaa86152482fe4b49d7446f1604cde3f", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97a8870022ec819c8b92b4c192242726c77e19f3/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a8870022ec819c8b92b4c192242726c77e19f3/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=97a8870022ec819c8b92b4c192242726c77e19f3", "patch": "@@ -25,9 +25,9 @@ mod tests;\n /// involved. This type is excellent for building your own data structures like Vec and VecDeque.\n /// In particular:\n ///\n-/// * Produces `Unique::empty()` on zero-sized types.\n-/// * Produces `Unique::empty()` on zero-length allocations.\n-/// * Avoids freeing `Unique::empty()`.\n+/// * Produces `Unique::dangling()` on zero-sized types.\n+/// * Produces `Unique::dangling()` on zero-length allocations.\n+/// * Avoids freeing `Unique::dangling()`.\n /// * Catches all overflows in capacity computations (promotes them to \"capacity overflow\" panics).\n /// * Guards against 32-bit systems allocating more than isize::MAX bytes.\n /// * Guards against overflowing your length.\n@@ -125,7 +125,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// the returned `RawVec`.\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n-        Self { ptr: Unique::empty(), cap: 0, alloc }\n+        Self { ptr: Unique::dangling(), cap: 0, alloc }\n     }\n \n     /// Like `with_capacity`, but parameterized over the choice of\n@@ -172,7 +172,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     }\n \n     /// Gets a raw pointer to the start of the allocation. Note that this is\n-    /// `Unique::empty()` if `capacity == 0` or `T` is zero-sized. In the former case, you must\n+    /// `Unique::dangling()` if `capacity == 0` or `T` is zero-sized. In the former case, you must\n     /// be careful.\n     pub fn ptr(&self) -> *mut T {\n         self.ptr.as_ptr()"}, {"sha": "f58d35f06137d4ea870403a42cc7cb41ad21bfd1", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97a8870022ec819c8b92b4c192242726c77e19f3/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a8870022ec819c8b92b4c192242726c77e19f3/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=97a8870022ec819c8b92b4c192242726c77e19f3", "patch": "@@ -70,9 +70,8 @@ impl<T: Sized> Unique<T> {\n     /// a `T`, which means this must not be used as a \"not yet initialized\"\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n-    // FIXME: rename to dangling() to match NonNull?\n     #[inline]\n-    pub const fn empty() -> Self {\n+    pub const fn dangling() -> Self {\n         // SAFETY: mem::align_of() returns a valid, non-null pointer. The\n         // conditions to call new_unchecked() are thus respected.\n         unsafe { Unique::new_unchecked(mem::align_of::<T>() as *mut T) }"}, {"sha": "fc13bb98bd2c95c1423d9a908ebc7b3a9432152c", "filename": "src/test/ui/consts/const-ptr-unique-rpass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97a8870022ec819c8b92b4c192242726c77e19f3/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a8870022ec819c8b92b4c192242726c77e19f3/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique-rpass.rs?ref=97a8870022ec819c8b92b4c192242726c77e19f3", "patch": "@@ -8,9 +8,9 @@ use test::black_box as b; // prevent promotion of the argument and const-propaga\n use std::ptr::Unique;\n \n \n-const PTR: *mut u32 = Unique::empty().as_ptr();\n+const PTR: *mut u32 = Unique::dangling().as_ptr();\n \n pub fn main() {\n     // Be super-extra paranoid and cast the fn items to fn pointers before blackboxing them.\n-    assert_eq!(PTR, b::<fn() -> _>(Unique::<u32>::empty)().as_ptr());\n+    assert_eq!(PTR, b::<fn() -> _>(Unique::<u32>::dangling)().as_ptr());\n }"}]}