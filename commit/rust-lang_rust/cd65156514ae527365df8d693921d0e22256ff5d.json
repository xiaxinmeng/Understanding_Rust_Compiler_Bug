{"sha": "cd65156514ae527365df8d693921d0e22256ff5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNjUxNTY1MTRhZTUyNzM2NWRmOGQ2OTM5MjFkMGUyMjI1NmZmNWQ=", "commit": {"author": {"name": "Lai Jiangshan", "email": "laijs@cn.fujitsu.com", "date": "2015-03-02T09:32:16Z"}, "committer": {"name": "Lai Jiangshan", "email": "laijs@cn.fujitsu.com", "date": "2015-03-02T09:32:16Z"}, "message": "iter: use Option::map() in struct Iterater::map()\n\nSigned-off-by: Lai Jiangshan <laijs@cn.fujitsu.com>", "tree": {"sha": "0ea1fc298fa4e3966583ebc4363765c48923be6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea1fc298fa4e3966583ebc4363765c48923be6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd65156514ae527365df8d693921d0e22256ff5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd65156514ae527365df8d693921d0e22256ff5d", "html_url": "https://github.com/rust-lang/rust/commit/cd65156514ae527365df8d693921d0e22256ff5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd65156514ae527365df8d693921d0e22256ff5d/comments", "author": null, "committer": null, "parents": [{"sha": "157614249594f187f421cd97f928e64c5ab5c1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/157614249594f187f421cd97f928e64c5ab5c1fa", "html_url": "https://github.com/rust-lang/rust/commit/157614249594f187f421cd97f928e64c5ab5c1fa"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "80041006e8e7944a96387cf8c664ffb7f589f272", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd65156514ae527365df8d693921d0e22256ff5d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd65156514ae527365df8d693921d0e22256ff5d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=cd65156514ae527365df8d693921d0e22256ff5d", "patch": "@@ -1565,24 +1565,13 @@ pub struct Map<I, F> {\n     f: F,\n }\n \n-impl<I: Iterator, F, B> Map<I, F> where F: FnMut(I::Item) -> B {\n-    #[inline]\n-    fn do_map(&mut self, elt: Option<I::Item>) -> Option<B> {\n-        match elt {\n-            Some(a) => Some((self.f)(a)),\n-            _ => None\n-        }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B, I: Iterator, F> Iterator for Map<I, F> where F: FnMut(I::Item) -> B {\n     type Item = B;\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        let next = self.iter.next();\n-        self.do_map(next)\n+        self.iter.next().map(|a| (self.f)(a))\n     }\n \n     #[inline]\n@@ -1597,8 +1586,7 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n-        let next = self.iter.next_back();\n-        self.do_map(next)\n+        self.iter.next_back().map(|a| (self.f)(a))\n     }\n }\n \n@@ -1613,8 +1601,7 @@ impl<B, I: RandomAccessIterator, F> RandomAccessIterator for Map<I, F> where\n \n     #[inline]\n     fn idx(&mut self, index: usize) -> Option<B> {\n-        let elt = self.iter.idx(index);\n-        self.do_map(elt)\n+        self.iter.idx(index).map(|a| (self.f)(a))\n     }\n }\n "}]}