{"sha": "16f67ee384d5b49358de167069535af727b87dba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjY3ZWUzODRkNWI0OTM1OGRlMTY3MDY5NTM1YWY3MjdiODdkYmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:11:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:11:29Z"}, "message": "move resolve_local to Scopes", "tree": {"sha": "0394f293061b4fc6a2d5a0a4a55025ce1b655f12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0394f293061b4fc6a2d5a0a4a55025ce1b655f12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f67ee384d5b49358de167069535af727b87dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f67ee384d5b49358de167069535af727b87dba", "html_url": "https://github.com/rust-lang/rust/commit/16f67ee384d5b49358de167069535af727b87dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f67ee384d5b49358de167069535af727b87dba/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7207eef716c0970df1b3523f8f4bb685518f8f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/7207eef716c0970df1b3523f8f4bb685518f8f73", "html_url": "https://github.com/rust-lang/rust/commit/7207eef716c0970df1b3523f8f4bb685518f8f73"}], "stats": {"total": 214, "additions": 105, "deletions": 109}, "files": [{"sha": "d171b6a8d0ce65b4700b0d9e7b2b8eea964cd8e4", "filename": "crates/ra_analysis/src/hir/function/mod.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs?ref=16f67ee384d5b49358de167069535af727b87dba", "patch": "@@ -6,8 +6,8 @@ use std::{\n };\n \n use ra_syntax::{\n+    TextRange, TextUnit, SyntaxNodeRef,\n     ast::{self, AstNode, DocCommentsOwner, NameOwner},\n-    TextRange, TextUnit,\n };\n \n use crate::{\n@@ -39,6 +39,32 @@ impl FunctionDescriptor {\n         FunctionDescriptor { fn_id }\n     }\n \n+    pub(crate) fn guess_for_name_ref(\n+        db: &impl HirDatabase,\n+        file_id: FileId,\n+        name_ref: ast::NameRef,\n+    ) -> Option<FunctionDescriptor> {\n+        FunctionDescriptor::guess_for_node(db, file_id, name_ref.syntax())\n+    }\n+\n+    pub(crate) fn guess_for_bind_pat(\n+        db: &impl HirDatabase,\n+        file_id: FileId,\n+        bind_pat: ast::BindPat,\n+    ) -> Option<FunctionDescriptor> {\n+        FunctionDescriptor::guess_for_node(db, file_id, bind_pat.syntax())\n+    }\n+\n+    fn guess_for_node(\n+        db: &impl HirDatabase,\n+        file_id: FileId,\n+        node: SyntaxNodeRef,\n+    ) -> Option<FunctionDescriptor> {\n+        let fn_def = node.ancestors().find_map(ast::FnDef::cast)?;\n+        let res = FunctionDescriptor::guess_from_source(db, file_id, fn_def);\n+        Some(res)\n+    }\n+\n     pub(crate) fn scope(&self, db: &impl HirDatabase) -> Arc<FnScopes> {\n         db.fn_scopes(self.fn_id)\n     }"}, {"sha": "76b2fea68b7419bbcc921662075ce931cbf25c51", "filename": "crates/ra_analysis/src/hir/function/scope.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fscope.rs?ref=16f67ee384d5b49358de167069535af727b87dba", "patch": "@@ -1,9 +1,9 @@\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use ra_syntax::{\n+    AstNode, SmolStr, SyntaxNodeRef, TextRange,\n     algo::generate,\n     ast::{self, ArgListOwner, LoopBodyOwner, NameOwner},\n-    AstNode, SmolStr, SyntaxNodeRef,\n };\n \n use crate::{\n@@ -70,6 +70,27 @@ impl FnScopes {\n             .nth(0);\n         ret\n     }\n+\n+    pub fn find_all_refs(&self, pat: ast::BindPat) -> Vec<ReferenceDescriptor> {\n+        let fn_def = pat.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n+        let name_ptr = LocalSyntaxPtr::new(pat.syntax());\n+        let refs: Vec<_> = fn_def\n+            .syntax()\n+            .descendants()\n+            .filter_map(ast::NameRef::cast)\n+            .filter(|name_ref| match self.resolve_local_name(*name_ref) {\n+                None => false,\n+                Some(entry) => entry.ptr() == name_ptr,\n+            })\n+            .map(|name_ref| ReferenceDescriptor {\n+                name: name_ref.syntax().text().to_string(),\n+                range: name_ref.syntax().range(),\n+            })\n+            .collect();\n+\n+        refs\n+    }\n+\n     fn root_scope(&mut self) -> ScopeId {\n         self.scopes.alloc(ScopeData {\n             parent: None,\n@@ -262,6 +283,12 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct ReferenceDescriptor {\n+    pub range: TextRange,\n+    pub name: String,\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ra_editor::find_node_at_offset;"}, {"sha": "e234173a9992890ae4ee7ffc48e045dcbc3e0106", "filename": "crates/ra_analysis/src/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs?ref=16f67ee384d5b49358de167069535af727b87dba", "patch": "@@ -11,15 +11,9 @@ mod function;\n mod module;\n mod path;\n \n-use ra_syntax::{\n-    ast::{self, AstNode},\n-    TextRange,\n-};\n-\n use crate::{\n     hir::db::HirDatabase,\n     loc2id::{DefId, DefLoc},\n-    syntax_ptr::LocalSyntaxPtr,\n     Cancelable,\n };\n \n@@ -49,50 +43,3 @@ impl DefId {\n         Ok(res)\n     }\n }\n-\n-#[derive(Debug)]\n-pub struct ReferenceDescriptor {\n-    pub range: TextRange,\n-    pub name: String,\n-}\n-\n-#[derive(Debug)]\n-pub struct DeclarationDescriptor<'a> {\n-    pat: ast::BindPat<'a>,\n-    pub range: TextRange,\n-}\n-\n-impl<'a> DeclarationDescriptor<'a> {\n-    pub fn new(pat: ast::BindPat) -> DeclarationDescriptor {\n-        let range = pat.syntax().range();\n-\n-        DeclarationDescriptor { pat, range }\n-    }\n-\n-    pub fn find_all_refs(&self) -> Vec<ReferenceDescriptor> {\n-        let name_ptr = LocalSyntaxPtr::new(self.pat.syntax());\n-\n-        let fn_def = match self.pat.syntax().ancestors().find_map(ast::FnDef::cast) {\n-            Some(def) => def,\n-            None => return Default::default(),\n-        };\n-\n-        let fn_scopes = FnScopes::new(fn_def);\n-\n-        let refs: Vec<_> = fn_def\n-            .syntax()\n-            .descendants()\n-            .filter_map(ast::NameRef::cast)\n-            .filter(|name_ref| match fn_scopes.resolve_local_name(*name_ref) {\n-                None => false,\n-                Some(entry) => entry.ptr() == name_ptr,\n-            })\n-            .map(|name_ref| ReferenceDescriptor {\n-                name: name_ref.syntax().text().to_string(),\n-                range: name_ref.syntax().range(),\n-            })\n-            .collect();\n-\n-        refs\n-    }\n-}"}, {"sha": "377f7420f04d4cd632a2163a229da8619fe9e5c5", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=16f67ee384d5b49358de167069535af727b87dba", "patch": "@@ -7,7 +7,7 @@ use std::{\n use ra_editor::{self, find_node_at_offset, FileSymbol, LineIndex, LocalEdit};\n use ra_syntax::{\n     ast::{self, ArgListOwner, Expr, NameOwner},\n-    AstNode, SourceFileNode, SmolStr,\n+    AstNode, SourceFileNode,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n@@ -22,7 +22,6 @@ use crate::{\n     hir::{\n         FunctionDescriptor, FnSignatureInfo, ModuleDescriptor,\n         Problem,\n-        DeclarationDescriptor,\n     },\n     input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n     symbol_index::SymbolIndex,\n@@ -273,24 +272,27 @@ impl AnalysisImpl {\n         let file = self.db.file_syntax(position.file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n-            // First try to resolve the symbol locally\n-            return if let Some((name, range)) =\n-                resolve_local_name(&self.db, position.file_id, name_ref)\n+            if let Some(fn_descr) =\n+                FunctionDescriptor::guess_for_name_ref(&*self.db, position.file_id, name_ref)\n             {\n-                let mut vec = vec![];\n-                vec.push((\n-                    position.file_id,\n-                    FileSymbol {\n-                        name,\n-                        node_range: range,\n-                        kind: NAME,\n-                    },\n-                ));\n-                Ok(vec)\n-            } else {\n-                // If that fails try the index based approach.\n-                self.index_resolve(name_ref)\n-            };\n+                let scope = fn_descr.scope(&*self.db);\n+                // First try to resolve the symbol locally\n+                return if let Some(entry) = scope.resolve_local_name(name_ref) {\n+                    let mut vec = vec![];\n+                    vec.push((\n+                        position.file_id,\n+                        FileSymbol {\n+                            name: entry.name().clone(),\n+                            node_range: entry.ptr().range(),\n+                            kind: NAME,\n+                        },\n+                    ));\n+                    Ok(vec)\n+                } else {\n+                    // If that fails try the index based approach.\n+                    self.index_resolve(name_ref)\n+                };\n+            }\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n@@ -320,31 +322,41 @@ impl AnalysisImpl {\n \n     pub fn find_all_refs(&self, position: FilePosition) -> Vec<(FileId, TextRange)> {\n         let file = self.db.file_syntax(position.file_id);\n-        let syntax = file.syntax();\n-\n         // Find the binding associated with the offset\n-        let maybe_binding =\n-            find_node_at_offset::<ast::BindPat>(syntax, position.offset).or_else(|| {\n-                let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n-                let resolved = resolve_local_name(&self.db, position.file_id, name_ref)?;\n-                find_node_at_offset::<ast::BindPat>(syntax, resolved.1.end())\n-            });\n-\n-        let binding = match maybe_binding {\n+        let (binding, descr) = match find_binding(&self.db, &file, position) {\n             None => return Vec::new(),\n             Some(it) => it,\n         };\n \n-        let decl = DeclarationDescriptor::new(binding);\n-\n-        let mut ret = vec![(position.file_id, decl.range)];\n+        let mut ret = vec![(position.file_id, binding.syntax().range())];\n         ret.extend(\n-            decl.find_all_refs()\n+            descr\n+                .scope(&*self.db)\n+                .find_all_refs(binding)\n                 .into_iter()\n                 .map(|ref_desc| (position.file_id, ref_desc.range)),\n         );\n \n-        ret\n+        return ret;\n+\n+        fn find_binding<'a>(\n+            db: &db::RootDatabase,\n+            source_file: &'a SourceFileNode,\n+            position: FilePosition,\n+        ) -> Option<(ast::BindPat<'a>, FunctionDescriptor)> {\n+            let syntax = source_file.syntax();\n+            if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n+                let descr = FunctionDescriptor::guess_for_bind_pat(db, position.file_id, binding)?;\n+                return Some((binding, descr));\n+            };\n+            let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n+            let descr = FunctionDescriptor::guess_for_name_ref(db, position.file_id, name_ref)?;\n+            let scope = descr.scope(db);\n+            let resolved = scope.resolve_local_name(name_ref)?;\n+            let resolved = resolved.ptr().resolve(source_file);\n+            let binding = find_node_at_offset::<ast::BindPat>(syntax, resolved.range().end())?;\n+            Some((binding, descr))\n+        }\n     }\n \n     pub fn doc_comment_for(\n@@ -582,16 +594,3 @@ impl<'a> FnCallNode<'a> {\n         }\n     }\n }\n-\n-fn resolve_local_name(\n-    db: &db::RootDatabase,\n-    file_id: FileId,\n-    name_ref: ast::NameRef,\n-) -> Option<(SmolStr, TextRange)> {\n-    let fn_def = name_ref.syntax().ancestors().find_map(ast::FnDef::cast)?;\n-    let function = FunctionDescriptor::guess_from_source(db, file_id, fn_def);\n-    let scopes = function.scope(db);\n-    let scope_entry = scopes.resolve_local_name(name_ref)?;\n-    let syntax = db.resolve_syntax_ptr(scope_entry.ptr().into_global(file_id));\n-    Some((scope_entry.name().clone(), syntax.range()))\n-}"}, {"sha": "3168e82a759f8a16648b066237ed96d39cea6f11", "filename": "crates/ra_analysis/src/syntax_ptr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs?ref=16f67ee384d5b49358de167069535af727b87dba", "patch": "@@ -56,11 +56,8 @@ impl LocalSyntaxPtr {\n         }\n     }\n \n-    pub(crate) fn into_global(self, file_id: FileId) -> SyntaxPtr {\n-        SyntaxPtr {\n-            file_id,\n-            local: self,\n-        }\n+    pub(crate) fn range(self) -> TextRange {\n+        self.range\n     }\n }\n "}, {"sha": "8e785602773d5d3ff70d6e112ac0aaecf444c4b2", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f67ee384d5b49358de167069535af727b87dba/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=16f67ee384d5b49358de167069535af727b87dba", "patch": "@@ -10,10 +10,10 @@ use test_utils::assert_eq_dbg;\n \n use ra_analysis::{\n     mock_analysis::{analysis_and_position, single_file, single_file_with_position, MockAnalysis},\n-    AnalysisChange, CrateGraph, FileId, FnDescriptor,\n+    AnalysisChange, CrateGraph, FileId, FnSignatureInfo,\n };\n \n-fn get_signature(text: &str) -> (FnDescriptor, Option<usize>) {\n+fn get_signature(text: &str) -> (FnSignatureInfo, Option<usize>) {\n     let (analysis, position) = single_file_with_position(text);\n     analysis.resolve_callable(position).unwrap().unwrap()\n }"}]}