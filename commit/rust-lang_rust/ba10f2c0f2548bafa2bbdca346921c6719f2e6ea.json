{"sha": "ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "node_id": "C_kwDOAAsO6NoAKGJhMTBmMmMwZjI1NDhiYWZhMmJiZGNhMzQ2OTIxYzY3MTlmMmU2ZWE", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-04T18:12:00Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-27T18:29:19Z"}, "message": "Migrate \"expected semicolon\" diagnostics to diagnostic structs", "tree": {"sha": "d52b849fe6c67d1c81b252100a9a60ea43196301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d52b849fe6c67d1c81b252100a9a60ea43196301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "html_url": "https://github.com/rust-lang/rust/commit/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7507ee29fcee3dea2819dc113434ba97d7716422", "url": "https://api.github.com/repos/rust-lang/rust/commits/7507ee29fcee3dea2819dc113434ba97d7716422", "html_url": "https://github.com/rust-lang/rust/commit/7507ee29fcee3dea2819dc113434ba97d7716422"}], "stats": {"total": 98, "additions": 82, "deletions": 16}, "files": [{"sha": "22fb65f02680d5514276a19a1136898ac6aaa1c1", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "patch": "@@ -306,3 +306,13 @@ parser_expected_identifier = expected identifier\n parser_sugg_escape_to_use_as_identifier = escape `{$ident_name}` to use it as an identifier\n \n parser_sugg_remove_comma = remove this comma\n+\n+parser_expected_semi_found_reserved_identifier_str = expected `;`, found reserved identifier `{$token_str}`\n+parser_expected_semi_found_keyword_str = expected `;`, found keyword `{$token_str}`\n+parser_expected_semi_found_reserved_keyword_str = expected `;`, found reserved keyword `{$token_str}`\n+parser_expected_semi_found_doc_comment_str = expected `;`, found doc comment `{$token_str}`\n+parser_expected_semi_found_str = expected `;`, found `{$token_str}`\n+\n+parser_sugg_change_this_to_semi = change this to `;`\n+parser_sugg_add_semi = add `;` here\n+parser_label_unexpected_token = unexpected token"}, {"sha": "07785b7344f2549387856050a1b106ca6a81da9a", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "patch": "@@ -963,3 +963,54 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n         diag\n     }\n }\n+\n+pub(crate) struct ExpectedSemi {\n+    pub span: Span,\n+    pub token_descr: TokenDescription,\n+\n+    pub unexpected_token_label: Option<Span>,\n+    pub sugg: ExpectedSemiSugg,\n+}\n+\n+impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedSemi {\n+    fn into_diagnostic(\n+        self,\n+        handler: &'a rustc_errors::Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'a, G> {\n+        let mut diag = handler.struct_diagnostic(match self.token_descr.kind {\n+            Some(TokenDescriptionKind::ReservedIdentifier) => {\n+                fluent::parser::expected_semi_found_reserved_identifier_str\n+            }\n+            Some(TokenDescriptionKind::Keyword) => fluent::parser::expected_semi_found_keyword_str,\n+            Some(TokenDescriptionKind::ReservedKeyword) => {\n+                fluent::parser::expected_semi_found_reserved_keyword_str\n+            }\n+            Some(TokenDescriptionKind::DocComment) => {\n+                fluent::parser::expected_semi_found_doc_comment_str\n+            }\n+            None => fluent::parser::expected_semi_found_str,\n+        });\n+        diag.set_span(self.span);\n+        diag.set_arg(\"token_str\", self.token_descr.name);\n+\n+        if let Some(unexpected_token_label) = self.unexpected_token_label {\n+            diag.span_label(unexpected_token_label, fluent::parser::label_unexpected_token);\n+        }\n+\n+        self.sugg.add_to_diagnostic(&mut diag);\n+\n+        diag\n+    }\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum ExpectedSemiSugg {\n+    #[suggestion(\n+        parser::sugg_change_this_to_semi,\n+        code = \";\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    ChangeToSemi(#[primary_span] Span),\n+    #[suggestion_short(parser::sugg_add_semi, code = \";\", applicability = \"machine-applicable\")]\n+    AddSemi(#[primary_span] Span),\n+}"}, {"sha": "ba48e4e1c2525af306fe0bcd57ba933a45c29aba", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba10f2c0f2548bafa2bbdca346921c6719f2e6ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=ba10f2c0f2548bafa2bbdca346921c6719f2e6ea", "patch": "@@ -4,9 +4,9 @@ use super::{\n     TokenExpectType, TokenType,\n };\n use crate::errors::{\n-    AmbiguousPlus, BadQPathStage2, BadTypePlus, BadTypePlusSub, ExpectedIdentifier, InInTypo,\n-    IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait, SuggEscapeToUseAsIdentifier,\n-    SuggRemoveComma, UseEqInstead,\n+    AmbiguousPlus, BadQPathStage2, BadTypePlus, BadTypePlusSub, ExpectedIdentifier, ExpectedSemi,\n+    ExpectedSemiSugg, InInTypo, IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait,\n+    SuggEscapeToUseAsIdentifier, SuggRemoveComma, UseEqInstead,\n };\n \n use crate::lexer::UnmatchedBrace;\n@@ -388,8 +388,8 @@ impl<'a> Parser<'a> {\n         expected.dedup();\n \n         let sm = self.sess.source_map();\n-        let msg = format!(\"expected `;`, found {}\", super::token_descr(&self.token));\n-        let appl = Applicability::MachineApplicable;\n+\n+        // Special-case \"expected `;`\" errors\n         if expected.contains(&TokenType::Token(token::Semi)) {\n             if self.token.span == DUMMY_SP || self.prev_token.span == DUMMY_SP {\n                 // Likely inside a macro, can't provide meaningful suggestions.\n@@ -417,11 +417,13 @@ impl<'a> Parser<'a> {\n                 //\n                 //   let x = 32:\n                 //   let y = 42;\n+                self.sess.emit_err(ExpectedSemi {\n+                    span: self.token.span,\n+                    token_descr: super::token_descr_struct(&self.token),\n+                    unexpected_token_label: None,\n+                    sugg: ExpectedSemiSugg::ChangeToSemi(self.token.span),\n+                });\n                 self.bump();\n-                let sp = self.prev_token.span;\n-                self.struct_span_err(sp, &msg)\n-                    .span_suggestion_short(sp, \"change this to `;`\", \";\", appl)\n-                    .emit();\n                 return Ok(true);\n             } else if self.look_ahead(0, |t| {\n                 t == &token::CloseDelim(Delimiter::Brace)\n@@ -439,11 +441,13 @@ impl<'a> Parser<'a> {\n                 //\n                 //   let x = 32\n                 //   let y = 42;\n-                let sp = self.prev_token.span.shrink_to_hi();\n-                self.struct_span_err(sp, &msg)\n-                    .span_label(self.token.span, \"unexpected token\")\n-                    .span_suggestion_short(sp, \"add `;` here\", \";\", appl)\n-                    .emit();\n+                let span = self.prev_token.span.shrink_to_hi();\n+                self.sess.emit_err(ExpectedSemi {\n+                    span,\n+                    token_descr: super::token_descr_struct(&self.token),\n+                    unexpected_token_label: Some(self.token.span),\n+                    sugg: ExpectedSemiSugg::AddSemi(span),\n+                });\n                 return Ok(true);\n             }\n         }\n@@ -480,6 +484,7 @@ impl<'a> Parser<'a> {\n             )\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n+        // FIXME: translation requires list formatting (for `expect`)\n         let mut err = self.struct_span_err(self.token.span, &msg_exp);\n \n         if let TokenKind::Ident(symbol, _) = &self.prev_token.kind {\n@@ -488,7 +493,7 @@ impl<'a> Parser<'a> {\n                     self.prev_token.span,\n                     &format!(\"write `fn` instead of `{symbol}` to declare a function\"),\n                     \"fn\",\n-                    appl,\n+                    Applicability::MachineApplicable,\n                 );\n             }\n         }\n@@ -502,7 +507,7 @@ impl<'a> Parser<'a> {\n                 self.prev_token.span,\n                 \"write `pub` instead of `public` to make the item public\",\n                 \"pub\",\n-                appl,\n+                Applicability::MachineApplicable,\n             );\n         }\n "}]}