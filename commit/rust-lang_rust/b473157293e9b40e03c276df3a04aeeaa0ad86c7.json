{"sha": "b473157293e9b40e03c276df3a04aeeaa0ad86c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NzMxNTcyOTNlOWI0MGUwM2MyNzZkZjNhMDRhZWVhYTBhZDg2Yzc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-22T09:37:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-22T09:37:53Z"}, "message": "Rollup merge of #56067 - jethrogb:jb/sgx-target-spec, r=alexcrichton\n\nAdd SGX target to rustc\n\nThis adds the `x86_64-fortanix-unknown-sgx` target specification to the Rust compiler. See #56066 for more details about this target.", "tree": {"sha": "54cee0b55938188d781f27ffa658dc07a7fba72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54cee0b55938188d781f27ffa658dc07a7fba72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b473157293e9b40e03c276df3a04aeeaa0ad86c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb9njxCRBK7hj4Ov3rIwAAdHIIAEJcvr/hYeW4R48GPrJvjTET\nregPY+Z3k+SabN2PQfSD2DxL0wNnO2qDDnNbAYhQ4tNZlndFFbNq7YvUVQGmbJcm\nQ9S2X53swuFFhv5JuB1gu3Mu11its9IIFVFg26cvgtOmktLqJ1ba7KbpDPQxiPr6\nrVdTHPIx00mgdyz7AqoOx6ThsDsUA0IGOMOwp7JU2stDmdxXTmqbL4vTZamqg4Mi\nZvNgIuD6pQDH8gQThbvL0wXrx7iRWm0jnpY9FtfrwXKWs/QcfIhXzi5VpmGIj1bt\ne7yGRHMI5K2TIYqnXFA6QG9+v69lnDI4Qyx1dXx3Kg7PlvL0It9LwFfPYo9fke4=\n=UJPW\n-----END PGP SIGNATURE-----\n", "payload": "tree 54cee0b55938188d781f27ffa658dc07a7fba72f\nparent 1646fc907e474b12a1887c7d684fde25c9c9a3f1\nparent 9e2e57511f13569c8e9de910c04540ad1b93a321\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1542879473 +0100\ncommitter GitHub <noreply@github.com> 1542879473 +0100\n\nRollup merge of #56067 - jethrogb:jb/sgx-target-spec, r=alexcrichton\n\nAdd SGX target to rustc\n\nThis adds the `x86_64-fortanix-unknown-sgx` target specification to the Rust compiler. See #56066 for more details about this target.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b473157293e9b40e03c276df3a04aeeaa0ad86c7", "html_url": "https://github.com/rust-lang/rust/commit/b473157293e9b40e03c276df3a04aeeaa0ad86c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b473157293e9b40e03c276df3a04aeeaa0ad86c7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1646fc907e474b12a1887c7d684fde25c9c9a3f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1646fc907e474b12a1887c7d684fde25c9c9a3f1", "html_url": "https://github.com/rust-lang/rust/commit/1646fc907e474b12a1887c7d684fde25c9c9a3f1"}, {"sha": "9e2e57511f13569c8e9de910c04540ad1b93a321", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2e57511f13569c8e9de910c04540ad1b93a321", "html_url": "https://github.com/rust-lang/rust/commit/9e2e57511f13569c8e9de910c04540ad1b93a321"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "ec5ca5801049eebe45b8d74bfcf98bb0c6b06f3b", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b473157293e9b40e03c276df3a04aeeaa0ad86c7/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b473157293e9b40e03c276df3a04aeeaa0ad86c7/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=b473157293e9b40e03c276df3a04aeeaa0ad86c7", "patch": "@@ -1050,6 +1050,10 @@ impl<'a> Linker for WasmLd<'a> {\n }\n \n fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n+    if let Some(ref exports) = tcx.sess.target.target.options.override_export_symbols {\n+        return exports.clone()\n+    }\n+\n     let mut symbols = Vec::new();\n \n     let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);"}, {"sha": "75ba4d9bd1105dbe6a2f1dd0a10cc9d6a80cdf7c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b473157293e9b40e03c276df3a04aeeaa0ad86c7/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b473157293e9b40e03c276df3a04aeeaa0ad86c7/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=b473157293e9b40e03c276df3a04aeeaa0ad86c7", "patch": "@@ -414,6 +414,8 @@ supported_targets! {\n     (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n \n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n+\n+    (\"x86_64-fortanix-unknown-sgx\", x86_64_fortanix_unknown_sgx),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target.\n@@ -685,6 +687,10 @@ pub struct TargetOptions {\n     /// target features. This is `true` by default, and `false` for targets like\n     /// wasm32 where the whole program either has simd or not.\n     pub simd_types_indirect: bool,\n+\n+    /// If set, have the linker export exactly these symbols, instead of using\n+    /// the usual logic to figure this out from the crate itself.\n+    pub override_export_symbols: Option<Vec<String>>\n }\n \n impl Default for TargetOptions {\n@@ -765,6 +771,7 @@ impl Default for TargetOptions {\n             emit_debug_gdb_scripts: true,\n             requires_uwtable: false,\n             simd_types_indirect: true,\n+            override_export_symbols: None,\n         }\n     }\n }\n@@ -900,6 +907,14 @@ impl Target {\n                         )\n                     );\n             } );\n+            ($key_name:ident, opt_list) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).map(|o| o.as_array()\n+                    .map(|v| base.options.$key_name = Some(v.iter()\n+                        .map(|a| a.as_string().unwrap().to_string()).collect())\n+                        )\n+                    );\n+            } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(o) = obj.find(&name[..]) {\n@@ -1046,6 +1061,7 @@ impl Target {\n         key!(emit_debug_gdb_scripts, bool);\n         key!(requires_uwtable, bool);\n         key!(simd_types_indirect, bool);\n+        key!(override_export_symbols, opt_list);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1255,6 +1271,7 @@ impl ToJson for Target {\n         target_option_val!(emit_debug_gdb_scripts);\n         target_option_val!(requires_uwtable);\n         target_option_val!(simd_types_indirect);\n+        target_option_val!(override_export_symbols);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "07383b3d64862430b332413b5490cad227025756", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b473157293e9b40e03c276df3a04aeeaa0ad86c7/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b473157293e9b40e03c276df3a04aeeaa0ad86c7/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=b473157293e9b40e03c276df3a04aeeaa0ad86c7", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::iter;\n+\n+use super::{LinkerFlavor, Target, TargetOptions, PanicStrategy};\n+\n+pub fn target() -> Result<Target, String> {\n+    const PRE_LINK_ARGS: &[&str] = &[\n+        \"-Wl,--as-needed\",\n+        \"-Wl,-z,noexecstack\",\n+        \"-m64\",\n+         \"-fuse-ld=gold\",\n+         \"-nostdlib\",\n+         \"-shared\",\n+         \"-Wl,-e,sgx_entry\",\n+         \"-Wl,-Bstatic\",\n+         \"-Wl,--gc-sections\",\n+         \"-Wl,-z,text\",\n+         \"-Wl,-z,norelro\",\n+         \"-Wl,--rosegment\",\n+         \"-Wl,--no-undefined\",\n+         \"-Wl,--error-unresolved-symbols\",\n+         \"-Wl,--no-undefined-version\",\n+         \"-Wl,-Bsymbolic\",\n+         \"-Wl,--export-dynamic\",\n+    ];\n+    const EXPORT_SYMBOLS: &[&str] = &[\n+        \"sgx_entry\",\n+        \"HEAP_BASE\",\n+        \"HEAP_SIZE\",\n+        \"RELA\",\n+        \"RELACOUNT\",\n+        \"ENCLAVE_SIZE\",\n+        \"CFGDATA_BASE\",\n+        \"DEBUG\",\n+    ];\n+    let opts = TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        linker_is_gnu: true,\n+        max_atomic_width: Some(64),\n+        panic_strategy: PanicStrategy::Abort,\n+        cpu: \"x86-64\".into(),\n+        position_independent_executables: true,\n+        pre_link_args: iter::once(\n+                (LinkerFlavor::Gcc, PRE_LINK_ARGS.iter().cloned().map(String::from).collect())\n+        ).collect(),\n+        override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(String::from).collect()),\n+        ..Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"x86_64-unknown-linux-gnu\".into(),\n+        target_endian: \"little\".into(),\n+        target_pointer_width: \"64\".into(),\n+        target_c_int_width: \"32\".into(),\n+        target_os: \"unknown\".into(),\n+        target_env: \"sgx\".into(),\n+        target_vendor: \"fortanix\".into(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".into(),\n+        arch: \"x86_64\".into(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: opts,\n+    })\n+}"}]}