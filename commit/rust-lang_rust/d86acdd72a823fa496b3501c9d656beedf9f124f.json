{"sha": "d86acdd72a823fa496b3501c9d656beedf9f124f", "node_id": "C_kwDOAAsO6NoAKGQ4NmFjZGQ3MmE4MjNmYTQ5NmIzNTAxYzlkNjU2YmVlZGY5ZjEyNGY", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-23T12:49:38Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:24Z"}, "message": "Prevent propagation of overflow if overflow occured", "tree": {"sha": "a60fba0f4a8258aeb010aa9d555138d19db1de9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a60fba0f4a8258aeb010aa9d555138d19db1de9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86acdd72a823fa496b3501c9d656beedf9f124f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86acdd72a823fa496b3501c9d656beedf9f124f", "html_url": "https://github.com/rust-lang/rust/commit/d86acdd72a823fa496b3501c9d656beedf9f124f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86acdd72a823fa496b3501c9d656beedf9f124f/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7b309c60465ec948b42332673ac3860f2d2482", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7b309c60465ec948b42332673ac3860f2d2482", "html_url": "https://github.com/rust-lang/rust/commit/5b7b309c60465ec948b42332673ac3860f2d2482"}], "stats": {"total": 22, "additions": 5, "deletions": 17}, "files": [{"sha": "8cb1a9dc4a1df4b1dbccb08a79136cb381eb82bb", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d86acdd72a823fa496b3501c9d656beedf9f124f/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86acdd72a823fa496b3501c9d656beedf9f124f/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=d86acdd72a823fa496b3501c9d656beedf9f124f", "patch": "@@ -11,7 +11,7 @@ use rustc_mir_dataflow::value_analysis::{\n     HasTop, Map, State, TrackElem, ValueAnalysis, ValueOrPlace, ValueOrPlaceOrRef,\n };\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n-use rustc_span::{sym, DUMMY_SP};\n+use rustc_span::DUMMY_SP;\n \n use crate::MirPass;\n \n@@ -42,7 +42,6 @@ struct ConstAnalysis<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     ecx: InterpCx<'tcx, 'tcx, DummyMachine>,\n     param_env: ty::ParamEnv<'tcx>,\n-    propagate_overflow: bool,\n }\n \n impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n@@ -84,13 +83,11 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                         let overflow = match overflow {\n                             FlatSet::Top => FlatSet::Top,\n                             FlatSet::Elem(overflow) => {\n-                                if overflow && !self.propagate_overflow {\n+                                if overflow {\n+                                    // Overflow cannot be reliable propagated. See: https://github.com/rust-lang/rust/pull/101168#issuecomment-1288091446\n                                     FlatSet::Top\n                                 } else {\n-                                    self.wrap_scalar(\n-                                        Scalar::from_bool(overflow),\n-                                        self.tcx.types.bool,\n-                                    )\n+                                    self.wrap_scalar(Scalar::from_bool(false), self.tcx.types.bool)\n                                 }\n                             }\n                             FlatSet::Bottom => FlatSet::Bottom,\n@@ -220,20 +217,11 @@ impl<'tcx> std::fmt::Debug for ScalarTy<'tcx> {\n \n impl<'tcx> ConstAnalysis<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, map: Map) -> Self {\n-        // It can happen that overflow will be detected even though overflow checks are disabled.\n-        // This is caused by inlining functions that have #[rustc_inherit_overflow_checks]. Such\n-        // overflows must not be propagated if `-C overflow-checks=off`. Also, if the function we\n-        // are optimizing here has #[rustc_inherit_overflow_checks], the overflow checks may\n-        // actually not be triggered by the consuming crate, so we have to ignore them too.\n-        // Related to https://github.com/rust-lang/rust/issues/35310.\n-        let propagate_overflow = tcx.sess.overflow_checks()\n-            && !tcx.has_attr(body.source.def_id(), sym::rustc_inherit_overflow_checks);\n         Self {\n             map,\n             tcx,\n             ecx: InterpCx::new(tcx, DUMMY_SP, ty::ParamEnv::empty(), DummyMachine),\n             param_env: tcx.param_env(body.source.def_id()),\n-            propagate_overflow,\n         }\n     }\n "}, {"sha": "a4ebd0c8c18f0a11952c06e563021901d0429a1d", "filename": "src/test/mir-opt/dataflow-const-prop/checked.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86acdd72a823fa496b3501c9d656beedf9f124f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d86acdd72a823fa496b3501c9d656beedf9f124f/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.diff?ref=d86acdd72a823fa496b3501c9d656beedf9f124f", "patch": "@@ -61,7 +61,7 @@\n -         assert(!move (_10.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _9, const 1_i32) -> bb2; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n +         _9 = const i32::MAX;             // scope 4 at $DIR/checked.rs:+6:13: +6:14\n +         _10 = CheckedAdd(const i32::MAX, const 1_i32); // scope 4 at $DIR/checked.rs:+6:13: +6:18\n-+         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const i32::MAX, const 1_i32) -> bb2; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n++         assert(!move (_10.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const i32::MAX, const 1_i32) -> bb2; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n       }\n   \n       bb2: {"}]}