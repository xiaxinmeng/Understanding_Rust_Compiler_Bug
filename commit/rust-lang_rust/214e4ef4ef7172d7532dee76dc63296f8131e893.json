{"sha": "214e4ef4ef7172d7532dee76dc63296f8131e893", "node_id": "C_kwDOAAsO6NoAKDIxNGU0ZWY0ZWY3MTcyZDc1MzJkZWU3NmRjNjMyOTZmODEzMWU4OTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T18:56:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T18:56:24Z"}, "message": "Rollup merge of #110237 - oli-obk:impl_trait_in_assoc_tys, r=jackh726\n\nSplit out a separate feature gate for impl trait in associated types\n\nin https://github.com/rust-lang/rust/issues/107645 it was decided that we'll take a new route for type alias impl trait. The exact route isn't clear yet, so while I'm working on implementing some of these proposed changes (e.g. in https://github.com/rust-lang/rust/pull/110010) to be able to experiment with them, I will also work on stabilizing another sugar version first: impl trait in associated types. Similarly I'll look into creating feature gates for impl trait in const/static types.\n\nThis PR does nothing but split the feature gate, so that you need to enable a different feature gate for\n\n```rust\nimpl Trait for Type {\n    type Assoc = impl SomeTrait;\n}\n```\n\nthan what you need for `type Foo = impl SomeTrait;`", "tree": {"sha": "6cf46af8f5051ea1708fb6f6ef2475259a63b0e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cf46af8f5051ea1708fb6f6ef2475259a63b0e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/214e4ef4ef7172d7532dee76dc63296f8131e893", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNv7YCRBK7hj4Ov3rIwAAb2MIAG27y5Dbk2tZQJDfLGC1NmKp\n7/D93qCMX/Bko4r2PRivIVtVGtzxOx1gvkx+z6NzJ2y0rv7DcdLWo/ehB6dJ6PWm\n29+gw4s2Qj9nu1jG2kI9mxVBKqLEnHIL+s9g+dThof9eNFPvT7eBQzCvGFANaPEb\ndsnquH570cPpWPijvXiHTmxHeMW/IMDx6dXYwdlvA2fY7P4bY6nnU+J1eFDkWoxb\n43+UEkBs9n8JxI0y63FzW1hVS8WEeEYqZlZE7avRSfHIm7cfjson7hfD8fJs8pgP\ntiiVM5ZlrNVXaWdDwHoLK0tQmzq2QLnRTYOA58MWqYxtNauvxnBO3u4abwd4HwE=\n=QgzI\n-----END PGP SIGNATURE-----\n", "payload": "tree 6cf46af8f5051ea1708fb6f6ef2475259a63b0e2\nparent d54a8ac8e205439b8e06543655a3dc30010b31dd\nparent f263f88beacce82ef7098dadd25e44eb349aa3c2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681325784 +0200\ncommitter GitHub <noreply@github.com> 1681325784 +0200\n\nRollup merge of #110237 - oli-obk:impl_trait_in_assoc_tys, r=jackh726\n\nSplit out a separate feature gate for impl trait in associated types\n\nin https://github.com/rust-lang/rust/issues/107645 it was decided that we'll take a new route for type alias impl trait. The exact route isn't clear yet, so while I'm working on implementing some of these proposed changes (e.g. in https://github.com/rust-lang/rust/pull/110010) to be able to experiment with them, I will also work on stabilizing another sugar version first: impl trait in associated types. Similarly I'll look into creating feature gates for impl trait in const/static types.\n\nThis PR does nothing but split the feature gate, so that you need to enable a different feature gate for\n\n```rust\nimpl Trait for Type {\n    type Assoc = impl SomeTrait;\n}\n```\n\nthan what you need for `type Foo = impl SomeTrait;`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/214e4ef4ef7172d7532dee76dc63296f8131e893", "html_url": "https://github.com/rust-lang/rust/commit/214e4ef4ef7172d7532dee76dc63296f8131e893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/214e4ef4ef7172d7532dee76dc63296f8131e893/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54a8ac8e205439b8e06543655a3dc30010b31dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d54a8ac8e205439b8e06543655a3dc30010b31dd", "html_url": "https://github.com/rust-lang/rust/commit/d54a8ac8e205439b8e06543655a3dc30010b31dd"}, {"sha": "f263f88beacce82ef7098dadd25e44eb349aa3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f263f88beacce82ef7098dadd25e44eb349aa3c2", "html_url": "https://github.com/rust-lang/rust/commit/f263f88beacce82ef7098dadd25e44eb349aa3c2"}], "stats": {"total": 365, "additions": 217, "deletions": 148}, "files": [{"sha": "17bcd24ee39fd48105cacfd08d0f222099e8be8a", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -121,24 +121,34 @@ impl<'a> PostExpansionVisitor<'a> {\n     }\n \n     /// Feature gate `impl Trait` inside `type Alias = $type_expr;`.\n-    fn check_impl_trait(&self, ty: &ast::Ty) {\n+    fn check_impl_trait(&self, ty: &ast::Ty, in_associated_ty: bool) {\n         struct ImplTraitVisitor<'a> {\n             vis: &'a PostExpansionVisitor<'a>,\n+            in_associated_ty: bool,\n         }\n         impl Visitor<'_> for ImplTraitVisitor<'_> {\n             fn visit_ty(&mut self, ty: &ast::Ty) {\n                 if let ast::TyKind::ImplTrait(..) = ty.kind {\n-                    gate_feature_post!(\n-                        &self.vis,\n-                        type_alias_impl_trait,\n-                        ty.span,\n-                        \"`impl Trait` in type aliases is unstable\"\n-                    );\n+                    if self.in_associated_ty {\n+                        gate_feature_post!(\n+                            &self.vis,\n+                            impl_trait_in_assoc_type,\n+                            ty.span,\n+                            \"`impl Trait` in associated types is unstable\"\n+                        );\n+                    } else {\n+                        gate_feature_post!(\n+                            &self.vis,\n+                            type_alias_impl_trait,\n+                            ty.span,\n+                            \"`impl Trait` in type aliases is unstable\"\n+                        );\n+                    }\n                 }\n                 visit::walk_ty(self, ty);\n             }\n         }\n-        ImplTraitVisitor { vis: self }.visit_ty(ty);\n+        ImplTraitVisitor { vis: self, in_associated_ty }.visit_ty(ty);\n     }\n \n     fn check_late_bound_lifetime_defs(&self, params: &[ast::GenericParam]) {\n@@ -294,7 +304,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n \n             ast::ItemKind::TyAlias(box ast::TyAlias { ty: Some(ty), .. }) => {\n-                self.check_impl_trait(&ty)\n+                self.check_impl_trait(&ty, false)\n             }\n \n             _ => {}\n@@ -520,7 +530,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     );\n                 }\n                 if let Some(ty) = ty {\n-                    self.check_impl_trait(ty);\n+                    self.check_impl_trait(ty, true);\n                 }\n                 false\n             }"}, {"sha": "48f5bd1cb50488c4085ae32965ea4d0764699da4", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -416,6 +416,8 @@ declare_features! (\n     (active, half_open_range_patterns_in_slices, \"1.66.0\", Some(67264), None),\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n+    /// Allows `impl Trait` to be used inside associated types (RFC 2515).\n+    (active, impl_trait_in_assoc_type, \"CURRENT_RUSTC_VERSION\", Some(63063), None),\n     /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n     (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n     /// Allows referencing `Self` and projections in impl-trait."}, {"sha": "b619e5877ad7b852e6586bddd15830a66268e965", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -801,6 +801,7 @@ symbols! {\n         ignore,\n         impl_header_lifetime_elision,\n         impl_lint_pass,\n+        impl_trait_in_assoc_type,\n         impl_trait_in_bindings,\n         impl_trait_in_fn_trait_return,\n         impl_trait_projections,"}, {"sha": "ed86deb26d0e89384360c8b5590dcfdb7b579b55", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -15,6 +15,7 @@\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]\n+#![cfg_attr(not(bootstrap), feature(impl_trait_in_assoc_type))]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}, {"sha": "01e9a984d440381da687fd08e8726d374152253f", "filename": "tests/rustdoc/auxiliary/issue-73061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-73061.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n //edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Foo {\n     type X: std::future::Future<Output = ()>;"}, {"sha": "d07c123499892352b4fc316dc48fedccf2184480", "filename": "tests/ui/associated-types/issue-63591.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fassociated-types%2Fissue-63591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fassociated-types%2Fissue-63591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-63591.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,19 +1,23 @@\n // check-pass\n \n #![feature(associated_type_bounds)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n fn main() {}\n \n-trait Bar { type Assoc; }\n+trait Bar {\n+    type Assoc;\n+}\n \n trait Thing {\n     type Out;\n     fn func() -> Self::Out;\n }\n \n struct AssocIsCopy;\n-impl Bar for AssocIsCopy { type Assoc = u8; }\n+impl Bar for AssocIsCopy {\n+    type Assoc = u8;\n+}\n \n impl Thing for AssocIsCopy {\n     type Out = impl Bar<Assoc: Copy>;"}, {"sha": "b889f616a03118bf03c9391594b81190b5dcf816", "filename": "tests/ui/async-await/in-trait/async-associated-types2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -4,7 +4,7 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n #![allow(incomplete_features)]\n \n use std::future::Future;\n@@ -23,9 +23,7 @@ impl MyTrait for i32 {\n         Self: 'a;\n \n     fn foo<'a>(&'a self) -> Self::Fut<'a> {\n-        async {\n-            *self\n-        }\n+        async { *self }\n     }\n }\n "}, {"sha": "de0487cdb208fbc68c92e23254ed7e5d271b0c18", "filename": "tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -0,0 +1,18 @@\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl Foo for () {\n+    type Bar = impl std::fmt::Debug;\n+    //~^ ERROR: `impl Trait` in associated types is unstable\n+}\n+\n+struct Mop;\n+\n+impl Mop {\n+    type Bop = impl std::fmt::Debug;\n+    //~^ ERROR: `impl Trait` in associated types is unstable\n+    //~| ERROR: inherent associated types are unstable\n+}\n+\n+fn main() {}"}, {"sha": "9a1ded9682251a16dbe31ab274b6155cbb67a325", "filename": "tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.stderr?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: `impl Trait` in associated types is unstable\n+  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:6:16\n+   |\n+LL |     type Bar = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in associated types is unstable\n+  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:13:16\n+   |\n+LL |     type Bop = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n+\n+error[E0658]: inherent associated types are unstable\n+  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:13:5\n+   |\n+LL |     type Bop = impl std::fmt::Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7f670919ed60389cbda3bdce3ed6574697c7d28f", "filename": "tests/ui/generator/issue-87142.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgenerator%2Fissue-87142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgenerator%2Fissue-87142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-87142.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -4,7 +4,7 @@\n // Regression test for #87142\n // This test needs the above flags and the \"lib\" crate type.\n \n-#![feature(type_alias_impl_trait, generator_trait, generators)]\n+#![feature(impl_trait_in_assoc_type, generator_trait, generators)]\n #![crate_type = \"lib\"]\n \n use std::ops::Generator;"}, {"sha": "8a5e4a0f3cc396b4fb5be694d0ec96561ec11cea", "filename": "tests/ui/generic-associated-types/issue-86218-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Stream {\n     type Item;\n@@ -17,7 +17,9 @@ trait Yay<AdditionalValue> {\n \n impl<T> Yay<T> for () {\n     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-    fn foo<'s>() -> Self::InnerStream<'s> { () }\n+    fn foo<'s>() -> Self::InnerStream<'s> {\n+        ()\n+    }\n }\n \n fn main() {}"}, {"sha": "61cfdd35a8926bc8e928884df015c070c287e486", "filename": "tests/ui/generic-associated-types/issue-86218.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Stream {\n     type Item;\n@@ -18,7 +18,9 @@ trait Yay<AdditionalValue> {\n impl<'a> Yay<&'a ()> for () {\n     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n     //^ ERROR does not fulfill the required lifetime\n-    fn foo<'s>() -> Self::InnerStream<'s> { () }\n+    fn foo<'s>() -> Self::InnerStream<'s> {\n+        ()\n+    }\n }\n \n fn main() {}"}, {"sha": "6f737b21f53cdc18ffb0ba310a9cd82a68ad121f", "filename": "tests/ui/generic-associated-types/issue-87258_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // See https://github.com/rust-lang/rust/issues/87258#issuecomment-883293367\n "}, {"sha": "5a40a61297233d5b8e91fb8843c73756cedcc5a2", "filename": "tests/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,8 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n fn main() {}\n \n+#[rustfmt::skip]\n trait A<'a> {\n     type B<'b>: Clone\n     // FIXME(generic_associated_types): Remove one of the below bounds"}, {"sha": "79d3479af8c8fa1955259547939754e08d31f528", "filename": "tests/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:20:35\n+  --> $DIR/issue-88595.rs:21:35\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n    |                                   ^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/issue-88595.rs:17:6\n+  --> $DIR/issue-88595.rs:18:6\n    |\n LL | impl<'a> A<'a> for C {\n    |      ^^"}, {"sha": "94b07e674e8241bf8d153008b83c35ab889d67e9", "filename": "tests/ui/generic-associated-types/issue-89008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // edition:2021\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::future::Future;\n use std::marker::PhantomData;"}, {"sha": "c4d762796e2deaa7fb845bc59858d5319bb0fc7a", "filename": "tests/ui/generic-associated-types/issue-90014.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,11 +1,13 @@\n // edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::future::Future;\n \n trait MakeFut {\n-    type Fut<'a> where Self: 'a;\n+    type Fut<'a>\n+    where\n+        Self: 'a;\n     fn make_fut<'a>(&'a self) -> Self::Fut<'a>;\n }\n "}, {"sha": "0d49398cac94a8dc7d356cb648731ab1797e7cca", "filename": "tests/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,14 +1,14 @@\n error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n-  --> $DIR/issue-90014.rs:13:20\n+  --> $DIR/issue-90014.rs:15:20\n    |\n-LL |     type Fut<'a> where Self: 'a;\n+LL |     type Fut<'a>\n    |     ------------ definition of `Fut` from trait\n ...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here\n-  --> $DIR/issue-90014.rs:13:14\n+  --> $DIR/issue-90014.rs:15:14\n    |\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |              ^^"}, {"sha": "0908a0bf39df9ade248df5925ecd7416063f8a10", "filename": "tests/ui/impl-trait/associated-impl-trait-type-generic-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "b5ea90bb0c7c6d527bc7d2631f39791551974197", "filename": "tests/ui/impl-trait/associated-impl-trait-type-trivial.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "f5981261c383847be5f061d493427a40bee3a4ca", "filename": "tests/ui/impl-trait/associated-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "f36a310ddf31061b96eeb9473acd4b4e88a43969", "filename": "tests/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "7a5cb3b3dfcbecca1afd7ea5e8dc97c893f9440e", "filename": "tests/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -3,7 +3,7 @@\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Send;"}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d54a8ac8e205439b8e06543655a3dc30010b31dd/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d54a8ac8e205439b8e06543655a3dc30010b31dd/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=d54a8ac8e205439b8e06543655a3dc30010b31dd", "patch": "@@ -1,8 +0,0 @@\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:17:9\n-   |\n-LL |         async {}\n-   |         ^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d031271ac08072c54becd08d4237e4bea586d86a", "filename": "tests/ui/impl-trait/issue-55872-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-3.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // ignore-compare-mode-chalk\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "10850f0a9335e995edff7070564679349e8aaf77", "filename": "tests/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "3f0b0f1a8dee05b58122fcc67bdefc9801aef804", "filename": "tests/ui/impl-trait/issues/issue-82139.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Trait {\n     type Associated;"}, {"sha": "4e699e7f302605c5b397d5dcaca1f370609d6318", "filename": "tests/ui/impl-trait/issues/issue-83919.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,25 +1,25 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // edition:2021\n \n use std::future::Future;\n \n trait Foo {\n     type T;\n-    type Fut2: Future<Output=Self::T>; // ICE got triggered with traits other than Future here\n-    type Fut: Future<Output=Self::Fut2>;\n+    type Fut2: Future<Output = Self::T>; // ICE got triggered with traits other than Future here\n+    type Fut: Future<Output = Self::Fut2>;\n     fn get_fut(&self) -> Self::Fut;\n }\n \n struct Implementor;\n \n impl Foo for Implementor {\n     type T = u64;\n-    type Fut2 = impl Future<Output=u64>;\n-    type Fut = impl Future<Output=Self::Fut2>;\n+    type Fut2 = impl Future<Output = u64>;\n+    type Fut = impl Future<Output = Self::Fut2>;\n \n     fn get_fut(&self) -> Self::Fut {\n-    //~^ ERROR `{integer}` is not a future\n+        //~^ ERROR `{integer}` is not a future\n         async move {\n             42\n             // 42 does not impl Future and rustc does actually point out the error,"}, {"sha": "7abab5bfb75d5483a13e4f7a41e39f2cb798d928", "filename": "tests/ui/impl-trait/issues/issue-86719.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,11 +1,12 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     type E;\n }\n impl<S> Bar for S {\n     type E = impl ; //~ ERROR at least one trait must be specified\n-    fn foo() -> Self::E { //~ ERROR `foo` is not a member\n+    fn foo() -> Self::E {\n+        //~^ ERROR `foo` is not a member\n         |_| true //~ ERROR type annotations needed\n     }\n }"}, {"sha": "15893df5f945865da6dc501ab483e6bbae2dd30b", "filename": "tests/ui/impl-trait/issues/issue-86719.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -8,12 +8,13 @@ error[E0407]: method `foo` is not a member of trait `Bar`\n   --> $DIR/issue-86719.rs:8:5\n    |\n LL | /     fn foo() -> Self::E {\n+LL | |\n LL | |         |_| true\n LL | |     }\n    | |_____^ not a member of trait `Bar`\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-86719.rs:9:10\n+  --> $DIR/issue-86719.rs:10:10\n    |\n LL |         |_| true\n    |          ^"}, {"sha": "705a4addcb704ebd873c84da0f3741fbc5e652e4", "filename": "tests/ui/impl-trait/issues/issue-87340.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,12 +1,12 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait X {\n     type I;\n     fn f() -> Self::I;\n }\n \n impl<T> X for () {\n-//~^ ERROR `T` is not constrained by the impl trait, self type, or predicates\n+    //~^ ERROR `T` is not constrained by the impl trait, self type, or predicates\n     type I = impl Sized;\n     fn f() -> Self::I {}\n }"}, {"sha": "1211625dac9cc81251e299c080bee58417f7981b", "filename": "tests/ui/impl-trait/type-alias-generic-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -3,7 +3,7 @@\n // types in 'item' position when generic parameters are involved\n //\n // run-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Meow {\n     type MeowType;"}, {"sha": "509d2716649e5c745eee970fb5ba245c5030b8bc", "filename": "tests/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,8 @@\n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n #![feature(impl_trait_in_fn_trait_return)]\n+#![feature(custom_inner_attributes)]\n+#![rustfmt::skip]\n use std::fmt::Debug;\n \n // Allowed\n@@ -116,7 +118,7 @@ trait DummyTrait {\n }\n impl DummyTrait for () {\n     type Out = impl Debug;\n-    //~^ ERROR `impl Trait` in type aliases is unstable\n+    //~^ ERROR `impl Trait` in associated types is unstable\n \n     fn in_trait_impl_parameter(_: impl Debug) { }\n     // Allowed"}, {"sha": "3e29343797554e888bfc74b596ec11b6231c8032", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:47:51\n+  --> $DIR/where-allowed.rs:49:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           --------^^^^^^^^^^-\n@@ -8,25 +8,25 @@ LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:56:57\n+  --> $DIR/where-allowed.rs:58:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                 --------^^^^^^^^^^-\n    |                                                 |       |\n    |                                                 |       nested `impl Trait` here\n    |                                                 outer `impl Trait`\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:118:16\n+error[E0658]: `impl Trait` in associated types is unstable\n+  --> $DIR/where-allowed.rs:120:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:153:23\n+  --> $DIR/where-allowed.rs:155:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:156:39\n+  --> $DIR/where-allowed.rs:158:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -44,109 +44,109 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n-  --> $DIR/where-allowed.rs:16:40\n+  --> $DIR/where-allowed.rs:18:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n-  --> $DIR/where-allowed.rs:20:42\n+  --> $DIR/where-allowed.rs:22:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n-  --> $DIR/where-allowed.rs:24:38\n+  --> $DIR/where-allowed.rs:26:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n-  --> $DIR/where-allowed.rs:28:40\n+  --> $DIR/where-allowed.rs:30:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:32:49\n+  --> $DIR/where-allowed.rs:34:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:36:51\n+  --> $DIR/where-allowed.rs:38:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:40:55\n+  --> $DIR/where-allowed.rs:42:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:47:51\n+  --> $DIR/where-allowed.rs:49:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:52:53\n+  --> $DIR/where-allowed.rs:54:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:56:57\n+  --> $DIR/where-allowed.rs:58:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:64:38\n+  --> $DIR/where-allowed.rs:66:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:68:40\n+  --> $DIR/where-allowed.rs:70:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:81:32\n+  --> $DIR/where-allowed.rs:83:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:85:41\n+  --> $DIR/where-allowed.rs:87:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:89:27\n+  --> $DIR/where-allowed.rs:91:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:94:25\n+  --> $DIR/where-allowed.rs:96:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:96:20\n+  --> $DIR/where-allowed.rs:98:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n-  --> $DIR/where-allowed.rs:107:23\n+  --> $DIR/where-allowed.rs:109:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n@@ -155,7 +155,7 @@ LL |     fn in_return() -> impl Debug;\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n-  --> $DIR/where-allowed.rs:124:34\n+  --> $DIR/where-allowed.rs:126:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n@@ -164,127 +164,127 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` params\n-  --> $DIR/where-allowed.rs:137:33\n+  --> $DIR/where-allowed.rs:139:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return types\n-  --> $DIR/where-allowed.rs:140:31\n+  --> $DIR/where-allowed.rs:142:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n-  --> $DIR/where-allowed.rs:156:39\n+  --> $DIR/where-allowed.rs:158:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in traits\n-  --> $DIR/where-allowed.rs:161:16\n+  --> $DIR/where-allowed.rs:163:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n-  --> $DIR/where-allowed.rs:166:24\n+  --> $DIR/where-allowed.rs:168:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n-  --> $DIR/where-allowed.rs:171:6\n+  --> $DIR/where-allowed.rs:173:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n-  --> $DIR/where-allowed.rs:177:24\n+  --> $DIR/where-allowed.rs:179:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n-  --> $DIR/where-allowed.rs:183:11\n+  --> $DIR/where-allowed.rs:185:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n-  --> $DIR/where-allowed.rs:190:15\n+  --> $DIR/where-allowed.rs:192:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n-  --> $DIR/where-allowed.rs:197:24\n+  --> $DIR/where-allowed.rs:199:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:204:17\n+  --> $DIR/where-allowed.rs:206:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:211:22\n+  --> $DIR/where-allowed.rs:213:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:217:40\n+  --> $DIR/where-allowed.rs:219:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:221:36\n+  --> $DIR/where-allowed.rs:223:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:225:38\n+  --> $DIR/where-allowed.rs:227:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:229:41\n+  --> $DIR/where-allowed.rs:231:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:233:11\n+  --> $DIR/where-allowed.rs:235:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:240:40\n+  --> $DIR/where-allowed.rs:242:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n-  --> $DIR/where-allowed.rs:246:29\n+  --> $DIR/where-allowed.rs:248:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return types\n-  --> $DIR/where-allowed.rs:248:46\n+  --> $DIR/where-allowed.rs:250:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:233:7\n+  --> $DIR/where-allowed.rs:235:7\n    |\n LL | impl <T = impl Debug> T {}\n    |       ^^^^^^^^^^^^^^\n@@ -294,7 +294,7 @@ LL | impl <T = impl Debug> T {}\n    = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:240:36\n+  --> $DIR/where-allowed.rs:242:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                    ^^^^^^^^^^^^^^\n@@ -303,7 +303,7 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:233:1\n+  --> $DIR/where-allowed.rs:235:1\n    |\n LL | impl <T = impl Debug> T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type"}, {"sha": "39bc01f71b5a079e3cb127b947fdbef0f3be9ac6", "filename": "tests/ui/lint/inline-trait-and-foreign-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,5 +1,5 @@\n #![feature(extern_types)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n #![warn(unused_attributes)]\n "}, {"sha": "07906a43472c2ca1f30800d587ec647ce04e6dbe", "filename": "tests/ui/lint/no-coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Flint%2Fno-coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Flint%2Fno-coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fno-coverage.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n #![feature(extern_types)]\n #![feature(no_coverage)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n #![warn(unused_attributes)]\n #![no_coverage]\n //~^ WARN: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly"}, {"sha": "1a2a3ca56c8d4379e2a72373a59b73cfbee6f1f0", "filename": "tests/ui/nll/issue-78561.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fnll%2Fissue-78561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fnll%2Fissue-78561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-78561.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Trait {\n     type A;"}, {"sha": "d4d379bdb7327ca0317bc5d63f512881bec0c5d7", "filename": "tests/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -2,7 +2,7 @@\n // This test also ensures that the checks are performed even inside private modules.\n \n #![feature(associated_type_defaults)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n mod m {\n     struct Priv;"}, {"sha": "fe6ed46734cd24f5b3d3f81187fea1effac869df", "filename": "tests/ui/privacy/private-in-public-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,5 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-\n+#![feature(impl_trait_in_assoc_type)]\n #![feature(type_alias_impl_trait)]\n #![deny(private_in_public)]\n "}, {"sha": "62f66914ee330c2ed7fb837728f7fdef070b9a23", "filename": "tests/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -2,7 +2,7 @@\n // const generics in an associated opaque type\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt<'a, const C: usize> {\n     type Iter;"}, {"sha": "7c7c68ad60afe1d1d979dba6530d4425f5e63819", "filename": "tests/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // Tests that we don't allow unconstrained lifetime parameters in impls when\n // the lifetime is used in an associated opaque type.\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "81dacbcfb7eccdb3e26aea257f2e2212d464caca", "filename": "tests/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -2,7 +2,7 @@\n // lifetimes are used in an associated opaque type\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt<'a> {\n     type Iter;"}, {"sha": "551815d021a0a849a5dc6ece871b4f766d9e255a", "filename": "tests/ui/type-alias-impl-trait/associated-type-impl-trait-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n //check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Trait {\n     type Opaque1;"}, {"sha": "444a4e6957fad478d5372d242803b8c16c91805e", "filename": "tests/ui/type-alias-impl-trait/auxiliary/collect_hidden_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // edition:2018\n "}, {"sha": "98c9615035af86fabdb3ec985c718201ffc67a6f", "filename": "tests/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n #![crate_type = \"rlib\"]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait View {\n     type Tmp: Iterator<Item = u32>;"}, {"sha": "1824ff5e2fb826839f4549ba58dd5c51bddc82d0", "filename": "tests/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // Ensure that we don't ICE if associated type impl trait is used in an impl\n // with an unconstrained type parameter.\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait X {\n     type I;"}, {"sha": "4f99236f4eab358b89f72c200c7489fc1a18a106", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Callable {\n     type Output;"}, {"sha": "5d5645077c2a4b17650be14ce243f15e6755361e", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Callable {\n     type Output;\n@@ -17,7 +17,9 @@ impl<'a> PlusOne for &'a mut i32 {\n \n impl<T: PlusOne> Callable for T {\n     type Output = impl PlusOne;\n-    fn call(t: T) -> Self::Output { t }\n+    fn call(t: T) -> Self::Output {\n+        t\n+    }\n }\n \n fn test<'a>(y: &'a mut i32) -> impl PlusOne {"}, {"sha": "66e4783157b7c71c7fa3342a9bf84d9c483b7e18", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl PlusOne` captures lifetime that does not appear in bounds\n-  --> $DIR/imply_bounds_from_bounds_param.rs:24:5\n+  --> $DIR/imply_bounds_from_bounds_param.rs:26:5\n    |\n LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n    |         --                     ------------ opaque type defined here"}, {"sha": "8df59c68fefc2e67322beda4d5e59ca7d5194ce7", "filename": "tests/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // Regression test for issue 67856\n \n #![feature(unboxed_closures)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n #![feature(fn_traits)]\n \n trait MyTrait {}"}, {"sha": "e3e2787b66bb4ece66f532d4e3e10ee2cdb3094e", "filename": "tests/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::fmt::Debug;\n "}, {"sha": "3bdb3bf1d5305cb0ada503a869553bcdd86c41a4", "filename": "tests/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -2,7 +2,7 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n struct Baz<'a> {\n     source: &'a str,"}, {"sha": "3917bb3b6cfbf5d8e9a5965c36226bf56e5c57ec", "filename": "tests/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -3,7 +3,7 @@\n // Ensures that we don't ICE\n \n #![feature(trait_alias)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Foo {\n     type Bar: Baz<Self, Self>;"}, {"sha": "8746545ecc9ef586302005109c879131cce811cb", "filename": "tests/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,5 +1,5 @@\n #![feature(arbitrary_self_types)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::ops::Deref;\n "}, {"sha": "841bac5f6a0f409a8a1fde958a376c7d58dea718", "filename": "tests/ui/type-alias-impl-trait/issue-57807-associated-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -2,7 +2,7 @@\n // that we properly unify associated types within\n // a type alias impl trait\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     type A;"}, {"sha": "9675867656a967fd250cca5587244a52a9b7b35d", "filename": "tests/ui/type-alias-impl-trait/issue-58887.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "a6173967333c0511b82ea4789d5f9a46b2d0f3ce", "filename": "tests/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -5,7 +5,7 @@ trait Bug {\n }\n \n impl Bug for &() {\n-    type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n+    type Item = impl Bug; //~ ERROR `impl Trait` in associated types is unstable\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR the trait bound `(): Bug` is not satisfied"}, {"sha": "ffc664736355a907a87a6b5b77ca54f5d6533441", "filename": "tests/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: `impl Trait` in type aliases is unstable\n+error[E0658]: `impl Trait` in associated types is unstable\n   --> $DIR/issue-60371.rs:8:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:40"}, {"sha": "c4687c29de8e1c99f4a144dbcd70441e9e1643a6", "filename": "tests/ui/type-alias-impl-trait/issue-60564-working.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // check-pass\n "}, {"sha": "0245eab79694865ee0b690c55f3ded45a97869bf", "filename": "tests/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -2,7 +2,7 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait MyTrait {\n     type AssocType: Send;"}, {"sha": "f582592e9bcc8d4cadd53cf2728bf583569b968b", "filename": "tests/ui/type-alias-impl-trait/issue-74761-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait A {\n     type B;"}, {"sha": "f582592e9bcc8d4cadd53cf2728bf583569b968b", "filename": "tests/ui/type-alias-impl-trait/issue-74761.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait A {\n     type B;"}, {"sha": "2a984c1ed7133d12a6545a0e548b2a7fef284309", "filename": "tests/ui/type-alias-impl-trait/issue-78450.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait AssociatedImpl {\n     type ImplTrait;"}, {"sha": "f0ba9fa7cec29b516830cdecb9414858d80dd26f", "filename": "tests/ui/type-alias-impl-trait/issue-89952.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait SomeTrait {}\n impl SomeTrait for () {}"}, {"sha": "50207605748c898e8e159fc3732c1b728e6187fb", "filename": "tests/ui/type-alias-impl-trait/issue-90400-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #90400,\n // taken from https://github.com/rust-lang/rust/issues/90400#issuecomment-954927836\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     fn bar(&self);"}, {"sha": "60ff962ea2e3092376ec438308f8ad1e78402e17", "filename": "tests/ui/type-alias-impl-trait/issue-90400-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #90400,\n // taken from https://github.com/rust-lang/rust/issues/90400#issuecomment-954927836\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     fn bar(&self);"}, {"sha": "d764545f906f3ed17a80d66eb559207d63229cc5", "filename": "tests/ui/type-alias-impl-trait/issue-94429.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait, generator_trait, generators)]\n+#![feature(impl_trait_in_assoc_type, generator_trait, generators)]\n use std::ops::Generator;\n \n trait Runnable {\n@@ -13,7 +13,7 @@ impl Runnable for Implementor {\n     type Gen = impl Generator<Yield = (), Return = ()>;\n \n     fn run(&mut self) -> Self::Gen {\n-    //~^ ERROR: type mismatch resolving\n+        //~^ ERROR: type mismatch resolving\n         move || {\n             yield 1;\n         }"}, {"sha": "296a3f3e30072d3cd36f479292fc5591f2fc7c9a", "filename": "tests/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214e4ef4ef7172d7532dee76dc63296f8131e893/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs?ref=214e4ef4ef7172d7532dee76dc63296f8131e893", "patch": "@@ -1,6 +1,6 @@\n // regression test for #74018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Trait {\n     type Associated;"}]}