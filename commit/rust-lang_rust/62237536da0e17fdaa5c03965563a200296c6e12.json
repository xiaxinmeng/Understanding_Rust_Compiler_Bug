{"sha": "62237536da0e17fdaa5c03965563a200296c6e12", "node_id": "C_kwDOAAsO6NoAKDYyMjM3NTM2ZGEwZTE3ZmRhYTVjMDM5NjU1NjNhMjAwMjk2YzZlMTI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-11-06T21:32:55Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-05-07T11:35:54Z"}, "message": "Parse catch filter in personality function", "tree": {"sha": "cc55c6ad8d1337e74baff1d6778eb644ac80dfc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc55c6ad8d1337e74baff1d6778eb644ac80dfc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62237536da0e17fdaa5c03965563a200296c6e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62237536da0e17fdaa5c03965563a200296c6e12", "html_url": "https://github.com/rust-lang/rust/commit/62237536da0e17fdaa5c03965563a200296c6e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62237536da0e17fdaa5c03965563a200296c6e12/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47171e0c500e791280e269a73c382bfac15148b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/47171e0c500e791280e269a73c382bfac15148b2", "html_url": "https://github.com/rust-lang/rust/commit/47171e0c500e791280e269a73c382bfac15148b2"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "79624703a4cf7576a88d43386e517fd9af6ea80d", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62237536da0e17fdaa5c03965563a200296c6e12/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62237536da0e17fdaa5c03965563a200296c6e12/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=62237536da0e17fdaa5c03965563a200296c6e12", "patch": "@@ -47,6 +47,7 @@ pub enum EHAction {\n     None,\n     Cleanup(usize),\n     Catch(usize),\n+    Filter(usize),\n     Terminate,\n }\n \n@@ -142,9 +143,11 @@ unsafe fn interpret_cs_action(\n         let ttype_index = action_reader.read_sleb128();\n         if ttype_index == 0 {\n             EHAction::Cleanup(lpad)\n-        } else {\n+        } else if ttype_index > 0 {\n             // Stop unwinding Rust panics at catch_unwind.\n             EHAction::Catch(lpad)\n+        } else {\n+            EHAction::Filter(lpad)\n         }\n     }\n }"}, {"sha": "4c29c332b75a8f78d84f2845d9d0f5180ff89e5b", "filename": "library/std/src/personality/gcc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62237536da0e17fdaa5c03965563a200296c6e12/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62237536da0e17fdaa5c03965563a200296c6e12/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs?ref=62237536da0e17fdaa5c03965563a200296c6e12", "patch": "@@ -135,7 +135,7 @@ cfg_if::cfg_if! {\n                     EHAction::None | EHAction::Cleanup(_) => {\n                         return continue_unwind(exception_object, context);\n                     }\n-                    EHAction::Catch(_) => {\n+                    EHAction::Catch(_) | EHAction::Filter(_) => {\n                         // EHABI requires the personality routine to update the\n                         // SP value in the barrier cache of the exception object.\n                         (*exception_object).private[5] =\n@@ -147,7 +147,7 @@ cfg_if::cfg_if! {\n             } else {\n                 match eh_action {\n                     EHAction::None => return continue_unwind(exception_object, context),\n-                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) => {\n+                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) | EHAction::Filter(lpad) => {\n                         uw::_Unwind_SetGR(\n                             context,\n                             UNWIND_DATA_REG.0,\n@@ -201,13 +201,13 @@ cfg_if::cfg_if! {\n             if actions as i32 & uw::_UA_SEARCH_PHASE as i32 != 0 {\n                 match eh_action {\n                     EHAction::None | EHAction::Cleanup(_) => uw::_URC_CONTINUE_UNWIND,\n-                    EHAction::Catch(_) => uw::_URC_HANDLER_FOUND,\n+                    EHAction::Catch(_) | EHAction::Filter(_) => uw::_URC_HANDLER_FOUND,\n                     EHAction::Terminate => uw::_URC_FATAL_PHASE1_ERROR,\n                 }\n             } else {\n                 match eh_action {\n                     EHAction::None => uw::_URC_CONTINUE_UNWIND,\n-                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) => {\n+                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) | EHAction::Filter(lpad) => {\n                         uw::_Unwind_SetGR(\n                             context,\n                             UNWIND_DATA_REG.0,"}]}