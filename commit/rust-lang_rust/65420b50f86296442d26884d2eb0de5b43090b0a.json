{"sha": "65420b50f86296442d26884d2eb0de5b43090b0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDIwYjUwZjg2Mjk2NDQyZDI2ODg0ZDJlYjBkZTViNDMwOTBiMGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-08T10:08:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T08:38:18Z"}, "message": "Don't deduplicate anonymous allocations", "tree": {"sha": "fe68ee4cb422400211b00a4dbf15c18b2c2a538d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe68ee4cb422400211b00a4dbf15c18b2c2a538d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65420b50f86296442d26884d2eb0de5b43090b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65420b50f86296442d26884d2eb0de5b43090b0a", "html_url": "https://github.com/rust-lang/rust/commit/65420b50f86296442d26884d2eb0de5b43090b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65420b50f86296442d26884d2eb0de5b43090b0a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "html_url": "https://github.com/rust-lang/rust/commit/f3b0f425c5a26f611c1743170cb9caf3ac8b6063"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "47abe2d1de80057ab3dc3c0d9d38e8e162957985", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -296,6 +296,11 @@ fn main() {\n     unsafe {\n         global_asm_test();\n     }\n+\n+    // Both statics have a reference that points to the same anonymous allocation.\n+    static REF1: &u8 = &42;\n+    static REF2: &u8 = REF1;\n+    assert_eq!(*REF1, *REF2);\n }\n \n #[cfg(all(not(jit), target_os = \"linux\"))]"}, {"sha": "6a76f3a72144575f46f699b69a15ce842dfa6332", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -47,6 +47,7 @@ rm src/test/ui/issues/issue-51947.rs # same\n rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n+rm src/test/ui/consts/issue-33537.rs # same\n rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n rm src/test/ui/generator/size-moved-locals.rs # same"}, {"sha": "3a5b2be462a939bca15646451d5d824991dd10f4", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiExt;\n use rustc_target::abi::call::FnAbi;\n \n+use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: Instance<'tcx>) {\n@@ -47,6 +48,7 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n         tcx,\n         pointer_type,\n         vtables: FxHashMap::default(),\n+        constants_cx: ConstantCx::new(),\n \n         instance,\n         symbol_name,\n@@ -92,6 +94,8 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n     let source_info_set = fx.source_info_set;\n     let local_map = fx.local_map;\n \n+    fx.constants_cx.finalize(fx.tcx, &mut *fx.cx.module);\n+\n     // Store function in context\n     let context = &mut cx.cached_context;\n     context.func = func;"}, {"sha": "6752bb42dc8704139f32c99c4bb8f213314a80fe", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -4,6 +4,7 @@ use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n \n+use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n pub(crate) fn pointer_ty(tcx: TyCtxt<'_>) -> types::Type {\n@@ -232,6 +233,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx> {\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) pointer_type: Type, // Cached from module\n     pub(crate) vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n+    pub(crate) constants_cx: ConstantCx,\n \n     pub(crate) instance: Instance<'tcx>,\n     pub(crate) symbol_name: SymbolName<'tcx>,"}, {"sha": "339580eb8f4e41bfe400e112a374f9c4855c8e5f", "filename": "src/constant.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_span::DUMMY_SP;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n@@ -13,12 +13,12 @@ use rustc_middle::ty::ConstKind;\n use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n \n-use crate::prelude::*;\n+use crate::{prelude::*, CodegenCx};\n \n-#[derive(Default)]\n pub(crate) struct ConstantCx {\n     todo: Vec<TodoItem>,\n     done: FxHashSet<DataId>,\n+    anon_allocs: FxHashMap<AllocId, DataId>,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -28,6 +28,10 @@ enum TodoItem {\n }\n \n impl ConstantCx {\n+    pub(crate) fn new() -> Self {\n+        ConstantCx { todo: vec![], done: FxHashSet::default(), anon_allocs: FxHashMap::default() }\n+    }\n+\n     pub(crate) fn finalize(mut self, tcx: TyCtxt<'_>, module: &mut dyn Module) {\n         //println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n@@ -74,8 +78,10 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     all_constants_ok\n }\n \n-pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n+pub(crate) fn codegen_static(cx: &mut CodegenCx<'_, '_>, def_id: DefId) {\n+    let mut constants_cx = ConstantCx::new();\n     constants_cx.todo.push(TodoItem::Static(def_id));\n+    constants_cx.finalize(cx.tcx, &mut *cx.module);\n }\n \n pub(crate) fn codegen_tls_ref<'tcx>(\n@@ -182,9 +188,13 @@ pub(crate) fn codegen_const_value<'tcx>(\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n-                            fx.cx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n-                            let data_id =\n-                                data_id_for_alloc_id(fx.cx.module, ptr.alloc_id, alloc.mutability);\n+                            fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n+                            let data_id = data_id_for_alloc_id(\n+                                &mut fx.constants_cx,\n+                                fx.cx.module,\n+                                ptr.alloc_id,\n+                                alloc.mutability,\n+                            );\n                             let local_data_id =\n                                 fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             if fx.clif_comments.enabled() {\n@@ -243,8 +253,9 @@ fn pointer_for_allocation<'tcx>(\n     alloc: &'tcx Allocation,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n-    fx.cx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(fx.cx.module, alloc_id, alloc.mutability);\n+    fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n+    let data_id =\n+        data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.cx.module, alloc_id, alloc.mutability);\n \n     let local_data_id = fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     if fx.clif_comments.enabled() {\n@@ -255,18 +266,14 @@ fn pointer_for_allocation<'tcx>(\n }\n \n fn data_id_for_alloc_id(\n+    cx: &mut ConstantCx,\n     module: &mut dyn Module,\n     alloc_id: AllocId,\n     mutability: rustc_hir::Mutability,\n ) -> DataId {\n-    module\n-        .declare_data(\n-            &format!(\".L__alloc_{:x}\", alloc_id.0),\n-            Linkage::Local,\n-            mutability == rustc_hir::Mutability::Mut,\n-            false,\n-        )\n-        .unwrap()\n+    *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n+        module.declare_anonymous_data(mutability == rustc_hir::Mutability::Mut, false).unwrap()\n+    })\n }\n \n fn data_id_for_static(\n@@ -344,7 +351,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n-                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.mutability);\n+                let data_id = data_id_for_alloc_id(cx, module, alloc_id, alloc.mutability);\n                 (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n@@ -397,7 +404,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n                     cx.todo.push(TodoItem::Alloc(reloc));\n-                    data_id_for_alloc_id(module, reloc, target_alloc.mutability)\n+                    data_id_for_alloc_id(cx, module, reloc, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n@@ -419,8 +426,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n             data_ctx.write_data_addr(offset.bytes() as u32, global_value, addend as i64);\n         }\n \n-        // FIXME don't duplicate definitions in lazy jit mode\n-        let _ = module.define_data(data_id, &data_ctx);\n+        module.define_data(data_id, &data_ctx).unwrap();\n         cx.done.insert(data_id);\n     }\n "}, {"sha": "1f731a756ed1548cf3495551a52be7ecf5a62c33", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -121,9 +121,7 @@ fn module_codegen(\n             MonoItem::Fn(inst) => {\n                 cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst));\n             }\n-            MonoItem::Static(def_id) => {\n-                crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n-            }\n+            MonoItem::Static(def_id) => crate::constant::codegen_static(&mut cx, def_id),\n             MonoItem::GlobalAsm(item_id) => {\n                 let item = cx.tcx.hir().item(item_id);\n                 if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {"}, {"sha": "ffe449115b96776c07feb5863b2c81cf3eaf027d", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -58,7 +58,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n                     CodegenMode::JitLazy => codegen_shim(&mut cx, inst),\n                 },\n                 MonoItem::Static(def_id) => {\n-                    crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n+                    crate::constant::codegen_static(&mut cx, def_id);\n                 }\n                 MonoItem::GlobalAsm(item_id) => {\n                     let item = cx.tcx.hir().item(item_id);"}, {"sha": "f94c9c1dab540257f34470bfbe567d1332cbba81", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65420b50f86296442d26884d2eb0de5b43090b0a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=65420b50f86296442d26884d2eb0de5b43090b0a", "patch": "@@ -36,7 +36,6 @@ use rustc_session::Session;\n use cranelift_codegen::settings::{self, Configurable};\n \n pub use crate::config::*;\n-use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n mod abi;\n@@ -123,7 +122,6 @@ struct CodegenCx<'m, 'tcx: 'm> {\n     tcx: TyCtxt<'tcx>,\n     module: &'m mut dyn Module,\n     global_asm: String,\n-    constants_cx: ConstantCx,\n     cached_context: Context,\n     debug_context: Option<DebugContext<'tcx>>,\n     unwind_context: UnwindContext<'tcx>,\n@@ -147,15 +145,13 @@ impl<'m, 'tcx> CodegenCx<'m, 'tcx> {\n             tcx,\n             module,\n             global_asm: String::new(),\n-            constants_cx: ConstantCx::default(),\n             cached_context: Context::new(),\n             debug_context,\n             unwind_context,\n         }\n     }\n \n     fn finalize(self) -> (String, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n-        self.constants_cx.finalize(self.tcx, self.module);\n         (self.global_asm, self.debug_context, self.unwind_context)\n     }\n }"}]}