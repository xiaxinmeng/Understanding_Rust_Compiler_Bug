{"sha": "3b10300e0ac29fe383e316529576f7cac86d0112", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMTAzMDBlMGFjMjlmZTM4M2UzMTY1Mjk1NzZmN2NhYzg2ZDAxMTI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-24T12:22:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-24T12:22:54Z"}, "message": "Rollup merge of #39886 - mbrubeck:doc-edit, r=steveklabnik\n\nAdditional docs for Vec, String, and slice trait impls\n\nr? @steveklabnik", "tree": {"sha": "1000c53c63cea01eff8656f82ff5d89dfa059d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1000c53c63cea01eff8656f82ff5d89dfa059d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b10300e0ac29fe383e316529576f7cac86d0112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b10300e0ac29fe383e316529576f7cac86d0112", "html_url": "https://github.com/rust-lang/rust/commit/3b10300e0ac29fe383e316529576f7cac86d0112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b10300e0ac29fe383e316529576f7cac86d0112/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03e9e00d85098a185357d8983fe012d1234e7256", "url": "https://api.github.com/repos/rust-lang/rust/commits/03e9e00d85098a185357d8983fe012d1234e7256", "html_url": "https://github.com/rust-lang/rust/commit/03e9e00d85098a185357d8983fe012d1234e7256"}, {"sha": "b2ac1c9c6b595f39c79e13bc4e0a0411441c7543", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ac1c9c6b595f39c79e13bc4e0a0411441c7543", "html_url": "https://github.com/rust-lang/rust/commit/b2ac1c9c6b595f39c79e13bc4e0a0411441c7543"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "10bc5ab88c93f2001ebdbef9496ef2b7701cd759", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=3b10300e0ac29fe383e316529576f7cac86d0112", "patch": "@@ -1629,6 +1629,43 @@ impl hash::Hash for String {\n     }\n }\n \n+/// Implements the `+` operator for concatenating two strings.\n+///\n+/// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if\n+/// necessary). This is done to avoid allocating a new `String` and copying the entire contents on\n+/// every operation, which would lead to `O(n^2)` running time when building an `n`-byte string by\n+/// repeated concatenation.\n+///\n+/// The string on the right-hand side is only borrowed; its contents are copied into the returned\n+/// `String`.\n+///\n+/// # Examples\n+///\n+/// Concatenating two `String`s takes the first by value and borrows the second:\n+///\n+/// ```\n+/// let a = String::from(\"hello\");\n+/// let b = String::from(\" world\");\n+/// let c = a + &b;\n+/// // `a` is moved and can no longer be used here.\n+/// ```\n+///\n+/// If you want to keep using the first `String`, you can clone it and append to the clone instead:\n+///\n+/// ```\n+/// let a = String::from(\"hello\");\n+/// let b = String::from(\" world\");\n+/// let c = a.clone() + &b;\n+/// // `a` is still valid here.\n+/// ```\n+///\n+/// Concatenating `&str` slices can be done by converting the first to a `String`:\n+///\n+/// ```\n+/// let a = \"hello\";\n+/// let b = \" world\";\n+/// let c = a.to_string() + b;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Add<&'a str> for String {\n     type Output = String;\n@@ -1640,6 +1677,11 @@ impl<'a> Add<&'a str> for String {\n     }\n }\n \n+/// Implements the `+=` operator for appending to a `String`.\n+///\n+/// This has the same behavior as the [`push_str()`] method.\n+///\n+/// [`push_str()`]: struct.String.html#method.push_str\n #[stable(feature = \"stringaddassign\", since = \"1.12.0\")]\n impl<'a> AddAssign<&'a str> for String {\n     #[inline]"}, {"sha": "bc7f562452d3b78bd265c0fab1096ae04865b702", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=3b10300e0ac29fe383e316529576f7cac86d0112", "patch": "@@ -1776,6 +1776,7 @@ array_impls! {\n     30 31 32\n }\n \n+/// Implements comparison of vectors, lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd> PartialOrd for Vec<T> {\n     #[inline]\n@@ -1787,6 +1788,7 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Eq> Eq for Vec<T> {}\n \n+/// Implements ordering of vectors, lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Ord for Vec<T> {\n     #[inline]"}, {"sha": "0331c5d4ba4013280c27dabe8e141126117b5685", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=3b10300e0ac29fe383e316529576f7cac86d0112", "patch": "@@ -2202,13 +2202,15 @@ impl<A, B> PartialEq<[B]> for [A] where A: PartialEq<B> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Eq> Eq for [T] {}\n \n+/// Implements comparison of vectors lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Ord for [T] {\n     fn cmp(&self, other: &[T]) -> Ordering {\n         SliceOrd::compare(self, other)\n     }\n }\n \n+/// Implements comparison of vectors lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd> PartialOrd for [T] {\n     fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {"}, {"sha": "925cd84154a2e6683479e3c02789acbe093a6352", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b10300e0ac29fe383e316529576f7cac86d0112/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3b10300e0ac29fe383e316529576f7cac86d0112", "patch": "@@ -1366,6 +1366,13 @@ mod traits {\n     use ops;\n     use str::eq_slice;\n \n+    /// Implements ordering of strings.\n+    ///\n+    /// Strings are ordered  lexicographically by their byte values.  This orders Unicode code\n+    /// points based on their positions in the code charts.  This is not necessarily the same as\n+    /// \"alphabetical\" order, which varies by language and locale.  Sorting strings according to\n+    /// culturally-accepted standards requires locale-specific data that is outside the scope of\n+    /// the `str` type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Ord for str {\n         #[inline]\n@@ -1387,6 +1394,13 @@ mod traits {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Eq for str {}\n \n+    /// Implements comparison operations on strings.\n+    ///\n+    /// Strings are compared lexicographically by their byte values.  This compares Unicode code\n+    /// points based on their positions in the code charts.  This is not necessarily the same as\n+    /// \"alphabetical\" order, which varies by language and locale.  Comparing strings according to\n+    /// culturally-accepted standards requires locale-specific data that is outside the scope of\n+    /// the `str` type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl PartialOrd for str {\n         #[inline]"}]}