{"sha": "257d3244f0da284607afe01859781312430438ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1N2QzMjQ0ZjBkYTI4NDYwN2FmZTAxODU5NzgxMzEyNDMwNDM4YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-18T02:55:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-18T02:55:09Z"}, "message": "Auto merge of #30980 - gereeter:fix-btree-iter-variance, r=apasel422\n\nThis takes the approach of making `NodeRef` universally covariant.\n\n Fixes #30979.", "tree": {"sha": "e6ff78e7625468637b3427d0d22098f3124bea74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6ff78e7625468637b3427d0d22098f3124bea74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257d3244f0da284607afe01859781312430438ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257d3244f0da284607afe01859781312430438ba", "html_url": "https://github.com/rust-lang/rust/commit/257d3244f0da284607afe01859781312430438ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257d3244f0da284607afe01859781312430438ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0bac3f1475503d044f50c5997c3d48d87675541", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bac3f1475503d044f50c5997c3d48d87675541", "html_url": "https://github.com/rust-lang/rust/commit/d0bac3f1475503d044f50c5997c3d48d87675541"}, {"sha": "7a9c4a4941932b003590c6416619bbf5556c366a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9c4a4941932b003590c6416619bbf5556c366a", "html_url": "https://github.com/rust-lang/rust/commit/7a9c4a4941932b003590c6416619bbf5556c366a"}], "stats": {"total": 135, "additions": 118, "deletions": 17}, "files": [{"sha": "492263da2bc5be2c2d75900abfc72553f2297b4e", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/257d3244f0da284607afe01859781312430438ba/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257d3244f0da284607afe01859781312430438ba/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=257d3244f0da284607afe01859781312430438ba", "patch": "@@ -12,6 +12,7 @@ use core::cmp::Ordering;\n use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n use core::iter::FromIterator;\n+use core::marker::PhantomData;\n use core::ops::Index;\n use core::{fmt, intrinsics, mem, ptr};\n \n@@ -158,7 +159,8 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n             Found(handle) => {\n                 Some(OccupiedEntry {\n                     handle: handle,\n-                    length: &mut self.length\n+                    length: &mut self.length,\n+                    _marker: PhantomData,\n                 }.remove_kv().0)\n             },\n             GoDown(_) => None\n@@ -172,7 +174,8 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n                 VacantEntry {\n                     key: key,\n                     handle: handle,\n-                    length: &mut self.length\n+                    length: &mut self.length,\n+                    _marker: PhantomData,\n                 }.insert(());\n                 None\n             }\n@@ -223,7 +226,10 @@ pub struct Range<'a, K: 'a, V: 'a> {\n /// A mutable iterator over a sub-range of BTreeMap's entries.\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-    back: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>\n+    back: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n+\n+    // Be invariant in `K` and `V`\n+    _marker: PhantomData<&'a mut (K, V)>,\n }\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n@@ -247,7 +253,10 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     key: K,\n     handle: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n-    length: &'a mut usize\n+    length: &'a mut usize,\n+\n+    // Be invariant in `K` and `V`\n+    _marker: PhantomData<&'a mut (K, V)>,\n }\n \n /// An occupied Entry.\n@@ -259,7 +268,10 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n         marker::LeafOrInternal\n     >, marker::KV>,\n \n-    length: &'a mut usize\n+    length: &'a mut usize,\n+\n+    // Be invariant in `K` and `V`\n+    _marker: PhantomData<&'a mut (K, V)>,\n }\n \n impl<K: Ord, V> BTreeMap<K, V> {\n@@ -415,7 +427,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n             Found(handle) => {\n                 Some(OccupiedEntry {\n                     handle: handle,\n-                    length: &mut self.length\n+                    length: &mut self.length,\n+                    _marker: PhantomData,\n                 }.remove())\n             },\n             GoDown(_) => None\n@@ -568,7 +581,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n         RangeMut {\n             front: front,\n-            back: back\n+            back: back,\n+            _marker: PhantomData\n         }\n     }\n \n@@ -593,12 +607,14 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         match search::search_tree(self.root.as_mut(), &key) {\n             Found(handle) => Occupied(OccupiedEntry {\n                 handle: handle,\n-                length: &mut self.length\n+                length: &mut self.length,\n+                _marker: PhantomData,\n             }),\n             GoDown(handle) => Vacant(VacantEntry {\n                 key: key,\n                 handle: handle,\n-                length: &mut self.length\n+                length: &mut self.length,\n+                _marker: PhantomData,\n             })\n         }\n     }\n@@ -1235,6 +1251,7 @@ impl<K, V> BTreeMap<K, V> {\n             range: RangeMut {\n                 front: first_leaf_edge(root1),\n                 back: last_leaf_edge(root2),\n+                _marker: PhantomData,\n             },\n             length: self.length\n         }"}, {"sha": "c8a0f60587e9eaa5a89df18e2888b854016d52e6", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/257d3244f0da284607afe01859781312430438ba/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257d3244f0da284607afe01859781312430438ba/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=257d3244f0da284607afe01859781312430438ba", "patch": "@@ -97,13 +97,13 @@ impl<K, V> BoxedNode<K, V> {\n         }\n     }\n \n-    unsafe fn from_ptr(ptr: NonZero<*mut LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: Unique::new(*ptr) }\n+    unsafe fn from_ptr(ptr: NonZero<*const LeafNode<K, V>>) -> Self {\n+        BoxedNode { ptr: Unique::new(*ptr as *mut LeafNode<K, V>) }\n     }\n \n-    fn as_ptr(&self) -> NonZero<*mut LeafNode<K, V>> {\n+    fn as_ptr(&self) -> NonZero<*const LeafNode<K, V>> {\n         unsafe {\n-            NonZero::new(*self.ptr)\n+            NonZero::new(*self.ptr as *const LeafNode<K, V>)\n         }\n     }\n }\n@@ -209,6 +209,11 @@ impl<K, V> Root<K, V> {\n     }\n }\n \n+// N.B. `NodeRef` is always covariant in `K` and `V`, even when the `BorrowType`\n+// is `Mut`. This is technically wrong, but cannot result in any unsafety due to\n+// internal use of `NodeRef` because we stay completely generic over `K` and `V`.\n+// However, whenever a public type wraps `NodeRef`, make sure that it has the\n+// correct variance.\n /// A reference to a node.\n ///\n /// This type has a number of paramaters that controls how it acts:\n@@ -223,8 +228,8 @@ impl<K, V> Root<K, V> {\n ///   `NodeRef` could be pointing to either type of node.\n pub struct NodeRef<BorrowType, K, V, Type> {\n     height: usize,\n-    node: NonZero<*mut LeafNode<K, V>>,\n-    root: *mut Root<K, V>,\n+    node: NonZero<*const LeafNode<K, V>>,\n+    root: *const Root<K, V>,\n     _marker: PhantomData<(BorrowType, Type)>\n }\n \n@@ -401,7 +406,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n \n     fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> {\n         unsafe {\n-            &mut **self.node\n+            &mut *(*self.node as *mut LeafNode<K, V>)\n         }\n     }\n \n@@ -434,7 +439,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     pub fn into_root_mut(self) -> &'a mut Root<K, V> {\n         unsafe {\n-            &mut *self.root\n+            &mut *(self.root as *mut Root<K, V>)\n         }\n     }\n "}, {"sha": "05d4aff108aa9142942f3b485f9dcfb457d610d6", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/257d3244f0da284607afe01859781312430438ba/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257d3244f0da284607afe01859781312430438ba/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=257d3244f0da284607afe01859781312430438ba", "patch": "@@ -378,6 +378,22 @@ fn test_clone() {\n     }\n }\n \n+#[test]\n+fn test_variance() {\n+    use std::collections::btree_map::{Iter, IntoIter, Range, Keys, Values};\n+\n+    fn map_key<'new>(v: BTreeMap<&'static str, ()>) -> BTreeMap<&'new str, ()> { v }\n+    fn map_val<'new>(v: BTreeMap<(), &'static str>) -> BTreeMap<(), &'new str> { v }\n+    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, ()>) -> Iter<'a, &'new str, ()> { v }\n+    fn iter_val<'a, 'new>(v: Iter<'a, (), &'static str>) -> Iter<'a, (), &'new str> { v }\n+    fn into_iter_key<'new>(v: IntoIter<&'static str, ()>) -> IntoIter<&'new str, ()> { v }\n+    fn into_iter_val<'new>(v: IntoIter<(), &'static str>) -> IntoIter<(), &'new str> { v }\n+    fn range_key<'a, 'new>(v: Range<'a, &'static str, ()>) -> Range<'a, &'new str, ()> { v }\n+    fn range_val<'a, 'new>(v: Range<'a, (), &'static str>) -> Range<'a, (), &'new str> { v }\n+    fn keys<'a, 'new>(v: Keys<'a, &'static str, ()>) -> Keys<'a, &'new str, ()> { v }\n+    fn vals<'a, 'new>(v: Values<'a, (), &'static str>) -> Values<'a, (), &'new str> { v }\n+}\n+\n mod bench {\n     use std::collections::BTreeMap;\n     use std::__rand::{Rng, thread_rng};"}, {"sha": "e9607de00a34f0bac195bd437dea2ec5948d9f11", "filename": "src/test/compile-fail/variance-btree-invariant-types.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/257d3244f0da284607afe01859781312430438ba/src%2Ftest%2Fcompile-fail%2Fvariance-btree-invariant-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257d3244f0da284607afe01859781312430438ba/src%2Ftest%2Fcompile-fail%2Fvariance-btree-invariant-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-btree-invariant-types.rs?ref=257d3244f0da284607afe01859781312430438ba", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::collections::btree_map::{IterMut, OccupiedEntry, VacantEntry};\n+\n+fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n+    v //~ ERROR mismatched types\n+}\n+\n+fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n+                         -> OccupiedEntry<'a, &'new (), ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n+                         -> OccupiedEntry<'a, (), &'new ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n+                            -> OccupiedEntry<'a, &'static (), ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n+                            -> OccupiedEntry<'a, (), &'static ()> {\n+    v //~ ERROR mismatched types\n+}\n+\n+fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n+                         -> VacantEntry<'a, &'new (), ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n+                         -> VacantEntry<'a, (), &'new ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n+                            -> VacantEntry<'a, &'static (), ()> {\n+    v //~ ERROR mismatched types\n+}\n+fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n+                            -> VacantEntry<'a, (), &'static ()> {\n+    v //~ ERROR mismatched types\n+}\n+\n+#[rustc_error]\n+fn main() { }"}]}