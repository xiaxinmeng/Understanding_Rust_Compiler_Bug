{"sha": "cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMDRmMGMwMTliZGQ3NzQwNmE3ZmViNmFlN2Y0YTE3OTI0ZDA2OTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-02T16:01:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-02T16:01:38Z"}, "message": "Merge #6440\n\n6440: Deny unreachable pub r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5bb833b20c4d66a3683ceeb60a922a86284d5ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb833b20c4d66a3683ceeb60a922a86284d5ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoC1iCRBK7hj4Ov3rIwAAdHIIAHkxpmZFC9YTva/IRR0o/uJz\nt0U17aIWnCrnkKb8RNitOP7Ga6EU59S9DRp0K1aKI0e1eGuM79xslqWm76De7W8Z\n7gOXvVXthKpkoX4PC45V8jYQhdRs2htqt5NiXSvJjCrCXIZto5MqLWneNwZBMLwZ\nmsJyV/2SkndBsGtJFkEt8U1r+yiB28uAQmx6zwODeRCMWFCvBo033FSH5TIgoH3k\n+zejh65N6kESHDn9LsqDLKcDP4394tzGnR+6RHcvY4tFBVD+sHsu/kaAlqiFE+Lp\nxIODCeb5FpsRLOGPDSpk0elGl66cgRcBjBdkHijFMhXxLj9E9qGVAiP52vK3n8M=\n=i0fq\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bb833b20c4d66a3683ceeb60a922a86284d5ad6\nparent 731b38fa3c1694648e6c8e60f61820f9783343eb\nparent f5e7f07838975757703a7e00adb45ee43c2d9a1a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604332898 +0000\ncommitter GitHub <noreply@github.com> 1604332898 +0000\n\nMerge #6440\n\n6440: Deny unreachable pub r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "html_url": "https://github.com/rust-lang/rust/commit/cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "731b38fa3c1694648e6c8e60f61820f9783343eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/731b38fa3c1694648e6c8e60f61820f9783343eb", "html_url": "https://github.com/rust-lang/rust/commit/731b38fa3c1694648e6c8e60f61820f9783343eb"}, {"sha": "f5e7f07838975757703a7e00adb45ee43c2d9a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e7f07838975757703a7e00adb45ee43c2d9a1a", "html_url": "https://github.com/rust-lang/rust/commit/f5e7f07838975757703a7e00adb45ee43c2d9a1a"}], "stats": {"total": 249, "additions": 121, "deletions": 128}, "files": [{"sha": "1850068a340cdb7492bb4960f5b386e3cabc7505", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -12,7 +12,7 @@ env:\n   CARGO_NET_RETRY: 10\n   CI: 1\n   RUST_BACKTRACE: short\n-  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n+  RUSTFLAGS: \"-D warnings -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "d189ce9c901d2fe958bcc5b574590db8c45f2945", "filename": ".github/workflows/metrics.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Fmetrics.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Fmetrics.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmetrics.yaml?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -7,7 +7,7 @@ on:\n env:\n   CARGO_INCREMENTAL: 0\n   CARGO_NET_RETRY: 10\n-  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n+  RUSTFLAGS: \"-D warnings -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "919d58925e9d18a1291f35c34d9150db52d1d39c", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -11,7 +11,7 @@ on:\n env:\n   CARGO_INCREMENTAL: 0\n   CARGO_NET_RETRY: 10\n-  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n+  RUSTFLAGS: \"-D warnings -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "897f64df04b3ceff460904911da199c16261d5b4", "filename": ".github/workflows/rustdoc.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Frustdoc.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/.github%2Fworkflows%2Frustdoc.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frustdoc.yaml?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -7,7 +7,7 @@ on:\n env:\n   CARGO_INCREMENTAL: 0\n   CARGO_NET_RETRY: 10\n-  RUSTFLAGS: \"-D warnings \" # -W unreachable-pub\"\n+  RUSTFLAGS: \"-D warnings -W unreachable-pub\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "e9b41d0821919d76ea55cb7a38bfa9a13001732b", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -416,11 +416,11 @@ checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.18\"\n+version = \"1.0.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"da80be589a72651dcda34d8b35bcdc9b7254ad06325611074d9cc0fbb19f60ee\"\n+checksum = \"7411863d55df97a419aa64cb4d2f167103ea9d767e2c54a1868b7ac3f6b47129\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n+ \"cfg-if 1.0.0\",\n  \"crc32fast\",\n  \"libc\",\n  \"miniz_oxide\",\n@@ -1298,9 +1298,9 @@ checksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n \n [[package]]\n name = \"regex\"\n-version = \"1.4.1\"\n+version = \"1.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8963b85b8ce3074fecffde43b4b0dded83ce2f367dc8d363afc56679f3ee820b\"\n+checksum = \"38cf2c13ed4745de91a5eb834e11c00bcc3709e773173b2ce4c56c9fbde04b9c\"\n dependencies = [\n  \"regex-syntax\",\n ]\n@@ -1317,9 +1317,9 @@ dependencies = [\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.20\"\n+version = \"0.6.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8cab7a364d15cde1e505267766a2d3c4e22a843e1a601f0fa7564c0f82ced11c\"\n+checksum = \"3b181ba2dcf07aaccad5448e8ead58db5b742cf85dfe035e2227f137a539a189\"\n \n [[package]]\n name = \"rowan\""}, {"sha": "f47edbb765851defcd73547e7de480f79b35dd01", "filename": "crates/assists/src/utils/import_assets.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -26,13 +26,13 @@ pub(crate) enum ImportCandidate {\n \n #[derive(Debug)]\n pub(crate) struct TraitImportCandidate {\n-    pub ty: hir::Type,\n-    pub name: ast::NameRef,\n+    pub(crate) ty: hir::Type,\n+    pub(crate) name: ast::NameRef,\n }\n \n #[derive(Debug)]\n pub(crate) struct PathImportCandidate {\n-    pub name: ast::NameRef,\n+    pub(crate) name: ast::NameRef,\n }\n \n #[derive(Debug)]"}, {"sha": "a76bd5ebf67137b2c3353e50bf24c694e335a55b", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -17,13 +17,13 @@ use syntax::{\n use test_utils::mark;\n \n #[derive(Debug)]\n-pub enum ImportScope {\n+pub(crate) enum ImportScope {\n     File(ast::SourceFile),\n     Module(ast::ItemList),\n }\n \n impl ImportScope {\n-    pub fn from(syntax: SyntaxNode) -> Option<Self> {\n+    pub(crate) fn from(syntax: SyntaxNode) -> Option<Self> {\n         if let Some(module) = ast::Module::cast(syntax.clone()) {\n             module.item_list().map(ImportScope::Module)\n         } else if let this @ Some(_) = ast::SourceFile::cast(syntax.clone()) {"}, {"sha": "88ba86acb685fb8bfe0c99c3795c51cd614ebe6d", "filename": "crates/completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -88,7 +88,7 @@ enum State {\n }\n \n impl FormatStrParser {\n-    pub fn new(input: String) -> Self {\n+    pub(crate) fn new(input: String) -> Self {\n         Self {\n             input: input.into(),\n             output: String::new(),\n@@ -98,7 +98,7 @@ impl FormatStrParser {\n         }\n     }\n \n-    pub fn parse(&mut self) -> Result<(), ()> {\n+    pub(crate) fn parse(&mut self) -> Result<(), ()> {\n         let mut current_expr = String::new();\n \n         let mut placeholder_id = 1;\n@@ -194,7 +194,7 @@ impl FormatStrParser {\n         Ok(())\n     }\n \n-    pub fn into_suggestion(&self, macro_name: &str) -> String {\n+    pub(crate) fn into_suggestion(&self, macro_name: &str) -> String {\n         assert!(self.parsed, \"Attempt to get a suggestion from not parsed expression\");\n \n         let expressions_as_string = self.extracted_expressions.join(\", \");"}, {"sha": "30a5e45809b9a2bbfa5b315e482fb3a0433aa196", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -4,24 +4,25 @@ use std::{iter, sync::Arc};\n use arrayvec::ArrayVec;\n use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n use either::Either;\n-use hir_def::find_path::PrefixKind;\n use hir_def::{\n     adt::ReprKind,\n     adt::StructKind,\n     adt::VariantData,\n     builtin_type::BuiltinType,\n     expr::{BindingAnnotation, Pat, PatId},\n     import_map,\n+    item_tree::ItemTreeNode,\n     lang_item::LangItemTarget,\n     path::ModPath,\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AssocContainerId, AttrDefId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId,\n-    HasModule, ImplId, LocalEnumVariantId, LocalFieldId, LocalModuleId, Lookup, ModuleId, StaticId,\n-    StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, DefWithBodyId, EnumId,\n+    FunctionId, GenericDefId, HasModule, ImplId, LocalEnumVariantId, LocalFieldId, LocalModuleId,\n+    Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n+use hir_def::{find_path::PrefixKind, item_scope::ItemInNs, visibility::Visibility};\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n     name::{name, AsName},\n@@ -275,11 +276,6 @@ impl ModuleDef {\n     }\n }\n \n-pub use hir_def::{\n-    attr::Attrs, item_scope::ItemInNs, item_tree::ItemTreeNode, visibility::Visibility,\n-    AssocItemId, AssocItemLoc,\n-};\n-\n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {\n         Module { id: ModuleId { krate: krate.id, local_id: crate_module_id } }"}, {"sha": "265ef6d1f3f1b85433e1a78a30e2a889ef7db13b", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -4,13 +4,13 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    expr::PatId, AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, GenericDefId,\n-    ModuleDefId, VariantId,\n+    expr::PatId, item_scope::ItemInNs, AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId,\n+    GenericDefId, ModuleDefId, VariantId,\n };\n \n use crate::{\n-    code_model::ItemInNs, Adt, AssocItem, DefWithBody, EnumVariant, Field, GenericDef, Local,\n-    MacroDef, ModuleDef, VariantDef,\n+    Adt, AssocItem, DefWithBody, EnumVariant, Field, GenericDef, Local, MacroDef, ModuleDef,\n+    VariantDef,\n };\n \n macro_rules! from_id {"}, {"sha": "c77494152e6730a3cfaab8c6a410629f0be2a189", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -6,15 +6,14 @@ use hir_def::{\n     src::{HasChildSource, HasSource as _},\n     Lookup, VariantId,\n };\n+use hir_expand::InFile;\n use syntax::ast;\n \n use crate::{\n     db::HirDatabase, Const, Enum, EnumVariant, Field, FieldSource, Function, ImplDef, MacroDef,\n     Module, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n };\n \n-pub use hir_expand::InFile;\n-\n pub trait HasSource {\n     type Ast;\n     fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast>;"}, {"sha": "0d184379f10242ded3695acebcf1f8dc52d39119", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -36,7 +36,7 @@ pub use crate::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n         Crate, CrateDependency, DefWithBody, Enum, EnumVariant, Field, FieldSource, Function,\n         GenericDef, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static,\n-        Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n+        Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},\n@@ -53,6 +53,7 @@ pub use hir_def::{\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},\n     type_ref::{Mutability, TypeRef},\n+    visibility::Visibility,\n };\n pub use hir_expand::{\n     name::known, name::AsName, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc,"}, {"sha": "e57bdc133084e71aa53f12d73224551c4ab98a0f", "filename": "crates/hir_def/src/body/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -5,12 +5,12 @@ use hir_expand::diagnostics::DiagnosticSink;\n use crate::diagnostics::InactiveCode;\n \n #[derive(Debug, Eq, PartialEq)]\n-pub enum BodyDiagnostic {\n+pub(crate) enum BodyDiagnostic {\n     InactiveCode(InactiveCode),\n }\n \n impl BodyDiagnostic {\n-    pub fn add_to(&self, sink: &mut DiagnosticSink<'_>) {\n+    pub(crate) fn add_to(&self, sink: &mut DiagnosticSink<'_>) {\n         match self {\n             BodyDiagnostic::InactiveCode(diag) => {\n                 sink.push(diag.clone());"}, {"sha": "fca501e1f2bbdb06ed9f141b9676cb6e58c5eee7", "filename": "crates/hir_expand/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -14,7 +14,7 @@ use rustc_hash::FxHashSet;\n     crate::db::AstDatabaseStorage\n )]\n #[derive(Default)]\n-pub struct TestDB {\n+pub(crate) struct TestDB {\n     storage: salsa::Storage<TestDB>,\n     events: Mutex<Option<Vec<salsa::Event>>>,\n }"}, {"sha": "a14d67c066ae062d3e7fc31c3fd8552a8e08adba", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -94,7 +94,7 @@ enum BindingMode {\n }\n \n impl BindingMode {\n-    pub fn convert(annotation: BindingAnnotation) -> BindingMode {\n+    fn convert(annotation: BindingAnnotation) -> BindingMode {\n         match annotation {\n             BindingAnnotation::Unannotated | BindingAnnotation::Mutable => BindingMode::Move,\n             BindingAnnotation::Ref => BindingMode::Ref(Mutability::Shared),"}, {"sha": "76984242e1c8cddf4959d97b5db6349e42e0c4a1", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -35,7 +35,7 @@ where\n \n #[derive(Debug)]\n pub(super) struct Canonicalized<T> {\n-    pub value: Canonical<T>,\n+    pub(super) value: Canonical<T>,\n     free_vars: Vec<InferTy>,\n }\n "}, {"sha": "55e2c3a3e9b507343db358a4ee2c44f06a867f48", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -27,7 +27,7 @@ use mapping::{\n     TypeAliasAsValue,\n };\n \n-pub use self::interner::*;\n+pub(crate) use self::interner::*;\n \n pub(super) mod tls;\n mod interner;"}, {"sha": "39569e690ef656c22f584e858877ae81c4b12bc6", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -10,21 +10,21 @@ use std::{fmt, sync::Arc};\n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Interner;\n \n-pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n-pub type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n-pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n-pub type TraitId = chalk_ir::TraitId<Interner>;\n-pub type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n-pub type AdtId = chalk_ir::AdtId<Interner>;\n-pub type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;\n-pub type ImplId = chalk_ir::ImplId<Interner>;\n-pub type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n-pub type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n-pub type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n-pub type FnDefId = chalk_ir::FnDefId<Interner>;\n-pub type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n-pub type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n-pub type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n+pub(crate) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n+pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n+pub(crate) type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n+pub(crate) type TraitId = chalk_ir::TraitId<Interner>;\n+pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n+pub(crate) type AdtId = chalk_ir::AdtId<Interner>;\n+pub(crate) type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;\n+pub(crate) type ImplId = chalk_ir::ImplId<Interner>;\n+pub(crate) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n+pub(crate) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n+pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n+pub(crate) type FnDefId = chalk_ir::FnDefId<Interner>;\n+pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n+pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n+pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n \n impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Arc<chalk_ir::TyData<Self>>;"}, {"sha": "86cbc4c7e4194279f0e3c46119e1da07539dabb4", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -464,7 +464,7 @@ impl ToChalk for CallableDefId {\n     }\n }\n \n-pub struct TypeAliasAsAssocType(pub TypeAliasId);\n+pub(crate) struct TypeAliasAsAssocType(pub(crate) TypeAliasId);\n \n impl ToChalk for TypeAliasAsAssocType {\n     type Chalk = AssocTypeId;\n@@ -478,7 +478,7 @@ impl ToChalk for TypeAliasAsAssocType {\n     }\n }\n \n-pub struct TypeAliasAsForeignType(pub TypeAliasId);\n+pub(crate) struct TypeAliasAsForeignType(pub(crate) TypeAliasId);\n \n impl ToChalk for TypeAliasAsForeignType {\n     type Chalk = ForeignDefId;\n@@ -492,7 +492,7 @@ impl ToChalk for TypeAliasAsForeignType {\n     }\n }\n \n-pub struct TypeAliasAsValue(pub TypeAliasId);\n+pub(crate) struct TypeAliasAsValue(pub(crate) TypeAliasId);\n \n impl ToChalk for TypeAliasAsValue {\n     type Chalk = AssociatedTyValueId;"}, {"sha": "02e17ba43714befa0749941594dd8162c94bb740", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -25,7 +25,7 @@ use crate::{diagnostics::Fix, references::rename::rename_with_semantics, FilePos\n /// A [Diagnostic] that potentially has a fix available.\n ///\n /// [Diagnostic]: hir::diagnostics::Diagnostic\n-pub trait DiagnosticWithFix: Diagnostic {\n+pub(crate) trait DiagnosticWithFix: Diagnostic {\n     fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix>;\n }\n "}, {"sha": "10263537a488e88b44f1b4e348d3dff65ad0b45b", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -1,7 +1,6 @@\n //! Resolves and rewrites links in markdown documentation.\n \n-use std::convert::TryFrom;\n-use std::iter::once;\n+use std::{convert::TryFrom, iter::once};\n \n use itertools::Itertools;\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n@@ -21,10 +20,10 @@ use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset,\n \n use crate::{FilePosition, Semantics};\n \n-pub type DocumentationLink = String;\n+pub(crate) type DocumentationLink = String;\n \n /// Rewrite documentation links in markdown to point to an online host (e.g. docs.rs)\n-pub fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition) -> String {\n+pub(crate) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition) -> String {\n     let mut cb = |link: BrokenLink| {\n         Some((\n             /*url*/ link.reference.to_owned().into(),\n@@ -63,7 +62,7 @@ pub fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition)\n }\n \n /// Remove all links in markdown documentation.\n-pub fn remove_links(markdown: &str) -> String {\n+pub(crate) fn remove_links(markdown: &str) -> String {\n     let mut drop_link = false;\n \n     let mut opts = Options::empty();"}, {"sha": "415795e8cde2134bba36a8c9cbbbadd94d735e63", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -27,7 +27,7 @@ pub struct StructureNode {\n //\n // | VS Code | kbd:[Ctrl+Shift+O]\n // |===\n-pub fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n+pub(crate) fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n "}, {"sha": "b5a6f66fdd35c3806a2901ab3fe319cf767d0144", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -18,7 +18,7 @@ use text_edit::{TextEdit, TextEditBuilder};\n //\n // | VS Code | **Rust Analyzer: Join lines**\n // |===\n-pub fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n+pub(crate) fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n     let range = if range.is_empty() {\n         let syntax = file.syntax();\n         let text = syntax.text().slice(range.start()..);"}, {"sha": "6288f7ea7e1c03ed9ddc557a169f698b0114dc8c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -72,18 +72,20 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     markup::Markup,\n     prime_caches::PrimeCachesProgress,\n-    references::{\n-        Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, RenameError,\n-    },\n+    references::{rename::RenameError, Declaration, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     syntax_highlighting::{\n-        Highlight, HighlightModifier, HighlightModifiers, HighlightTag, HighlightedRange,\n+        tags::{Highlight, HighlightModifier, HighlightModifiers, HighlightTag},\n+        HighlightedRange,\n     },\n };\n pub use completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n };\n-pub use ide_db::call_info::CallInfo;\n+pub use ide_db::{\n+    call_info::CallInfo,\n+    search::{Reference, ReferenceAccess, ReferenceKind},\n+};\n \n pub use assists::{\n     utils::MergeBehaviour, Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist,\n@@ -503,7 +505,7 @@ impl Analysis {\n         position: FilePosition,\n         new_name: &str,\n     ) -> Cancelable<Result<RangeInfo<SourceChange>, RenameError>> {\n-        self.with_db(|db| references::rename(db, position, new_name))\n+        self.with_db(|db| references::rename::rename(db, position, new_name))\n     }\n \n     pub fn structural_search_replace("}, {"sha": "3ec5c629e4f263ab837a2a0f0f37510108ab2045", "filename": "crates/ide/src/markdown_remove.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -1,11 +1,10 @@\n //! Removes markdown from strings.\n-\n use pulldown_cmark::{Event, Parser, Tag};\n \n /// Removes all markdown, keeping the text and code blocks\n ///\n /// Currently limited in styling, i.e. no ascii tables or lists\n-pub fn remove_markdown(markdown: &str) -> String {\n+pub(crate) fn remove_markdown(markdown: &str) -> String {\n     let mut out = String::new();\n     let parser = Parser::new(markdown);\n "}, {"sha": "d70248afe6b6f0dd459245e957badede52bf983f", "filename": "crates/ide/src/matching_brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmatching_brace.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -15,7 +15,7 @@ use test_utils::mark;\n //\n // | VS Code | **Rust Analyzer: Find matching brace**\n // |===\n-pub fn matching_brace(file: &SourceFile, offset: TextSize) -> Option<TextSize> {\n+pub(crate) fn matching_brace(file: &SourceFile, offset: TextSize) -> Option<TextSize> {\n     const BRACES: &[SyntaxKind] =\n         &[T!['{'], T!['}'], T!['['], T![']'], T!['('], T![')'], T![<], T![>], T![|], T![|]];\n     let (brace_token, brace_idx) = file"}, {"sha": "e05465b32e9d3158920a5c47f6b9a5b465e7fa0d", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -14,7 +14,8 @@ pub(crate) mod rename;\n use hir::Semantics;\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n-    search::SearchScope,\n+    search::Reference,\n+    search::{ReferenceAccess, ReferenceKind, SearchScope},\n     RootDatabase,\n };\n use syntax::{\n@@ -25,11 +26,6 @@ use syntax::{\n \n use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n \n-pub(crate) use self::rename::rename;\n-pub use self::rename::RenameError;\n-\n-pub use ide_db::search::{Reference, ReferenceAccess, ReferenceKind};\n-\n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n     declaration: Declaration,"}, {"sha": "efcc8ecfe6b03d42e180826a5ccdb726e846aad7", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -2,7 +2,7 @@ mod format;\n mod html;\n mod injection;\n mod macro_rules;\n-mod tags;\n+pub(crate) mod tags;\n #[cfg(test)]\n mod tests;\n \n@@ -20,12 +20,13 @@ use syntax::{\n };\n \n use crate::{\n-    syntax_highlighting::{format::FormatStringHighlighter, macro_rules::MacroRulesHighlighter},\n-    FileId,\n+    syntax_highlighting::{\n+        format::FormatStringHighlighter, macro_rules::MacroRulesHighlighter, tags::Highlight,\n+    },\n+    FileId, HighlightModifier, HighlightTag,\n };\n \n pub(crate) use html::highlight_as_html;\n-pub use tags::{Highlight, HighlightModifier, HighlightModifiers, HighlightTag};\n \n #[derive(Debug, Clone)]\n pub struct HighlightedRange {"}, {"sha": "ccc56c4796c3e750e8a5e41a06ad4caa52c0cb15", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -21,7 +21,7 @@ pub(crate) struct SubtreeTokenSource<'a> {\n impl<'a> SubtreeTokenSource<'a> {\n     // Helper function used in test\n     #[cfg(test)]\n-    pub fn text(&self) -> SmolStr {\n+    pub(crate) fn text(&self) -> SmolStr {\n         match *self.get(self.curr.1) {\n             Some(ref tt) => tt.text.clone(),\n             _ => SmolStr::new(\"\"),"}, {"sha": "d5f6a4025ee70a89fe65e4d8a8f98285d376e0d3", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -278,13 +278,13 @@ impl CargoWorkspace {\n }\n \n #[derive(Debug, Clone, Default)]\n-pub struct ExternResources {\n+pub(crate) struct ExternResources {\n     out_dirs: FxHashMap<PackageId, AbsPathBuf>,\n     proc_dylib_paths: FxHashMap<PackageId, AbsPathBuf>,\n     cfgs: FxHashMap<PackageId, Vec<CfgFlag>>,\n }\n \n-pub fn load_extern_resources(\n+pub(crate) fn load_extern_resources(\n     cargo_toml: &Path,\n     cargo_features: &CargoConfig,\n ) -> Result<ExternResources> {"}, {"sha": "3fe494729b66a56616d0bb65bf40e01537a778fc", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -17,7 +17,7 @@ pub struct Sysroot {\n     crates: Arena<SysrootCrateData>,\n }\n \n-pub type SysrootCrate = Idx<SysrootCrateData>;\n+pub(crate) type SysrootCrate = Idx<SysrootCrateData>;\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct SysrootCrateData {"}, {"sha": "21fba830233abea85592f3201f1e8a537b8b8b77", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -81,7 +81,7 @@ mod tracing_setup {\n     use tracing_subscriber::Registry;\n     use tracing_tree::HierarchicalLayer;\n \n-    pub fn setup_tracing() -> super::Result<()> {\n+    pub(crate) fn setup_tracing() -> super::Result<()> {\n         let filter = EnvFilter::from_env(\"CHALK_DEBUG\");\n         let layer = HierarchicalLayer::default()\n             .with_indent_lines(true)"}, {"sha": "bdbe565e6093fd98307a4194b0c0ffc0bdb717b5", "filename": "crates/rust-analyzer/src/cli/progress_report.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fprogress_report.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fprogress_report.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fprogress_report.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -4,7 +4,7 @@\n use std::io::Write;\n \n /// A Simple ASCII Progress Bar\n-pub struct ProgressReport {\n+pub(crate) struct ProgressReport {\n     curr: f32,\n     text: String,\n     hidden: bool,\n@@ -15,7 +15,7 @@ pub struct ProgressReport {\n }\n \n impl ProgressReport {\n-    pub fn new(len: u64) -> ProgressReport {\n+    pub(crate) fn new(len: u64) -> ProgressReport {\n         ProgressReport {\n             curr: 0.0,\n             text: String::new(),\n@@ -26,7 +26,7 @@ impl ProgressReport {\n         }\n     }\n \n-    pub fn hidden() -> ProgressReport {\n+    pub(crate) fn hidden() -> ProgressReport {\n         ProgressReport {\n             curr: 0.0,\n             text: String::new(),\n@@ -37,18 +37,18 @@ impl ProgressReport {\n         }\n     }\n \n-    pub fn set_message(&mut self, msg: &str) {\n+    pub(crate) fn set_message(&mut self, msg: &str) {\n         self.msg = msg.to_string();\n         self.tick();\n     }\n \n-    pub fn println<I: Into<String>>(&mut self, msg: I) {\n+    pub(crate) fn println<I: Into<String>>(&mut self, msg: I) {\n         self.clear();\n         println!(\"{}\", msg.into());\n         self.tick();\n     }\n \n-    pub fn inc(&mut self, delta: u64) {\n+    pub(crate) fn inc(&mut self, delta: u64) {\n         self.pos += delta;\n         if self.len == 0 {\n             self.set_value(0.0)\n@@ -58,11 +58,11 @@ impl ProgressReport {\n         self.tick();\n     }\n \n-    pub fn finish_and_clear(&mut self) {\n+    pub(crate) fn finish_and_clear(&mut self) {\n         self.clear();\n     }\n \n-    pub fn tick(&mut self) {\n+    pub(crate) fn tick(&mut self) {\n         if self.hidden {\n             return;\n         }"}, {"sha": "04c7ee150ae857f4ed9e2c1c0ee774be0823bf86", "filename": "crates/rust-analyzer/src/document.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -6,11 +6,11 @@\n /// client notifications.\n #[derive(Debug, Clone)]\n pub(crate) struct DocumentData {\n-    pub version: Option<i64>,\n+    pub(crate) version: Option<i64>,\n }\n \n impl DocumentData {\n-    pub fn new(version: i64) -> Self {\n+    pub(crate) fn new(version: i64) -> Self {\n         DocumentData { version: Some(version) }\n     }\n }"}, {"sha": "63c70a09d82197847938d6f1ffdaea0c84f2aafc", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -87,7 +87,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     mem_docs: FxHashMap<VfsPath, DocumentData>,\n-    pub semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n+    pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n }"}, {"sha": "e7991fd281c3a4c5e636d3580c44a0c2f1c8e94f", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -101,12 +101,12 @@ pub(crate) struct SemanticTokensBuilder {\n }\n \n impl SemanticTokensBuilder {\n-    pub fn new(id: String) -> Self {\n+    pub(crate) fn new(id: String) -> Self {\n         SemanticTokensBuilder { id, prev_line: 0, prev_char: 0, data: Default::default() }\n     }\n \n     /// Push a new token onto the builder\n-    pub fn push(&mut self, range: Range, token_index: u32, modifier_bitset: u32) {\n+    pub(crate) fn push(&mut self, range: Range, token_index: u32, modifier_bitset: u32) {\n         let mut push_line = range.start.line as u32;\n         let mut push_char = range.start.character as u32;\n \n@@ -134,12 +134,12 @@ impl SemanticTokensBuilder {\n         self.prev_char = range.start.character as u32;\n     }\n \n-    pub fn build(self) -> SemanticTokens {\n+    pub(crate) fn build(self) -> SemanticTokens {\n         SemanticTokens { result_id: Some(self.id), data: self.data }\n     }\n }\n \n-pub fn diff_tokens(old: &[SemanticToken], new: &[SemanticToken]) -> Vec<SemanticTokensEdit> {\n+pub(crate) fn diff_tokens(old: &[SemanticToken], new: &[SemanticToken]) -> Vec<SemanticTokensEdit> {\n     let offset = new.iter().zip(old.iter()).take_while(|&(n, p)| n == p).count();\n \n     let (_, old) = old.split_at(offset);\n@@ -165,7 +165,7 @@ pub fn diff_tokens(old: &[SemanticToken], new: &[SemanticToken]) -> Vec<Semantic\n     }\n }\n \n-pub fn type_index(type_: SemanticTokenType) -> u32 {\n+pub(crate) fn type_index(type_: SemanticTokenType) -> u32 {\n     SUPPORTED_TYPES.iter().position(|it| *it == type_).unwrap() as u32\n }\n "}, {"sha": "fe9362bc00a12886146dd8a0ed324236cb211c61", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -24,7 +24,7 @@ use vfs::AbsPathBuf;\n \n use crate::testdir::TestDir;\n \n-pub struct Project<'a> {\n+pub(crate) struct Project<'a> {\n     fixture: &'a str,\n     with_sysroot: bool,\n     tmp_dir: Option<TestDir>,\n@@ -33,11 +33,11 @@ pub struct Project<'a> {\n }\n \n impl<'a> Project<'a> {\n-    pub fn with_fixture(fixture: &str) -> Project {\n+    pub(crate) fn with_fixture(fixture: &str) -> Project {\n         Project { fixture, tmp_dir: None, roots: vec![], with_sysroot: false, config: None }\n     }\n \n-    pub fn tmp_dir(mut self, tmp_dir: TestDir) -> Project<'a> {\n+    pub(crate) fn tmp_dir(mut self, tmp_dir: TestDir) -> Project<'a> {\n         self.tmp_dir = Some(tmp_dir);\n         self\n     }\n@@ -47,17 +47,17 @@ impl<'a> Project<'a> {\n         self\n     }\n \n-    pub fn with_sysroot(mut self, sysroot: bool) -> Project<'a> {\n+    pub(crate) fn with_sysroot(mut self, sysroot: bool) -> Project<'a> {\n         self.with_sysroot = sysroot;\n         self\n     }\n \n-    pub fn with_config(mut self, config: impl Fn(&mut Config) + 'static) -> Project<'a> {\n+    pub(crate) fn with_config(mut self, config: impl Fn(&mut Config) + 'static) -> Project<'a> {\n         self.config = Some(Box::new(config));\n         self\n     }\n \n-    pub fn server(self) -> Server {\n+    pub(crate) fn server(self) -> Server {\n         let tmp_dir = self.tmp_dir.unwrap_or_else(|| TestDir::new());\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n@@ -103,11 +103,11 @@ impl<'a> Project<'a> {\n     }\n }\n \n-pub fn project(fixture: &str) -> Server {\n+pub(crate) fn project(fixture: &str) -> Server {\n     Project::with_fixture(fixture).server()\n }\n \n-pub struct Server {\n+pub(crate) struct Server {\n     req_id: Cell<u64>,\n     messages: RefCell<Vec<Message>>,\n     _thread: jod_thread::JoinHandle<()>,\n@@ -128,12 +128,12 @@ impl Server {\n         Server { req_id: Cell::new(1), dir, messages: Default::default(), client, _thread }\n     }\n \n-    pub fn doc_id(&self, rel_path: &str) -> TextDocumentIdentifier {\n+    pub(crate) fn doc_id(&self, rel_path: &str) -> TextDocumentIdentifier {\n         let path = self.dir.path().join(rel_path);\n         TextDocumentIdentifier { uri: Url::from_file_path(path).unwrap() }\n     }\n \n-    pub fn notification<N>(&self, params: N::Params)\n+    pub(crate) fn notification<N>(&self, params: N::Params)\n     where\n         N: lsp_types::notification::Notification,\n         N::Params: Serialize,\n@@ -142,7 +142,7 @@ impl Server {\n         self.send_notification(r)\n     }\n \n-    pub fn request<R>(&self, params: R::Params, expected_resp: Value)\n+    pub(crate) fn request<R>(&self, params: R::Params, expected_resp: Value)\n     where\n         R: lsp_types::request::Request,\n         R::Params: Serialize,\n@@ -159,7 +159,7 @@ impl Server {\n         }\n     }\n \n-    pub fn send_request<R>(&self, params: R::Params) -> Value\n+    pub(crate) fn send_request<R>(&self, params: R::Params) -> Value\n     where\n         R: lsp_types::request::Request,\n         R::Params: Serialize,\n@@ -202,7 +202,7 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n-    pub fn wait_until_workspace_is_loaded(self) -> Server {\n+    pub(crate) fn wait_until_workspace_is_loaded(self) -> Server {\n         self.wait_for_message_cond(1, &|msg: &Message| match msg {\n             Message::Notification(n) if n.method == \"$/progress\" => {\n                 match n.clone().extract::<ProgressParams>(\"$/progress\").unwrap() {\n@@ -241,7 +241,7 @@ impl Server {\n         self.client.sender.send(Message::Notification(not)).unwrap();\n     }\n \n-    pub fn path(&self) -> &Path {\n+    pub(crate) fn path(&self) -> &Path {\n         self.dir.path()\n     }\n }"}, {"sha": "36271344b70b5b4384cca5d546eac6d13ac9b990", "filename": "crates/rust-analyzer/tests/rust-analyzer/testdir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Ftestdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Ftestdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Ftestdir.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -4,13 +4,13 @@ use std::{\n     sync::atomic::{AtomicUsize, Ordering},\n };\n \n-pub struct TestDir {\n+pub(crate) struct TestDir {\n     path: PathBuf,\n     keep: bool,\n }\n \n impl TestDir {\n-    pub fn new() -> TestDir {\n+    pub(crate) fn new() -> TestDir {\n         let base = std::env::temp_dir().join(\"testdir\");\n         let pid = std::process::id();\n \n@@ -27,11 +27,11 @@ impl TestDir {\n         panic!(\"Failed to create a temporary directory\")\n     }\n     #[allow(unused)]\n-    pub fn keep(mut self) -> TestDir {\n+    pub(crate) fn keep(mut self) -> TestDir {\n         self.keep = true;\n         self\n     }\n-    pub fn path(&self) -> &Path {\n+    pub(crate) fn path(&self) -> &Path {\n         &self.path\n     }\n }"}, {"sha": "f3b084bafe1b336d18c80ff36109a02cc2c7df52", "filename": "crates/ssr/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fparsing.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -42,7 +42,7 @@ pub(crate) struct Placeholder {\n \n /// Represents a `$var` in an SSR query.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) struct Var(pub String);\n+pub(crate) struct Var(pub(crate) String);\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum Constraint {"}, {"sha": "815697597ef01be3746f857003aa94abfd8fe30f", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb04f0c019bdd77406a7feb6ae7f4a17924d0693/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=cb04f0c019bdd77406a7feb6ae7f4a17924d0693", "patch": "@@ -120,7 +120,7 @@ impl VfsPath {\n \n #[cfg(windows)]\n mod windows_paths {\n-    pub trait Encode {\n+    pub(crate) trait Encode {\n         fn encode(&self, buf: &mut Vec<u8>);\n     }\n \n@@ -149,7 +149,7 @@ mod windows_paths {\n         }\n     }\n \n-    pub const SEP: &str = \"\\\\\";\n+    pub(crate) const SEP: &str = \"\\\\\";\n     const VERBATIM: &str = \"\\\\\\\\?\\\\\";\n     const UNC: &str = \"UNC\";\n     const DEVICE: &str = \"\\\\\\\\.\\\\\";"}]}