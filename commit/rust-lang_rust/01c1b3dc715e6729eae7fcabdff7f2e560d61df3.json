{"sha": "01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "node_id": "C_kwDOAAsO6NoAKDAxYzFiM2RjNzE1ZTY3MjllYWU3ZmNhYmRmZjdmMmU1NjBkNjFkZjM", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-04-23T21:19:57Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-04-23T21:19:57Z"}, "message": "Fix panic in const eval and parameter destructing", "tree": {"sha": "4d6c526384eb3690459a75e81c783fb6907812dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6c526384eb3690459a75e81c783fb6907812dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "html_url": "https://github.com/rust-lang/rust/commit/01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2feabc4dc462644287372922928110eea4c60ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2feabc4dc462644287372922928110eea4c60ca7", "html_url": "https://github.com/rust-lang/rust/commit/2feabc4dc462644287372922928110eea4c60ca7"}], "stats": {"total": 74, "additions": 57, "deletions": 17}, "files": [{"sha": "6d8e73655ed7a76fb0696129e8729075e8ec2da8", "filename": "crates/hir-ty/src/mir.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir.rs?ref=01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "patch": "@@ -714,13 +714,8 @@ pub enum Rvalue {\n \n     /// Creates an array where each element is the value of the operand.\n     ///\n-    /// This is the cause of a bug in the case where the repetition count is zero because the value\n-    /// is not dropped, see [#74836].\n-    ///\n     /// Corresponds to source code like `[x; 32]`.\n-    ///\n-    /// [#74836]: https://github.com/rust-lang/rust/issues/74836\n-    //Repeat(Operand, ty::Const),\n+    Repeat(Operand, Const),\n \n     /// Creates a reference of the indicated kind to the place.\n     ///\n@@ -932,6 +927,7 @@ impl MirBody {\n                             Rvalue::ShallowInitBox(o, _)\n                             | Rvalue::UnaryOp(_, o)\n                             | Rvalue::Cast(_, o, _)\n+                            | Rvalue::Repeat(o, _)\n                             | Rvalue::Use(o) => for_operand(o, &mut f),\n                             Rvalue::CopyForDeref(p)\n                             | Rvalue::Discriminant(p)"}, {"sha": "bb33da97e3348c3176b5ffe3c1ff391c21e0e388", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "patch": "@@ -769,6 +769,7 @@ impl Evaluator<'_> {\n                     }\n                 }\n             }\n+            Rvalue::Repeat(_, _) => not_supported!(\"evaluating repeat rvalue\"),\n             Rvalue::ShallowInitBox(_, _) => not_supported!(\"shallow init box\"),\n             Rvalue::CopyForDeref(_) => not_supported!(\"copy for deref\"),\n             Rvalue::Aggregate(kind, values) => {"}, {"sha": "37b27b398342838ba22b5a34d495b28842967ea9", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "patch": "@@ -964,7 +964,22 @@ impl<'ctx> MirLowerCtx<'ctx> {\n                     self.push_assignment(current, place, r, expr_id.into());\n                     Ok(Some(current))\n                 }\n-                Array::Repeat { .. } => not_supported!(\"array repeat\"),\n+                Array::Repeat { initializer, .. } => {\n+                    let Some((init, current)) = self.lower_expr_to_some_operand(*initializer, current)? else {\n+                        return Ok(None);\n+                    };\n+                    let len = match &self.expr_ty(expr_id).data(Interner).kind {\n+                        TyKind::Array(_, len) => len.clone(),\n+                        _ => {\n+                            return Err(MirLowerError::TypeError(\n+                                \"Array repeat expression with non array type\",\n+                            ))\n+                        }\n+                    };\n+                    let r = Rvalue::Repeat(init, len);\n+                    self.push_assignment(current, place, r, expr_id.into());\n+                    Ok(Some(current))\n+                },\n             },\n             Expr::Literal(l) => {\n                 let ty = self.expr_ty(expr_id);\n@@ -1433,7 +1448,12 @@ impl<'ctx> MirLowerCtx<'ctx> {\n     fn binding_local(&self, b: BindingId) -> Result<LocalId> {\n         match self.result.binding_locals.get(b) {\n             Some(x) => Ok(*x),\n-            None => Err(MirLowerError::UnaccessableLocal),\n+            None => {\n+                // FIXME: It should never happens, but currently it will happen in `const_dependent_on_local` test, which\n+                // is a hir lowering problem IMO.\n+                // never!(\"Using unaccessable local for binding is always a bug\");\n+                Err(MirLowerError::UnaccessableLocal)\n+            }\n         }\n     }\n }\n@@ -1588,14 +1608,23 @@ pub fn lower_to_mir(\n         }\n     };\n     // 1 to param_len is for params\n-    let current = if let DefWithBodyId::FunctionId(fid) = owner {\n-        let substs = TyBuilder::placeholder_subst(db, fid);\n-        let callable_sig = db.callable_item_signature(fid.into()).substitute(Interner, &substs);\n-        ctx.lower_params_and_bindings(\n-            body.params.iter().zip(callable_sig.params().iter()).map(|(x, y)| (*x, y.clone())),\n-            binding_picker,\n-        )?\n-    } else {\n+    // FIXME: replace with let chain once it becomes stable\n+    let current = 'b: {\n+        if body.body_expr == root_expr {\n+            // otherwise it's an inline const, and has no parameter\n+            if let DefWithBodyId::FunctionId(fid) = owner {\n+                let substs = TyBuilder::placeholder_subst(db, fid);\n+                let callable_sig =\n+                    db.callable_item_signature(fid.into()).substitute(Interner, &substs);\n+                break 'b ctx.lower_params_and_bindings(\n+                    body.params\n+                        .iter()\n+                        .zip(callable_sig.params().iter())\n+                        .map(|(x, y)| (*x, y.clone())),\n+                    binding_picker,\n+                )?;\n+            }\n+        }\n         ctx.lower_params_and_bindings([].into_iter(), binding_picker)?\n     };\n     if let Some(b) = ctx.lower_expr_to_place(root_expr, return_slot().into(), current)? {"}, {"sha": "86c3ce9eec98064aa1d622d847b099a7d1752158", "filename": "crates/hir-ty/src/mir/lower/pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs?ref=01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "patch": "@@ -129,7 +129,7 @@ impl MirLowerCtx<'_> {\n                 _ => not_supported!(\"expression path literal\"),\n             },\n             Pat::Bind { id, subpat } => {\n-                let target_place = self.result.binding_locals[*id];\n+                let target_place = self.binding_local(*id)?;\n                 let mode = self.body.bindings[*id].mode;\n                 if let Some(subpat) = subpat {\n                     (current, current_else) = self.pattern_match("}, {"sha": "a7dff39613516acd5c40b93e1ca8b6bfa0af55d2", "filename": "crates/hir-ty/src/mir/pretty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fhir-ty%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Fpretty.rs?ref=01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "patch": "@@ -321,6 +321,11 @@ impl<'a> MirPrettyCtx<'a> {\n                 self.operand_list(x);\n                 w!(self, \"]\");\n             }\n+            Rvalue::Repeat(op, len) => {\n+                w!(self, \"[\");\n+                self.operand(op);\n+                w!(self, \"; {}]\", len.display(self.db));\n+            }\n             Rvalue::Aggregate(AggregateKind::Adt(_, _), x) => {\n                 w!(self, \"Adt(\");\n                 self.operand_list(x);"}, {"sha": "d60007b48a6d8876d24fe9ae5597150c681faa5a", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c1b3dc715e6729eae7fcabdff7f2e560d61df3/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=01c1b3dc715e6729eae7fcabdff7f2e560d61df3", "patch": "@@ -544,6 +544,15 @@ fn f(x: i32) {\n    x = 5;\n  //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n }\n+\"#,\n+        );\n+        check_diagnostics(\n+            r#\"\n+fn f((x, y): (i32, i32)) {\n+    let t = [0; 2];\n+   x = 5;\n+ //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `x`\n+}\n \"#,\n         );\n     }"}]}