{"sha": "5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NzZlMGVlY2Y4ZTNmM2E5ZDM3ZjE2YTkwMmNiYjcwYTIzZDA5Yzc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-16T17:15:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-19T19:10:23Z"}, "message": "Review comment: move to its own method", "tree": {"sha": "6432e7cef9fb910ce71cdf0a6a34d13901f7f717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6432e7cef9fb910ce71cdf0a6a34d13901f7f717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7", "html_url": "https://github.com/rust-lang/rust/commit/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa496c9ded0ca63d34d1402c1b737db908094ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa496c9ded0ca63d34d1402c1b737db908094ea4", "html_url": "https://github.com/rust-lang/rust/commit/fa496c9ded0ca63d34d1402c1b737db908094ea4"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "c98f3373d397561259d1b619c78f5e1b9dd080de", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5976e0eecf8e3f3a9d37f16a902cbb70a23d09c7", "patch": "@@ -3273,26 +3273,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let Err(\n                     mut errors,\n                 ) = self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n-                    if !sp.desugaring_kind().is_some() {\n-                        // We *do not* do this for desugared call spans to keep good diagnostics\n-                        // involving try.\n-                        for error in &mut errors {\n-                            if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n-                                let mut referenced_in = vec![];\n-                                for (i, ty) in &final_arg_types {\n-                                    let ty = self.resolve_vars_if_possible(ty);\n-                                    for ty in ty.walk() {\n-                                        if ty == predicate.skip_binder().self_ty() {\n-                                            referenced_in.push(*i);\n-                                        }\n-                                    }\n-                                }\n-                                if referenced_in.len() == 1 {\n-                                    error.obligation.cause.span = args[referenced_in[0]].span;\n-                                }\n-                            }\n-                        }\n-                    }\n+                    self.point_at_arg_instead_of_call_if_possible(\n+                        &mut errors,\n+                        &final_arg_types[..],\n+                        sp,\n+                        &args,\n+                    );\n                     self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n                 }\n             }\n@@ -3387,6 +3373,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         vec![self.tcx.types.err; len]\n     }\n \n+    fn point_at_arg_instead_of_call_if_possible(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'_>>,\n+        final_arg_types: &[(usize, Ty<'tcx>)],\n+        call_sp: Span,\n+        args: &'tcx [hir::Expr],\n+    ) {\n+        if !call_sp.desugaring_kind().is_some() {\n+            // We *do not* do this for desugared call spans to keep good diagnostics when involving\n+            // the `?` operator.\n+            for error in errors {\n+                if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                    let mut referenced_in = vec![];\n+                    for (i, ty) in final_arg_types {\n+                        let ty = self.resolve_vars_if_possible(ty);\n+                        for ty in ty.walk() {\n+                            if ty == predicate.skip_binder().self_ty() {\n+                                referenced_in.push(*i);\n+                            }\n+                        }\n+                    }\n+                    if referenced_in.len() == 1 {\n+                        error.obligation.cause.span = args[referenced_in[0]].span;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // AST fragment checking\n     fn check_lit(&self,\n                  lit: &hir::Lit,"}]}