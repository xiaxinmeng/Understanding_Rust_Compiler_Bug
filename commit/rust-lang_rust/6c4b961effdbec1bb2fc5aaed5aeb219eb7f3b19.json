{"sha": "6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGI5NjFlZmZkYmVjMWJiMmZjNWFhZWQ1YWViMjE5ZWI3ZjNiMTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-17T12:01:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-06-01T16:56:30Z"}, "message": "move projection mode into parameter environment", "tree": {"sha": "233aa1400d06b283de46fb2c624461c29045e386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233aa1400d06b283de46fb2c624461c29045e386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "html_url": "https://github.com/rust-lang/rust/commit/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed2edaafe82fb8d44e81e00ca3e4f7659855ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed2edaafe82fb8d44e81e00ca3e4f7659855ba2", "html_url": "https://github.com/rust-lang/rust/commit/4ed2edaafe82fb8d44e81e00ca3e4f7659855ba2"}], "stats": {"total": 209, "additions": 110, "deletions": 99}, "files": [{"sha": "5dbf30d8fa8a4c245c54178f7b5fa6a5a733f007", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -174,11 +174,6 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // avoid reporting the same error twice.\n     pub reported_trait_errors: RefCell<FxHashSet<traits::TraitErrorKey<'tcx>>>,\n \n-    // Sadly, the behavior of projection varies a bit depending on the\n-    // stage of compilation. The specifics are given in the\n-    // documentation for `Reveal`.\n-    projection_mode: Reveal,\n-\n     // When an error occurs, we want to avoid reporting \"derived\"\n     // errors that are due to this original failure. Normally, we\n     // handle this with the `err_count_on_creation` count, which\n@@ -406,54 +401,54 @@ pub trait InferEnv<'a, 'tcx> {\n     fn to_parts(self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParamEnv<'tcx>>);\n+                    ty::ParamEnv<'tcx>);\n }\n \n-impl<'a, 'tcx> InferEnv<'a, 'tcx> for () {\n+impl<'a, 'tcx> InferEnv<'a, 'tcx> for Reveal {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParamEnv<'tcx>>) {\n-        (None, None, None)\n+                    ty::ParamEnv<'tcx>) {\n+        (None, None, ty::ParamEnv::empty(self))\n     }\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for ty::ParamEnv<'tcx> {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParamEnv<'tcx>>) {\n-        (None, None, Some(self))\n+                    ty::ParamEnv<'tcx>) {\n+        (None, None, self)\n     }\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for (&'a ty::TypeckTables<'tcx>, ty::ParamEnv<'tcx>) {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParamEnv<'tcx>>) {\n-        (Some(self.0), None, Some(self.1))\n+                    ty::ParamEnv<'tcx>) {\n+        (Some(self.0), None, self.1)\n     }\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for (ty::TypeckTables<'tcx>, ty::ParamEnv<'tcx>) {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParamEnv<'tcx>>) {\n-        (None, Some(self.0), Some(self.1))\n+                    ty::ParamEnv<'tcx>) {\n+        (None, Some(self.0), self.1)\n     }\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for hir::BodyId {\n     fn to_parts(self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParamEnv<'tcx>>) {\n+                    ty::ParamEnv<'tcx>) {\n         let def_id = tcx.hir.body_owner_def_id(self);\n         (Some(tcx.typeck_tables_of(def_id)),\n          None,\n-         Some(tcx.param_env(def_id)))\n+         tcx.param_env(def_id))\n     }\n }\n \n@@ -465,23 +460,18 @@ pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     arena: DroplessArena,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n     tables: Option<&'a ty::TypeckTables<'gcx>>,\n-    param_env: Option<ty::ParamEnv<'gcx>>,\n-    projection_mode: Reveal,\n+    param_env: ty::ParamEnv<'gcx>,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n-    pub fn infer_ctxt<E: InferEnv<'a, 'gcx>>(self,\n-                                             env: E,\n-                                             projection_mode: Reveal)\n-                                             -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n+    pub fn infer_ctxt<E: InferEnv<'a, 'gcx>>(self, env: E) -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         let (tables, fresh_tables, param_env) = env.to_parts(self);\n         InferCtxtBuilder {\n             global_tcx: self,\n             arena: DroplessArena::new(),\n             fresh_tables: fresh_tables.map(RefCell::new),\n             tables: tables,\n             param_env: param_env,\n-            projection_mode: projection_mode,\n         }\n     }\n \n@@ -498,12 +488,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n             int_unification_table: RefCell::new(UnificationTable::new()),\n             float_unification_table: RefCell::new(UnificationTable::new()),\n             region_vars: RegionVarBindings::new(self),\n-            param_env: param_env.unwrap(),\n+            param_env: param_env,\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             projection_cache: RefCell::new(traits::ProjectionCache::new()),\n             reported_trait_errors: RefCell::new(FxHashSet()),\n-            projection_mode: Reveal::UserFacing,\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: self.sess.err_count(),\n             in_snapshot: Cell::new(false),\n@@ -520,13 +509,11 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             ref arena,\n             ref fresh_tables,\n             tables,\n-            ref mut param_env,\n-            projection_mode,\n+            param_env,\n         } = *self;\n         let tables = tables.map(InferTables::Interned).unwrap_or_else(|| {\n             fresh_tables.as_ref().map_or(InferTables::Missing, InferTables::InProgress)\n         });\n-        let param_env = param_env.take().unwrap_or_else(|| ty::ParamEnv::empty());\n         global_tcx.enter_local(arena, |tcx| f(InferCtxt {\n             tcx: tcx,\n             tables: tables,\n@@ -539,7 +526,6 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             reported_trait_errors: RefCell::new(FxHashSet()),\n-            projection_mode: projection_mode,\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n@@ -643,11 +629,15 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             return value;\n         }\n \n-        self.infer_ctxt((), Reveal::All).enter(|infcx| {\n+        self.infer_ctxt(Reveal::All).enter(|infcx| {\n             value.trans_normalize(&infcx)\n         })\n     }\n \n+    /// Does a best-effort to normalize any associated types in\n+    /// `value`; this includes revealing specializable types, so this\n+    /// should be not be used during type-checking, but only during\n+    /// optimization and code generation.\n     pub fn normalize_associated_type_in_env<T>(\n         self, value: &T, env: ty::ParamEnv<'tcx>\n     ) -> T\n@@ -661,7 +651,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             return value;\n         }\n \n-        self.infer_ctxt(env, Reveal::All).enter(|infcx| {\n+        self.infer_ctxt(env.reveal_all()).enter(|infcx| {\n             value.trans_normalize(&infcx)\n        })\n     }\n@@ -728,10 +718,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn projection_mode(&self) -> Reveal {\n-        self.projection_mode\n-    }\n-\n     pub fn is_in_snapshot(&self) -> bool {\n         self.in_snapshot.get()\n     }"}, {"sha": "08f731ae34defdcc774826be8c0cfc54507025d3", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -11,7 +11,6 @@\n use hir::def::Def;\n use hir::def_id::DefId;\n use infer::InferCtxt;\n-use traits::Reveal;\n use ty::{self, Ty, TyCtxt};\n use ty::layout::{LayoutError, Pointer, SizeSkeleton};\n \n@@ -140,7 +139,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ItemVisitor<'a, 'tcx> {\n \n     fn visit_nested_body(&mut self, body_id: hir::BodyId) {\n         let body = self.tcx.hir.body(body_id);\n-        self.tcx.infer_ctxt(body_id, Reveal::All).enter(|infcx| {\n+        self.tcx.infer_ctxt(body_id).enter(|infcx| {\n             let mut visitor = ExprVisitor {\n                 infcx: &infcx\n             };"}, {"sha": "fee6ce95a3f7ff038c209a631f59ff952b72a481", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -477,9 +477,10 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\",\n            predicates);\n \n-    let elaborated_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates));\n+    let elaborated_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n+                                           unnormalized_env.reveal);\n \n-    tcx.infer_ctxt(elaborated_env, Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt(elaborated_env).enter(|infcx| {\n         let predicates = match fully_normalize(\n                 &infcx, cause,\n                 // You would really want to pass infcx.param_env.caller_bounds here,\n@@ -528,7 +529,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         debug!(\"normalize_param_env_or_error: resolved predicates={:?}\",\n             predicates);\n \n-        ty::ParamEnv::new(tcx.intern_predicates(&predicates))\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal)\n     })\n }\n \n@@ -590,7 +591,7 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"normalize_and_test_predicates(predicates={:?})\",\n            predicates);\n \n-    tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n+    tcx.infer_ctxt(Reveal::All).enter(|infcx| {\n         let mut selcx = SelectionContext::new(&infcx);\n         let mut fulfill_cx = FulfillmentContext::new();\n         let cause = ObligationCause::dummy();"}, {"sha": "467783fcd7d869878d48d46ed0e4e5ceb3b53bde", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -36,7 +36,7 @@ use util::common::FN_OUTPUT_NAME;\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum Reveal {\n     /// At type-checking time, we refuse to project any associated\n     /// type that is marked `default`. Non-`default` (\"final\") types\n@@ -278,12 +278,14 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n         match ty.sty {\n             ty::TyAnon(def_id, substs) if !substs.has_escaping_regions() => { // (*)\n                 // Only normalize `impl Trait` after type-checking, usually in trans.\n-                if self.selcx.projection_mode() == Reveal::All {\n-                    let generic_ty = self.tcx().type_of(def_id);\n-                    let concrete_ty = generic_ty.subst(self.tcx(), substs);\n-                    self.fold_ty(concrete_ty)\n-                } else {\n-                    ty\n+                match self.param_env.reveal {\n+                    Reveal::UserFacing => ty,\n+\n+                    Reveal::All => {\n+                        let generic_ty = self.tcx().type_of(def_id);\n+                        let concrete_ty = generic_ty.subst(self.tcx(), substs);\n+                        self.fold_ty(concrete_ty)\n+                    }\n                 }\n             }\n "}, {"sha": "12f9e2f355bb9cd25a88fc5c6fb35a4ff0b2099b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -324,7 +324,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     }\n \n     pub fn projection_mode(&self) -> Reveal {\n-        self.infcx.projection_mode()\n+        self.param_env().reveal\n     }\n \n     /// Wraps the inference context's in_snapshot s.t. snapshot handling is only from the selection"}, {"sha": "4d7fdbd881ec34efd0201d1dd56bd494adfdf39e", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -122,7 +122,7 @@ pub fn find_associated_item<'a, 'tcx>(\n     let ancestors = trait_def.ancestors(tcx, impl_data.impl_def_id);\n     match ancestors.defs(tcx, item.name, item.kind).next() {\n         Some(node_item) => {\n-            let substs = tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n+            let substs = tcx.infer_ctxt(Reveal::All).enter(|infcx| {\n                 let substs = substs.rebase_onto(tcx, trait_def_id, impl_data.substs);\n                 let substs = translate_substs(&infcx, impl_data.impl_def_id,\n                                               substs, node_item.node);\n@@ -184,7 +184,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id).unwrap();\n \n     // Create a infcx, taking the predicates of impl1 as assumptions:\n-    let result = tcx.infer_ctxt(penv, Reveal::UserFacing).enter(|infcx| {\n+    let result = tcx.infer_ctxt(penv).enter(|infcx| {\n         // Normalize the trait reference. The WF rules ought to ensure\n         // that this always succeeds.\n         let impl1_trait_ref ="}, {"sha": "aa35dfd1d70ad3af4acfb030b83258061ee8a365", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'gcx, 'tcx> Children {\n             let possible_sibling = *slot;\n \n             let tcx = tcx.global_tcx();\n-            let (le, ge) = tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n+            let (le, ge) = tcx.infer_ctxt(Reveal::UserFacing).enter(|infcx| {\n                 let overlap = traits::overlapping_impls(&infcx,\n                                                         possible_sibling,\n                                                         impl_def_id);"}, {"sha": "4cffe6af083b6afa687f30cf0d203432fcea1e64", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n             // Do the initial selection for the obligation. This yields the\n             // shallow result we are looking for -- that is, what specific impl.\n-            self.infer_ctxt((), Reveal::All).enter(|infcx| {\n+            self.infer_ctxt(Reveal::All).enter(|infcx| {\n                 let mut selcx = SelectionContext::new(&infcx);\n \n                 let obligation_cause = ObligationCause::misc(span,"}, {"sha": "da85d40b2c3e87cbec4bb6d3281741919acd9cd4", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -906,6 +906,12 @@ define_maps! { <'tcx>\n     [] specialization_graph_of: SpecializationGraph(DefId) -> Rc<specialization_graph::Graph>,\n     [] is_object_safe: ObjectSafety(DefId) -> bool,\n \n+    // Get the ParameterEnvironment for a given item; this environment\n+    // will be in \"user-facing\" mode, meaning that it is suitabe for\n+    // type-checking etc, and it does not normalize specializable\n+    // associated types. This is almost always what you want,\n+    // unless you are doing MIR optimizations, in which case you\n+    // might want to use `reveal_all()` method to change modes.\n     [] param_env: ParamEnv(DefId) -> ty::ParamEnv<'tcx>,\n \n     // Trait selection queries. These are best used by invoking `ty.moves_by_default()`,"}, {"sha": "0a25cd638cc30b761a0a105a1d84be0ae12c2f29", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -1191,6 +1191,11 @@ pub struct ParamEnv<'tcx> {\n     /// the set of bounds on the in-scope type parameters, translated\n     /// into Obligations, and elaborated and normalized.\n     pub caller_bounds: &'tcx Slice<ty::Predicate<'tcx>>,\n+\n+    /// Typically, this is `Reveal::UserFacing`, but during trans we\n+    /// want `Reveal::All` -- note that this is always paired with an\n+    /// empty environment. To get that, use `ParamEnv::reveal()`.\n+    pub reveal: traits::Reveal,\n }\n \n impl<'tcx> ParamEnv<'tcx> {\n@@ -1218,7 +1223,7 @@ impl<'tcx> ParamEnv<'tcx> {\n             }\n         } else {\n             ParamEnvAnd {\n-                param_env: ParamEnv::empty(),\n+                param_env: ParamEnv::empty(self.reveal),\n                 value: value,\n             }\n         }\n@@ -2467,8 +2472,8 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n \n /// See `ParamEnv` struct def'n for details.\n fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   def_id: DefId)\n-                                   -> ParamEnv<'tcx> {\n+                       def_id: DefId)\n+                       -> ParamEnv<'tcx> {\n     // Compute the bounds on Self and the type parameters.\n \n     let bounds = tcx.predicates_of(def_id).instantiate_identity(tcx);\n@@ -2486,7 +2491,8 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // are any errors at that point, so after type checking you can be\n     // sure that this will succeed without errors anyway.\n \n-    let unnormalized_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates));\n+    let unnormalized_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n+                                             traits::Reveal::UserFacing);\n \n     let body_id = tcx.hir.as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n         tcx.hir.maybe_body_owned_by(id).map_or(id, |body| body.node_id)"}, {"sha": "31c099c661df05d9a80a4f4ae3c90599e8c48324", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -150,20 +150,32 @@ pub enum Representability {\n impl<'tcx> ty::ParamEnv<'tcx> {\n     /// Construct a trait environment suitable for contexts where\n     /// there are no where clauses in scope.\n-    pub fn empty() -> Self {\n-        Self::new(ty::Slice::empty())\n+    pub fn empty(reveal: Reveal) -> Self {\n+        Self::new(ty::Slice::empty(), reveal)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n-    pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>) -> Self {\n-        ty::ParamEnv { caller_bounds }\n+    pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>,\n+               reveal: Reveal)\n+               -> Self {\n+        ty::ParamEnv { caller_bounds, reveal }\n+    }\n+\n+    /// Returns a new parameter environment with the same clauses, but\n+    /// which \"reveals\" the true results of projections in all cases\n+    /// (even for associated types that are specializable).  This is\n+    /// the desired behavior during trans and certain other special\n+    /// contexts; normally though we want to use `Reveal::UserFacing`,\n+    /// which is the default.\n+    pub fn reveal_all(self) -> Self {\n+        ty::ParamEnv { reveal: Reveal::All, ..self }\n     }\n \n     pub fn can_type_implement_copy<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        self_type: Ty<'tcx>, span: Span)\n                                        -> Result<(), CopyImplementationError> {\n         // FIXME: (@jroesch) float this code up\n-        tcx.infer_ctxt(self.clone(), Reveal::UserFacing).enter(|infcx| {\n+        tcx.infer_ctxt(self.clone()).enter(|infcx| {\n             let (adt, substs) = match self_type.sty {\n                 ty::TyAdt(adt, substs) => (adt, substs),\n                 _ => return Err(CopyImplementationError::NotAnAdt),\n@@ -970,7 +982,7 @@ fn is_copy_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     let (param_env, ty) = query.into_parts();\n     let trait_def_id = tcx.require_lang_item(lang_items::CopyTraitLangItem);\n-    tcx.infer_ctxt(param_env, Reveal::UserFacing)\n+    tcx.infer_ctxt(param_env)\n        .enter(|infcx| traits::type_known_to_meet_bound(&infcx, ty, trait_def_id, DUMMY_SP))\n }\n \n@@ -980,7 +992,7 @@ fn is_sized_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     let (param_env, ty) = query.into_parts();\n     let trait_def_id = tcx.require_lang_item(lang_items::SizedTraitLangItem);\n-    tcx.infer_ctxt(param_env, Reveal::UserFacing)\n+    tcx.infer_ctxt(param_env)\n        .enter(|infcx| traits::type_known_to_meet_bound(&infcx, ty, trait_def_id, DUMMY_SP))\n }\n \n@@ -990,7 +1002,7 @@ fn is_freeze_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     let (param_env, ty) = query.into_parts();\n     let trait_def_id = tcx.require_lang_item(lang_items::FreezeTraitLangItem);\n-    tcx.infer_ctxt(param_env, Reveal::UserFacing)\n+    tcx.infer_ctxt(param_env)\n        .enter(|infcx| traits::type_known_to_meet_bound(&infcx, ty, trait_def_id, DUMMY_SP))\n }\n "}, {"sha": "39db384e2ded22116eeb90293095b14b8035a939", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -20,7 +20,6 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization::{cmt};\n use rustc::middle::region::RegionMaps;\n use rustc::session::Session;\n-use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::lint;\n use rustc_errors::{Diagnostic, Level, DiagnosticBuilder};\n@@ -518,7 +517,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n ///\n /// FIXME: this should be done by borrowck.\n fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Expr) {\n-    cx.tcx.infer_ctxt((cx.tables, cx.param_env), Reveal::UserFacing).enter(|infcx| {\n+    cx.tcx.infer_ctxt((cx.tables, cx.param_env)).enter(|infcx| {\n         let mut checker = MutationChecker {\n             cx: cx,\n         };"}, {"sha": "1364898b549d4705b70e004164576af440664cca", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -483,7 +483,7 @@ fn resolve_trait_associated_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"resolve_trait_associated_const: trait_ref={:?}\",\n            trait_ref);\n \n-    tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt(Reveal::UserFacing).enter(|infcx| {\n         let mut selcx = traits::SelectionContext::new(&infcx);\n         let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n                                                  trait_ref.to_poly_trait_predicate());"}, {"sha": "619e7ec6a4f6095f3c67fb6af57da2372a82113b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n         if def.has_dtor(cx.tcx) {\n             return;\n         }\n-        let param_env = ty::ParamEnv::empty();\n+        let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n         if !ty.moves_by_default(cx.tcx, param_env, item.span) {\n             return;\n         }\n@@ -956,7 +956,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                                                 trait_ref.to_poly_trait_predicate());\n \n                     let param_env = tcx.param_env(method.def_id);\n-                    tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n+                    tcx.infer_ctxt(param_env).enter(|infcx| {\n                         let mut selcx = traits::SelectionContext::new(&infcx);\n                         match selcx.select(&obligation) {\n                             // The method comes from a `T: Trait` bound."}, {"sha": "1b86085d99d1b0a86239fea6d9d84f887f591992", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -725,7 +725,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n             if gens.ty_params.is_empty() {\n                 // sizes only make sense for non-generic types\n                 let t = cx.tcx.type_of(cx.tcx.hir.local_def_id(it.id));\n-                let layout = cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n+                let layout = cx.tcx.infer_ctxt(Reveal::All).enter(|infcx| {\n                     let ty = cx.tcx.erase_regions(&t);\n                     ty.layout(&infcx).unwrap_or_else(|e| {\n                         bug!(\"failed to get layout for `{}`: {}\", t, e)"}, {"sha": "e9cf3115ddab1cd20da46efa45d9bb532b33ee74", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -18,7 +18,6 @@ use rustc::middle::region::CodeExtent;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n use rustc::mir::visit::MutVisitor;\n-use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n@@ -84,7 +83,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n     };\n \n     let src = MirSource::from_node(tcx, id);\n-    tcx.infer_ctxt(body_id, Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt(body_id).enter(|infcx| {\n         let cx = Cx::new(&infcx, src);\n         let mut mir = if cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n@@ -173,7 +172,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let span = tcx.hir.span(ctor_id);\n     if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n         let pe = tcx.param_env(tcx.hir.local_def_id(ctor_id));\n-        tcx.infer_ctxt(pe, Reveal::UserFacing).enter(|infcx| {\n+        tcx.infer_ctxt(pe).enter(|infcx| {\n             let (mut mir, src) =\n                 shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n "}, {"sha": "8842d30b65c2740343af08086d1cd7c6abf38fe8", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -18,7 +18,6 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::mir::*;\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::*;\n-use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Subst,Substs};\n \n@@ -545,9 +544,10 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n     }\n }\n \n-fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, param_env: ty::ParamEnv<'tcx>,\n+fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          param_env: ty::ParamEnv<'tcx>,\n                           ty: Ty<'tcx>) -> Option<u64> {\n-    tcx.infer_ctxt(param_env, traits::Reveal::All).enter(|infcx| {\n+    tcx.infer_ctxt(param_env.reveal_all()).enter(|infcx| {\n         ty.layout(&infcx).ok().map(|layout| {\n             layout.size(&tcx.data_layout).bytes()\n         })"}, {"sha": "7c49a11ca1f7195ede9c153819c4c7009117c0fd", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -998,7 +998,7 @@ impl MirPass for QualifyAndPromoteConstants {\n         // Statics must be Sync.\n         if mode == Mode::Static {\n             let ty = mir.return_ty;\n-            tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n+            tcx.infer_ctxt(Reveal::UserFacing).enter(|infcx| {\n                 let cause = traits::ObligationCause::new(mir.span, id, traits::SharedStatic);\n                 let mut fulfillment_cx = traits::FulfillmentContext::new();\n                 fulfillment_cx.register_bound(&infcx, ty,"}, {"sha": "f7055f90f0f830d757add822f3b6222d42a094d6", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -12,7 +12,7 @@\n #![allow(unreachable_code)]\n \n use rustc::infer::{self, InferCtxt, InferOk};\n-use rustc::traits::{self, Reveal};\n+use rustc::traits;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n use rustc::middle::const_val::ConstVal;\n@@ -752,7 +752,7 @@ impl MirPass for TypeckMir {\n             return;\n         }\n         let param_env = tcx.param_env(def_id);\n-        tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n+        tcx.infer_ctxt(param_env).enter(|infcx| {\n             let mut checker = TypeChecker::new(&infcx, item_id);\n             {\n                 let mut verifier = TypeVerifier::new(&mut checker, mir);"}, {"sha": "2a4a13932e3fa5752edbafb6b883d49f3a7bb529", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n             self.check_const_eval(&body.value);\n         }\n \n-        let outer_penv = self.tcx.infer_ctxt(body_id, Reveal::UserFacing).enter(|infcx| {\n+        let outer_penv = self.tcx.infer_ctxt(body_id).enter(|infcx| {\n             let param_env = infcx.param_env.clone();\n             let outer_penv = mem::replace(&mut self.param_env, param_env);\n             let region_maps = &self.tcx.region_maps(item_def_id);\n@@ -468,7 +468,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         in_fn: false,\n         promotable: false,\n         mut_rvalue_borrows: NodeSet(),\n-        param_env: ty::ParamEnv::empty(),\n+        param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n     }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "56f51cae147ad786729659b15a172328cdafc78b", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -320,15 +320,15 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     }\n \n     pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        ty.needs_drop(self.tcx, ty::ParamEnv::empty())\n+        ty.needs_drop(self.tcx, ty::ParamEnv::empty(traits::Reveal::All))\n     }\n \n     pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self.tcx, ty::ParamEnv::empty(), DUMMY_SP)\n+        ty.is_sized(self.tcx, ty::ParamEnv::empty(traits::Reveal::All), DUMMY_SP)\n     }\n \n     pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx, ty::ParamEnv::empty(), DUMMY_SP)\n+        ty.is_freeze(self.tcx, ty::ParamEnv::empty(traits::Reveal::All), DUMMY_SP)\n     }\n \n     pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {\n@@ -735,7 +735,7 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n             return TyLayout { ty: ty, layout: layout, variant_index: None };\n         }\n \n-        self.tcx().infer_ctxt((), traits::Reveal::All).enter(|infcx| {\n+        self.tcx().infer_ctxt(traits::Reveal::All).enter(|infcx| {\n             infcx.layout_of(ty).unwrap_or_else(|e| {\n                 match e {\n                     ty::layout::LayoutError::SizeOverflow(_) =>"}, {"sha": "f473d957a9031243372524e2e737cce1fb144103", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -46,7 +46,7 @@ pub fn needs_drop_glue<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>, t: Ty<'tcx>\n         ty::TyAdt(def, _) if def.is_box() => {\n             let typ = t.boxed_ty();\n             if !scx.type_needs_drop(typ) && scx.type_is_sized(typ) {\n-                scx.tcx().infer_ctxt((), traits::Reveal::All).enter(|infcx| {\n+                scx.tcx().infer_ctxt(traits::Reveal::All).enter(|infcx| {\n                     let layout = t.layout(&infcx).unwrap();\n                     if layout.size(scx).bytes() == 0 {\n                         // `Box<ZeroSizeType>` does not allocate."}, {"sha": "1d6d7fa61001ad6a84051af60b8a873ed4284027", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -212,13 +212,14 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_node_id);\n-    let param_env = ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates));\n+    let param_env = ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates),\n+                                      Reveal::UserFacing);\n     let param_env = traits::normalize_param_env_or_error(tcx,\n                                                          impl_m.def_id,\n                                                          param_env,\n                                                          normalize_cause.clone());\n \n-    tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt(param_env).enter(|infcx| {\n         let inh = Inherited::new(infcx, impl_m.def_id);\n         let infcx = &inh.infcx;\n \n@@ -713,7 +714,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     impl_trait_ref: ty::TraitRef<'tcx>) {\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n \n-    tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt(Reveal::UserFacing).enter(|infcx| {\n         let inh = Inherited::new(infcx, impl_c.def_id);\n         let infcx = &inh.infcx;\n "}, {"sha": "06f405120ae42dd658ae806ce6198e6eabeda376", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -16,7 +16,7 @@ use rustc::infer::{self, InferOk};\n use rustc::middle::region::{self, RegionMaps};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::{self, ObligationCause, Reveal};\n+use rustc::traits::{self, ObligationCause};\n use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n \n@@ -80,7 +80,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n     // check that the impl type can be made to match the trait type.\n \n     let impl_param_env = tcx.param_env(self_type_did);\n-    tcx.infer_ctxt(impl_param_env, Reveal::UserFacing).enter(|ref infcx| {\n+    tcx.infer_ctxt(impl_param_env).enter(|ref infcx| {\n         let tcx = infcx.tcx;\n         let mut fulfillment_cx = traits::FulfillmentContext::new();\n "}, {"sha": "8074c0630e39510ff12e7eaad02e36d1988c60fc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -93,7 +93,7 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region::CodeExtent;\n use rustc::ty::subst::{Kind, Subst, Substs};\n-use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode, Reveal};\n+use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode};\n use rustc::ty::{ParamTy, LvaluePreference, NoPreference, PreferMutLvalue};\n use rustc::ty::{self, Ty, TyCtxt, Visibility};\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n@@ -530,7 +530,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n         let tables = ty::TypeckTables::empty();\n         let param_env = tcx.param_env(def_id);\n         InheritedBuilder {\n-            infcx: tcx.infer_ctxt((tables, param_env), Reveal::UserFacing),\n+            infcx: tcx.infer_ctxt((tables, param_env)),\n             def_id,\n         }\n     }"}, {"sha": "89f2595d1a8fb6a95338c66510ff40165baa192e", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -15,7 +15,7 @@ use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::region::RegionMaps;\n use rustc::middle::lang_items::UnsizeTraitLangItem;\n \n-use rustc::traits::{self, ObligationCause, Reveal};\n+use rustc::traits::{self, ObligationCause};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::TypeFoldable;\n use rustc::ty::adjustment::CoerceUnsizedInfo;\n@@ -208,7 +208,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            source,\n            target);\n \n-    tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n+    tcx.infer_ctxt(param_env).enter(|infcx| {\n         let cause = ObligationCause::misc(span, impl_node_id);\n         let check_mutbl = |mt_a: ty::TypeAndMut<'tcx>,\n                            mt_b: ty::TypeAndMut<'tcx>,"}, {"sha": "4aa12d08f61c50b1bc9e17be8287376319f78805", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n \n         for (i, &impl1_def_id) in impls.iter().enumerate() {\n             for &impl2_def_id in &impls[(i + 1)..] {\n-                self.tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n+                self.tcx.infer_ctxt(Reveal::UserFacing).enter(|infcx| {\n                     if traits::overlapping_impls(&infcx, impl1_def_id, impl2_def_id).is_some() {\n                         self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id)\n                     }"}, {"sha": "91dec958a161c02f3ba6a79245650b2b78c6a830", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6c4b961effdbec1bb2fc5aaed5aeb219eb7f3b19", "patch": "@@ -155,7 +155,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 expected: Ty<'tcx>,\n                                 actual: Ty<'tcx>)\n                                 -> bool {\n-    tcx.infer_ctxt((), Reveal::UserFacing).enter(|ref infcx| {\n+    tcx.infer_ctxt(Reveal::UserFacing).enter(|ref infcx| {\n         let mut fulfill_cx = FulfillmentContext::new();\n         match infcx.eq_types(false, &cause, expected, actual) {\n             Ok(InferOk { obligations, .. }) => {"}]}