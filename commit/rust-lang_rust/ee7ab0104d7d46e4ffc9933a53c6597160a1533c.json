{"sha": "ee7ab0104d7d46e4ffc9933a53c6597160a1533c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlN2FiMDEwNGQ3ZDQ2ZTRmZmM5OTMzYTUzYzY1OTcxNjBhMTUzM2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T16:29:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T16:29:37Z"}, "message": "Adhere to code style in rename tests", "tree": {"sha": "7f592633fe5dcdc9f1244b07c9aa6363ac68d9e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f592633fe5dcdc9f1244b07c9aa6363ac68d9e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7ab0104d7d46e4ffc9933a53c6597160a1533c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7ab0104d7d46e4ffc9933a53c6597160a1533c", "html_url": "https://github.com/rust-lang/rust/commit/ee7ab0104d7d46e4ffc9933a53c6597160a1533c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7ab0104d7d46e4ffc9933a53c6597160a1533c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f68fed4a0701330e0296f6623567e5584f2f7ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f68fed4a0701330e0296f6623567e5584f2f7ba", "html_url": "https://github.com/rust-lang/rust/commit/0f68fed4a0701330e0296f6623567e5584f2f7ba"}], "stats": {"total": 665, "additions": 324, "deletions": 341}, "files": [{"sha": "f4b11cbd0bb15b569a77bb1d452a87803da61088", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 324, "deletions": 341, "changes": 665, "blob_url": "https://github.com/rust-lang/rust/blob/ee7ab0104d7d46e4ffc9933a53c6597160a1533c/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7ab0104d7d46e4ffc9933a53c6597160a1533c/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=ee7ab0104d7d46e4ffc9933a53c6597160a1533c", "patch": "@@ -278,43 +278,67 @@ mod tests {\n \n     use crate::{mock_analysis::analysis_and_position, FileId};\n \n+    fn check(new_name: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let ra_fixture_after = &trim_indent(ra_fixture_after);\n+        let (analysis, position) = analysis_and_position(ra_fixture_before);\n+        let source_change = analysis.rename(position, new_name).unwrap();\n+        let mut text_edit_builder = TextEditBuilder::default();\n+        let mut file_id: Option<FileId> = None;\n+        if let Some(change) = source_change {\n+            for edit in change.info.source_file_edits {\n+                file_id = Some(edit.file_id);\n+                for indel in edit.edit.into_iter() {\n+                    text_edit_builder.replace(indel.delete, indel.insert);\n+                }\n+            }\n+        }\n+        let mut result = analysis.file_text(file_id.unwrap()).unwrap().to_string();\n+        text_edit_builder.finish().apply(&mut result);\n+        assert_eq_text!(ra_fixture_after, &*result);\n+    }\n+\n     #[test]\n     fn test_rename_to_underscore() {\n-        test_rename(\n-            r#\"\n-    fn main() {\n-        let i<|> = 1;\n-    }\"#,\n+        check(\n             \"_\",\n             r#\"\n-    fn main() {\n-        let _ = 1;\n-    }\"#,\n+fn main() {\n+    let i<|> = 1;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let _ = 1;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_to_raw_identifier() {\n-        test_rename(\n-            r#\"\n-    fn main() {\n-        let i<|> = 1;\n-    }\"#,\n+        check(\n             \"r#fn\",\n             r#\"\n-    fn main() {\n-        let r#fn = 1;\n-    }\"#,\n+fn main() {\n+    let i<|> = 1;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let r#fn = 1;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_to_invalid_identifier() {\n         let (analysis, position) = analysis_and_position(\n-            \"\n-    fn main() {\n-        let i<|> = 1;\n-    }\",\n+            r#\"\n+fn main() {\n+    let i<|> = 1;\n+}\n+\"#,\n         );\n         let new_name = \"invalid!\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n@@ -323,312 +347,304 @@ mod tests {\n \n     #[test]\n     fn test_rename_for_local() {\n-        test_rename(\n+        check(\n+            \"k\",\n             r#\"\n-    fn main() {\n-        let mut i = 1;\n-        let j = 1;\n-        i = i<|> + j;\n+fn main() {\n+    let mut i = 1;\n+    let j = 1;\n+    i = i<|> + j;\n \n-        {\n-            i = 0;\n-        }\n+    {\n+        i = 0;\n+    }\n \n-        i = 5;\n-    }\"#,\n-            \"k\",\n+    i = 5;\n+}\n+\"#,\n             r#\"\n-    fn main() {\n-        let mut k = 1;\n-        let j = 1;\n-        k = k + j;\n+fn main() {\n+    let mut k = 1;\n+    let j = 1;\n+    k = k + j;\n \n-        {\n-            k = 0;\n-        }\n+    {\n+        k = 0;\n+    }\n \n-        k = 5;\n-    }\"#,\n+    k = 5;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_args() {\n-        test_rename(\n-            r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let a<|> = \"test\";\n-        foo!(a);\n-    }\"#,\n+        check(\n             \"b\",\n             r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let b = \"test\";\n-        foo!(b);\n-    }\"#,\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let a<|> = \"test\";\n+    foo!(a);\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let b = \"test\";\n+    foo!(b);\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_args_rev() {\n-        test_rename(\n-            r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let a = \"test\";\n-        foo!(a<|>);\n-    }\"#,\n+        check(\n             \"b\",\n             r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let b = \"test\";\n-        foo!(b);\n-    }\"#,\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let a = \"test\";\n+    foo!(a<|>);\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let b = \"test\";\n+    foo!(b);\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_define_fn() {\n-        test_rename(\n-            r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(foo);\n-    fn main() {\n-        fo<|>o();\n-    }\"#,\n+        check(\n             \"bar\",\n             r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(bar);\n-    fn main() {\n-        bar();\n-    }\"#,\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(foo);\n+fn main() {\n+    fo<|>o();\n+}\n+\"#,\n+            r#\"\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(bar);\n+fn main() {\n+    bar();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_define_fn_rev() {\n-        test_rename(\n-            r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(fo<|>o);\n-    fn main() {\n-        foo();\n-    }\"#,\n+        check(\n             \"bar\",\n             r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(bar);\n-    fn main() {\n-        bar();\n-    }\"#,\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(fo<|>o);\n+fn main() {\n+    foo();\n+}\n+\"#,\n+            r#\"\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(bar);\n+fn main() {\n+    bar();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_param_inside() {\n-        test_rename(\n-            r#\"\n-    fn foo(i : u32) -> u32 {\n-        i<|>\n-    }\"#,\n+        check(\n             \"j\",\n             r#\"\n-    fn foo(j : u32) -> u32 {\n-        j\n-    }\"#,\n+fn foo(i : u32) -> u32 {\n+    i<|>\n+}\n+\"#,\n+            r#\"\n+fn foo(j : u32) -> u32 {\n+    j\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_refs_for_fn_param() {\n-        test_rename(\n-            r#\"\n-    fn foo(i<|> : u32) -> u32 {\n-        i\n-    }\"#,\n+        check(\n             \"new_name\",\n             r#\"\n-    fn foo(new_name : u32) -> u32 {\n-        new_name\n-    }\"#,\n+fn foo(i<|> : u32) -> u32 {\n+    i\n+}\n+\"#,\n+            r#\"\n+fn foo(new_name : u32) -> u32 {\n+    new_name\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_mut_param() {\n-        test_rename(\n-            r#\"\n-    fn foo(mut i<|> : u32) -> u32 {\n-        i\n-    }\"#,\n+        check(\n             \"new_name\",\n             r#\"\n-    fn foo(mut new_name : u32) -> u32 {\n-        new_name\n-    }\"#,\n+fn foo(mut i<|> : u32) -> u32 {\n+    i\n+}\n+\"#,\n+            r#\"\n+fn foo(mut new_name : u32) -> u32 {\n+    new_name\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_struct_field() {\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i<|>: i32,\n-    }\n+struct Foo { i<|>: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { i: i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { i: i }\n     }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        j: i32,\n-    }\n+struct Foo { j: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { j: i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { j: i }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_struct_field_for_shorthand() {\n         mark::check!(test_rename_struct_field_for_shorthand);\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i<|>: i32,\n-    }\n+struct Foo { i<|>: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { i }\n     }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        j: i32,\n-    }\n+struct Foo { j: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { j: i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { j: i }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_local_for_field_shorthand() {\n         mark::check!(test_rename_local_for_field_shorthand);\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn new(i<|>: i32) -> Self {\n-            Self { i }\n-        }\n+impl Foo {\n+    fn new(i<|>: i32) -> Self {\n+        Self { i }\n     }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn new(j: i32) -> Self {\n-            Self { i: j }\n-        }\n+impl Foo {\n+    fn new(j: i32) -> Self {\n+        Self { i: j }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_field_shorthand_correct_struct() {\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i<|>: i32,\n-    }\n+struct Foo { i<|>: i32 }\n \n-    struct Bar {\n-        i: i32,\n-    }\n+struct Bar { i: i32 }\n \n-    impl Bar {\n-        fn new(i: i32) -> Self {\n-            Self { i }\n-        }\n+impl Bar {\n+    fn new(i: i32) -> Self {\n+        Self { i }\n     }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        j: i32,\n-    }\n+struct Foo { j: i32 }\n \n-    struct Bar {\n-        i: i32,\n-    }\n+struct Bar { i: i32 }\n \n-    impl Bar {\n-        fn new(i: i32) -> Self {\n-            Self { i }\n-        }\n+impl Bar {\n+    fn new(i: i32) -> Self {\n+        Self { i }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_shadow_local_for_struct_shorthand() {\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    fn baz(i<|>: i32) -> Self {\n-         let x = Foo { i };\n-         {\n-             let i = 0;\n-             Foo { i }\n-         }\n+fn baz(i<|>: i32) -> Self {\n+     let x = Foo { i };\n+     {\n+         let i = 0;\n+         Foo { i }\n      }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    fn baz(j: i32) -> Self {\n-         let x = Foo { i: j };\n-         {\n-             let i = 0;\n-             Foo { i }\n-         }\n+fn baz(j: i32) -> Self {\n+     let x = Foo { i: j };\n+     {\n+         let i = 0;\n+         Foo { i }\n      }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -811,24 +827,26 @@ mod fo<|>o;\n \n     #[test]\n     fn test_module_rename_in_path() {\n-        test_rename(\n+        check(\n+            \"baz\",\n             r#\"\n-    mod <|>foo {\n-        pub fn bar() {}\n-    }\n+mod <|>foo {\n+    pub fn bar() {}\n+}\n \n-    fn main() {\n-        foo::bar();\n-    }\"#,\n-            \"baz\",\n+fn main() {\n+    foo::bar();\n+}\n+\"#,\n             r#\"\n-    mod baz {\n-        pub fn bar() {}\n-    }\n+mod baz {\n+    pub fn bar() {}\n+}\n \n-    fn main() {\n-        baz::bar();\n-    }\"#,\n+fn main() {\n+    baz::bar();\n+}\n+\"#,\n         );\n     }\n \n@@ -905,171 +923,136 @@ pub mod foo<|>;\n \n     #[test]\n     fn test_enum_variant_from_module_1() {\n-        test_rename(\n+        check(\n+            \"Baz\",\n             r#\"\n-    mod foo {\n-        pub enum Foo {\n-            Bar<|>,\n-        }\n+mod foo {\n+    pub enum Foo {\n+        Bar<|>,\n     }\n+}\n \n-    fn func(f: foo::Foo) {\n-        match f {\n-            foo::Foo::Bar => {}\n-        }\n+fn func(f: foo::Foo) {\n+    match f {\n+        foo::Foo::Bar => {}\n     }\n-    \"#,\n-            \"Baz\",\n+}\n+\"#,\n             r#\"\n-    mod foo {\n-        pub enum Foo {\n-            Baz,\n-        }\n+mod foo {\n+    pub enum Foo {\n+        Baz,\n     }\n+}\n \n-    fn func(f: foo::Foo) {\n-        match f {\n-            foo::Foo::Baz => {}\n-        }\n+fn func(f: foo::Foo) {\n+    match f {\n+        foo::Foo::Baz => {}\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_enum_variant_from_module_2() {\n-        test_rename(\n+        check(\n+            \"baz\",\n             r#\"\n-    mod foo {\n-        pub struct Foo {\n-            pub bar<|>: uint,\n-        }\n-    }\n+mod foo {\n+    pub struct Foo { pub bar<|>: uint }\n+}\n \n-    fn foo(f: foo::Foo) {\n-        let _ = f.bar;\n-    }\n-    \"#,\n-            \"baz\",\n+fn foo(f: foo::Foo) {\n+    let _ = f.bar;\n+}\n+\"#,\n             r#\"\n-    mod foo {\n-        pub struct Foo {\n-            pub baz: uint,\n-        }\n-    }\n+mod foo {\n+    pub struct Foo { pub baz: uint }\n+}\n \n-    fn foo(f: foo::Foo) {\n-        let _ = f.baz;\n-    }\n-    \"#,\n+fn foo(f: foo::Foo) {\n+    let _ = f.baz;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_parameter_to_self() {\n-        test_rename(\n+        check(\n+            \"self\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(foo<|>: &mut Foo) -> i32 {\n-            foo.i\n-        }\n+impl Foo {\n+    fn f(foo<|>: &mut Foo) -> i32 {\n+        foo.i\n     }\n-    \"#,\n-            \"self\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(&mut self) -> i32 {\n-            self.i\n-        }\n+impl Foo {\n+    fn f(&mut self) -> i32 {\n+        self.i\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_self_to_parameter() {\n-        test_rename(\n+        check(\n+            \"foo\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(&mut <|>self) -> i32 {\n-            self.i\n-        }\n+impl Foo {\n+    fn f(&mut <|>self) -> i32 {\n+        self.i\n     }\n-    \"#,\n-            \"foo\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(foo: &mut Foo) -> i32 {\n-            foo.i\n-        }\n+impl Foo {\n+    fn f(foo: &mut Foo) -> i32 {\n+        foo.i\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_self_in_path_to_parameter() {\n-        test_rename(\n+        check(\n+            \"foo\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(&self) -> i32 {\n-            let self_var = 1;\n-            self<|>.i\n-        }\n+impl Foo {\n+    fn f(&self) -> i32 {\n+        let self_var = 1;\n+        self<|>.i\n     }\n-    \"#,\n-            \"foo\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(foo: &Foo) -> i32 {\n-            let self_var = 1;\n-            foo.i\n-        }\n+impl Foo {\n+    fn f(foo: &Foo) -> i32 {\n+        let self_var = 1;\n+        foo.i\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n-\n-    fn test_rename(ra_fixture_before: &str, new_name: &str, ra_fixture_after: &str) {\n-        let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, position) = analysis_and_position(ra_fixture_before);\n-        let source_change = analysis.rename(position, new_name).unwrap();\n-        let mut text_edit_builder = TextEditBuilder::default();\n-        let mut file_id: Option<FileId> = None;\n-        if let Some(change) = source_change {\n-            for edit in change.info.source_file_edits {\n-                file_id = Some(edit.file_id);\n-                for indel in edit.edit.into_iter() {\n-                    text_edit_builder.replace(indel.delete, indel.insert);\n-                }\n-            }\n-        }\n-        let mut result = analysis.file_text(file_id.unwrap()).unwrap().to_string();\n-        text_edit_builder.finish().apply(&mut result);\n-        assert_eq_text!(ra_fixture_after, &*result);\n-    }\n }"}]}