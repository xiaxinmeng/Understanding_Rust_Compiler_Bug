{"sha": "c933d697d826dc917161881bdb651eedd6ca5ffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MzNkNjk3ZDgyNmRjOTE3MTYxODgxYmRiNjUxZWVkZDZjYTVmZmM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-08-26T19:25:19Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-08-27T18:40:28Z"}, "message": "Use intra-doc links in `core::future::future`", "tree": {"sha": "8ed6785c955f838c356bc525c24289895b3e874f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ed6785c955f838c356bc525c24289895b3e874f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c933d697d826dc917161881bdb651eedd6ca5ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c933d697d826dc917161881bdb651eedd6ca5ffc", "html_url": "https://github.com/rust-lang/rust/commit/c933d697d826dc917161881bdb651eedd6ca5ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c933d697d826dc917161881bdb651eedd6ca5ffc/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0c847d3353e319ed82598a106e28fd490caa6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0c847d3353e319ed82598a106e28fd490caa6b", "html_url": "https://github.com/rust-lang/rust/commit/3d0c847d3353e319ed82598a106e28fd490caa6b"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "e279d80112a73d456f17a9953974c7d87a921352", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c933d697d826dc917161881bdb651eedd6ca5ffc/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c933d697d826dc917161881bdb651eedd6ca5ffc/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=c933d697d826dc917161881bdb651eedd6ca5ffc", "patch": "@@ -23,7 +23,7 @@ use crate::task::{Context, Poll};\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `.await` the value.\n ///\n-/// [`Waker`]: ../task/struct.Waker.html\n+/// [`Waker`]: crate::task::Waker\n #[doc(spotlight)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -91,11 +91,10 @@ pub trait Future {\n     /// (memory corruption, incorrect use of `unsafe` functions, or the like),\n     /// regardless of the future's state.\n     ///\n-    /// [`Poll::Pending`]: ../task/enum.Poll.html#variant.Pending\n-    /// [`Poll::Ready(val)`]: ../task/enum.Poll.html#variant.Ready\n-    /// [`Context`]: ../task/struct.Context.html\n-    /// [`Waker`]: ../task/struct.Waker.html\n-    /// [`Waker::wake`]: ../task/struct.Waker.html#method.wake\n+    /// [`Poll::Pending`]: Poll::Pending\n+    /// [`Poll::Ready(val)`]: Poll::Ready\n+    /// [`Waker`]: crate::task::Waker\n+    /// [`Waker::wake`]: crate::task::Waker::wake\n     #[lang = \"poll\"]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;"}]}