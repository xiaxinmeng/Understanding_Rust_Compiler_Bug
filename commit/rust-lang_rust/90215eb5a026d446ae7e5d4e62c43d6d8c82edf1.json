{"sha": "90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMjE1ZWI1YTAyNmQ0NDZhZTdlNWQ0ZTYyYzQzZDZkOGM4MmVkZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T21:02:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T21:02:18Z"}, "message": "generalize boilerplate", "tree": {"sha": "75b35f218e07a8c6feba4e6204a9da762c2a9089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b35f218e07a8c6feba4e6204a9da762c2a9089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "html_url": "https://github.com/rust-lang/rust/commit/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5f32fcb516c1647c7581f21be9b11c8f1f94ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5f32fcb516c1647c7581f21be9b11c8f1f94ba", "html_url": "https://github.com/rust-lang/rust/commit/1a5f32fcb516c1647c7581f21be9b11c8f1f94ba"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "1fa591ea4406b7ee1dde7951eb2471142b7e2097", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     code_model_impl::def_id_to_ast,\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n-    ids::{FunctionId, StructId, EnumId, EnumVariantId},\n+    ids::{FunctionId, StructId, EnumId, EnumVariantId, AstItemDef},\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -197,8 +197,12 @@ pub struct Struct {\n }\n \n impl Struct {\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+        self.id.source(db)\n+    }\n+\n     pub fn module(&self, db: &impl HirDatabase) -> Module {\n-        self.id.loc(db).module\n+        self.id.module(db)\n     }\n \n     pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n@@ -217,10 +221,6 @@ impl Struct {\n             .collect()\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n-        self.id.loc(db).source(db)\n-    }\n-\n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n@@ -238,8 +238,12 @@ pub struct Enum {\n }\n \n impl Enum {\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n+        self.id.source(db)\n+    }\n+\n     pub fn module(&self, db: &impl HirDatabase) -> Module {\n-        self.id.loc(db).module\n+        self.id.module(db)\n     }\n \n     pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n@@ -250,10 +254,6 @@ impl Enum {\n         db.enum_data(*self).variants.clone()\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n-        self.id.loc(db).source(db)\n-    }\n-\n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n@@ -271,8 +271,11 @@ pub struct EnumVariant {\n }\n \n impl EnumVariant {\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+        self.id.source(db)\n+    }\n     pub fn module(&self, db: &impl HirDatabase) -> Module {\n-        self.id.loc(db).module\n+        self.id.module(db)\n     }\n     pub fn parent_enum(&self, db: &impl HirDatabase) -> Enum {\n         db.enum_variant_data(*self).parent_enum.clone()\n@@ -296,10 +299,6 @@ impl EnumVariant {\n             })\n             .collect()\n     }\n-\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n-        self.id.loc(db).source(db)\n-    }\n }\n \n impl Docs for EnumVariant {\n@@ -348,7 +347,11 @@ impl FnSignature {\n \n impl Function {\n     pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n-        self.id.loc(db).source(db)\n+        self.id.source(db)\n+    }\n+\n+    pub fn module(&self, db: &impl HirDatabase) -> Module {\n+        self.id.module(db)\n     }\n \n     pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySyntaxMapping> {"}, {"sha": "6ce5c77b13532b15286d13840a897e779b30df6f", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "patch": "@@ -30,10 +30,6 @@ impl Function {\n         db.body_hir(*self)\n     }\n \n-    pub(crate) fn module(&self, db: &impl HirDatabase) -> Module {\n-        self.id.loc(db).module\n-    }\n-\n     /// The containing impl block, if this is a method.\n     pub(crate) fn impl_block(&self, db: &impl HirDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));"}, {"sha": "262047849ff58f240c68b49b13b924a0742383cd", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90215eb5a026d446ae7e5d4e62c43d6d8c82edf1/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=90215eb5a026d446ae7e5d4e62c43d6d8c82edf1", "patch": "@@ -1,8 +1,11 @@\n-use std::marker::PhantomData;\n+use std::{\n+    marker::PhantomData,\n+    hash::Hash,\n+};\n \n use ra_db::{LocationIntener, FileId};\n use ra_syntax::{TreeArc, SyntaxNode, SourceFile, AstNode, ast};\n-use ra_arena::{Arena, RawId, impl_arena_id};\n+use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n \n use crate::{\n     HirDatabase, Def,\n@@ -179,43 +182,53 @@ impl<N: AstNode> Clone for ItemLoc<N> {\n     }\n }\n \n+pub(crate) trait AstItemDef<N: AstNode + Eq + Hash>: ArenaId + Clone {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<N>, Self>;\n+    fn source(self, db: &impl HirDatabase) -> (HirFileId, TreeArc<N>) {\n+        let int = Self::interner(db.as_ref());\n+        let loc = int.id2loc(self);\n+        loc.source(db)\n+    }\n+    fn module(self, db: &impl HirDatabase) -> Module {\n+        let int = Self::interner(db.as_ref());\n+        let loc = int.id2loc(self);\n+        loc.module\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct FunctionId(RawId);\n impl_arena_id!(FunctionId);\n-\n-impl FunctionId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> ItemLoc<ast::FnDef> {\n-        db.as_ref().fns.id2loc(self)\n+impl AstItemDef<ast::FnDef> for FunctionId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::FnDef>, Self> {\n+        &interner.fns\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructId(RawId);\n impl_arena_id!(StructId);\n-\n-impl StructId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> ItemLoc<ast::StructDef> {\n-        db.as_ref().structs.id2loc(self)\n+impl AstItemDef<ast::StructDef> for StructId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::StructDef>, Self> {\n+        &interner.structs\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(RawId);\n impl_arena_id!(EnumId);\n-\n-impl EnumId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> ItemLoc<ast::EnumDef> {\n-        db.as_ref().enums.id2loc(self)\n+impl AstItemDef<ast::EnumDef> for EnumId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::EnumDef>, Self> {\n+        &interner.enums\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumVariantId(RawId);\n impl_arena_id!(EnumVariantId);\n-\n-impl EnumVariantId {\n-    pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> ItemLoc<ast::EnumVariant> {\n-        db.as_ref().enum_variants.id2loc(self)\n+impl AstItemDef<ast::EnumVariant> for EnumVariantId {\n+    fn interner(interner: &HirInterner) -> &LocationIntener<ItemLoc<ast::EnumVariant>, Self> {\n+        &interner.enum_variants\n     }\n }\n "}]}