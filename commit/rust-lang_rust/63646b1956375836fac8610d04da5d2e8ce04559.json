{"sha": "63646b1956375836fac8610d04da5d2e8ce04559", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjQ2YjE5NTYzNzU4MzZmYWM4NjEwZDA0ZGE1ZDJlOGNlMDQ1NTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T10:50:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T10:50:20Z"}, "message": "Implement llvm.x86.avx2.pmovmskb llvm intrinsic", "tree": {"sha": "9962612a556edac13a4c55f2ee70bde7ecabbf3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9962612a556edac13a4c55f2ee70bde7ecabbf3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63646b1956375836fac8610d04da5d2e8ce04559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63646b1956375836fac8610d04da5d2e8ce04559", "html_url": "https://github.com/rust-lang/rust/commit/63646b1956375836fac8610d04da5d2e8ce04559", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63646b1956375836fac8610d04da5d2e8ce04559/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a6b581b557f1120e3cb59f2ce51b1b0384275a", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a6b581b557f1120e3cb59f2ce51b1b0384275a", "html_url": "https://github.com/rust-lang/rust/commit/48a6b581b557f1120e3cb59f2ce51b1b0384275a"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "e3b3edd86af37a587e4a90ea04ce96407fa38d5f", "filename": "example/std_example.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63646b1956375836fac8610d04da5d2e8ce04559/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63646b1956375836fac8610d04da5d2e8ce04559/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=63646b1956375836fac8610d04da5d2e8ce04559", "patch": "@@ -65,6 +65,8 @@ unsafe fn test_simd() {\n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_lt), [0, 0, 0, 0, 0, 0, 0, 0]);\n \n     test_mm_slli_si128();\n+    test_mm_movemask_epi8();\n+    test_mm256_movemask_epi8();\n }\n \n #[target_feature(enable = \"sse2\")]\n@@ -109,6 +111,31 @@ unsafe fn test_mm_slli_si128() {\n     assert_eq_m128i(r, _mm_set1_epi8(0));\n }\n \n+#[target_feature(enable = \"sse2\")]\n+unsafe fn test_mm_movemask_epi8() {\n+    use std::arch::x86_64::*;\n+\n+    #[rustfmt::skip]\n+    let a = _mm_setr_epi8(\n+        0b1000_0000u8 as i8, 0b0, 0b1000_0000u8 as i8, 0b01,\n+        0b0101, 0b1111_0000u8 as i8, 0, 0,\n+        0, 0, 0b1111_0000u8 as i8, 0b0101,\n+        0b01, 0b1000_0000u8 as i8, 0b0, 0b1000_0000u8 as i8,\n+    );\n+    let r = _mm_movemask_epi8(a);\n+    assert_eq!(r, 0b10100100_00100101);\n+}\n+\n+#[target_feature(enable = \"avx2\")]\n+unsafe fn test_mm256_movemask_epi8() {\n+    use std::arch::x86_64::*;\n+\n+    let a = _mm256_set1_epi8(-1);\n+    let r = _mm256_movemask_epi8(a);\n+    let e = -1;\n+    assert_eq!(r, e);\n+}\n+\n fn assert_eq_m128i(x: std::arch::x86_64::__m128i, y: std::arch::x86_64::__m128i) {\n     unsafe {\n         assert_eq!(std::mem::transmute::<_, [u8; 16]>(x), std::mem::transmute::<_, [u8; 16]>(x));"}, {"sha": "32aa8b5d3df67790a7f9a26d1d56bd2ff58a217b", "filename": "src/llvm_intrinsics.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63646b1956375836fac8610d04da5d2e8ce04559/src%2Fllvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63646b1956375836fac8610d04da5d2e8ce04559/src%2Fllvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm_intrinsics.rs?ref=63646b1956375836fac8610d04da5d2e8ce04559", "patch": "@@ -33,15 +33,15 @@ pub fn codegen_llvm_intrinsic_call<'a, 'tcx: 'a>(\n             crate::trap::trap_unimplemented(fx, intrinsic);\n         };\n \n-        // Used by _mm_movemask_epi8\n-        llvm.x86.sse2.pmovmskb.128, (c a) {\n+        // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n+        llvm.x86.sse2.pmovmskb.128 | llvm.x86.avx2.pmovmskb, (c a) {\n             let (lane_layout, lane_count) = crate::intrinsics::lane_type_and_count(fx, a.layout(), intrinsic);\n             assert_eq!(lane_layout.ty.sty, fx.tcx.types.i8.sty);\n-            assert_eq!(lane_count, 16);\n+            assert!(lane_count == 16 || lane_count == 32);\n \n             let mut res = fx.bcx.ins().iconst(types::I32, 0);\n \n-            for lane in 0..16 {\n+            for lane in 0..lane_count {\n                 let a_lane = a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n                 let a_lane_sign = fx.bcx.ins().ushr_imm(a_lane, 7); // extract sign bit of 8bit int\n                 let a_lane_sign = fx.bcx.ins().uextend(types::I32, a_lane_sign);\n@@ -65,6 +65,5 @@ pub fn codegen_llvm_intrinsic_call<'a, 'tcx: 'a>(\n // llvm.x86.avx2.vperm2i128\n // llvm.x86.ssse3.pshuf.b.128\n // llvm.x86.avx2.pshuf.b\n-// llvm.x86.avx2.pmovmskb\n // llvm.x86.avx2.psrli.w\n // llvm.x86.sse2.psrli.w"}]}