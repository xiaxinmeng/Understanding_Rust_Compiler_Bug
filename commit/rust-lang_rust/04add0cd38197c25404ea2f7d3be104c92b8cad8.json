{"sha": "04add0cd38197c25404ea2f7d3be104c92b8cad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWRkMGNkMzgxOTdjMjU0MDRlYTJmN2QzYmUxMDRjOTJiOGNhZDg=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-06-12T11:20:42Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-12T11:20:42Z"}, "message": "implement Display for enums with attribute config_type (#3621)", "tree": {"sha": "9ece00cdfa940c6a8bd554636159538d0e454e53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ece00cdfa940c6a8bd554636159538d0e454e53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04add0cd38197c25404ea2f7d3be104c92b8cad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04add0cd38197c25404ea2f7d3be104c92b8cad8", "html_url": "https://github.com/rust-lang/rust/commit/04add0cd38197c25404ea2f7d3be104c92b8cad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04add0cd38197c25404ea2f7d3be104c92b8cad8/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71fa7946a1e46e81f1f4b7d1afdf1c9280effd94", "url": "https://api.github.com/repos/rust-lang/rust/commits/71fa7946a1e46e81f1f4b7d1afdf1c9280effd94", "html_url": "https://github.com/rust-lang/rust/commit/71fa7946a1e46e81f1f4b7d1afdf1c9280effd94"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "d59c87d77bf448f055d601d9d3c7d2aea9d73db3", "filename": "config_proc_macro/src/item_enum.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/04add0cd38197c25404ea2f7d3be104c92b8cad8/config_proc_macro%2Fsrc%2Fitem_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04add0cd38197c25404ea2f7d3be104c92b8cad8/config_proc_macro%2Fsrc%2Fitem_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fitem_enum.rs?ref=04add0cd38197c25404ea2f7d3be104c92b8cad8", "patch": "@@ -23,6 +23,7 @@ pub fn define_config_type_on_enum(em: &syn::ItemEnum) -> syn::Result<TokenStream\n \n     let impl_doc_hint = impl_doc_hint(&em.ident, &em.variants);\n     let impl_from_str = impl_from_str(&em.ident, &em.variants);\n+    let impl_display = impl_display(&em.ident, &em.variants);\n     let impl_serde = impl_serde(&em.ident, &em.variants);\n     let impl_deserialize = impl_deserialize(&em.ident, &em.variants);\n \n@@ -31,6 +32,7 @@ pub fn define_config_type_on_enum(em: &syn::ItemEnum) -> syn::Result<TokenStream\n         mod #mod_name {\n             #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n             pub #enum_token #ident #generics { #variants }\n+            #impl_display\n             #impl_doc_hint\n             #impl_from_str\n             #impl_serde\n@@ -68,6 +70,29 @@ fn impl_doc_hint(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n     }\n }\n \n+fn impl_display(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n+    let vs = variants\n+        .iter()\n+        .filter(|v| is_unit(v))\n+        .map(|v| (config_value_of_variant(v), &v.ident));\n+    let match_patterns = fold_quote(vs, |(s, v)| {\n+        quote! {\n+            #ident::#v => write!(f, \"{}\", #s),\n+        }\n+    });\n+    quote! {\n+        use std::fmt;\n+        impl fmt::Display for #ident {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                match self {\n+                    #match_patterns\n+                    _ => unimplemented!(),\n+                }\n+            }\n+        }\n+    }\n+}\n+\n fn impl_from_str(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n     let vs = variants\n         .iter()"}, {"sha": "7b91f54877d3820cce6e1c058622b19afc8a9175", "filename": "src/config/config_type.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04add0cd38197c25404ea2f7d3be104c92b8cad8/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04add0cd38197c25404ea2f7d3be104c92b8cad8/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=04add0cd38197c25404ea2f7d3be104c92b8cad8", "patch": "@@ -249,11 +249,15 @@ macro_rules! create_config {\n                             }\n                             name_out.push_str(name_raw);\n                             name_out.push(' ');\n+                            let mut default_str = format!(\"{}\", $def);\n+                            if default_str.is_empty() {\n+                                default_str = String::from(\"\\\"\\\"\");\n+                            }\n                             writeln!(out,\n-                                    \"{}{} Default: {:?}{}\",\n+                                    \"{}{} Default: {}{}\",\n                                     name_out,\n                                     <$ty>::doc_hint(),\n-                                    $def,\n+                                    default_str,\n                                     if !$stb { \" (unstable)\" } else { \"\" }).unwrap();\n                             $(\n                                 writeln!(out, \"{}{}\", space_str, $dstring).unwrap();"}, {"sha": "f0dc6c66597033b7a0a6fb8b03729668beee9e5f", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04add0cd38197c25404ea2f7d3be104c92b8cad8/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04add0cd38197c25404ea2f7d3be104c92b8cad8/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=04add0cd38197c25404ea2f7d3be104c92b8cad8", "patch": "@@ -1,5 +1,6 @@\n //! This module contains types and functions to support formatting specific line ranges.\n \n+use itertools::Itertools;\n use std::collections::HashMap;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -92,6 +93,12 @@ impl<'a> From<&'a LineRange> for Range {\n     }\n }\n \n+impl fmt::Display for Range {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}..{}\", self.lo, self.hi)\n+    }\n+}\n+\n impl Range {\n     pub fn new(lo: usize, hi: usize) -> Range {\n         Range { lo, hi }\n@@ -149,6 +156,21 @@ impl Range {\n #[derive(Clone, Debug, Default, PartialEq)]\n pub struct FileLines(Option<HashMap<FileName, Vec<Range>>>);\n \n+impl fmt::Display for FileLines {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match &self.0 {\n+            None => write!(f, \"None\")?,\n+            Some(map) => {\n+                for (file_name, ranges) in map.iter() {\n+                    write!(f, \"{}: \", file_name)?;\n+                    write!(f, \"{}\\n\", ranges.iter().format(\", \"))?;\n+                }\n+            }\n+        };\n+        Ok(())\n+    }\n+}\n+\n /// Normalizes the ranges so that the invariants for `FileLines` hold: ranges are non-overlapping,\n /// and ordered by their start point.\n fn normalize_ranges(ranges: &mut HashMap<FileName, Vec<Range>>) {"}, {"sha": "cf1a328e9cd85d787ad33942c4a4ce71b9206b5b", "filename": "src/config/options.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04add0cd38197c25404ea2f7d3be104c92b8cad8/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04add0cd38197c25404ea2f7d3be104c92b8cad8/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=04add0cd38197c25404ea2f7d3be104c92b8cad8", "patch": "@@ -3,6 +3,7 @@ use std::fmt;\n use std::path::{Path, PathBuf};\n \n use atty;\n+use itertools::Itertools;\n use rustfmt_config_proc_macro::config_type;\n use serde::de::{SeqAccess, Visitor};\n use serde::ser::SerializeSeq;\n@@ -193,6 +194,12 @@ pub struct WidthHeuristics {\n     pub single_line_if_else_max_width: usize,\n }\n \n+impl fmt::Display for WidthHeuristics {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self)\n+    }\n+}\n+\n impl WidthHeuristics {\n     // Using this WidthHeuristics means we ignore heuristics.\n     pub fn null() -> WidthHeuristics {\n@@ -264,6 +271,21 @@ pub struct IgnoreList {\n     rustfmt_toml_path: PathBuf,\n }\n \n+impl fmt::Display for IgnoreList {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"[{}]\",\n+            self.path_set\n+                .iter()\n+                .format_with(\", \", |path, f| f(&format_args!(\n+                    \"{}\",\n+                    path.to_string_lossy()\n+                )))\n+        )\n+    }\n+}\n+\n impl Serialize for IgnoreList {\n     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n     where"}]}