{"sha": "27c91ee35b6dd42bb20f1aef4216299ab19bdaff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzkxZWUzNWI2ZGQ0MmJiMjBmMWFlZjQyMTYyOTlhYjE5YmRhZmY=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-04-16T20:34:15Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-04-16T20:34:15Z"}, "message": "rustfmt: Parse options once instead of once per file argument (#944)\n\n`update_config()` was parsing the `write-mode` option once for each file\r\nargument. This commit parses them once up front into a `CliOptions`\r\nstruct, which is then applied to the config before calling `run()`.", "tree": {"sha": "6b91e2d2b2ec47f22860c1c7a8d9bd72b5b29a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b91e2d2b2ec47f22860c1c7a8d9bd72b5b29a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c91ee35b6dd42bb20f1aef4216299ab19bdaff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c91ee35b6dd42bb20f1aef4216299ab19bdaff", "html_url": "https://github.com/rust-lang/rust/commit/27c91ee35b6dd42bb20f1aef4216299ab19bdaff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c91ee35b6dd42bb20f1aef4216299ab19bdaff/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e037da7ede08d648ca196cbbba12b450aa2c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e037da7ede08d648ca196cbbba12b450aa2c8b", "html_url": "https://github.com/rust-lang/rust/commit/41e037da7ede08d648ca196cbbba12b450aa2c8b"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "472098f59ebfc766a47cf6251c6c47f23c130a07", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/27c91ee35b6dd42bb20f1aef4216299ab19bdaff/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c91ee35b6dd42bb20f1aef4216299ab19bdaff/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=27c91ee35b6dd42bb20f1aef4216299ab19bdaff", "patch": "@@ -51,6 +51,40 @@ enum Operation {\n     },\n }\n \n+/// Parsed command line options.\n+#[derive(Clone, Debug, Default)]\n+struct CliOptions {\n+    skip_children: bool,\n+    verbose: bool,\n+    write_mode: Option<WriteMode>,\n+}\n+\n+impl CliOptions {\n+    fn from_matches(matches: &Matches) -> FmtResult<CliOptions> {\n+        let mut options = CliOptions::default();\n+        options.skip_children = matches.opt_present(\"skip-children\");\n+        options.verbose = matches.opt_present(\"verbose\");\n+\n+        if let Some(ref write_mode) = matches.opt_str(\"write-mode\") {\n+            if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n+                options.write_mode = Some(write_mode);\n+            } else {\n+                return Err(FmtError::from(format!(\"Invalid write-mode: {}\", write_mode)));\n+            }\n+        }\n+\n+        Ok(options)\n+    }\n+\n+    fn apply_to(&self, config: &mut Config) {\n+        config.skip_children = self.skip_children;\n+        config.verbose = self.verbose;\n+        if let Some(write_mode) = self.write_mode {\n+            config.write_mode = write_mode;\n+        }\n+    }\n+}\n+\n /// Try to find a project file in the given directory and its parents. Returns the path of a the\n /// nearest project file if one exists, or `None` if no project file was found.\n fn lookup_project_file(dir: &Path) -> FmtResult<Option<PathBuf>> {\n@@ -115,24 +149,6 @@ fn match_cli_path_or_file(config_path: Option<PathBuf>,\n     resolve_config(input_file)\n }\n \n-fn update_config(config: &mut Config, matches: &Matches) -> FmtResult<()> {\n-    config.verbose = matches.opt_present(\"verbose\");\n-    config.skip_children = matches.opt_present(\"skip-children\");\n-\n-    let write_mode = matches.opt_str(\"write-mode\");\n-    match matches.opt_str(\"write-mode\").map(|wm| WriteMode::from_str(&wm)) {\n-        None => Ok(()),\n-        Some(Ok(write_mode)) => {\n-            config.write_mode = write_mode;\n-            Ok(())\n-        }\n-        Some(Err(_)) => {\n-            Err(FmtError::from(format!(\"Invalid write-mode: {}\",\n-                                       write_mode.expect(\"cannot happen\"))))\n-        }\n-    }\n-}\n-\n fn make_opts() -> Options {\n     let mut opts = Options::new();\n     opts.optflag(\"h\", \"help\", \"show this message\");\n@@ -183,6 +199,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             Ok(run(Input::Text(input), &config))\n         }\n         Operation::Format { files, config_path } => {\n+            let options = try!(CliOptions::from_matches(&matches));\n             let mut config = Config::default();\n             let mut path = None;\n             // Load the config path file if provided\n@@ -213,7 +230,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                     config = config_tmp;\n                 }\n \n-                try!(update_config(&mut config, &matches));\n+                options.apply_to(&mut config);\n                 error_summary.add(run(Input::File(file), &config));\n             }\n             Ok(error_summary)"}]}