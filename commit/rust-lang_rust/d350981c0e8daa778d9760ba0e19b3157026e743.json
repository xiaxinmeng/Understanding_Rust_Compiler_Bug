{"sha": "d350981c0e8daa778d9760ba0e19b3157026e743", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNTA5ODFjMGU4ZGFhNzc4ZDk3NjBiYTBlMTliMzE1NzAyNmU3NDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-05T21:52:27Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:15Z"}, "message": "librustc: Change Const to Freeze in the compiler", "tree": {"sha": "25690e6293fa5135c2c9c5e4e346fe9bda30128e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25690e6293fa5135c2c9c5e4e346fe9bda30128e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d350981c0e8daa778d9760ba0e19b3157026e743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d350981c0e8daa778d9760ba0e19b3157026e743", "html_url": "https://github.com/rust-lang/rust/commit/d350981c0e8daa778d9760ba0e19b3157026e743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d350981c0e8daa778d9760ba0e19b3157026e743/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607b91d5f94b352f953a8503a03af50d6d4aff3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/607b91d5f94b352f953a8503a03af50d6d4aff3b", "html_url": "https://github.com/rust-lang/rust/commit/607b91d5f94b352f953a8503a03af50d6d4aff3b"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "1507fc186e7a5615e9eb032ae927974f4e04ed78", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -560,7 +560,7 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n                 param_bounds.builtin_bounds.add(ty::BoundCopy);\n             }\n             'K' => {\n-                param_bounds.builtin_bounds.add(ty::BoundConst);\n+                param_bounds.builtin_bounds.add(ty::BoundFreeze);\n             }\n             'O' => {\n                 param_bounds.builtin_bounds.add(ty::BoundStatic);"}, {"sha": "0f9937fd3c0cf5f3d8191abe175cb56f43037b5c", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -403,7 +403,7 @@ fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: &ty::ParamBounds) {\n         match bound {\n             ty::BoundSend => w.write_char('S'),\n             ty::BoundCopy => w.write_char('C'),\n-            ty::BoundConst => w.write_char('K'),\n+            ty::BoundFreeze => w.write_char('K'),\n             ty::BoundStatic => w.write_char('O'),\n             ty::BoundSized => w.write_char('Z'),\n         }"}, {"sha": "f0c091ac53caeed798d21aece3433aab794456fc", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -31,7 +31,7 @@ use syntax::{visit, ast_util};\n //\n //  send: Things that can be sent on channels or included in spawned closures.\n //  copy: Things that can be copied.\n-//  const: Things thare are deeply immutable. They are guaranteed never to\n+//  freeze: Things thare are deeply immutable. They are guaranteed never to\n //    change, and can be safely shared without copying between tasks.\n //  'static: Things that do not contain borrowed pointers.\n //\n@@ -40,12 +40,12 @@ use syntax::{visit, ast_util};\n //\n // Copy includes boxes, closure and unique types containing copyable types.\n //\n-// Const include scalar types, things without non-const fields, and pointers\n-// to const things.\n+// Freeze include scalar types, things without non-const fields, and pointers\n+// to freezable things.\n //\n // This pass ensures that type parameters are only instantiated with types\n // whose kinds are equal or less general than the way the type parameter was\n-// annotated (with the `send`, `copy` or `const` keyword).\n+// annotated (with the `Send`, `Copy` or `Freeze` bound).\n //\n // It also verifies that noncopyable kinds are not copied. Sendability is not\n // applied, since none of our language primitives send. Instead, the sending"}, {"sha": "3418fc649da0ec52e1e88df39d0e7b171b0f8cbd", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -13,9 +13,9 @@\n // Language items are items that represent concepts intrinsic to the language\n // itself. Examples are:\n //\n-// * Traits that specify \"kinds\"; e.g. \"const\", \"copy\", \"send\".\n+// * Traits that specify \"kinds\"; e.g. \"Freeze\", \"Copy\", \"Send\".\n //\n-// * Traits that represent operators; e.g. \"add\", \"sub\", \"index\".\n+// * Traits that represent operators; e.g. \"Add\", \"Sub\", \"Index\".\n //\n // * Functions called by the compiler itself.\n \n@@ -99,7 +99,7 @@ impl LanguageItems {\n \n     pub fn item_name(index: uint) -> &'static str {\n         match index {\n-            0  => \"const\",\n+            0  => \"freeze\",\n             1  => \"copy\",\n             2  => \"send\",\n             3  => \"sized\","}, {"sha": "81a1ef6563f47916c7a2d8eca44fb5e1e2857394", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -687,7 +687,7 @@ pub enum BuiltinBound {\n     BoundCopy,\n     BoundStatic,\n     BoundSend,\n-    BoundConst,\n+    BoundFreeze,\n     BoundSized,\n }\n \n@@ -700,7 +700,7 @@ pub fn AllBuiltinBounds() -> BuiltinBounds {\n     set.add(BoundCopy);\n     set.add(BoundStatic);\n     set.add(BoundSend);\n-    set.add(BoundConst);\n+    set.add(BoundFreeze);\n     set.add(BoundSized);\n     set\n }\n@@ -1838,7 +1838,7 @@ impl TypeContents {\n         match bb {\n             BoundCopy => self.is_copy(cx),\n             BoundStatic => self.is_static(cx),\n-            BoundConst => self.is_const(cx),\n+            BoundFreeze => self.is_freezable(cx),\n             BoundSend => self.is_sendable(cx),\n             BoundSized => self.is_sized(cx),\n         }\n@@ -1877,11 +1877,11 @@ impl TypeContents {\n         self.intersects(TC_MANAGED)\n     }\n \n-    pub fn is_const(&self, cx: ctxt) -> bool {\n-        !self.intersects(TypeContents::nonconst(cx))\n+    pub fn is_freezable(&self, cx: ctxt) -> bool {\n+        !self.intersects(TypeContents::nonfreezable(cx))\n     }\n \n-    pub fn nonconst(_cx: ctxt) -> TypeContents {\n+    pub fn nonfreezable(_cx: ctxt) -> TypeContents {\n         TC_MUTABLE\n     }\n \n@@ -1990,8 +1990,8 @@ pub fn type_is_sendable(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_sendable(cx)\n }\n \n-pub fn type_is_const(cx: ctxt, t: ty::t) -> bool {\n-    type_contents(cx, t).is_const(cx)\n+pub fn type_is_freezable(cx: ctxt, t: ty::t) -> bool {\n+    type_contents(cx, t).is_freezable(cx)\n }\n \n pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n@@ -2045,7 +2045,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         let _i = indenter();\n \n         let result = match get(ty).sty {\n-            // Scalar and unique types are sendable, constant, and durable\n+            // Scalar and unique types are sendable, freezable, and durable\n             ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n             ty_bare_fn(_) | ty_ptr(_) => {\n                 TC_NONE\n@@ -2317,7 +2317,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 BoundCopy => TypeContents::noncopyable(cx),\n                 BoundStatic => TypeContents::nonstatic(cx),\n                 BoundSend => TypeContents::nonsendable(cx),\n-                BoundConst => TypeContents::nonconst(cx),\n+                BoundFreeze => TypeContents::nonfreezable(cx),\n                 // The dynamic-size bit can be removed at pointer-level, etc.\n                 BoundSized => TypeContents::dynamically_sized(cx),\n             };"}, {"sha": "70df9877162eb30be4469641f9530a1b0abd19ce", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -818,8 +818,8 @@ pub fn try_add_builtin_trait(tcx: ty::ctxt,\n     } else if trait_def_id == li.copy_trait() {\n         builtin_bounds.add(ty::BoundCopy);\n         true\n-    } else if trait_def_id == li.const_trait() {\n-        builtin_bounds.add(ty::BoundConst);\n+    } else if trait_def_id == li.freeze_trait() {\n+        builtin_bounds.add(ty::BoundFreeze);\n         true\n     } else if trait_def_id == li.sized_trait() {\n         builtin_bounds.add(ty::BoundSized);"}, {"sha": "58dc121959ed207983fb623914417435a98e08a0", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -576,7 +576,7 @@ impl Repr for ty::ParamBounds {\n                 ty::BoundCopy => ~\"Copy\",\n                 ty::BoundStatic => ~\"'static\",\n                 ty::BoundSend => ~\"Send\",\n-                ty::BoundConst => ~\"Const\",\n+                ty::BoundFreeze => ~\"Freeze\",\n                 ty::BoundSized => ~\"Sized\",\n             });\n         }\n@@ -782,7 +782,7 @@ impl UserString for ty::BuiltinBound {\n             ty::BoundCopy => ~\"Copy\",\n             ty::BoundStatic => ~\"'static\",\n             ty::BoundSend => ~\"Send\",\n-            ty::BoundConst => ~\"Const\",\n+            ty::BoundFreeze => ~\"Freeze\",\n             ty::BoundSized => ~\"Sized\",\n         }\n     }"}, {"sha": "b7ec90574e29d0326a2db0ed9dc902ecb4cb135e", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -27,8 +27,7 @@ The 4 kinds are\n * Owned - owned types and types containing owned types.  These types\n   may be transferred across task boundaries.\n \n-* Const - types that are deeply immutable. Const types are used for\n-  freezable data structures.\n+* Freeze - types that are deeply immutable.\n \n `Copy` types include both implicitly copyable types that the compiler\n will copy automatically and non-implicitly copyable types that require\n@@ -56,9 +55,16 @@ pub trait Owned {\n     // empty.\n }\n \n+#[cfg(stage0)]\n #[lang=\"const\"]\n pub trait Const {\n-    // Empty.\n+    // empty.\n+}\n+\n+#[cfg(not(stage0))]\n+#[lang=\"freeze\"]\n+pub trait Const {\n+    // empty.\n }\n \n #[lang=\"sized\"]"}, {"sha": "8e240a62236f48de0817a1bdef191c0b4af43ed0", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d350981c0e8daa778d9760ba0e19b3157026e743/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=d350981c0e8daa778d9760ba0e19b3157026e743", "patch": "@@ -29,7 +29,8 @@ Rust's prelude has three main parts:\n \n // Reexported core operators\n pub use either::{Either, Left, Right};\n-pub use kinds::{Const, Copy, Owned, Sized};\n+pub use kinds::{Copy, Sized};\n+pub use kinds::{Const, Owned};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop};"}]}