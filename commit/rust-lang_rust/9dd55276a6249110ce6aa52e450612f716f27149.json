{"sha": "9dd55276a6249110ce6aa52e450612f716f27149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZDU1Mjc2YTYyNDkxMTBjZTZhYTUyZTQ1MDYxMmY3MTZmMjcxNDk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-03-23T10:03:17Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-12T11:06:42Z"}, "message": "Leverage mir-opt to encode tests for `EndRegion`.\n\nThe tests use `-Z identify_regions` so one can eyeball output for\nsanity. The tests with closures use `-Z span_free_formats` so that\nhost-specific paths do not get embedded into the dumped MIR.\n\nThe tests check against MIR dump output immediately prior to borrowck\n(determined by hand to be the dump from after the \"qualify-consts\"\npass) since that is when `EndRegion` will be most relevant in the near\nterm.", "tree": {"sha": "99807042a9830c990e6ab61e6a526354c3908c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99807042a9830c990e6ab61e6a526354c3908c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dd55276a6249110ce6aa52e450612f716f27149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd55276a6249110ce6aa52e450612f716f27149", "html_url": "https://github.com/rust-lang/rust/commit/9dd55276a6249110ce6aa52e450612f716f27149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dd55276a6249110ce6aa52e450612f716f27149/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5211e80951eeb89e6f8e9e10b31398904d8d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5211e80951eeb89e6f8e9e10b31398904d8d76", "html_url": "https://github.com/rust-lang/rust/commit/0a5211e80951eeb89e6f8e9e10b31398904d8d76"}], "stats": {"total": 706, "additions": 705, "deletions": 1}, "files": [{"sha": "28a124e3c61c8c588a28bfe61c6cb4ebe87fc26d", "filename": "src/test/mir-opt/README.md", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2FREADME.md?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -22,7 +22,32 @@ All the test information is in comments so the test is runnable.\n \n For each $file_name, compiletest expects [$expected_line_0, ...,\n $expected_line_N] to appear in the dumped MIR in order.  Currently it allows\n-other non-matched lines before, after and in-between.  \n+other non-matched lines before, after and in-between. Note that this includes\n+lines that end basic blocks or begin new ones; it is good practice\n+in your tests to include the terminator for each of your basic blocks as an\n+internal sanity check guarding against a test like:\n+\n+```\n+bb0: {\n+    StorageLive(_1);\n+    _1 = const true;\n+    StorageDead(_1);\n+}\n+```\n+\n+that will inadvertantly pattern-matching against:\n+\n+```\n+bb0: {\n+    StorageLive(_1);\n+    _1 = const true;\n+    goto -> bb1\n+}\n+bb1: {\n+    StorageDead(_1);\n+    return;\n+}\n+```\n \n Lines match ignoring whitespace, and the prefix \"//\" is removed.\n "}, {"sha": "55dac4440275fbe0a277d6772d55d546a54efbc9", "filename": "src/test/mir-opt/end_region_1.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// This is just about the simplest program that exhibits an EndRegion.\n+\n+fn main() {\n+    let a = 3;\n+    let b = &a;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _1: i32;\n+//     let _2: &'6_1rce i32;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = const 3i32;\n+//         StorageLive(_2);\n+//         _2 = &'6_1rce _1;\n+//         _0 = ();\n+//         StorageDead(_2);\n+//         EndRegion('6_1rce);\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "a1386ec47a13bd91231ef0601c944a40ef9c4c69", "filename": "src/test/mir-opt/end_region_2.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// We will EndRegion for borrows in a loop that occur before break but\n+// not those after break.\n+\n+fn main() {\n+    loop {\n+        let a = true;\n+        let b = &a;\n+        if a { break; }\n+        let c = &a;\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _2: bool;\n+//     let _3: &'7_1rce bool;\n+//     let _7: &'7_3rce bool;\n+//     let mut _4: ();\n+//     let mut _5: bool;\n+//     bb0: {\n+//         goto -> bb1;\n+//     }\n+//     bb1: {\n+//         StorageLive(_2);\n+//         _2 = const true;\n+//         StorageLive(_3);\n+//         _3 = &'7_1rce _2;\n+//         StorageLive(_5);\n+//         _5 = _2;\n+//         switchInt(_5) -> [0u8: bb3, otherwise: bb2];\n+//     }\n+//     bb2: {\n+//         _0 = ();\n+//         StorageDead(_5);\n+//         StorageDead(_3);\n+//         EndRegion('7_1rce);\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+//     bb3: {\n+//         StorageDead(_5);\n+//         StorageLive(_7);\n+//         _7 = &'7_3rce _2;\n+//         _1 = ();\n+//         StorageDead(_7);\n+//         EndRegion('7_3rce);\n+//         StorageDead(_3);\n+//         EndRegion('7_1rce);\n+//         StorageDead(_2);\n+//         goto -> bb1;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "b3d2809e76cebfc6ca97e9effaa222e8bcd293ba", "filename": "src/test/mir-opt/end_region_3.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// Binding the borrow's subject outside the loop does not increase the\n+// scope of the borrow.\n+\n+fn main() {\n+    let mut a;\n+    loop {\n+        a = true;\n+        let b = &a;\n+        if a { break; }\n+        let c = &a;\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let mut _1: bool;\n+//     let _3: &'9_1rce bool;\n+//     let _7: &'9_3rce bool;\n+//     let mut _2: ();\n+//     let mut _4: ();\n+//     let mut _5: bool;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         goto -> bb1;\n+//     }\n+//     bb1: {\n+//         _1 = const true;\n+//         StorageLive(_3);\n+//         _3 = &'9_1rce _1;\n+//         StorageLive(_5);\n+//         _5 = _1;\n+//         switchInt(_5) -> [0u8: bb3, otherwise: bb2];\n+//     }\n+//     bb2: {\n+//         _0 = ();\n+//         StorageDead(_5);\n+//         StorageDead(_3);\n+//         EndRegion('9_1rce);\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+//     bb3: {\n+//         _4 = ();\n+//         StorageDead(_5);\n+//         StorageLive(_7);\n+//         _7 = &'9_3rce _1;\n+//         _2 = ();\n+//         StorageDead(_7);\n+//         EndRegion('9_3rce);\n+//         StorageDead(_3);\n+//         EndRegion('9_1rce);\n+//         goto -> bb1;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "16ade9f96fd1e5c52de81e3fbaa61381f54503f7", "filename": "src/test/mir-opt/end_region_4.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Direct borrows.\n+\n+fn main() {\n+    let d = D(0);\n+    let a = 0;\n+    let b = &a;\n+    foo(*b);\n+    let c = &a;\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo(i: i32) {\n+    if i > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let _3: i32;\n+//     let _4: &'6_2rce i32;\n+//     let _7: &'6_4rce i32;\n+//     let mut _5: ();\n+//     let mut _6: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n+//         _3 = const 0i32;\n+//         StorageLive(_4);\n+//         _4 = &'6_2rce _3;\n+//         StorageLive(_6);\n+//         _6 = (*_4);\n+//         _5 = const foo(_6) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_6);\n+//         StorageLive(_7);\n+//         _7 = &'6_4rce _3;\n+//         _0 = ();\n+//         StorageDead(_7);\n+//         EndRegion('6_4rce);\n+//         StorageDead(_4);\n+//         EndRegion('6_2rce);\n+//         StorageDead(_3);\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('6_2rce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "513632a4cdf38e89416f62cbc8ace0fc614c88cf", "filename": "src/test/mir-opt/end_region_5.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Borrowing via by-ref closure.\n+\n+fn main() {\n+    let d = D(0);\n+    foo(|| -> i32 { d.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let mut _2: ();\n+//     let mut _3: ();\n+//     let mut _4: [closure@NodeId(18) d: &'19mce D];\n+//     let mut _5: &'19mce D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = &'19mce _1;\n+//         _4 = [closure@NodeId(18)] { d: _5 };\n+//         StorageDead(_5);\n+//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_4);\n+//         EndRegion('19mce);\n+//         _0 = ();\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('19mce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node18.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(18) d:&'19mce D]) -> i32 {\n+//    let mut _0: i32;\n+//    let mut _2: i32;\n+//\n+//    bb0: {\n+//        StorageLive(_2);\n+//        _2 = ((*(_1.0: &'19mce D)).0: i32);\n+//        _0 = _2;\n+//        StorageDead(_2);\n+//        return;\n+//    }\n+// END rustc.node18.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "e82556f3ce4bbce13e894e05606f28decac57353", "filename": "src/test/mir-opt/end_region_6.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: 2nd borrow within by-ref closure.\n+\n+fn main() {\n+    let d = D(0);\n+    foo(|| -> i32 { let r = &d; r.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let mut _2: ();\n+//     let mut _3: ();\n+//     let mut _4: [closure@NodeId(22) d:&'23mce D];\n+//     let mut _5: &'23mce D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = &'23mce _1;\n+//         _4 = [closure@NodeId(22)] { d: _5 };\n+//         StorageDead(_5);\n+//         _3 = const foo(_4) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_4);\n+//         EndRegion('23mce);\n+//         _0 = ();\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('23mce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(22) d:&'23mce D]) -> i32 {\n+//     let mut _0: i32;\n+//     let _2: &'14_0rce D;\n+//     let mut _3: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = &'14_0rce (*(_1.0: &'23mce D));\n+//         StorageLive(_3);\n+//         _3 = ((*_2).0: i32);\n+//         _0 = _3;\n+//         StorageDead(_3);\n+//         StorageDead(_2);\n+//         EndRegion('14_0rce);\n+//         return;\n+//     }\n+// END rustc.node22.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "3fbd3f368659dd1dc58ef2e863d2e4c6af578f85", "filename": "src/test/mir-opt/end_region_7.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Borrow of moved data.\n+\n+fn main() {\n+    let d = D(0);\n+    foo(move || -> i32 { let r = &d; r.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let mut _2: ();\n+//     let mut _3: ();\n+//     let mut _4: [closure@NodeId(22) d:D];\n+//     let mut _5: D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = _1;\n+//         _4 = [closure@NodeId(22)] { d: _5 };\n+//         drop(_5) -> [return: bb4, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb3: {\n+//         drop(_4) -> bb2;\n+//     }\n+//     bb4: {\n+//         StorageDead(_5);\n+//         _3 = const foo(_4) -> [return: bb5, unwind: bb3];\n+//     }\n+//     bb5: {\n+//         drop(_4) -> [return: bb6, unwind: bb2];\n+//     }\n+//     bb6: {\n+//         StorageDead(_4);\n+//         _0 = ();\n+//         drop(_1) -> bb7;\n+//     }\n+//     bb7: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(22) d:D]) -> i32 {\n+//     let mut _0: i32;\n+//     let _2: &'14_0rce D;\n+//     let mut _3: ();\n+//     let mut _4: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = &'14_0rce (_1.0: D);\n+//         StorageLive(_4);\n+//         _4 = ((*_2).0: i32);\n+//         _0 = _4;\n+//         StorageDead(_4);\n+//         StorageDead(_2);\n+//         EndRegion('14_0rce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb1: {\n+//         return;\n+//     }\n+// }\n+// END rustc.node22.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "7fb3f0b91181a082655e63f9706d4b0c77ee2803", "filename": "src/test/mir-opt/end_region_8.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Unwinding should EndRegion for in-scope borrows: Move of borrow into closure.\n+\n+fn main() {\n+    let d = D(0);\n+    let r = &d;\n+    foo(move || -> i32 { r.0 });\n+}\n+\n+struct D(i32);\n+impl Drop for D { fn drop(&mut self) { println!(\"dropping D({})\", self.0); } }\n+\n+fn foo<F>(f: F) where F: FnOnce() -> i32 {\n+    if f() > 0 { panic!(\"im positive\"); }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let _1: D;\n+//     let _3: &'6_1rce D;\n+//     let mut _2: ();\n+//     let mut _4: ();\n+//     let mut _5: [closure@NodeId(22) r:&'6_1rce D];\n+//     let mut _6: &'6_1rce D;\n+//\n+//     bb0: {\n+//         StorageLive(_1);\n+//         _1 = D::{{constructor}}(const 0i32,);\n+//         StorageLive(_3);\n+//         _3 = &'6_1rce _1;\n+//         StorageLive(_5);\n+//         StorageLive(_6);\n+//         _6 = _3;\n+//         _5 = [closure@NodeId(22)] { r: _6 };\n+//         StorageDead(_6);\n+//         _4 = const foo(_5) -> [return: bb2, unwind: bb3];\n+//     }\n+//     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n+//         StorageDead(_5);\n+//         _0 = ();\n+//         StorageDead(_3);\n+//         EndRegion('6_1rce);\n+//         drop(_1) -> bb4;\n+//     }\n+//     bb3: {\n+//         EndRegion('6_1rce);\n+//         drop(_1) -> bb1;\n+//     }\n+//     bb4: {\n+//         StorageDead(_1);\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+\n+// START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n+// fn main::{{closure}}(_1: [closure@NodeId(22) r:&'6_1rce D]) -> i32 {\n+//     let mut _0: i32;\n+//     let mut _2: i32;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = ((*(_1.0: &'6_1rce D)).0: i32);\n+//         _0 = _2;\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+// }\n+// END rustc.node22.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "deff984e4d0de63376cbb24461f83115694a58f1", "filename": "src/test/mir-opt/end_region_9.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dd55276a6249110ce6aa52e450612f716f27149/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=9dd55276a6249110ce6aa52e450612f716f27149", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// This test models a scenario that arielb1 found during review.\n+// Namely, any filtering of EndRegions must ensure to continue to emit\n+// any necessary EndRegions that occur earlier in the source than the\n+// first borrow involving that region.\n+//\n+// It is tricky to actually construct examples of this, which is the\n+// main reason that I am keeping this test even though I have now\n+// removed the pre-filter that motivated the test in the first place.\n+\n+fn main() {\n+    let mut second_iter = false;\n+    let x = 3;\n+    'a: loop {\n+        let mut y;\n+        loop {\n+            if second_iter {\n+                break 'a; // want to generate `EndRegion('a)` here\n+            } else {\n+                y = &/*'a*/ x;\n+            }\n+            second_iter = true;\n+        }\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let mut _1: bool;\n+//     let _2: i32;\n+//     let mut _4: &'13_0rce i32;\n+//     let mut _3: ();\n+//     let mut _5: !;\n+//     let mut _6: ();\n+//     let mut _7: bool;\n+//     let mut _8: !;\n+//\n+//     bb0: {\n+//        StorageLive(_1);\n+//        _1 = const false;\n+//        StorageLive(_2);\n+//        _2 = const 3i32;\n+//        StorageLive(_4);\n+//        goto -> bb1;\n+//    }\n+//\n+//    bb1: {\n+//        StorageLive(_7);\n+//        _7 = _1;\n+//        switchInt(_7) -> [0u8: bb3, otherwise: bb2];\n+//    }\n+//\n+//    bb2: {\n+//        _0 = ();\n+//        StorageDead(_7);\n+//        StorageDead(_4);\n+//        EndRegion('13_0rce);\n+//        StorageDead(_2);\n+//        StorageDead(_1);\n+//        return;\n+//    }\n+//\n+//    bb3: {\n+//        _4 = &'13_0rce _2;\n+//        _6 = ();\n+//        StorageDead(_7);\n+//        _1 = const true;\n+//        _3 = ();\n+//        goto -> bb1;\n+//    }\n+// }"}]}