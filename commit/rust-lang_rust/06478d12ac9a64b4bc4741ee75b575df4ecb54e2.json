{"sha": "06478d12ac9a64b4bc4741ee75b575df4ecb54e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDc4ZDEyYWM5YTY0YjRiYzQ3NDFlZTc1YjU3NWRmNGVjYjU0ZTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-14T06:45:07Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-14T06:45:07Z"}, "message": "rustdoc: pretty-print Unevaluated expressions in types.", "tree": {"sha": "58bc4918f5d17115c05ad52f685a397683a248f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58bc4918f5d17115c05ad52f685a397683a248f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06478d12ac9a64b4bc4741ee75b575df4ecb54e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06478d12ac9a64b4bc4741ee75b575df4ecb54e2", "html_url": "https://github.com/rust-lang/rust/commit/06478d12ac9a64b4bc4741ee75b575df4ecb54e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06478d12ac9a64b4bc4741ee75b575df4ecb54e2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84bbd14e3f392d63524482e2f0c69cd6fcd7f2c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/84bbd14e3f392d63524482e2f0c69cd6fcd7f2c5", "html_url": "https://github.com/rust-lang/rust/commit/84bbd14e3f392d63524482e2f0c69cd6fcd7f2c5"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "7f5d11ba5de28c43999b7a1f1739abc3b112d80d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06478d12ac9a64b4bc4741ee75b575df4ecb54e2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06478d12ac9a64b4bc4741ee75b575df4ecb54e2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=06478d12ac9a64b4bc4741ee75b575df4ecb54e2", "patch": "@@ -473,7 +473,7 @@ impl hir::print::PpAnn for InlinedConst {\n     }\n }\n \n-fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n+pub fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n     let body = cx.tcx.extern_const_body(did);\n     let inlined = InlinedConst {\n         nested_bodies: cx.tcx.item_body_nested_bodies(did)"}, {"sha": "7531458d9f9d6c32cd76d71b1260ea1f61e7e9c0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06478d12ac9a64b4bc4741ee75b575df4ecb54e2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06478d12ac9a64b4bc4741ee75b575df4ecb54e2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=06478d12ac9a64b4bc4741ee75b575df4ecb54e2", "patch": "@@ -1793,6 +1793,12 @@ impl Clean<Type> for hir::Ty {\n                 let n = cx.tcx.const_eval(param_env.and((def_id, substs))).unwrap();\n                 let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     n.to_string()\n+                } else if let ConstVal::Unevaluated(def_id, _) = n.val {\n+                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n+                        print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n+                    } else {\n+                        inline::print_inlined_const(cx, def_id)\n+                    }\n                 } else {\n                     format!(\"{:?}\", n)\n                 };\n@@ -1909,6 +1915,12 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyArray(ty, n) => {\n                 let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     n.to_string()\n+                } else if let ConstVal::Unevaluated(def_id, _) = n.val {\n+                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n+                        print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n+                    } else {\n+                        inline::print_inlined_const(cx, def_id)\n+                    }\n                 } else {\n                     format!(\"{:?}\", n)\n                 };"}]}