{"sha": "7465eb44f0288da9b48c86881b9e88e73d8f27dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjVlYjQ0ZjAyODhkYTliNDhjODY4ODFiOWU4OGU3M2Q4ZjI3ZGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-17T20:03:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Refactor parse_{if,while}_expr a bit.", "tree": {"sha": "8d750543ca96324bd87aa33d7f58004c01328c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d750543ca96324bd87aa33d7f58004c01328c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7465eb44f0288da9b48c86881b9e88e73d8f27dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7465eb44f0288da9b48c86881b9e88e73d8f27dd", "html_url": "https://github.com/rust-lang/rust/commit/7465eb44f0288da9b48c86881b9e88e73d8f27dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7465eb44f0288da9b48c86881b9e88e73d8f27dd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae5086cc59a19bb35b53df0580610e0df03d812", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae5086cc59a19bb35b53df0580610e0df03d812", "html_url": "https://github.com/rust-lang/rust/commit/5ae5086cc59a19bb35b53df0580610e0df03d812"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "65936345fe1ac67c53061e27f2a36b0d53c7679d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7465eb44f0288da9b48c86881b9e88e73d8f27dd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7465eb44f0288da9b48c86881b9e88e73d8f27dd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7465eb44f0288da9b48c86881b9e88e73d8f27dd", "patch": "@@ -3157,8 +3157,7 @@ impl<'a> Parser<'a> {\n     /// Parses an `if` expression (`if` token already eaten).\n     fn parse_if_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n-        let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n-        self.ungate_prev_let_expr(&cond);\n+        let cond = self.parse_cond_expr()?;\n \n         // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then\n         // verify that the last statement is either an implicit return (no `;`) or an explicit\n@@ -3188,12 +3187,17 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(hi), ExprKind::If(cond, thn, els), attrs))\n     }\n \n-    /// Remove the last feature gating of a `let` expression that must the one provided.\n-    fn ungate_prev_let_expr(&mut self, expr: &Expr) {\n-        if let ExprKind::Let(..) = expr.node {\n+    /// Parse the condition of a `if`- or `while`-expression\n+    fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {\n+        let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+\n+        if let ExprKind::Let(..) = cond.node {\n+            // Remove the last feature gating of a `let` expression since it's stable.\n             let last = self.sess.let_chains_spans.borrow_mut().pop();\n-            debug_assert_eq!(expr.span, last.unwrap());\n+            debug_assert_eq!(cond.span, last.unwrap());\n         }\n+\n+        Ok(cond)\n     }\n \n     /// Parses a `let $pats = $expr` pseudo-expression.\n@@ -3295,12 +3299,11 @@ impl<'a> Parser<'a> {\n     fn parse_while_expr(&mut self, opt_label: Option<Label>,\n                             span_lo: Span,\n                             mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n-        let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n-        self.ungate_prev_let_expr(&cond);\n+        let cond = self.parse_cond_expr()?;\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);\n-        return Ok(self.mk_expr(span, ExprKind::While(cond, body, opt_label), attrs));\n+        Ok(self.mk_expr(span, ExprKind::While(cond, body, opt_label), attrs))\n     }\n \n     // parse `loop {...}`, `loop` token already eaten"}]}