{"sha": "667223c35d9be21e91a9ffbe626213767c066dda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzIyM2MzNWQ5YmUyMWU5MWE5ZmZiZTYyNjIxMzc2N2MwNjZkZGE=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-10T02:56:34Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-02T23:10:29Z"}, "message": "Add run-rustfix", "tree": {"sha": "7ab84ba508de32880851e66abbe24fc57cbe1eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab84ba508de32880851e66abbe24fc57cbe1eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/667223c35d9be21e91a9ffbe626213767c066dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/667223c35d9be21e91a9ffbe626213767c066dda", "html_url": "https://github.com/rust-lang/rust/commit/667223c35d9be21e91a9ffbe626213767c066dda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/667223c35d9be21e91a9ffbe626213767c066dda/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "301ef6bb2a3883da9b1340b243f3a934ec3c6fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/301ef6bb2a3883da9b1340b243f3a934ec3c6fb8", "html_url": "https://github.com/rust-lang/rust/commit/301ef6bb2a3883da9b1340b243f3a934ec3c6fb8"}], "stats": {"total": 338, "additions": 241, "deletions": 97}, "files": [{"sha": "965f6bac62af1aab79279f104a430339d4a3070e", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/667223c35d9be21e91a9ffbe626213767c066dda/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667223c35d9be21e91a9ffbe626213767c066dda/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=667223c35d9be21e91a9ffbe626213767c066dda", "patch": "@@ -208,13 +208,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                         let sugg_span = span.with_lo(\n                             span.lo() + BytePos(u32::try_from(dot).unwrap())\n                         );\n+                        let mut app = Applicability::MaybeIncorrect;\n+                        let mut call_snip = &snip[dot + 1..];\n+                        if call_snip.ends_with(\"()\") {\n+                            call_snip = call_snip[..call_snip.len()-2].trim();\n+                            if call_snip.as_bytes().iter().all(|b| b.is_ascii_alphabetic() || *b == b'_') {\n+                                app = Applicability::MachineApplicable;\n+                            }\n+                        }\n \n                         span_lint_hir_and_then(cx, REDUNDANT_CLONE, node, sugg_span, \"redundant clone\", |db| {\n                             db.span_suggestion(\n                                 sugg_span,\n                                 \"remove this\",\n                                 String::new(),\n-                                Applicability::MaybeIncorrect,\n+                                app,\n                             );\n                             db.span_note(\n                                 span.with_hi(span.lo() + BytePos(u32::try_from(dot).unwrap())),"}, {"sha": "614a9bf4d90028074a74bdfa4c3f94f0ac844bce", "filename": "tests/ui/redundant_clone.fixed", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/667223c35d9be21e91a9ffbe626213767c066dda/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/667223c35d9be21e91a9ffbe626213767c066dda/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=667223c35d9be21e91a9ffbe626213767c066dda", "patch": "@@ -0,0 +1,132 @@\n+// run-rustfix\n+// rustfix-only-machine-applicable\n+use std::ffi::OsString;\n+use std::path::Path;\n+\n+fn main() {\n+    let _s = [\"lorem\", \"ipsum\"].join(\" \");\n+\n+    let s = String::from(\"foo\");\n+    let _s = s;\n+\n+    let s = String::from(\"foo\");\n+    let _s = s;\n+\n+    let s = String::from(\"foo\");\n+    let _s = s;\n+\n+    let _s = Path::new(\"/a/b/\").join(\"c\");\n+\n+    let _s = Path::new(\"/a/b/\").join(\"c\");\n+\n+    let _s = OsString::new();\n+\n+    let _s = OsString::new();\n+\n+    // Check that lint level works\n+    #[allow(clippy::redundant_clone)]\n+    let _s = String::new().to_string();\n+\n+    let tup = (String::from(\"foo\"),);\n+    let _t = tup.0;\n+\n+    let tup_ref = &(String::from(\"foo\"),);\n+    let _s = tup_ref.0.clone(); // this `.clone()` cannot be removed\n+\n+    {\n+        let x = String::new();\n+        let y = &x;\n+\n+        let _x = x.clone(); // ok; `x` is borrowed by `y`\n+\n+        let _ = y.len();\n+    }\n+\n+    let x = (String::new(),);\n+    let _ = Some(String::new()).unwrap_or_else(|| x.0.clone()); // ok; closure borrows `x`\n+\n+    with_branch(Alpha, true);\n+    cannot_move_from_type_with_drop();\n+    borrower_propagation();\n+}\n+\n+#[derive(Clone)]\n+struct Alpha;\n+fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {\n+    if b {\n+        (a.clone(), a)\n+    } else {\n+        (Alpha, a)\n+    }\n+}\n+\n+struct TypeWithDrop {\n+    x: String,\n+}\n+\n+impl Drop for TypeWithDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn cannot_move_from_type_with_drop() -> String {\n+    let s = TypeWithDrop { x: String::new() };\n+    s.x.clone() // removing this `clone()` summons E0509\n+}\n+\n+fn borrower_propagation() {\n+    let s = String::new();\n+    let t = String::new();\n+\n+    {\n+        fn b() -> bool {\n+            unimplemented!()\n+        }\n+        let _u = if b() { &s } else { &t };\n+\n+        // ok; `s` and `t` are possibly borrowed\n+        let _s = s.clone();\n+        let _t = t.clone();\n+    }\n+\n+    {\n+        let _u = || s.len();\n+        let _v = [&t; 32];\n+        let _s = s.clone(); // ok\n+        let _t = t.clone(); // ok\n+    }\n+\n+    {\n+        let _u = {\n+            let u = Some(&s);\n+            let _ = s.clone(); // ok\n+            u\n+        };\n+        let _s = s.clone(); // ok\n+    }\n+\n+    {\n+        use std::convert::identity as id;\n+        let _u = id(id(&s));\n+        let _s = s.clone(); // ok, `u` borrows `s`\n+    }\n+\n+    let _s = s;\n+    let _t = t;\n+\n+    #[derive(Clone)]\n+    struct Foo {\n+        x: usize,\n+    }\n+\n+    {\n+        let f = Foo { x: 123 };\n+        let _x = Some(f.x);\n+        let _f = f;\n+    }\n+\n+    {\n+        let f = Foo { x: 123 };\n+        let _x = &f.x;\n+        let _f = f.clone(); // ok\n+    }\n+}"}, {"sha": "48687c82c2fbb08841af746aac7c36591b5f5658", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/667223c35d9be21e91a9ffbe626213767c066dda/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667223c35d9be21e91a9ffbe626213767c066dda/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=667223c35d9be21e91a9ffbe626213767c066dda", "patch": "@@ -1,34 +1,34 @@\n-#![warn(clippy::redundant_clone)]\n-\n+// run-rustfix\n+// rustfix-only-machine-applicable\n use std::ffi::OsString;\n use std::path::Path;\n \n fn main() {\n-    let _ = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n+    let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n \n     let s = String::from(\"foo\");\n-    let _ = s.clone();\n+    let _s = s.clone();\n \n     let s = String::from(\"foo\");\n-    let _ = s.to_string();\n+    let _s = s.to_string();\n \n     let s = String::from(\"foo\");\n-    let _ = s.to_owned();\n+    let _s = s.to_owned();\n \n-    let _ = Path::new(\"/a/b/\").join(\"c\").to_owned();\n+    let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n \n-    let _ = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n+    let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n \n-    let _ = OsString::new().to_owned();\n+    let _s = OsString::new().to_owned();\n \n-    let _ = OsString::new().to_os_string();\n+    let _s = OsString::new().to_os_string();\n \n     // Check that lint level works\n     #[allow(clippy::redundant_clone)]\n-    let _ = String::new().to_string();\n+    let _s = String::new().to_string();\n \n     let tup = (String::from(\"foo\"),);\n-    let _ = tup.0.clone();\n+    let _t = tup.0.clone();\n \n     let tup_ref = &(String::from(\"foo\"),);\n     let _s = tup_ref.0.clone(); // this `.clone()` cannot be removed\n@@ -37,13 +37,17 @@ fn main() {\n         let x = String::new();\n         let y = &x;\n \n-        let _ = x.clone(); // ok; `x` is borrowed by `y`\n+        let _x = x.clone(); // ok; `x` is borrowed by `y`\n \n         let _ = y.len();\n     }\n \n     let x = (String::new(),);\n     let _ = Some(String::new()).unwrap_or_else(|| x.0.clone()); // ok; closure borrows `x`\n+\n+    with_branch(Alpha, true);\n+    cannot_move_from_type_with_drop();\n+    borrower_propagation();\n }\n \n #[derive(Clone)]\n@@ -77,37 +81,37 @@ fn borrower_propagation() {\n         fn b() -> bool {\n             unimplemented!()\n         }\n-        let u = if b() { &s } else { &t };\n+        let _u = if b() { &s } else { &t };\n \n         // ok; `s` and `t` are possibly borrowed\n-        let _ = s.clone();\n-        let _ = t.clone();\n+        let _s = s.clone();\n+        let _t = t.clone();\n     }\n \n     {\n-        let u = || s.len();\n-        let v = [&t; 32];\n-        let _ = s.clone(); // ok\n-        let _ = t.clone(); // ok\n+        let _u = || s.len();\n+        let _v = [&t; 32];\n+        let _s = s.clone(); // ok\n+        let _t = t.clone(); // ok\n     }\n \n     {\n-        let u = {\n+        let _u = {\n             let u = Some(&s);\n             let _ = s.clone(); // ok\n             u\n         };\n-        let _ = s.clone(); // ok\n+        let _s = s.clone(); // ok\n     }\n \n     {\n         use std::convert::identity as id;\n-        let u = id(id(&s));\n-        let _ = s.clone(); // ok, `u` borrows `s`\n+        let _u = id(id(&s));\n+        let _s = s.clone(); // ok, `u` borrows `s`\n     }\n \n-    let _ = s.clone();\n-    let _ = t.clone();\n+    let _s = s.clone();\n+    let _t = t.clone();\n \n     #[derive(Clone)]\n     struct Foo {"}, {"sha": "feafbd78b4eafc7a9ecda691313dba5ebd2e7ab8", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/667223c35d9be21e91a9ffbe626213767c066dda/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/667223c35d9be21e91a9ffbe626213767c066dda/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=667223c35d9be21e91a9ffbe626213767c066dda", "patch": "@@ -1,156 +1,156 @@\n error: redundant clone\n-  --> $DIR/redundant_clone.rs:7:41\n+  --> $DIR/redundant_clone.rs:7:42\n    |\n-LL |     let _ = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n-   |                                         ^^^^^^^^^^^^ help: remove this\n+LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n+   |                                          ^^^^^^^^^^^^ help: remove this\n    |\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:7:13\n+  --> $DIR/redundant_clone.rs:7:14\n    |\n-LL |     let _ = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:10:14\n+  --> $DIR/redundant_clone.rs:10:15\n    |\n-LL |     let _ = s.clone();\n-   |              ^^^^^^^^ help: remove this\n+LL |     let _s = s.clone();\n+   |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:10:13\n+  --> $DIR/redundant_clone.rs:10:14\n    |\n-LL |     let _ = s.clone();\n-   |             ^\n+LL |     let _s = s.clone();\n+   |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:13:14\n+  --> $DIR/redundant_clone.rs:13:15\n    |\n-LL |     let _ = s.to_string();\n-   |              ^^^^^^^^^^^^ help: remove this\n+LL |     let _s = s.to_string();\n+   |               ^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:13:13\n+  --> $DIR/redundant_clone.rs:13:14\n    |\n-LL |     let _ = s.to_string();\n-   |             ^\n+LL |     let _s = s.to_string();\n+   |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:16:14\n+  --> $DIR/redundant_clone.rs:16:15\n    |\n-LL |     let _ = s.to_owned();\n-   |              ^^^^^^^^^^^ help: remove this\n+LL |     let _s = s.to_owned();\n+   |               ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:16:13\n+  --> $DIR/redundant_clone.rs:16:14\n    |\n-LL |     let _ = s.to_owned();\n-   |             ^\n+LL |     let _s = s.to_owned();\n+   |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:18:41\n+  --> $DIR/redundant_clone.rs:18:42\n    |\n-LL |     let _ = Path::new(\"/a/b/\").join(\"c\").to_owned();\n-   |                                         ^^^^^^^^^^^ help: remove this\n+LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n+   |                                          ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:18:13\n+  --> $DIR/redundant_clone.rs:18:14\n    |\n-LL |     let _ = Path::new(\"/a/b/\").join(\"c\").to_owned();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:20:41\n+  --> $DIR/redundant_clone.rs:20:42\n    |\n-LL |     let _ = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n-   |                                         ^^^^^^^^^^^^^^ help: remove this\n+LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n+   |                                          ^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:20:13\n+  --> $DIR/redundant_clone.rs:20:14\n    |\n-LL |     let _ = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:22:28\n+  --> $DIR/redundant_clone.rs:22:29\n    |\n-LL |     let _ = OsString::new().to_owned();\n-   |                            ^^^^^^^^^^^ help: remove this\n+LL |     let _s = OsString::new().to_owned();\n+   |                             ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:22:13\n+  --> $DIR/redundant_clone.rs:22:14\n    |\n-LL |     let _ = OsString::new().to_owned();\n-   |             ^^^^^^^^^^^^^^^\n+LL |     let _s = OsString::new().to_owned();\n+   |              ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:24:28\n+  --> $DIR/redundant_clone.rs:24:29\n    |\n-LL |     let _ = OsString::new().to_os_string();\n-   |                            ^^^^^^^^^^^^^^^ help: remove this\n+LL |     let _s = OsString::new().to_os_string();\n+   |                             ^^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:24:13\n+  --> $DIR/redundant_clone.rs:24:14\n    |\n-LL |     let _ = OsString::new().to_os_string();\n-   |             ^^^^^^^^^^^^^^^\n+LL |     let _s = OsString::new().to_os_string();\n+   |              ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:31:18\n+  --> $DIR/redundant_clone.rs:31:19\n    |\n-LL |     let _ = tup.0.clone();\n-   |                  ^^^^^^^^ help: remove this\n+LL |     let _t = tup.0.clone();\n+   |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:31:13\n+  --> $DIR/redundant_clone.rs:31:14\n    |\n-LL |     let _ = tup.0.clone();\n-   |             ^^^^^\n+LL |     let _t = tup.0.clone();\n+   |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:53:22\n+  --> $DIR/redundant_clone.rs:57:22\n    |\n LL |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:53:21\n+  --> $DIR/redundant_clone.rs:57:21\n    |\n LL |         (a.clone(), a.clone())\n    |                     ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:109:14\n+  --> $DIR/redundant_clone.rs:113:15\n    |\n-LL |     let _ = s.clone();\n-   |              ^^^^^^^^ help: remove this\n+LL |     let _s = s.clone();\n+   |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:109:13\n+  --> $DIR/redundant_clone.rs:113:14\n    |\n-LL |     let _ = s.clone();\n-   |             ^\n+LL |     let _s = s.clone();\n+   |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:110:14\n+  --> $DIR/redundant_clone.rs:114:15\n    |\n-LL |     let _ = t.clone();\n-   |              ^^^^^^^^ help: remove this\n+LL |     let _t = t.clone();\n+   |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:110:13\n+  --> $DIR/redundant_clone.rs:114:14\n    |\n-LL |     let _ = t.clone();\n-   |             ^\n+LL |     let _t = t.clone();\n+   |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:120:19\n+  --> $DIR/redundant_clone.rs:124:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:120:18\n+  --> $DIR/redundant_clone.rs:124:18\n    |\n LL |         let _f = f.clone();\n    |                  ^"}]}