{"sha": "3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "node_id": "C_kwDOAAsO6NoAKDNmNWZjMDVkNjY3NTM5NGY0NmI3Y2RlYjY4MDNkN2M3MDQ1ZTE2YWI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T15:23:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T15:28:11Z"}, "message": "internal: add tests for extra parser entry points", "tree": {"sha": "43388f7c1ac9de63097ae9808765b6c0f857399f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43388f7c1ac9de63097ae9808765b6c0f857399f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "html_url": "https://github.com/rust-lang/rust/commit/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "355a4bdb883ee9edc1c32b553fcf91c302b3df19", "url": "https://api.github.com/repos/rust-lang/rust/commits/355a4bdb883ee9edc1c32b553fcf91c302b3df19", "html_url": "https://github.com/rust-lang/rust/commit/355a4bdb883ee9edc1c32b553fcf91c302b3df19"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "e9ec9822d68c304b9444e20c098c648b3324be38", "filename": "crates/parser/src/output.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Foutput.rs?ref=3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "patch": "@@ -22,6 +22,7 @@ pub struct Output {\n     error: Vec<String>,\n }\n \n+#[derive(Debug)]\n pub enum Step<'a> {\n     Token { kind: SyntaxKind, n_input_tokens: u8 },\n     Enter { kind: SyntaxKind },"}, {"sha": "e14526aa7339dbdbfdf6db02b8b4aaf6a64fa4a2", "filename": "crates/parser/src/shortcuts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fshortcuts.rs?ref=3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "patch": "@@ -16,6 +16,7 @@ use crate::{\n     SyntaxKind::{self, *},\n };\n \n+#[derive(Debug)]\n pub enum StrStep<'a> {\n     Token { kind: SyntaxKind, text: &'a str },\n     Enter { kind: SyntaxKind },\n@@ -75,7 +76,8 @@ impl<'a> LexedStr<'a> {\n                 builder.eat_trivias();\n                 (builder.sink)(StrStep::Exit);\n             }\n-            State::PendingEnter | State::Normal => unreachable!(),\n+            State::PendingEnter => (),\n+            State::Normal => unreachable!(),\n         }\n \n         let is_eof = builder.pos == builder.lexed.len();"}, {"sha": "fb4885e98d506bb4cd5d95e83fed55640ab67da1", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "patch": "@@ -1,4 +1,5 @@\n mod sourcegen_inline_tests;\n+mod entries;\n \n use std::{\n     fmt::Write,"}, {"sha": "93e8136263ee053c03da93d849480ef203259f2a", "filename": "crates/parser/src/tests/entries.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5fc05d6675394f46b7cdeb6803d7c7045e16ab/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=3f5fc05d6675394f46b7cdeb6803d7c7045e16ab", "patch": "@@ -0,0 +1,41 @@\n+use crate::{LexedStr, PrefixEntryPoint, StrStep};\n+\n+#[test]\n+fn vis() {\n+    check_prefix(PrefixEntryPoint::Vis, \"pub(crate) fn foo() {}\", \"pub(crate)\");\n+    check_prefix(PrefixEntryPoint::Vis, \"fn foo() {}\", \"\");\n+    check_prefix(PrefixEntryPoint::Vis, \"pub(fn foo() {}\", \"pub\");\n+    check_prefix(PrefixEntryPoint::Vis, \"pub(crate fn foo() {}\", \"pub(crate\");\n+    check_prefix(PrefixEntryPoint::Vis, \"crate fn foo() {}\", \"crate\");\n+}\n+\n+#[test]\n+fn block() {\n+    check_prefix(PrefixEntryPoint::Block, \"{}, 92\", \"{}\");\n+    check_prefix(PrefixEntryPoint::Block, \"{, 92)\", \"{, 92)\");\n+    check_prefix(PrefixEntryPoint::Block, \"()\", \"\");\n+}\n+\n+#[test]\n+fn stmt() {\n+    check_prefix(PrefixEntryPoint::Stmt, \"92; fn\", \"92\");\n+    check_prefix(PrefixEntryPoint::Stmt, \"let _ = 92; 1\", \"let _ = 92\");\n+    check_prefix(PrefixEntryPoint::Stmt, \"pub fn f() {} = 92\", \"pub fn f() {}\");\n+    check_prefix(PrefixEntryPoint::Stmt, \";;;\", \";\");\n+    check_prefix(PrefixEntryPoint::Stmt, \"+\", \"+\");\n+    check_prefix(PrefixEntryPoint::Stmt, \"@\", \"@\");\n+    check_prefix(PrefixEntryPoint::Stmt, \"loop {} - 1\", \"loop {}\");\n+}\n+\n+fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n+    let lexed = LexedStr::new(input);\n+    let input = lexed.to_input();\n+    let output = entry.parse(&input);\n+\n+    let mut buf = String::new();\n+    lexed.intersperse_trivia(&output, &mut |step| match step {\n+        StrStep::Token { kind: _, text } => buf.push_str(text),\n+        _ => (),\n+    });\n+    assert_eq!(buf.trim(), prefix)\n+}"}]}