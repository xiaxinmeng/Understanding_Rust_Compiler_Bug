{"sha": "644467c570314097f626868320bb4a9b2f769fc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NDQ2N2M1NzAzMTQwOTdmNjI2ODY4MzIwYmI0YTliMmY3NjlmYzc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T20:18:23Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T20:54:43Z"}, "message": "Add methods to handle invalid fides", "tree": {"sha": "7acf923f070f49a6515ba11dc6ee58e07bc44025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7acf923f070f49a6515ba11dc6ee58e07bc44025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644467c570314097f626868320bb4a9b2f769fc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644467c570314097f626868320bb4a9b2f769fc7", "html_url": "https://github.com/rust-lang/rust/commit/644467c570314097f626868320bb4a9b2f769fc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644467c570314097f626868320bb4a9b2f769fc7/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efbe798e626bee92cb7b2858b26ead38746b1960", "url": "https://api.github.com/repos/rust-lang/rust/commits/efbe798e626bee92cb7b2858b26ead38746b1960", "html_url": "https://github.com/rust-lang/rust/commit/efbe798e626bee92cb7b2858b26ead38746b1960"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "0cb2d7eeeabd4e60e28ffae28395fa404fe32440", "filename": "src/shims/io.rs", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/644467c570314097f626868320bb4a9b2f769fc7/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644467c570314097f626868320bb4a9b2f769fc7/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=644467c570314097f626868320bb4a9b2f769fc7", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::layout::Size;\n use crate::stacked_borrows::Tag;\n use crate::*;\n \n-struct FileHandle {\n+pub struct FileHandle {\n     file: File,\n     flag: i32,\n }\n@@ -94,12 +94,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Ok(0)\n         } else if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n-            if let Some(handle) = this.machine.file_handler.handles.get(&fd) {\n-                Ok(handle.flag)\n-            } else {\n-                this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n-                Ok(-1)\n-            }\n+            this.get_handle_and(fd, |handle| Ok(handle.flag), -1)\n         } else {\n             throw_unsup_format!(\"Unsupported command {:#x}\", cmd);\n         }\n@@ -114,12 +109,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n-        if let Some(handle) = this.machine.file_handler.handles.remove(&fd) {\n-            this.consume_result::<i32>(handle.file.sync_all().map(|_| 0), -1)\n-        } else {\n-            this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n-            Ok(-1)\n-        }\n+        this.remove_handle_and(\n+            fd,\n+            |handle, this| this.consume_result::<i32>(handle.file.sync_all().map(|_| 0), -1),\n+            -1,\n+        )\n     }\n \n     fn read(\n@@ -141,21 +135,48 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n         // Remove the file handle to avoid borrowing issues\n-        if let Some(mut handle) = this.machine.file_handler.handles.remove(&fd) {\n-            let bytes = handle\n-                .file\n-                .read(this.memory_mut().get_mut(buf.alloc_id)?.get_bytes_mut(\n-                    tcx,\n-                    buf,\n-                    Size::from_bytes(count),\n-                )?)\n-                .map(|bytes| bytes as i64);\n-            // Reinsert the file handle\n-            this.machine.file_handler.handles.insert(fd, handle);\n-            this.consume_result::<i64>(bytes, -1)\n+        this.remove_handle_and(\n+            fd,\n+            |mut handle, this| {\n+                let bytes = handle\n+                    .file\n+                    .read(this.memory_mut().get_mut(buf.alloc_id)?.get_bytes_mut(\n+                        tcx,\n+                        buf,\n+                        Size::from_bytes(count),\n+                    )?)\n+                    .map(|bytes| bytes as i64);\n+                // Reinsert the file handle\n+                this.machine.file_handler.handles.insert(fd, handle);\n+                this.consume_result::<i64>(bytes, -1)\n+            },\n+            -1,\n+        )\n+    }\n+\n+    fn get_handle_and<F, T>(&mut self, fd: i32, f: F, t: T) -> InterpResult<'tcx, T>\n+    where\n+        F: Fn(&FileHandle) -> InterpResult<'tcx, T>,\n+    {\n+        let this = self.eval_context_mut();\n+        if let Some(handle) = this.machine.file_handler.handles.get(&fd) {\n+            f(handle)\n+        } else {\n+            this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n+            Ok(t)\n+        }\n+    }\n+\n+    fn remove_handle_and<F, T>(&mut self, fd: i32, mut f: F, t: T) -> InterpResult<'tcx, T>\n+    where\n+        F: FnMut(FileHandle, &mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx, T>,\n+    {\n+        let this = self.eval_context_mut();\n+        if let Some(handle) = this.machine.file_handler.handles.remove(&fd) {\n+            f(handle, this)\n         } else {\n             this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n-            Ok(-1)\n+            Ok(t)\n         }\n     }\n "}]}