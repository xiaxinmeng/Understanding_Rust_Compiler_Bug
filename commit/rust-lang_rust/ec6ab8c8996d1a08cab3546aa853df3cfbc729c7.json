{"sha": "ec6ab8c8996d1a08cab3546aa853df3cfbc729c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNmFiOGM4OTk2ZDFhMDhjYWIzNTQ2YWE4NTNkZjNjZmJjNzI5Yzc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-26T09:10:18Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-26T09:10:18Z"}, "message": "Remove occurrences of `oldvisit` text to improve grepping for old oldvisit.", "tree": {"sha": "136a82ca8a38f854ec8feb2064ac13dcd57963ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/136a82ca8a38f854ec8feb2064ac13dcd57963ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7", "html_url": "https://github.com/rust-lang/rust/commit/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebfbbe294e87f08516ab060633f6af028943ead0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfbbe294e87f08516ab060633f6af028943ead0", "html_url": "https://github.com/rust-lang/rust/commit/ebfbbe294e87f08516ab060633f6af028943ead0"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "5a2e3a4b760f742ade80c897364e37ad8c2dd39c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6ab8c8996d1a08cab3546aa853df3cfbc729c7/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=ec6ab8c8996d1a08cab3546aa853df3cfbc729c7", "patch": "@@ -56,7 +56,7 @@ use syntax::visit::Visitor;\n  * lint attributes.\n  *\n  * At each node of the ast which can modify lint attributes, all known lint\n- * passes are also applied.  Each lint pass is an oldvisit::vt<()> structure.\n+ * passes are also applied.  Each lint pass is a visit::Visitor implementator.\n  * The visitors are constructed via the lint_*() functions below. There are\n  * also some lint checks which operate directly on ast nodes (such as\n  * @ast::item), and those are organized as check_item_*(). Each visitor added\n@@ -508,7 +508,7 @@ impl Context {\n         }\n     }\n \n-    fn add_oldvisit_lint(&mut self, v: @mut OuterLint) {\n+    fn add_old_lint(&mut self, v: @mut OuterLint) {\n         self.visitors.push(OldVisitor(v, v.inner_variant()));\n     }\n \n@@ -547,7 +547,7 @@ impl Context {\n                     }\n                 }\n             }\n-            // Can't use oldvisit::visit_method_helper because the\n+            // Can't use visit::walk_method_helper because the\n             // item_stopping_visitor has overridden visit_fn(&fk_method(... ))\n             // to be a no-op, so manually invoke visit_fn.\n             Method(m) => {\n@@ -1450,14 +1450,14 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::Crate) {\n     }\n \n     // Register each of the lint passes with the context\n-    cx.add_oldvisit_lint(lint_while_true());\n-    cx.add_oldvisit_lint(lint_path_statement());\n-    cx.add_oldvisit_lint(lint_heap());\n-    cx.add_oldvisit_lint(lint_type_limits());\n-    cx.add_oldvisit_lint(lint_unused_unsafe());\n-    cx.add_oldvisit_lint(lint_unused_mut());\n-    cx.add_oldvisit_lint(lint_unnecessary_allocations());\n-    cx.add_oldvisit_lint(lint_missing_doc());\n+    cx.add_old_lint(lint_while_true());\n+    cx.add_old_lint(lint_path_statement());\n+    cx.add_old_lint(lint_heap());\n+    cx.add_old_lint(lint_type_limits());\n+    cx.add_old_lint(lint_unused_unsafe());\n+    cx.add_old_lint(lint_unused_mut());\n+    cx.add_old_lint(lint_unnecessary_allocations());\n+    cx.add_old_lint(lint_missing_doc());\n     cx.add_lint(lint_session(cx));\n \n     // Actually perform the lint checks (iterating the ast)"}]}