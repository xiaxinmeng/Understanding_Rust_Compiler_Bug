{"sha": "797cb9526a627c37b9bb9f6be6d3b54789b67c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5N2NiOTUyNmE2MjdjMzdiOWJiOWY2YmU2ZDNiNTQ3ODliNjdjMjY=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2020-09-15T14:24:07Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2020-09-15T15:47:20Z"}, "message": "Fix to libstd test", "tree": {"sha": "ec980166d7f6f11642fb49e90d5ccd9075aa2885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec980166d7f6f11642fb49e90d5ccd9075aa2885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797cb9526a627c37b9bb9f6be6d3b54789b67c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797cb9526a627c37b9bb9f6be6d3b54789b67c26", "html_url": "https://github.com/rust-lang/rust/commit/797cb9526a627c37b9bb9f6be6d3b54789b67c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797cb9526a627c37b9bb9f6be6d3b54789b67c26/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247b73939a619ea4dcb2affbe1c285d20d93a0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/247b73939a619ea4dcb2affbe1c285d20d93a0b8", "html_url": "https://github.com/rust-lang/rust/commit/247b73939a619ea4dcb2affbe1c285d20d93a0b8"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "e50bb6f670f173066683db0d8d5c0aae14be2983", "filename": "library/core/tests/num/wrapping.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/797cb9526a627c37b9bb9f6be6d3b54789b67c26/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797cb9526a627c37b9bb9f6be6d3b54789b67c26/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs?ref=797cb9526a627c37b9bb9f6be6d3b54789b67c26", "patch": "@@ -1,6 +1,4 @@\n-// run-pass\n-\n-use std::num::Wrapping;\n+use core::num::Wrapping;\n \n macro_rules! wrapping_operation {\n     ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n@@ -29,49 +27,53 @@ macro_rules! wrapping_assignment {\n \n macro_rules! wrapping_test {\n     ($type:ty, $min:expr, $max:expr) => {\n-        let zero: Wrapping<$type> = Wrapping(0);\n-        let one: Wrapping<$type> = Wrapping(1);\n-        let min: Wrapping<$type> = Wrapping($min);\n-        let max: Wrapping<$type> = Wrapping($max);\n+        #[test]\n+        fn wrapping_$type() {\n+            let zero: Wrapping<$type> = Wrapping(0);\n+            let one: Wrapping<$type> = Wrapping(1);\n+            let min: Wrapping<$type> = Wrapping($min);\n+            let max: Wrapping<$type> = Wrapping($max);\n \n-        wrapping_operation!(min, max + one);\n-        wrapping_assignment!(min, max += one);\n-        wrapping_operation!(max, min - one);\n-        wrapping_assignment!(max, min -= one);\n-        wrapping_operation!(max, max * one);\n-        wrapping_assignment!(max, max *= one);\n-        wrapping_operation!(max, max / one);\n-        wrapping_assignment!(max, max /= one);\n-        wrapping_operation!(zero, max % one);\n-        wrapping_assignment!(zero, max %= one);\n-        wrapping_operation!(zero, zero & max);\n-        wrapping_assignment!(zero, zero &= max);\n-        wrapping_operation!(max, zero | max);\n-        wrapping_assignment!(max, zero |= max);\n-        wrapping_operation!(zero, max ^ max);\n-        wrapping_assignment!(zero, max ^= max);\n-        wrapping_operation!(zero, zero << 1usize);\n-        wrapping_assignment!(zero, zero <<= 1usize);\n-        wrapping_operation!(zero, zero >> 1usize);\n-        wrapping_assignment!(zero, zero >>= 1usize);\n-        wrapping_operation!(zero, -zero);\n-        wrapping_operation!(max, !min);\n+            wrapping_operation!(min, max + one);\n+            wrapping_assignment!(min, max += one);\n+            wrapping_operation!(max, min - one);\n+            wrapping_assignment!(max, min -= one);\n+            wrapping_operation!(max, max * one);\n+            wrapping_assignment!(max, max *= one);\n+            wrapping_operation!(max, max / one);\n+            wrapping_assignment!(max, max /= one);\n+            wrapping_operation!(zero, max % one);\n+            wrapping_assignment!(zero, max %= one);\n+            wrapping_operation!(zero, zero & max);\n+            wrapping_assignment!(zero, zero &= max);\n+            wrapping_operation!(max, zero | max);\n+            wrapping_assignment!(max, zero |= max);\n+            wrapping_operation!(zero, max ^ max);\n+            wrapping_assignment!(zero, max ^= max);\n+            wrapping_operation!(zero, zero << 1usize);\n+            wrapping_assignment!(zero, zero <<= 1usize);\n+            wrapping_operation!(zero, zero >> 1usize);\n+            wrapping_assignment!(zero, zero >>= 1usize);\n+            wrapping_operation!(zero, -zero);\n+            wrapping_operation!(max, !min);\n+        }\n     };\n }\n \n-fn main() {\n-    wrapping_test!(i8, std::i8::MIN, std::i8::MAX);\n-    wrapping_test!(i16, std::i16::MIN, std::i16::MAX);\n-    wrapping_test!(i32, std::i32::MIN, std::i32::MAX);\n-    wrapping_test!(i64, std::i64::MIN, std::i64::MAX);\n+#[cfg(tests)]\n+mod tests {\n+    wrapping_test!(i8, i8::MIN, i8::MAX);\n+    wrapping_test!(i16, i16::MIN, i16::MAX);\n+    wrapping_test!(i32, i32::MIN, i32::MAX);\n+    wrapping_test!(i64, i64::MIN, i64::MAX);\n     #[cfg(not(target_os = \"emscripten\"))]\n-    wrapping_test!(i128, std::i128::MIN, std::i128::MAX);\n-    wrapping_test!(isize, std::isize::MIN, std::isize::MAX);\n-    wrapping_test!(u8, std::u8::MIN, std::u8::MAX);\n-    wrapping_test!(u16, std::u16::MIN, std::u16::MAX);\n-    wrapping_test!(u32, std::u32::MIN, std::u32::MAX);\n-    wrapping_test!(u64, std::u64::MIN, std::u64::MAX);\n+    wrapping_test!(i128, i128::MIN, i128::MAX);\n+    wrapping_test!(isize, isize::MIN, isize::MAX);\n+    wrapping_test!(u8, u8::MIN, u8::MAX);\n+    wrapping_test!(u16, u16::MIN, u16::MAX);\n+    wrapping_test!(u32, u32::MIN, u32::MAX);\n+    wrapping_test!(u64, u64::MIN, u64::MAX);\n     #[cfg(not(target_os = \"emscripten\"))]\n-    wrapping_test!(u128, std::u128::MIN, std::u128::MAX);\n-    wrapping_test!(usize, std::usize::MIN, std::usize::MAX);\n+    wrapping_test!(u128, u128::MIN, u128::MAX);\n+    wrapping_test!(usize, usize::MIN, usize::MAX);\n }"}]}