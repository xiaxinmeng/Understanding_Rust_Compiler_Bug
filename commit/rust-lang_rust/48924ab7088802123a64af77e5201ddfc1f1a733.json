{"sha": "48924ab7088802123a64af77e5201ddfc1f1a733", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTI0YWI3MDg4ODAyMTIzYTY0YWY3N2U1MjAxZGRmYzFmMWE3MzM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-02T12:29:45Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rust to use Tarball", "tree": {"sha": "bec94df0a2cc92d64bea590f36e7e69ef9bd4e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec94df0a2cc92d64bea590f36e7e69ef9bd4e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48924ab7088802123a64af77e5201ddfc1f1a733", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjgEACgkQPgar6Auq\n8ZzpWxAAvB8fJn44Dz4IwNi9iRwyiNHNor/v7oV+afNraE7D87br46Gnwxe0h86t\nvLgjd1cPZ0OxHVkehOqZiofIxjZhE4pem3/qlZawkvD06tcj/bgjjVacU9uFFplk\nCqNf4i0wZDy4VRmglCgFrqhsFqgZAHCDK7t2utVDyvA/Ry1linE9I5pdvB+qaGs4\nx1w7OpfXy/6UU8MsejJuxwRyaf/oKN7NA2udP4jHVtDpAI0u/hEUaZgvau9txJEi\nRt3yrfGjka85gkWrvYc2gKGsW5CjAtNW6nJFzKwOy+MIdFDBhwW7rBh/VRXiF6/d\nf6Wa4HSWBsKNVWNn6ypcplNJWMS8M0CoQUQL0gJpRsHpaHFcVmp308EHqpNgOvsF\nMJ08hindSK/5cExh2bIFUvDWQoDftR/s1Zr61p3WoC5wgtuQJOHm8PQjuMVhuU9m\nY3IbSViooXpit3eiM4HuXzhl0J3OWFidus5CmqsREAqCiogSqlnbdlZP/EidfnXU\nwfW9mDi/Qt42MikIHuNrLnBtqYHuhgXsL9xlZ/87Jce6H2uELE+db+49XjuLcZo/\nvKCOM76FVKkaqQY0vXSGVT4xU8YCUpLNljZKsscSHqOvH+MvpYbiJapzmImjsyR1\nMSJx6h4uIPnw2mILwCIQ4ycM6NPcuYxx3wsNHGx4N2DUf8qdPOo=\n=W3ck\n-----END PGP SIGNATURE-----", "payload": "tree bec94df0a2cc92d64bea590f36e7e69ef9bd4e56\nparent 1906c42962b1f2bef084474e09b211e48ed2bda7\nauthor Pietro Albini <pietro@pietroalbini.org> 1606912185 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rust to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48924ab7088802123a64af77e5201ddfc1f1a733", "html_url": "https://github.com/rust-lang/rust/commit/48924ab7088802123a64af77e5201ddfc1f1a733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48924ab7088802123a64af77e5201ddfc1f1a733/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1906c42962b1f2bef084474e09b211e48ed2bda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1906c42962b1f2bef084474e09b211e48ed2bda7", "html_url": "https://github.com/rust-lang/rust/commit/1906c42962b1f2bef084474e09b211e48ed2bda7"}], "stats": {"total": 128, "additions": 65, "deletions": 63}, "files": [{"sha": "a68f139881744cfe9e0e995087342dd02ef99b6c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/48924ab7088802123a64af77e5201ddfc1f1a733/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48924ab7088802123a64af77e5201ddfc1f1a733/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=48924ab7088802123a64af77e5201ddfc1f1a733", "patch": "@@ -1314,21 +1314,7 @@ impl Step for Extended {\n         let std_installer =\n             builder.ensure(Std { compiler: builder.compiler(stage, target), target });\n \n-        let tmp = tmpdir(builder);\n-        let overlay = tmp.join(\"extended-overlay\");\n         let etc = builder.src.join(\"src/etc/installer\");\n-        let work = tmp.join(\"work\");\n-\n-        let _ = fs::remove_dir_all(&overlay);\n-        builder.install(&builder.src.join(\"COPYRIGHT\"), &overlay, 0o644);\n-        builder.install(&builder.src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n-        builder.install(&builder.src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n-        let version = builder.rust_version();\n-        builder.create(&overlay.join(\"version\"), &version);\n-        if let Some(sha) = builder.rust_sha() {\n-            builder.create(&overlay.join(\"git-commit-hash\"), &sha);\n-        }\n-        builder.install(&etc.join(\"README.md\"), &overlay, 0o644);\n \n         // When rust-std package split from rustc, we needed to ensure that during\n         // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n@@ -1353,31 +1339,12 @@ impl Step for Extended {\n         if target.contains(\"pc-windows-gnu\") {\n             tarballs.push(mingw_installer.unwrap());\n         }\n-        let mut input_tarballs = tarballs[0].as_os_str().to_owned();\n-        for tarball in &tarballs[1..] {\n-            input_tarballs.push(\",\");\n-            input_tarballs.push(tarball);\n-        }\n \n-        builder.info(\"building combined installer\");\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"combine\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-            .arg(\"--work-dir\")\n-            .arg(&work)\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", pkgname(builder, \"rust\"), target.triple))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(\"--input-tarballs\")\n-            .arg(input_tarballs)\n-            .arg(\"--non-installed-overlay\")\n-            .arg(&overlay);\n-        let time = timeit(&builder);\n-        builder.run(&mut cmd);\n-        drop(time);\n+        let mut tarball = Tarball::new(builder, \"rust\", &target.triple);\n+        let work = tarball.persist_work_dir();\n+        tarball.combine(&tarballs);\n+\n+        let tmp = tmpdir(builder).join(\"combined-tarball\");\n \n         let mut license = String::new();\n         license += &builder.read(&builder.src.join(\"COPYRIGHT\"));"}, {"sha": "b4146450596d56eb88ccb43d574ad3bdf7bb3587", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 60, "deletions": 25, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/48924ab7088802123a64af77e5201ddfc1f1a733/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48924ab7088802123a64af77e5201ddfc1f1a733/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=48924ab7088802123a64af77e5201ddfc1f1a733", "patch": "@@ -1,4 +1,7 @@\n-use std::path::{Path, PathBuf};\n+use std::{\n+    path::{Path, PathBuf},\n+    process::Command,\n+};\n \n use build_helper::t;\n \n@@ -95,6 +98,7 @@ pub(crate) struct Tarball<'a> {\n \n     include_target_in_component_name: bool,\n     is_preview: bool,\n+    delete_temp_dir: bool,\n }\n \n impl<'a> Tarball<'a> {\n@@ -132,6 +136,7 @@ impl<'a> Tarball<'a> {\n \n             include_target_in_component_name: false,\n             is_preview: false,\n+            delete_temp_dir: true,\n         }\n     }\n \n@@ -193,7 +198,53 @@ impl<'a> Tarball<'a> {\n         self.builder.cp_r(src.as_ref(), &dest);\n     }\n \n+    pub(crate) fn persist_work_dir(&mut self) -> PathBuf {\n+        self.delete_temp_dir = false;\n+        self.work_dir.clone()\n+    }\n+\n     pub(crate) fn generate(self) -> PathBuf {\n+        let mut component_name = self.component.clone();\n+        if self.is_preview {\n+            component_name.push_str(\"-preview\");\n+        }\n+        if self.include_target_in_component_name {\n+            component_name.push('-');\n+            component_name.push_str(\n+                &self\n+                    .target\n+                    .as_ref()\n+                    .expect(\"include_target_in_component_name used in a targetless tarball\"),\n+            );\n+        }\n+\n+        self.run(|this, cmd| {\n+            cmd.arg(\"generate\")\n+                .arg(\"--image-dir\")\n+                .arg(&this.image_dir)\n+                .arg(\"--non-installed-overlay\")\n+                .arg(&this.overlay_dir)\n+                .arg(format!(\"--component-name={}\", &component_name));\n+        })\n+    }\n+\n+    pub(crate) fn combine(self, tarballs: &[PathBuf]) {\n+        let mut input_tarballs = tarballs[0].as_os_str().to_os_string();\n+        for tarball in &tarballs[1..] {\n+            input_tarballs.push(\",\");\n+            input_tarballs.push(tarball);\n+        }\n+\n+        self.run(|this, cmd| {\n+            cmd.arg(\"combine\")\n+                .arg(\"--input-tarballs\")\n+                .arg(input_tarballs)\n+                .arg(\"--non-installed-overlay\")\n+                .arg(&this.overlay_dir);\n+        });\n+    }\n+\n+    fn run(self, build_cli: impl FnOnce(&Tarball<'a>, &mut Command)) -> PathBuf {\n         t!(std::fs::create_dir_all(&self.overlay_dir));\n         self.builder.create(&self.overlay_dir.join(\"version\"), &self.overlay.version(self.builder));\n         if let Some(sha) = self.builder.rust_sha() {\n@@ -215,37 +266,21 @@ impl<'a> Tarball<'a> {\n \n         let _time = crate::util::timeit(self.builder);\n \n-        let mut component_name = self.component.clone();\n-        if self.is_preview {\n-            component_name.push_str(\"-preview\");\n-        }\n-        if self.include_target_in_component_name {\n-            component_name.push('-');\n-            component_name.push_str(\n-                &self\n-                    .target\n-                    .expect(\"include_target_in_component_name used in a targetless tarball\"),\n-            );\n-        }\n-\n         let distdir = crate::dist::distdir(self.builder);\n-        cmd.arg(\"generate\")\n+        build_cli(&self, &mut cmd);\n+        cmd.arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(format!(\"--product-name={}\", self.product_name))\n-            .arg(\"--rel-manifest-dir=rustlib\")\n             .arg(format!(\"--success-message={} installed.\", self.component))\n-            .arg(\"--image-dir\")\n-            .arg(self.image_dir)\n+            .arg(format!(\"--package-name={}\", package_name))\n             .arg(\"--work-dir\")\n             .arg(self.work_dir)\n             .arg(\"--output-dir\")\n-            .arg(&distdir)\n-            .arg(\"--non-installed-overlay\")\n-            .arg(self.overlay_dir)\n-            .arg(format!(\"--package-name={}\", package_name))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(format!(\"--component-name={}\", component_name));\n+            .arg(&distdir);\n         self.builder.run(&mut cmd);\n-        t!(std::fs::remove_dir_all(&self.temp_dir));\n+        if self.delete_temp_dir {\n+            t!(std::fs::remove_dir_all(&self.temp_dir));\n+        }\n \n         distdir.join(format!(\"{}.tar.gz\", package_name))\n     }"}]}