{"sha": "38b72154ded23847cd08a796d0c6708b5efac265", "node_id": "C_kwDOAAsO6NoAKDM4YjcyMTU0ZGVkMjM4NDdjZDA4YTc5NmQwYzY3MDhiNWVmYWMyNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T17:09:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T17:09:37Z"}, "message": "Auto merge of #98637 - cjgillot:bare-trait-anon-lt, r=petrochenkov\n\nCreate fresh lifetime parameters for bare fn trait too\n\nThe current code fails to account for the equivalence between `dyn FnMut(&mut u8)` and bare `FnMut(&mut u8)`, and treated them differently.\n\nThis PR introduces a special case for `Fn` traits, which are always fully resolved.\n\nFixes #98616\nFixes #98726\nThis will require a beta-backport, as beta contains that bug.\n\nr? `@petrochenkov`", "tree": {"sha": "6250bc421ddfbb5a6e85c2e4bdb5a4cb28b24b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6250bc421ddfbb5a6e85c2e4bdb5a4cb28b24b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38b72154ded23847cd08a796d0c6708b5efac265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38b72154ded23847cd08a796d0c6708b5efac265", "html_url": "https://github.com/rust-lang/rust/commit/38b72154ded23847cd08a796d0c6708b5efac265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38b72154ded23847cd08a796d0c6708b5efac265/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb32dc924653e35950f17c8d91793c9ca983d03", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb32dc924653e35950f17c8d91793c9ca983d03", "html_url": "https://github.com/rust-lang/rust/commit/9fb32dc924653e35950f17c8d91793c9ca983d03"}, {"sha": "21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "html_url": "https://github.com/rust-lang/rust/commit/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "fdf60e60914a4c5656c4c062ef3faa43b15f458d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38b72154ded23847cd08a796d0c6708b5efac265/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b72154ded23847cd08a796d0c6708b5efac265/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=38b72154ded23847cd08a796d0c6708b5efac265", "patch": "@@ -1159,6 +1159,33 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n     ) -> hir::Ty<'hir> {\n+        // Check whether we should interpret this as a bare trait object.\n+        // This check mirrors the one in late resolution.  We only introduce this special case in\n+        // the rare occurence we need to lower `Fresh` anonymous lifetimes.\n+        // The other cases when a qpath should be opportunistically made a trait object are handled\n+        // by `ty_path`.\n+        if qself.is_none()\n+            && let Some(partial_res) = self.resolver.get_partial_res(t.id)\n+            && partial_res.unresolved_segments() == 0\n+            && let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = partial_res.base_res()\n+        {\n+            let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n+                let bound = this.lower_poly_trait_ref(\n+                    &PolyTraitRef {\n+                        bound_generic_params: vec![],\n+                        trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n+                        span: t.span\n+                    },\n+                    itctx,\n+                );\n+                let bounds = this.arena.alloc_from_iter([bound]);\n+                let lifetime_bound = this.elided_dyn_bound(t.span);\n+                (bounds, lifetime_bound)\n+            });\n+            let kind = hir::TyKind::TraitObject(bounds, lifetime_bound, TraitObjectSyntax::None);\n+            return hir::Ty { kind, span: self.lower_span(t.span), hir_id: self.next_id() };\n+        }\n+\n         let id = self.lower_node_id(t.id);\n         let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx);\n         self.ty_path(id, t.span, qpath)"}, {"sha": "098b5a0c92e9b689cc2154fb8d0b439d77db1913", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38b72154ded23847cd08a796d0c6708b5efac265/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b72154ded23847cd08a796d0c6708b5efac265/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=38b72154ded23847cd08a796d0c6708b5efac265", "patch": "@@ -611,6 +611,30 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             TyKind::Path(ref qself, ref path) => {\n                 self.diagnostic_metadata.current_type_path = Some(ty);\n                 self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n+\n+                // Check whether we should interpret this as a bare trait object.\n+                if qself.is_none()\n+                    && let Some(partial_res) = self.r.partial_res_map.get(&ty.id)\n+                    && partial_res.unresolved_segments() == 0\n+                    && let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = partial_res.base_res()\n+                {\n+                    // This path is actually a bare trait object.  In case of a bare `Fn`-trait\n+                    // object with anonymous lifetimes, we need this rib to correctly place the\n+                    // synthetic lifetimes.\n+                    let span = ty.span.shrink_to_lo().to(path.span.shrink_to_lo());\n+                    self.with_generic_param_rib(\n+                        &[],\n+                        NormalRibKind,\n+                        LifetimeRibKind::Generics {\n+                            binder: ty.id,\n+                            kind: LifetimeBinderKind::PolyTrait,\n+                            span,\n+                        },\n+                        |this| this.visit_path(&path, ty.id),\n+                    );\n+                    self.diagnostic_metadata.current_type_path = prev_ty;\n+                    return;\n+                }\n             }\n             TyKind::ImplicitSelf => {\n                 let self_ty = Ident::with_dummy_span(kw::SelfUpper);"}, {"sha": "45f5e4ae129a12c77252f1078ac834ad17c84641", "filename": "src/test/ui/lifetimes/bare-trait-object-borrowck.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38b72154ded23847cd08a796d0c6708b5efac265/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b72154ded23847cd08a796d0c6708b5efac265/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs?ref=38b72154ded23847cd08a796d0c6708b5efac265", "patch": "@@ -0,0 +1,24 @@\n+#![allow(bare_trait_objects)]\n+// check-pass\n+pub struct FormatWith<'a, I, F> {\n+    sep: &'a str,\n+    /// FormatWith uses interior mutability because Display::fmt takes &self.\n+    inner: RefCell<Option<(I, F)>>,\n+}\n+\n+use std::cell::RefCell;\n+use std::fmt;\n+\n+struct Layout;\n+\n+pub fn new_format<'a, I, F>(iter: I, separator: &'a str, f: F) -> FormatWith<'a, I, F>\n+where\n+    I: Iterator,\n+    F: FnMut(I::Item, &mut FnMut(&fmt::Display) -> fmt::Result) -> fmt::Result,\n+{\n+    FormatWith { sep: separator, inner: RefCell::new(Some((iter, f))) }\n+}\n+\n+fn main() {\n+    let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n+}"}, {"sha": "9eff618c734d519fccab4707f9a724c66b3f2e09", "filename": "src/test/ui/lifetimes/bare-trait-object.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/38b72154ded23847cd08a796d0c6708b5efac265/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b72154ded23847cd08a796d0c6708b5efac265/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs?ref=38b72154ded23847cd08a796d0c6708b5efac265", "patch": "@@ -0,0 +1,25 @@\n+// Verify that lifetime resolution correctly accounts for `Fn` bare trait objects.\n+// check-pass\n+#![allow(bare_trait_objects)]\n+\n+// This should work as: fn next_u32(fill_buf: &mut dyn FnMut(&mut [u8]))\n+fn next_u32(fill_buf: &mut FnMut(&mut [u8])) {\n+    let mut buf: [u8; 4] = [0; 4];\n+    fill_buf(&mut buf);\n+}\n+\n+fn explicit(fill_buf: &mut dyn FnMut(&mut [u8])) {\n+    let mut buf: [u8; 4] = [0; 4];\n+    fill_buf(&mut buf);\n+}\n+\n+fn main() {\n+    let _: fn(&mut FnMut(&mut [u8])) = next_u32;\n+    let _: &dyn Fn(&mut FnMut(&mut [u8])) = &next_u32;\n+    let _: fn(&mut FnMut(&mut [u8])) = explicit;\n+    let _: &dyn Fn(&mut FnMut(&mut [u8])) = &explicit;\n+    let _: fn(&mut dyn FnMut(&mut [u8])) = next_u32;\n+    let _: &dyn Fn(&mut dyn FnMut(&mut [u8])) = &next_u32;\n+    let _: fn(&mut dyn FnMut(&mut [u8])) = explicit;\n+    let _: &dyn Fn(&mut dyn FnMut(&mut [u8])) = &explicit;\n+}"}]}