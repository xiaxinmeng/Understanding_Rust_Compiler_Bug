{"sha": "7bba5c163c3530d3eeab03128bd1c72d331a16df", "node_id": "C_kwDOAAsO6NoAKDdiYmE1YzE2M2MzNTMwZDNlZWFiMDMxMjhiZDFjNzJkMzMxYTE2ZGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T16:35:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T16:35:23Z"}, "message": "Rollup merge of #89734 - estebank:issue-72312, r=nikomatsakis\n\nPoint at capture points for non-`'static` reference crossing a `yield` point\n\n```\nerror[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n  --> $DIR/issue-72312.rs:10:24\n   |\nLL |     pub async fn start(&self) {\n   |                        ^^^^^ this data with an anonymous lifetime `'_`...\n...\nLL |         require_static(async move {\n   |         -------------- ...is required to live as long as `'static` here...\nLL |             &self;\n   |             ----- ...and is captured here\n   |\nnote: `'static` lifetime requirement introduced by this trait bound\n  --> $DIR/issue-72312.rs:2:22\n   |\nLL | fn require_static<T: 'static>(val: T) -> T {\n   |                      ^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0759`.\n```\n\nFix #72312.", "tree": {"sha": "d034c2d3ce35992fd3c49b376340f3ad1390046c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d034c2d3ce35992fd3c49b376340f3ad1390046c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bba5c163c3530d3eeab03128bd1c72d331a16df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtNNMCRBK7hj4Ov3rIwAA3HQIABJRy0i0vMhSpphZoCRJYx2O\nInaKvU3Q3612ygBGyUQWVx1FDVZBf7QQWGPB1neBpV+rq0PENAQeC2h1OK0Hw5+4\nra4GbLatIvHBwOfOsmO31vAvDxUZcx7Sxo+8Cvp5tFWQFa7tC77tHKp2XBmOKA0f\nbGCjmlPjacbX0JvaAdobsoF4jKhdJS5FgEl3HT5BpxNYtTgL9PXOVWMti1VmP6YF\n9XRP04vScVQL8U8s3C+qa65e+Nbx0lGv7afR2xF3vGanPBiA0xd1bjXh2PvOaMj6\nrYSdu1NdQ/+JsP9yDQlNobhN5MPbDlE0kMSNxvkwhKvst2QK9gEmA/YjCGV1adE=\n=pdK2\n-----END PGP SIGNATURE-----\n", "payload": "tree d034c2d3ce35992fd3c49b376340f3ad1390046c\nparent 433a13b47347849dbc8c5d5300b98b95be7fb2c9\nparent d2d9eb3715e61d16eafb55b4b8cb03fdc6bfc871\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639240523 +0100\ncommitter GitHub <noreply@github.com> 1639240523 +0100\n\nRollup merge of #89734 - estebank:issue-72312, r=nikomatsakis\n\nPoint at capture points for non-`'static` reference crossing a `yield` point\n\n```\nerror[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n  --> $DIR/issue-72312.rs:10:24\n   |\nLL |     pub async fn start(&self) {\n   |                        ^^^^^ this data with an anonymous lifetime `'_`...\n...\nLL |         require_static(async move {\n   |         -------------- ...is required to live as long as `'static` here...\nLL |             &self;\n   |             ----- ...and is captured here\n   |\nnote: `'static` lifetime requirement introduced by this trait bound\n  --> $DIR/issue-72312.rs:2:22\n   |\nLL | fn require_static<T: 'static>(val: T) -> T {\n   |                      ^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0759`.\n```\n\nFix #72312.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bba5c163c3530d3eeab03128bd1c72d331a16df", "html_url": "https://github.com/rust-lang/rust/commit/7bba5c163c3530d3eeab03128bd1c72d331a16df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bba5c163c3530d3eeab03128bd1c72d331a16df/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433a13b47347849dbc8c5d5300b98b95be7fb2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/433a13b47347849dbc8c5d5300b98b95be7fb2c9", "html_url": "https://github.com/rust-lang/rust/commit/433a13b47347849dbc8c5d5300b98b95be7fb2c9"}, {"sha": "d2d9eb3715e61d16eafb55b4b8cb03fdc6bfc871", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d9eb3715e61d16eafb55b4b8cb03fdc6bfc871", "html_url": "https://github.com/rust-lang/rust/commit/d2d9eb3715e61d16eafb55b4b8cb03fdc6bfc871"}], "stats": {"total": 599, "additions": 466, "deletions": 133}, "files": [{"sha": "881ebed602946183340e4f233db6960bb1d1f7c3", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -368,6 +368,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n                 error_region,\n                 cause.clone(),\n                 placeholder_region,\n+                vec![],\n             ),\n         ),\n         (Some(error_region), _) => NiceRegionError::new("}, {"sha": "c3f2213229a010bfcda0c02782e3657e3de24313", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -384,6 +384,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         sub_r,\n                         sup_origin,\n                         sup_r,\n+                        _,\n                     ) => {\n                         if sub_r.is_placeholder() {\n                             self.report_placeholder_failure(sub_origin, sub_r, sup_r).emit();\n@@ -464,7 +465,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         errors.sort_by_key(|u| match *u {\n             RegionResolutionError::ConcreteFailure(ref sro, _, _) => sro.span(),\n             RegionResolutionError::GenericBoundFailure(ref sro, _, _) => sro.span(),\n-            RegionResolutionError::SubSupConflict(_, ref rvo, _, _, _, _) => rvo.span(),\n+            RegionResolutionError::SubSupConflict(_, ref rvo, _, _, _, _, _) => rvo.span(),\n             RegionResolutionError::UpperBoundUniverseConflict(_, ref rvo, _, _, _) => rvo.span(),\n         });\n         errors"}, {"sha": "fd295b743420ca799acf2e12dc03e5ffb57ea79b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -67,7 +67,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n     pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => Some((origin.span(), sub, sup)),\n-            (Some(SubSupConflict(_, _, origin, sub, _, sup)), None) => {\n+            (Some(SubSupConflict(_, _, origin, sub, _, sup, _)), None) => {\n                 Some((origin.span(), sub, sup))\n             }\n             (None, Some((span, sub, sup))) => Some((span, sub, sup)),"}, {"sha": "1a4a28038218941a4cf85351e5d62c95ff161dd6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -34,6 +34,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -49,6 +50,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 _,\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -64,6 +66,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 _,\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n@@ -79,6 +82,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 _,\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n+                _,\n             )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,"}, {"sha": "80d4a2e57da4a7e6a8e249c289d3d770c7207d97", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 93, "deletions": 46, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -10,7 +10,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n-    self, AssocItemContainer, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    self, AssocItemContainer, RegionKind, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable,\n+    TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{MultiSpan, Span};\n@@ -23,16 +24,17 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     pub(super) fn try_report_static_impl_trait(&self) -> Option<ErrorReported> {\n         debug!(\"try_report_static_impl_trait(error={:?})\", self.error);\n         let tcx = self.tcx();\n-        let (var_origin, sub_origin, sub_r, sup_origin, sup_r) = match self.error.as_ref()? {\n+        let (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans) = match self.error.as_ref()? {\n             RegionResolutionError::SubSupConflict(\n                 _,\n                 var_origin,\n                 sub_origin,\n                 sub_r,\n                 sup_origin,\n                 sup_r,\n+                spans,\n             ) if **sub_r == RegionKind::ReStatic => {\n-                (var_origin, sub_origin, sub_r, sup_origin, sup_r)\n+                (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans)\n             }\n             RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(box TypeTrace { cause, .. }),\n@@ -74,7 +76,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     err.span_label(\n                         cause.span,\n                         &format!(\n-                            \"...is captured and required to live as long as `'static` here \\\n+                            \"...is used and required to live as long as `'static` here \\\n                              because of an implicit lifetime bound on the {}\",\n                             match ctxt.assoc_item.container {\n                                 AssocItemContainer::TraitContainer(id) =>\n@@ -123,56 +125,101 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             param_name,\n             lifetime,\n         );\n-        err.span_label(param.param_ty_span, &format!(\"this data with {}...\", lifetime));\n-        debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n \n-        // We try to make the output have fewer overlapping spans if possible.\n-        if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n-            && sup_origin.span() != return_sp\n-        {\n-            // FIXME: account for `async fn` like in `async-await/issues/issue-62097.rs`\n-\n-            // Customize the spans and labels depending on their relative order so\n-            // that split sentences flow correctly.\n-            if sup_origin.span().overlaps(return_sp) && sp == sup_origin.span() {\n-                // Avoid the following:\n-                //\n-                // error: cannot infer an appropriate lifetime\n-                //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n-                //    |\n-                // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-                //    |           ----                      ---------^-\n+        let (mention_influencer, influencer_point) =\n+            if sup_origin.span().overlaps(param.param_ty_span) {\n+                // Account for `async fn` like in `async-await/issues/issue-62097.rs`.\n+                // The desugaring of `async `fn`s causes `sup_origin` and `param` to point at the same\n+                // place (but with different `ctxt`, hence `overlaps` instead of `==` above).\n                 //\n-                // and instead show:\n+                // This avoids the following:\n                 //\n-                // error: cannot infer an appropriate lifetime\n-                //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n-                //    |\n-                // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-                //    |           ----                               ^\n-                err.span_label(\n-                    sup_origin.span(),\n-                    \"...is captured here, requiring it to live as long as `'static`\",\n-                );\n+                // LL |     pub async fn run_dummy_fn(&self) {\n+                //    |                               ^^^^^\n+                //    |                               |\n+                //    |                               this data with an anonymous lifetime `'_`...\n+                //    |                               ...is captured here...\n+                (false, sup_origin.span())\n             } else {\n-                err.span_label(sup_origin.span(), \"...is captured here...\");\n-                if return_sp < sup_origin.span() {\n-                    err.span_note(\n-                        return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n+                (!sup_origin.span().overlaps(return_sp), param.param_ty_span)\n+            };\n+        err.span_label(influencer_point, &format!(\"this data with {}...\", lifetime));\n+\n+        debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n+\n+        let mut spans = spans.clone();\n+\n+        if mention_influencer {\n+            spans.push(sup_origin.span());\n+        }\n+        // We dedup the spans *ignoring* expansion context.\n+        spans.sort();\n+        spans.dedup_by_key(|span| (span.lo(), span.hi()));\n+\n+        // We try to make the output have fewer overlapping spans if possible.\n+        let require_msg = if spans.is_empty() {\n+            \"...is used and required to live as long as `'static` here\"\n+        } else {\n+            \"...and is required to live as long as `'static` here\"\n+        };\n+        let require_span =\n+            if sup_origin.span().overlaps(return_sp) { sup_origin.span() } else { return_sp };\n+\n+        for span in &spans {\n+            err.span_label(*span, \"...is used here...\");\n+        }\n+\n+        if spans.iter().any(|sp| sp.overlaps(return_sp) || *sp > return_sp) {\n+            // If any of the \"captured here\" labels appears on the same line or after\n+            // `require_span`, we put it on a note to ensure the text flows by appearing\n+            // always at the end.\n+            err.span_note(require_span, require_msg);\n+        } else {\n+            // We don't need a note, it's already at the end, it can be shown as a `span_label`.\n+            err.span_label(require_span, require_msg);\n+        }\n+\n+        if let SubregionOrigin::RelateParamBound(_, _, Some(bound)) = sub_origin {\n+            err.span_note(*bound, \"`'static` lifetime requirement introduced by this bound\");\n+        }\n+        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = sub_origin {\n+            if let ObligationCauseCode::ReturnValue(hir_id)\n+            | ObligationCauseCode::BlockTailExpression(hir_id) = &cause.code\n+            {\n+                let parent_id = tcx.hir().get_parent_item(*hir_id);\n+                if let Some(fn_decl) = tcx.hir().fn_decl_by_hir_id(parent_id) {\n+                    let mut span: MultiSpan = fn_decl.output.span().into();\n+                    let mut add_label = true;\n+                    if let hir::FnRetTy::Return(ty) = fn_decl.output {\n+                        let mut v = StaticLifetimeVisitor(vec![], tcx.hir());\n+                        v.visit_ty(ty);\n+                        if !v.0.is_empty() {\n+                            span = v.0.clone().into();\n+                            for sp in v.0 {\n+                                span.push_span_label(\n+                                    sp,\n+                                    \"`'static` requirement introduced here\".to_string(),\n+                                );\n+                            }\n+                            add_label = false;\n+                        }\n+                    }\n+                    if add_label {\n+                        span.push_span_label(\n+                            fn_decl.output.span(),\n+                            \"requirement introduced by this return type\".to_string(),\n+                        );\n+                    }\n+                    span.push_span_label(\n+                        cause.span,\n+                        \"because of this returned expression\".to_string(),\n                     );\n-                } else {\n-                    err.span_label(\n-                        return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n+                    err.span_note(\n+                        span,\n+                        \"`'static` lifetime requirement introduced by the return type\",\n                     );\n                 }\n             }\n-        } else {\n-            err.span_label(\n-                return_sp,\n-                \"...is captured and required to live as long as `'static` here\",\n-            );\n         }\n \n         let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);"}, {"sha": "452ca5eeabd493e35894bcedb6926e98701ef71f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -28,6 +28,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             _sub,\n             sup_origin,\n             _sup,\n+            _,\n         ) = error.clone()\n         {\n             if let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin) {"}, {"sha": "85ee6d2cdc282e85e8dca19811e54d3f0eb9b587", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n use rustc_middle::ty::{ReLateBound, RePlaceholder, ReVar};\n use rustc_middle::ty::{Region, RegionVid};\n+use rustc_span::Span;\n use std::fmt;\n \n /// This function performs lexical region resolution given a complete\n@@ -96,6 +97,7 @@ pub enum RegionResolutionError<'tcx> {\n         Region<'tcx>,\n         SubregionOrigin<'tcx>,\n         Region<'tcx>,\n+        Vec<Span>, // All the influences on a given value that didn't meet its constraints.\n     ),\n \n     /// Indicates a `'b: 'a` constraint where `'a` is in a universe that\n@@ -567,7 +569,30 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // if this rule starts to create problems we'll\n                     // have to revisit this portion of the code and\n                     // think hard about it. =) -- nikomatsakis\n-                    self.collect_error_for_expanding_node(graph, &mut dup_vec, node_vid, errors);\n+\n+                    // Obtain the spans for all the places that can\n+                    // influence the constraints on this value for\n+                    // richer diagnostics in `static_impl_trait`.\n+                    let influences: Vec<Span> = self\n+                        .data\n+                        .constraints\n+                        .iter()\n+                        .filter_map(|(constraint, origin)| match (constraint, origin) {\n+                            (\n+                                Constraint::VarSubVar(_, sup),\n+                                SubregionOrigin::DataBorrowed(_, sp),\n+                            ) if sup == &node_vid => Some(*sp),\n+                            _ => None,\n+                        })\n+                        .collect();\n+\n+                    self.collect_error_for_expanding_node(\n+                        graph,\n+                        &mut dup_vec,\n+                        node_vid,\n+                        errors,\n+                        influences,\n+                    );\n                 }\n             }\n         }\n@@ -621,6 +646,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n+        influences: Vec<Span>,\n     ) {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n@@ -667,13 +693,15 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                          sup: {:?}\",\n                         origin, node_idx, lower_bound.region, upper_bound.region\n                     );\n+\n                     errors.push(RegionResolutionError::SubSupConflict(\n                         node_idx,\n                         origin,\n                         lower_bound.origin.clone(),\n                         lower_bound.region,\n                         upper_bound.origin.clone(),\n                         upper_bound.region,\n+                        influences,\n                     ));\n                     return;\n                 }"}, {"sha": "0bf457ca8a8247d27416e636d883c9e9684b6a2e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -1481,40 +1481,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         scope_def_id: LocalDefId,\n     ) -> Vec<&'tcx hir::Ty<'tcx>> {\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n-        let hir_output = match self.hir().get(hir_id) {\n-            Node::Item(hir::Item {\n-                kind:\n-                    ItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        ..,\n-                    ),\n-                ..\n-            })\n-            | Node::ImplItem(hir::ImplItem {\n-                kind:\n-                    hir::ImplItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        _,\n-                    ),\n-                ..\n-            })\n-            | Node::TraitItem(hir::TraitItem {\n-                kind:\n-                    hir::TraitItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        _,\n-                    ),\n-                ..\n-            }) => ty,\n+        let hir_output = match self.hir().fn_decl_by_hir_id(hir_id) {\n+            Some(hir::FnDecl { output: hir::FnRetTy::Return(ty), .. }) => ty,\n             _ => return vec![],\n         };\n "}, {"sha": "1acb3ec57dea6e943533eb0d401f7ea5b4633f8c", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n+use rustc_span::Span;\n \n impl<'tcx> TyS<'tcx> {\n     /// Similar to `TyS::is_primitive`, but also considers inferred numeric values to be primitive.\n@@ -432,3 +433,22 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n         hir::intravisit::walk_ty(self, ty);\n     }\n }\n+\n+/// Collect al types that have an implicit `'static` obligation that we could suggest `'_` for.\n+pub struct StaticLifetimeVisitor<'tcx>(pub Vec<Span>, pub crate::hir::map::Map<'tcx>);\n+\n+impl<'v> hir::intravisit::Visitor<'v> for StaticLifetimeVisitor<'v> {\n+    type Map = rustc_hir::intravisit::ErasedMap<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+        hir::intravisit::NestedVisitorMap::None\n+    }\n+\n+    fn visit_lifetime(&mut self, lt: &'v hir::Lifetime) {\n+        if let hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static =\n+            lt.name\n+        {\n+            self.0.push(lt.span);\n+        }\n+    }\n+}"}, {"sha": "33f1e0f05b252810821306c839e3383e3ce9f54a", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |                  ------- this data with lifetime `'a`...\n LL |    bar(foo, x)\n-   |    ----^^^---- ...is captured and required to live as long as `'static` here\n+   |        ^^^  - ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "609627aaa9ef0a9f47d9fee6b18f19f70f55cdad", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -5,7 +5,16 @@ LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |                   -------- this data with lifetime `'a`...\n ...\n LL |     bar(foo, x)\n-   |     ----^^^---- ...is captured and required to live as long as `'static` here\n+   |         ^^^  - ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/project-fn-ret-invariant.rs:45:37\n+   |\n+LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n+   |                                     ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     bar(foo, x)\n+   |     ----------- because of this returned expression\n \n error: aborting due to previous error\n "}, {"sha": "e23277543c66f3b14e5ba4cc5a40b7dd1826d28a", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -2,12 +2,15 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ^^^^^\n-   |                               |\n-   |                               this data with an anonymous lifetime `'_`...\n-   |                               ...is captured here...\n+   |                               ^^^^^ this data with an anonymous lifetime `'_`...\n LL |         foo(|| self.bar()).await;\n-   |         --- ...and is required to live as long as `'static` here\n+   |         --- ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by this bound\n+  --> $DIR/issue-62097.rs:4:19\n+   |\n+LL |     F: FnOnce() + 'static\n+   |                   ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "068d8c64d6898009011d585628a2f88747575c88", "filename": "src/test/ui/async-await/issues/issue-72312.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.nll.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -0,0 +1,21 @@\n+error[E0521]: borrowed data escapes outside of associated function\n+  --> $DIR/issue-72312.rs:13:24\n+   |\n+LL |       pub async fn start(&self) {\n+   |                          -----\n+   |                          |\n+   |                          `self` is a reference that is only valid in the associated function body\n+   |                          let's call the lifetime of this reference `'1`\n+...\n+LL |           require_static(async move {\n+   |  ________________________^\n+LL | |             &self;\n+LL | |         });\n+   | |         ^\n+   | |         |\n+   | |_________`self` escapes the associated function body here\n+   |           argument requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "eb7d12e290cb670c16425044529a86b0db939d62", "filename": "src/test/ui/async-await/issues/issue-72312.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+fn require_static<T: 'static>(val: T) -> T {\n+    //~^ NOTE 'static` lifetime requirement introduced by this bound\n+    val\n+}\n+\n+struct Problem;\n+\n+impl Problem {\n+    pub async fn start(&self) { //~ ERROR E0759\n+        //~^ NOTE this data with an anonymous lifetime `'_`\n+        //~| NOTE in this expansion of desugaring of `async` block or function\n+        require_static(async move { //~ NOTE ...and is required to live as long as `'static` here\n+            &self; //~ NOTE ...is used here...\n+        });\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "798f755765cc144bac14a62a570d8ed63fa26869", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -0,0 +1,23 @@\n+error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-72312.rs:10:24\n+   |\n+LL |     pub async fn start(&self) {\n+   |                        ^^^^^ this data with an anonymous lifetime `'_`...\n+...\n+LL |             &self;\n+   |             ----- ...is used here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/issue-72312.rs:13:9\n+   |\n+LL |         require_static(async move {\n+   |         ^^^^^^^^^^^^^^\n+note: `'static` lifetime requirement introduced by this bound\n+  --> $DIR/issue-72312.rs:2:22\n+   |\n+LL | fn require_static<T: 'static>(val: T) -> T {\n+   |                      ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "af1f908a80852062432b16bd8d1d019771caa410", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -8,13 +8,18 @@ LL |       bar(|| {\n LL | |\n LL | |         let _ = x;\n LL | |     })\n-   | |_____^ ...is captured here...\n+   | |_____^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n LL |     bar(|| {\n    |     ^^^\n+note: `'static` lifetime requirement introduced by this bound\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:1:39\n+   |\n+LL | fn bar<F>(blk: F) where F: FnOnce() + 'static {\n+   |                                       ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "30d67050b904cfd61ed49727b16fbcb530549dd3", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -5,7 +5,7 @@ LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- this data with an anonymous lifetime `'_`...\n ...\n LL |         x\n-   |         ^ ...is captured here...\n+   |         ^ ...is used here...\n ...\n LL |             GeneratorState::Complete(c) => return c,\n    |                                                   - ...and is required to live as long as `'static` here"}, {"sha": "32c5ccf164874cb80e4004446318c6e7aa4932eb", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,23 +4,29 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         ------------------------------- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     --^-- ...is captured and required to live as long as `'static` here\n+   |     - ^\n+   |     |\n+   |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/projection-type-lifetime-mismatch.rs:22:7\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       -- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     --^-- ...is captured and required to live as long as `'static` here\n+   |     - ^\n+   |     |\n+   |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         --- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     --^-- ...is captured and required to live as long as `'static` here\n+   |     - ^\n+   |     |\n+   |     ...is used and required to live as long as `'static` here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2307572cc3f24ca05e608c92f7e8581bc5e60851", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                                 ------------------- this data with lifetime `'a`...\n LL |     static_val(x);\n-   |                ^ ...is captured here...\n+   |                ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/dyn-trait.rs:20:5"}, {"sha": "de5d3b612c9c2648fd48b71aab6ce7656a46e837", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -28,7 +28,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n-   |               ----                           ^ ...is captured here...\n+   |               ----                           ^ ...is used here...\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n@@ -50,7 +50,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-   |                     -------                           ^ ...is captured here...\n+   |                     -------                           ^ ...is used here...\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n@@ -80,7 +80,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:65\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |               ---- this data with an anonymous lifetime `'_`... ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ---- this data with an anonymous lifetime `'_`... ^ ...is used and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n@@ -95,7 +95,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      ------- this data with lifetime `'a`...        ^ ...is captured here...\n+   |                      ------- this data with lifetime `'a`...        ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:34\n@@ -136,10 +136,17 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |               ----                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ----                               ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:16:28\n+   |\n+LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                            ^^^^^^^^^    ----------- because of this returned expression\n+   |                            |\n+   |                            `'static` requirement introduced here\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -149,10 +156,17 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                     -------                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |                     -------                               ^ ...is used and required to live as long as `'static` here\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:37\n+   |\n+LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                                     ^^^^^^^^^    ----------- because of this returned expression\n+   |                                     |\n+   |                                     `'static` requirement introduced here\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n@@ -162,10 +176,17 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:20:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                         ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ----                                         ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:20:40\n+   |\n+LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                                        ^^^^^^^    ----------- because of this returned expression\n+   |                                        |\n+   |                                        `'static` requirement introduced here\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -179,8 +200,15 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`\n+   |                     ------- this data with lifetime `'a`...         ^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/must_outlive_least_region_or_bound.rs:22:49\n+   |\n+LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                                                 ^^^^^^^    ----------- because of this returned expression\n+   |                                                 |\n+   |                                                 `'static` requirement introduced here\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }"}, {"sha": "53405a660f861c47b824a886a1f2f01a6413fe4e", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `value` has an anonymous lifetime `'_` but it needs to satisfy a `\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       -- this data with an anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n-   |              ^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^^^^^ ...is used and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `value`, you can add an explicit `'_` lifetime bound\n    |"}, {"sha": "ed9f1884c42fb5c3156eea8112ead35d921854a4", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn foo(x: &u32) -> &'static u32 {\n    |           ---- this data with an anonymous lifetime `'_`...\n LL |     &*x\n-   |     ^^^ ...is captured and required to live as long as `'static` here\n+   |     ^^^ ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "e06255e4ea3ff54bb5f97b0721d426eead8e6447", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'s\n LL | fn inner(mut foo: &[u8]) {\n    |                   ----- this data with an anonymous lifetime `'_`...\n LL |     let refcell = RefCell::new(&mut foo);\n-   |                                ^^^^^^^^ ...is captured here...\n+   |                                ^^^^^^^^ ...is used here...\n ...\n LL |     read_thing(read);\n    |                ---- ...and is required to live as long as `'static` here"}, {"sha": "4a6378b84f1e6f9b3dbb3c65412957eaab82eea9", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `fn` parameter has lifetime `'a` but it needs to satisfy a `'stati\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |               ------- this data with lifetime `'a`...\n LL |     <Foo<'a>>::C\n-   |     ^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |     ^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "1708700f77aaa21e005c4c19003156efb0eb655e", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -5,8 +5,16 @@ LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n    |             --------------- this data with an anonymous lifetime `'_`...\n ...\n LL |     ss.r\n-   |     ^^^^ ...is captured and required to live as long as `'static` here\n+   |     ^^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/object-lifetime-default-from-box-error.rs:14:37\n+   |\n+LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n+   |                                     ^^^^^^^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     ss.r\n+   |     ---- because of this returned expression\n help: to declare that the trait object captures data from argument `ss`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {"}, {"sha": "d8932c067acd863f39e49aedcba529c6ee444684", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                              ^ ...is captured here, requiring it to live as long as `'static`\n+   |                                              ^ ...is used and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n@@ -21,8 +21,15 @@ error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     Box::new(v)\n-   |              ^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/region-object-lifetime-in-coercion.rs:12:33\n+   |\n+LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n+   |                                 ^^^^^^^ `'static` requirement introduced here\n+LL |     Box::new(v)\n+   |     ----------- because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n@@ -39,8 +46,16 @@ LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         ----- this data with an anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n-   |              ^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^ ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/region-object-lifetime-in-coercion.rs:16:23\n    |\n+LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n+   |                       ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     Box::new(v)\n+   |     ----------- because of this returned expression\n help: to declare that the trait object captures data from argument `v`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {"}, {"sha": "3453c6458f1da4d4d3f85a188623da0b9e98e98a", "filename": "src/test/ui/regions/regions-addr-of-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n LL |     pub fn chase_cat(&mut self) {\n    |                      --------- this data with an anonymous lifetime `'_`...\n LL |         let p: &'static mut usize = &mut self.cats_chased;\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "4153f4f29bc2836fcfbc817fb58d5770498d9128", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,8 +4,15 @@ error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n+   |                ^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-close-object-into-object-2.rs:8:60\n+   |\n+LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n+   |                                                            ^^^^^^^ `'static` requirement introduced here\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {"}, {"sha": "2ea4b431b38dab0a6424d3bef5695cd30eadf2e6", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,8 +4,15 @@ error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n+   |                ^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-close-object-into-object-4.rs:8:52\n+   |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |                                                    ^^^^^^^ `'static` requirement introduced here\n+LL |     Box::new(B(&*v)) as Box<dyn X>\n+   |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {"}, {"sha": "2ebe874da9350298c0d1cb942cda478afd3ad43d", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -5,8 +5,16 @@ LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   ------ this data with an anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n-   |              ^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^^^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/regions-proc-bound-capture.rs:7:59\n+   |\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                                                           ^^^^^^^ `'static` requirement introduced here\n+LL |     // This is illegal, because the region bound on `proc` is 'static.\n+LL |     Box::new(move || { *x })\n+   |     ------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {"}, {"sha": "b8e69e02609d69c502a17b5cf7a64b00b112bc23", "filename": "src/test/ui/regions/regions-static-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -17,7 +17,7 @@ error[E0759]: `u` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn error(u: &(), v: &()) {\n    |             --- this data with an anonymous lifetime `'_`...\n LL |     static_id(&u);\n-   |     ^^^^^^^^^ -- ...is captured here...\n+   |     ^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/regions-static-bound.rs:10:5\n@@ -32,7 +32,7 @@ LL | fn error(u: &(), v: &()) {\n    |                     --- this data with an anonymous lifetime `'_`...\n LL |     static_id(&u);\n LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^ -- ...is captured here...\n+   |     ^^^^^^^^^^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/regions-static-bound.rs:11:5"}, {"sha": "63d291ed7cdb95e24fa76fbaa85475d746b29122", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -22,7 +22,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32> + 'a>) -> &'a () {\n    |                        -------------------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:60:30"}, {"sha": "55a1bbf18ab9fbfee2ad49631fbcf3dd7d0e07f7", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifeti\n LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n    |                           ---------------------- this data with lifetime `'a`...\n LL |         val.use_self::<T>()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:14:32\n@@ -24,7 +24,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime bound on the inherent `impl`\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here because of an implicit lifetime bound on the inherent `impl`\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:64:14\n@@ -44,7 +44,7 @@ error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifeti\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:85:26\n@@ -69,7 +69,7 @@ error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifeti\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         MyTrait::use_self(val)\n-   |                           ^^^ ...is captured here...\n+   |                           ^^^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n@@ -95,7 +95,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:31:26\n@@ -115,7 +115,7 @@ error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n    |                        ----------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:48:30"}, {"sha": "a5b50634c71ea28103dbce76f4adef2b038b4a7f", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -7,7 +7,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:27:23\n@@ -32,7 +32,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:38:23\n@@ -53,7 +53,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:49:30\n@@ -74,7 +74,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n LL |             remaining: self.0.iter(),\n    |                        ------ ^^^^\n    |                        |\n-   |                        ...is captured here...\n+   |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n   --> $DIR/trait-object-nested-in-impl-trait.rs:60:30"}, {"sha": "95698fd1e1a801c63c8abf56fd732be0cacf4002", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -29,4 +29,22 @@ fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     y.get_b() // ERROR\n }\n \n+fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    <_ as Bar>::get_b(x) // ERROR\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+}\n+\n+fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+}\n+\n+fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+    let y = x as &dyn Bar<'_, '_>;\n+    //~^ ERROR `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+    y.get_b(); // ERROR\n+    let z = y;\n+    z.get_b() // ERROR\n+}\n+\n fn main() {}"}, {"sha": "d4bb9350b0b4e6e064dc9acf222cbf7c36fadddb", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -36,12 +36,88 @@ LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n LL |     let y = x as &dyn Bar<'_, '_>;\n    |             -             ^^\n    |             |\n-   |             ...is captured here...\n+   |             ...is used here...\n LL |\n LL |     y.get_b() // ERROR\n-   |     --------- ...and is required to live as long as `'static` here\n+   |     - ...is used here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/type-checking-test-4.rs:29:5\n+   |\n+LL |     y.get_b() // ERROR\n+   |     ^^^^^^^^^\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:26:48\n+   |\n+LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     y.get_b() // ERROR\n+   |     --------- because of this returned expression\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:33:5\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     ^^^^^^^^^^^^^^^^^ ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:32:48\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     -------------------- because of this returned expression\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:38:15\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ----------^^------------- ...is used and required to live as long as `'static` here\n+   |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:37:48\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ---------------------------- because of this returned expression\n+\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/type-checking-test-4.rs:43:27\n+   |\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                       ------------ this data with lifetime `'a`...\n+LL |     let y = x as &dyn Bar<'_, '_>;\n+   |             -             ^^\n+   |             |\n+   |             ...is used here...\n+LL |\n+LL |     y.get_b(); // ERROR\n+   |     - ...is used here...\n+LL |     let z = y;\n+LL |     z.get_b() // ERROR\n+   |     - ...is used here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/type-checking-test-4.rs:47:5\n+   |\n+LL |     z.get_b() // ERROR\n+   |     ^^^^^^^^^\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/type-checking-test-4.rs:42:48\n+   |\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n+...\n+LL |     z.get_b() // ERROR\n+   |     --------- because of this returned expression\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0308, E0759.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "f4285a0f98e7cae08b457a6c34e5f1cde009b3c9", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bba5c163c3530d3eeab03128bd1c72d331a16df/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=7bba5c163c3530d3eeab03128bd1c72d331a16df", "patch": "@@ -5,8 +5,18 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                ---- this data with an anonymous lifetime `'_`...\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^--- ...is captured and required to live as long as `'static` here\n+   |              ----- ^^^^\n+   |              |\n+   |              ...is used and required to live as long as `'static` here\n    |\n+note: `'static` lifetime requirement introduced by the return type\n+  --> $DIR/dyn-trait-underscore.rs:6:29\n+   |\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ `'static` requirement introduced here\n+LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL |     Box::new(items.iter())\n+   |     ---------------------- because of this returned expression\n help: to declare that the trait object captures data from argument `items`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}]}