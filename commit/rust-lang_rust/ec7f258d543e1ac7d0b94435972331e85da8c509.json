{"sha": "ec7f258d543e1ac7d0b94435972331e85da8c509", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjN2YyNThkNTQzZTFhYzdkMGI5NDQzNTk3MjMzMWU4NWRhOGM1MDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-04T11:02:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-04T11:02:13Z"}, "message": "Auto merge of #82756 - JohnTitor:rollup-e4ij7h6, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #80527 (Make rustdoc lints a tool lint instead of built-in)\n - #82310 (Load rustdoc's JS search index on-demand.)\n - #82315 (Improve page load performance in rustdoc)\n - #82564 (Revert `Vec::spare_capacity_mut` impl to prevent pointers invalidation)\n - #82697 (Fix stabilization version of move_ref_pattern)\n - #82717 (Account for macros when suggesting adding lifetime)\n - #82740 (Fix commit detected when using `download-rustc`)\n - #82744 (Pass `CrateNum` by value instead of by reference)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ec2035416d62d8c24521fc4fc50bf31e6d70dea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2035416d62d8c24521fc4fc50bf31e6d70dea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7f258d543e1ac7d0b94435972331e85da8c509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f258d543e1ac7d0b94435972331e85da8c509", "html_url": "https://github.com/rust-lang/rust/commit/ec7f258d543e1ac7d0b94435972331e85da8c509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f258d543e1ac7d0b94435972331e85da8c509/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f32f62aa5ceba1b795f3702e502d8473238be6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f32f62aa5ceba1b795f3702e502d8473238be6b", "html_url": "https://github.com/rust-lang/rust/commit/7f32f62aa5ceba1b795f3702e502d8473238be6b"}, {"sha": "06630f7b5f6eb356e1d36a59d47d63759aec61eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/06630f7b5f6eb356e1d36a59d47d63759aec61eb", "html_url": "https://github.com/rust-lang/rust/commit/06630f7b5f6eb356e1d36a59d47d63759aec61eb"}], "stats": {"total": 1105, "additions": 685, "deletions": 420}, "files": [{"sha": "1e224dbf83390e61c67ee795d9a3fbea34574e8f", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -34,7 +34,7 @@ impl MarkedAttrs {\n }\n \n pub fn is_known_lint_tool(m_item: Ident) -> bool {\n-    [sym::clippy, sym::rustc].contains(&m_item.name)\n+    [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item.name)\n }\n \n impl NestedMetaItem {"}, {"sha": "14ddb3e20793a24a2db9eaf8829e23bab5aa563c", "filename": "compiler/rustc_error_codes/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Flib.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,5 @@\n-#![deny(invalid_codeblock_attributes)]\n+#![cfg_attr(bootstrap, deny(invalid_codeblock_attributes))]\n+#![cfg_attr(not(bootstrap), deny(rustdoc::invalid_codeblock_attributes))]\n //! This library is used to gather all error codes into one place,\n //! the goal being to make their maintenance easier.\n "}, {"sha": "5012d500cee20fe4f20797ed193f3887fb89708d", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -272,7 +272,7 @@ declare_features! (\n     (accepted, doc_alias, \"1.48.0\", Some(50146), None),\n     /// Allows patterns with concurrent by-move and by-ref bindings.\n     /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n-    (accepted, move_ref_pattern, \"1.48.0\", Some(68354), None),\n+    (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n     /// The smallest useful subset of `const_generics`.\n     (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n "}, {"sha": "7d5577cdca6639b8d13349a4df67a51c269337f8", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -89,6 +89,7 @@ impl SessionLintStore for LintStore {\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n+#[derive(Debug)]\n enum TargetLint {\n     /// A direct lint target\n     Id(LintId),\n@@ -470,7 +471,10 @@ impl LintStore {\n             Some(&Id(ref id)) => {\n                 CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n             }\n-            _ => CheckLintNameResult::NoLint(None),\n+            Some(other) => {\n+                tracing::debug!(\"got renamed lint {:?}\", other);\n+                CheckLintNameResult::NoLint(None)\n+            }\n         }\n     }\n }"}, {"sha": "547779dd6856a0b24df34f9e1376fc7eb5648a5b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -69,9 +69,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n-    BARE_TRAIT_OBJECTS, BROKEN_INTRA_DOC_LINKS, ELIDED_LIFETIMES_IN_PATHS,\n-    EXPLICIT_OUTLIVES_REQUIREMENTS, INVALID_CODEBLOCK_ATTRIBUTES, INVALID_HTML_TAGS,\n-    MISSING_DOC_CODE_EXAMPLES, NON_AUTOLINKS, PRIVATE_DOC_TESTS,\n+    BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n };\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -314,17 +312,6 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n                                        // MACRO_USE_EXTERN_CRATE\n     );\n \n-    add_lint_group!(\n-        \"rustdoc\",\n-        NON_AUTOLINKS,\n-        BROKEN_INTRA_DOC_LINKS,\n-        PRIVATE_INTRA_DOC_LINKS,\n-        INVALID_CODEBLOCK_ATTRIBUTES,\n-        MISSING_DOC_CODE_EXAMPLES,\n-        PRIVATE_DOC_TESTS,\n-        INVALID_HTML_TAGS\n-    );\n-\n     // Register renamed and removed lints.\n     store.register_renamed(\"single_use_lifetime\", \"single_use_lifetimes\");\n     store.register_renamed(\"elided_lifetime_in_path\", \"elided_lifetimes_in_paths\");\n@@ -334,8 +321,29 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     store.register_renamed(\"async_idents\", \"keyword_idents\");\n     store.register_renamed(\"exceeding_bitshifts\", \"arithmetic_overflow\");\n     store.register_renamed(\"redundant_semicolon\", \"redundant_semicolons\");\n-    store.register_renamed(\"intra_doc_link_resolution_failure\", \"broken_intra_doc_links\");\n     store.register_renamed(\"overlapping_patterns\", \"overlapping_range_endpoints\");\n+\n+    // These were moved to tool lints, but rustc still sees them when compiling normally, before\n+    // tool lints are registered, so `check_tool_name_for_backwards_compat` doesn't work. Use\n+    // `register_removed` explicitly.\n+    const RUSTDOC_LINTS: &[&str] = &[\n+        \"broken_intra_doc_links\",\n+        \"private_intra_doc_links\",\n+        \"missing_crate_level_docs\",\n+        \"missing_doc_code_examples\",\n+        \"private_doc_tests\",\n+        \"invalid_codeblock_attributes\",\n+        \"invalid_html_tags\",\n+        \"non_autolinks\",\n+    ];\n+    for rustdoc_lint in RUSTDOC_LINTS {\n+        store.register_removed(rustdoc_lint, &format!(\"use `rustdoc::{}` instead\", rustdoc_lint));\n+    }\n+    store.register_removed(\n+        \"intra_doc_link_resolution_failure\",\n+        \"use `rustdoc::broken_intra_doc_links` instead\",\n+    );\n+\n     store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");"}, {"sha": "12d849e3b946691f994470a464c8b4f365ebf42d", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1875,93 +1875,6 @@ declare_lint! {\n     \"detects labels that are never used\"\n }\n \n-declare_lint! {\n-    /// The `broken_intra_doc_links` lint detects failures in resolving\n-    /// intra-doc link targets. This is a `rustdoc` only lint, see the\n-    /// documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#broken_intra_doc_links\n-    pub BROKEN_INTRA_DOC_LINKS,\n-    Warn,\n-    \"failures in resolving intra-doc link targets\"\n-}\n-\n-declare_lint! {\n-    /// This is a subset of `broken_intra_doc_links` that warns when linking from\n-    /// a public item to a private one. This is a `rustdoc` only lint, see the\n-    /// documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#private_intra_doc_links\n-    pub PRIVATE_INTRA_DOC_LINKS,\n-    Warn,\n-    \"linking from a public item to a private one\"\n-}\n-\n-declare_lint! {\n-    /// The `invalid_codeblock_attributes` lint detects code block attributes\n-    /// in documentation examples that have potentially mis-typed values. This\n-    /// is a `rustdoc` only lint, see the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_codeblock_attributes\n-    pub INVALID_CODEBLOCK_ATTRIBUTES,\n-    Warn,\n-    \"codeblock attribute looks a lot like a known one\"\n-}\n-\n-declare_lint! {\n-    /// The `missing_crate_level_docs` lint detects if documentation is\n-    /// missing at the crate root. This is a `rustdoc` only lint, see the\n-    /// documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_crate_level_docs\n-    pub MISSING_CRATE_LEVEL_DOCS,\n-    Allow,\n-    \"detects crates with no crate-level documentation\"\n-}\n-\n-declare_lint! {\n-    /// The `missing_doc_code_examples` lint detects publicly-exported items\n-    /// without code samples in their documentation. This is a `rustdoc` only\n-    /// lint, see the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_doc_code_examples\n-    pub MISSING_DOC_CODE_EXAMPLES,\n-    Allow,\n-    \"detects publicly-exported items without code samples in their documentation\"\n-}\n-\n-declare_lint! {\n-    /// The `private_doc_tests` lint detects code samples in docs of private\n-    /// items not documented by `rustdoc`. This is a `rustdoc` only lint, see\n-    /// the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#private_doc_tests\n-    pub PRIVATE_DOC_TESTS,\n-    Allow,\n-    \"detects code samples in docs of private items not documented by rustdoc\"\n-}\n-\n-declare_lint! {\n-    /// The `invalid_html_tags` lint detects invalid HTML tags. This is a\n-    /// `rustdoc` only lint, see the documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_html_tags\n-    pub INVALID_HTML_TAGS,\n-    Allow,\n-    \"detects invalid HTML tags in doc comments\"\n-}\n-\n-declare_lint! {\n-    /// The `non_autolinks` lint detects when a URL could be written using\n-    /// only angle brackets. This is a `rustdoc` only lint, see the\n-    /// documentation in the [rustdoc book].\n-    ///\n-    /// [rustdoc book]: ../../../rustdoc/lints.html#non_autolinks\n-    pub NON_AUTOLINKS,\n-    Warn,\n-    \"detects URLs that could be written using only angle brackets\"\n-}\n-\n declare_lint! {\n     /// The `where_clauses_object_safety` lint detects for [object safety] of\n     /// [where clauses].\n@@ -3020,14 +2933,6 @@ declare_lint_pass! {\n         ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n         UNSTABLE_NAME_COLLISIONS,\n         IRREFUTABLE_LET_PATTERNS,\n-        BROKEN_INTRA_DOC_LINKS,\n-        PRIVATE_INTRA_DOC_LINKS,\n-        INVALID_CODEBLOCK_ATTRIBUTES,\n-        MISSING_CRATE_LEVEL_DOCS,\n-        MISSING_DOC_CODE_EXAMPLES,\n-        INVALID_HTML_TAGS,\n-        PRIVATE_DOC_TESTS,\n-        NON_AUTOLINKS,\n         WHERE_CLAUSES_OBJECT_SAFETY,\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,"}, {"sha": "87bf79d722bde4cb83f6e41e79b00b1e56a1f65a", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1645,6 +1645,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         );\n         err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n         let mut suggests_in_band = false;\n+        let mut suggest_note = true;\n         for missing in &self.missing_named_lifetime_spots {\n             match missing {\n                 MissingLifetimeSpot::Generics(generics) => {\n@@ -1664,12 +1665,24 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         suggests_in_band = true;\n                         (generics.span, format!(\"<{}>\", lifetime_ref))\n                     };\n-                    err.span_suggestion(\n-                        span,\n-                        &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n-                        sugg,\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    if !span.from_expansion() {\n+                        err.span_suggestion(\n+                            span,\n+                            &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n+                            sugg,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else if suggest_note {\n+                        suggest_note = false; // Avoid displaying the same help multiple times.\n+                        err.span_label(\n+                            span,\n+                            &format!(\n+                                \"lifetime `{}` is missing in item created through this procedural \\\n+                                 macro\",\n+                                lifetime_ref,\n+                            ),\n+                        );\n+                    }\n                 }\n                 MissingLifetimeSpot::HigherRanked { span, span_type } => {\n                     err.span_suggestion(\n@@ -1684,7 +1697,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     );\n                     err.note(\n                         \"for more information on higher-ranked polymorphism, visit \\\n-                            https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                         https://doc.rust-lang.org/nomicon/hrtb.html\",\n                     );\n                 }\n                 _ => {}\n@@ -1696,7 +1709,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         {\n             err.help(\n                 \"if you want to experiment with in-band lifetime bindings, \\\n-                    add `#![feature(in_band_lifetimes)]` to the crate attributes\",\n+                 add `#![feature(in_band_lifetimes)]` to the crate attributes\",\n             );\n         }\n         err.emit();"}, {"sha": "f9af0886a959a890e19968a3b88c5dbdd941ad24", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1021,6 +1021,7 @@ symbols! {\n         rustc_then_this_would_need,\n         rustc_unsafe_specialization_marker,\n         rustc_variance,\n+        rustdoc,\n         rustfmt,\n         rvalue_static_promotion,\n         sanitize,"}, {"sha": "0028e290fac4edb40b9118977710e48903146555", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1877,7 +1877,15 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[unstable(feature = \"vec_spare_capacity\", issue = \"75017\")]\n     #[inline]\n     pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {\n-        self.split_at_spare_mut().1\n+        // Note:\n+        // This method is not implemented in terms of `split_at_spare_mut`,\n+        // to prevent invalidation of pointers to the buffer.\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,\n+                self.buf.capacity() - self.len,\n+            )\n+        }\n     }\n \n     /// Returns vector content as a slice of `T`, along with the remaining spare\n@@ -1934,20 +1942,16 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]\n     #[inline]\n     pub fn split_at_spare_mut(&mut self) -> (&mut [T], &mut [MaybeUninit<T>]) {\n-        let ptr = self.as_mut_ptr();\n-\n-        // SAFETY:\n-        // - `ptr` is guaranteed to be in bounds for `capacity` elements\n-        // - `len` is guaranteed to less or equal to `capacity`\n-        // - `MaybeUninit<T>` has the same layout as `T`\n-        let spare_ptr = unsafe { ptr.cast::<MaybeUninit<T>>().add(self.len) };\n+        let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n+        let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n+        let spare_len = self.buf.capacity() - self.len;\n \n         // SAFETY:\n         // - `ptr` is guaranteed to be valid for `len` elements\n-        // - `spare_ptr` is offseted from `ptr` by `len`, so it doesn't overlap `initialized` slice\n+        // - `spare_ptr` is pointing one element past the buffer, so it doesn't overlap with `initialized`\n         unsafe {\n             let initialized = slice::from_raw_parts_mut(ptr, self.len);\n-            let spare = slice::from_raw_parts_mut(spare_ptr, self.buf.capacity() - self.len);\n+            let spare = slice::from_raw_parts_mut(spare_ptr, spare_len);\n \n             (initialized, spare)\n         }"}, {"sha": "799499b9b771fba38da8e046fe65625b566dc0d6", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -20,6 +20,7 @@\n #![feature(vecdeque_binary_search)]\n #![feature(slice_group_by)]\n #![feature(vec_extend_from_within)]\n+#![feature(vec_spare_capacity)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "fab450285854d4a721fa44dc71f5437aaf202fa1", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1691,6 +1691,10 @@ fn test_stable_pointers() {\n     next_then_drop(v.splice(5..6, vec![1; 10].into_iter().filter(|_| true))); // lower bound not exact\n     assert_eq!(*v0, 13);\n \n+    // spare_capacity_mut\n+    v.spare_capacity_mut();\n+    assert_eq!(*v0, 13);\n+\n     // Smoke test that would fire even outside Miri if an actual relocation happened.\n     *v0 -= 13;\n     assert_eq!(v[0], 0);"}, {"sha": "04926123729131b88f90c5f15706aae82a043896", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -297,7 +297,8 @@ pub mod primitive;\n     unused_imports,\n     unsafe_op_in_unsafe_fn\n )]\n-#[allow(non_autolinks)]\n+#[cfg_attr(bootstrap, allow(non_autolinks))]\n+#[cfg_attr(not(bootstrap), allow(rustdoc::non_autolinks))]\n // FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n #[allow(clashing_extern_declarations)]"}, {"sha": "3e7d1d54f128482cfc0778039a3eeaa58f1f37fd", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -647,9 +647,8 @@ def maybe_download_rustc(self):\n         compiler = \"{}/compiler/\".format(top_level)\n \n         # Look for a version to compare to based on the current commit.\n-        # Ideally this would just use `merge-base`, but on beta and stable branches that wouldn't\n-        # come up with any commits, so hack it and use `author=bors` instead.\n-        merge_base = [\"git\", \"log\", \"--author=bors\", \"--pretty=%H\", \"-n1\", \"--\", compiler]\n+        # Only commits merged by bors will have CI artifacts.\n+        merge_base = [\"git\", \"log\", \"--author=bors\", \"--pretty=%H\", \"-n1\"]\n         commit = subprocess.check_output(merge_base, universal_newlines=True).strip()\n \n         # Warn if there were changes to the compiler since the ancestor commit."}, {"sha": "9317c89625d066086ad6b765c1f90c4bd400bd32", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -735,8 +735,15 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler))\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n-            .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-            .arg(\"-Winvalid_codeblock_attributes\");\n+            .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+\n+        // cfg(bootstrap), can be removed on the next beta bump\n+        if compiler.stage == 0 {\n+            cmd.arg(\"-Winvalid_codeblock_attributes\");\n+        } else {\n+            cmd.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n+        }\n+\n         if self.config.deny_warnings {\n             cmd.arg(\"-Dwarnings\");\n         }\n@@ -1292,7 +1299,12 @@ impl<'a> Builder<'a> {\n             // fixed via better support from Cargo.\n             cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n \n-            rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n+            // cfg(bootstrap), can be removed on the next beta bump\n+            if compiler.stage == 0 {\n+                rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n+            } else {\n+                rustdocflags.arg(\"-Wrustdoc::invalid_codeblock_attributes\");\n+            }\n         }\n \n         if mode == Mode::Rustc {"}, {"sha": "ff18e1a8f51ccb008be5f7da63524f24214cfe7b", "filename": "src/doc/rust.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -3,30 +3,35 @@\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Fira Sans'), url(\"FiraSans-Regular.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 500;\n \tsrc: local('Fira Sans Medium'), url(\"FiraSans-Medium.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n \tsrc: url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 700;\n \tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n@@ -35,6 +40,7 @@\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n \tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n+\tfont-display: swap;\n }\n \n *:not(body) {"}, {"sha": "174db711bcee71f0f64a903c272378a68f6e7e3b", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,12 +4,13 @@\n can use them like any other lints by doing this:\n \n ```rust\n-#![allow(missing_docs)] // allows the lint, no diagnostics will be reported\n-#![warn(missing_docs)] // warn if there are missing docs\n-#![deny(missing_docs)] // error if there are missing docs\n-# //! Crate docs.\n+#![allow(rustdoc::broken_intra_doc_links)] // allows the lint, no diagnostics will be reported\n+#![warn(rustdoc::broken_intra_doc_links)] // warn if there are broken intra-doc links\n+#![deny(rustdoc::broken_intra_doc_links)] // error if there are broken intra-doc links\n ```\n \n+Note that, except for `missing_docs`, these lints are only available when running `rustdoc`, not `rustc`.\n+\n Here is the list of the lints provided by `rustdoc`:\n \n ## broken_intra_doc_links\n@@ -51,7 +52,7 @@ warning: `Foo` is both an enum and a function\n 1 | /// [`Foo`]\n   |      ^^^^^ ambiguous link\n   |\n-  = note: `#[warn(broken_intra_doc_links)]` on by default\n+  = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n help: to link to the enum, prefix with the item type\n   |\n 1 | /// [`enum@Foo`]\n@@ -83,7 +84,7 @@ warning: public documentation for `public` links to private item `private`\n 1 | /// [private]\n   |      ^^^^^^^ this item is private\n   |\n-  = note: `#[warn(private_intra_doc_links)]` on by default\n+  = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n   = note: this link will resolve properly if you pass `--document-private-items`\n ```\n \n@@ -97,7 +98,7 @@ warning: public documentation for `public` links to private item `private`\n 1 | /// [private]\n   |      ^^^^^^^ this item is private\n   |\n-  = note: `#[warn(private_intra_doc_links)]` on by default\n+  = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n   = note: this link resolves only because you passed `--document-private-items`, but will break without\n ```\n \n@@ -125,13 +126,15 @@ warning: missing documentation for a function\n    | ^^^^^^^^^^^^^^^^^^^^^\n ```\n \n+Note that unlike other rustdoc lints, this lint is also available from `rustc` directly.\n+\n ## missing_crate_level_docs\n \n This lint is **allowed by default**. It detects if there is no documentation\n at the crate root. For example:\n \n ```rust\n-#![warn(missing_crate_level_docs)]\n+#![warn(rustdoc::missing_crate_level_docs)]\n ```\n \n This will generate the following warning:\n@@ -155,7 +158,7 @@ This lint is **allowed by default** and is **nightly-only**. It detects when a d\n is missing a code example. For example:\n \n ```rust\n-#![warn(missing_doc_code_examples)]\n+#![warn(rustdoc::missing_doc_code_examples)]\n \n /// There is no code example!\n pub fn no_code_example() {}\n@@ -191,7 +194,7 @@ This lint is **allowed by default**. It detects documentation tests when they\n are on a private item. For example:\n \n ```rust\n-#![warn(private_doc_tests)]\n+#![warn(rustdoc::private_doc_tests)]\n \n mod foo {\n     /// private doc test\n@@ -245,7 +248,7 @@ warning: unknown attribute `should-panic`. Did you mean `should_panic`?\n 5 | | /// ```\n   | |_______^\n   |\n-  = note: `#[warn(invalid_codeblock_attributes)]` on by default\n+  = note: `#[warn(rustdoc::invalid_codeblock_attributes)]` on by default\n   = help: the code block will either not be tested if not marked as a rust one or won't fail if it doesn't panic when running\n ```\n \n@@ -258,7 +261,7 @@ This lint is **allowed by default** and is **nightly-only**. It detects unclosed\n or invalid HTML tags. For example:\n \n ```rust\n-#![warn(invalid_html_tags)]\n+#![warn(rustdoc::invalid_html_tags)]\n \n /// <h1>\n /// </script>\n@@ -275,7 +278,11 @@ warning: unopened HTML tag `script`\n 2 | | /// </script>\n   | |_____________^\n   |\n-  = note: `#[warn(invalid_html_tags)]` on by default\n+  note: the lint level is defined here\n+ --> foo.rs:1:9\n+  |\n+1 | #![warn(rustdoc::invalid_html_tags)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unclosed HTML tag `h1`\n  --> foo.rs:1:1\n@@ -310,7 +317,7 @@ warning: this URL is not a hyperlink\n 1 | /// http://example.org\n   |     ^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://example.org>`\n   |\n-  = note: `#[warn(non_autolinks)]` on by default\n+  = note: `#[warn(rustdoc::non_autolinks)]` on by default\n \n warning: unneeded long form for URL\n  --> foo.rs:2:5"}, {"sha": "e3f47a85d5154ab1cb7baa356f2dd14101d268a4", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -191,7 +191,7 @@ impl Item {\n     }\n \n     crate fn links(&self, cache: &Cache) -> Vec<RenderedLink> {\n-        self.attrs.links(&self.def_id.krate, cache)\n+        self.attrs.links(self.def_id.krate, cache)\n     }\n \n     crate fn is_crate(&self) -> bool {\n@@ -844,7 +844,7 @@ impl Attributes {\n     /// Gets links as a vector\n     ///\n     /// Cache must be populated before call\n-    crate fn links(&self, krate: &CrateNum, cache: &Cache) -> Vec<RenderedLink> {\n+    crate fn links(&self, krate: CrateNum, cache: &Cache) -> Vec<RenderedLink> {\n         use crate::html::format::href;\n         use crate::html::render::CURRENT_DEPTH;\n \n@@ -869,7 +869,7 @@ impl Attributes {\n                     }\n                     None => {\n                         if let Some(ref fragment) = *fragment {\n-                            let url = match cache.extern_locations.get(krate) {\n+                            let url = match cache.extern_locations.get(&krate) {\n                                 Some(&(_, _, ExternalLocation::Local)) => {\n                                     let depth = CURRENT_DEPTH.with(|l| l.get());\n                                     \"../\".repeat(depth)"}, {"sha": "9cb0649b314f5293ad4a688d8152c6565fb616d8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 17, "deletions": 89, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -24,9 +24,10 @@ use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n \n+use std::cell::RefCell;\n+use std::collections::hash_map::Entry;\n use std::mem;\n use std::rc::Rc;\n-use std::{cell::RefCell, collections::hash_map::Entry};\n \n use crate::clean;\n use crate::clean::inline::build_external_trait;\n@@ -227,64 +228,6 @@ crate fn new_handler(\n     )\n }\n \n-/// This function is used to setup the lint initialization. By default, in rustdoc, everything\n-/// is \"allowed\". Depending if we run in test mode or not, we want some of them to be at their\n-/// default level. For example, the \"INVALID_CODEBLOCK_ATTRIBUTES\" lint is activated in both\n-/// modes.\n-///\n-/// A little detail easy to forget is that there is a way to set the lint level for all lints\n-/// through the \"WARNINGS\" lint. To prevent this to happen, we set it back to its \"normal\" level\n-/// inside this function.\n-///\n-/// It returns a tuple containing:\n-///  * Vector of tuples of lints' name and their associated \"max\" level\n-///  * HashMap of lint id with their associated \"max\" level\n-pub(crate) fn init_lints<F>(\n-    mut allowed_lints: Vec<String>,\n-    lint_opts: Vec<(String, lint::Level)>,\n-    filter_call: F,\n-) -> (Vec<(String, lint::Level)>, FxHashMap<lint::LintId, lint::Level>)\n-where\n-    F: Fn(&lint::Lint) -> Option<(String, lint::Level)>,\n-{\n-    let warnings_lint_name = lint::builtin::WARNINGS.name;\n-\n-    allowed_lints.push(warnings_lint_name.to_owned());\n-    allowed_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n-\n-    let lints = || {\n-        lint::builtin::HardwiredLints::get_lints()\n-            .into_iter()\n-            .chain(rustc_lint::SoftLints::get_lints().into_iter())\n-    };\n-\n-    let lint_opts = lints()\n-        .filter_map(|lint| {\n-            // Permit feature-gated lints to avoid feature errors when trying to\n-            // allow all lints.\n-            if lint.feature_gate.is_some() || allowed_lints.iter().any(|l| lint.name == l) {\n-                None\n-            } else {\n-                filter_call(lint)\n-            }\n-        })\n-        .chain(lint_opts.into_iter())\n-        .collect::<Vec<_>>();\n-\n-    let lint_caps = lints()\n-        .filter_map(|lint| {\n-            // We don't want to allow *all* lints so let's ignore\n-            // those ones.\n-            if allowed_lints.iter().any(|l| lint.name == l) {\n-                None\n-            } else {\n-                Some((lint::LintId::of(lint), lint::Allow))\n-            }\n-        })\n-        .collect();\n-    (lint_opts, lint_caps)\n-}\n-\n /// Parse, resolve, and typecheck the given crate.\n crate fn create_config(\n     RustdocOptions {\n@@ -313,37 +256,22 @@ crate fn create_config(\n     let cpath = Some(input.clone());\n     let input = Input::File(input);\n \n-    let broken_intra_doc_links = lint::builtin::BROKEN_INTRA_DOC_LINKS.name;\n-    let private_intra_doc_links = lint::builtin::PRIVATE_INTRA_DOC_LINKS.name;\n-    let missing_docs = rustc_lint::builtin::MISSING_DOCS.name;\n-    let missing_doc_example = rustc_lint::builtin::MISSING_DOC_CODE_EXAMPLES.name;\n-    let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n-    let no_crate_level_docs = rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS.name;\n-    let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n-    let invalid_html_tags = rustc_lint::builtin::INVALID_HTML_TAGS.name;\n-    let renamed_and_removed_lints = rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name;\n-    let non_autolinks = rustc_lint::builtin::NON_AUTOLINKS.name;\n-    let unknown_lints = rustc_lint::builtin::UNKNOWN_LINTS.name;\n-\n-    // In addition to those specific lints, we also need to allow those given through\n-    // command line, otherwise they'll get ignored and we don't want that.\n-    let lints_to_show = vec![\n-        broken_intra_doc_links.to_owned(),\n-        private_intra_doc_links.to_owned(),\n-        missing_docs.to_owned(),\n-        missing_doc_example.to_owned(),\n-        private_doc_tests.to_owned(),\n-        no_crate_level_docs.to_owned(),\n-        invalid_codeblock_attributes_name.to_owned(),\n-        invalid_html_tags.to_owned(),\n-        renamed_and_removed_lints.to_owned(),\n-        unknown_lints.to_owned(),\n-        non_autolinks.to_owned(),\n+    // By default, rustdoc ignores all lints.\n+    // Specifically unblock lints relevant to documentation or the lint machinery itself.\n+    let mut lints_to_show = vec![\n+        // it's unclear whether this should be part of rustdoc directly (#77364)\n+        rustc_lint::builtin::MISSING_DOCS.name.to_string(),\n+        // these are definitely not part of rustdoc, but we want to warn on them anyway.\n+        rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name.to_string(),\n+        rustc_lint::builtin::UNKNOWN_LINTS.name.to_string(),\n     ];\n+    lints_to_show.extend(crate::lint::RUSTDOC_LINTS.iter().map(|lint| lint.name.to_string()));\n \n-    let (lint_opts, lint_caps) = init_lints(lints_to_show, lint_opts, |lint| {\n+    let (lint_opts, lint_caps) = crate::lint::init_lints(lints_to_show, lint_opts, |lint| {\n         // FIXME: why is this necessary?\n-        if lint.name == broken_intra_doc_links || lint.name == invalid_codeblock_attributes_name {\n+        if lint.name == crate::lint::BROKEN_INTRA_DOC_LINKS.name\n+            || lint.name == crate::lint::INVALID_CODEBLOCK_ATTRIBUTES.name\n+        {\n             None\n         } else {\n             Some((lint.name_lower(), lint::Allow))\n@@ -383,7 +311,7 @@ crate fn create_config(\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n-        register_lints: None,\n+        register_lints: Some(box crate::lint::register_lints),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n             providers.lint_mod = |_, _| {};\n@@ -550,7 +478,7 @@ crate fn run_global_ctxt(\n             let help = \"The following guide may be of use:\\n\\\n                 https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\";\n             tcx.struct_lint_node(\n-                rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS,\n+                crate::lint::MISSING_CRATE_LEVEL_DOCS,\n                 ctxt.as_local_hir_id(m.def_id).unwrap(),\n                 |lint| {\n                     let mut diag ="}, {"sha": "27ce064669d2ca362e08ae7a7e1f9b2f15bf4560", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -26,8 +26,8 @@ use std::str;\n \n use crate::clean::Attributes;\n use crate::config::Options;\n-use crate::core::init_lints;\n use crate::html::markdown::{self, ErrorCodes, Ignore, LangString};\n+use crate::lint::init_lints;\n use crate::passes::span_of_attrs;\n \n #[derive(Clone, Default)]\n@@ -44,11 +44,14 @@ crate struct TestOptions {\n crate fn run(options: Options) -> Result<(), ErrorReported> {\n     let input = config::Input::File(options.input.clone());\n \n-    let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_codeblock_attributes_name = crate::lint::INVALID_CODEBLOCK_ATTRIBUTES.name;\n \n-    // In addition to those specific lints, we also need to allow those given through\n-    // command line, otherwise they'll get ignored and we don't want that.\n-    let allowed_lints = vec![invalid_codeblock_attributes_name.to_owned()];\n+    // See core::create_config for what's going on here.\n+    let allowed_lints = vec![\n+        invalid_codeblock_attributes_name.to_owned(),\n+        lint::builtin::UNKNOWN_LINTS.name.to_owned(),\n+        lint::builtin::RENAMED_AND_REMOVED_LINTS.name.to_owned(),\n+    ];\n \n     let (lint_opts, lint_caps) = init_lints(allowed_lints, options.lint_opts.clone(), |lint| {\n         if lint.name == invalid_codeblock_attributes_name {\n@@ -92,7 +95,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n         lint_caps,\n-        register_lints: None,\n+        register_lints: Some(box crate::lint::register_lints),\n         override_queries: None,\n         make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),"}, {"sha": "ab65c71d7d1af16f6063e04f01ef96d832b5c828", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -58,6 +58,7 @@ crate fn render<T: Print, S: Print>(\n     {style_files}\\\n     <script id=\\\"default-settings\\\"{default_settings}></script>\\\n     <script src=\\\"{static_root_path}storage{suffix}.js\\\"></script>\\\n+    <script src=\\\"{static_root_path}crates{suffix}.js\\\"></script>\\\n     <noscript><link rel=\\\"stylesheet\\\" href=\\\"{static_root_path}noscript{suffix}.css\\\"></noscript>\\\n     {css_extension}\\\n     {favicon}\\\n@@ -82,7 +83,7 @@ crate fn render<T: Print, S: Print>(\n     <div class=\\\"theme-picker\\\">\\\n         <button id=\\\"theme-picker\\\" aria-label=\\\"Pick another theme!\\\" aria-haspopup=\\\"menu\\\">\\\n             <img src=\\\"{static_root_path}brush{suffix}.svg\\\" \\\n-                 width=\\\"18\\\" \\\n+                 width=\\\"18\\\" height=\\\"18\\\" \\\n                  alt=\\\"Pick another theme!\\\">\\\n         </button>\\\n         <div id=\\\"theme-choices\\\" role=\\\"menu\\\"></div>\\\n@@ -102,7 +103,7 @@ crate fn render<T: Print, S: Print>(\n                 <button type=\\\"button\\\" class=\\\"help-button\\\">?</button>\n                 <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\">\\\n                     <img src=\\\"{static_root_path}wheel{suffix}.svg\\\" \\\n-                         width=\\\"18\\\" \\\n+                         width=\\\"18\\\" height=\\\"18\\\" \\\n                          alt=\\\"Change settings\\\">\\\n                 </a>\\\n             </div>\\\n@@ -112,10 +113,10 @@ crate fn render<T: Print, S: Print>(\n     <section id=\\\"search\\\" class=\\\"content hidden\\\"></section>\\\n     <section class=\\\"footer\\\"></section>\\\n     {after_content}\\\n-    <div id=\\\"rustdoc-vars\\\" data-root-path=\\\"{root_path}\\\" data-current-crate=\\\"{krate}\\\"></div>\n+    <div id=\\\"rustdoc-vars\\\" data-root-path=\\\"{root_path}\\\" data-current-crate=\\\"{krate}\\\" \\\n+       data-search-js=\\\"{root_path}search-index{suffix}.js\\\"></div>\n     <script src=\\\"{static_root_path}main{suffix}.js\\\"></script>\\\n     {extra_scripts}\\\n-    <script defer src=\\\"{root_path}search-index{suffix}.js\\\"></script>\\\n </body>\\\n </html>\",\n         css_extension = if layout.css_file_extension.is_some() {"}, {"sha": "f8ca259fb9ab56226c8a1143d5bde57495485003", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -21,7 +21,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::lint;\n use rustc_span::edition::Edition;\n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -721,7 +720,7 @@ impl<'tcx> ExtraInfo<'tcx> {\n             (None, None) => return,\n         };\n         self.tcx.struct_span_lint_hir(\n-            lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES,\n+            crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,\n             hir_id,\n             self.sp,\n             |lint| {"}, {"sha": "fbeeb2a6fa2f2177e63abce6f036369a030efafa", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1061,22 +1061,28 @@ themePicker.onblur = handleThemeButtonsBlur;\n         cx.shared.fs.write(&dst, v.as_bytes())?;\n     }\n \n-    // Update the search index\n+    // Update the search index and crate list.\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n     let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name.as_str()), &dst);\n     all_indexes.push(search_index);\n+    krates.push(krate.name.to_string());\n+    krates.sort();\n \n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n     {\n         let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n-        // \"addSearchOptions\" has to be called first so the crate filtering can be set before the\n-        // search might start (if it's set into the URL for example).\n-        v.push_str(\"\\\\\\n}');\\naddSearchOptions(searchIndex);initSearch(searchIndex);\");\n+        v.push_str(\"\\\\\\n}');\\ninitSearch(searchIndex);\");\n         cx.shared.fs.write(&dst, &v)?;\n     }\n+\n+    let crate_list_dst = cx.dst.join(&format!(\"crates{}.js\", cx.shared.resource_suffix));\n+    let crate_list =\n+        format!(\"window.ALL_CRATES = [{}];\", krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\"));\n+    cx.shared.fs.write(&crate_list_dst, &crate_list)?;\n+\n     if options.enable_index_page {\n         if let Some(index_page) = options.index_page.clone() {\n             let mut md_opts = options.clone();\n@@ -1098,9 +1104,6 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 extra_scripts: &[],\n                 static_extra_scripts: &[],\n             };\n-            krates.push(krate.name.to_string());\n-            krates.sort();\n-            krates.dedup();\n \n             let content = format!(\n                 \"<h1 class=\\\"fqn\\\">\\"}, {"sha": "89b1362b32b63bb159ad7b51262068f523589b0c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 56, "deletions": 42, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -42,6 +42,7 @@ if (!DOMTokenList.prototype.remove) {\n     if (rustdocVars) {\n         window.rootPath = rustdocVars.attributes[\"data-root-path\"].value;\n         window.currentCrate = rustdocVars.attributes[\"data-current-crate\"].value;\n+        window.searchJS = rustdocVars.attributes[\"data-search-js\"].value;\n     }\n     var sidebarVars = document.getElementById(\"sidebar-vars\");\n     if (sidebarVars) {\n@@ -1922,8 +1923,8 @@ function defocusSearchBar() {\n             return searchWords;\n         }\n \n-        function startSearch() {\n-            var callback = function() {\n+        function registerSearchEvents() {\n+            var searchAfter500ms = function() {\n                 clearInputTimeout();\n                 if (search_input.value.length === 0) {\n                     if (browserSupportsHistoryApi()) {\n@@ -1935,8 +1936,8 @@ function defocusSearchBar() {\n                     searchTimeout = setTimeout(search, 500);\n                 }\n             };\n-            search_input.onkeyup = callback;\n-            search_input.oninput = callback;\n+            search_input.onkeyup = searchAfter500ms;\n+            search_input.oninput = searchAfter500ms;\n             document.getElementsByClassName(\"search-form\")[0].onsubmit = function(e) {\n                 e.preventDefault();\n                 clearInputTimeout();\n@@ -1999,7 +2000,6 @@ function defocusSearchBar() {\n                     }\n                 });\n             }\n-            search();\n \n             // This is required in firefox to avoid this problem: Navigating to a search result\n             // with the keyboard, hitting enter, and then hitting back would take you back to\n@@ -2017,8 +2017,14 @@ function defocusSearchBar() {\n         }\n \n         index = buildIndex(rawSearchIndex);\n-        startSearch();\n+        registerSearchEvents();\n+        // If there's a search term in the URL, execute the search now.\n+        if (getQueryStringParams().search) {\n+            search();\n+        }\n+    };\n \n+    function addSidebarCrates(crates) {\n         // Draw a convenient sidebar of known crates if we have a listing\n         if (window.rootPath === \"../\" || window.rootPath === \"./\") {\n             var sidebar = document.getElementsByClassName(\"sidebar-elems\")[0];\n@@ -2029,24 +2035,13 @@ function defocusSearchBar() {\n                 var ul = document.createElement(\"ul\");\n                 div.appendChild(ul);\n \n-                var crates = [];\n-                for (var crate in rawSearchIndex) {\n-                    if (!hasOwnProperty(rawSearchIndex, crate)) {\n-                        continue;\n-                    }\n-                    crates.push(crate);\n-                }\n-                crates.sort();\n                 for (var i = 0; i < crates.length; ++i) {\n                     var klass = \"crate\";\n                     if (window.rootPath !== \"./\" && crates[i] === window.currentCrate) {\n                         klass += \" current\";\n                     }\n                     var link = document.createElement(\"a\");\n                     link.href = window.rootPath + crates[i] + \"/index.html\";\n-                    // The summary in the search index has HTML, so we need to\n-                    // dynamically render it as plaintext.\n-                    link.title = convertHTMLToPlaintext(rawSearchIndex[crates[i]].doc);\n                     link.className = klass;\n                     link.textContent = crates[i];\n \n@@ -2057,7 +2052,7 @@ function defocusSearchBar() {\n                 sidebar.appendChild(div);\n             }\n         }\n-    };\n+    }\n \n     /**\n      * Convert HTML to plaintext:\n@@ -2862,45 +2857,26 @@ function defocusSearchBar() {\n         }\n     }\n \n-    window.addSearchOptions = function(crates) {\n+    function addSearchOptions(crates) {\n         var elem = document.getElementById(\"crate-search\");\n \n         if (!elem) {\n             enableSearchInput();\n             return;\n         }\n-        var crates_text = [];\n-        if (Object.keys(crates).length > 1) {\n-            for (var crate in crates) {\n-                if (hasOwnProperty(crates, crate)) {\n-                    crates_text.push(crate);\n-                }\n-            }\n-        }\n-        crates_text.sort(function(a, b) {\n-            var lower_a = a.toLowerCase();\n-            var lower_b = b.toLowerCase();\n-\n-            if (lower_a < lower_b) {\n-                return -1;\n-            } else if (lower_a > lower_b) {\n-                return 1;\n-            }\n-            return 0;\n-        });\n         var savedCrate = getSettingValue(\"saved-filter-crate\");\n-        for (var i = 0, len = crates_text.length; i < len; ++i) {\n+        for (var i = 0, len = crates.length; i < len; ++i) {\n             var option = document.createElement(\"option\");\n-            option.value = crates_text[i];\n-            option.innerText = crates_text[i];\n+            option.value = crates[i];\n+            option.innerText = crates[i];\n             elem.appendChild(option);\n             // Set the crate filter from saved storage, if the current page has the saved crate\n             // filter.\n             //\n             // If not, ignore the crate filter -- we want to support filtering for crates on sites\n             // like doc.rust-lang.org where the crates may differ from page to page while on the\n             // same domain.\n-            if (crates_text[i] === savedCrate) {\n+            if (crates[i] === savedCrate) {\n                 elem.value = savedCrate;\n             }\n         }\n@@ -2969,6 +2945,44 @@ function defocusSearchBar() {\n         buildHelperPopup = function() {};\n     }\n \n+    function loadScript(url) {\n+        var script = document.createElement('script');\n+        script.src = url;\n+        document.head.append(script);\n+    }\n+\n+    function setupSearchLoader() {\n+        var searchLoaded = false;\n+        function loadSearch() {\n+            if (!searchLoaded) {\n+                searchLoaded = true;\n+                loadScript(window.searchJS);\n+            }\n+        }\n+\n+        // `crates{version}.js` should always be loaded before this script, so we can use it safely.\n+        addSearchOptions(window.ALL_CRATES);\n+        addSidebarCrates(window.ALL_CRATES);\n+\n+        search_input.addEventListener(\"focus\", function() {\n+            search_input.origPlaceholder = search_input.placeholder;\n+            search_input.placeholder = \"Type your search here.\";\n+            loadSearch();\n+        });\n+        search_input.addEventListener(\"blur\", function() {\n+            search_input.placeholder = search_input.origPlaceholder;\n+        });\n+        enableSearchInput();\n+\n+        var crateSearchDropDown = document.getElementById(\"crate-search\");\n+        crateSearchDropDown.addEventListener(\"focus\", loadSearch);\n+        var params = getQueryStringParams();\n+        if (params.search !== undefined) {\n+            loadSearch();\n+        }\n+    }\n+\n     onHashChange(null);\n     window.onhashchange = onHashChange;\n+    setupSearchLoader();\n }());"}, {"sha": "94c231cb33a8b1f7ac17484f29d299d4238fd855", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -6,6 +6,7 @@\n \tsrc: local('Fira Sans'),\n \t\turl(\"FiraSans-Regular.woff2\") format(\"woff2\"),\n \t\turl(\"FiraSans-Regular.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Fira Sans';\n@@ -14,6 +15,7 @@\n \tsrc: local('Fira Sans Medium'),\n \t\turl(\"FiraSans-Medium.woff2\") format(\"woff2\"),\n \t\turl(\"FiraSans-Medium.woff\") format('woff');\n+\tfont-display: swap;\n }\n \n /* See SourceSerifPro-LICENSE.txt for the Source Serif Pro license. */\n@@ -22,18 +24,21 @@\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n \tsrc: local('Source Serif Pro Italic'), url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 700;\n \tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n+\tfont-display: swap;\n }\n \n /* See SourceCodePro-LICENSE.txt for the Source Code Pro license. */\n@@ -44,12 +49,14 @@\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n \tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n+\tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n \tsrc: url(\"SourceCodePro-Semibold.woff\") format('woff');\n+\tfont-display: swap;\n }\n \n * {\n@@ -129,7 +136,7 @@ h1, h2, h3, h4,\n #source-sidebar, #sidebar-toggle,\n /* This selector is for the items listed in the \"all items\" page. */\n #main > ul.docblock > li > a {\n-\tfont-family: \"Fira Sans\", sans-serif;\n+\tfont-family: \"Fira Sans\", Arial;\n }\n \n .content ul.crate a.crate {\n@@ -475,7 +482,7 @@ h4 > code, h3 > code, .invisible > code {\n }\n #main > .since {\n \ttop: inherit;\n-\tfont-family: \"Fira Sans\", sans-serif;\n+\tfont-family: \"Fira Sans\", Arial;\n }\n \n .content table:not(.table-display) {\n@@ -684,6 +691,7 @@ a {\n \twidth: calc(100% - 63px);\n }\n #crate-search {\n+\tmin-width: 115px;\n \tmargin-top: 5px;\n \tpadding: 6px;\n \tpadding-right: 19px;\n@@ -1293,7 +1301,7 @@ h4 > .notable-traits {\n \n .help-button {\n \tright: 30px;\n-\tfont-family: \"Fira Sans\",sans-serif;\n+\tfont-family: \"Fira Sans\", Arial;\n \ttext-align: center;\n \tfont-size: 17px;\n }"}, {"sha": "e447b49c11a770deb4499984e08e29bb6e3bc022", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -45,6 +45,7 @@ extern crate rustc_infer;\n extern crate rustc_interface;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n+extern crate rustc_lint_defs;\n extern crate rustc_metadata;\n extern crate rustc_middle;\n extern crate rustc_mir;\n@@ -86,6 +87,7 @@ mod formats;\n // used by the error-index generator, so it needs to be public\n pub mod html;\n mod json;\n+crate mod lint;\n mod markdown;\n mod passes;\n mod theme;"}, {"sha": "e8806c1b6d7873976495798b86669562728b3c35", "filename": "src/librustdoc/lint.rs", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flint.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -0,0 +1,188 @@\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_lint::LintStore;\n+use rustc_lint_defs::{declare_tool_lint, Lint, LintId};\n+use rustc_session::{lint, Session};\n+\n+use std::lazy::SyncLazy as Lazy;\n+\n+/// This function is used to setup the lint initialization. By default, in rustdoc, everything\n+/// is \"allowed\". Depending if we run in test mode or not, we want some of them to be at their\n+/// default level. For example, the \"INVALID_CODEBLOCK_ATTRIBUTES\" lint is activated in both\n+/// modes.\n+///\n+/// A little detail easy to forget is that there is a way to set the lint level for all lints\n+/// through the \"WARNINGS\" lint. To prevent this to happen, we set it back to its \"normal\" level\n+/// inside this function.\n+///\n+/// It returns a tuple containing:\n+///  * Vector of tuples of lints' name and their associated \"max\" level\n+///  * HashMap of lint id with their associated \"max\" level\n+pub(crate) fn init_lints<F>(\n+    mut allowed_lints: Vec<String>,\n+    lint_opts: Vec<(String, lint::Level)>,\n+    filter_call: F,\n+) -> (Vec<(String, lint::Level)>, FxHashMap<lint::LintId, lint::Level>)\n+where\n+    F: Fn(&lint::Lint) -> Option<(String, lint::Level)>,\n+{\n+    let warnings_lint_name = lint::builtin::WARNINGS.name;\n+\n+    allowed_lints.push(warnings_lint_name.to_owned());\n+    allowed_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n+\n+    let lints = || {\n+        lint::builtin::HardwiredLints::get_lints()\n+            .into_iter()\n+            .chain(rustc_lint::SoftLints::get_lints().into_iter())\n+    };\n+\n+    let lint_opts = lints()\n+        .filter_map(|lint| {\n+            // Permit feature-gated lints to avoid feature errors when trying to\n+            // allow all lints.\n+            if lint.feature_gate.is_some() || allowed_lints.iter().any(|l| lint.name == l) {\n+                None\n+            } else {\n+                filter_call(lint)\n+            }\n+        })\n+        .chain(lint_opts.into_iter())\n+        .collect::<Vec<_>>();\n+\n+    let lint_caps = lints()\n+        .filter_map(|lint| {\n+            // We don't want to allow *all* lints so let's ignore\n+            // those ones.\n+            if allowed_lints.iter().any(|l| lint.name == l) {\n+                None\n+            } else {\n+                Some((lint::LintId::of(lint), lint::Allow))\n+            }\n+        })\n+        .collect();\n+    (lint_opts, lint_caps)\n+}\n+\n+macro_rules! declare_rustdoc_lint {\n+    ($(#[$attr:meta])* $name: ident, $level: ident, $descr: literal $(,)?) => {\n+        declare_tool_lint! {\n+            $(#[$attr])* pub rustdoc::$name, $level, $descr\n+        }\n+    }\n+}\n+\n+declare_rustdoc_lint! {\n+    /// The `broken_intra_doc_links` lint detects failures in resolving\n+    /// intra-doc link targets. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#broken_intra_doc_links\n+    BROKEN_INTRA_DOC_LINKS,\n+    Warn,\n+    \"failures in resolving intra-doc link targets\"\n+}\n+\n+declare_rustdoc_lint! {\n+    /// This is a subset of `broken_intra_doc_links` that warns when linking from\n+    /// a public item to a private one. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#private_intra_doc_links\n+    PRIVATE_INTRA_DOC_LINKS,\n+    Warn,\n+    \"linking from a public item to a private one\"\n+}\n+\n+declare_rustdoc_lint! {\n+    /// The `invalid_codeblock_attributes` lint detects code block attributes\n+    /// in documentation examples that have potentially mis-typed values. This\n+    /// is a `rustdoc` only lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_codeblock_attributes\n+    INVALID_CODEBLOCK_ATTRIBUTES,\n+    Warn,\n+    \"codeblock attribute looks a lot like a known one\"\n+}\n+\n+declare_rustdoc_lint! {\n+    /// The `missing_crate_level_docs` lint detects if documentation is\n+    /// missing at the crate root. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_crate_level_docs\n+    MISSING_CRATE_LEVEL_DOCS,\n+    Allow,\n+    \"detects crates with no crate-level documentation\"\n+}\n+\n+declare_rustdoc_lint! {\n+    /// The `missing_doc_code_examples` lint detects publicly-exported items\n+    /// without code samples in their documentation. This is a `rustdoc` only\n+    /// lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_doc_code_examples\n+    MISSING_DOC_CODE_EXAMPLES,\n+    Allow,\n+    \"detects publicly-exported items without code samples in their documentation\"\n+}\n+\n+declare_rustdoc_lint! {\n+    /// The `private_doc_tests` lint detects code samples in docs of private\n+    /// items not documented by `rustdoc`. This is a `rustdoc` only lint, see\n+    /// the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#private_doc_tests\n+    PRIVATE_DOC_TESTS,\n+    Allow,\n+    \"detects code samples in docs of private items not documented by rustdoc\"\n+}\n+\n+declare_rustdoc_lint! {\n+    /// The `invalid_html_tags` lint detects invalid HTML tags. This is a\n+    /// `rustdoc` only lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_html_tags\n+    INVALID_HTML_TAGS,\n+    Allow,\n+    \"detects invalid HTML tags in doc comments\"\n+}\n+\n+declare_rustdoc_lint! {\n+    /// The `non_autolinks` lint detects when a URL could be written using\n+    /// only angle brackets. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#non_autolinks\n+    NON_AUTOLINKS,\n+    Warn,\n+    \"detects URLs that could be written using only angle brackets\"\n+}\n+\n+crate static RUSTDOC_LINTS: Lazy<Vec<&'static Lint>> = Lazy::new(|| {\n+    vec![\n+        BROKEN_INTRA_DOC_LINKS,\n+        PRIVATE_INTRA_DOC_LINKS,\n+        MISSING_DOC_CODE_EXAMPLES,\n+        PRIVATE_DOC_TESTS,\n+        INVALID_CODEBLOCK_ATTRIBUTES,\n+        INVALID_HTML_TAGS,\n+        NON_AUTOLINKS,\n+        MISSING_CRATE_LEVEL_DOCS,\n+    ]\n+});\n+\n+crate fn register_lints(_sess: &Session, lint_store: &mut LintStore) {\n+    lint_store.register_lints(&**RUSTDOC_LINTS);\n+    lint_store.register_group(\n+        true,\n+        \"rustdoc\",\n+        None,\n+        RUSTDOC_LINTS.iter().map(|&lint| LintId::of(lint)).collect(),\n+    );\n+    for lint in &*RUSTDOC_LINTS {\n+        let name = lint.name_lower();\n+        lint_store.register_renamed(&name.replace(\"rustdoc::\", \"\"), &name);\n+    }\n+    lint_store\n+        .register_renamed(\"intra_doc_link_resolution_failure\", \"rustdoc::broken_intra_doc_links\");\n+}"}, {"sha": "38efecb393b79cd624bc823e7be3c53c6ca12909", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -16,10 +16,7 @@ use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::ty::TyCtxt;\n use rustc_middle::{bug, ty};\n use rustc_resolve::ParentScope;\n-use rustc_session::lint::{\n-    builtin::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS},\n-    Lint,\n-};\n+use rustc_session::lint::Lint;\n use rustc_span::hygiene::{MacroKind, SyntaxContext};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n@@ -37,6 +34,7 @@ use crate::clean::{self, utils::find_nearest_parent_module, Crate, Item, ItemLin\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::{markdown_links, MarkdownLink};\n+use crate::lint::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::passes::Pass;\n \n use super::span_of_attrs;"}, {"sha": "81104236314d96316761dc1e0ed7b8f6e2ba3e1c", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -68,8 +68,7 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n         return false;\n     }\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_local());\n-    let (level, source) =\n-        cx.tcx.lint_level_at_node(lint::builtin::MISSING_DOC_CODE_EXAMPLES, hir_id);\n+    let (level, source) = cx.tcx.lint_level_at_node(crate::lint::MISSING_DOC_CODE_EXAMPLES, hir_id);\n     level != lint::Level::Allow || matches!(source, LintLevelSource::Default)\n }\n \n@@ -91,15 +90,15 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n             cx.tcx.struct_span_lint_hir(\n-                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n+                crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n                 sp,\n                 |lint| lint.build(\"missing code example in this documentation\").emit(),\n             );\n         }\n     } else if tests.found_tests > 0 && !cx.cache.access_levels.is_public(item.def_id) {\n         cx.tcx.struct_span_lint_hir(\n-            lint::builtin::PRIVATE_DOC_TESTS,\n+            crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n             span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n             |lint| lint.build(\"documentation test in private item\").emit(),"}, {"sha": "27e669aa44fc0b65996eb48e9f4a4c0506046dc7", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -5,7 +5,6 @@ use crate::fold::DocFolder;\n use crate::html::markdown::opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n-use rustc_session::lint;\n use std::iter::Peekable;\n use std::str::CharIndices;\n \n@@ -183,7 +182,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     Some(sp) => sp,\n                     None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n                 };\n-                cx.tcx.struct_span_lint_hir(lint::builtin::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                cx.tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n                     lint.build(msg).emit()\n                 });\n             };"}, {"sha": "09a1959fa113c049cbd5bc3affdff5c485703d4f", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,7 +7,6 @@ use core::ops::Range;\n use pulldown_cmark::{Event, LinkType, Parser, Tag};\n use regex::Regex;\n use rustc_errors::Applicability;\n-use rustc_session::lint;\n \n crate const CHECK_NON_AUTOLINKS: Pass = Pass {\n     name: \"check-non-autolinks\",\n@@ -74,7 +73,7 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n                 let sp = super::source_span_for_markdown_range(cx, &dox, &range, &item.attrs)\n                     .or_else(|| span_of_attrs(&item.attrs))\n                     .unwrap_or(item.source.span());\n-                cx.tcx.struct_span_lint_hir(lint::builtin::NON_AUTOLINKS, hir_id, sp, |lint| {\n+                cx.tcx.struct_span_lint_hir(crate::lint::NON_AUTOLINKS, hir_id, sp, |lint| {\n                     lint.build(msg)\n                         .span_suggestion(\n                             sp,"}, {"sha": "0976515f4a42610f9f3eb8417c1edbacbdd3274b", "filename": "src/test/rustdoc-ui/assoc-item-not-in-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n #[derive(Debug)]\n /// Link to [`S::fmt`]"}, {"sha": "358871b532313e5668536932e78ca6fe04eca8b3", "filename": "src/test/rustdoc-ui/assoc-item-not-in-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// Link to [`S::fmt`]\n note: the lint level is defined here\n   --> $DIR/assoc-item-not-in-scope.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "023d620bea2225d13fa04217d591d26c2d424217", "filename": "src/test/rustdoc-ui/check-attr-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,6 +1,6 @@\n // compile-flags:--test\n \n-#![deny(invalid_codeblock_attributes)]\n+#![deny(rustdoc::invalid_codeblock_attributes)]\n \n /// foo\n ///"}, {"sha": "affd0372a1f5e6d49412d3d2ee70a52a934930f5", "filename": "src/test/rustdoc-ui/check-attr-test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -11,8 +11,8 @@ error: unknown attribute `compile-fail`. Did you mean `compile_fail`?\n note: the lint level is defined here\n  --> $DIR/check-attr-test.rs:3:9\n   |\n-3 | #![deny(invalid_codeblock_attributes)]\n-  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+3 | #![deny(rustdoc::invalid_codeblock_attributes)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = help: the code block will either not be tested if not marked as a rust one or won't fail if it compiles successfully\n \n error: unknown attribute `compilefail`. Did you mean `compile_fail`?"}, {"sha": "763bc4c6cddb90028ab956064225984c7f40fcc6", "filename": "src/test/rustdoc-ui/check-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(invalid_codeblock_attributes)]\n+#![deny(rustdoc::invalid_codeblock_attributes)]\n \n /// foo\n //~^ ERROR"}, {"sha": "9312cfb76f35f4a52e35bffb7242571b30f80819", "filename": "src/test/rustdoc-ui/check-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -13,8 +13,8 @@ LL | | /// ```\n note: the lint level is defined here\n   --> $DIR/check-attr.rs:1:9\n    |\n-LL | #![deny(invalid_codeblock_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::invalid_codeblock_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: the code block will either not be tested if not marked as a rust one or won't fail if it compiles successfully\n \n error: unknown attribute `compilefail`. Did you mean `compile_fail`?"}, {"sha": "9f5ccbc6687c2d986ec71c1cf39899f8967f62b4", "filename": "src/test/rustdoc-ui/check-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -21,7 +21,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: `#[deny(missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n+   = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?\n   --> $DIR/check-fail.rs:6:1\n@@ -37,7 +37,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: `#[deny(invalid_codeblock_attributes)]` implied by `#[deny(rustdoc)]`\n+   = note: `#[deny(rustdoc::invalid_codeblock_attributes)]` implied by `#[deny(rustdoc)]`\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?"}, {"sha": "e6ba9df9b0555df8c4f61fd1b3acaa91805207c9", "filename": "src/test/rustdoc-ui/check.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -21,6 +21,17 @@ warning: missing documentation for a function\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^\n \n+warning: no documentation found for this crate's top-level module\n+   |\n+note: the lint level is defined here\n+  --> $DIR/check.rs:7:9\n+   |\n+LL | #![warn(rustdoc)]\n+   |         ^^^^^^^\n+   = note: `#[warn(rustdoc::missing_crate_level_docs)]` implied by `#[warn(rustdoc)]`\n+   = help: The following guide may be of use:\n+           https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n+\n warning: missing code example in this documentation\n   --> $DIR/check.rs:4:1\n    |\n@@ -37,13 +48,13 @@ note: the lint level is defined here\n    |\n LL | #![warn(rustdoc)]\n    |         ^^^^^^^\n-   = note: `#[warn(missing_doc_code_examples)]` implied by `#[warn(rustdoc)]`\n+   = note: `#[warn(rustdoc::missing_doc_code_examples)]` implied by `#[warn(rustdoc)]`\n \n warning: missing code example in this documentation\n   --> $DIR/check.rs:9:1\n    |\n LL | pub fn foo() {}\n    | ^^^^^^^^^^^^^^^\n \n-warning: 4 warnings emitted\n+warning: 5 warnings emitted\n "}, {"sha": "09da124b16206c2210e08156388dac3770905185", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n /// [v2] //~ ERROR\n pub fn foo() {}"}, {"sha": "67d9c3989f5aeaee4d7eca0af371d907dae25e8a", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [v2]\n note: the lint level is defined here\n   --> $DIR/deny-intra-link-resolution-failure.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error"}, {"sha": "6812a454157b9a98b3ac5bc5ef1d68fb5628665d", "filename": "src/test/rustdoc-ui/doc-without-codeblock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(missing_doc_code_examples)] //~ ERROR missing code example in this documentation\n+#![deny(rustdoc::missing_doc_code_examples)] //~ ERROR missing code example in this documentation\n \n /// Some docs.\n //~^ ERROR missing code example in this documentation"}, {"sha": "aac537e9783cd7ae9519e368985dfe7f0516a97d", "filename": "src/test/rustdoc-ui/doc-without-codeblock.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,7 +1,7 @@\n error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:1:1\n    |\n-LL | / #![deny(missing_doc_code_examples)]\n+LL | / #![deny(rustdoc::missing_doc_code_examples)]\n LL | |\n LL | | /// Some docs.\n LL | |\n@@ -13,8 +13,8 @@ LL | | }\n note: the lint level is defined here\n   --> $DIR/doc-without-codeblock.rs:1:9\n    |\n-LL | #![deny(missing_doc_code_examples)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::missing_doc_code_examples)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:7:1"}, {"sha": "51922caeb2543a61304bcd6e2dfbcfc61b392b2a", "filename": "src/test/rustdoc-ui/intra-doc/alias-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n pub type TypeAlias = usize;\n "}, {"sha": "5e7ffeeb8a2198f86a766c403afd8eb01a6e5d7e", "filename": "src/test/rustdoc-ui/intra-doc/alias-ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [broken cross-reference](TypeAlias::hoge)\n note: the lint level is defined here\n   --> $DIR/alias-ice.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1f3dc722eff8d81f3c0a13586682bbab9a096571", "filename": "src/test/rustdoc-ui/intra-doc/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "0f23b9b8adf6721150a74dafccc7fab1c13eab2e", "filename": "src/test/rustdoc-ui/intra-doc/ambiguity.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [true]\n note: the lint level is defined here\n   --> $DIR/ambiguity.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@true]"}, {"sha": "009b291be1f084bfed0ef845d6a945bd3fa40dc7", "filename": "src/test/rustdoc-ui/intra-doc/anchors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n // A few tests on anchors.\n "}, {"sha": "97b0cea0c1e4d6731f50c3d63dab98f165c26882", "filename": "src/test/rustdoc-ui/intra-doc/anchors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// Or maybe [Foo::f#hola].\n note: the lint level is defined here\n   --> $DIR/anchors.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `hello#people#!` contains multiple anchors\n   --> $DIR/anchors.rs:31:28"}, {"sha": "862faa50b4ddd20bf7c9d3017a9715adec6878aa", "filename": "src/test/rustdoc-ui/intra-doc/broken-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fbroken-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fbroken-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fbroken-reexport.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,7 +1,7 @@\n // aux-build:intra-doc-broken.rs\n // check-pass\n \n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n extern crate intra_doc_broken;\n "}, {"sha": "596623190a33fa614d211bcd95b8c882eeaa5fa2", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n //~^ NOTE lint level is defined\n pub enum S {}\n "}, {"sha": "5d4d4a699e4f351f7811bd16a8c03efea2016594", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// Link to [struct@S]\n note: the lint level is defined here\n   --> $DIR/disambiguator-mismatch.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this link resolved to an enum, which is not a struct\n \n error: incompatible link kind for `S`"}, {"sha": "c0241b98b78c1f24904361ecc1020871a2d9bebd", "filename": "src/test/rustdoc-ui/intra-doc/double-anchor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,7 +4,7 @@ warning: `with#anchor#error` contains multiple anchors\n LL | /// docs [label][with#anchor#error]\n    |                  ^^^^^^^^^^^^^^^^^ contains invalid anchor\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "b29f7c29b5d86021aa9bc163a814dc7a82fdf0e3", "filename": "src/test/rustdoc-ui/intra-doc/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n //~^ NOTE lint level is defined\n \n // FIXME: this should say that it was skipped (maybe an allowed by default lint?)"}, {"sha": "061151720578be511db1f9a0e267bfd4c0503983", "filename": "src/test/rustdoc-ui/intra-doc/errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [path::to::nonexistent::module]\n note: the lint level is defined here\n   --> $DIR/errors.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unresolved link to `path::to::nonexistent::macro`\n   --> $DIR/errors.rs:11:6"}, {"sha": "3088bcd46531e9e7b4c1ed77b2f7466c75228fac", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,3 +1,3 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n //! [static@u8::MIN]\n //~^ ERROR incompatible link kind"}, {"sha": "d4dcc493c8b6a7befad9675021ed09c7877bb549", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | //! [static@u8::MIN]\n note: the lint level is defined here\n   --> $DIR/incompatible-primitive-disambiguator.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this link resolved to an associated constant, which is not a static\n \n error: aborting due to previous error"}, {"sha": "15e02925ed90decd0366af6a61e756205244aa7d", "filename": "src/test/rustdoc-ui/intra-doc/malformed-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n //! [Vec<] //~ ERROR\n //! [Vec<Box<T] //~ ERROR"}, {"sha": "5bc0f84e24d138a47bcb8df6777d4d8ff53cc9af", "filename": "src/test/rustdoc-ui/intra-doc/malformed-generics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | //! [Vec<]\n note: the lint level is defined here\n   --> $DIR/malformed-generics.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unresolved link to `Vec<Box<T`\n   --> $DIR/malformed-generics.rs:4:6"}, {"sha": "75159979e8890d10fd2368e5ec3eb88d2f17c0dd", "filename": "src/test/rustdoc-ui/intra-doc/non-path-primitives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n #![feature(intra_doc_pointers)]\n // These are links that could reasonably expected to work, but don't.\n "}, {"sha": "610c830560527035f65fe1d173ee235c134a94cf", "filename": "src/test/rustdoc-ui/intra-doc/non-path-primitives.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | //! [[T]::rotate_left]\n note: the lint level is defined here\n   --> $DIR/non-path-primitives.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `Z`"}, {"sha": "2c1a8b5357aa165c38b29a9f43e090878d330e7e", "filename": "src/test/rustdoc-ui/intra-doc/prim-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n //~^ NOTE lint level is defined\n \n /// [char]"}, {"sha": "e4bd9fd4b8f1a5bd82fd7f94f4b21b32cfa73f03", "filename": "src/test/rustdoc-ui/intra-doc/prim-conflict.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [char]\n note: the lint level is defined here\n   --> $DIR/prim-conflict.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]"}, {"sha": "cae5b1f20e6c35f0419095d2968fae0cac3abd6e", "filename": "src/test/rustdoc-ui/intra-doc/private.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe] [DontDocMe::f]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(private_intra_doc_links)]` on by default\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n \n warning: public documentation for `DocMe` links to private item `DontDocMe::f`"}, {"sha": "05b202e37fbcb0f938ff771479cf5665ac013374", "filename": "src/test/rustdoc-ui/intra-doc/private.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe] [DontDocMe::f]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(private_intra_doc_links)]` on by default\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n \n warning: public documentation for `DocMe` links to private item `DontDocMe::f`"}, {"sha": "041ec293259233d535f182b521a8b1843ae9e478", "filename": "src/test/rustdoc-ui/intra-doc/span-ice-55723.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n // An error in calculating spans while reporting intra-doc link resolution errors caused rustdoc to\n // attempt to slice in the middle of a multibyte character. See"}, {"sha": "bf4ab9fdd18b1b8b650e667942144f46ce3d0d91", "filename": "src/test/rustdoc-ui/intra-doc/span-ice-55723.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// \uff08arr[i]\uff09\n note: the lint level is defined here\n   --> $DIR/span-ice-55723.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error"}, {"sha": "9565830930f414402ce16569bfcabe6fb09ed60e", "filename": "src/test/rustdoc-ui/intra-doc/unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: --extern zip=whatever.rlib\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n /// See [zip] crate.\n //~^ ERROR unresolved\n pub struct ArrayZip;"}, {"sha": "5c0df1d1b9e4f4e89c6f366aaad06ae2cadfd773", "filename": "src/test/rustdoc-ui/intra-doc/unused-extern-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// See [zip] crate.\n note: the lint level is defined here\n   --> $DIR/unused-extern-crate.rs:2:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error"}, {"sha": "d46df92649d172f9d725280fd4ea75329f83862e", "filename": "src/test/rustdoc-ui/intra-doc/warning-crlf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,7 +4,7 @@ warning: unresolved link to `error`\n LL | /// [error]\n    |      ^^^^^ no item named `error` in scope\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error1`"}, {"sha": "135c432e05342a788179ce610e1b0c0746d17961", "filename": "src/test/rustdoc-ui/intra-doc/warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,7 +4,7 @@ warning: unresolved link to `Foo::baz`\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                       ^^^^^^^^ the struct `Foo` has no field or associated item named `baz`\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n \n warning: unresolved link to `Bar::foo`\n   --> $DIR/warning.rs:3:35"}, {"sha": "cec44b6d2ca62fa263631e563201118867d5f2ee", "filename": "src/test/rustdoc-ui/invalid-html-tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(invalid_html_tags)]\n+#![deny(rustdoc::invalid_html_tags)]\n \n //! <p>\ud83d\udca9<p>\n //~^ ERROR unclosed HTML tag `p`"}, {"sha": "335e100c89d890c5d82155416762d0479f255bdf", "filename": "src/test/rustdoc-ui/invalid-html-tags.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | //! <p>\ud83d\udca9<p>\n note: the lint level is defined here\n   --> $DIR/invalid-html-tags.rs:1:9\n    |\n-LL | #![deny(invalid_html_tags)]\n-   |         ^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::invalid_html_tags)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unclosed HTML tag `p`\n   --> $DIR/invalid-html-tags.rs:3:9"}, {"sha": "000b6a329c1a7ea869a8f11789fdf5c9f2bd4901", "filename": "src/test/rustdoc-ui/issue-58473-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![deny(private_doc_tests)]\n+#![deny(rustdoc::private_doc_tests)]\n \n mod foo {\n     /**"}, {"sha": "457987e207496096cb1ac16b0298af6b2679970d", "filename": "src/test/rustdoc-ui/issue-74134.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |          ^^^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(private_intra_doc_links)]` on by default\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n \n warning: 1 warning emitted"}, {"sha": "07aebc3541fe32185e159e190fb0daf3a2c6b807", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |          ^^^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(private_intra_doc_links)]` on by default\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n \n warning: 1 warning emitted"}, {"sha": "6f8a20f7d53f0ada2627b7458d5c7f8c2ef00089", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: `#[deny(missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n+   = note: `#[deny(rustdoc::missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n \n error: documentation test in private item\n   --> $DIR/lint-group.rs:19:1\n@@ -26,7 +26,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: `#[deny(private_doc_tests)]` implied by `#[deny(rustdoc)]`\n+   = note: `#[deny(rustdoc::private_doc_tests)]` implied by `#[deny(rustdoc)]`\n \n error: missing code example in this documentation\n   --> $DIR/lint-group.rs:26:1\n@@ -45,7 +45,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: `#[deny(broken_intra_doc_links)]` implied by `#[deny(rustdoc)]`\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(rustdoc)]`\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unclosed HTML tag `unknown`\n@@ -59,7 +59,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: `#[deny(invalid_html_tags)]` implied by `#[deny(rustdoc)]`\n+   = note: `#[deny(rustdoc::invalid_html_tags)]` implied by `#[deny(rustdoc)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "8d727b0d0b5500dc8aed76a93dbdc135adfee4f0", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,5 +1,5 @@\n #![deny(missing_docs)]\n-#![deny(missing_doc_code_examples)]\n+#![deny(rustdoc::missing_doc_code_examples)]\n \n //! crate level doc\n //! ```\n@@ -19,7 +19,7 @@ fn test() {\n mod module1 { //~ ERROR\n }\n \n-#[allow(missing_doc_code_examples)]\n+#[allow(rustdoc::missing_doc_code_examples)]\n /// doc\n mod module2 {\n "}, {"sha": "370c577f85d8fb1bf91a54660fc314cb0e0d217c", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -8,8 +8,8 @@ LL | | }\n note: the lint level is defined here\n   --> $DIR/lint-missing-doc-code-example.rs:2:9\n    |\n-LL | #![deny(missing_doc_code_examples)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::missing_doc_code_examples)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing code example in this documentation\n   --> $DIR/lint-missing-doc-code-example.rs:37:3"}, {"sha": "3939ec6827adea26c8369e901bd356895a326a67", "filename": "src/test/rustdoc-ui/no-crate-level-doc-lint.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,3 +1,5 @@\n-#![deny(missing_crate_level_docs)]\n+// error-pattern: no documentation found\n+#![deny(rustdoc::missing_crate_level_docs)]\n+//^~ NOTE defined here\n \n pub fn foo() {}"}, {"sha": "55ead1a55cfcd76aabf517a93f55bf56f367268a", "filename": "src/test/rustdoc-ui/no-crate-level-doc-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,10 +1,10 @@\n error: no documentation found for this crate's top-level module\n    |\n note: the lint level is defined here\n-  --> $DIR/no-crate-level-doc-lint.rs:1:9\n+  --> $DIR/no-crate-level-doc-lint.rs:2:9\n    |\n-LL | #![deny(missing_crate_level_docs)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::missing_crate_level_docs)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: The following guide may be of use:\n            https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n "}, {"sha": "a1f9f8dca083ecf7c7eda6a5f3e129133a99d1f0", "filename": "src/test/rustdoc-ui/private-doc-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fprivate-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fprivate-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-doc-test.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![deny(private_doc_tests)]\n+#![deny(rustdoc::private_doc_tests)]\n \n mod foo {\n     /// private doc test"}, {"sha": "1a3d6cc636d31e37c78ba94af760fe90c3557614", "filename": "src/test/rustdoc-ui/private-item-doc-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(private_doc_tests)]\n+#![deny(rustdoc::private_doc_tests)]\n \n mod foo {\n     /// private doc test"}, {"sha": "5df6132987c9fe4f6eda4291cbf97f538ebc7e72", "filename": "src/test/rustdoc-ui/private-item-doc-test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -11,8 +11,8 @@ LL | |     /// ```\n note: the lint level is defined here\n   --> $DIR/private-item-doc-test.rs:1:9\n    |\n-LL | #![deny(private_doc_tests)]\n-   |         ^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::private_doc_tests)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f2e66b77bf3eaf54e1b5b98e5ed1bb78974d0d7f", "filename": "src/test/rustdoc-ui/pub-export-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n /// [aloha]\n //~^ ERROR unresolved link to `aloha`"}, {"sha": "c6be9c6a9f504a39ed7183128b1545623ed02de7", "filename": "src/test/rustdoc-ui/pub-export-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [aloha]\n note: the lint level is defined here\n   --> $DIR/pub-export-lint.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error"}, {"sha": "71bd2c522ff86e295ffddf8f05a5f32cf59bb855", "filename": "src/test/rustdoc-ui/reference-link-reports-error-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n /// Links to [a] [link][a]\n /// And also a [third link][a]"}, {"sha": "b46a51e93fb8be41cc1484e5cc6dd6f43bc1f6e9", "filename": "src/test/rustdoc-ui/reference-link-reports-error-once.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [a]: ref\n note: the lint level is defined here\n   --> $DIR/reference-link-reports-error-once.rs:1:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `ref2`"}, {"sha": "e81e034465d7f9589c04cbde87378ac4d7aa772a", "filename": "src/test/rustdoc-ui/reference-links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-links.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,5 +1,5 @@\n // Test that errors point to the reference, not to the title text.\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n //! Links to [a] [link][a]\n //!\n //! [a]: std::process::Comman"}, {"sha": "c98a2fd7ce69020e8034dabbea1c36fed4c782e2", "filename": "src/test/rustdoc-ui/reference-links.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-links.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Freference-links.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-links.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | //! [a]: std::process::Comman\n note: the lint level is defined here\n   --> $DIR/reference-links.rs:2:9\n    |\n-LL | #![deny(broken_intra_doc_links)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6d4bad16aadc299e97ada5c4186894610aece680", "filename": "src/test/rustdoc-ui/renamed-lint-still-applies.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -0,0 +1,5 @@\n+// compile-args: --crate-type lib\n+#![deny(broken_intra_doc_links)]\n+//~^ WARNING renamed\n+//! [x]\n+//~^ ERROR unresolved link"}, {"sha": "e14cbfa1726c3eedf60f508829091816944b7ced", "filename": "src/test/rustdoc-ui/renamed-lint-still-applies.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -0,0 +1,23 @@\n+warning: lint `broken_intra_doc_links` has been renamed to `rustdoc::broken_intra_doc_links`\n+  --> $DIR/renamed-lint-still-applies.rs:2:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `rustdoc::broken_intra_doc_links`\n+   |\n+   = note: `#[warn(renamed_and_removed_lints)]` on by default\n+\n+error: unresolved link to `x`\n+  --> $DIR/renamed-lint-still-applies.rs:4:6\n+   |\n+LL | //! [x]\n+   |      ^ no item named `x` in scope\n+   |\n+note: the lint level is defined here\n+  --> $DIR/renamed-lint-still-applies.rs:2:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "d2c78bc477410489814fa631bab847f78a8362e3", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -4,5 +4,14 @@\n //~^ NOTE lint level is defined\n #![deny(x)]\n //~^ ERROR unknown lint\n+#![deny(rustdoc::x)]\n+//~^ ERROR unknown lint: `rustdoc::x`\n #![deny(intra_doc_link_resolution_failure)]\n-//~^ ERROR lint `intra_doc_link_resolution_failure` has been renamed\n+//~^ ERROR renamed to `rustdoc::broken_intra_doc_links`\n+\n+#![deny(non_autolinks)]\n+//~^ ERROR renamed to `rustdoc::non_autolinks`\n+\n+// Explicitly don't try to handle this case, it was never valid\n+#![deny(rustdoc::intra_doc_link_resolution_failure)]\n+//~^ ERROR unknown lint"}, {"sha": "0f31673fb47f27512e0dac0eab2de3b54c81ee55", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -10,19 +10,37 @@ note: the lint level is defined here\n LL | #![deny(unknown_lints)]\n    |         ^^^^^^^^^^^^^\n \n-error: lint `intra_doc_link_resolution_failure` has been renamed to `broken_intra_doc_links`\n+error: unknown lint: `rustdoc::x`\n   --> $DIR/unknown-renamed-lints.rs:7:9\n    |\n+LL | #![deny(rustdoc::x)]\n+   |         ^^^^^^^^^^\n+\n+error: lint `intra_doc_link_resolution_failure` has been renamed to `rustdoc::broken_intra_doc_links`\n+  --> $DIR/unknown-renamed-lints.rs:9:9\n+   |\n LL | #![deny(intra_doc_link_resolution_failure)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `broken_intra_doc_links`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `rustdoc::broken_intra_doc_links`\n    |\n note: the lint level is defined here\n   --> $DIR/unknown-renamed-lints.rs:3:9\n    |\n LL | #![deny(renamed_and_removed_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: lint `non_autolinks` has been renamed to `rustdoc::non_autolinks`\n+  --> $DIR/unknown-renamed-lints.rs:12:9\n+   |\n+LL | #![deny(non_autolinks)]\n+   |         ^^^^^^^^^^^^^ help: use the new name: `rustdoc::non_autolinks`\n+\n+error: unknown lint: `rustdoc::intra_doc_link_resolution_failure`\n+  --> $DIR/unknown-renamed-lints.rs:16:9\n+   |\n+LL | #![deny(rustdoc::intra_doc_link_resolution_failure)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: Compilation failed, aborting rustdoc\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "d0b43de2f0e0ec9f669165ca03dc85edda4bd7a0", "filename": "src/test/rustdoc-ui/url-improvements.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Furl-improvements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Furl-improvements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Furl-improvements.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,4 +1,4 @@\n-#![deny(non_autolinks)]\n+#![deny(rustdoc::non_autolinks)]\n \n /// [http://aa.com](http://aa.com)\n //~^ ERROR unneeded long form for URL\n@@ -59,7 +59,7 @@ pub fn c() {}\n /// [should_not.lint](should_not.lint)\n pub fn everything_is_fine_here() {}\n \n-#[allow(non_autolinks)]\n+#[allow(rustdoc::non_autolinks)]\n pub mod foo {\n     /// https://somewhere.com/a?hello=12&bye=11#xyz\n     pub fn bar() {}"}, {"sha": "f377973656a8392ef32c36b0ba988b5309c75237", "filename": "src/test/rustdoc-ui/url-improvements.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Furl-improvements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc-ui%2Furl-improvements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Furl-improvements.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -7,8 +7,8 @@ LL | /// [http://aa.com](http://aa.com)\n note: the lint level is defined here\n   --> $DIR/url-improvements.rs:1:9\n    |\n-LL | #![deny(non_autolinks)]\n-   |         ^^^^^^^^^^^^^\n+LL | #![deny(rustdoc::non_autolinks)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unneeded long form for URL\n   --> $DIR/url-improvements.rs:5:5"}, {"sha": "ffa02b0c635b3d94877231398f6307d5b5571765", "filename": "src/test/rustdoc/intra-doc/non-path-primitives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-linelength\n #![crate_name = \"foo\"]\n #![feature(intra_doc_pointers)]\n-#![deny(broken_intra_doc_links)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n // @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.rotate_left\"]' 'slice::rotate_left'\n //! [slice::rotate_left]"}, {"sha": "cc29f9de7fb4a45216be336069ce7ed1b2b26caa", "filename": "src/test/ui/lifetimes/undeclared-lifetime-used-in-debug-macro-issue-70152.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -0,0 +1,16 @@\n+#[derive(Eq, PartialEq)]\n+struct Test {\n+    a: &'b str,\n+    //~^ ERROR use of undeclared lifetime name `'b`\n+    //~| ERROR use of undeclared lifetime name `'b`\n+}\n+\n+trait T {\n+    fn foo(&'static self) {}\n+}\n+\n+impl T for Test {\n+    fn foo(&'b self) {} //~ ERROR use of undeclared lifetime name `'b`\n+}\n+\n+fn main() {}"}, {"sha": "30142e24cd5f11a3fcd644c07ad2aea73a3e9805", "filename": "src/test/ui/lifetimes/undeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -0,0 +1,40 @@\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:13:13\n+   |\n+LL |     fn foo(&'b self) {}\n+   |             ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> T for Test {\n+   |     ^^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn foo<'b>(&'b self) {}\n+   |           ^^^^\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:3:9\n+   |\n+LL | struct Test {\n+   |            - help: consider introducing lifetime `'b` here: `<'b>`\n+LL |     a: &'b str,\n+   |         ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:3:9\n+   |\n+LL | #[derive(Eq, PartialEq)]\n+   |          -- lifetime `'b` is missing in item created through this procedural macro\n+LL | struct Test {\n+LL |     a: &'b str,\n+   |         ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "71e88bd7f54a5a65dd09d2dd0eb55f8e4a5862d4", "filename": "src/test/ui/lint/rustdoc-renamed.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.rs?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -0,0 +1,14 @@\n+#![crate_type = \"lib\"]\n+\n+#![deny(unknown_lints)]\n+#![deny(renamed_and_removed_lints)]\n+//~^ NOTE lint level is defined\n+\n+// both allowed, since the compiler doesn't yet know what rustdoc lints are valid\n+#![deny(rustdoc::x)]\n+#![deny(rustdoc::intra_doc_link_resolution_failure)]\n+\n+#![deny(intra_doc_link_resolution_failure)]\n+//~^ ERROR removed: use `rustdoc::broken_intra_doc_links`\n+#![deny(non_autolinks)]\n+//~^ ERROR removed: use `rustdoc::non_autolinks`"}, {"sha": "a7fe3e29d5be08a463ec60f3acb484eb609a744a", "filename": "src/test/ui/lint/rustdoc-renamed.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f258d543e1ac7d0b94435972331e85da8c509/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frustdoc-renamed.stderr?ref=ec7f258d543e1ac7d0b94435972331e85da8c509", "patch": "@@ -0,0 +1,20 @@\n+error: lint `intra_doc_link_resolution_failure` has been removed: use `rustdoc::broken_intra_doc_links` instead\n+  --> $DIR/rustdoc-renamed.rs:11:9\n+   |\n+LL | #![deny(intra_doc_link_resolution_failure)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rustdoc-renamed.rs:4:9\n+   |\n+LL | #![deny(renamed_and_removed_lints)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lint `non_autolinks` has been removed: use `rustdoc::non_autolinks` instead\n+  --> $DIR/rustdoc-renamed.rs:13:9\n+   |\n+LL | #![deny(non_autolinks)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}