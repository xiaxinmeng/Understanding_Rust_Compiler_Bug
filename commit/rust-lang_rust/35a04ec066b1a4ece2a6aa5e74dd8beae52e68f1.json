{"sha": "35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTA0ZWMwNjZiMWE0ZWNlMmE2YWE1ZTc0ZGQ4YmVhZTUyZTY4ZjE=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-08-16T13:34:47Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-08-16T14:07:45Z"}, "message": "show inherent and trait impls of structs and enums", "tree": {"sha": "bafe9221a84b463233c412dfbfc43f95541b6aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bafe9221a84b463233c412dfbfc43f95541b6aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1", "html_url": "https://github.com/rust-lang/rust/commit/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c65a059840dd2092a00e90337a8221cd832c456", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c65a059840dd2092a00e90337a8221cd832c456", "html_url": "https://github.com/rust-lang/rust/commit/2c65a059840dd2092a00e90337a8221cd832c456"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "3f4c43aee8fba445f6cafbd0bd577983a6e28d5f", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1", "patch": "@@ -68,6 +68,15 @@ impl CrateImplBlocks {\n         )\n     }\n \n+    pub fn all_impls<'a>(&'a self) -> impl Iterator<Item = ImplBlock> + 'a {\n+        self.impls.values().chain(self.impls_by_trait.values()).flat_map(|i| i.iter()).map(\n+            move |(module_id, impl_id)| {\n+                let module = Module { krate: self.krate, module_id: *module_id };\n+                ImplBlock::from_id(module, *impl_id)\n+            },\n+        )\n+    }\n+\n     fn collect_recursive(&mut self, db: &impl HirDatabase, module: Module) {\n         let module_impl_blocks = db.impls_in_module(module);\n "}, {"sha": "638f4cbde272797e327a00925765ae9dbcb4f5ed", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=35a04ec066b1a4ece2a6aa5e74dd8beae52e68f1", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::HirDatabase, source_binder};\n+use hir::{db::HirDatabase, source_binder, ApplicationTy, Ty, TypeCtor};\n use ra_db::SourceDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n@@ -47,7 +47,8 @@ fn impls_for_def(\n \n     Some(\n         impls\n-            .lookup_impl_blocks(&ty)\n+            .all_impls()\n+            .filter(|impl_block| is_equal_for_find_impls(&ty, &impl_block.target_ty(db)))\n             .map(|imp| NavigationTarget::from_impl_block(db, imp))\n             .collect(),\n     )\n@@ -71,6 +72,19 @@ fn impls_for_trait(\n     )\n }\n \n+fn is_equal_for_find_impls(original_ty: &Ty, impl_ty: &Ty) -> bool {\n+    match (original_ty, impl_ty) {\n+        (Ty::Apply(a_original_ty), Ty::Apply(ApplicationTy { ctor, parameters })) => match ctor {\n+            TypeCtor::Ref(..) => match parameters.as_single() {\n+                Ty::Apply(a_ty) => a_original_ty.ctor == a_ty.ctor,\n+                _ => false,\n+            },\n+            _ => a_original_ty.ctor == *ctor,\n+        },\n+        _ => false,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::mock_analysis::analysis_and_position;\n@@ -173,4 +187,23 @@ mod tests {\n             &[\"impl IMPL_BLOCK FileId(2) [0; 31)\", \"impl IMPL_BLOCK FileId(3) [0; 31)\"],\n         );\n     }\n+\n+    #[test]\n+    fn goto_implementation_all_impls() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            trait T {}\n+            struct Foo<|>;\n+            impl Foo {}\n+            impl T for Foo {}\n+            impl T for &Foo {}\n+            \",\n+            &[\n+                \"impl IMPL_BLOCK FileId(1) [23; 34)\",\n+                \"impl IMPL_BLOCK FileId(1) [35; 52)\",\n+                \"impl IMPL_BLOCK FileId(1) [53; 71)\",\n+            ],\n+        );\n+    }\n }"}]}