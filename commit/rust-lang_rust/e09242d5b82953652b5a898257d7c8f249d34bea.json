{"sha": "e09242d5b82953652b5a898257d7c8f249d34bea", "node_id": "C_kwDOAAsO6NoAKGUwOTI0MmQ1YjgyOTUzNjUyYjVhODk4MjU3ZDdjOGYyNDlkMzRiZWE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:43:45Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:47:53Z"}, "message": "Final bits", "tree": {"sha": "a0546767565f42fce9a57cf9c9f896c08f35c796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0546767565f42fce9a57cf9c9f896c08f35c796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09242d5b82953652b5a898257d7c8f249d34bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09242d5b82953652b5a898257d7c8f249d34bea", "html_url": "https://github.com/rust-lang/rust/commit/e09242d5b82953652b5a898257d7c8f249d34bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09242d5b82953652b5a898257d7c8f249d34bea/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1767dbb42374646fd5331d4946dc233e68d0ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1767dbb42374646fd5331d4946dc233e68d0ed5", "html_url": "https://github.com/rust-lang/rust/commit/f1767dbb42374646fd5331d4946dc233e68d0ed5"}], "stats": {"total": 158, "additions": 124, "deletions": 34}, "files": [{"sha": "1c01e78abd422ed097b440c49ce32bb56a54863b", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -272,9 +272,12 @@ impl<'tcx> BorrowExplanation<'tcx> {\n \n                 for extra in extra_info {\n                     match extra {\n-                        _ => {}\n+                        ExtraConstraintInfo::PlaceholderFromPredicate(span) => {\n+                            err.span_note(*span, format!(\"due to current limitations in the borrow checker, this implies a `'static` lifetime\"));\n+                        }\n                     }\n                 }\n+\n                 self.add_lifetime_bound_suggestion_to_diagnostic(err, &category, span, region_name);\n             }\n             _ => {}"}, {"sha": "244e6e3422d83d0dcdee8ff0b7214727e530cb1c", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -246,7 +246,9 @@ enum Trace<'tcx> {\n }\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub enum ExtraConstraintInfo {}\n+pub enum ExtraConstraintInfo {\n+    PlaceholderFromPredicate(Span),\n+}\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Creates a new region inference context with a total of\n@@ -2028,7 +2030,17 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 .collect::<Vec<_>>()\n         );\n \n-        let extra_info = vec![];\n+        let mut extra_info = vec![];\n+        for constraint in path.iter() {\n+            let outlived = constraint.sub;\n+            let Some(origin) = self.var_infos.get(outlived) else { continue; };\n+            let RegionVariableOrigin::Nll(NllRegionVariableOrigin::Placeholder(p)) = origin.origin else { continue; };\n+            debug!(?constraint, ?p);\n+            let ConstraintCategory::Predicate(span) = constraint.category else { continue; };\n+            extra_info.push(ExtraConstraintInfo::PlaceholderFromPredicate(span));\n+            // We only want to point to one\n+            break;\n+        }\n \n         // We try to avoid reporting a `ConstraintCategory::Predicate` as our best constraint.\n         // Instead, we use it to produce an improved `ObligationCauseCode`."}, {"sha": "8a3972a12c5431cfbe2a189e99185e088fe0daf7", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     /// constraints should occur within this method so that those\n     /// constraints can be properly localized!**\n     #[instrument(skip(self, op), level = \"trace\")]\n-    pub(super) fn fully_perform_op<R, Op>(\n+    pub(super) fn fully_perform_op<R: fmt::Debug, Op>(\n         &mut self,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n@@ -39,6 +39,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n         let TypeOpOutput { output, constraints, error_info } = op.fully_perform(self.infcx)?;\n \n+        debug!(?output, ?constraints);\n+\n         if let Some(data) = constraints {\n             self.push_region_constraints(locations, category, data);\n         }"}, {"sha": "71eae0583cb483870b4a612d8442a36436602310", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         }\n     }\n \n-    pub(super) fn convert(&mut self, query_constraint: &QueryOutlivesConstraint<'tcx>) {\n+    fn convert(&mut self, query_constraint: &QueryOutlivesConstraint<'tcx>) {\n         debug!(\"generate: constraints at: {:#?}\", self.locations);\n \n         // Extract out various useful fields we'll need below."}, {"sha": "56e83489879516f0659329050dfb4848fa218c40", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -130,7 +130,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let region_constraints = self.with_region_constraints(|region_constraints| {\n             make_query_region_constraints(\n                 tcx,\n-                region_obligations.iter().map(|r_o| (r_o.sup_type, r_o.sub_region)),\n+                region_obligations\n+                    .iter()\n+                    .map(|r_o| (r_o.sup_type, r_o.sub_region, r_o.origin.to_constraint_category())),\n                 region_constraints,\n             )\n         });\n@@ -630,7 +632,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n /// creates query region constraints.\n pub fn make_query_region_constraints<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>)>,\n+    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>, ConstraintCategory<'tcx>)>,\n     region_constraints: &RegionConstraintData<'tcx>,\n ) -> QueryRegionConstraints<'tcx> {\n     let RegionConstraintData { constraints, verifys, givens, member_constraints } =\n@@ -644,6 +646,7 @@ pub fn make_query_region_constraints<'tcx>(\n     let outlives: Vec<_> = constraints\n         .iter()\n         .map(|(k, origin)| {\n+            // no bound vars in the code above\n             let constraint = ty::Binder::dummy(match *k {\n                 // Swap regions because we are going from sub (<=) to outlives\n                 // (>=).\n@@ -659,17 +662,13 @@ pub fn make_query_region_constraints<'tcx>(\n                 }\n                 Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n             });\n-\n             (constraint, origin.to_constraint_category())\n         })\n         .chain(\n             outlives_obligations\n                 // no bound vars in the code above\n-                .map(|(ty, r)| {\n-                    (\n-                        ty::Binder::dummy(ty::OutlivesPredicate(ty.into(), r)),\n-                        ConstraintCategory::BoringNoLocation,\n-                    )\n+                .map(|(ty, r, constraint_category)| {\n+                    (ty::Binder::dummy(ty::OutlivesPredicate(ty.into(), r)), constraint_category)\n                 }),\n         )\n         .collect();"}, {"sha": "0002d37753688d2e6ea12d66efd4093de049e143", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -433,6 +433,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n     pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n         match self {\n             Self::Subtype(type_trace) => type_trace.cause.to_constraint_category(),\n+            Self::AscribeUserTypeProvePredicate(span) => ConstraintCategory::Predicate(*span),\n             _ => ConstraintCategory::BoringNoLocation,\n         }\n     }"}, {"sha": "18988861add136646170b71408ee69b9efc297e0", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -23,7 +23,7 @@ impl<F, G> CustomTypeOp<F, G> {\n     }\n }\n \n-impl<'tcx, F, R, G> super::TypeOp<'tcx> for CustomTypeOp<F, G>\n+impl<'tcx, F, R: fmt::Debug, G> super::TypeOp<'tcx> for CustomTypeOp<F, G>\n where\n     F: for<'a, 'cx> FnOnce(&'a InferCtxt<'cx, 'tcx>) -> Fallible<InferOk<'tcx, R>>,\n     G: Fn() -> String,\n@@ -89,8 +89,8 @@ pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n         infcx.tcx,\n         region_obligations\n             .iter()\n-            .map(|r_o| (r_o.sup_type, r_o.sub_region))\n-            .map(|(ty, r)| (infcx.resolve_vars_if_possible(ty), r)),\n+            .map(|r_o| (r_o.sup_type, r_o.sub_region, r_o.origin.to_constraint_category()))\n+            .map(|(ty, r, cc)| (infcx.resolve_vars_if_possible(ty), r, cc)),\n         &region_constraint_data,\n     );\n "}, {"sha": "8a79165702ca3f6f52252063db779268241c0a9b", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -26,7 +26,7 @@ pub use rustc_middle::traits::query::type_op::*;\n /// extract out the resulting region constraints (or an error if it\n /// cannot be completed).\n pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n-    type Output;\n+    type Output: fmt::Debug;\n     type ErrorInfo;\n \n     /// Processes the operation and all resulting obligations,"}, {"sha": "1a63f853211ed77ba87a71df5abbaec89a6c22f4", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::{DefiningAnchor, InferCtxt, TyCtxtInferExt};\n-use rustc_infer::traits::TraitEngineExt as _;\n+use rustc_infer::traits::{ObligationCauseCode, TraitEngineExt as _};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, Subst, UserSelfTy, UserSubsts};\n use rustc_middle::ty::{\n@@ -22,6 +22,7 @@ use rustc_trait_selection::traits::query::type_op::subtype::Subtype;\n use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{Normalized, Obligation, ObligationCause, TraitEngine};\n use std::fmt;\n+use std::iter::zip;\n \n pub(crate) fn provide(p: &mut Providers) {\n     *p = Providers {\n@@ -61,14 +62,15 @@ pub fn type_op_ascribe_user_type_with_span<'a, 'tcx: 'a>(\n         mir_ty, def_id, user_substs\n     );\n \n-    let mut cx = AscribeUserTypeCx { infcx, param_env, fulfill_cx };\n-    cx.relate_mir_and_user_ty(mir_ty, def_id, user_substs, span)?;\n+    let mut cx = AscribeUserTypeCx { infcx, param_env, span: span.unwrap_or(DUMMY_SP), fulfill_cx };\n+    cx.relate_mir_and_user_ty(mir_ty, def_id, user_substs)?;\n     Ok(())\n }\n \n struct AscribeUserTypeCx<'me, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n+    span: Span,\n     fulfill_cx: &'me mut dyn TraitEngine<'tcx>,\n }\n \n@@ -79,7 +81,7 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n     {\n         self.infcx\n             .partially_normalize_associated_types_in(\n-                ObligationCause::misc(DUMMY_SP, hir::CRATE_HIR_ID),\n+                ObligationCause::misc(self.span, hir::CRATE_HIR_ID),\n                 self.param_env,\n                 value,\n             )\n@@ -91,18 +93,13 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n         T: ToTrace<'tcx>,\n     {\n         self.infcx\n-            .at(&ObligationCause::dummy(), self.param_env)\n+            .at(&ObligationCause::dummy_with_span(self.span), self.param_env)\n             .relate(a, variance, b)?\n             .into_value_registering_obligations(self.infcx, self.fulfill_cx);\n         Ok(())\n     }\n \n-    fn prove_predicate(&mut self, predicate: Predicate<'tcx>, span: Option<Span>) {\n-        let cause = if let Some(span) = span {\n-            ObligationCause::dummy_with_span(span)\n-        } else {\n-            ObligationCause::dummy()\n-        };\n+    fn prove_predicate(&mut self, predicate: Predicate<'tcx>, cause: ObligationCause<'tcx>) {\n         self.fulfill_cx.register_predicate_obligation(\n             self.infcx,\n             Obligation::new(cause, self.param_env, predicate),\n@@ -126,7 +123,6 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n         mir_ty: Ty<'tcx>,\n         def_id: DefId,\n         user_substs: UserSubsts<'tcx>,\n-        span: Option<Span>,\n     ) -> Result<(), NoSolution> {\n         let UserSubsts { user_self_ty, substs } = user_substs;\n         let tcx = self.tcx();\n@@ -145,10 +141,20 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n         // outlives\" error messages.\n         let instantiated_predicates =\n             self.tcx().predicates_of(def_id).instantiate(self.tcx(), substs);\n+\n+        let cause = ObligationCause::dummy_with_span(self.span);\n+\n         debug!(?instantiated_predicates);\n-        for instantiated_predicate in instantiated_predicates.predicates {\n-            let instantiated_predicate = self.normalize(instantiated_predicate);\n-            self.prove_predicate(instantiated_predicate, span);\n+        for (instantiated_predicate, predicate_span) in\n+            zip(instantiated_predicates.predicates, instantiated_predicates.spans)\n+        {\n+            let span = if self.span == DUMMY_SP { predicate_span } else { self.span };\n+            let cause = ObligationCause::new(\n+                span,\n+                hir::CRATE_HIR_ID,\n+                ObligationCauseCode::AscribeUserTypeProvePredicate(predicate_span),\n+            );\n+            self.prove_predicate(instantiated_predicate, cause);\n         }\n \n         if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n@@ -161,7 +167,7 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n             self.prove_predicate(\n                 ty::Binder::dummy(ty::PredicateKind::WellFormed(impl_self_ty.into()))\n                     .to_predicate(self.tcx()),\n-                span,\n+                cause.clone(),\n             );\n         }\n \n@@ -178,7 +184,7 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n         // which...could happen with normalization...\n         self.prove_predicate(\n             ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into())).to_predicate(self.tcx()),\n-            span,\n+            cause,\n         );\n         Ok(())\n     }"}, {"sha": "719d1bd5a4c7dabf518cdb41e5718b511632d482", "filename": "src/test/ui/generic-associated-types/bugs/hrtb-implied-1.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -0,0 +1,35 @@\n+// check-fail\n+// known-bug\n+\n+// This gives us problems because `for<'a> I::Item<'a>: Debug` should mean \"for\n+// all 'a where I::Item<'a> is WF\", but really means \"for all 'a possible\"\n+\n+use std::fmt::Debug;\n+\n+pub trait LendingIterator {\n+    type Item<'this>\n+    where\n+        Self: 'this;\n+}\n+\n+pub struct WindowsMut<'x> {\n+    slice: &'x (),\n+}\n+\n+impl<'y> LendingIterator for WindowsMut<'y> {\n+    type Item<'this> = &'this mut () where 'y: 'this;\n+}\n+\n+fn print_items<I>(_iter: I)\n+where\n+    I: LendingIterator,\n+    for<'a> I::Item<'a>: Debug,\n+{\n+}\n+\n+fn main() {\n+    let slice = &mut ();\n+    //~^ temporary value dropped while borrowed\n+    let windows = WindowsMut { slice };\n+    print_items::<WindowsMut<'_>>(windows);\n+}"}, {"sha": "414999881d4701cb5ab2a7e72b72e86ad1e7934a", "filename": "src/test/ui/generic-associated-types/bugs/hrtb-implied-1.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -0,0 +1,20 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/hrtb-implied-1.rs:31:22\n+   |\n+LL |     let slice = &mut ();\n+   |                      ^^ creates a temporary which is freed while still in use\n+...\n+LL |     print_items::<WindowsMut<'_>>(windows);\n+   |     -------------------------------------- argument requires that borrow lasts for `'static`\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n+  --> $DIR/hrtb-implied-1.rs:26:26\n+   |\n+LL |     for<'a> I::Item<'a>: Debug,\n+   |                          ^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "f5c10f3ddea0ea0686342e06ab87b16a6b4d63fb", "filename": "src/test/ui/nll/local-outlives-static-via-hrtb.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e09242d5b82953652b5a898257d7c8f249d34bea/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e09242d5b82953652b5a898257d7c8f249d34bea/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr?ref=e09242d5b82953652b5a898257d7c8f249d34bea", "patch": "@@ -9,6 +9,12 @@ LL |     assert_static_via_hrtb(&local);\n LL |     assert_static_via_hrtb_with_assoc_type(&&local);\n LL | }\n    | - `local` dropped here while still borrowed\n+   |\n+note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n+  --> $DIR/local-outlives-static-via-hrtb.rs:15:53\n+   |\n+LL | fn assert_static_via_hrtb<G>(_: G) where for<'a> G: Outlives<'a> {}\n+   |                                                     ^^^^^^^^^^^^\n \n error[E0597]: `local` does not live long enough\n   --> $DIR/local-outlives-static-via-hrtb.rs:25:45\n@@ -20,6 +26,12 @@ LL |     assert_static_via_hrtb_with_assoc_type(&&local);\n    |     argument requires that `local` is borrowed for `'static`\n LL | }\n    | - `local` dropped here while still borrowed\n+   |\n+note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n+  --> $DIR/local-outlives-static-via-hrtb.rs:19:20\n+   |\n+LL |     for<'a> &'a T: Reference<AssociatedType = &'a ()>,\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}