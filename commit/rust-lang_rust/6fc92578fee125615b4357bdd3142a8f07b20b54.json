{"sha": "6fc92578fee125615b4357bdd3142a8f07b20b54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYzkyNTc4ZmVlMTI1NjE1YjQzNTdiZGQzMTQyYThmMDdiMjBiNTQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T15:40:26Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T21:30:49Z"}, "message": "serialize: fix fallout", "tree": {"sha": "28abdb35190578bad82b1397254911c34029255c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28abdb35190578bad82b1397254911c34029255c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fc92578fee125615b4357bdd3142a8f07b20b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc92578fee125615b4357bdd3142a8f07b20b54", "html_url": "https://github.com/rust-lang/rust/commit/6fc92578fee125615b4357bdd3142a8f07b20b54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fc92578fee125615b4357bdd3142a8f07b20b54/comments", "author": null, "committer": null, "parents": [{"sha": "4bfaa9397857b5b49657e3596e33800dbf35ade4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfaa9397857b5b49657e3596e33800dbf35ade4", "html_url": "https://github.com/rust-lang/rust/commit/4bfaa9397857b5b49657e3596e33800dbf35ade4"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "71117c7fe128fe2cb28e715cd79b45c1ba1289b4", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fc92578fee125615b4357bdd3142a8f07b20b54/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc92578fee125615b4357bdd3142a8f07b20b54/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=6fc92578fee125615b4357bdd3142a8f07b20b54", "patch": "@@ -1123,12 +1123,25 @@ impl Json {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<'a> ops::Index<&'a str, Json>  for Json {\n     fn index(&self, idx: & &str) -> &Json {\n         self.find(*idx).unwrap()\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<'a> ops::Index<&'a str>  for Json {\n+    type Output = Json;\n+\n+    fn index(&self, idx: & &str) -> &Json {\n+        self.find(*idx).unwrap()\n+    }\n+}\n+\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl ops::Index<uint, Json> for Json {\n     fn index<'a>(&'a self, idx: &uint) -> &'a Json {\n         match self {\n@@ -1138,6 +1151,18 @@ impl ops::Index<uint, Json> for Json {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl ops::Index<uint> for Json {\n+    type Output = Json;\n+\n+    fn index<'a>(&'a self, idx: &uint) -> &'a Json {\n+        match self {\n+            &Json::Array(ref v) => v.index(idx),\n+            _ => panic!(\"can only index Json with uint if it is an array\")\n+        }\n+    }\n+}\n+\n /// The output of the streaming parser.\n #[deriving(PartialEq, Clone, Show)]\n pub enum JsonEvent {"}]}