{"sha": "dbf545730849375ce43f593432f2bff5eddd3eec", "node_id": "C_kwDOAAsO6NoAKGRiZjU0NTczMDg0OTM3NWNlNDNmNTkzNDMyZjJiZmY1ZWRkZDNlZWM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T17:11:41Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T17:11:41Z"}, "message": "Introduce FunctionDebugContext\n\nThis will make it easier to move TyCtxt requiring operations before clif\nir compilation.", "tree": {"sha": "2ac2a1c87aa232e796b6b840bc9b402830805a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac2a1c87aa232e796b6b840bc9b402830805a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf545730849375ce43f593432f2bff5eddd3eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf545730849375ce43f593432f2bff5eddd3eec", "html_url": "https://github.com/rust-lang/rust/commit/dbf545730849375ce43f593432f2bff5eddd3eec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf545730849375ce43f593432f2bff5eddd3eec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312563f3c46c52e60afd499788b4950248e2c8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/312563f3c46c52e60afd499788b4950248e2c8d4", "html_url": "https://github.com/rust-lang/rust/commit/312563f3c46c52e60afd499788b4950248e2c8d4"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "73af2ea33be3a324eeee339cfc744051dc1dbe53", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbf545730849375ce43f593432f2bff5eddd3eec/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf545730849375ce43f593432f2bff5eddd3eec/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=dbf545730849375ce43f593432f2bff5eddd3eec", "patch": "@@ -214,10 +214,10 @@ fn compile_fn<'tcx>(\n     let unwind_context = &mut cx.unwind_context;\n     cx.profiler.verbose_generic_activity(\"generate debug info\").run(|| {\n         if let Some(debug_context) = debug_context {\n-            debug_context.define_function(\n+            debug_context.define_function(codegened_func.symbol_name.name).finalize(\n+                debug_context,\n                 tcx,\n                 codegened_func.func_id,\n-                codegened_func.symbol_name.name,\n                 context,\n                 codegened_func.function_span,\n                 &codegened_func.source_info_set,"}, {"sha": "0726807000da6e41a05a1283d3563de849203845", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dbf545730849375ce43f593432f2bff5eddd3eec/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf545730849375ce43f593432f2bff5eddd3eec/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=dbf545730849375ce43f593432f2bff5eddd3eec", "patch": "@@ -10,7 +10,9 @@ use crate::prelude::*;\n use cranelift_codegen::ir::Endianness;\n use cranelift_codegen::isa::TargetIsa;\n \n-use gimli::write::{Address, AttributeValue, DwarfUnit, LineProgram, LineString, Range, RangeList};\n+use gimli::write::{\n+    Address, AttributeValue, DwarfUnit, LineProgram, LineString, Range, RangeList, UnitEntryId,\n+};\n use gimli::{Encoding, Format, LineEncoding, RunTimeEndian};\n \n pub(crate) use emit::{DebugReloc, DebugRelocName};\n@@ -23,6 +25,10 @@ pub(crate) struct DebugContext {\n     unit_range_list: RangeList,\n }\n \n+pub(crate) struct FunctionDebugContext {\n+    entry_id: UnitEntryId,\n+}\n+\n impl DebugContext {\n     pub(crate) fn new(tcx: TyCtxt<'_>, isa: &dyn TargetIsa) -> Self {\n         let encoding = Encoding {\n@@ -93,17 +99,7 @@ impl DebugContext {\n         DebugContext { endian, dwarf, unit_range_list: RangeList(Vec::new()) }\n     }\n \n-    pub(crate) fn define_function(\n-        &mut self,\n-        tcx: TyCtxt<'_>,\n-        func_id: FuncId,\n-        name: &str,\n-        context: &Context,\n-        function_span: Span,\n-        source_info_set: &indexmap::IndexSet<SourceInfo>,\n-    ) {\n-        let symbol = func_id.as_u32() as usize;\n-\n+    pub(crate) fn define_function(&mut self, name: &str) -> FunctionDebugContext {\n         // FIXME: add to appropriate scope instead of root\n         let scope = self.dwarf.unit.root();\n \n@@ -114,15 +110,37 @@ impl DebugContext {\n         entry.set(gimli::DW_AT_name, AttributeValue::StringRef(name_id));\n         entry.set(gimli::DW_AT_linkage_name, AttributeValue::StringRef(name_id));\n \n-        let end =\n-            self.create_debug_lines(tcx, symbol, entry_id, context, function_span, source_info_set);\n+        FunctionDebugContext { entry_id }\n+    }\n+}\n+\n+impl FunctionDebugContext {\n+    pub(crate) fn finalize(\n+        self,\n+        debug_context: &mut DebugContext,\n+        tcx: TyCtxt<'_>,\n+        func_id: FuncId,\n+        context: &Context,\n+        function_span: Span,\n+        source_info_set: &indexmap::IndexSet<SourceInfo>,\n+    ) {\n+        let symbol = func_id.as_u32() as usize;\n+\n+        let end = debug_context.create_debug_lines(\n+            tcx,\n+            symbol,\n+            self.entry_id,\n+            context,\n+            function_span,\n+            source_info_set,\n+        );\n \n-        self.unit_range_list.0.push(Range::StartLength {\n+        debug_context.unit_range_list.0.push(Range::StartLength {\n             begin: Address::Symbol { symbol, addend: 0 },\n             length: u64::from(end),\n         });\n \n-        let func_entry = self.dwarf.unit.get_mut(entry_id);\n+        let func_entry = debug_context.dwarf.unit.get_mut(self.entry_id);\n         // Gdb requires both DW_AT_low_pc and DW_AT_high_pc. Otherwise the DW_TAG_subprogram is skipped.\n         func_entry.set(\n             gimli::DW_AT_low_pc,"}]}