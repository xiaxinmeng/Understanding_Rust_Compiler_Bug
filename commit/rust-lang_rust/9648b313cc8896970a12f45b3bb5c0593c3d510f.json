{"sha": "9648b313cc8896970a12f45b3bb5c0593c3d510f", "node_id": "C_kwDOAAsO6NoAKDk2NDhiMzEzY2M4ODk2OTcwYTEyZjQ1YjNiYjVjMDU5M2MzZDUxMGY", "commit": {"author": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2022-01-22T16:14:09Z"}, "committer": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2022-01-25T07:43:30Z"}, "message": "Impl {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}Assign<$t> for Wrapping<$t>\n\nAnalog to 1c0dc1810d778bb6fea16aac02cafc5aa2e84b11 #92356", "tree": {"sha": "c6c9b8068e03464a8d67efc06500cdc3bef14724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c9b8068e03464a8d67efc06500cdc3bef14724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9648b313cc8896970a12f45b3bb5c0593c3d510f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9648b313cc8896970a12f45b3bb5c0593c3d510f", "html_url": "https://github.com/rust-lang/rust/commit/9648b313cc8896970a12f45b3bb5c0593c3d510f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9648b313cc8896970a12f45b3bb5c0593c3d510f/comments", "author": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf72996eda4f8af19b0ca7235c6f62e0245a313", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "html_url": "https://github.com/rust-lang/rust/commit/ecf72996eda4f8af19b0ca7235c6f62e0245a313"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "64cf7ac347a13a52d7d93351e189f4e18edb47b6", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9648b313cc8896970a12f45b3bb5c0593c3d510f/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9648b313cc8896970a12f45b3bb5c0593c3d510f/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=9648b313cc8896970a12f45b3bb5c0593c3d510f", "patch": "@@ -239,6 +239,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const AddAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn add_assign(&mut self, other: $t) {\n+                *self = *self + Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Sub for Wrapping<$t> {\n@@ -262,6 +272,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const SubAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn sub_assign(&mut self, other: $t) {\n+                *self = *self - Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Mul for Wrapping<$t> {\n@@ -285,6 +305,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const MulAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn mul_assign(&mut self, other: $t) {\n+                *self = *self * Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Div for Wrapping<$t> {\n@@ -308,6 +338,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const DivAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn div_assign(&mut self, other: $t) {\n+                *self = *self / Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Rem for Wrapping<$t> {\n@@ -331,6 +371,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const RemAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn rem_assign(&mut self, other: $t) {\n+                *self = *self % Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Not for Wrapping<$t> {\n@@ -367,6 +417,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXorAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitxor_assign(&mut self, other: $t) {\n+                *self = *self ^ Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const BitOr for Wrapping<$t> {\n@@ -390,6 +450,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOrAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitor_assign(&mut self, other: $t) {\n+                *self = *self | Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const BitAnd for Wrapping<$t> {\n@@ -413,6 +483,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.61.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAndAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitand_assign(&mut self, other: $t) {\n+                *self = *self & Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Neg for Wrapping<$t> {"}]}