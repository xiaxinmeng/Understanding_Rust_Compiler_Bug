{"sha": "41d35a97f9f33e265de53b8f04abe307d7616641", "node_id": "C_kwDOAAsO6NoAKDQxZDM1YTk3ZjlmMzNlMjY1ZGU1M2I4ZjA0YWJlMzA3ZDc2MTY2NDE", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-24T22:18:53Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T15:14:15Z"}, "message": "jsondocck: Find path to Id's not in index", "tree": {"sha": "f88771e6edd7f31bce683aac4ee9f34edb3924fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f88771e6edd7f31bce683aac4ee9f34edb3924fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41d35a97f9f33e265de53b8f04abe307d7616641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41d35a97f9f33e265de53b8f04abe307d7616641", "html_url": "https://github.com/rust-lang/rust/commit/41d35a97f9f33e265de53b8f04abe307d7616641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41d35a97f9f33e265de53b8f04abe307d7616641/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7", "html_url": "https://github.com/rust-lang/rust/commit/5f1bc6fc5e362c5955f6a06a7cf21e62b97c86c7"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "95ea8866609d09689e969d33fb47dc3b1245bffb", "filename": "src/tools/jsondoclint/src/json_find.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/41d35a97f9f33e265de53b8f04abe307d7616641/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d35a97f9f33e265de53b8f04abe307d7616641/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs?ref=41d35a97f9f33e265de53b8f04abe307d7616641", "patch": "@@ -0,0 +1,74 @@\n+use std::fmt::Write;\n+\n+use serde_json::Value;\n+\n+#[derive(Debug, Clone)]\n+pub enum SelectorPart {\n+    Field(String),\n+    Index(usize),\n+}\n+\n+pub type Selector = Vec<SelectorPart>;\n+\n+pub fn to_jsonpath(sel: &Selector) -> String {\n+    let mut s = String::from(\"$\");\n+    for part in sel {\n+        match part {\n+            SelectorPart::Field(name) => {\n+                if is_jsonpath_safe(name) {\n+                    write!(&mut s, \".{}\", name).unwrap();\n+                } else {\n+                    // This is probably wrong in edge cases, but all Id's are\n+                    // just ascii alphanumerics, `-` `_`, and `:`\n+                    write!(&mut s, \"[{name:?}]\").unwrap();\n+                }\n+            }\n+            SelectorPart::Index(idx) => write!(&mut s, \"[{idx}]\").unwrap(),\n+        }\n+    }\n+    s\n+}\n+\n+fn is_jsonpath_safe(s: &str) -> bool {\n+    s.chars().all(|c| c.is_ascii_alphanumeric() || c == '_')\n+}\n+\n+pub fn find_selector(haystack: &Value, needle: &Value) -> Vec<Selector> {\n+    let mut result = Vec::new();\n+    let mut sel = Selector::new();\n+    find_selector_recursive(haystack, needle, &mut result, &mut sel);\n+    result\n+}\n+\n+fn find_selector_recursive(\n+    haystack: &Value,\n+    needle: &Value,\n+    result: &mut Vec<Selector>,\n+    pos: &mut Selector,\n+) {\n+    if needle == haystack {\n+        result.push(pos.clone());\n+        // Haystack cant both contain needle and be needle\n+    } else {\n+        match haystack {\n+            Value::Null => {}\n+            Value::Bool(_) => {}\n+            Value::Number(_) => {}\n+            Value::String(_) => {}\n+            Value::Array(arr) => {\n+                for (idx, subhaystack) in arr.iter().enumerate() {\n+                    pos.push(SelectorPart::Index(idx));\n+                    find_selector_recursive(subhaystack, needle, result, pos);\n+                    pos.pop().unwrap();\n+                }\n+            }\n+            Value::Object(obj) => {\n+                for (key, subhaystack) in obj {\n+                    pos.push(SelectorPart::Field(key.clone()));\n+                    find_selector_recursive(subhaystack, needle, result, pos);\n+                    pos.pop().unwrap();\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "1d02482421ba46dd7b2da1d9de68ff3f347e499f", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/41d35a97f9f33e265de53b8f04abe307d7616641/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d35a97f9f33e265de53b8f04abe307d7616641/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=41d35a97f9f33e265de53b8f04abe307d7616641", "patch": "@@ -3,8 +3,10 @@ use std::env;\n use anyhow::{anyhow, bail, Result};\n use fs_err as fs;\n use rustdoc_json_types::{Crate, Id, FORMAT_VERSION};\n+use serde_json::Value;\n \n pub(crate) mod item_kind;\n+mod json_find;\n mod validator;\n \n #[derive(Debug)]\n@@ -21,8 +23,10 @@ enum ErrorKind {\n \n fn main() -> Result<()> {\n     let path = env::args().nth(1).ok_or_else(|| anyhow!(\"no path given\"))?;\n-    let contents = fs::read_to_string(path)?;\n+    let contents = fs::read_to_string(&path)?;\n     let krate: Crate = serde_json::from_str(&contents)?;\n+    // TODO: Only load if nessessary.\n+    let krate_json: Value = serde_json::from_str(&contents)?;\n     assert_eq!(krate.format_version, FORMAT_VERSION);\n \n     let mut validator = validator::Validator::new(&krate);\n@@ -31,11 +35,29 @@ fn main() -> Result<()> {\n     if !validator.errs.is_empty() {\n         for err in validator.errs {\n             match err.kind {\n-                ErrorKind::NotFound => eprintln!(\"{}: Not Found\", err.id.0),\n+                ErrorKind::NotFound => {\n+                    let sels =\n+                        json_find::find_selector(&krate_json, &Value::String(err.id.0.clone()));\n+                    match &sels[..] {\n+                        [] => unreachable!(\n+                            \"id must be in crate, or it wouldn't be reported as not found\"\n+                        ),\n+                        [sel] => eprintln!(\n+                            \"{} not in index or paths, but refered to at '{}'\",\n+                            err.id.0,\n+                            json_find::to_jsonpath(&sel)\n+                        ),\n+                        [sel, ..] => eprintln!(\n+                            \"{} not in index or paths, but refered to at '{}' and more\",\n+                            err.id.0,\n+                            json_find::to_jsonpath(&sel)\n+                        ),\n+                    }\n+                }\n                 ErrorKind::Custom(msg) => eprintln!(\"{}: {}\", err.id.0, msg),\n             }\n         }\n-        bail!(\"Errors validating json\");\n+        bail!(\"Errors validating json {path}\");\n     }\n \n     Ok(())"}]}