{"sha": "78c65a52db0016f489862ecea92a09ad66a2b960", "node_id": "C_kwDOAAsO6NoAKDc4YzY1YTUyZGIwMDE2ZjQ4OTg2MmVjZWE5MmEwOWFkNjZhMmI5NjA", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T19:20:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T19:20:08Z"}, "message": "Merge new_metadata into codegen_allocator", "tree": {"sha": "b5e4db99724f287f91fdfa5ab9fe7939fe6af7ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5e4db99724f287f91fdfa5ab9fe7939fe6af7ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c65a52db0016f489862ecea92a09ad66a2b960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c65a52db0016f489862ecea92a09ad66a2b960", "html_url": "https://github.com/rust-lang/rust/commit/78c65a52db0016f489862ecea92a09ad66a2b960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c65a52db0016f489862ecea92a09ad66a2b960/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab72301d9089761766b389df209986c2bc38e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab72301d9089761766b389df209986c2bc38e5d", "html_url": "https://github.com/rust-lang/rust/commit/fab72301d9089761766b389df209986c2bc38e5d"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "58996a9db78ad4e0dfbd315ea85af833e7137413", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=78c65a52db0016f489862ecea92a09ad66a2b960", "patch": "@@ -139,14 +139,12 @@ impl CodegenBackend for GccCodegenBackend {\n }\n \n impl ExtraBackendMethods for GccCodegenBackend {\n-    fn new_metadata<'tcx>(&self, _tcx: TyCtxt<'tcx>, _mod_name: &str) -> Self::Module {\n-        GccContext {\n+    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) -> Self::Module {\n+        let mut mods = GccContext {\n             context: Context::default(),\n-        }\n-    }\n-\n-    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, mods: &mut Self::Module, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) {\n-        unsafe { allocator::codegen(tcx, mods, module_name, kind, has_alloc_error_handler) }\n+        };\n+        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, has_alloc_error_handler); }\n+        mods\n     }\n \n     fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (ModuleCodegen<Self::Module>, u64) {"}, {"sha": "b0359239569549b460d26dadca79c0e0396a65c2", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=78c65a52db0016f489862ecea92a09ad66a2b960", "patch": "@@ -104,19 +104,18 @@ impl Drop for TimeTraceProfiler {\n }\n \n impl ExtraBackendMethods for LlvmCodegenBackend {\n-    fn new_metadata(&self, tcx: TyCtxt<'_>, mod_name: &str) -> ModuleLlvm {\n-        ModuleLlvm::new_metadata(tcx, mod_name)\n-    }\n-\n     fn codegen_allocator<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        module_llvm: &mut ModuleLlvm,\n         module_name: &str,\n         kind: AllocatorKind,\n         has_alloc_error_handler: bool,\n-    ) {\n-        unsafe { allocator::codegen(tcx, module_llvm, module_name, kind, has_alloc_error_handler) }\n+    ) -> ModuleLlvm {\n+        let mut module_llvm = ModuleLlvm::new_metadata(tcx, module_name);\n+        unsafe {\n+            allocator::codegen(tcx, &mut module_llvm, module_name, kind, has_alloc_error_handler);\n+        }\n+        module_llvm\n     }\n     fn compile_codegen_unit(\n         &self,"}, {"sha": "cb6244050df24a61601af1f26eb80ae6d595279f", "filename": "compiler/rustc_codegen_ssa/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs?ref=78c65a52db0016f489862ecea92a09ad66a2b960", "patch": "@@ -69,9 +69,7 @@ impl<B: WriteBackendMethods> LtoModuleCodegen<B> {\n     ) -> Result<ModuleCodegen<B::Module>, FatalError> {\n         match self {\n             LtoModuleCodegen::Fat { mut module, .. } => {\n-                {\n-                    B::optimize_fat(cgcx, &mut module)?;\n-                }\n+                B::optimize_fat(cgcx, &mut module)?;\n                 Ok(module)\n             }\n             LtoModuleCodegen::Thin(thin) => B::optimize_thin(cgcx, thin),"}, {"sha": "5bc95614c197c32b2a4a48b3110cce816ad72e00", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=78c65a52db0016f489862ecea92a09ad66a2b960", "patch": "@@ -575,15 +575,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     } else if let Some(kind) = tcx.allocator_kind(()) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n-        let mut module_llvm = backend.new_metadata(tcx, &llmod_id);\n-        tcx.sess.time(\"write_allocator_module\", || {\n-            backend.codegen_allocator(\n-                tcx,\n-                &mut module_llvm,\n-                &llmod_id,\n-                kind,\n-                tcx.lang_items().oom().is_some(),\n-            )\n+        let module_llvm = tcx.sess.time(\"write_allocator_module\", || {\n+            backend.codegen_allocator(tcx, &llmod_id, kind, tcx.lang_items().oom().is_some())\n         });\n \n         Some(ModuleCodegen { name: llmod_id, module_llvm, kind: ModuleKind::Allocator })"}, {"sha": "1e53c73d1bb4ac5b4fe5b0a04de7c4b5f66050ab", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c65a52db0016f489862ecea92a09ad66a2b960/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=78c65a52db0016f489862ecea92a09ad66a2b960", "patch": "@@ -114,15 +114,13 @@ pub trait CodegenBackend {\n }\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send + Sync {\n-    fn new_metadata(&self, sess: TyCtxt<'_>, mod_name: &str) -> Self::Module;\n     fn codegen_allocator<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        module_llvm: &mut Self::Module,\n         module_name: &str,\n         kind: AllocatorKind,\n         has_alloc_error_handler: bool,\n-    );\n+    ) -> Self::Module;\n     /// This generates the codegen unit and returns it along with\n     /// a `u64` giving an estimate of the unit's processing cost.\n     fn compile_codegen_unit("}]}