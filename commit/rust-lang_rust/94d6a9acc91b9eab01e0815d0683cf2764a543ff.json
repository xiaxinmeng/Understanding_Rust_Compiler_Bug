{"sha": "94d6a9acc91b9eab01e0815d0683cf2764a543ff", "node_id": "C_kwDOAAsO6NoAKDk0ZDZhOWFjYzkxYjllYWIwMWUwODE1ZDA2ODNjZjI3NjRhNTQzZmY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-27T14:19:54Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "This can't happen anymore. An opaque type can't end up with itself as its hidden type", "tree": {"sha": "d009e8b3c9bd0df5150deac1092cd23a855f47f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d009e8b3c9bd0df5150deac1092cd23a855f47f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d6a9acc91b9eab01e0815d0683cf2764a543ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d6a9acc91b9eab01e0815d0683cf2764a543ff", "html_url": "https://github.com/rust-lang/rust/commit/94d6a9acc91b9eab01e0815d0683cf2764a543ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d6a9acc91b9eab01e0815d0683cf2764a543ff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3146c961fe3c11271313c227aecc610db90a8555", "url": "https://api.github.com/repos/rust-lang/rust/commits/3146c961fe3c11271313c227aecc610db90a8555", "html_url": "https://github.com/rust-lang/rust/commit/3146c961fe3c11271313c227aecc610db90a8555"}], "stats": {"total": 41, "additions": 4, "deletions": 37}, "files": [{"sha": "900ee2455ef0f7e369e7f9cd60378d005e2215f8", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/94d6a9acc91b9eab01e0815d0683cf2764a543ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d6a9acc91b9eab01e0815d0683cf2764a543ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=94d6a9acc91b9eab01e0815d0683cf2764a543ff", "patch": "@@ -193,9 +193,9 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             let opaque_type_values =\n                 infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n \n-            let opaque_type_values = opaque_type_values\n+            opaque_type_values\n                 .into_iter()\n-                .filter_map(|(opaque_type_key, decl)| {\n+                .map(|(opaque_type_key, decl)| {\n                     cx.fully_perform_op(\n                         Locations::All(body.span),\n                         ConstraintCategory::OpaqueType,\n@@ -226,43 +226,10 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                         );\n                         hidden_type = infcx.tcx.ty_error();\n                     }\n-                    let concrete_is_opaque = if let ty::Opaque(def_id, _) = hidden_type.kind() {\n-                        *def_id == opaque_type_key.def_id\n-                    } else {\n-                        false\n-                    };\n \n-                    if concrete_is_opaque {\n-                        // We're using an opaque `impl Trait` type without\n-                        // 'revealing' it. For example, code like this:\n-                        //\n-                        // type Foo = impl Debug;\n-                        // fn foo1() -> Foo { ... }\n-                        // fn foo2() -> Foo { foo1() }\n-                        //\n-                        // In `foo2`, we're not revealing the type of `Foo` - we're\n-                        // just treating it as the opaque type.\n-                        //\n-                        // When this occurs, we do *not* want to try to equate\n-                        // the concrete type with the underlying defining type\n-                        // of the opaque type - this will always fail, since\n-                        // the defining type of an opaque type is always\n-                        // some other type (e.g. not itself)\n-                        // Essentially, none of the normal obligations apply here -\n-                        // we're just passing around some unknown opaque type,\n-                        // without actually looking at the underlying type it\n-                        // gets 'revealed' into\n-                        debug!(\n-                            \"eq_opaque_type_and_type: non-defining use of {:?}\",\n-                            opaque_type_key.def_id,\n-                        );\n-                        None\n-                    } else {\n-                        Some((opaque_type_key, (hidden_type, decl.hidden_type.span, decl.origin)))\n-                    }\n+                    (opaque_type_key, (hidden_type, decl.hidden_type.span, decl.origin))\n                 })\n-                .collect();\n-            opaque_type_values\n+                .collect()\n         },\n     );\n "}]}