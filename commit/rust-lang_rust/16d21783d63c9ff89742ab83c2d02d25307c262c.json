{"sha": "16d21783d63c9ff89742ab83c2d02d25307c262c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZDIxNzgzZDYzYzlmZjg5NzQyYWI4M2MyZDAyZDI1MzA3YzI2MmM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-12-04T20:00:28Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-12-04T20:00:28Z"}, "message": "Migrate to LLVM{Get,Set}ValueName2\n\nThe deprecated `LLVM{Get,Set}ValueName` only work with NUL-terminated\nstrings, but the `2` variants use explicit lengths, which fits better\nwith Rust strings and slices. We now use these in new helper functions\n`llvm::{get,set}_value_name` that convert to/from `&[u8]`.", "tree": {"sha": "9773f3d16139d9e5f38b839df7372a5aad1aa8e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9773f3d16139d9e5f38b839df7372a5aad1aa8e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d21783d63c9ff89742ab83c2d02d25307c262c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d21783d63c9ff89742ab83c2d02d25307c262c", "html_url": "https://github.com/rust-lang/rust/commit/16d21783d63c9ff89742ab83c2d02d25307c262c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d21783d63c9ff89742ab83c2d02d25307c262c/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f130493564b23e78628af25201e7e2260849f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f130493564b23e78628af25201e7e2260849f6", "html_url": "https://github.com/rust-lang/rust/commit/c4f130493564b23e78628af25201e7e2260849f6"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "5e879bd83be4227c69ede75fa5c07552b8766983", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=16d21783d63c9ff89742ab83c2d02d25307c262c", "patch": "@@ -22,7 +22,7 @@ use rustc_fs_util::{path_to_c_string, link_or_copy};\n use rustc_data_structures::small_c_str::SmallCStr;\n use errors::{Handler, FatalError};\n \n-use std::ffi::{CString, CStr};\n+use std::ffi::CString;\n use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n@@ -836,16 +836,16 @@ fn create_msvc_imps(\n             })\n             .filter_map(|val| {\n                 // Exclude some symbols that we know are not Rust symbols.\n-                let name = CStr::from_ptr(llvm::LLVMGetValueName(val));\n-                if ignored(name.to_bytes()) {\n+                let name = llvm::get_value_name(val);\n+                if ignored(name) {\n                     None\n                 } else {\n                     Some((val, name))\n                 }\n             })\n             .map(move |(val, name)| {\n                 let mut imp_name = prefix.as_bytes().to_vec();\n-                imp_name.extend(name.to_bytes());\n+                imp_name.extend(name);\n                 let imp_name = CString::new(imp_name).unwrap();\n                 (imp_name, val)\n             })"}, {"sha": "297aff93a9d28d2a67fb2febfe7e50a3cb3ad425", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=16d21783d63c9ff89742ab83c2d02d25307c262c", "patch": "@@ -21,7 +21,7 @@ use rustc::ty::layout::{self, Size, Align, LayoutOf};\n \n use rustc::hir::{self, CodegenFnAttrs, CodegenFnAttrFlags};\n \n-use std::ffi::{CStr, CString};\n+use std::ffi::CStr;\n \n pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll Value {\n     let mut llvals = Vec::with_capacity(alloc.relocations().len() + 1);\n@@ -392,16 +392,14 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             } else {\n                 // If we created the global with the wrong type,\n                 // correct the type.\n-                let empty_string = const_cstr!(\"\");\n-                let name_str_ref = CStr::from_ptr(llvm::LLVMGetValueName(g));\n-                let name_string = CString::new(name_str_ref.to_bytes()).unwrap();\n-                llvm::LLVMSetValueName(g, empty_string.as_ptr());\n+                let name = llvm::get_value_name(g).to_vec();\n+                llvm::set_value_name(g, b\"\");\n \n                 let linkage = llvm::LLVMRustGetLinkage(g);\n                 let visibility = llvm::LLVMRustGetVisibility(g);\n \n                 let new_g = llvm::LLVMRustGetOrInsertGlobal(\n-                    self.llmod, name_string.as_ptr(), val_llty);\n+                    self.llmod, name.as_ptr().cast(), name.len(), val_llty);\n \n                 llvm::LLVMRustSetLinkage(new_g, linkage);\n                 llvm::LLVMRustSetVisibility(new_g, visibility);"}, {"sha": "a3782ecd92dcd0c4635244dddf6c0916240d40ab", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=16d21783d63c9ff89742ab83c2d02d25307c262c", "patch": "@@ -32,7 +32,7 @@ use rustc_codegen_ssa::mir::debuginfo::{FunctionDebugContext, DebugScope,\n \n use libc::c_uint;\n use std::cell::RefCell;\n-use std::ffi::{CStr, CString};\n+use std::ffi::CString;\n \n use smallvec::SmallVec;\n use syntax_pos::{self, BytePos, Span, Pos};\n@@ -255,23 +255,11 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             return;\n         }\n \n-        let old_name = unsafe {\n-            CStr::from_ptr(llvm::LLVMGetValueName(value))\n-        };\n-        match old_name.to_str() {\n-            Ok(\"\") => {}\n-            Ok(_) => {\n-                // Avoid replacing the name if it already exists.\n-                // While we could combine the names somehow, it'd\n-                // get noisy quick, and the usefulness is dubious.\n-                return;\n-            }\n-            Err(_) => return,\n-        }\n-\n-        let cname = SmallCStr::new(name);\n-        unsafe {\n-            llvm::LLVMSetValueName(value, cname.as_ptr());\n+        // Avoid replacing the name if it already exists.\n+        // While we could combine the names somehow, it'd\n+        // get noisy quick, and the usefulness is dubious.\n+        if llvm::get_value_name(value).is_empty() {\n+            llvm::set_value_name(value, name.as_bytes());\n         }\n     }\n }"}, {"sha": "fa9fc4653680166e229627366107a9f47b8f16bb", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=16d21783d63c9ff89742ab83c2d02d25307c262c", "patch": "@@ -76,9 +76,8 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         name: &str, ty: &'ll Type\n     ) -> &'ll Value {\n         debug!(\"declare_global(name={:?})\", name);\n-        let namebuf = SmallCStr::new(name);\n         unsafe {\n-            llvm::LLVMRustGetOrInsertGlobal(self.llmod, namebuf.as_ptr(), ty)\n+            llvm::LLVMRustGetOrInsertGlobal(self.llmod, name.as_ptr().cast(), name.len(), ty)\n         }\n     }\n "}, {"sha": "296b6876c4ae3ef6059fd93d92e93852306a4a3b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=16d21783d63c9ff89742ab83c2d02d25307c262c", "patch": "@@ -701,8 +701,8 @@ extern \"C\" {\n \n     // Operations on all values\n     pub fn LLVMTypeOf(Val: &Value) -> &Type;\n-    pub fn LLVMGetValueName(Val: &Value) -> *const c_char;\n-    pub fn LLVMSetValueName(Val: &Value, Name: *const c_char);\n+    pub fn LLVMGetValueName2(Val: &Value, Length: *mut size_t) -> *const c_char;\n+    pub fn LLVMSetValueName2(Val: &Value, Name: *const c_char, NameLen: size_t);\n     pub fn LLVMReplaceAllUsesWith(OldVal: &'a Value, NewVal: &'a Value);\n     pub fn LLVMSetMetadata(Val: &'a Value, KindID: c_uint, Node: &'a Value);\n \n@@ -774,7 +774,8 @@ extern \"C\" {\n     pub fn LLVMIsAGlobalVariable(GlobalVar: &Value) -> Option<&Value>;\n     pub fn LLVMAddGlobal(M: &'a Module, Ty: &'a Type, Name: *const c_char) -> &'a Value;\n     pub fn LLVMGetNamedGlobal(M: &Module, Name: *const c_char) -> Option<&Value>;\n-    pub fn LLVMRustGetOrInsertGlobal(M: &'a Module, Name: *const c_char, T: &'a Type) -> &'a Value;\n+    pub fn LLVMRustGetOrInsertGlobal(M: &'a Module, Name: *const c_char, NameLen: size_t,\n+                                     T: &'a Type) -> &'a Value;\n     pub fn LLVMRustInsertPrivateGlobal(M: &'a Module, T: &'a Type) -> &'a Value;\n     pub fn LLVMGetFirstGlobal(M: &Module) -> Option<&Value>;\n     pub fn LLVMGetNextGlobal(GlobalVar: &Value) -> Option<&Value>;\n@@ -1812,7 +1813,7 @@ extern \"C\" {\n \n     pub fn LLVMRustPositionBuilderAtStart(B: &Builder<'a>, BB: &'a BasicBlock);\n \n-    pub fn LLVMRustSetComdat(M: &'a Module, V: &'a Value, Name: *const c_char);\n+    pub fn LLVMRustSetComdat(M: &'a Module, V: &'a Value, Name: *const c_char, NameLen: size_t);\n     pub fn LLVMRustUnsetComdat(V: &Value);\n     pub fn LLVMRustSetModulePICLevel(M: &Module);\n     pub fn LLVMRustSetModulePIELevel(M: &Module);"}, {"sha": "d2d418762398101dccafe400353c85fc0e7cbaf9", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=16d21783d63c9ff89742ab83c2d02d25307c262c", "patch": "@@ -115,7 +115,8 @@ pub fn SetFunctionCallConv(fn_: &'a Value, cc: CallConv) {\n // For more details on COMDAT sections see e.g., http://www.airs.com/blog/archives/52\n pub fn SetUniqueComdat(llmod: &Module, val: &'a Value) {\n     unsafe {\n-        LLVMRustSetComdat(llmod, val, LLVMGetValueName(val));\n+        let name = get_value_name(val);\n+        LLVMRustSetComdat(llmod, val, name.as_ptr().cast(), name.len());\n     }\n }\n \n@@ -217,6 +218,23 @@ pub fn get_param(llfn: &'a Value, index: c_uint) -> &'a Value {\n     }\n }\n \n+/// Safe wrapper for `LLVMGetValueName2` into a byte slice\n+pub fn get_value_name(value: &'a Value) -> &'a [u8] {\n+    unsafe {\n+        let mut len = 0;\n+        let data = LLVMGetValueName2(value, &mut len);\n+        std::slice::from_raw_parts(data.cast(), len)\n+    }\n+}\n+\n+/// Safe wrapper for `LLVMSetValueName2` from a byte slice\n+pub fn set_value_name(value: &Value, name: &[u8]) {\n+    unsafe {\n+        let data = name.as_ptr().cast();\n+        LLVMSetValueName2(value, data, name.len());\n+    }\n+}\n+\n pub fn build_string(f: impl FnOnce(&RustString)) -> Result<String, FromUtf8Error> {\n     let sr = RustString {\n         bytes: RefCell::new(Vec::new()),"}, {"sha": "720928e48e3820869ac6a89db05aee3cb12af572", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/16d21783d63c9ff89742ab83c2d02d25307c262c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=16d21783d63c9ff89742ab83c2d02d25307c262c", "patch": "@@ -129,8 +129,9 @@ extern \"C\" LLVMValueRef LLVMRustGetOrInsertFunction(LLVMModuleRef M,\n }\n \n extern \"C\" LLVMValueRef\n-LLVMRustGetOrInsertGlobal(LLVMModuleRef M, const char *Name, LLVMTypeRef Ty) {\n-  return wrap(unwrap(M)->getOrInsertGlobal(Name, unwrap(Ty)));\n+LLVMRustGetOrInsertGlobal(LLVMModuleRef M, const char *Name, size_t NameLen, LLVMTypeRef Ty) {\n+  StringRef NameRef(Name, NameLen);\n+  return wrap(unwrap(M)->getOrInsertGlobal(NameRef, unwrap(Ty)));\n }\n \n extern \"C\" LLVMValueRef\n@@ -1287,11 +1288,12 @@ extern \"C\" void LLVMRustPositionBuilderAtStart(LLVMBuilderRef B,\n }\n \n extern \"C\" void LLVMRustSetComdat(LLVMModuleRef M, LLVMValueRef V,\n-                                  const char *Name) {\n+                                  const char *Name, size_t NameLen) {\n   Triple TargetTriple(unwrap(M)->getTargetTriple());\n   GlobalObject *GV = unwrap<GlobalObject>(V);\n   if (!TargetTriple.isOSBinFormatMachO()) {\n-    GV->setComdat(unwrap(M)->getOrInsertComdat(Name));\n+    StringRef NameRef(Name, NameLen);\n+    GV->setComdat(unwrap(M)->getOrInsertComdat(NameRef));\n   }\n }\n "}]}