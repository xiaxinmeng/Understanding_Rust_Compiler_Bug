{"sha": "b622f56d398155d3456887ed0025b391fed8b42c", "node_id": "C_kwDOAAsO6NoAKGI2MjJmNTZkMzk4MTU1ZDM0NTY4ODdlZDAwMjViMzkxZmVkOGI0MmM", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-07T18:51:05Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:06Z"}, "message": "remove TestItemNamesVisitor\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "1ce3fadca582c722fa5d3c7aa8f56672401d06a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce3fadca582c722fa5d3c7aa8f56672401d06a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b622f56d398155d3456887ed0025b391fed8b42c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b622f56d398155d3456887ed0025b391fed8b42c", "html_url": "https://github.com/rust-lang/rust/commit/b622f56d398155d3456887ed0025b391fed8b42c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b622f56d398155d3456887ed0025b391fed8b42c/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7161a708c627c423fbef491bfacb16b6a0f022ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7161a708c627c423fbef491bfacb16b6a0f022ba", "html_url": "https://github.com/rust-lang/rust/commit/7161a708c627c423fbef491bfacb16b6a0f022ba"}], "stats": {"total": 58, "additions": 23, "deletions": 35}, "files": [{"sha": "6db7f247a9925cb3ff2530837c3b80ed2e391498", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b622f56d398155d3456887ed0025b391fed8b42c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b622f56d398155d3456887ed0025b391fed8b42c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b622f56d398155d3456887ed0025b391fed8b42c", "patch": "@@ -74,11 +74,10 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n     def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n-    ForeignItem, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n+    HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n     Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n     TraitRef, TyKind, UnOp,\n };\n@@ -2068,35 +2067,6 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     false\n }\n \n-struct TestItemNamesVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    names: Vec<Symbol>,\n-}\n-\n-impl<'hir> ItemLikeVisitor<'hir> for TestItemNamesVisitor<'hir> {\n-    fn visit_item(&mut self, item: &Item<'_>) {\n-        if let ItemKind::Const(ty, _body) = item.kind {\n-            if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n-                // We could also check for the type name `test::TestDescAndFn`\n-                if let Res::Def(DefKind::Struct, _) = path.res {\n-                    let has_test_marker = self\n-                        .tcx\n-                        .hir()\n-                        .attrs(item.hir_id())\n-                        .iter()\n-                        .any(|a| a.has_name(sym::rustc_test_marker));\n-                    if has_test_marker {\n-                        self.names.push(item.ident.name);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    fn visit_trait_item(&mut self, _: &TraitItem<'_>) {}\n-    fn visit_impl_item(&mut self, _: &ImplItem<'_>) {}\n-    fn visit_foreign_item(&mut self, _: &ForeignItem<'_>) {}\n-}\n-\n static TEST_ITEM_NAMES_CACHE: SyncOnceCell<Mutex<FxHashMap<LocalDefId, Vec<Symbol>>>> = SyncOnceCell::new();\n \n fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n@@ -2105,10 +2075,28 @@ fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(\n     match map.entry(module) {\n         Entry::Occupied(entry) => f(entry.get()),\n         Entry::Vacant(entry) => {\n-            let mut visitor = TestItemNamesVisitor { tcx, names: Vec::new() };\n-            tcx.hir().visit_item_likes_in_module(module, &mut visitor);\n-            visitor.names.sort_unstable();\n-            f(&*entry.insert(visitor.names))\n+            let mut names = Vec::new();\n+            for id in tcx.hir().module_items(module) {\n+                if matches!(tcx.def_kind(id.def_id), DefKind::Const)\n+                    && let item = tcx.hir().item(id)\n+                    && let ItemKind::Const(ty, _body) = item.kind {\n+                    if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n+                        // We could also check for the type name `test::TestDescAndFn`\n+                        if let Res::Def(DefKind::Struct, _) = path.res {\n+                            let has_test_marker = tcx\n+                                .hir()\n+                                .attrs(item.hir_id())\n+                                .iter()\n+                                .any(|a| a.has_name(sym::rustc_test_marker));\n+                            if has_test_marker {\n+                                names.push(item.ident.name);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            names.sort_unstable();\n+            f(&*entry.insert(names))\n         },\n     }\n }"}]}