{"sha": "1060513ddc9a8689730a993c8a91e574c4879607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjA1MTNkZGM5YTg2ODk3MzBhOTkzYzhhOTFlNTc0YzQ4Nzk2MDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-10T03:18:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:39Z"}, "message": "Get out of bootstrapping pickle.", "tree": {"sha": "014afcfcebcc926428ec838e0efd17a7f73e0943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/014afcfcebcc926428ec838e0efd17a7f73e0943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1060513ddc9a8689730a993c8a91e574c4879607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1060513ddc9a8689730a993c8a91e574c4879607", "html_url": "https://github.com/rust-lang/rust/commit/1060513ddc9a8689730a993c8a91e574c4879607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1060513ddc9a8689730a993c8a91e574c4879607/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984f9db94674d50a20ef21046fc142ebec259102", "url": "https://api.github.com/repos/rust-lang/rust/commits/984f9db94674d50a20ef21046fc142ebec259102", "html_url": "https://github.com/rust-lang/rust/commit/984f9db94674d50a20ef21046fc142ebec259102"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "80fcb45d0b9bc0157347b90a80c8c745120767d5", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1060513ddc9a8689730a993c8a91e574c4879607/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1060513ddc9a8689730a993c8a91e574c4879607/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=1060513ddc9a8689730a993c8a91e574c4879607", "patch": "@@ -105,20 +105,34 @@ impl TargetDataLayout {\n         let mut dl = TargetDataLayout::default();\n         let mut i128_align_src = 64;\n         for spec in target.data_layout.split('-') {\n-            match spec.split(':').collect::<Vec<_>>()[..] {\n+            let spec_parts = spec.split(':').collect::<Vec<_>>();\n+\n+            match &*spec_parts {\n                 [\"e\"] => dl.endian = Endian::Little,\n                 [\"E\"] => dl.endian = Endian::Big,\n                 [p] if p.starts_with(\"P\") => {\n                     dl.instruction_address_space = parse_address_space(&p[1..], \"P\")?\n                 }\n-                [\"a\", ref a..] => dl.aggregate_align = align(a, \"a\")?,\n-                [\"f32\", ref a..] => dl.f32_align = align(a, \"f32\")?,\n-                [\"f64\", ref a..] => dl.f64_align = align(a, \"f64\")?,\n-                [p @ \"p\", s, ref a..] | [p @ \"p0\", s, ref a..] => {\n+                // FIXME: Ping cfg(bootstrap) -- Use `ref a @ ..` with new bootstrap compiler.\n+                [\"a\", ..] => {\n+                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                    dl.aggregate_align = align(a, \"a\")?\n+                }\n+                [\"f32\", ..] => {\n+                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                    dl.f32_align = align(a, \"f32\")?\n+                }\n+                [\"f64\", ..] => {\n+                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                    dl.f64_align = align(a, \"f64\")?\n+                }\n+                [p @ \"p\", s, ..] | [p @ \"p0\", s, ..] => {\n+                    let a = &spec_parts[2..]; // FIXME inline into pattern.\n                     dl.pointer_size = size(s, p)?;\n                     dl.pointer_align = align(a, p)?;\n                 }\n-                [s, ref a..] if s.starts_with(\"i\") => {\n+                [s, ..] if s.starts_with(\"i\") => {\n+                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n                     let bits = match s[1..].parse::<u64>() {\n                         Ok(bits) => bits,\n                         Err(_) => {\n@@ -142,7 +156,8 @@ impl TargetDataLayout {\n                         dl.i128_align = a;\n                     }\n                 }\n-                [s, ref a..] if s.starts_with(\"v\") => {\n+                [s, ..] if s.starts_with(\"v\") => {\n+                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n                     let v_size = size(&s[1..], \"v\")?;\n                     let a = align(a, s)?;\n                     if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {"}, {"sha": "66c726b2485d17ae825445d83b7d1b42db6a25a1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1060513ddc9a8689730a993c8a91e574c4879607/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1060513ddc9a8689730a993c8a91e574c4879607/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1060513ddc9a8689730a993c8a91e574c4879607", "patch": "@@ -1818,7 +1818,9 @@ fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: &'tcx ty::AdtDef, sp: Span, d\n     );\n     let mut err = struct_span_err!(tcx.sess, sp, E0731, \"transparent enum {}\", msg);\n     err.span_label(sp, &msg);\n-    if let &[ref start.., ref end] = &variant_spans[..] {\n+    if let &[.., ref end] = &variant_spans[..] {\n+        // FIXME: Ping cfg(bootstrap) -- Use `ref start @ ..` with new bootstrap compiler.\n+        let start = &variant_spans[..variant_spans.len() - 1];\n         for variant_span in start {\n             err.span_label(*variant_span, \"\");\n         }"}]}