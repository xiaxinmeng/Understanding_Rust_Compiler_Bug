{"sha": "2528acb5f7fabd68fc951fda1f724640c38c1042", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MjhhY2I1ZjdmYWJkNjhmYzk1MWZkYTFmNzI0NjQwYzM4YzEwNDI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-21T01:47:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-21T01:47:44Z"}, "message": "Rollup merge of #80211 - wabain:async-fn-trait-bound-suggestion, r=petrochenkov\n\nHandle desugaring in impl trait bound suggestion\n\nFixes #79843.\n\nWhen an associated type of a generic function parameter needs extra bounds, the diagnostics may suggest replacing an `impl Trait` with a named type parameter so that it can be referenced in the where clause. On stable and nightly, the suggestion can be malformed, for instance transforming:\n\n```rust\nasync fn run(_: &(), foo: impl Foo) -> std::io::Result<()>\n```\n\nInto:\n\n```rust\nasync fn run(_: &, F: Foo(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send\n                 ^^^^^^^^         ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nWhere we want something like:\n\n```rust\nasync fn run<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send\n            ^^^^^^^^              ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nThe problem is that the elided lifetime of `&()` is added as a generic parameter when desugaring the async fn; the suggestion code sees this as an existing generic parameter and tries to use its span as an anchor to inject `F` into the parameter list. There doesn't seem to be an entirely principled way to check which generic parameters in the HIR were explicitly named in the source, so this commit changes the heuristics when generating the suggestion to only consider type parameters whose spans are contained within the span of the `Generics` when determining how to insert an additional type parameter into the declaration. (And to be safe it also excludes parameters whose spans are marked as originating from desugaring, although that doesn't seem to handle this elided lifetime.)", "tree": {"sha": "0c2a09183ff6d62ef9aed9eb953f5c09a244aff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2a09183ff6d62ef9aed9eb953f5c09a244aff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2528acb5f7fabd68fc951fda1f724640c38c1042", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf3/7ACRBK7hj4Ov3rIwAAdHIIAKzLbcV3xI60YEZ5BkJWfm9l\naTRc56tyJQUdFf4tuPH5EPm0Owd8ZeEtZo/Hwiv2dlln+EKSOKOr2OUFwBYtg2I7\ntyqyX35ETjMVr9MSQCRTQzO8duV9eE2kXlcC0UBp6/LDOW4fRMjux1hj27+UYLsE\nZ4wqohuka0x6nOfM2Emx2RiwXHjVvGjAdpPg2W1lO37VrFhPGCg4DZY2T3kevwrl\nRMGS0nppdFuKHrRnW2zVGlA6aIQLQT1HZGfZSa7DkuDwtV1fh33cyNhTDzN8RKPy\nXLHXygKz+7RKtm4t45LYvh6qoVmD84eXc+LBC0uUFel0h8vj7F82A3zCLZs017k=\n=GEW9\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c2a09183ff6d62ef9aed9eb953f5c09a244aff4\nparent 000c51611cc441c7a879adb9667c11fab6608477\nparent b76c9be7f5fa10b95fe4f872400b4388b67a4733\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608515264 +0100\ncommitter GitHub <noreply@github.com> 1608515264 +0100\n\nRollup merge of #80211 - wabain:async-fn-trait-bound-suggestion, r=petrochenkov\n\nHandle desugaring in impl trait bound suggestion\n\nFixes #79843.\n\nWhen an associated type of a generic function parameter needs extra bounds, the diagnostics may suggest replacing an `impl Trait` with a named type parameter so that it can be referenced in the where clause. On stable and nightly, the suggestion can be malformed, for instance transforming:\n\n```rust\nasync fn run(_: &(), foo: impl Foo) -> std::io::Result<()>\n```\n\nInto:\n\n```rust\nasync fn run(_: &, F: Foo(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send\n                 ^^^^^^^^         ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nWhere we want something like:\n\n```rust\nasync fn run<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send\n            ^^^^^^^^              ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nThe problem is that the elided lifetime of `&()` is added as a generic parameter when desugaring the async fn; the suggestion code sees this as an existing generic parameter and tries to use its span as an anchor to inject `F` into the parameter list. There doesn't seem to be an entirely principled way to check which generic parameters in the HIR were explicitly named in the source, so this commit changes the heuristics when generating the suggestion to only consider type parameters whose spans are contained within the span of the `Generics` when determining how to insert an additional type parameter into the declaration. (And to be safe it also excludes parameters whose spans are marked as originating from desugaring, although that doesn't seem to handle this elided lifetime.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2528acb5f7fabd68fc951fda1f724640c38c1042", "html_url": "https://github.com/rust-lang/rust/commit/2528acb5f7fabd68fc951fda1f724640c38c1042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2528acb5f7fabd68fc951fda1f724640c38c1042/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000c51611cc441c7a879adb9667c11fab6608477", "url": "https://api.github.com/repos/rust-lang/rust/commits/000c51611cc441c7a879adb9667c11fab6608477", "html_url": "https://github.com/rust-lang/rust/commit/000c51611cc441c7a879adb9667c11fab6608477"}, {"sha": "b76c9be7f5fa10b95fe4f872400b4388b67a4733", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76c9be7f5fa10b95fe4f872400b4388b67a4733", "html_url": "https://github.com/rust-lang/rust/commit/b76c9be7f5fa10b95fe4f872400b4388b67a4733"}], "stats": {"total": 108, "additions": 95, "deletions": 13}, "files": [{"sha": "79fea83a6674d3021b6e19122e4bd7ad8f62b346", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2528acb5f7fabd68fc951fda1f724640c38c1042/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2528acb5f7fabd68fc951fda1f724640c38c1042/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2528acb5f7fabd68fc951fda1f724640c38c1042", "patch": "@@ -254,27 +254,21 @@ fn suggest_restriction(\n         let pred = trait_ref.without_const().to_predicate(tcx).to_string();\n         let pred = pred.replace(&impl_trait_str, &type_param_name);\n         let mut sugg = vec![\n+            // Find the last of the generic parameters contained within the span of\n+            // the generics\n             match generics\n                 .params\n                 .iter()\n-                .filter(|p| match p.kind {\n-                    hir::GenericParamKind::Type {\n-                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                        ..\n-                    } => false,\n-                    _ => true,\n-                })\n-                .last()\n+                .map(|p| p.bounds_span().unwrap_or(p.span))\n+                .filter(|&span| generics.span.contains(span) && span.desugaring_kind().is_none())\n+                .max_by_key(|span| span.hi())\n             {\n                 // `fn foo(t: impl Trait)`\n                 //        ^ suggest `<T: Trait>` here\n                 None => (generics.span, format!(\"<{}>\", type_param)),\n                 // `fn foo<A>(t: impl Trait)`\n                 //        ^^^ suggest `<A, T: Trait>` here\n-                Some(param) => (\n-                    param.bounds_span().unwrap_or(param.span).shrink_to_hi(),\n-                    format!(\", {}\", type_param),\n-                ),\n+                Some(span) => (span.shrink_to_hi(), format!(\", {}\", type_param)),\n             },\n             // `fn foo(t: impl Trait)`\n             //                       ^ suggest `where <T as Trait>::A: Bound`"}, {"sha": "949b23600715a7f9a980d88cb3f60b505efe30d1", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs?ref=2528acb5f7fabd68fc951fda1f724640c38c1042", "patch": "@@ -39,6 +39,14 @@ fn bak(constraints: impl  Iterator + std::fmt::Debug) {\n     }\n }\n \n+#[rustfmt::skip]\n+fn baw<>(constraints: impl Iterator) {\n+    for constraint in constraints {\n+        qux(constraint);\n+//~^ ERROR `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n+    }\n+}\n+\n fn qux(_: impl std::fmt::Debug) {}\n \n fn main() {}"}, {"sha": "0de3b9aec19e1aeca8775a916c5bfdd962f878d7", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=2528acb5f7fabd68fc951fda1f724640c38c1042", "patch": "@@ -73,6 +73,21 @@ help: introduce a type parameter with a trait bound instead of using `impl Trait\n LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as Iterator>::Item: Debug {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:45:13\n+   |\n+LL |         qux(constraint);\n+   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+...\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                --------------- required by this bound in `qux`\n+   |\n+   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | fn baw<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n+   |       ^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "3cd6d336e13456ec8ff25b26b1752e9ab6544eaf", "filename": "src/test/ui/suggestions/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.rs?ref=2528acb5f7fabd68fc951fda1f724640c38c1042", "patch": "@@ -0,0 +1,32 @@\n+// Regression test: if we suggest replacing an `impl Trait` argument to an async\n+// fn with a named type parameter in order to add bounds, the suggested function\n+// signature should be well-formed.\n+//\n+// edition:2018\n+\n+trait Foo {\n+    type Bar;\n+    fn bar(&self) -> Self::Bar;\n+}\n+\n+async fn run(_: &(), foo: impl Foo) -> std::io::Result<()> {\n+    let bar = foo.bar();\n+    assert_is_send(&bar);\n+//~^ ERROR: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+\n+    Ok(())\n+}\n+\n+// Test our handling of cases where there is a generic parameter list in the\n+// source, but only synthetic generic parameters\n+async fn run2< >(_: &(), foo: impl Foo) -> std::io::Result<()> {\n+    let bar = foo.bar();\n+    assert_is_send(&bar);\n+//~^ ERROR: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+\n+    Ok(())\n+}\n+\n+fn assert_is_send<T: Send>(_: &T) {}\n+\n+fn main() {}"}, {"sha": "9404c3bb583172fa2b9d0170b904ca34a09106cd", "filename": "src/test/ui/suggestions/issue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2528acb5f7fabd68fc951fda1f724640c38c1042/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr?ref=2528acb5f7fabd68fc951fda1f724640c38c1042", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+  --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:14:20\n+   |\n+LL |     assert_is_send(&bar);\n+   |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+...\n+LL | fn assert_is_send<T: Send>(_: &T) {}\n+   |                      ---- required by this bound in `assert_is_send`\n+   |\n+   = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | async fn run<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send {\n+   |             ^^^^^^^^              ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+  --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:24:20\n+   |\n+LL |     assert_is_send(&bar);\n+   |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+...\n+LL | fn assert_is_send<T: Send>(_: &T) {}\n+   |                      ---- required by this bound in `assert_is_send`\n+   |\n+   = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | async fn run2<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send {\n+   |              ^^^^^^^^              ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}