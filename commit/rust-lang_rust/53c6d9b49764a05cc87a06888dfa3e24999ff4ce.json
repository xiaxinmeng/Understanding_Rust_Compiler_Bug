{"sha": "53c6d9b49764a05cc87a06888dfa3e24999ff4ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYzZkOWI0OTc2NGEwNWNjODdhMDY4ODhkZmEzZTI0OTk5ZmY0Y2U=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-03-20T18:21:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-20T18:21:38Z"}, "message": "Don't check interpret_interner when accessing a static to fix miri mutable statics", "tree": {"sha": "0beca2d3ed2fd56866e6133ade5bc4dcd1fbe632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0beca2d3ed2fd56866e6133ade5bc4dcd1fbe632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53c6d9b49764a05cc87a06888dfa3e24999ff4ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJasVEyCRBK7hj4Ov3rIwAAdHIIAFRTBzL6N9n8O1z5TVxCtyEX\nsr1pJ5Y3+s1NnIHZM6ISEoiv/dfJbOBfod6Ey8JeDg5KcrEGjI8oFQLPShdZojKg\nTfXASq7UuE1m7nks6lVLQZIiJGRrryrYVntvSZ984stWlhQdBl/ShJZilQbORcJ5\nOdDCARADPsSyxdwA3o+UF0eGTvKtaIT4FyaNMffxE/JJ98BPVLwpbquEPmtNxMjH\nplF4xE8ibE9qcrEGICusg35ZN+tlDM2kCBfG3sGKLey5k+XN8WYBIz9Lk9Ma4Fca\nGI1Tsuqz8/v01GE/XPgJkmf3rhqy3nIYoDcpaerjkCzXj8QzXJKZv6Yy5wO6kUI=\n=UScn\n-----END PGP SIGNATURE-----\n", "payload": "tree 0beca2d3ed2fd56866e6133ade5bc4dcd1fbe632\nparent 75af15ee6ca0c12b699a17984b033363cd25e9c3\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1521570098 +0100\ncommitter GitHub <noreply@github.com> 1521570098 +0100\n\nDon't check interpret_interner when accessing a static to fix miri mutable statics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53c6d9b49764a05cc87a06888dfa3e24999ff4ce", "html_url": "https://github.com/rust-lang/rust/commit/53c6d9b49764a05cc87a06888dfa3e24999ff4ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53c6d9b49764a05cc87a06888dfa3e24999ff4ce/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75af15ee6ca0c12b699a17984b033363cd25e9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/75af15ee6ca0c12b699a17984b033363cd25e9c3", "html_url": "https://github.com/rust-lang/rust/commit/75af15ee6ca0c12b699a17984b033363cd25e9c3"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "456f5fd75db09772ea8949c7c887c71a1ad0cb54", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/53c6d9b49764a05cc87a06888dfa3e24999ff4ce/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53c6d9b49764a05cc87a06888dfa3e24999ff4ce/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=53c6d9b49764a05cc87a06888dfa3e24999ff4ce", "patch": "@@ -197,29 +197,17 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             },\n \n             Static(ref static_) => {\n-                let alloc = self\n-                    .tcx\n-                    .interpret_interner\n-                    .get_cached(static_.def_id);\n                 let layout = self.layout_of(self.place_ty(mir_place))?;\n-                if let Some(alloc) = alloc {\n-                    Place::Ptr {\n-                        ptr: MemoryPointer::new(alloc, 0).into(),\n-                        align: layout.align,\n-                        extra: PlaceExtra::None,\n-                    }\n-                } else {\n-                    let instance = ty::Instance::mono(*self.tcx, static_.def_id);\n-                    let cid = GlobalId {\n-                        instance,\n-                        promoted: None\n-                    };\n-                    let alloc = Machine::init_static(self, cid)?;\n-                    Place::Ptr {\n-                        ptr: MemoryPointer::new(alloc, 0).into(),\n-                        align: layout.align,\n-                        extra: PlaceExtra::None,\n-                    }\n+                let instance = ty::Instance::mono(*self.tcx, static_.def_id);\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: None\n+                };\n+                let alloc = Machine::init_static(self, cid)?;\n+                Place::Ptr {\n+                    ptr: MemoryPointer::new(alloc, 0).into(),\n+                    align: layout.align,\n+                    extra: PlaceExtra::None,\n                 }\n             }\n "}]}