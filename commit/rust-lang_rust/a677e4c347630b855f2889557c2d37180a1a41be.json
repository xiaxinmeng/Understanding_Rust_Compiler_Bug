{"sha": "a677e4c347630b855f2889557c2d37180a1a41be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzdlNGMzNDc2MzBiODU1ZjI4ODk1NTdjMmQzNzE4MGExYTQxYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-30T09:22:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-30T09:22:31Z"}, "message": "Auto merge of #53816 - zackmdavis:elided_lifetimes_in_paths_field_day, r=nikomatsakis\n\ndon't elide lifetimes in paths in librustc/\n\nIn light of the \"Apply to rustc\" checkbox on #44524 and @nikomatsakis's [recent comment about regularly wanting visual indication of elided lifetimes in types](https://github.com/rust-lang/rust/issues/44524#issuecomment-414663773), I was curious to see what it would look like if we turned the `elided_lifetimes_in_path` lint on in at least one crate in the codebase (I chose librustc). Given that I couldn't figure out how to get `cargo fix` work with the build system, this arguably wasn't a very efficient use of my time, but once I started, the conjunction of moral law and the sunk cost fallacy forced me to continue.\n\nThis is mostly applying the `<'_>` suggestions issued by the lint, but there were a few places where I named the lifetimes (_e.g._, `<'a, 'gcx, 'tcx>` on `TyCtxt`) in order to match style with surrounding code.\n\nr? @nikomatsakis", "tree": {"sha": "9be1a07b23cc39e61071592e0c156d29fe668b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be1a07b23cc39e61071592e0c156d29fe668b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a677e4c347630b855f2889557c2d37180a1a41be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a677e4c347630b855f2889557c2d37180a1a41be", "html_url": "https://github.com/rust-lang/rust/commit/a677e4c347630b855f2889557c2d37180a1a41be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a677e4c347630b855f2889557c2d37180a1a41be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c1d5e5b712fa372d5dcab5a5bb97b24a6a7fef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1d5e5b712fa372d5dcab5a5bb97b24a6a7fef3", "html_url": "https://github.com/rust-lang/rust/commit/8c1d5e5b712fa372d5dcab5a5bb97b24a6a7fef3"}, {"sha": "5b22d9b2ca68bd3fc14613d355ffad21a1cb7899", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b22d9b2ca68bd3fc14613d355ffad21a1cb7899", "html_url": "https://github.com/rust-lang/rust/commit/5b22d9b2ca68bd3fc14613d355ffad21a1cb7899"}], "stats": {"total": 1102, "additions": 557, "deletions": 545}, "files": [{"sha": "0d0dc0832a459b78aab728ea30bbb11cca5bd6fc", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -331,7 +331,7 @@ macro_rules! define_dep_nodes {\n             /// refers to something from the previous compilation session that\n             /// has been removed.\n             #[inline]\n-            pub fn extract_def_id(&self, tcx: TyCtxt) -> Option<DefId> {\n+            pub fn extract_def_id(&self, tcx: TyCtxt<'_, '_, '_>) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n                     let def_path_hash = DefPathHash(self.hash);\n                     tcx.def_path_hash_to_def_id.as_ref()?\n@@ -386,7 +386,7 @@ macro_rules! define_dep_nodes {\n }\n \n impl fmt::Debug for DepNode {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.kind)?;\n \n         if !self.kind.has_params() && !self.kind.is_anon() {\n@@ -424,7 +424,7 @@ impl DefPathHash {\n \n impl DefId {\n     #[inline]\n-    pub fn to_dep_node(self, tcx: TyCtxt, kind: DepKind) -> DepNode {\n+    pub fn to_dep_node(self, tcx: TyCtxt<'_, '_, '_>, kind: DepKind) -> DepNode {\n         DepNode::from_def_path_hash(kind, tcx.def_path_hash(self))\n     }\n }\n@@ -714,7 +714,7 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a, T> DepNodeParams<'a, 'gcx, 'tcx> for T\n impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefId {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n-    fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n         tcx.def_path_hash(*self).0\n     }\n \n@@ -726,7 +726,7 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefId {\n impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefIndex {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n-    fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n         tcx.hir.definitions().def_path_hash(*self).0\n     }\n \n@@ -738,7 +738,7 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefIndex {\n impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for CrateNum {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n-    fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n         let def_id = DefId {\n             krate: *self,\n             index: CRATE_DEF_INDEX,\n@@ -757,7 +757,7 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId, De\n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n     // hashing context and stable-hashing state.\n-    fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n         let (def_id_0, def_id_1) = *self;\n \n         let def_path_hash_0 = tcx.def_path_hash(def_id_0);\n@@ -781,7 +781,7 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for HirId {\n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n     // hashing context and stable-hashing state.\n-    fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n         let HirId {\n             owner,\n             local_id: ItemLocalId(local_id),"}, {"sha": "a09fd5df557f5df7ef941aaa86c0ec80a823be9a", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -36,7 +36,7 @@ pub enum CrateNum {\n }\n \n impl ::std::fmt::Debug for CrateNum {\n-    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         match self {\n             CrateNum::Index(id) => write!(fmt, \"crate{}\", id.private),\n             CrateNum::Invalid => write!(fmt, \"invalid crate\"),\n@@ -97,7 +97,7 @@ impl CrateNum {\n }\n \n impl fmt::Display for CrateNum {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             CrateNum::Index(id) => fmt::Display::fmt(&id.private, f),\n             CrateNum::Invalid => write!(f, \"invalid crate\"),\n@@ -132,7 +132,7 @@ pub struct DefIndex(u32);\n pub const CRATE_DEF_INDEX: DefIndex = DefIndex(0);\n \n impl fmt::Debug for DefIndex {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f,\n                \"DefIndex({}:{})\",\n                self.address_space().index(),\n@@ -224,7 +224,7 @@ pub struct DefId {\n }\n \n impl fmt::Debug for DefId {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"DefId({:?}/{}:{}\",\n                self.krate.index(),\n                self.index.address_space().index(),\n@@ -288,7 +288,7 @@ impl LocalDefId {\n }\n \n impl fmt::Debug for LocalDefId {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.to_def_id().fmt(f)\n     }\n }"}, {"sha": "62b06f54301f384acd344bf8bd836e8e9d173c58", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -686,7 +686,7 @@ impl<'a> LoweringContext<'a> {\n         f: F,\n     ) -> (Vec<hir::GenericParam>, T)\n     where\n-        F: FnOnce(&mut LoweringContext) -> (Vec<hir::GenericParam>, T),\n+        F: FnOnce(&mut LoweringContext<'_>) -> (Vec<hir::GenericParam>, T),\n     {\n         assert!(!self.is_collecting_in_band_lifetimes);\n         assert!(self.lifetimes_to_define.is_empty());\n@@ -788,7 +788,7 @@ impl<'a> LoweringContext<'a> {\n     // for them.\n     fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &[GenericParam], f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n@@ -812,7 +812,7 @@ impl<'a> LoweringContext<'a> {\n         params: &HirVec<hir::GenericParam>,\n         f: F\n     ) -> T where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n@@ -841,7 +841,7 @@ impl<'a> LoweringContext<'a> {\n         f: F,\n     ) -> (hir::Generics, T)\n     where\n-        F: FnOnce(&mut LoweringContext, &mut Vec<hir::GenericParam>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_>, &mut Vec<hir::GenericParam>) -> T,\n     {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n             &generics.params,\n@@ -870,7 +870,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn with_catch_scope<T, F>(&mut self, catch_id: NodeId, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n     {\n         let len = self.catch_scopes.len();\n         self.catch_scopes.push(catch_id);\n@@ -892,7 +892,7 @@ impl<'a> LoweringContext<'a> {\n         capture_clause: CaptureBy,\n         closure_node_id: NodeId,\n         ret_ty: Option<&Ty>,\n-        body: impl FnOnce(&mut LoweringContext) -> hir::Expr,\n+        body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n         let prev_is_generator = mem::replace(&mut self.is_generator, true);\n         let body_expr = body(self);\n@@ -929,7 +929,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_body<F>(&mut self, decl: Option<&FnDecl>, f: F) -> hir::BodyId\n     where\n-        F: FnOnce(&mut LoweringContext) -> hir::Expr,\n+        F: FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     {\n         let prev = mem::replace(&mut self.is_generator, false);\n         let result = f(self);\n@@ -940,7 +940,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn with_loop_scope<T, F>(&mut self, loop_id: NodeId, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n     {\n         // We're no longer in the base loop's condition; we're in another loop.\n         let was_in_loop_condition = self.is_in_loop_condition;\n@@ -965,7 +965,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn with_loop_condition_scope<T, F>(&mut self, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n     {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = true;\n@@ -979,7 +979,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn with_new_scopes<T, F>(&mut self, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext<'_>) -> T,\n     {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = false;\n@@ -1094,7 +1094,8 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_ty_binding(&mut self, b: &TypeBinding, itctx: ImplTraitContext) -> hir::TypeBinding {\n+    fn lower_ty_binding(&mut self, b: &TypeBinding,\n+                        itctx: ImplTraitContext<'_>) -> hir::TypeBinding {\n         hir::TypeBinding {\n             id: self.lower_node_id(b.id).node_id,\n             ident: b.ident,\n@@ -1105,19 +1106,19 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_generic_arg(&mut self,\n                         arg: &ast::GenericArg,\n-                        itctx: ImplTraitContext)\n+                        itctx: ImplTraitContext<'_>)\n                         -> hir::GenericArg {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => GenericArg::Type(self.lower_ty_direct(&ty, itctx)),\n         }\n     }\n \n-    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> P<hir::Ty> {\n+    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext<'_>) -> P<hir::Ty> {\n         P(self.lower_ty_direct(t, itctx))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext) -> hir::Ty {\n+    fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext<'_>) -> hir::Ty {\n         let kind = match t.node {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n@@ -1289,7 +1290,7 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         fn_def_id: Option<DefId>,\n         exist_ty_node_id: NodeId,\n-        lower_bounds: impl FnOnce(&mut LoweringContext) -> hir::GenericBounds,\n+        lower_bounds: impl FnOnce(&mut LoweringContext<'_>) -> hir::GenericBounds,\n     ) -> hir::TyKind {\n         // Make sure we know that some funky desugaring has been going on here.\n         // This is a first: there is code in other places like for loop\n@@ -1567,7 +1568,7 @@ impl<'a> LoweringContext<'a> {\n         qself: &Option<QSelf>,\n         p: &Path,\n         param_mode: ParamMode,\n-        mut itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext<'_>,\n     ) -> hir::QPath {\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx.reborrow()));\n@@ -1762,7 +1763,7 @@ impl<'a> LoweringContext<'a> {\n         param_mode: ParamMode,\n         expected_lifetimes: usize,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n-        itctx: ImplTraitContext,\n+        itctx: ImplTraitContext<'_>,\n     ) -> hir::PathSegment {\n         let (mut generic_args, infer_types) = if let Some(ref generic_args) = segment.args {\n             let msg = \"parenthesized parameters may only be used with a trait\";\n@@ -1844,7 +1845,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n-        mut itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext<'_>,\n     ) -> (hir::GenericArgs, bool) {\n         let &AngleBracketedArgs { ref args, ref bindings, .. } = data;\n         let has_types = args.iter().any(|arg| match arg {\n@@ -1871,7 +1872,7 @@ impl<'a> LoweringContext<'a> {\n         self.with_anonymous_lifetime_mode(\n             AnonymousLifetimeMode::PassThrough,\n             |this| {\n-                const DISALLOWED: ImplTraitContext = ImplTraitContext::Disallowed;\n+                const DISALLOWED: ImplTraitContext<'_> = ImplTraitContext::Disallowed;\n                 let &ParenthesisedArgs { ref inputs, ref output, span } = data;\n                 let inputs = inputs.iter().map(|ty| this.lower_ty_direct(ty, DISALLOWED)).collect();\n                 let mk_tup = |this: &mut Self, tys, span| {\n@@ -2250,7 +2251,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n-        itctx: ImplTraitContext,\n+        itctx: ImplTraitContext<'_>,\n     ) -> hir::GenericBound {\n         match *tpb {\n             GenericBound::Trait(ref ty, modifier) => hir::GenericBound::Trait(\n@@ -2304,7 +2305,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         params: &[GenericParam],\n         add_bounds: &NodeMap<Vec<GenericBound>>,\n-        mut itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext<'_>,\n     ) -> hir::HirVec<hir::GenericParam> {\n         params.iter().map(|param| {\n             self.lower_generic_param(param, add_bounds, itctx.reborrow())\n@@ -2314,7 +2315,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_generic_param(&mut self,\n                            param: &GenericParam,\n                            add_bounds: &NodeMap<Vec<GenericBound>>,\n-                           mut itctx: ImplTraitContext)\n+                           mut itctx: ImplTraitContext<'_>)\n                            -> hir::GenericParam {\n         let mut bounds = self.lower_param_bounds(&param.bounds, itctx.reborrow());\n         match param.kind {\n@@ -2383,7 +2384,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_generics(\n         &mut self,\n         generics: &Generics,\n-        itctx: ImplTraitContext)\n+        itctx: ImplTraitContext<'_>)\n         -> hir::Generics\n     {\n         // Collect `?Trait` bounds in where clause and move them to parameter definitions.\n@@ -2536,7 +2537,7 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: ImplTraitContext) -> hir::TraitRef {\n+    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: ImplTraitContext<'_>) -> hir::TraitRef {\n         let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n             hir::QPath::Resolved(None, path) => path.and_then(|path| path),\n             qpath => bug!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n@@ -2552,7 +2553,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,\n-        mut itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext<'_>,\n     ) -> hir::PolyTraitRef {\n         let bound_generic_params =\n             self.lower_generic_params(&p.bound_generic_params, &NodeMap(), itctx.reborrow());\n@@ -2593,14 +2594,14 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext) -> hir::MutTy {\n+    fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext<'_>) -> hir::MutTy {\n         hir::MutTy {\n             ty: self.lower_ty(&mt.ty, itctx),\n             mutbl: self.lower_mutability(mt.mutbl),\n         }\n     }\n \n-    fn lower_param_bounds(&mut self, bounds: &[GenericBound], mut itctx: ImplTraitContext)\n+    fn lower_param_bounds(&mut self, bounds: &[GenericBound], mut itctx: ImplTraitContext<'_>)\n         -> hir::GenericBounds {\n         bounds.iter().map(|bound| self.lower_param_bound(bound, itctx.reborrow())).collect()\n     }"}, {"sha": "69706aabcb0505b26ac9260652ed3e5006dee4dd", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -143,7 +143,7 @@ impl<'a> ClosureParts<'a> {\n \n impl<'a> FnLikeNode<'a> {\n     /// Attempts to construct a FnLikeNode from presumed FnLike node input.\n-    pub fn from_node(node: Node) -> Option<FnLikeNode> {\n+    pub fn from_node(node: Node<'_>) -> Option<FnLikeNode<'_>> {\n         let fn_like = match node {\n             map::Node::Item(item) => item.is_fn_like(),\n             map::Node::TraitItem(tm) => tm.is_fn_like(),\n@@ -173,15 +173,15 @@ impl<'a> FnLikeNode<'a> {\n     }\n \n     pub fn span(self) -> Span {\n-        self.handle(|i: ItemFnParts| i.span,\n+        self.handle(|i: ItemFnParts<'_>| i.span,\n                     |_, _, _: &'a ast::MethodSig, _, _, span, _| span,\n-                    |c: ClosureParts| c.span)\n+                    |c: ClosureParts<'_>| c.span)\n     }\n \n     pub fn id(self) -> NodeId {\n-        self.handle(|i: ItemFnParts| i.id,\n+        self.handle(|i: ItemFnParts<'_>| i.id,\n                     |id, _, _: &'a ast::MethodSig, _, _, _, _| id,\n-                    |c: ClosureParts| c.id)\n+                    |c: ClosureParts<'_>| c.id)\n     }\n \n     pub fn constness(self) -> ast::Constness {"}, {"sha": "f5f9bcd3b5ea5125d32e70cd09a2028e57dd2266", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -668,7 +668,7 @@ impl<'hir> Map<'hir> {\n     /// }\n     /// ```\n     pub fn get_return_block(&self, id: NodeId) -> Option<NodeId> {\n-        let match_fn = |node: &Node| {\n+        let match_fn = |node: &Node<'_>| {\n             match *node {\n                 Node::Item(_) |\n                 Node::ForeignItem(_) |\n@@ -677,7 +677,7 @@ impl<'hir> Map<'hir> {\n                 _ => false,\n             }\n         };\n-        let match_non_returning_block = |node: &Node| {\n+        let match_non_returning_block = |node: &Node<'_>| {\n             match *node {\n                 Node::Expr(ref expr) => {\n                     match expr.node {\n@@ -954,7 +954,7 @@ impl<'a, 'hir> NodesMatchingSuffix<'a, 'hir> {\n         // If `id` itself is a mod named `m` with parent `p`, then\n         // returns `Some(id, m, p)`.  If `id` has no mod in its parent\n         // chain, then returns `None`.\n-        fn find_first_mod_parent<'a>(map: &'a Map, mut id: NodeId) -> Option<(NodeId, Name)> {\n+        fn find_first_mod_parent<'a>(map: &'a Map<'_>, mut id: NodeId) -> Option<(NodeId, Name)> {\n             loop {\n                 if let Node::Item(item) = map.find(id)? {\n                     if item_is_mod(&item) {\n@@ -1076,7 +1076,7 @@ pub fn map_crate<'hir>(sess: &::session::Session,\n /// Identical to the `PpAnn` implementation for `hir::Crate`,\n /// except it avoids creating a dependency on the whole crate.\n impl<'hir> print::PpAnn for Map<'hir> {\n-    fn nested(&self, state: &mut print::State, nested: print::Nested) -> io::Result<()> {\n+    fn nested(&self, state: &mut print::State<'_>, nested: print::Nested) -> io::Result<()> {\n         match nested {\n             Nested::Item(id) => state.print_item(self.expect_item(id.id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n@@ -1088,7 +1088,7 @@ impl<'hir> print::PpAnn for Map<'hir> {\n }\n \n impl<'a> print::State<'a> {\n-    pub fn print_node(&mut self, node: Node) -> io::Result<()> {\n+    pub fn print_node(&mut self, node: Node<'_>) -> io::Result<()> {\n         match node {\n             Node::Item(a)         => self.print_item(&a),\n             Node::ForeignItem(a)  => self.print_foreign_item(&a),\n@@ -1126,7 +1126,7 @@ impl<'a> print::State<'a> {\n     }\n }\n \n-fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n+fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n     let id_str = format!(\" (id={})\", id);\n     let id_str = if include_id { &id_str[..] } else { \"\" };\n \n@@ -1253,7 +1253,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n     }\n }\n \n-pub fn describe_def(tcx: TyCtxt, def_id: DefId) -> Option<Def> {\n+pub fn describe_def(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<Def> {\n     if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n         tcx.hir.describe_def(node_id)\n     } else {"}, {"sha": "088bee38116809228d1ec2edd2fdc9fbf97020fe", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -170,7 +170,7 @@ pub struct Label {\n }\n \n impl fmt::Debug for Label {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"label({:?})\", self.ident)\n     }\n }\n@@ -277,13 +277,13 @@ impl LifetimeName {\n }\n \n impl fmt::Display for Lifetime {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.name.ident().fmt(f)\n     }\n }\n \n impl fmt::Debug for Lifetime {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f,\n                \"lifetime({}: {})\",\n                self.id,\n@@ -320,13 +320,13 @@ impl Path {\n }\n \n impl fmt::Debug for Path {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"path({})\", print::to_string(print::NO_ANN, |s| s.print_path(self, false)))\n     }\n }\n \n impl fmt::Display for Path {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", print::to_string(print::NO_ANN, |s| s.print_path(self, false)))\n     }\n }\n@@ -804,7 +804,7 @@ pub struct Pat {\n }\n \n impl fmt::Debug for Pat {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"pat({}: {})\", self.id,\n                print::to_string(print::NO_ANN, |s| s.print_pat(self)))\n     }\n@@ -1120,7 +1120,7 @@ impl UnOp {\n pub type Stmt = Spanned<StmtKind>;\n \n impl fmt::Debug for StmtKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Sadness.\n         let spanned = source_map::dummy_spanned(self.clone());\n         write!(f,\n@@ -1348,7 +1348,7 @@ impl Expr {\n }\n \n impl fmt::Debug for Expr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"expr({}: {})\", self.id,\n                print::to_string(print::NO_ANN, |s| s.print_expr(self)))\n     }\n@@ -1521,7 +1521,7 @@ pub enum LoopIdError {\n }\n \n impl fmt::Display for LoopIdError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(match *self {\n             LoopIdError::OutsideLoopScope => \"not inside loop scope\",\n             LoopIdError::UnlabeledCfInWhileCondition =>\n@@ -1668,7 +1668,7 @@ pub struct Ty {\n }\n \n impl fmt::Debug for Ty {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"type({})\",\n                print::to_string(print::NO_ANN, |s| s.print_type(self)))\n     }\n@@ -1826,7 +1826,7 @@ impl Defaultness {\n }\n \n impl fmt::Display for Unsafety {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(match *self {\n                               Unsafety::Normal => \"normal\",\n                               Unsafety::Unsafe => \"unsafe\",\n@@ -1844,7 +1844,7 @@ pub enum ImplPolarity {\n }\n \n impl fmt::Debug for ImplPolarity {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ImplPolarity::Positive => \"positive\".fmt(f),\n             ImplPolarity::Negative => \"negative\".fmt(f),\n@@ -2284,7 +2284,8 @@ pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n // imported.\n pub type GlobMap = NodeMap<FxHashSet<Name>>;\n \n-pub fn provide(providers: &mut Providers) {\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.describe_def = map::describe_def;\n }\n "}, {"sha": "69699d2e4acd35f9f5dd3e8fb2678f096730902d", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -48,13 +48,13 @@ pub enum Nested {\n }\n \n pub trait PpAnn {\n-    fn nested(&self, _state: &mut State, _nested: Nested) -> io::Result<()> {\n+    fn nested(&self, _state: &mut State<'_>, _nested: Nested) -> io::Result<()> {\n         Ok(())\n     }\n-    fn pre(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> {\n+    fn pre(&self, _state: &mut State<'_>, _node: AnnNode<'_>) -> io::Result<()> {\n         Ok(())\n     }\n-    fn post(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> {\n+    fn post(&self, _state: &mut State<'_>, _node: AnnNode<'_>) -> io::Result<()> {\n         Ok(())\n     }\n     fn try_fetch_item(&self, _: ast::NodeId) -> Option<&hir::Item> {\n@@ -70,7 +70,7 @@ impl PpAnn for hir::Crate {\n     fn try_fetch_item(&self, item: ast::NodeId) -> Option<&hir::Item> {\n         Some(self.item(item))\n     }\n-    fn nested(&self, state: &mut State, nested: Nested) -> io::Result<()> {\n+    fn nested(&self, state: &mut State<'_>, nested: Nested) -> io::Result<()> {\n         match nested {\n             Nested::Item(id) => state.print_item(self.item(id.id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n@@ -190,7 +190,7 @@ impl<'a> State<'a> {\n }\n \n pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n-    where F: FnOnce(&mut State) -> io::Result<()>\n+    where F: FnOnce(&mut State<'_>) -> io::Result<()>\n {\n     let mut wr = Vec::new();\n     {\n@@ -314,7 +314,7 @@ impl<'a> State<'a> {\n                                   mut op: F,\n                                   mut get_span: G)\n                                   -> io::Result<()>\n-        where F: FnMut(&mut State, &T) -> io::Result<()>,\n+        where F: FnMut(&mut State<'_>, &T) -> io::Result<()>,\n               G: FnMut(&T) -> syntax_pos::Span\n     {\n         self.rbox(0, b)?;"}, {"sha": "09059090e2e35421c5dd9f3104dd89388b3b57a9", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(\n         self,\n         region_scope_tree: &region::ScopeTree,\n-        err: &mut DiagnosticBuilder,\n+        err: &mut DiagnosticBuilder<'_>,\n         prefix: &str,\n         region: ty::Region<'tcx>,\n         suffix: &str,\n@@ -162,7 +162,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn note_and_explain_free_region(\n         self,\n-        err: &mut DiagnosticBuilder,\n+        err: &mut DiagnosticBuilder<'_>,\n         prefix: &str,\n         region: ty::Region<'tcx>,\n         suffix: &str,\n@@ -242,7 +242,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn emit_msg_span(\n-        err: &mut DiagnosticBuilder,\n+        err: &mut DiagnosticBuilder<'_>,\n         prefix: &str,\n         description: String,\n         span: Option<Span>,\n@@ -424,11 +424,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// Adds a note if the types come from similarly named crates\n     fn check_and_note_conflicting_crates(\n         &self,\n-        err: &mut DiagnosticBuilder,\n+        err: &mut DiagnosticBuilder<'_>,\n         terr: &TypeError<'tcx>,\n         sp: Span,\n     ) {\n-        let report_path_match = |err: &mut DiagnosticBuilder, did1: DefId, did2: DefId| {\n+        let report_path_match = |err: &mut DiagnosticBuilder<'_>, did1: DefId, did2: DefId| {\n             // Only external crates, if either is from a local\n             // module we could have false positives\n             if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n@@ -750,7 +750,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         values.1.push_normal(\"<\");\n                     }\n \n-                    fn lifetime_display(lifetime: Region) -> String {\n+                    fn lifetime_display(lifetime: Region<'_>) -> String {\n                         let s = lifetime.to_string();\n                         if s.is_empty() {\n                             \"'_\".to_string()"}, {"sha": "a6efb5e678332fc24d11e9115f850944ee70ca6a", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         &self,\n         anon_region: Region<'tcx>,\n         replace_region: Region<'tcx>,\n-    ) -> Option<AnonymousArgInfo> {\n+    ) -> Option<AnonymousArgInfo<'_>> {\n         let (id, bound_region) = match *anon_region {\n             ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n             ty::ReEarlyBound(ref ebr) => ("}, {"sha": "54d01a035a8bee3a4750edef2435dae97b412f6f", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -16,7 +16,7 @@ use errors::DiagnosticBuilder;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub(super) fn note_region_origin(&self,\n-                                     err: &mut DiagnosticBuilder,\n+                                     err: &mut DiagnosticBuilder<'_>,\n                                      origin: &SubregionOrigin<'tcx>) {\n         match *origin {\n             infer::Subtype(ref trace) => {"}, {"sha": "fae48325371562fabd0adf7eb6b6e9c59445ccbd", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -450,7 +450,7 @@ fn var_ids<'a, 'gcx, 'tcx>(fields: &CombineFields<'a, 'gcx, 'tcx>,\n        .collect()\n }\n \n-fn is_var_in_set(new_vars: &[ty::RegionVid], r: ty::Region) -> bool {\n+fn is_var_in_set(new_vars: &[ty::RegionVid], r: ty::Region<'_>) -> bool {\n     match *r {\n         ty::ReVar(ref v) => new_vars.iter().any(|x| x == v),\n         _ => false"}, {"sha": "3f17c9bb020ef11c8e288acd1a724452ddace469", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -178,10 +178,10 @@ impl<'a, 'gcx, 'tcx> ConstraintGraph<'a, 'gcx, 'tcx> {\n impl<'a, 'gcx, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     type Node = Node;\n     type Edge = Edge<'tcx>;\n-    fn graph_id(&self) -> dot::Id {\n+    fn graph_id(&self) -> dot::Id<'_> {\n         dot::Id::new(&*self.graph_name).unwrap()\n     }\n-    fn node_id(&self, n: &Node) -> dot::Id {\n+    fn node_id(&self, n: &Node) -> dot::Id<'_> {\n         let node_id = match self.node_ids.get(n) {\n             Some(node_id) => node_id,\n             None => bug!(\"no node_id found for node: {:?}\", n),\n@@ -194,13 +194,13 @@ impl<'a, 'gcx, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n-    fn node_label(&self, n: &Node) -> dot::LabelText {\n+    fn node_label(&self, n: &Node) -> dot::LabelText<'_> {\n         match *n {\n             Node::RegionVid(n_vid) => dot::LabelText::label(format!(\"{:?}\", n_vid)),\n             Node::Region(n_rgn) => dot::LabelText::label(format!(\"{:?}\", n_rgn)),\n         }\n     }\n-    fn edge_label(&self, e: &Edge) -> dot::LabelText {\n+    fn edge_label(&self, e: &Edge<'_>) -> dot::LabelText<'_> {\n         match *e {\n             Edge::Constraint(ref c) =>\n                 dot::LabelText::label(format!(\"{:?}\", self.map.get(c).unwrap())),\n@@ -209,7 +209,7 @@ impl<'a, 'gcx, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn constraint_to_nodes(c: &Constraint) -> (Node, Node) {\n+fn constraint_to_nodes(c: &Constraint<'_>) -> (Node, Node) {\n     match *c {\n         Constraint::VarSubVar(rv_1, rv_2) =>\n             (Node::RegionVid(rv_1), Node::RegionVid(rv_2)),\n@@ -222,7 +222,7 @@ fn constraint_to_nodes(c: &Constraint) -> (Node, Node) {\n     }\n }\n \n-fn edge_to_nodes(e: &Edge) -> (Node, Node) {\n+fn edge_to_nodes(e: &Edge<'_>) -> (Node, Node) {\n     match *e {\n         Edge::Constraint(ref c) => constraint_to_nodes(c),\n         Edge::EnclScope(sub, sup) => {\n@@ -235,15 +235,15 @@ fn edge_to_nodes(e: &Edge) -> (Node, Node) {\n impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     type Node = Node;\n     type Edge = Edge<'tcx>;\n-    fn nodes(&self) -> dot::Nodes<Node> {\n+    fn nodes(&self) -> dot::Nodes<'_, Node> {\n         let mut set = FxHashSet();\n         for node in self.node_ids.keys() {\n             set.insert(*node);\n         }\n         debug!(\"constraint graph has {} nodes\", set.len());\n         set.into_iter().collect()\n     }\n-    fn edges(&self) -> dot::Edges<Edge<'tcx>> {\n+    fn edges(&self) -> dot::Edges<'_, Edge<'tcx>> {\n         debug!(\"constraint graph has {} edges\", self.map.len());\n         let mut v: Vec<_> = self.map.keys().map(|e| Edge::Constraint(*e)).collect();\n         self.region_rels.region_scope_tree.each_encl_scope(|sub, sup| {"}, {"sha": "2046f66f99f66c91ed4086adb5445e15ff4a2b35", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -163,7 +163,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn expand_givens(&mut self, graph: &RegionGraph) {\n+    fn expand_givens(&mut self, graph: &RegionGraph<'_>) {\n         // Givens are a kind of horrible hack to account for\n         // constraints like 'c <= '0 that are known to hold due to\n         // closure signatures (see the comment above on the `givens`\n@@ -558,7 +558,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n         // We place free regions first because we are special casing\n         // SubSupConflict(ReFree, ReFree) when reporting error, and so\n         // the user will more likely get a specific suggestion.\n-        fn region_order_key(x: &RegionAndOrigin) -> u8 {\n+        fn region_order_key(x: &RegionAndOrigin<'_>) -> u8 {\n             match *x.region {\n                 ReEarlyBound(_) => 0,\n                 ReFree(_) => 1,\n@@ -739,7 +739,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n }\n \n impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"RegionAndOrigin({:?},{:?})\", self.region, self.origin)\n     }\n }"}, {"sha": "0407e8ace5acccb72a037908d900337ba44ac56b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -445,7 +445,7 @@ pub struct RegionObligation<'tcx> {\n }\n \n impl fmt::Display for FixupError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::FixupError::*;\n \n         match *self {\n@@ -590,7 +590,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         t.fold_with(&mut self.freshener())\n     }\n \n-    pub fn type_var_diverges(&'a self, ty: Ty) -> bool {\n+    pub fn type_var_diverges(&'a self, ty: Ty<'_>) -> bool {\n         match ty.sty {\n             ty::Infer(ty::TyVar(vid)) => self.type_variables.borrow().var_diverges(vid),\n             _ => false,\n@@ -601,7 +601,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         freshen::TypeFreshener::new(self)\n     }\n \n-    pub fn type_is_unconstrained_numeric(&'a self, ty: Ty) -> UnconstrainedNumeric {\n+    pub fn type_is_unconstrained_numeric(&'a self, ty: Ty<'_>) -> UnconstrainedNumeric {\n         use ty::error::UnconstrainedNumeric::Neither;\n         use ty::error::UnconstrainedNumeric::{UnconstrainedFloat, UnconstrainedInt};\n         match ty.sty {\n@@ -1510,7 +1510,7 @@ impl<'a, 'gcx, 'tcx> TypeTrace<'tcx> {\n }\n \n impl<'tcx> fmt::Debug for TypeTrace<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"TypeTrace({:?})\", self.cause)\n     }\n }\n@@ -1598,7 +1598,7 @@ EnumTypeFoldableImpl! {\n }\n \n impl<'tcx> fmt::Debug for RegionObligation<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"RegionObligation(sub_region={:?}, sup_type={:?})\","}, {"sha": "e5220aad0562e0273da036e10916a0d49262ba76", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -841,7 +841,7 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n /// We will return true if the reference is within the same module as the existential type\n /// So true for f1, false for f2.\n pub fn may_define_existential_type(\n-    tcx: TyCtxt,\n+    tcx: TyCtxt<'_, '_, '_>,\n     def_id: DefId,\n     opaque_node_id: ast::NodeId,\n ) -> bool {"}, {"sha": "e19ecfd427beccbb22c61ffb85cbd00365be3349", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -84,14 +84,14 @@ impl<'tcx> FreeRegionRelations<'tcx> for FreeRegionMap<'tcx> {\n     }\n }\n \n-fn is_free(r: Region) -> bool {\n+fn is_free(r: Region<'_>) -> bool {\n     match *r {\n         ty::ReEarlyBound(_) | ty::ReFree(_) => true,\n         _ => false\n     }\n }\n \n-fn is_free_or_static(r: Region) -> bool {\n+fn is_free_or_static(r: Region<'_>) -> bool {\n     match *r {\n         ty::ReStatic => true,\n         _ => is_free(r),"}, {"sha": "95893a7117892c4a7d45dfacd57b66fe5063ec6b", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -914,13 +914,13 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n }\n \n impl fmt::Debug for RegionSnapshot {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"RegionSnapshot(length={})\", self.length)\n     }\n }\n \n impl<'tcx> fmt::Debug for GenericKind<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{:?}\", p),\n             GenericKind::Projection(ref p) => write!(f, \"{:?}\", p),\n@@ -929,7 +929,7 @@ impl<'tcx> fmt::Debug for GenericKind<'tcx> {\n }\n \n impl<'tcx> fmt::Display for GenericKind<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{}\", p),\n             GenericKind::Projection(ref p) => write!(f, \"{}\", p),"}, {"sha": "0ac9d415756308030a7f2d457c8b37caf3acf642", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -74,6 +74,8 @@\n \n #![recursion_limit=\"512\"]\n \n+#![warn(elided_lifetimes_in_paths)]\n+\n extern crate arena;\n #[macro_use] extern crate bitflags;\n extern crate core;"}, {"sha": "64056ece987706e566e5f539b2adc98a93f73571", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -432,7 +432,7 @@ pub enum BuiltinLintDiagnostics {\n }\n \n impl BuiltinLintDiagnostics {\n-    pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder) {\n+    pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder<'_>) {\n         match self {\n             BuiltinLintDiagnostics::Normal => (),\n             BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {"}, {"sha": "0633286e39838f3a85ee41442f17dae37a4a8fa0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -355,7 +355,7 @@ impl LintStore {\n         &self,\n         lint_name: &str,\n         tool_name: Option<LocalInternedString>,\n-    ) -> CheckLintNameResult {\n+    ) -> CheckLintNameResult<'_> {\n         let complete_name = if let Some(tool_name) = tool_name {\n             format!(\"{}::{}\", tool_name, lint_name)\n         } else {\n@@ -410,7 +410,7 @@ impl LintStore {\n         &self,\n         lint_name: &str,\n         tool_name: &str,\n-    ) -> CheckLintNameResult {\n+    ) -> CheckLintNameResult<'_> {\n         let complete_name = format!(\"{}::{}\", tool_name, lint_name);\n         match self.by_name.get(&complete_name) {\n             None => match self.lint_groups.get(&*complete_name) {\n@@ -525,7 +525,7 @@ pub trait LintContext<'tcx>: Sized {\n                                   lint: &'static Lint,\n                                   span: Option<S>,\n                                   msg: &str)\n-                                  -> DiagnosticBuilder;\n+                                  -> DiagnosticBuilder<'_>;\n \n     /// Emit a lint at the appropriate level, for a particular span.\n     fn span_lint<S: Into<MultiSpan>>(&self, lint: &'static Lint, span: S, msg: &str) {\n@@ -536,7 +536,7 @@ pub trait LintContext<'tcx>: Sized {\n                                             lint: &'static Lint,\n                                             span: S,\n                                             msg: &str)\n-                                            -> DiagnosticBuilder {\n+                                            -> DiagnosticBuilder<'_> {\n         self.lookup(lint, Some(span), msg)\n     }\n \n@@ -640,7 +640,7 @@ impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n                                   lint: &'static Lint,\n                                   span: Option<S>,\n                                   msg: &str)\n-                                  -> DiagnosticBuilder {\n+                                  -> DiagnosticBuilder<'_> {\n         let id = self.last_ast_node_with_lint_attrs;\n         match span {\n             Some(s) => self.tcx.struct_span_lint_node(lint, id, s, msg),\n@@ -697,7 +697,7 @@ impl<'a> LintContext<'a> for EarlyContext<'a> {\n                                   lint: &'static Lint,\n                                   span: Option<S>,\n                                   msg: &str)\n-                                  -> DiagnosticBuilder {\n+                                  -> DiagnosticBuilder<'_> {\n         self.builder.struct_lint(lint, span.map(|s| s.into()), msg)\n     }\n "}, {"sha": "80365a56102126ad892e6acc4d1011333239e826", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -54,7 +54,7 @@ impl LintLevelSets {\n         return me\n     }\n \n-    pub fn builder(sess: &Session) -> LintLevelsBuilder {\n+    pub fn builder(sess: &Session) -> LintLevelsBuilder<'_> {\n         LintLevelsBuilder::new(sess, LintLevelSets::new(sess))\n     }\n "}, {"sha": "3327b117d60560822d849bb3f313c03af0a89440", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -327,56 +327,56 @@ macro_rules! declare_combined_late_lint_pass {\n }\n \n pub trait EarlyLintPass: LintPass {\n-    fn check_ident(&mut self, _: &EarlyContext, _: ast::Ident) { }\n-    fn check_crate(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n-    fn check_crate_post(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n-    fn check_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n-    fn check_mod_post(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n-    fn check_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n-    fn check_foreign_item_post(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n-    fn check_item(&mut self, _: &EarlyContext, _: &ast::Item) { }\n-    fn check_item_post(&mut self, _: &EarlyContext, _: &ast::Item) { }\n-    fn check_local(&mut self, _: &EarlyContext, _: &ast::Local) { }\n-    fn check_block(&mut self, _: &EarlyContext, _: &ast::Block) { }\n-    fn check_block_post(&mut self, _: &EarlyContext, _: &ast::Block) { }\n-    fn check_stmt(&mut self, _: &EarlyContext, _: &ast::Stmt) { }\n-    fn check_arm(&mut self, _: &EarlyContext, _: &ast::Arm) { }\n-    fn check_pat(&mut self, _: &EarlyContext, _: &ast::Pat) { }\n-    fn check_expr(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n-    fn check_expr_post(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n-    fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }\n-    fn check_generic_param(&mut self, _: &EarlyContext, _: &ast::GenericParam) { }\n-    fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n-    fn check_where_predicate(&mut self, _: &EarlyContext, _: &ast::WherePredicate) { }\n-    fn check_poly_trait_ref(&mut self, _: &EarlyContext, _: &ast::PolyTraitRef,\n+    fn check_ident(&mut self, _: &EarlyContext<'_>, _: ast::Ident) { }\n+    fn check_crate(&mut self, _: &EarlyContext<'_>, _: &ast::Crate) { }\n+    fn check_crate_post(&mut self, _: &EarlyContext<'_>, _: &ast::Crate) { }\n+    fn check_mod(&mut self, _: &EarlyContext<'_>, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n+    fn check_mod_post(&mut self, _: &EarlyContext<'_>, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n+    fn check_foreign_item(&mut self, _: &EarlyContext<'_>, _: &ast::ForeignItem) { }\n+    fn check_foreign_item_post(&mut self, _: &EarlyContext<'_>, _: &ast::ForeignItem) { }\n+    fn check_item(&mut self, _: &EarlyContext<'_>, _: &ast::Item) { }\n+    fn check_item_post(&mut self, _: &EarlyContext<'_>, _: &ast::Item) { }\n+    fn check_local(&mut self, _: &EarlyContext<'_>, _: &ast::Local) { }\n+    fn check_block(&mut self, _: &EarlyContext<'_>, _: &ast::Block) { }\n+    fn check_block_post(&mut self, _: &EarlyContext<'_>, _: &ast::Block) { }\n+    fn check_stmt(&mut self, _: &EarlyContext<'_>, _: &ast::Stmt) { }\n+    fn check_arm(&mut self, _: &EarlyContext<'_>, _: &ast::Arm) { }\n+    fn check_pat(&mut self, _: &EarlyContext<'_>, _: &ast::Pat) { }\n+    fn check_expr(&mut self, _: &EarlyContext<'_>, _: &ast::Expr) { }\n+    fn check_expr_post(&mut self, _: &EarlyContext<'_>, _: &ast::Expr) { }\n+    fn check_ty(&mut self, _: &EarlyContext<'_>, _: &ast::Ty) { }\n+    fn check_generic_param(&mut self, _: &EarlyContext<'_>, _: &ast::GenericParam) { }\n+    fn check_generics(&mut self, _: &EarlyContext<'_>, _: &ast::Generics) { }\n+    fn check_where_predicate(&mut self, _: &EarlyContext<'_>, _: &ast::WherePredicate) { }\n+    fn check_poly_trait_ref(&mut self, _: &EarlyContext<'_>, _: &ast::PolyTraitRef,\n                             _: &ast::TraitBoundModifier) { }\n-    fn check_fn(&mut self, _: &EarlyContext,\n-        _: ast_visit::FnKind, _: &ast::FnDecl, _: Span, _: ast::NodeId) { }\n-    fn check_fn_post(&mut self, _: &EarlyContext,\n-        _: ast_visit::FnKind, _: &ast::FnDecl, _: Span, _: ast::NodeId) { }\n-    fn check_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n-    fn check_trait_item_post(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n-    fn check_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }\n-    fn check_impl_item_post(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }\n-    fn check_struct_def(&mut self, _: &EarlyContext,\n+    fn check_fn(&mut self, _: &EarlyContext<'_>,\n+        _: ast_visit::FnKind<'_>, _: &ast::FnDecl, _: Span, _: ast::NodeId) { }\n+    fn check_fn_post(&mut self, _: &EarlyContext<'_>,\n+        _: ast_visit::FnKind<'_>, _: &ast::FnDecl, _: Span, _: ast::NodeId) { }\n+    fn check_trait_item(&mut self, _: &EarlyContext<'_>, _: &ast::TraitItem) { }\n+    fn check_trait_item_post(&mut self, _: &EarlyContext<'_>, _: &ast::TraitItem) { }\n+    fn check_impl_item(&mut self, _: &EarlyContext<'_>, _: &ast::ImplItem) { }\n+    fn check_impl_item_post(&mut self, _: &EarlyContext<'_>, _: &ast::ImplItem) { }\n+    fn check_struct_def(&mut self, _: &EarlyContext<'_>,\n         _: &ast::VariantData, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n-    fn check_struct_def_post(&mut self, _: &EarlyContext,\n+    fn check_struct_def_post(&mut self, _: &EarlyContext<'_>,\n         _: &ast::VariantData, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n-    fn check_struct_field(&mut self, _: &EarlyContext, _: &ast::StructField) { }\n-    fn check_variant(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }\n-    fn check_variant_post(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }\n-    fn check_lifetime(&mut self, _: &EarlyContext, _: &ast::Lifetime) { }\n-    fn check_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }\n-    fn check_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }\n-    fn check_mac_def(&mut self, _: &EarlyContext, _: &ast::MacroDef, _id: ast::NodeId) { }\n-    fn check_mac(&mut self, _: &EarlyContext, _: &ast::Mac) { }\n+    fn check_struct_field(&mut self, _: &EarlyContext<'_>, _: &ast::StructField) { }\n+    fn check_variant(&mut self, _: &EarlyContext<'_>, _: &ast::Variant, _: &ast::Generics) { }\n+    fn check_variant_post(&mut self, _: &EarlyContext<'_>, _: &ast::Variant, _: &ast::Generics) { }\n+    fn check_lifetime(&mut self, _: &EarlyContext<'_>, _: &ast::Lifetime) { }\n+    fn check_path(&mut self, _: &EarlyContext<'_>, _: &ast::Path, _: ast::NodeId) { }\n+    fn check_attribute(&mut self, _: &EarlyContext<'_>, _: &ast::Attribute) { }\n+    fn check_mac_def(&mut self, _: &EarlyContext<'_>, _: &ast::MacroDef, _id: ast::NodeId) { }\n+    fn check_mac(&mut self, _: &EarlyContext<'_>, _: &ast::Mac) { }\n \n     /// Called when entering a syntax node that can have lint attributes such\n     /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n-    fn enter_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }\n+    fn enter_lint_attrs(&mut self, _: &EarlyContext<'_>, _: &[ast::Attribute]) { }\n \n     /// Counterpart to `enter_lint_attrs`.\n-    fn exit_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }\n+    fn exit_lint_attrs(&mut self, _: &EarlyContext<'_>, _: &[ast::Attribute]) { }\n }\n \n /// A lint pass boxed up as a trait object.\n@@ -728,7 +728,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     providers.lint_levels = lint_levels;\n }\n "}, {"sha": "4720bb2954963a1169ad66f9606b93e03e57d379", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -244,7 +244,7 @@ pub type CrateStoreDyn = dyn CrateStore + sync::Sync;\n // In order to get this left-to-right dependency ordering, we perform a\n // topological sort of all crates putting the leaves at the right-most\n // positions.\n-pub fn used_crates(tcx: TyCtxt, prefer: LinkagePreference)\n+pub fn used_crates(tcx: TyCtxt<'_, '_, '_>, prefer: LinkagePreference)\n     -> Vec<(CrateNum, LibSource)>\n {\n     let mut libs = tcx.crates()"}, {"sha": "66305ae8836ee90c1f63b23601179ac6def17a85", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -285,7 +285,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     }\n }\n \n-fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt,\n+fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_, '_, '_>,\n                                     id: ast::NodeId,\n                                     attrs: &[ast::Attribute]) -> bool {\n     if attr::contains_name(attrs, \"lang\") {"}, {"sha": "14551261819a6cd4309a87df5db14e3ed6d8cad9", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -256,7 +256,7 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     return ret;\n }\n \n-fn add_library(tcx: TyCtxt,\n+fn add_library(tcx: TyCtxt<'_, '_, '_>,\n                cnum: CrateNum,\n                link: LinkagePreference,\n                m: &mut FxHashMap<CrateNum, LinkagePreference>) {"}, {"sha": "b06d881bcaea41a54de2d5cdb04cb79918afe2c4", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n }\n \n pub fn find_entry_point(session: &Session,\n-                        hir_map: &hir_map::Map,\n+                        hir_map: &hir_map::Map<'_>,\n                         crate_name: &str) {\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateType::Executable\n@@ -113,7 +113,7 @@ fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType {\n }\n \n \n-fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n+fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     match entry_point_type(item, at_root) {\n         EntryPointType::MainNamed => {\n             if ctxt.main_fn.is_none() {\n@@ -154,7 +154,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n     }\n }\n \n-fn configure_main(this: &mut EntryContext, crate_name: &str) {\n+fn configure_main(this: &mut EntryContext<'_, '_>, crate_name: &str) {\n     if let Some((node_id, span)) = this.start_fn {\n         this.session.entry_fn.set(Some((node_id, span, EntryFnType::Start)));\n     } else if let Some((node_id, span)) = this.attr_main_fn {"}, {"sha": "6a254f1a189b54c812618b939bbbf952468e068e", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n     }\n }\n \n-pub fn metadata_symbol_name(tcx: ty::TyCtxt) -> String {\n+pub fn metadata_symbol_name(tcx: ty::TyCtxt<'_, '_, '_>) -> String {\n     format!(\"rust_metadata_{}_{}\",\n             tcx.original_crate_name(LOCAL_CRATE),\n             tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())"}, {"sha": "1a86dc4027e877d63038e0b0794156335439145c", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -211,7 +211,7 @@ enum OverloadedCallType {\n }\n \n impl OverloadedCallType {\n-    fn from_trait_id(tcx: TyCtxt, trait_id: DefId) -> OverloadedCallType {\n+    fn from_trait_id(tcx: TyCtxt<'_, '_, '_>, trait_id: DefId) -> OverloadedCallType {\n         for &(maybe_function_trait, overloaded_call_type) in &[\n             (tcx.lang_items().fn_once_trait(), FnOnceOverloadedCall),\n             (tcx.lang_items().fn_mut_trait(), FnMutOverloadedCall),\n@@ -228,7 +228,7 @@ impl OverloadedCallType {\n         bug!(\"overloaded call didn't map to known function trait\")\n     }\n \n-    fn from_method_id(tcx: TyCtxt, method_id: DefId) -> OverloadedCallType {\n+    fn from_method_id(tcx: TyCtxt<'_, '_, '_>, method_id: DefId) -> OverloadedCallType {\n         let method = tcx.associated_item(method_id);\n         OverloadedCallType::from_trait_id(tcx, method.container.id())\n     }"}, {"sha": "ff4b1fc2921b25bb8ce377c36382756362bc4409", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -158,7 +158,7 @@ enum LiveNodeKind {\n     ExitNode\n }\n \n-fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt) -> String {\n+fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_, '_, '_>) -> String {\n     let cm = tcx.sess.source_map();\n     match lnk {\n         FreeVarNode(s) => {\n@@ -195,13 +195,13 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n }\n \n impl fmt::Debug for LiveNode {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"ln({})\", self.get())\n     }\n }\n \n impl fmt::Debug for Variable {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"v({})\", self.get())\n     }\n }\n@@ -371,7 +371,7 @@ fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,\n         }\n     }\n \n-    debug!(\"creating fn_maps: {:?}\", &fn_maps as *const IrMaps);\n+    debug!(\"creating fn_maps: {:?}\", &fn_maps as *const IrMaps<'_, '_>);\n \n     let body = ir.tcx.hir.body(body_id);\n \n@@ -1388,7 +1388,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn propagate_through_loop(&mut self,\n                               expr: &Expr,\n-                              kind: LoopKind,\n+                              kind: LoopKind<'_>,\n                               body: &hir::Block,\n                               succ: LiveNode)\n                               -> LiveNode {"}, {"sha": "13c969cec297e9e37d83cfe2b4486c22089026fc", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -324,7 +324,7 @@ impl MutabilityCategory {\n     }\n \n     fn from_pointer_kind(base_mutbl: MutabilityCategory,\n-                         ptr: PointerKind) -> MutabilityCategory {\n+                         ptr: PointerKind<'_>) -> MutabilityCategory {\n         let ret = match ptr {\n             Unique => {\n                 base_mutbl.inherit()\n@@ -341,7 +341,8 @@ impl MutabilityCategory {\n         ret\n     }\n \n-    fn from_local(tcx: TyCtxt, tables: &ty::TypeckTables, id: ast::NodeId) -> MutabilityCategory {\n+    fn from_local(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>,\n+                  id: ast::NodeId) -> MutabilityCategory {\n         let ret = match tcx.hir.get(id) {\n             Node::Binding(p) => match p.node {\n                 PatKind::Binding(..) => {\n@@ -1488,7 +1489,7 @@ impl<'tcx> cmt_<'tcx> {\n         }\n     }\n \n-    pub fn descriptive_string(&self, tcx: TyCtxt) -> String {\n+    pub fn descriptive_string(&self, tcx: TyCtxt<'_, '_, '_>) -> String {\n         match self.cat {\n             Categorization::StaticItem => {\n                 \"static item\".to_string()\n@@ -1546,7 +1547,7 @@ impl<'tcx> cmt_<'tcx> {\n     }\n }\n \n-pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n+pub fn ptr_sigil(ptr: PointerKind<'_>) -> &'static str {\n     match ptr {\n         Unique => \"Box\",\n         BorrowedPtr(ty::ImmBorrow, _) => \"&\",\n@@ -1557,7 +1558,7 @@ pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n }\n \n impl fmt::Debug for InteriorKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             InteriorField(FieldIndex(_, info)) => write!(f, \"{}\", info),\n             InteriorElement(..) => write!(f, \"[]\"),\n@@ -1566,13 +1567,13 @@ impl fmt::Debug for InteriorKind {\n }\n \n impl fmt::Debug for Upvar {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}/{:?}\", self.id, self.kind)\n     }\n }\n \n impl fmt::Display for Upvar {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let kind = match self.kind {\n             ty::ClosureKind::Fn => \"Fn\",\n             ty::ClosureKind::FnMut => \"FnMut\","}, {"sha": "880d428e7a580c7360fdbd8d1693393e3284b4a8", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -59,7 +59,7 @@ impl<Id: Hash + Eq> Default for AccessLevels<Id> {\n }\n \n impl<Id: Hash + Eq + fmt::Debug> fmt::Debug for AccessLevels<Id> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.map, f)\n     }\n }"}, {"sha": "9416d60c9d1a3bfeb05a4c56737f5d3b5ed39e26", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -443,7 +443,7 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     ReachableSet(Lrc::new(reachable_context.reachable_symbols))\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         reachable_set,\n         ..*providers"}, {"sha": "01b0d2c27a1418b8b78988a670869341715633b2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -107,7 +107,7 @@ pub struct Scope {\n }\n \n impl fmt::Debug for Scope {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.data {\n             ScopeData::Node => write!(fmt, \"Node({:?})\", self.id),\n             ScopeData::CallSite => write!(fmt, \"CallSite({:?})\", self.id),\n@@ -179,7 +179,7 @@ impl Scope {\n         self.id\n     }\n \n-    pub fn node_id(&self, tcx: TyCtxt, scope_tree: &ScopeTree) -> ast::NodeId {\n+    pub fn node_id(&self, tcx: TyCtxt<'_, '_, '_>, scope_tree: &ScopeTree) -> ast::NodeId {\n         match scope_tree.root_body {\n             Some(hir_id) => {\n                 tcx.hir.hir_to_node_id(hir::HirId {\n@@ -194,7 +194,7 @@ impl Scope {\n     /// Returns the span of this Scope.  Note that in general the\n     /// returned span may not correspond to the span of any node id in\n     /// the AST.\n-    pub fn span(&self, tcx: TyCtxt, scope_tree: &ScopeTree) -> Span {\n+    pub fn span(&self, tcx: TyCtxt<'_, '_, '_>, scope_tree: &ScopeTree) -> Span {\n         let node_id = self.node_id(tcx, scope_tree);\n         if node_id == ast::DUMMY_NODE_ID {\n             return DUMMY_SP;\n@@ -748,7 +748,7 @@ impl<'tcx> ScopeTree {\n }\n \n /// Records the lifetime of a local variable as `cx.var_parent`\n-fn record_var_lifetime(visitor: &mut RegionResolutionVisitor,\n+fn record_var_lifetime(visitor: &mut RegionResolutionVisitor<'_, '_>,\n                        var_id: hir::ItemLocalId,\n                        _sp: Span) {\n     match visitor.cx.var_parent {\n@@ -1383,7 +1383,7 @@ fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     Lrc::new(scope_tree)\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         region_scope_tree,\n         ..*providers"}, {"sha": "cda7d8d6b900330391256e1e1e7730bee6868ebb", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -88,7 +88,7 @@ pub enum Region {\n }\n \n impl Region {\n-    fn early(hir_map: &Map, index: &mut u32, param: &GenericParam) -> (ParamName, Region) {\n+    fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam) -> (ParamName, Region) {\n         let i = *index;\n         *index += 1;\n         let def_id = hir_map.local_def_id(param.id);\n@@ -97,7 +97,7 @@ impl Region {\n         (param.name.modern(), Region::EarlyBound(i, def_id, origin))\n     }\n \n-    fn late(hir_map: &Map, param: &GenericParam) -> (ParamName, Region) {\n+    fn late(hir_map: &Map<'_>, param: &GenericParam) -> (ParamName, Region) {\n         let depth = ty::INNERMOST;\n         let def_id = hir_map.local_def_id(param.id);\n         let origin = LifetimeDefOrigin::from_param(param);\n@@ -348,7 +348,7 @@ type ScopeRef<'a> = &'a Scope<'a>;\n \n const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         resolve_lifetimes,\n \n@@ -1371,9 +1371,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         f(self)\n     }\n \n-    fn with<F>(&mut self, wrap_scope: Scope, f: F)\n+    fn with<F>(&mut self, wrap_scope: Scope<'_>, f: F)\n     where\n-        F: for<'b> FnOnce(ScopeRef, &mut LifetimeContext<'b, 'tcx>),\n+        F: for<'b> FnOnce(ScopeRef<'_>, &mut LifetimeContext<'b, 'tcx>),\n     {\n         let LifetimeContext {\n             tcx,\n@@ -2159,7 +2159,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n     fn report_elision_failure(\n         &mut self,\n-        db: &mut DiagnosticBuilder,\n+        db: &mut DiagnosticBuilder<'_>,\n         params: &[ElisionFailureInfo],\n     ) {\n         let mut m = String::new();\n@@ -2268,7 +2268,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.insert_lifetime(lifetime_ref, lifetime.shifted(late_depth));\n     }\n \n-    fn check_lifetime_params(&mut self, old_scope: ScopeRef, params: &'tcx [hir::GenericParam]) {\n+    fn check_lifetime_params(&mut self, old_scope: ScopeRef<'_>,\n+                             params: &'tcx [hir::GenericParam]) {\n         let lifetimes: Vec<_> = params.iter().filter_map(|param| match param.kind {\n             GenericParamKind::Lifetime { .. } => Some((param, param.name)),\n             _ => None,\n@@ -2351,7 +2352,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n     fn check_lifetime_param_for_shadowing(\n         &self,\n-        mut old_scope: ScopeRef,\n+        mut old_scope: ScopeRef<'_>,\n         param: &'tcx hir::GenericParam,\n     ) {\n         for label in &self.labels_in_fn {"}, {"sha": "941bd4dda99d725d32b9ff2ceb1a57709ba11720", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -70,7 +70,7 @@ pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol> {\n /// Not all lang items are always required for each compilation, particularly in\n /// the case of panic=abort. In these situations some lang items are injected by\n /// crates and don't actually need to be defined in libstd.\n-pub fn whitelisted(tcx: TyCtxt, lang_item: lang_items::LangItem) -> bool {\n+pub fn whitelisted(tcx: TyCtxt<'_, '_, '_>, lang_item: lang_items::LangItem) -> bool {\n     // If we're not compiling with unwinding, we won't actually need these\n     // symbols. Other panic runtimes ensure that the relevant symbols are\n     // available to link things together, but they're never exercised."}, {"sha": "32c60c143065d7f4c6b6419eb91b49188c180b07", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -57,8 +57,8 @@ impl Cache {\n \n     pub fn predecessors(\n         &self,\n-        mir: &Mir\n-    ) -> MappedReadGuard<IndexVec<BasicBlock, Vec<BasicBlock>>> {\n+        mir: &Mir<'_>\n+    ) -> MappedReadGuard<'_, IndexVec<BasicBlock, Vec<BasicBlock>>> {\n         if self.predecessors.borrow().is_none() {\n             *self.predecessors.borrow_mut() = Some(calculate_predecessors(mir));\n         }\n@@ -67,7 +67,7 @@ impl Cache {\n     }\n }\n \n-fn calculate_predecessors(mir: &Mir) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n+fn calculate_predecessors(mir: &Mir<'_>) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n     let mut result = IndexVec::from_elem(vec![], mir.basic_blocks());\n     for (bb, data) in mir.basic_blocks().iter_enumerated() {\n         if let Some(ref term) = data.terminator {"}, {"sha": "566673857b975b14df86284a76cf19ecd5e12f18", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -429,13 +429,13 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n }\n \n impl<'tcx> fmt::Display for EvalError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.kind)\n     }\n }\n \n impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::EvalErrorKind::*;\n         match *self {\n             PointerOutOfBounds { ptr, access, allocation_size } => {"}, {"sha": "be0639f242094b0e296b4bb5e67b13028e58715c", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -253,7 +253,7 @@ pub struct AllocDecodingState {\n \n impl AllocDecodingState {\n \n-    pub fn new_decoding_session(&self) -> AllocDecodingSession {\n+    pub fn new_decoding_session(&self) -> AllocDecodingSession<'_> {\n         static DECODER_SESSION_ID: AtomicU32 = AtomicU32::new(0);\n         let counter = DECODER_SESSION_ID.fetch_add(1, Ordering::SeqCst);\n \n@@ -394,7 +394,7 @@ impl<'s> AllocDecodingSession<'s> {\n }\n \n impl fmt::Display for AllocId {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.0)\n     }\n }"}, {"sha": "3e6246f2ea8d80e5f45defb710e5ff3c6459e286", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -845,7 +845,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     ///\n     /// This must be inserted into the `local_decls` list as the first local.\n     #[inline]\n-    pub fn new_return_place(return_ty: Ty, span: Span) -> LocalDecl {\n+    pub fn new_return_place(return_ty: Ty<'_>, span: Span) -> LocalDecl<'_> {\n         LocalDecl {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n@@ -1082,11 +1082,11 @@ pub type SuccessorsMut<'a> =\n     iter::Chain<option::IntoIter<&'a mut BasicBlock>, slice::IterMut<'a, BasicBlock>>;\n \n impl<'tcx> Terminator<'tcx> {\n-    pub fn successors(&self) -> Successors {\n+    pub fn successors(&self) -> Successors<'_> {\n         self.kind.successors()\n     }\n \n-    pub fn successors_mut(&mut self) -> SuccessorsMut {\n+    pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {\n         self.kind.successors_mut()\n     }\n \n@@ -1115,7 +1115,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         }\n     }\n \n-    pub fn successors(&self) -> Successors {\n+    pub fn successors(&self) -> Successors<'_> {\n         use self::TerminatorKind::*;\n         match *self {\n             Resume\n@@ -1200,7 +1200,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         }\n     }\n \n-    pub fn successors_mut(&mut self) -> SuccessorsMut {\n+    pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {\n         use self::TerminatorKind::*;\n         match *self {\n             Resume\n@@ -1363,7 +1363,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n \n     pub fn retain_statements<F>(&mut self, mut f: F)\n     where\n-        F: FnMut(&mut Statement) -> bool,\n+        F: FnMut(&mut Statement<'_>) -> bool,\n     {\n         for s in &mut self.statements {\n             if !f(s) {\n@@ -1437,7 +1437,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n }\n \n impl<'tcx> Debug for TerminatorKind<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         self.fmt_head(fmt)?;\n         let successor_count = self.successors().count();\n         let labels = self.fmt_successor_labels();\n@@ -1731,7 +1731,7 @@ pub enum ValidationOp {\n }\n \n impl Debug for ValidationOp {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::ValidationOp::*;\n         match *self {\n             Acquire => write!(fmt, \"Acquire\"),\n@@ -1752,7 +1752,7 @@ pub struct ValidationOperand<'tcx, T> {\n }\n \n impl<'tcx, T: Debug> Debug for ValidationOperand<'tcx, T> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{:?}: {:?}\", self.place, self.ty)?;\n         if let Some(ce) = self.re {\n             // (reuse lifetime rendering policy from ppaux.)\n@@ -1766,7 +1766,7 @@ impl<'tcx, T: Debug> Debug for ValidationOperand<'tcx, T> {\n }\n \n impl<'tcx> Debug for Statement<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref place, ref rv) => write!(fmt, \"{:?} = {:?}\", place, rv),\n@@ -1923,7 +1923,7 @@ impl<'tcx> Place<'tcx> {\n }\n \n impl<'tcx> Debug for Place<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::Place::*;\n \n         match *self {\n@@ -2018,7 +2018,7 @@ pub enum Operand<'tcx> {\n }\n \n impl<'tcx> Debug for Operand<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::Operand::*;\n         match *self {\n             Constant(ref a) => write!(fmt, \"{:?}\", a),\n@@ -2203,7 +2203,7 @@ pub enum UnOp {\n }\n \n impl<'tcx> Debug for Rvalue<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::Rvalue::*;\n \n         match *self {\n@@ -2242,7 +2242,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             }\n \n             Aggregate(ref kind, ref places) => {\n-                fn fmt_tuple(fmt: &mut Formatter, places: &[Operand]) -> fmt::Result {\n+                fn fmt_tuple(fmt: &mut Formatter<'_>, places: &[Operand<'_>]) -> fmt::Result {\n                     let mut tuple_fmt = fmt.debug_tuple(\"\");\n                     for place in places {\n                         tuple_fmt.field(place);\n@@ -2356,14 +2356,14 @@ newtype_index! {\n }\n \n impl<'tcx> Debug for Constant<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"const \")?;\n         fmt_const_val(fmt, self.literal)\n     }\n }\n \n /// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n-pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n+pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const<'_>) -> fmt::Result {\n     use ty::TyKind::*;\n     let value = const_val.val;\n     let ty = const_val.ty;\n@@ -2478,7 +2478,7 @@ pub struct Location {\n }\n \n impl fmt::Debug for Location {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{:?}[{}]\", self.block, self.statement_index)\n     }\n }"}, {"sha": "12bc9cf76b5a9a88e2ab7cce7edffeaa7b1d6466", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -2379,7 +2379,7 @@ pub mod nightly_options {\n }\n \n impl fmt::Display for CrateType {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             CrateType::Executable => \"bin\".fmt(f),\n             CrateType::Dylib => \"dylib\".fmt(f),"}, {"sha": "0bef898ecc7750fd2405a3e81f8b5c5a814f5999", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -705,15 +705,15 @@ impl Session {\n                 .expect(\"missing sysroot and default_sysroot in Session\"),\n         }\n     }\n-    pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch {\n+    pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n         filesearch::FileSearch::new(\n             self.sysroot(),\n             self.opts.target_triple.triple(),\n             &self.opts.search_paths,\n             kind,\n         )\n     }\n-    pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch {\n+    pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n         filesearch::FileSearch::new(\n             self.sysroot(),\n             config::host_triple(),\n@@ -803,7 +803,7 @@ impl Session {\n         *incr_comp_session = IncrCompSession::InvalidBecauseOfErrors { session_directory };\n     }\n \n-    pub fn incr_comp_session_dir(&self) -> cell::Ref<PathBuf> {\n+    pub fn incr_comp_session_dir(&self) -> cell::Ref<'_, PathBuf> {\n         let incr_comp_session = self.incr_comp_session.borrow();\n         cell::Ref::map(\n             incr_comp_session,\n@@ -826,7 +826,7 @@ impl Session {\n         )\n     }\n \n-    pub fn incr_comp_session_dir_opt(&self) -> Option<cell::Ref<PathBuf>> {\n+    pub fn incr_comp_session_dir_opt(&self) -> Option<cell::Ref<'_, PathBuf>> {\n         if self.opts.incremental.is_some() {\n             Some(self.incr_comp_session_dir())\n         } else {\n@@ -1253,7 +1253,7 @@ impl CrateDisambiguator {\n }\n \n impl fmt::Display for CrateDisambiguator {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         let (a, b) = self.0.as_value();\n         let as_u128 = a as u128 | ((b as u128) << 64);\n         f.write_str(&base_n::encode(as_u128, base_n::CASE_INSENSITIVE))"}, {"sha": "be1bfcc0894dd11c5899ec72c35172f65f4cecf8", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -57,7 +57,7 @@ impl SearchPaths {\n         self.paths.push((kind, PathBuf::from(path)));\n     }\n \n-    pub fn iter(&self, kind: PathKind) -> Iter {\n+    pub fn iter(&self, kind: PathKind) -> Iter<'_> {\n         Iter { kind: kind, iter: self.paths.iter() }\n     }\n }"}, {"sha": "ec1c5a40b4fa354015dc43ebd3fa15d475e4b3b1", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -483,14 +483,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn region_name(&self, region: Region) -> Option<String> {\n+    pub fn region_name(&self, region: Region<'_>) -> Option<String> {\n         match region {\n             &ty::ReEarlyBound(r) => Some(r.name.to_string()),\n             _ => None,\n         }\n     }\n \n-    pub fn get_lifetime(&self, region: Region, names_map: &FxHashMap<String, String>) -> String {\n+    pub fn get_lifetime(&self, region: Region<'_>,\n+                        names_map: &FxHashMap<String, String>) -> String {\n         self.region_name(region)\n             .map(|name|\n                 names_map.get(&name).unwrap_or_else(||\n@@ -591,7 +592,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         finished_map\n     }\n \n-    pub fn is_of_param(&self, substs: &Substs) -> bool {\n+    pub fn is_of_param(&self, substs: &Substs<'_>) -> bool {\n         if substs.is_noop() {\n             return false;\n         }\n@@ -611,7 +612,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         T: Iterator<Item = Obligation<'cx, ty::Predicate<'cx>>>,\n     >(\n         &self,\n-        ty: ty::Ty,\n+        ty: ty::Ty<'_>,\n         nested: T,\n         computed_preds: &'b mut FxHashSet<ty::Predicate<'cx>>,\n         fresh_preds: &'b mut FxHashSet<ty::Predicate<'cx>>,"}, {"sha": "7401d4099ff6dff05b6305276a9c6ce753ee5ed1", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -337,7 +337,7 @@ pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n ///\n /// Note that this function is never called for types that have both type\n /// parameters and inference variables.\n-fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n+fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n                                 trait_ref: ty::TraitRef<'tcx>,\n                                 in_crate: InCrate)\n                                 -> Result<(), OrphanCheckErr<'tcx>>\n@@ -389,7 +389,7 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n     return Err(OrphanCheckErr::NoLocalInputType);\n }\n \n-fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, in_crate: InCrate)\n+fn uncovered_tys<'tcx>(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>, in_crate: InCrate)\n                        -> Vec<Ty<'tcx>> {\n     if ty_is_local_constructor(ty, in_crate) {\n         vec![]\n@@ -402,19 +402,19 @@ fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, in_crate: InCrate)\n     }\n }\n \n-fn is_possibly_remote_type(ty: Ty, _in_crate: InCrate) -> bool {\n+fn is_possibly_remote_type(ty: Ty<'_>, _in_crate: InCrate) -> bool {\n     match ty.sty {\n         ty::Projection(..) | ty::Param(..) => true,\n         _ => false,\n     }\n }\n \n-fn ty_is_local(tcx: TyCtxt, ty: Ty, in_crate: InCrate) -> bool {\n+fn ty_is_local(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n     ty_is_local_constructor(ty, in_crate) ||\n         fundamental_ty(tcx, ty) && ty.walk_shallow().any(|t| ty_is_local(tcx, t, in_crate))\n }\n \n-fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool {\n+fn fundamental_ty(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'_>) -> bool {\n     match ty.sty {\n         ty::Ref(..) => true,\n         ty::Adt(def, _) => def.is_fundamental(),\n@@ -434,7 +434,7 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(ty: Ty, in_crate: InCrate) -> bool {\n+fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n     debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match ty.sty {"}, {"sha": "7695f26d701156272e31d9b59a710f6bab8124a4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -437,7 +437,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     fn report_similar_impl_candidates(&self,\n                                       mut impl_candidates: Vec<ty::TraitRef<'tcx>>,\n-                                      err: &mut DiagnosticBuilder)\n+                                      err: &mut DiagnosticBuilder<'_>)\n     {\n         if impl_candidates.is_empty() {\n             return;\n@@ -930,7 +930,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to\n     /// `report_arg_count_mismatch`.\n-    pub fn get_fn_like_arguments(&self, node: Node) -> (Span, Vec<ArgKind>) {\n+    pub fn get_fn_like_arguments(&self, node: Node<'_>) -> (Span, Vec<ArgKind>) {\n         match node {\n             Node::Expr(&hir::Expr {\n                 node: hir::ExprKind::Closure(_, ref _decl, id, span, _),\n@@ -1378,7 +1378,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn note_obligation_cause<T>(&self,\n-                                err: &mut DiagnosticBuilder,\n+                                err: &mut DiagnosticBuilder<'_>,\n                                 obligation: &Obligation<'tcx, T>)\n         where T: fmt::Display\n     {\n@@ -1389,7 +1389,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn note_obligation_cause_code<T>(&self,\n-                                     err: &mut DiagnosticBuilder,\n+                                     err: &mut DiagnosticBuilder<'_>,\n                                      predicate: &T,\n                                      cause_code: &ObligationCauseCode<'tcx>,\n                                      obligated_types: &mut Vec<&ty::TyS<'tcx>>)\n@@ -1545,7 +1545,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder) {\n+    fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>) {\n         let current_limit = self.tcx.sess.recursion_limit.get();\n         let suggested_limit = current_limit * 2;\n         err.help(&format!(\"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\","}, {"sha": "bcbdb179464bece07c55cad98e998e5d676aa1bf", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -1009,7 +1009,7 @@ impl<'tcx> TraitObligation<'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         is_object_safe: object_safety::is_object_safe_provider,\n         specialization_graph_of: specialize::specialization_graph_provider,"}, {"sha": "dcbddc03080916caf30a1e5d8f5cd2550b6997fd", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -44,7 +44,7 @@ impl OnUnimplementedNote {\n     }\n }\n \n-fn parse_error(tcx: TyCtxt, span: Span,\n+fn parse_error(tcx: TyCtxt<'_, '_, '_>, span: Span,\n                message: &str,\n                label: &str,\n                note: Option<&str>)"}, {"sha": "6708112697bb558d0963e3c3776f05eb8c6b6be6", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -62,7 +62,7 @@ impl<F, G> fmt::Debug for CustomTypeOp<F, G>\n where\n     G: Fn() -> String,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", (self.description)())\n     }\n }"}, {"sha": "7300588f6af39f3e7f192a096a8c75a884fb1a60", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -110,7 +110,7 @@ impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n     pub fn add_intercrate_ambiguity_hint<'a, 'tcx>(&self,\n-                                                   err: &mut ::errors::DiagnosticBuilder) {\n+                                                   err: &mut ::errors::DiagnosticBuilder<'_>) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }\n \n@@ -537,7 +537,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     /// Wraps a commit_if_ok s.t. obligations collected during it are not returned in selection if\n     /// the transaction fails and s.t. old obligations are retained.\n     fn commit_if_ok<T, E, F>(&mut self, f: F) -> Result<T, E> where\n-        F: FnOnce(&mut Self, &infer::CombinedSnapshot) -> Result<T, E>\n+        F: FnOnce(&mut Self, &infer::CombinedSnapshot<'cx, 'tcx>) -> Result<T, E>\n     {\n         self.infcx.commit_if_ok(|snapshot| f(self, snapshot))\n     }\n@@ -1221,7 +1221,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         // Winnow, but record the exact outcome of evaluation, which\n         // is needed for specialization. Propagate overflow if it occurs.\n-        let candidates: Result<Vec<Option<EvaluatedCandidate>>, _> = candidates\n+        let candidates: Result<Vec<Option<EvaluatedCandidate<'_>>>, _> = candidates\n             .into_iter()\n             .map(|c| match self.evaluate_candidate(stack, &c) {\n                 Ok(eval) if eval.may_apply() => Ok(Some(EvaluatedCandidate {\n@@ -1233,7 +1233,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             })\n             .collect();\n \n-        let mut candidates: Vec<EvaluatedCandidate> =\n+        let mut candidates: Vec<EvaluatedCandidate<'_>> =\n             candidates?.into_iter().filter_map(|c| c).collect();\n \n         debug!(\"winnowed to {} candidates for {:?}: {:?}\",\n@@ -3245,8 +3245,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     }\n \n     fn fast_reject_trait_refs(&mut self,\n-                              obligation: &TraitObligation,\n-                              impl_trait_ref: &ty::TraitRef)\n+                              obligation: &TraitObligation<'_>,\n+                              impl_trait_ref: &ty::TraitRef<'_>)\n                               -> bool\n     {\n         // We can avoid creating type variables and doing the full\n@@ -3536,7 +3536,7 @@ impl<'o,'tcx> Iterator for TraitObligationStackList<'o,'tcx>{\n }\n \n impl<'o,'tcx> fmt::Debug for TraitObligationStack<'o,'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"TraitObligationStack({:?})\", self.obligation)\n     }\n }\n@@ -3552,7 +3552,7 @@ impl<T: Clone> WithDepNode<T> {\n         WithDepNode { dep_node, cached_value }\n     }\n \n-    pub fn get(&self, tcx: TyCtxt) -> T {\n+    pub fn get(&self, tcx: TyCtxt<'_, '_, '_>) -> T {\n         tcx.dep_graph.read_index(self.dep_node);\n         self.cached_value.clone()\n     }"}, {"sha": "84ffa22e5dd2ec7a3dec5ebd69b30a2361fcaf3c", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -395,7 +395,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n \n /// Recovers the \"impl X for Y\" signature from `impl_def_id` and returns it as a\n /// string.\n-fn to_pretty_impl_header(tcx: TyCtxt, impl_def_id: DefId) -> Option<String> {\n+fn to_pretty_impl_header(tcx: TyCtxt<'_, '_, '_>, impl_def_id: DefId) -> Option<String> {\n     use std::fmt::Write;\n \n     let trait_ref = if let Some(tr) = tcx.impl_trait_ref(impl_def_id) {"}, {"sha": "e237cab5ea135abde38e63f0fb5d56c9a8e42c6d", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -142,7 +142,7 @@ impl<'a, 'gcx, 'tcx> Children {\n                 possible_sibling,\n             );\n \n-            let overlap_error = |overlap: traits::coherence::OverlapResult| {\n+            let overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {\n                 // overlap, but no specialization; error out\n                 let trait_ref = overlap.impl_header.trait_ref.unwrap();\n                 let self_ty = trait_ref.self_ty();\n@@ -447,7 +447,7 @@ impl<'a, 'gcx, 'tcx> Ancestors {\n \n /// Walk up the specialization ancestors of a given impl, starting with that\n /// impl itself.\n-pub fn ancestors(tcx: TyCtxt,\n+pub fn ancestors(tcx: TyCtxt<'_, '_, '_>,\n                  trait_def_id: DefId,\n                  start_from_impl: DefId)\n                  -> Ancestors {"}, {"sha": "22e79fc2638abbf1a7f9e1a712c62060a91060ef", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -21,13 +21,13 @@ use std::rc::Rc;\n // structural impls for the structs in traits\n \n impl<'tcx, T: fmt::Debug> fmt::Debug for Normalized<'tcx, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"Normalized({:?},{:?})\", self.value, self.obligations)\n     }\n }\n \n impl<'tcx, O: fmt::Debug> fmt::Debug for traits::Obligation<'tcx, O> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if ty::tls::with(|tcx| tcx.sess.verbose()) {\n             write!(\n                 f,\n@@ -45,7 +45,7 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for traits::Obligation<'tcx, O> {\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::Vtable<'tcx, N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             super::VtableImpl(ref v) => write!(f, \"{:?}\", v),\n \n@@ -67,7 +67,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::Vtable<'tcx, N> {\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableImplData<'tcx, N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"VtableImpl(impl_def_id={:?}, substs={:?}, nested={:?})\",\n@@ -77,7 +77,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableImplData<'tcx, N> {\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableGeneratorData<'tcx, N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"VtableGenerator(generator_def_id={:?}, substs={:?}, nested={:?})\",\n@@ -87,7 +87,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableGeneratorData<'tcx, N> {\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"VtableClosure(closure_def_id={:?}, substs={:?}, nested={:?})\",\n@@ -97,13 +97,13 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> {\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"VtableBuiltin(nested={:?})\", self.nested)\n     }\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableAutoImplData<N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"VtableAutoImplData(trait_def_id={:?}, nested={:?})\",\n@@ -113,7 +113,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableAutoImplData<N> {\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableObjectData<'tcx, N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"VtableObject(upcast={:?}, vtable_base={}, nested={:?})\",\n@@ -123,7 +123,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableObjectData<'tcx, N> {\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableFnPointerData<'tcx, N> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"VtableFnPointer(fn_ty={:?}, nested={:?})\",\n@@ -133,13 +133,13 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableFnPointerData<'tcx, N> {\n }\n \n impl<'tcx> fmt::Debug for traits::FulfillmentError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"FulfillmentError({:?},{:?})\", self.obligation, self.code)\n     }\n }\n \n impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             super::CodeSelectionError(ref e) => write!(f, \"{:?}\", e),\n             super::CodeProjectionError(ref e) => write!(f, \"{:?}\", e),\n@@ -152,7 +152,7 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n }\n \n impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"MismatchedProjectionTypes({:?})\", self.err)\n     }\n }\n@@ -409,7 +409,7 @@ BraceStructTypeFoldableImpl! {\n }\n \n impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::WhereClause::*;\n \n         match self {\n@@ -422,7 +422,7 @@ impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n }\n \n impl<'tcx> fmt::Display for traits::WellFormed<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::WellFormed::*;\n \n         match self {\n@@ -433,7 +433,7 @@ impl<'tcx> fmt::Display for traits::WellFormed<'tcx> {\n }\n \n impl<'tcx> fmt::Display for traits::FromEnv<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::FromEnv::*;\n \n         match self {\n@@ -444,7 +444,7 @@ impl<'tcx> fmt::Display for traits::FromEnv<'tcx> {\n }\n \n impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::DomainGoal::*;\n \n         match self {\n@@ -457,7 +457,7 @@ impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n }\n \n impl fmt::Display for traits::QuantifierKind {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::QuantifierKind::*;\n \n         match self {\n@@ -468,7 +468,7 @@ impl fmt::Display for traits::QuantifierKind {\n }\n \n impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::Goal::*;\n \n         match self {\n@@ -495,7 +495,7 @@ impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n }\n \n impl<'tcx> fmt::Display for traits::ProgramClause<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let traits::ProgramClause { goal, hypotheses } = self;\n         write!(fmt, \"{}\", goal)?;\n         if !hypotheses.is_empty() {\n@@ -512,7 +512,7 @@ impl<'tcx> fmt::Display for traits::ProgramClause<'tcx> {\n }\n \n impl<'tcx> fmt::Display for traits::Clause<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::Clause::*;\n \n         match self {"}, {"sha": "ae87d30ec942711254f433149c21612809efe235", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -320,7 +320,7 @@ macro_rules! implement_ty_decoder {\n                     read_f64 -> f64;\n                     read_f32 -> f32;\n                     read_char -> char;\n-                    read_str -> Cow<str>;\n+                    read_str -> Cow<'_, str>;\n                 }\n \n                 fn error(&mut self, err: &str) -> Self::Error {\n@@ -417,4 +417,3 @@ macro_rules! implement_ty_decoder {\n         }\n     }\n }\n-"}, {"sha": "c288285f2bb3f1e95c762bc187d4cf4ec5600a8c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 39, "deletions": 38, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -301,7 +301,7 @@ impl<'a, V> LocalTableInContext<'a, V> {\n         self.data.get(&id.local_id)\n     }\n \n-    pub fn iter(&self) -> hash_map::Iter<hir::ItemLocalId, V> {\n+    pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {\n         self.data.iter()\n     }\n }\n@@ -325,7 +325,7 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n         self.data.get_mut(&id.local_id)\n     }\n \n-    pub fn entry(&mut self, id: hir::HirId) -> Entry<hir::ItemLocalId, V> {\n+    pub fn entry(&mut self, id: hir::HirId) -> Entry<'_, hir::ItemLocalId, V> {\n         validate_hir_id_for_typeck_tables(self.local_id_root, id, true);\n         self.data.entry(id.local_id)\n     }\n@@ -483,56 +483,56 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn type_dependent_defs(&self) -> LocalTableInContext<Def> {\n+    pub fn type_dependent_defs(&self) -> LocalTableInContext<'_, Def> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.type_dependent_defs\n         }\n     }\n \n-    pub fn type_dependent_defs_mut(&mut self) -> LocalTableInContextMut<Def> {\n+    pub fn type_dependent_defs_mut(&mut self) -> LocalTableInContextMut<'_, Def> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.type_dependent_defs\n         }\n     }\n \n-    pub fn field_indices(&self) -> LocalTableInContext<usize> {\n+    pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.field_indices\n         }\n     }\n \n-    pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<usize> {\n+    pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.field_indices\n         }\n     }\n \n-    pub fn user_provided_tys(&self) -> LocalTableInContext<CanonicalTy<'tcx>> {\n+    pub fn user_provided_tys(&self) -> LocalTableInContext<'_, CanonicalTy<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.user_provided_tys\n         }\n     }\n \n-    pub fn user_provided_tys_mut(&mut self) -> LocalTableInContextMut<CanonicalTy<'tcx>> {\n+    pub fn user_provided_tys_mut(&mut self) -> LocalTableInContextMut<'_, CanonicalTy<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.user_provided_tys\n         }\n     }\n \n-    pub fn node_types(&self) -> LocalTableInContext<Ty<'tcx>> {\n+    pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.node_types\n         }\n     }\n \n-    pub fn node_types_mut(&mut self) -> LocalTableInContextMut<Ty<'tcx>> {\n+    pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.node_types\n@@ -557,7 +557,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.node_types.get(&id.local_id).cloned()\n     }\n \n-    pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<&'tcx Substs<'tcx>> {\n+    pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, &'tcx Substs<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.node_substs\n@@ -574,7 +574,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.node_substs.get(&id.local_id).cloned()\n     }\n \n-    pub fn user_substs_mut(&mut self) -> LocalTableInContextMut<CanonicalSubsts<'tcx>> {\n+    pub fn user_substs_mut(&mut self) -> LocalTableInContextMut<'_, CanonicalSubsts<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.user_substs\n@@ -614,15 +614,15 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.node_id_to_type_opt(expr.hir_id)\n     }\n \n-    pub fn adjustments(&self) -> LocalTableInContext<Vec<ty::adjustment::Adjustment<'tcx>>> {\n+    pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.adjustments\n         }\n     }\n \n     pub fn adjustments_mut(&mut self)\n-                           -> LocalTableInContextMut<Vec<ty::adjustment::Adjustment<'tcx>>> {\n+                           -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.adjustments\n@@ -663,30 +663,30 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn pat_binding_modes(&self) -> LocalTableInContext<BindingMode> {\n+    pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.pat_binding_modes\n         }\n     }\n \n     pub fn pat_binding_modes_mut(&mut self)\n-                           -> LocalTableInContextMut<BindingMode> {\n+                           -> LocalTableInContextMut<'_, BindingMode> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.pat_binding_modes\n         }\n     }\n \n-    pub fn pat_adjustments(&self) -> LocalTableInContext<Vec<Ty<'tcx>>> {\n+    pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.pat_adjustments,\n         }\n     }\n \n     pub fn pat_adjustments_mut(&mut self)\n-                           -> LocalTableInContextMut<Vec<Ty<'tcx>>> {\n+                           -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.pat_adjustments,\n@@ -697,56 +697,56 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.upvar_capture_map[&upvar_id]\n     }\n \n-    pub fn closure_kind_origins(&self) -> LocalTableInContext<(Span, ast::Name)> {\n+    pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, ast::Name)> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.closure_kind_origins\n         }\n     }\n \n-    pub fn closure_kind_origins_mut(&mut self) -> LocalTableInContextMut<(Span, ast::Name)> {\n+    pub fn closure_kind_origins_mut(&mut self) -> LocalTableInContextMut<'_, (Span, ast::Name)> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.closure_kind_origins\n         }\n     }\n \n-    pub fn liberated_fn_sigs(&self) -> LocalTableInContext<ty::FnSig<'tcx>> {\n+    pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.liberated_fn_sigs\n         }\n     }\n \n-    pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<ty::FnSig<'tcx>> {\n+    pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.liberated_fn_sigs\n         }\n     }\n \n-    pub fn fru_field_types(&self) -> LocalTableInContext<Vec<Ty<'tcx>>> {\n+    pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.fru_field_types\n         }\n     }\n \n-    pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<Vec<Ty<'tcx>>> {\n+    pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.fru_field_types\n         }\n     }\n \n-    pub fn cast_kinds(&self) -> LocalTableInContext<ty::cast::CastKind> {\n+    pub fn cast_kinds(&self) -> LocalTableInContext<'_, ty::cast::CastKind> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n             data: &self.cast_kinds\n         }\n     }\n \n-    pub fn cast_kinds_mut(&mut self) -> LocalTableInContextMut<ty::cast::CastKind> {\n+    pub fn cast_kinds_mut(&mut self) -> LocalTableInContextMut<'_, ty::cast::CastKind> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.cast_kinds\n@@ -831,10 +831,11 @@ impl<'tcx> CommonTypes<'tcx> {\n         // Ensure our type representation does not grow\n         #[cfg(target_pointer_width = \"64\")]\n         #[allow(dead_code)]\n-        static ASSERT_TY_KIND: () = [()][!(::std::mem::size_of::<ty::TyKind>() <= 24) as usize];\n+        static ASSERT_TY_KIND: () =\n+            [()][!(::std::mem::size_of::<ty::TyKind<'_>>() <= 24) as usize];\n         #[cfg(target_pointer_width = \"64\")]\n         #[allow(dead_code)]\n-        static ASSERT_TYS: () = [()][!(::std::mem::size_of::<ty::TyS>() <= 32) as usize];\n+        static ASSERT_TYS: () = [()][!(::std::mem::size_of::<ty::TyS<'_>>() <= 32) as usize];\n \n         let mk = |sty| CtxtInterners::intern_ty(interners, interners, sty);\n         let mk_region = |r| {\n@@ -2007,7 +2008,7 @@ pub mod tls {\n \n     /// This is a callback from libsyntax as it cannot access the implicit state\n     /// in librustc otherwise\n-    fn span_debug(span: syntax_pos::Span, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn span_debug(span: syntax_pos::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with(|tcx| {\n             write!(f, \"{}\", tcx.sess.source_map().span_to_string(span))\n         })\n@@ -2130,9 +2131,9 @@ pub mod tls {\n         } else {\n             // We could get a ImplicitCtxt pointer from another thread.\n             // Ensure that ImplicitCtxt is Sync\n-            sync::assert_sync::<ImplicitCtxt>();\n+            sync::assert_sync::<ImplicitCtxt<'_, '_, '_>>();\n \n-            unsafe { f(Some(&*(context as *const ImplicitCtxt))) }\n+            unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_, '_>))) }\n         }\n     }\n \n@@ -2156,7 +2157,7 @@ pub mod tls {\n             unsafe {\n                 let gcx = tcx.gcx as *const _ as usize;\n                 assert!(context.tcx.gcx as *const _ as usize == gcx);\n-                let context: &ImplicitCtxt = mem::transmute(context);\n+                let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }\n         })\n@@ -2176,7 +2177,7 @@ pub mod tls {\n                 let interners = tcx.interners as *const _ as usize;\n                 assert!(context.tcx.gcx as *const _ as usize == gcx);\n                 assert!(context.tcx.interners as *const _ as usize == interners);\n-                let context: &ImplicitCtxt = mem::transmute(context);\n+                let context: &ImplicitCtxt<'_, '_, '_> = mem::transmute(context);\n                 f(context)\n             }\n         })\n@@ -2216,7 +2217,7 @@ macro_rules! sty_debug_print {\n                 both_infer: usize,\n             }\n \n-            pub fn go(tcx: TyCtxt) {\n+            pub fn go(tcx: TyCtxt<'_, '_, '_>) {\n                 let mut total = DebugStat {\n                     total: 0,\n                     region_infer: 0, ty_infer: 0, both_infer: 0,\n@@ -2458,7 +2459,7 @@ pub fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n \n direct_interners!('tcx,\n     region: mk_region(|r: &RegionKind| r.keep_in_local_tcx()) -> RegionKind,\n-    const_: mk_const(|c: &Const| keep_local(&c.ty) || keep_local(&c.val)) -> Const<'tcx>\n+    const_: mk_const(|c: &Const<'_>| keep_local(&c.ty) || keep_local(&c.val)) -> Const<'tcx>\n );\n \n macro_rules! slice_interners {\n@@ -2467,7 +2468,7 @@ macro_rules! slice_interners {\n             &[$ty<'tcx>],\n             |a, v| List::from_arena(a, v),\n             Deref::deref,\n-            |xs: &[$ty]| xs.iter().any(keep_local)) -> List<$ty<'tcx>>);)+\n+            |xs: &[$ty<'_>]| xs.iter().any(keep_local)) -> List<$ty<'tcx>>);)+\n     )\n }\n \n@@ -2857,7 +2858,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         iter.intern_with(|xs| self.intern_goals(xs))\n     }\n \n-    pub fn mk_goal(self, goal: Goal<'tcx>) -> &'tcx Goal {\n+    pub fn mk_goal(self, goal: Goal<'tcx>) -> &'tcx Goal<'_> {\n         &self.intern_goals(&[goal])[0]\n     }\n \n@@ -3024,7 +3025,7 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about"}, {"sha": "f53e634a044e7814d857f6b2a275e3af04ca97b0", "filename": "src/librustc/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -11,7 +11,7 @@\n use ty::{self, Ty, TyCtxt};\n use ty::fold::{TypeFolder, TypeFoldable};\n \n-pub(super) fn provide(providers: &mut ty::query::Providers) {\n+pub(super) fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         erase_regions_ty,\n         ..*providers"}, {"sha": "9f9d918415e7e8221bb414a393bdb736829b85e1", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -68,9 +68,9 @@ pub enum UnconstrainedNumeric {\n /// afterwards to present additional details, particularly when it comes to lifetime-related\n /// errors.\n impl<'tcx> fmt::Display for TypeError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::TypeError::*;\n-        fn report_maybe_different(f: &mut fmt::Formatter,\n+        fn report_maybe_different(f: &mut fmt::Formatter<'_>,\n                                   expected: String, found: String) -> fmt::Result {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n             // (expected closure, found closure).\n@@ -237,7 +237,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_type_err(self,\n-                                     db: &mut DiagnosticBuilder,\n+                                     db: &mut DiagnosticBuilder<'_>,\n                                      err: &TypeError<'tcx>,\n                                      sp: Span) {\n         use self::TypeError::*;"}, {"sha": "2d055fd307dc440029ec65e495d2234c10ea25f0", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -63,7 +63,7 @@ pub enum SimplifiedTypeGen<D>\n /// `can_simplify_params` should be true if type parameters appear free in `ty` and `false` if they\n /// are to be considered bound.\n pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                     ty: Ty,\n+                                     ty: Ty<'_>,\n                                      can_simplify_params: bool)\n                                      -> Option<SimplifiedType>\n {"}, {"sha": "08d10578238737b21a28118b489dfd33f90ce252", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -28,7 +28,7 @@ impl FlagComputation {\n         }\n     }\n \n-    pub fn for_sty(st: &ty::TyKind) -> FlagComputation {\n+    pub fn for_sty(st: &ty::TyKind<'_>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_sty(st);\n         result\n@@ -67,7 +67,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_sty(&mut self, st: &ty::TyKind) {\n+    fn add_sty(&mut self, st: &ty::TyKind<'_>) {\n         match st {\n             &ty::Bool |\n             &ty::Char |\n@@ -204,18 +204,18 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_ty(&mut self, ty: Ty) {\n+    fn add_ty(&mut self, ty: Ty<'_>) {\n         self.add_flags(ty.flags);\n         self.add_exclusive_binder(ty.outer_exclusive_binder);\n     }\n \n-    fn add_tys(&mut self, tys: &[Ty]) {\n+    fn add_tys(&mut self, tys: &[Ty<'_>]) {\n         for &ty in tys {\n             self.add_ty(ty);\n         }\n     }\n \n-    fn add_fn_sig(&mut self, fn_sig: ty::PolyFnSig) {\n+    fn add_fn_sig(&mut self, fn_sig: ty::PolyFnSig<'_>) {\n         let mut computation = FlagComputation::new();\n \n         computation.add_tys(fn_sig.skip_binder().inputs());\n@@ -224,31 +224,31 @@ impl FlagComputation {\n         self.add_bound_computation(&computation);\n     }\n \n-    fn add_region(&mut self, r: ty::Region) {\n+    fn add_region(&mut self, r: ty::Region<'_>) {\n         self.add_flags(r.type_flags());\n         if let ty::ReLateBound(debruijn, _) = *r {\n             self.add_binder(debruijn);\n         }\n     }\n \n-    fn add_const(&mut self, constant: &ty::Const) {\n+    fn add_const(&mut self, constant: &ty::Const<'_>) {\n         self.add_ty(constant.ty);\n         if let ConstValue::Unevaluated(_, substs) = constant.val {\n             self.add_flags(TypeFlags::HAS_PROJECTION);\n             self.add_substs(substs);\n         }\n     }\n \n-    fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection) {\n+    fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n         self.add_ty(projection.ty);\n     }\n \n-    fn add_projection_ty(&mut self, projection_ty: &ty::ProjectionTy) {\n+    fn add_projection_ty(&mut self, projection_ty: &ty::ProjectionTy<'_>) {\n         self.add_substs(projection_ty.substs);\n     }\n \n-    fn add_substs(&mut self, substs: &Substs) {\n+    fn add_substs(&mut self, substs: &Substs<'_>) {\n         for ty in substs.types() {\n             self.add_ty(ty);\n         }"}, {"sha": "6bf493b496c8b92b60a9d1b358a5bdcfdbc7bb11", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -708,7 +708,7 @@ struct HasTypeFlagsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n-    fn visit_ty(&mut self, t: Ty) -> bool {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> bool {\n         debug!(\"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\", t, t.flags, self.flags);\n         t.flags.intersects(self.flags)\n     }"}, {"sha": "a6e181a26f420479b14f8e753866d1f78de7f5bd", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> InstanceDef<'tcx> {\n }\n \n impl<'tcx> fmt::Display for Instance<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ppaux::parameterized(f, self.substs, self.def_id(), &[])?;\n         match self.def {\n             InstanceDef::Item(_) => Ok(()),"}, {"sha": "1b4ff18f6b8d8fff3c3040309fb093b318c0da5b", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n /// function tries to find a \"characteristic def-id\" for a\n /// type. It's just a heuristic so it makes some questionable\n /// decisions and we may want to adjust it later.\n-pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n+pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n     match ty.sty {\n         ty::Adt(adt_def, _) => Some(adt_def.did),\n "}, {"sha": "e756313a1253db3bae0d45bf2830ac8e7c325a49", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -157,7 +157,7 @@ pub enum LayoutError<'tcx> {\n }\n \n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             LayoutError::Unknown(ty) => {\n                 write!(f, \"the type `{:?}` has an unknown layout\", ty)\n@@ -195,7 +195,7 @@ fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         layout_raw,\n         ..*providers\n@@ -250,7 +250,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             /// A univariant, but with a prefix of an arbitrary size & alignment (e.g. enum tag).\n             Prefixed(Size, Align),\n         }\n-        let univariant_uninterned = |fields: &[TyLayout], repr: &ReprOptions, kind| {\n+        let univariant_uninterned = |fields: &[TyLayout<'_>], repr: &ReprOptions, kind| {\n             let packed = repr.packed();\n             if packed && repr.align > 0 {\n                 bug!(\"struct cannot be packed and aligned\");\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     fields.len()\n                 };\n                 let optimizing = &mut inverse_memory_index[..end];\n-                let field_align = |f: &TyLayout| {\n+                let field_align = |f: &TyLayout<'_>| {\n                     if packed { f.align.min(pack).abi() } else { f.align.abi() }\n                 };\n                 match kind {\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 size\n             })\n         };\n-        let univariant = |fields: &[TyLayout], repr: &ReprOptions, kind| {\n+        let univariant = |fields: &[TyLayout<'_>], repr: &ReprOptions, kind| {\n             Ok(tcx.intern_layout(univariant_uninterned(fields, repr, kind)?))\n         };\n         debug_assert!(!ty.has_infer_types());\n@@ -723,7 +723,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 // but *not* an encoding of the discriminant (e.g. a tag value).\n                 // See issue #49298 for more details on the need to leave space\n                 // for non-ZST uninhabited data (mostly partial initialization).\n-                let absent = |fields: &[TyLayout]| {\n+                let absent = |fields: &[TyLayout<'_>]| {\n                     let uninhabited = fields.iter().any(|f| f.abi == Abi::Uninhabited);\n                     let is_zst = fields.iter().all(|f| f.is_zst());\n                     uninhabited && is_zst\n@@ -1403,7 +1403,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n         }\n     }\n \n-    pub fn same_size(self, other: SizeSkeleton) -> bool {\n+    pub fn same_size(self, other: SizeSkeleton<'_>) -> bool {\n         match (self, other) {\n             (SizeSkeleton::Known(a), SizeSkeleton::Known(b)) => a == b,\n             (SizeSkeleton::Pointer { tail: a, .. },"}, {"sha": "b2281691bd66089da9269d309bc5583a0a63121a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'gcx, 'tcx> DefIdTree for TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl Visibility {\n-    pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: TyCtxt) -> Self {\n+    pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: TyCtxt<'_, '_, '_>) -> Self {\n         match visibility.node {\n             hir::VisibilityKind::Public => Visibility::Public,\n             hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n@@ -536,7 +536,7 @@ impl<'tcx> Eq for TyS<'tcx> {}\n \n impl<'tcx> Hash for TyS<'tcx> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n-        (self as *const TyS).hash(s)\n+        (self as *const TyS<'_>).hash(s)\n     }\n }\n \n@@ -649,7 +649,7 @@ impl<T: Copy> List<T> {\n }\n \n impl<T: fmt::Debug> fmt::Debug for List<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }\n@@ -1263,7 +1263,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n         self.skip_binder().projection_ty.item_def_id\n     }\n \n-    pub fn to_poly_trait_ref(&self, tcx: TyCtxt) -> PolyTraitRef<'tcx> {\n+    pub fn to_poly_trait_ref(&self, tcx: TyCtxt<'_, '_, '_>) -> PolyTraitRef<'tcx> {\n         // Note: unlike with TraitRef::to_poly_trait_ref(),\n         // self.0.trait_ref is permitted to have escaping regions.\n         // This is because here `self` has a `Binder` and so does our\n@@ -1541,7 +1541,7 @@ impl UniverseIndex {\n }\n \n impl fmt::Debug for UniverseIndex {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"U{}\", self.as_u32())\n     }\n }\n@@ -1931,7 +1931,7 @@ impl_stable_hash_for!(struct ReprOptions {\n });\n \n impl ReprOptions {\n-    pub fn new(tcx: TyCtxt, did: DefId) -> ReprOptions {\n+    pub fn new(tcx: TyCtxt<'_, '_, '_>, did: DefId) -> ReprOptions {\n         let mut flags = ReprFlags::empty();\n         let mut size = None;\n         let mut max_align = 0;\n@@ -1999,7 +1999,7 @@ impl ReprOptions {\n }\n \n impl<'a, 'gcx, 'tcx> AdtDef {\n-    fn new(tcx: TyCtxt,\n+    fn new(tcx: TyCtxt<'_, '_, '_>,\n            did: DefId,\n            kind: AdtKind,\n            variants: Vec<VariantDef>,\n@@ -2644,7 +2644,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn field_index(self, node_id: NodeId, tables: &TypeckTables) -> usize {\n+    pub fn field_index(self, node_id: NodeId, tables: &TypeckTables<'_>) -> usize {\n         let hir_id = self.hir.node_to_hir_id(node_id);\n         tables.field_indices().get(hir_id).cloned().expect(\"no index for a field\")\n     }\n@@ -2971,7 +2971,7 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n }\n \n /// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition\n-pub fn is_impl_trait_defn(tcx: TyCtxt, def_id: DefId) -> Option<DefId> {\n+pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefId> {\n     if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n         if let Node::Item(item) = tcx.hir.get(node_id) {\n             if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n@@ -3051,7 +3051,7 @@ fn instance_def_size_estimate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n@@ -3106,13 +3106,13 @@ impl SymbolName {\n }\n \n impl fmt::Display for SymbolName {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.name, fmt)\n     }\n }\n \n impl fmt::Debug for SymbolName {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.name, fmt)\n     }\n }"}, {"sha": "0fcaef5de54c2dbaa93b881c9c73d93302647b7a", "filename": "src/librustc/ty/query/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2FREADME.md?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -294,7 +294,7 @@ You can put new impls into the `config` module. They look something like this:\n \n ```rust\n impl<'tcx> QueryDescription for queries::type_of<'tcx> {\n-    fn describe(tcx: TyCtxt, key: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: DefId) -> String {\n         format!(\"computing the type of `{}`\", tcx.item_path_str(key))\n     }\n }"}, {"sha": "9ea655ba6fd5d45402cbd4a72cd5bbcba31fd6bc", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 111, "deletions": 108, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -55,7 +55,7 @@ pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n }\n \n pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n-    fn describe(tcx: TyCtxt, key: Self::Key) -> String;\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> String;\n \n     #[inline]\n     fn cache_on_disk(_: Self::Key) -> bool {\n@@ -70,7 +70,7 @@ pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n }\n \n impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n-    default fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    default fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         if !tcx.sess.verbose() {\n             format!(\"processing `{}`\", tcx.item_path_str(def_id))\n         } else {\n@@ -82,64 +82,65 @@ impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n \n impl<'tcx> QueryDescription<'tcx> for queries::normalize_projection_ty<'tcx> {\n     fn describe(\n-        _tcx: TyCtxt,\n+        _tcx: TyCtxt<'_, '_, '_>,\n         goal: CanonicalProjectionGoal<'tcx>,\n     ) -> String {\n         format!(\"normalizing `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::implied_outlives_bounds<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalTyGoal<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTyGoal<'tcx>) -> String {\n         format!(\"computing implied outlives bounds for `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dropck_outlives<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalTyGoal<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTyGoal<'tcx>) -> String {\n         format!(\"computing dropck types for `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::normalize_ty_after_erasing_regions<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"normalizing `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::evaluate_obligation<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalPredicateGoal<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalPredicateGoal<'tcx>) -> String {\n         format!(\"evaluating trait selection obligation `{}`\", goal.value.value)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_eq<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpEqGoal<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpEqGoal<'tcx>) -> String {\n         format!(\"evaluating `type_op_eq` `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_subtype<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpSubtypeGoal<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpSubtypeGoal<'tcx>) -> String {\n         format!(\"evaluating `type_op_subtype` `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_prove_predicate<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpProvePredicateGoal<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpProvePredicateGoal<'tcx>) -> String {\n         format!(\"evaluating `type_op_prove_predicate` `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_ty<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>,\n+                goal: CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>) -> String {\n         format!(\"normalizing `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_predicate<'tcx> {\n     fn describe(\n-        _tcx: TyCtxt,\n+        _tcx: TyCtxt<'_, '_, '_>,\n         goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::Predicate<'tcx>>,\n     ) -> String {\n         format!(\"normalizing `{:?}`\", goal)\n@@ -148,134 +149,135 @@ impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_predicate<'tcx>\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_poly_fn_sig<'tcx> {\n     fn describe(\n-        _tcx: TyCtxt,\n+        _tcx: TyCtxt<'_, '_, '_>,\n         goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::PolyFnSig<'tcx>>,\n     ) -> String {\n         format!(\"normalizing `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_op_normalize_fn_sig<'tcx> {\n-    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>,\n+                goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>) -> String {\n         format!(\"normalizing `{:?}`\", goal)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_sized_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Sized`\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_freeze_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is freeze\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::needs_drop_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` needs drop\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::layout_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing layout of `{}`\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"computing the supertraits of `{}`\",\n                 tcx.item_path_str(def_id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::erase_regions_ty<'tcx> {\n-    fn describe(_tcx: TyCtxt, ty: Ty<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>) -> String {\n         format!(\"erasing regions from `{:?}`\", ty)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::type_param_predicates<'tcx> {\n-    fn describe(tcx: TyCtxt, (_, def_id): (DefId, DefId)) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, (_, def_id): (DefId, DefId)) -> String {\n         let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         format!(\"computing the bounds for type parameter `{}`\",\n                 tcx.hir.ty_param_name(id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::coherent_trait<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"coherence checking all impls of trait `{}`\",\n                 tcx.item_path_str(def_id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::upstream_monomorphizations<'tcx> {\n-    fn describe(_: TyCtxt, k: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, k: CrateNum) -> String {\n         format!(\"collecting available upstream monomorphizations `{:?}`\", k)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls<'tcx> {\n-    fn describe(_: TyCtxt, k: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, k: CrateNum) -> String {\n         format!(\"all inherent impls defined in crate `{:?}`\", k)\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls_overlap_check<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"check for overlap between inherent impls defined in this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_variances<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"computing the variances for items in this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::inferred_outlives_crate<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"computing the inferred outlives predicates for items in this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::mir_shims<'tcx> {\n-    fn describe(tcx: TyCtxt, def: ty::InstanceDef<'tcx>) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> String {\n         format!(\"generating MIR shim for `{}`\",\n                 tcx.item_path_str(def.def_id()))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::privacy_access_levels<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"privacy access levels\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::typeck_item_bodies<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"type-checking all item bodies\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::reachable_set<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"reachability\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n-    fn describe(tcx: TyCtxt, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>) -> String {\n         format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.instance.def.def_id()))\n     }\n \n@@ -293,13 +295,13 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::mir_keys<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"getting a list of all mir_keys\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n-    fn describe(_tcx: TyCtxt, instance: ty::Instance<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, instance: ty::Instance<'tcx>) -> String {\n         format!(\"computing the symbol for `{}`\", instance)\n     }\n \n@@ -317,62 +319,62 @@ impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::describe_def<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"describe_def\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::def_span<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"def_span\")\n     }\n }\n \n \n impl<'tcx> QueryDescription<'tcx> for queries::lookup_stability<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"stability\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::lookup_deprecation_entry<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"deprecation\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::item_attrs<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"item_attrs\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_reachable_non_generic<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"is_reachable_non_generic\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::fn_arg_names<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"fn_arg_names\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::impl_parent<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"impl_parent\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::trait_of_item<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         bug!(\"trait_of_item\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_static<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"const checking if rvalue is promotable to static `{}`\",\n             tcx.item_path_str(def_id))\n     }\n@@ -391,21 +393,22 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::rvalue_promotable_map<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"checking which parts of `{}` are promotable to static\",\n                 tcx.item_path_str(def_id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_mir_available<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"checking if item is mir available: `{}`\",\n             tcx.item_path_str(def_id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx> {\n-    fn describe(tcx: TyCtxt, key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>,\n+                key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> String {\n         format!(\"checking if `{}` fulfills its obligations\", tcx.item_path_str(key.1.def_id()))\n     }\n \n@@ -423,319 +426,319 @@ impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx>\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::trait_impls_of<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"trait impls of `{}`\", tcx.item_path_str(def_id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_object_safe<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"determine object safety of trait `{}`\", tcx.item_path_str(def_id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_const_fn<'tcx> {\n-    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> String {\n         format!(\"checking if item is const fn: `{}`\", tcx.item_path_str(def_id))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dylib_dependency_formats<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"dylib dependency formats of crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_panic_runtime<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"checking if the crate is_panic_runtime\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_compiler_builtins<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"checking if the crate is_compiler_builtins\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::has_global_allocator<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"checking if the crate has_global_allocator\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::has_panic_handler<'tcx> {\n-    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"checking if the crate has_panic_handler\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::extern_crate<'tcx> {\n-    fn describe(_: TyCtxt, _: DefId) -> String {\n+    fn describe(_: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         \"getting crate's ExternCrateData\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::lint_levels<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"computing the lint levels for items in this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::specializes<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: (DefId, DefId)) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: (DefId, DefId)) -> String {\n         \"computing whether impls specialize one another\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::in_scope_traits_map<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n         \"traits in scope at a block\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_no_builtins<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"test whether a crate has #![no_builtins]\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::panic_strategy<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"query a crate's configured panic strategy\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_profiler_runtime<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"query a crate is #![profiler_runtime]\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_sanitizer_runtime<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"query a crate is #![sanitizer_runtime]\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::reachable_non_generics<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the exported symbols of a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::native_libraries<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the native libraries of a linked crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the foreign modules of a linked crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the plugin registrar for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::derive_registrar_fn<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the derive registrar for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_disambiguator<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the disambiguator a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_hash<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the hash a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::original_crate_name<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the original name a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::extra_filename<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the extra filename for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::implementations_of_trait<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: (CrateNum, DefId)) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: (CrateNum, DefId)) -> String {\n         \"looking up implementations of a trait in a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_trait_implementations<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up all (?) trait implementations\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::link_args<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up link arguments for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::resolve_lifetimes<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"resolving lifetimes\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::named_region_map<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n         \"looking up a named region\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_late_bound_map<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n         \"testing if a region is late bound\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::object_lifetime_defaults_map<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefIndex) -> String {\n         \"looking up lifetime defaults for a region\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dep_kind<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"fetching what a dependency looks like\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_name<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"fetching what a crate is named\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::get_lib_features<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         format!(\"calculating the lib features map\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::defined_lib_features<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         format!(\"calculating the lib features defined in a crate\")\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::get_lang_items<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"calculating the lang items map\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::defined_lang_items<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"calculating the lang items defined in a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::missing_lang_items<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"calculating the missing lang items in a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::visible_parent_map<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"calculating the visible parent map\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::missing_extern_crate_item<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"seeing if we're missing an `extern crate` item for this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::used_crate_source<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking at the source for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::postorder_cnums<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"generating a postorder list of CrateNums\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::maybe_unused_extern_crates<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up all possibly unused extern crates\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::stability_index<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"calculating the stability index for the local crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_traits<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"fetching all foreign and local traits\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_crate_nums<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"fetching all foreign CrateNum instances\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::exported_symbols<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"exported_symbols\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::collect_and_partition_mono_items<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"collect_and_partition_mono_items\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::codegen_unit<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: InternedString) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: InternedString) -> String {\n         \"codegen_unit\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::output_filenames<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"output_filenames\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::vtable_methods<'tcx> {\n-    fn describe(tcx: TyCtxt, key: ty::PolyTraitRef<'tcx> ) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::PolyTraitRef<'tcx> ) -> String {\n         format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id()))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::features_query<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up enabled feature gates\".to_string()\n     }\n }\n@@ -773,19 +776,19 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::substitute_normalize_and_test_predicates<'tcx> {\n-    fn describe(tcx: TyCtxt, key: (DefId, &'tcx Substs<'tcx>)) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, key: (DefId, &'tcx Substs<'tcx>)) -> String {\n         format!(\"testing substituted normalized predicates:`{}`\", tcx.item_path_str(key.0))\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::target_features_whitelist<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"looking up the whitelist of target features\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx> {\n-    fn describe(tcx: TyCtxt, def: ty::InstanceDef<'tcx>) -> String {\n+    fn describe(tcx: TyCtxt<'_, '_, '_>, def: ty::InstanceDef<'tcx>) -> String {\n         format!(\"estimating size for `{}`\", tcx.item_path_str(def.def_id()))\n     }\n }\n@@ -806,25 +809,25 @@ impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: DefId) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> String {\n         \"generating chalk-style clauses\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for_env<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: ty::ParamEnv<'tcx>) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: ty::ParamEnv<'tcx>) -> String {\n         \"generating chalk-style clauses for param env\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::wasm_import_module_map<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"wasm import module map\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dllimport_foreign_items<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> String {\n         \"wasm import module map\".to_string()\n     }\n }"}, {"sha": "96b0a768001a83b737764b8c7e6d96ac823646b5", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -31,15 +31,15 @@ pub(super) trait Key: Clone + Hash + Eq + Debug {\n \n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n-    fn default_span(&self, tcx: TyCtxt) -> Span;\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span;\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n \n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n@@ -49,7 +49,7 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n         LOCAL_CRATE\n     }\n \n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n@@ -59,7 +59,7 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n         self.instance.query_crate()\n     }\n \n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         self.instance.default_span(tcx)\n     }\n }\n@@ -68,7 +68,7 @@ impl Key for CrateNum {\n     fn query_crate(&self) -> CrateNum {\n         *self\n     }\n-    fn default_span(&self, _: TyCtxt) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -77,7 +77,7 @@ impl Key for DefIndex {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _tcx: TyCtxt) -> Span {\n+    fn default_span(&self, _tcx: TyCtxt<'_, '_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -86,7 +86,7 @@ impl Key for DefId {\n     fn query_crate(&self) -> CrateNum {\n         self.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         tcx.def_span(*self)\n     }\n }\n@@ -95,7 +95,7 @@ impl Key for (DefId, DefId) {\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n@@ -104,7 +104,7 @@ impl Key for (CrateNum, DefId) {\n     fn query_crate(&self) -> CrateNum {\n         self.0\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n@@ -113,7 +113,7 @@ impl Key for (DefId, SimplifiedType) {\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n@@ -122,7 +122,7 @@ impl<'tcx> Key for (DefId, &'tcx Substs<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n@@ -131,7 +131,7 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         tcx.def_span(self.1.def_id())\n     }\n }\n@@ -140,7 +140,7 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     fn query_crate(&self) -> CrateNum {\n         self.def_id().krate\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n@@ -149,7 +149,7 @@ impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -158,7 +158,7 @@ impl<'tcx> Key for Ty<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -167,7 +167,7 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -176,7 +176,7 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n     fn query_crate(&self) -> CrateNum {\n         self.value.query_crate()\n     }\n-    fn default_span(&self, tcx: TyCtxt) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         self.value.default_span(tcx)\n     }\n }\n@@ -185,7 +185,7 @@ impl Key for InternedString {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _tcx: TyCtxt) -> Span {\n+    fn default_span(&self, _tcx: TyCtxt<'_, '_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -200,7 +200,7 @@ where\n         LOCAL_CRATE\n     }\n \n-    fn default_span(&self, _tcx: TyCtxt) -> Span {\n+    fn default_span(&self, _tcx: TyCtxt<'_, '_, '_>) -> Span {\n         DUMMY_SP\n     }\n }"}, {"sha": "e0a503a9cebf51e57c2df7764b0f2626411f4227", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -666,21 +666,21 @@ impl<'a, 'tcx, 'lcx> TyCtxt<'a, 'tcx, 'lcx> {\n         span: Span,\n         key: DefId,\n     ) -> Result<&'tcx [Ty<'tcx>], DiagnosticBuilder<'a>> {\n-        self.try_get_query::<queries::adt_sized_constraint>(span, key)\n+        self.try_get_query::<queries::adt_sized_constraint<'_>>(span, key)\n     }\n     pub fn try_needs_drop_raw(\n         self,\n         span: Span,\n         key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> Result<bool, DiagnosticBuilder<'a>> {\n-        self.try_get_query::<queries::needs_drop_raw>(span, key)\n+        self.try_get_query::<queries::needs_drop_raw<'_>>(span, key)\n     }\n     pub fn try_optimized_mir(\n         self,\n         span: Span,\n         key: DefId,\n     ) -> Result<&'tcx mir::Mir<'tcx>, DiagnosticBuilder<'a>> {\n-        self.try_get_query::<queries::optimized_mir>(span, key)\n+        self.try_get_query::<queries::optimized_mir<'_>>(span, key)\n     }\n }\n "}, {"sha": "bb877864632237effd2ddd6921e7d8c02a99313c", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -212,23 +212,23 @@ impl<'sess> OnDiskCache<'sess> {\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n \n-                encode_query_results::<type_of, _>(tcx, enc, qri)?;\n-                encode_query_results::<generics_of, _>(tcx, enc, qri)?;\n-                encode_query_results::<predicates_of, _>(tcx, enc, qri)?;\n-                encode_query_results::<used_trait_imports, _>(tcx, enc, qri)?;\n-                encode_query_results::<typeck_tables_of, _>(tcx, enc, qri)?;\n-                encode_query_results::<codegen_fulfill_obligation, _>(tcx, enc, qri)?;\n-                encode_query_results::<optimized_mir, _>(tcx, enc, qri)?;\n-                encode_query_results::<unsafety_check_result, _>(tcx, enc, qri)?;\n-                encode_query_results::<borrowck, _>(tcx, enc, qri)?;\n-                encode_query_results::<mir_borrowck, _>(tcx, enc, qri)?;\n-                encode_query_results::<mir_const_qualif, _>(tcx, enc, qri)?;\n-                encode_query_results::<def_symbol_name, _>(tcx, enc, qri)?;\n-                encode_query_results::<const_is_rvalue_promotable_to_static, _>(tcx, enc, qri)?;\n-                encode_query_results::<symbol_name, _>(tcx, enc, qri)?;\n-                encode_query_results::<check_match, _>(tcx, enc, qri)?;\n-                encode_query_results::<codegen_fn_attrs, _>(tcx, enc, qri)?;\n-                encode_query_results::<specialization_graph_of, _>(tcx, enc, qri)?;\n+                encode_query_results::<type_of<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<generics_of<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<predicates_of<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<used_trait_imports<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<typeck_tables_of<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<codegen_fulfill_obligation<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<optimized_mir<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<unsafety_check_result<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<borrowck<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<mir_borrowck<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<mir_const_qualif<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<def_symbol_name<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<const_is_rvalue_promotable_to_static<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<symbol_name<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<check_match<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<codegen_fn_attrs<'_>, _>(tcx, enc, qri)?;\n+                encode_query_results::<specialization_graph_of<'_>, _>(tcx, enc, qri)?;\n \n                 // const eval is special, it only encodes successfully evaluated constants\n                 use ty::query::QueryAccessors;\n@@ -323,7 +323,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n             return Ok(());\n \n-            fn sorted_cnums_including_local_crate(tcx: TyCtxt) -> Vec<CrateNum> {\n+            fn sorted_cnums_including_local_crate(tcx: TyCtxt<'_, '_, '_>) -> Vec<CrateNum> {\n                 let mut cnums = vec![LOCAL_CRATE];\n                 cnums.extend_from_slice(&tcx.crates()[..]);\n                 cnums.sort_unstable();\n@@ -434,7 +434,7 @@ impl<'sess> OnDiskCache<'sess> {\n     // current-session-CrateNum. There might be CrateNums from the previous\n     // Session that don't occur in the current one. For these, the mapping\n     // maps to None.\n-    fn compute_cnum_map(tcx: TyCtxt,\n+    fn compute_cnum_map(tcx: TyCtxt<'_, '_, '_>,\n                         prev_cnums: &[(u32, String, CrateDisambiguator)])\n                         -> IndexVec<CrateNum, Option<CrateNum>>\n     {"}, {"sha": "510ca08b62100df4c0188a1b03c721b238397102", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -733,7 +733,7 @@ macro_rules! define_queries_inner {\n                 }\n             }\n \n-            pub fn describe(&self, tcx: TyCtxt) -> String {\n+            pub fn describe(&self, tcx: TyCtxt<'_, '_, '_>) -> String {\n                 let (r, name) = match *self {\n                     $(Query::$name(key) => {\n                         (queries::$name::describe(tcx, key), stringify!($name))\n@@ -845,7 +845,7 @@ macro_rules! define_queries_inner {\n             ///\n             /// Note: The optimization is only available during incr. comp.\n             pub fn ensure(tcx: TyCtxt<'a, $tcx, 'lcx>, key: $K) -> () {\n-                tcx.ensure_query::<queries::$name>(key);\n+                tcx.ensure_query::<queries::$name<'_>>(key);\n             }\n         })*\n \n@@ -881,7 +881,7 @@ macro_rules! define_queries_inner {\n         impl<'a, $tcx, 'lcx> TyCtxtAt<'a, $tcx, 'lcx> {\n             $($(#[$attr])*\n             pub fn $name(self, key: $K) -> $V {\n-                self.tcx.get_query::<queries::$name>(self.span, key)\n+                self.tcx.get_query::<queries::$name<'_>>(self.span, key)\n             })*\n         }\n \n@@ -1028,7 +1028,9 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n                     )\n                 );\n \n-                match tcx.force_query::<::ty::query::queries::$query>($key, DUMMY_SP, *dep_node) {\n+                match tcx.force_query::<::ty::query::queries::$query<'_>>(\n+                    $key, DUMMY_SP, *dep_node\n+                ) {\n                     Ok(_) => {},\n                     Err(e) => {\n                         tcx.report_cycle(e).emit();\n@@ -1281,7 +1283,7 @@ macro_rules! impl_load_from_cache {\n         impl DepNode {\n             // Check whether the query invocation corresponding to the given\n             // DepNode is eligible for on-disk-caching.\n-            pub fn cache_on_disk(&self, tcx: TyCtxt) -> bool {\n+            pub fn cache_on_disk(&self, tcx: TyCtxt<'_, '_, '_>) -> bool {\n                 use ty::query::queries;\n                 use ty::query::QueryDescription;\n \n@@ -1299,7 +1301,7 @@ macro_rules! impl_load_from_cache {\n             // above `cache_on_disk` methods returns true.\n             // Also, as a sanity check, it expects that the corresponding query\n             // invocation has been marked as green already.\n-            pub fn load_from_on_disk_cache(&self, tcx: TyCtxt) {\n+            pub fn load_from_on_disk_cache(&self, tcx: TyCtxt<'_, '_, '_>) {\n                 match self.kind {\n                     $(DepKind::$dep_kind => {\n                         debug_assert!(tcx.dep_graph"}, {"sha": "1092e23ec3b1d4b182fd9447a7ab7c4731e15f0d", "filename": "src/librustc/ty/steal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -42,7 +42,7 @@ impl<T> Steal<T> {\n         }\n     }\n \n-    pub fn borrow(&self) -> MappedReadGuard<T> {\n+    pub fn borrow(&self) -> MappedReadGuard<'_, T> {\n         ReadGuard::map(self.value.borrow(), |opt| match *opt {\n             None => bug!(\"attempted to read from stolen value\"),\n             Some(ref v) => v"}, {"sha": "6c40dd892391671f8fd7770b83dd5db68c8a37e6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -708,7 +708,7 @@ impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::TraitRef<'tcx>  {\n         // otherwise the escaping regions would be captured by the binder\n-        debug_assert!(!self_ty.has_escaping_regions());\n+        // debug_assert!(!self_ty.has_escaping_regions());\n \n         ty::TraitRef {\n             def_id: self.def_id,\n@@ -864,7 +864,7 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n     /// Construct a ProjectionTy by searching the trait from trait_ref for the\n     /// associated item named item_name.\n     pub fn from_ref_and_name(\n-        tcx: TyCtxt, trait_ref: ty::TraitRef<'tcx>, item_name: Ident\n+        tcx: TyCtxt<'_, '_, '_>, trait_ref: ty::TraitRef<'tcx>, item_name: Ident\n     ) -> ProjectionTy<'tcx> {\n         let item_def_id = tcx.associated_items(trait_ref.def_id).find(|item| {\n             item.kind == ty::AssociatedKind::Type &&\n@@ -880,7 +880,7 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n     /// Extracts the underlying trait reference from this projection.\n     /// For example, if this is a projection of `<T as Iterator>::Item`,\n     /// then this function would return a `T: Iterator` trait reference.\n-    pub fn trait_ref(&self, tcx: TyCtxt) -> ty::TraitRef<'tcx> {\n+    pub fn trait_ref(&self, tcx: TyCtxt<'_, '_, '_>) -> ty::TraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::TraitRef {\n             def_id,\n@@ -1225,7 +1225,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n     /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,\n     /// then this function would return a `exists T. T: Iterator` existential trait\n     /// reference.\n-    pub fn trait_ref(&self, tcx: TyCtxt) -> ty::ExistentialTraitRef<'tcx> {\n+    pub fn trait_ref(&self, tcx: TyCtxt<'_, '_, '_>) -> ty::ExistentialTraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::ExistentialTraitRef{\n             def_id,\n@@ -1569,7 +1569,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn simd_size(&self, _cx: TyCtxt) -> usize {\n+    pub fn simd_size(&self, _cx: TyCtxt<'_, '_, '_>) -> usize {\n         match self.sty {\n             Adt(def, _) => def.non_enum_variant().fields.len(),\n             _ => bug!(\"simd_size called on invalid type\")"}, {"sha": "4b3a70e525ec3d11a9382e9b73fb717a56daf654", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -73,13 +73,13 @@ impl<'tcx> UnpackedKind<'tcx> {\n }\n \n impl<'tcx> Ord for Kind<'tcx> {\n-    fn cmp(&self, other: &Kind) -> Ordering {\n+    fn cmp(&self, other: &Kind<'_>) -> Ordering {\n         self.unpack().cmp(&other.unpack())\n     }\n }\n \n impl<'tcx> PartialOrd for Kind<'tcx> {\n-    fn partial_cmp(&self, other: &Kind) -> Option<Ordering> {\n+    fn partial_cmp(&self, other: &Kind<'_>) -> Option<Ordering> {\n         Some(self.cmp(&other))\n     }\n }\n@@ -111,7 +111,7 @@ impl<'tcx> Kind<'tcx> {\n }\n \n impl<'tcx> fmt::Debug for Kind<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.unpack() {\n             UnpackedKind::Lifetime(lt) => write!(f, \"{:?}\", lt),\n             UnpackedKind::Type(ty) => write!(f, \"{:?}\", ty),\n@@ -120,7 +120,7 @@ impl<'tcx> fmt::Debug for Kind<'tcx> {\n }\n \n impl<'tcx> fmt::Display for Kind<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.unpack() {\n             UnpackedKind::Lifetime(lt) => write!(f, \"{}\", lt),\n             UnpackedKind::Type(ty) => write!(f, \"{}\", ty),"}, {"sha": "93fc77359e43ab082160b05a1ebe8675b1827412", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -39,7 +39,7 @@ pub struct Discr<'tcx> {\n }\n \n impl<'tcx> fmt::Display for Discr<'tcx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.ty.sty {\n             ty::Int(ity) => {\n                 let bits = ty::tls::with(|tcx| {\n@@ -846,7 +846,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         // To avoid a stack overflow when checking an enum variant or struct that\n         // contains a different, structurally recursive type, maintain a stack\n         // of seen types and check recursion for each of them (issues #3008, #3779).\n-        let mut seen: Vec<Ty> = Vec::new();\n+        let mut seen: Vec<Ty<'_>> = Vec::new();\n         let mut representable_cache = FxHashMap();\n         let r = is_type_structurally_recursive(\n             tcx, sp, &mut seen, &mut representable_cache, self);\n@@ -1039,7 +1039,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         is_copy_raw,\n         is_sized_raw,"}, {"sha": "863b70c3df3f74dee5632c31ff4013c8e2abfe25", "filename": "src/librustc/util/bug.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -16,7 +16,7 @@ use syntax_pos::{Span, MultiSpan};\n \n #[cold]\n #[inline(never)]\n-pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! {\n+pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments<'_>) -> ! {\n     // this wrapper mostly exists so I don't have to write a fully\n     // qualified path of None::<Span> inside the bug!() macro definition\n     opt_span_bug_fmt(file, line, None::<Span>, args);\n@@ -28,7 +28,7 @@ pub fn span_bug_fmt<S: Into<MultiSpan>>(\n     file: &'static str,\n     line: u32,\n     span: S,\n-    args: fmt::Arguments,\n+    args: fmt::Arguments<'_>,\n ) -> ! {\n     opt_span_bug_fmt(file, line, Some(span), args);\n }\n@@ -37,7 +37,7 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n     file: &'static str,\n     line: u32,\n     span: Option<S>,\n-    args: fmt::Arguments,\n+    args: fmt::Arguments<'_>,\n ) -> ! {\n     tls::with_opt(move |tcx| {\n         let msg = format!(\"{}:{}: {}\", file, line, args);"}, {"sha": "bcc0b8047ef74f80f0a49272c8e0fcc71ea612a0", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -39,14 +39,14 @@ pub struct ErrorReported;\n thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));\n \n lazy_static! {\n-    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo) + Sync + Send + 'static> = {\n+    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n         let hook = panic::take_hook();\n         panic::set_hook(Box::new(panic_hook));\n         hook\n     };\n }\n \n-fn panic_hook(info: &panic::PanicInfo) {\n+fn panic_hook(info: &panic::PanicInfo<'_>) {\n     if !proc_macro::__internal::in_sess() {\n         (*DEFAULT_HOOK)(info);\n "}, {"sha": "10382008e0d43a692e07501268bc91ba3017a3be", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -46,7 +46,7 @@ thread_local! {\n \n macro_rules! gen_display_debug_body {\n     ( $with:path ) => {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             let mut cx = PrintContext::new();\n             $with(self, f, &mut cx)\n         }\n@@ -225,9 +225,9 @@ pub trait Print {\n impl PrintContext {\n     fn fn_sig<F: fmt::Write>(&mut self,\n                              f: &mut F,\n-                             inputs: &[Ty],\n+                             inputs: &[Ty<'_>],\n                              variadic: bool,\n-                             output: Ty)\n+                             output: Ty<'_>)\n                              -> fmt::Result {\n         write!(f, \"(\")?;\n         let mut inputs = inputs.iter();\n@@ -250,9 +250,9 @@ impl PrintContext {\n \n     fn parameterized<F: fmt::Write>(&mut self,\n                                     f: &mut F,\n-                                    substs: &subst::Substs,\n+                                    substs: &subst::Substs<'_>,\n                                     mut did: DefId,\n-                                    projections: &[ty::ProjectionPredicate])\n+                                    projections: &[ty::ProjectionPredicate<'_>])\n                                     -> fmt::Result {\n         let key = ty::tls::with(|tcx| tcx.def_key(did));\n         let mut item_name = if let Some(name) = key.disambiguated_data.data.get_opt_name() {\n@@ -395,12 +395,12 @@ impl PrintContext {\n         let print_regions = |f: &mut F, start: &str, skip, count| {\n             // Don't print any regions if they're all erased.\n             let regions = || substs.regions().skip(skip).take(count);\n-            if regions().all(|r: ty::Region| *r == ty::ReErased) {\n+            if regions().all(|r: ty::Region<'_>| *r == ty::ReErased) {\n                 return Ok(());\n             }\n \n             for region in regions() {\n-                let region: ty::Region = region;\n+                let region: ty::Region<'_> = region;\n                 start_or_continue(f, start, \", \")?;\n                 if verbose {\n                     write!(f, \"{:?}\", region)?;\n@@ -564,9 +564,9 @@ pub fn identify_regions() -> bool {\n }\n \n pub fn parameterized<F: fmt::Write>(f: &mut F,\n-                                    substs: &subst::Substs,\n+                                    substs: &subst::Substs<'_>,\n                                     did: DefId,\n-                                    projections: &[ty::ProjectionPredicate])\n+                                    projections: &[ty::ProjectionPredicate<'_>])\n                                     -> fmt::Result {\n     PrintContext::new().parameterized(f, substs, did, projections)\n }\n@@ -646,7 +646,7 @@ define_print! {\n }\n \n impl fmt::Debug for ty::GenericParamDef {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let type_name = match self.kind {\n             ty::GenericParamDefKind::Lifetime => \"Lifetime\",\n             ty::GenericParamDefKind::Type {..} => \"Type\",\n@@ -660,31 +660,31 @@ impl fmt::Debug for ty::GenericParamDef {\n }\n \n impl fmt::Debug for ty::TraitDef {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n             write!(f, \"{}\", tcx.item_path_str(self.def_id))\n         })\n     }\n }\n \n impl fmt::Debug for ty::AdtDef {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n             write!(f, \"{}\", tcx.item_path_str(self.did))\n         })\n     }\n }\n \n impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"ClosureUpvar({:?},{:?})\",\n                self.def,\n                self.ty)\n     }\n }\n \n impl fmt::Debug for ty::UpvarId {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"UpvarId({:?};`{}`;{:?})\",\n                self.var_id,\n                ty::tls::with(|tcx| tcx.hir.name(tcx.hir.hir_to_node_id(self.var_id))),\n@@ -693,7 +693,7 @@ impl fmt::Debug for ty::UpvarId {\n }\n \n impl<'tcx> fmt::Debug for ty::UpvarBorrow<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"UpvarBorrow({:?}, {:?})\",\n                self.kind, self.region)\n     }\n@@ -942,25 +942,25 @@ define_print! {\n }\n \n impl fmt::Debug for ty::TyVid {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"_#{}t\", self.index)\n     }\n }\n \n impl fmt::Debug for ty::IntVid {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"_#{}i\", self.index)\n     }\n }\n \n impl fmt::Debug for ty::FloatVid {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"_#{}f\", self.index)\n     }\n }\n \n impl fmt::Debug for ty::RegionVid {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some((region, counter)) = get_highlight_region_for_regionvid() {\n             debug!(\"RegionVid.fmt: region={:?} self={:?} counter={:?}\", region, self, counter);\n             return if *self == region {\n@@ -1006,7 +1006,7 @@ define_print! {\n }\n \n impl fmt::Debug for ty::IntVarValue {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::IntType(ref v) => v.fmt(f),\n             ty::UintType(ref v) => v.fmt(f),\n@@ -1015,7 +1015,7 @@ impl fmt::Debug for ty::IntVarValue {\n }\n \n impl fmt::Debug for ty::FloatVarValue {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -1026,7 +1026,7 @@ impl fmt::Debug for ty::FloatVarValue {\n     where T: fmt::Display + for<'a> ty::Lift<'a>,\n           for<'a> <T as ty::Lift<'a>>::Lifted: fmt::Display + TypeFoldable<'a>\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| in_binder(f, tcx, self, tcx.lift(self)))\n     }\n }*/"}, {"sha": "37073b6e82080a616db922205dc26b990e4d5310", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a677e4c347630b855f2889557c2d37180a1a41be/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=a677e4c347630b855f2889557c2d37180a1a41be", "patch": "@@ -61,7 +61,7 @@ macro_rules! define_categories {\n                 }\n             }\n \n-            fn print(&self, lock: &mut StdoutLock) {\n+            fn print(&self, lock: &mut StdoutLock<'_>) {\n                 writeln!(lock, \"| Phase            | Time (ms)      | Queries        | Hits (%) |\")\n                     .unwrap();\n                 writeln!(lock, \"| ---------------- | -------------- | -------------- | -------- |\")"}]}