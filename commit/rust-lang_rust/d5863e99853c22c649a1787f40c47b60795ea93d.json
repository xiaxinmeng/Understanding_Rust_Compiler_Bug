{"sha": "d5863e99853c22c649a1787f40c47b60795ea93d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODYzZTk5ODUzYzIyYzY0OWExNzg3ZjQwYzQ3YjYwNzk1ZWE5M2Q=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-04T21:53:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-05T08:52:10Z"}, "message": "Add Options type in libtest and remove argument", "tree": {"sha": "cfe71cf5bb98cd23ffd4ff02db31f1d2cc18b2a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe71cf5bb98cd23ffd4ff02db31f1d2cc18b2a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5863e99853c22c649a1787f40c47b60795ea93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5863e99853c22c649a1787f40c47b60795ea93d", "html_url": "https://github.com/rust-lang/rust/commit/d5863e99853c22c649a1787f40c47b60795ea93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5863e99853c22c649a1787f40c47b60795ea93d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "html_url": "https://github.com/rust-lang/rust/commit/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "057ce69d9de8bcf925f59cb3a9c7700763202d40", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=d5863e99853c22c649a1787f40c47b60795ea93d", "patch": "@@ -166,9 +166,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     old_find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n-    if display_warnings {\n-        test_args.insert(1, \"--display-stdout\".to_string());\n-    }\n-    testing::test_main(&test_args, collector.tests);\n+    testing::test_main(&test_args, collector.tests,\n+                       testing::Options::new().display_output(display_warnings));\n     0\n }"}, {"sha": "d5237d629cfc1e7f8f40f2a9c3c9b53c6bdb0825", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d5863e99853c22c649a1787f40c47b60795ea93d", "patch": "@@ -126,12 +126,10 @@ pub fn run(input: &str,\n     }\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n-    if display_warnings {\n-        test_args.insert(1, \"--display-stdout\".to_string());\n-    }\n \n     testing::test_main(&test_args,\n-                       collector.tests.into_iter().collect());\n+                       collector.tests.into_iter().collect(),\n+                       testing::Options::new().display_output(display_warnings));\n     0\n }\n "}, {"sha": "91746a2edd9b2a62abc70b84d7647ce277b5174a", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d5863e99853c22c649a1787f40c47b60795ea93d", "patch": "@@ -442,7 +442,7 @@ We're going to be building a module that looks more or less like:\n mod __test {\n   extern crate test (name = \"test\", vers = \"...\");\n   fn main() {\n-    test::test_main_static(&::os::args()[], tests)\n+    test::test_main_static(&::os::args()[], tests, test::Options::new())\n   }\n \n   static tests : &'static [test::TestDescAndFn] = &[\n@@ -478,7 +478,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     //        pub fn main() {\n     //            #![main]\n     //            use std::slice::AsSlice;\n-    //            test::test_main_static(::std::os::args().as_slice(), TESTS);\n+    //            test::test_main_static(::std::os::args().as_slice(), TESTS, test::Options::new());\n     //        }\n \n     let sp = ignored_span(cx, DUMMY_SP);"}, {"sha": "35f2fbca69f8df2613da9e0ca38174e7002459a9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d5863e99853c22c649a1787f40c47b60795ea93d", "patch": "@@ -76,7 +76,7 @@ pub mod test {\n     pub use {Bencher, TestName, TestResult, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n              TrFailedMsg, TrIgnored, TrOk, Metric, MetricMap, StaticTestFn, StaticTestName,\n              DynTestName, DynTestFn, run_test, test_main, test_main_static, filter_tests,\n-             parse_opts, StaticBenchFn, ShouldPanic};\n+             parse_opts, StaticBenchFn, ShouldPanic, Options};\n }\n \n pub mod stats;\n@@ -252,14 +252,34 @@ impl Clone for MetricMap {\n     }\n }\n \n+/// In case we want to add other options as well, just add them in this struct.\n+#[derive(Copy, Clone, Debug)]\n+pub struct Options {\n+    display_output: bool,\n+}\n+\n+impl Options {\n+    pub fn new() -> Options {\n+        Options {\n+            display_output: false,\n+        }\n+    }\n+\n+    pub fn display_output(mut self, display_output: bool) -> Options {\n+        self.display_output = display_output;\n+        self\n+    }\n+}\n+\n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n-pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>) {\n-    let opts = match parse_opts(args) {\n+pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Options) {\n+    let mut opts = match parse_opts(args) {\n         Some(Ok(o)) => o,\n         Some(Err(msg)) => panic!(\"{:?}\", msg),\n         None => return,\n     };\n+    opts.options = options;\n     if opts.list {\n         if let Err(e) = list_tests_console(&opts, tests) {\n             panic!(\"io error when listing tests: {:?}\", e);\n@@ -301,7 +321,7 @@ pub fn test_main_static(tests: &[TestDescAndFn]) {\n                                }\n                            })\n                            .collect();\n-    test_main(&args, owned_tests)\n+    test_main(&args, owned_tests, Options::new())\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -325,7 +345,7 @@ pub struct TestOpts {\n     pub quiet: bool,\n     pub test_threads: Option<usize>,\n     pub skip: Vec<String>,\n-    pub display_stdout: bool,\n+    pub options: Options,\n }\n \n impl TestOpts {\n@@ -344,7 +364,7 @@ impl TestOpts {\n             quiet: false,\n             test_threads: None,\n             skip: vec![],\n-            display_stdout: false,\n+            options: Options::new(),\n         }\n     }\n }\n@@ -372,8 +392,7 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n-            never  = never colorize output;\", \"auto|always|never\"),\n-      getopts::optflag(\"\", \"display-stdout\", \"to print stdout even if the test succeeds\")]\n+            never  = never colorize output;\", \"auto|always|never\")]\n }\n \n fn usage(binary: &str) {\n@@ -485,7 +504,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         quiet: quiet,\n         test_threads: test_threads,\n         skip: matches.opt_strs(\"skip\"),\n-        display_stdout: matches.opt_present(\"display-stdout\"),\n+        options: Options::new(),\n     };\n \n     Some(Ok(test_opts))\n@@ -528,7 +547,7 @@ struct ConsoleTestState<T> {\n     failures: Vec<(TestDesc, Vec<u8>)>,\n     not_failures: Vec<(TestDesc, Vec<u8>)>,\n     max_name_len: usize, // number of columns to fill when aligning names\n-    display_stdout: bool,\n+    options: Options,\n }\n \n impl<T: Write> ConsoleTestState<T> {\n@@ -556,7 +575,7 @@ impl<T: Write> ConsoleTestState<T> {\n             failures: Vec::new(),\n             not_failures: Vec::new(),\n             max_name_len: 0,\n-            display_stdout: opts.display_stdout,\n+            options: opts.options,\n         })\n     }\n \n@@ -741,7 +760,7 @@ impl<T: Write> ConsoleTestState<T> {\n     pub fn write_run_finish(&mut self) -> io::Result<bool> {\n         assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n \n-        if self.display_stdout {\n+        if self.options.display_output {\n             self.write_outputs()?;\n         }\n         let success = self.failed == 0;\n@@ -942,7 +961,7 @@ fn should_sort_failures_before_printing_them() {\n         max_name_len: 10,\n         metrics: MetricMap::new(),\n         failures: vec![(test_b, Vec::new()), (test_a, Vec::new())],\n-        display_stdout: false,\n+        options: Options::new(),\n         not_failures: Vec::new(),\n     };\n "}, {"sha": "6fc7f9f07ac174c407a235adc4e173aea6bf8476", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5863e99853c22c649a1787f40c47b60795ea93d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d5863e99853c22c649a1787f40c47b60795ea93d", "patch": "@@ -336,7 +336,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         test_threads: None,\n         skip: vec![],\n         list: false,\n-        display_stdout: false,\n+        options: test::Options::new(),\n     }\n }\n "}]}