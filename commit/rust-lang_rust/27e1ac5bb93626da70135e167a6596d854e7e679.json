{"sha": "27e1ac5bb93626da70135e167a6596d854e7e679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZTFhYzViYjkzNjI2ZGE3MDEzNWUxNjdhNjU5NmQ4NTRlN2U2Nzk=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2013-02-04T18:15:02Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2013-02-04T18:15:02Z"}, "message": "Merge pull request #4684 from erickt/incoming\n\ncore: convert ToStr::to_str to take explicit &self", "tree": {"sha": "e2a6b58b69d484cae48f9b0a4f2132fbe7f20979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2a6b58b69d484cae48f9b0a4f2132fbe7f20979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e1ac5bb93626da70135e167a6596d854e7e679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e1ac5bb93626da70135e167a6596d854e7e679", "html_url": "https://github.com/rust-lang/rust/commit/27e1ac5bb93626da70135e167a6596d854e7e679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e1ac5bb93626da70135e167a6596d854e7e679/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750f246ad5f3a2a1a4df1a40d547c112074bb447", "url": "https://api.github.com/repos/rust-lang/rust/commits/750f246ad5f3a2a1a4df1a40d547c112074bb447", "html_url": "https://github.com/rust-lang/rust/commit/750f246ad5f3a2a1a4df1a40d547c112074bb447"}, {"sha": "9adfa59d8e9432eef84297b6ed5d8f2967b9b8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9adfa59d8e9432eef84297b6ed5d8f2967b9b8f9", "html_url": "https://github.com/rust-lang/rust/commit/9adfa59d8e9432eef84297b6ed5d8f2967b9b8f9"}], "stats": {"total": 160, "additions": 88, "deletions": 72}, "files": [{"sha": "24ad5c114af28716bfc31b65ef70bb428d474dbb", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -439,7 +439,7 @@ pub pure fn to_str_digits(num: f32, dig: uint) -> ~str {\n \n impl f32: to_str::ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { to_str_digits(self, 8) }\n+    pure fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n }\n \n impl f32: num::ToStrRadix {"}, {"sha": "126a48cf28073935c09465fb1b1cd46a3417fae5", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -463,7 +463,7 @@ pub pure fn to_str_digits(num: f64, dig: uint) -> ~str {\n \n impl f64: to_str::ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { to_str_digits(self, 8) }\n+    pure fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n }\n \n impl f64: num::ToStrRadix {"}, {"sha": "32cda029cd182bdb78893caecfa21bc9347beb85", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -206,7 +206,7 @@ pub pure fn to_str_digits(num: float, digits: uint) -> ~str {\n \n impl float: to_str::ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { to_str_digits(self, 8) }\n+    pure fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n }\n \n impl float: num::ToStrRadix {"}, {"sha": "8b02f3a94c5ff94450367e1d869942b6fcdbfff5", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -287,8 +287,8 @@ pub pure fn str(i: T) -> ~str { to_str(i) }\n \n impl T : ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str {\n-        to_str(self)\n+    pure fn to_str(&self) -> ~str {\n+        to_str(*self)\n     }\n }\n "}, {"sha": "82c6e0170145fc14973c4aba288ee76c0d2a6d2c", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -249,8 +249,8 @@ pub pure fn str(i: T) -> ~str { to_str(i) }\n \n impl T : ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str {\n-        to_str(self)\n+    pure fn to_str(&self) -> ~str {\n+        to_str(*self)\n     }\n }\n "}, {"sha": "0b64df8c1124c93ac1f08a889cc92bafd7645344", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -368,7 +368,7 @@ impl Path {\n }\n \n impl PosixPath : ToStr {\n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         let mut s = ~\"\";\n         if self.is_absolute {\n             s += \"/\";\n@@ -531,7 +531,7 @@ impl PosixPath : GenericPath {\n \n \n impl WindowsPath : ToStr {\n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         let mut s = ~\"\";\n         match self.host {\n           Some(ref h) => { s += \"\\\\\\\\\"; s += *h; }"}, {"sha": "0e46b4fd004b3d3aec8d5d37446db74046f8f345", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -22,52 +22,68 @@ use kinds::Copy;\n use str;\n use vec;\n \n-pub trait ToStr { pub pure fn to_str() -> ~str; }\n+pub trait ToStr {\n+    pure fn to_str(&self) -> ~str;\n+}\n \n impl bool: ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { ::bool::to_str(self) }\n+    pure fn to_str(&self) -> ~str { ::bool::to_str(*self) }\n }\n impl (): ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { ~\"()\" }\n+    pure fn to_str(&self) -> ~str { ~\"()\" }\n }\n impl ~str: ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { copy self }\n+    pure fn to_str(&self) -> ~str { copy *self }\n }\n impl &str: ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { ::str::from_slice(self) }\n+    pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n }\n impl @str: ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { ::str::from_slice(self) }\n+    pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n }\n \n-impl<A: ToStr Copy, B: ToStr Copy> (A, B): ToStr {\n+impl<A: ToStr, B: ToStr> (A, B): ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str {\n-        let (a, b) = self;\n-        ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\")\"\n+    pure fn to_str(&self) -> ~str {\n+        // FIXME(#4760): this causes an llvm assertion\n+        //let &(ref a, ref b) = self;\n+        match *self {\n+            (ref a, ref b) => {\n+                ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\")\"\n+            }\n+        }\n     }\n }\n-impl<A: ToStr Copy, B: ToStr Copy, C: ToStr Copy> (A, B, C): ToStr {\n+impl<A: ToStr, B: ToStr, C: ToStr> (A, B, C): ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str {\n-        let (a, b, c) = self;\n-        ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\", \" + c.to_str() + ~\")\"\n+    pure fn to_str(&self) -> ~str {\n+        // FIXME(#4760): this causes an llvm assertion\n+        //let &(ref a, ref b, ref c) = self;\n+        match *self {\n+            (ref a, ref b, ref c) => {\n+                fmt!(\"(%s, %s, %s)\",\n+                    (*a).to_str(),\n+                    (*b).to_str(),\n+                    (*c).to_str()\n+                )\n+            }\n+        }\n     }\n }\n \n impl<A: ToStr> ~[A]: ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         unsafe {\n             // Bleh -- not really unsafe\n             // push_str and push_char\n             let mut acc = ~\"[\", first = true;\n-            for vec::each(self) |elt| {\n+            for self.each |elt| {\n                 unsafe {\n                     if first { first = false; }\n                     else { str::push_str(&mut acc, ~\", \"); }\n@@ -82,11 +98,11 @@ impl<A: ToStr> ~[A]: ToStr {\n \n impl<A: ToStr> @A: ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { ~\"@\" + (*self).to_str() }\n+    pure fn to_str(&self) -> ~str { ~\"@\" + (**self).to_str() }\n }\n impl<A: ToStr> ~A: ToStr {\n     #[inline(always)]\n-    pure fn to_str() -> ~str { ~\"~\" + (*self).to_str() }\n+    pure fn to_str(&self) -> ~str { ~\"~\" + (**self).to_str() }\n }\n \n #[cfg(test)]"}, {"sha": "c13af3a32f200636832257d6ed5ce141f310feba", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -222,11 +222,11 @@ pub fn check_crate(tcx: ty::ctxt,\n }\n \n impl LiveNode: to_str::ToStr {\n-    pure fn to_str() -> ~str { fmt!(\"ln(%u)\", *self) }\n+    pure fn to_str(&self) -> ~str { fmt!(\"ln(%u)\", **self) }\n }\n \n impl Variable: to_str::ToStr {\n-    pure fn to_str() -> ~str { fmt!(\"v(%u)\", *self) }\n+    pure fn to_str(&self) -> ~str { fmt!(\"v(%u)\", **self) }\n }\n \n // ______________________________________________________________________"}, {"sha": "4cbf6a4f4b74a6abe875d934307a642b35a7f594", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -121,8 +121,8 @@ pub struct EnvValue {\n }\n \n pub impl EnvAction {\n-    fn to_str() -> ~str {\n-        match self {\n+    fn to_str(&self) -> ~str {\n+        match *self {\n             EnvCopy => ~\"EnvCopy\",\n             EnvMove => ~\"EnvMove\",\n             EnvRef => ~\"EnvRef\""}, {"sha": "571f16e4b34ee6369bdf5e34c233b802893bc0dc", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -720,7 +720,7 @@ pub impl block {\n     fn ty_to_str(t: ty::t) -> ~str {\n         ty_to_str(self.tcx(), t)\n     }\n-    fn to_str() -> ~str {\n+    fn to_str(&self) -> ~str {\n         match self.node_info {\n           Some(node_info) => {\n             fmt!(\"[block %d]\", node_info.id)"}, {"sha": "554cebbbcb781fa1756430caaa212b6d1783d215", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -841,7 +841,7 @@ pub impl DatumBlock {\n         self.bcx.tcx()\n     }\n \n-    fn to_str() -> ~str {\n+    fn to_str(&self) -> ~str {\n         self.datum.to_str(self.ccx())\n     }\n }"}, {"sha": "8610e3c85d7f53891b340b95dd6f438c89b2ca6b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -667,43 +667,43 @@ pub impl TyVid: Vid {\n }\n \n pub impl TyVid: ToStr {\n-    pure fn to_str() -> ~str { fmt!(\"<V%u>\", self.to_uint()) }\n+    pure fn to_str(&self) -> ~str { fmt!(\"<V%u>\", self.to_uint()) }\n }\n \n pub impl IntVid: Vid {\n     pure fn to_uint() -> uint { *self }\n }\n \n pub impl IntVid: ToStr {\n-    pure fn to_str() -> ~str { fmt!(\"<VI%u>\", self.to_uint()) }\n+    pure fn to_str(&self) -> ~str { fmt!(\"<VI%u>\", self.to_uint()) }\n }\n \n pub impl FloatVid: Vid {\n     pure fn to_uint() -> uint { *self }\n }\n \n pub impl FloatVid: ToStr {\n-    pure fn to_str() -> ~str { fmt!(\"<VF%u>\", self.to_uint()) }\n+    pure fn to_str(&self) -> ~str { fmt!(\"<VF%u>\", self.to_uint()) }\n }\n \n pub impl RegionVid: Vid {\n     pure fn to_uint() -> uint { *self }\n }\n \n pub impl RegionVid: ToStr {\n-    pure fn to_str() -> ~str { fmt!(\"%?\", self) }\n+    pure fn to_str(&self) -> ~str { fmt!(\"%?\", self) }\n }\n \n pub impl FnSig : ToStr {\n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         // grr, without tcx not much we can do.\n         return ~\"(...)\";\n     }\n }\n \n pub impl InferTy: ToStr {\n-    pure fn to_str() -> ~str {\n-        match self {\n+    pure fn to_str(&self) -> ~str {\n+        match *self {\n             TyVar(ref v) => v.to_str(),\n             IntVar(ref v) => v.to_str(),\n             FloatVar(ref v) => v.to_str()\n@@ -712,8 +712,8 @@ pub impl InferTy: ToStr {\n }\n \n pub impl IntVarValue : ToStr {\n-    pure fn to_str() -> ~str {\n-        match self {\n+    pure fn to_str(&self) -> ~str {\n+        match *self {\n             IntType(ref v) => v.to_str(),\n             UintType(ref v) => v.to_str(),\n         }"}, {"sha": "092a0d18a0fe4260c54c39a6110bb9a94e079466", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -88,7 +88,7 @@ impl BigUint : Ord {\n }\n \n impl BigUint : ToStr {\n-    pure fn to_str() -> ~str { self.to_str_radix(10) }\n+    pure fn to_str(&self) -> ~str { self.to_str_radix(10) }\n }\n \n impl BigUint : from_str::FromStr {\n@@ -605,7 +605,7 @@ impl BigInt : Ord {\n }\n \n impl BigInt : ToStr {\n-    pure fn to_str() -> ~str { self.to_str_radix(10) }\n+    pure fn to_str(&self) -> ~str { self.to_str_radix(10) }\n }\n \n impl BigInt : from_str::FromStr {"}, {"sha": "69becd5b9ce7e378b62df2fb7e20687594798d5a", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -474,7 +474,7 @@ impl Bitv {\n      * The resulting string has the same length as `self`, and each\n      * character is either '0' or '1'.\n      */\n-     fn to_str() -> ~str {\n+     fn to_str(&self) -> ~str {\n        let mut rs = ~\"\";\n        for self.each() |i| { if i { rs += ~\"1\"; } else { rs += ~\"0\"; } };\n        rs"}, {"sha": "4b34f318e91b28501360a716d1e6601fb99d3084", "filename": "src/libstd/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -1172,11 +1172,11 @@ impl <A: ToJson> Option<A>: ToJson {\n }\n \n impl Json: to_str::ToStr {\n-    pure fn to_str() -> ~str { to_str(&self) }\n+    pure fn to_str(&self) -> ~str { to_str(self) }\n }\n \n impl Error: to_str::ToStr {\n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         fmt!(\"%u:%u: %s\", self.line, self.col, *self.msg)\n     }\n }"}, {"sha": "b32c97c699837744ea434d8963157df381c68c3f", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -718,8 +718,8 @@ pub pure fn to_str(url: &Url) -> ~str {\n }\n \n impl Url: to_str::ToStr {\n-    pub pure fn to_str() -> ~str {\n-        to_str(&self)\n+    pub pure fn to_str(&self) -> ~str {\n+        to_str(self)\n     }\n }\n "}, {"sha": "e32043a72254347b09acb96a18834f28e7d718fc", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -353,7 +353,7 @@ pub mod chained {\n     }\n \n     impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> T<K, V>: ToStr {\n-        pure fn to_str() -> ~str {\n+        pure fn to_str(&self) -> ~str {\n             unsafe {\n                 // Meh -- this should be safe\n                 do io::with_str_writer |wr| { self.to_writer(wr) }"}, {"sha": "bc808495ca33b5c0e7ffe4a4fb48ee069d1e464f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -923,8 +923,8 @@ pub enum trait_method {\n pub enum int_ty { ty_i, ty_char, ty_i8, ty_i16, ty_i32, ty_i64, }\n \n pub impl int_ty : ToStr {\n-    pure fn to_str() -> ~str {\n-        ::ast_util::int_ty_to_str(self)\n+    pure fn to_str(&self) -> ~str {\n+        ::ast_util::int_ty_to_str(*self)\n     }\n }\n \n@@ -959,8 +959,8 @@ pub impl int_ty : cmp::Eq {\n pub enum uint_ty { ty_u, ty_u8, ty_u16, ty_u32, ty_u64, }\n \n pub impl uint_ty : ToStr {\n-    pure fn to_str() -> ~str {\n-        ::ast_util::uint_ty_to_str(self)\n+    pure fn to_str(&self) -> ~str {\n+        ::ast_util::uint_ty_to_str(*self)\n     }\n }\n \n@@ -993,8 +993,8 @@ pub impl uint_ty : cmp::Eq {\n pub enum float_ty { ty_f, ty_f32, ty_f64, }\n \n pub impl float_ty : ToStr {\n-    pure fn to_str() -> ~str {\n-        ::ast_util::float_ty_to_str(self)\n+    pure fn to_str(&self) -> ~str {\n+        ::ast_util::float_ty_to_str(*self)\n     }\n }\n \n@@ -1096,8 +1096,8 @@ pub enum Onceness {\n }\n \n pub impl Onceness : ToStr {\n-    pure fn to_str() -> ~str {\n-        match self {\n+    pure fn to_str(&self) -> ~str {\n+        match *self {\n             Once => ~\"once\",\n             Many => ~\"many\"\n         }\n@@ -1188,8 +1188,8 @@ pub enum purity {\n }\n \n pub impl purity : ToStr {\n-    pure fn to_str() -> ~str {\n-        match self {\n+    pure fn to_str(&self) -> ~str {\n+        match *self {\n             impure_fn => ~\"impure\",\n             unsafe_fn => ~\"unsafe\",\n             pure_fn => ~\"pure\","}, {"sha": "6a1d93576941db3ff00bb1a9ad85ea353324ee84", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -34,8 +34,8 @@ pub impl direction : cmp::Eq {\n }\n \n pub impl direction: ToStr {\n-    pure fn to_str() -> ~str {\n-        match self {\n+    pure fn to_str(&self) -> ~str {\n+        match *self {\n           send => ~\"Send\",\n           recv => ~\"Recv\"\n         }"}, {"sha": "c0140bff5b13ac975dd07d0922eaab586b0576da", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -18,7 +18,7 @@ pub mod kitty {\n     }\n \n     pub impl cat : ToStr {\n-       pure fn to_str() -> ~str { copy self.name }\n+       pure fn to_str(&self) -> ~str { copy self.name }\n     }\n \n     priv impl cat {"}, {"sha": "5d49610a4e5be2e9de88f02956c995a6b04e3e10", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -20,7 +20,7 @@ impl Point : ToStr { //~ ERROR implements a method not defined in the trait\n         Point { x: x, y: y }\n     }\n \n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         fmt!(\"(%f, %f)\", self.x, self.y)\n     }\n }"}, {"sha": "a0a9e3f0ddf27564307b6caf6a9179f65321e5b7", "filename": "src/test/compile-fail/multitrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -14,5 +14,5 @@ struct S {\n \n impl S: Cmp, ToStr { //~ ERROR: expected `{` but found `,`\n   fn eq(&&other: S) { false }\n-  fn to_str() -> ~str { ~\"hi\" }\n-}\n\\ No newline at end of file\n+  fn to_str(&self) -> ~str { ~\"hi\" }\n+}"}, {"sha": "7e59b5d7a870bd80e9d7fdfe3d0d349fa34041da", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -54,7 +54,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n impl cat: ToStr {\n-  pure fn to_str() -> ~str { copy self.name }\n+  pure fn to_str(&self) -> ~str { copy self.name }\n }\n \n fn print_out<T: ToStr>(thing: T, expected: ~str) {"}, {"sha": "25d460656fdef62b2ef788c9a12b9b49325c3d85", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -28,8 +28,8 @@ enum square {\n }\n \n impl square: to_str::ToStr {\n-    pure fn to_str() -> ~str {\n-        match self {\n+    pure fn to_str(&self) -> ~str {\n+        match *self {\n           bot => { ~\"R\" }\n           wall => { ~\"#\" }\n           rock => { ~\"*\" }"}, {"sha": "078bdae314f1a6bef2e9e2138fd8ae16517031ac", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -110,7 +110,7 @@ impl AsciiArt\n // Note that the %s fmt! specifier will not call this automatically.\n impl AsciiArt : ToStr\n {\n-    pure fn to_str() -> ~str\n+    pure fn to_str(&self) -> ~str\n     {\n         // Convert each line into a string.\n         let lines = do self.lines.map |line| {str::from_chars(*line)};"}, {"sha": "aad7ded42d3d01d606d5bdbcfa431eba4520bdae", "filename": "src/test/run-pass/new-impl-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e1ac5bb93626da70135e167a6596d854e7e679/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs?ref=27e1ac5bb93626da70135e167a6596d854e7e679", "patch": "@@ -4,7 +4,7 @@ struct Thingy {\n }\n \n impl ToStr for Thingy {\n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         fmt!(\"{ x: %d, y: %d }\", self.x, self.y)\n     }\n }\n@@ -14,7 +14,7 @@ struct PolymorphicThingy<T> {\n }\n \n impl<T:ToStr> ToStr for PolymorphicThingy<T> {\n-    pure fn to_str() -> ~str {\n+    pure fn to_str(&self) -> ~str {\n         self.x.to_str()\n     }\n }"}]}