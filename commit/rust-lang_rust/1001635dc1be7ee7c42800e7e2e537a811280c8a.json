{"sha": "1001635dc1be7ee7c42800e7e2e537a811280c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDE2MzVkYzFiZTdlZTdjNDI4MDBlN2UyZTUzN2E4MTEyODBjOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-10T16:56:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-10T16:56:34Z"}, "message": "auto merge of #14073 : alexcrichton/rust/snapshots, r=huonw", "tree": {"sha": "d29a4504c7cb986152674b27a57529e8ebe431d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d29a4504c7cb986152674b27a57529e8ebe431d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1001635dc1be7ee7c42800e7e2e537a811280c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1001635dc1be7ee7c42800e7e2e537a811280c8a", "html_url": "https://github.com/rust-lang/rust/commit/1001635dc1be7ee7c42800e7e2e537a811280c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1001635dc1be7ee7c42800e7e2e537a811280c8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e850316408bbe6254305cf4aa7c65381dc475192", "url": "https://api.github.com/repos/rust-lang/rust/commits/e850316408bbe6254305cf4aa7c65381dc475192", "html_url": "https://github.com/rust-lang/rust/commit/e850316408bbe6254305cf4aa7c65381dc475192"}, {"sha": "3f5e3af8387deb68e116228562062384d4b9cf65", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5e3af8387deb68e116228562062384d4b9cf65", "html_url": "https://github.com/rust-lang/rust/commit/3f5e3af8387deb68e116228562062384d4b9cf65"}], "stats": {"total": 102, "additions": 33, "deletions": 69}, "files": [{"sha": "2828c9bdc231dfdca4347ab1531008215926925d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -137,7 +137,7 @@ pub trait TyVisitor {\n                        sz: uint, align: uint) -> bool;\n \n     fn visit_enter_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint) -> bool;\n     fn visit_enter_enum_variant(&mut self, variant: uint,\n                                 disr_val: Disr,\n@@ -149,7 +149,7 @@ pub trait TyVisitor {\n                                 n_fields: uint,\n                                 name: &str) -> bool;\n     fn visit_leave_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint) -> bool;\n \n     fn visit_enter_fn(&mut self, purity: uint, proto: uint,"}, {"sha": "218f8a4ef4994ba4f3c6b6daa86e939f048dabb3", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -149,7 +149,7 @@ fn last_error() -> io::IoError {\n #[cfg(unix)]    unsafe fn close(sock: sock_t) { let _ = libc::close(sock); }\n \n fn sockname(fd: sock_t,\n-            f: extern \"system\" unsafe fn(sock_t, *mut libc::sockaddr,\n+            f: unsafe extern \"system\" fn(sock_t, *mut libc::sockaddr,\n                                          *mut libc::socklen_t) -> libc::c_int)\n     -> IoResult<ip::SocketAddr>\n {"}, {"sha": "b81746c11d524c1a1b14d7ac68d36d7c6018ceb9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -236,12 +236,7 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n                       ident: Option<ast::Ident>,\n                       sig: &ty::FnSig)\n                       -> ~str {\n-        let mut s = if abi == abi::Rust {\n-            StrBuf::new()\n-        } else {\n-            StrBuf::from_owned_str(format!(\"extern {} \", abi.to_str()))\n-        };\n-\n+        let mut s = StrBuf::new();\n         match fn_style {\n             ast::NormalFn => {}\n             _ => {\n@@ -250,6 +245,10 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n             }\n         };\n \n+        if abi != abi::Rust {\n+            s.push_str(format!(\"extern {} \", abi.to_str()));\n+        };\n+\n         s.push_str(\"fn\");\n \n         match ident {"}, {"sha": "7363593bacf07ef66044944f0467d18a96f649c0", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -512,32 +512,6 @@ pub use self::num::RadixFmt;\n mod num;\n pub mod rt;\n \n-#[cfg(stage0)]\n-#[allow(missing_doc)]\n-pub mod parse {\n-    #[deriving(Eq)]\n-    pub enum Alignment {\n-        AlignLeft,\n-        AlignRight,\n-        AlignUnknown,\n-    }\n-\n-    pub enum PluralKeyword {\n-        Zero,\n-        One,\n-        Two,\n-        Few,\n-        Many,\n-    }\n-\n-    pub enum Flag {\n-        FlagSignPlus,\n-        FlagSignMinus,\n-        FlagAlternate,\n-        FlagSignAwareZeroPad,\n-    }\n-}\n-\n pub type Result = io::IoResult<()>;\n \n /// A struct to represent both where to emit formatting strings to and how they"}, {"sha": "00c8661c8e3839c0a9c3386d6b37c264162364c4", "filename": "src/libstd/fmt/rt.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Frt.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -19,15 +19,6 @@\n \n use option::Option;\n \n-#[cfg(stage0)]\n-pub use fmt::parse::{Alignment, AlignLeft, AlignRight, AlignUnknown};\n-#[cfg(stage0)]\n-pub use fmt::parse::{PluralKeyword, Zero, One, Two, Few, Many};\n-#[cfg(stage0)]\n-pub use fmt::parse::{Flag, FlagSignPlus, FlagSignMinus, FlagSignAwareZeroPad};\n-#[cfg(stage0)]\n-pub use fmt::parse::{FlagAlternate};\n-\n pub enum Piece<'a> {\n     String(&'a str),\n     // FIXME(#8259): this shouldn't require the unit-value here\n@@ -49,7 +40,6 @@ pub struct FormatSpec {\n     pub width: Count,\n }\n \n-#[cfg(not(stage0))]\n #[deriving(Eq)]\n pub enum Alignment {\n     AlignLeft,\n@@ -65,7 +55,6 @@ pub enum Position {\n     ArgumentNext, ArgumentIs(uint)\n }\n \n-#[cfg(not(stage0))]\n pub enum Flag {\n     FlagSignPlus,\n     FlagSignMinus,"}, {"sha": "02535ccee516f80ac27010197aff36878d72de0c", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -367,7 +367,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_enter_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint)\n                      -> bool {\n         self.align(align);\n@@ -408,7 +408,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_leave_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint) -> bool {\n         if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) {\n             return false;"}, {"sha": "6e47203b56c0a5e632d4f2bb03109c83a969ff14", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -464,7 +464,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_enter_enum(&mut self,\n                         _n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         _sz: uint,\n                         _align: uint) -> bool {\n         let disr = unsafe {\n@@ -538,7 +538,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_leave_enum(&mut self,\n                         _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        _get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         _sz: uint,\n                         _align: uint)\n                         -> bool {"}, {"sha": "89d44473a9462c5a6460307289bb1c4ddc60ab56", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -294,7 +294,7 @@ mod imp {\n     #[cfg(target_os = \"linux\")]\n     fn min_stack_size(attr: *libc::pthread_attr_t) -> libc::size_t {\n         use ptr::RawPtr;\n-        type F = extern \"C\" unsafe fn(*libc::pthread_attr_t) -> libc::size_t;\n+        type F = unsafe extern \"C\" fn(*libc::pthread_attr_t) -> libc::size_t;\n         extern {\n             #[linkage = \"extern_weak\"]\n             static __pthread_get_minstack: *();"}, {"sha": "46a8960c3bece5534d3a74c11fff04ae986184db", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -907,12 +907,6 @@ impl<'a> Parser<'a> {\n             abi::Rust\n         };\n \n-        // NOTE: remove after a stage0 snapshot\n-        let fn_style = match self.parse_unsafety() {\n-            UnsafeFn => UnsafeFn,\n-            NormalFn => fn_style,\n-        };\n-\n         self.expect_keyword(keywords::Fn);\n         let (decl, lifetimes) = self.parse_ty_fn_decl(true);\n         return TyBareFn(@BareFnTy {"}, {"sha": "8486a8aeb352c30eb5cee489e1b2b040a1adda60", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -2087,13 +2087,13 @@ impl<'a> State<'a> {\n         if opt_sigil == Some('~') && onceness == ast::Once {\n             try!(word(&mut self.s, \"proc\"));\n         } else if opt_sigil == Some('&') {\n-            try!(self.print_extern_opt_abi(opt_abi));\n             try!(self.print_fn_style(fn_style));\n+            try!(self.print_extern_opt_abi(opt_abi));\n             try!(self.print_onceness(onceness));\n         } else {\n             assert!(opt_sigil.is_none());\n-            try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n             try!(self.print_fn_style(fn_style));\n+            try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n             try!(self.print_onceness(onceness));\n             try!(word(&mut self.s, \"fn\"));\n         }"}, {"sha": "7abfee775dfab7d563029bc7a07df09d68953adb", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -1,3 +1,11 @@\n+S 2014-05-09 47ecc2e\n+  freebsd-x86_64 5c085972690e1f9412c3c0c7ec64f6b148fe04fd\n+  linux-i386 690d2e310c025f10c54b1f2b9f32c65ea34575ed\n+  linux-x86_64 b869118e628589d6546a4716c91e1a41952f294c\n+  macos-i386 29a044bdd539355fde013797d600bb70c9d05009\n+  macos-x86_64 b88ce60be4f70b014669103cb39c8f65814ae311\n+  winnt-i386 0da39548596d0596c1c9fb98382c5225d36f4b44\n+\n S 2014-05-06 24f6f26\n   freebsd-x86_64 cebcfcece5676c9aea30241bf13c517ffdb37b7c\n   linux-i386 e9960c7c793ff7ae87c9d30c88cfedf7e40345f7"}, {"sha": "aa58d2e08e94c1c2c3d348f643c83b779c192570", "filename": "src/test/compile-fail/variadic-ffi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -23,13 +23,13 @@ fn main() {\n         foo(); //~ ERROR: this function takes at least 2 parameters but 0 parameters were supplied\n         foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n \n-        let x: extern \"C\" unsafe fn(f: int, x: u8) = foo;\n-        //~^ ERROR: mismatched types: expected `extern \"C\" unsafe fn(int, u8)`\n-        //          but found `extern \"C\" unsafe fn(int, u8, ...)`\n+        let x: unsafe extern \"C\" fn(f: int, x: u8) = foo;\n+        //~^ ERROR: mismatched types: expected `unsafe extern \"C\" fn(int, u8)`\n+        //          but found `unsafe extern \"C\" fn(int, u8, ...)`\n         //          (expected non-variadic fn but found variadic function)\n \n-        let y: extern \"C\" unsafe fn(f: int, x: u8, ...) = bar;\n-        //~^ ERROR: mismatched types: expected `extern \"C\" unsafe fn(int, u8, ...)`\n+        let y: unsafe extern \"C\" fn(f: int, x: u8, ...) = bar;\n+        //~^ ERROR: mismatched types: expected `unsafe extern \"C\" fn(int, u8, ...)`\n         //          but found `extern \"C\" extern fn(int, u8)`\n         //          (expected variadic fn but found non-variadic function)\n "}, {"sha": "0bbd5ecdc3f5c4603133272da3b48152d085addf", "filename": "src/test/run-pass/fn-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Frun-pass%2Ffn-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Frun-pass%2Ffn-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-abi.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -17,5 +17,5 @@ extern {\n \n pub fn main() {\n     // Will only type check if the type of _p and the decl of printf use the same ABI\n-    let _p: extern unsafe fn() = printf;\n+    let _p: unsafe extern fn() = printf;\n }"}, {"sha": "a131b21957dea53436ccaf382140e2d65e2f28b2", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -106,7 +106,7 @@ impl TyVisitor for MyVisitor {\n                        _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_enum(&mut self, _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        _get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         _sz: uint, _align: uint) -> bool { true }\n     fn visit_enter_enum_variant(&mut self,\n                                 _variant: uint,\n@@ -122,7 +122,7 @@ impl TyVisitor for MyVisitor {\n                                 _name: &str) -> bool { true }\n     fn visit_leave_enum(&mut self,\n                         _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n+                        _get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n                         _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,"}, {"sha": "c6a1654bfe4e4c7e5d3ea9cc2c2fc7836623ad71", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1001635dc1be7ee7c42800e7e2e537a811280c8a/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=1001635dc1be7ee7c42800e7e2e537a811280c8a", "patch": "@@ -41,10 +41,10 @@ pub fn main() {\n         });\n \n         // Make a function pointer\n-        let x: extern \"C\" unsafe fn(*mut c_char, *c_char, ...) -> c_int = sprintf;\n+        let x: unsafe extern \"C\" fn(*mut c_char, *c_char, ...) -> c_int = sprintf;\n \n         // A function that takes a function pointer\n-        unsafe fn call(p: extern \"C\" unsafe fn(*mut c_char, *c_char, ...) -> c_int) {\n+        unsafe fn call(p: unsafe extern \"C\" fn(*mut c_char, *c_char, ...) -> c_int) {\n             // Call with just the named parameter via fn pointer\n             \"Hello World\\n\".with_c_str(|c| {\n                 check(\"Hello World\\n\", |s| p(s, c));"}]}