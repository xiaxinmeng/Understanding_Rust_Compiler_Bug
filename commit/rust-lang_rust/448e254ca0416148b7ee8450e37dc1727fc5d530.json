{"sha": "448e254ca0416148b7ee8450e37dc1727fc5d530", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OGUyNTRjYTA0MTYxNDhiN2VlODQ1MGUzN2RjMTcyN2ZjNWQ1MzA=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-06-10T21:37:46Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-06-10T22:26:44Z"}, "message": "All intrinsics are available in all supported LLVM versions", "tree": {"sha": "df4122cb80b4522bf8b684acbba98ed2dd839fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df4122cb80b4522bf8b684acbba98ed2dd839fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448e254ca0416148b7ee8450e37dc1727fc5d530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448e254ca0416148b7ee8450e37dc1727fc5d530", "html_url": "https://github.com/rust-lang/rust/commit/448e254ca0416148b7ee8450e37dc1727fc5d530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448e254ca0416148b7ee8450e37dc1727fc5d530/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f36f7a980465055cafbbbd2b9109dadbb55fd03", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f36f7a980465055cafbbbd2b9109dadbb55fd03", "html_url": "https://github.com/rust-lang/rust/commit/3f36f7a980465055cafbbbd2b9109dadbb55fd03"}], "stats": {"total": 40, "additions": 1, "deletions": 39}, "files": [{"sha": "bfcb1ae33b3019f000314b4e25005f23f1a839aa", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/448e254ca0416148b7ee8450e37dc1727fc5d530/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448e254ca0416148b7ee8450e37dc1727fc5d530/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=448e254ca0416148b7ee8450e37dc1727fc5d530", "patch": "@@ -1097,45 +1097,7 @@ fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> {\n     ifn!(\"llvm.localrecover\", fn(i8p, i8p, t_i32) -> i8p);\n     ifn!(\"llvm.x86.seh.recoverfp\", fn(i8p, i8p) -> i8p);\n \n-    // Some intrinsics were introduced in later versions of LLVM, but they have\n-    // fallbacks in libc or libm and such.\n-    macro_rules! compatible_ifn {\n-        ($name:expr, noop($cname:ident ($($arg:expr),*) -> void), $llvm_version:expr) => (\n-            if unsafe { llvm::LLVMVersionMinor() >= $llvm_version } {\n-                // The `if key == $name` is already in ifn!\n-                ifn!($name, fn($($arg),*) -> void);\n-            } else if key == $name {\n-                let f = declare::declare_cfn(ccx, stringify!($cname),\n-                                             Type::func(&[$($arg),*], &void));\n-                llvm::SetLinkage(f, llvm::InternalLinkage);\n-\n-                let bld = ccx.builder();\n-                let llbb = unsafe {\n-                    llvm::LLVMAppendBasicBlockInContext(ccx.llcx(), f,\n-                                                        \"entry-block\\0\".as_ptr() as *const _)\n-                };\n-\n-                bld.position_at_end(llbb);\n-                bld.ret_void();\n-\n-                ccx.intrinsics().borrow_mut().insert($name, f.clone());\n-                return Some(f);\n-            }\n-        );\n-        ($name:expr, $cname:ident ($($arg:expr),*) -> $ret:expr, $llvm_version:expr) => (\n-            if unsafe { llvm::LLVMVersionMinor() >= $llvm_version } {\n-                // The `if key == $name` is already in ifn!\n-                ifn!($name, fn($($arg),*) -> $ret);\n-            } else if key == $name {\n-                let f = declare::declare_cfn(ccx, stringify!($cname),\n-                                             Type::func(&[$($arg),*], &$ret));\n-                ccx.intrinsics().borrow_mut().insert($name, f.clone());\n-                return Some(f);\n-            }\n-        )\n-    }\n-\n-    compatible_ifn!(\"llvm.assume\", noop(llvmcompat_assume(i1) -> void), 6);\n+    ifn!(\"llvm.assume\", fn(i1) -> void);\n \n     if ccx.sess().opts.debuginfo != NoDebugInfo {\n         ifn!(\"llvm.dbg.declare\", fn(Type::metadata(ccx), Type::metadata(ccx)) -> void);"}]}