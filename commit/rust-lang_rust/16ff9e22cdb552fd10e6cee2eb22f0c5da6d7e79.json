{"sha": "16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZmY5ZTIyY2RiNTUyZmQxMGU2Y2VlMmViMjJmMGM1ZGE2ZDdlNzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-15T03:29:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T03:29:15Z"}, "message": "Auto merge of #36347 - knight42:str-replacen, r=alexcrichton\n\nImplement std::str::replacen\n\nReplaces first N matches of a pattern with another string.\n\n```\nassert_eq!(\"acaaa\".replacen(a, \"b\", 3), \"bcbba\")\n```", "tree": {"sha": "3d42f5b6742c237ff7a6a7157f67c616080cb015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d42f5b6742c237ff7a6a7157f67c616080cb015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "html_url": "https://github.com/rust-lang/rust/commit/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffdda1ba183c981d57e63b59c88184be449eee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffdda1ba183c981d57e63b59c88184be449eee4", "html_url": "https://github.com/rust-lang/rust/commit/6ffdda1ba183c981d57e63b59c88184be449eee4"}, {"sha": "ebda77072a56a43d33d5723196a5ae37544a1ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebda77072a56a43d33d5723196a5ae37544a1ab9", "html_url": "https://github.com/rust-lang/rust/commit/ebda77072a56a43d33d5723196a5ae37544a1ab9"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "6a6b450e518632ff0b0666e594290d239bf077f7", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "patch": "@@ -1594,6 +1594,49 @@ impl str {\n         result\n     }\n \n+    /// Replaces first N matches of a pattern with another string.\n+    ///\n+    /// `replacen` creates a new [`String`], and copies the data from this string slice into it.\n+    /// While doing so, it attempts to find matches of a pattern. If it finds any, it\n+    /// replaces them with the replacement string slice at most `N` times.\n+    ///\n+    /// [`String`]: string/struct.String.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(str_replacen)]\n+    /// let s = \"foo foo 123 foo\";\n+    /// assert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\n+    /// assert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\n+    /// assert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n+    /// ```\n+    ///\n+    /// When the pattern doesn't match:\n+    ///\n+    /// ```\n+    /// # #![feature(str_replacen)]\n+    /// let s = \"this is old\";\n+    /// assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n+    /// ```\n+    #[unstable(feature = \"str_replacen\",\n+               issue = \"36436\",\n+               reason = \"only need to replace first N matches\")]\n+    pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String {\n+        // Hope to reduce the times of re-allocation\n+        let mut result = String::with_capacity(32);\n+        let mut last_end = 0;\n+        for (start, part) in self.match_indices(pat).take(count) {\n+            result.push_str(unsafe { self.slice_unchecked(last_end, start) });\n+            result.push_str(to);\n+            last_end = start + part.len();\n+        }\n+        result.push_str(unsafe { self.slice_unchecked(last_end, self.len()) });\n+        result\n+    }\n+\n     /// Returns the lowercase equivalent of this string slice, as a new [`String`].\n     ///\n     /// 'Lowercase' is defined according to the terms of the Unicode Derived Core Property"}, {"sha": "878581a4f296ea304277860973c041b6c2076811", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "patch": "@@ -21,6 +21,7 @@\n #![feature(rand)]\n #![feature(step_by)]\n #![feature(str_escape)]\n+#![feature(str_replacen)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "62e164a569aa642005e5daa53b38e78eeb006cda", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "patch": "@@ -218,6 +218,20 @@ fn test_is_empty() {\n     assert!(!\"a\".is_empty());\n }\n \n+#[test]\n+fn test_replacen() {\n+    assert_eq!(\"\".replacen('a', \"b\", 5), \"\");\n+    assert_eq!(\"acaaa\".replacen(\"a\", \"b\", 3), \"bcbba\");\n+    assert_eq!(\"aaaa\".replacen(\"a\", \"b\", 0), \"aaaa\");\n+\n+    let test = \"test\";\n+    assert_eq!(\" test test \".replacen(test, \"toast\", 3), \" toast toast \");\n+    assert_eq!(\" test test \".replacen(test, \"toast\", 0), \" test test \");\n+    assert_eq!(\" test test \".replacen(test, \"\", 5), \"   \");\n+\n+    assert_eq!(\"qwer123zxc789\".replacen(char::is_numeric, \"\", 3), \"qwerzxc789\");\n+}\n+\n #[test]\n fn test_replace() {\n     let a = \"a\";"}]}