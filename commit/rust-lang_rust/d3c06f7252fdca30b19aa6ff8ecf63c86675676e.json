{"sha": "d3c06f7252fdca30b19aa6ff8ecf63c86675676e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzA2ZjcyNTJmZGNhMzBiMTlhYTZmZjhlY2Y2M2M4NjY3NTY3NmU=", "commit": {"author": {"name": "Joshua Holmer", "email": "jholmer@dminc.com", "date": "2018-10-12T14:26:55Z"}, "committer": {"name": "Joshua Holmer", "email": "jholmer@dminc.com", "date": "2018-10-12T16:11:56Z"}, "message": "Exclude pattern guards from unnecessary_fold lint\n\nMethods like `Iterator::any` borrow the iterator mutably,\nwhich is not allowed within a pattern guard and will fail to compile.\nThis commit prevents clippy from suggesting this type of change.\n\nCloses #3069", "tree": {"sha": "bcb879456bc372fe187052e580bb7e30b5702ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcb879456bc372fe187052e580bb7e30b5702ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c06f7252fdca30b19aa6ff8ecf63c86675676e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c06f7252fdca30b19aa6ff8ecf63c86675676e", "html_url": "https://github.com/rust-lang/rust/commit/d3c06f7252fdca30b19aa6ff8ecf63c86675676e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c06f7252fdca30b19aa6ff8ecf63c86675676e/comments", "author": null, "committer": null, "parents": [{"sha": "d445dbfe162212f90efbe2df9795a257a347a767", "url": "https://api.github.com/repos/rust-lang/rust/commits/d445dbfe162212f90efbe2df9795a257a347a767", "html_url": "https://github.com/rust-lang/rust/commit/d445dbfe162212f90efbe2df9795a257a347a767"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "66c94746f5abd04b8ba36f7713cf67f1dca9212b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3c06f7252fdca30b19aa6ff8ecf63c86675676e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c06f7252fdca30b19aa6ff8ecf63c86675676e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d3c06f7252fdca30b19aa6ff8ecf63c86675676e", "patch": "@@ -9,6 +9,7 @@\n \n \n use crate::rustc::hir;\n+use crate::rustc::hir::{ExprKind, Guard, Node};\n use crate::rustc::hir::def::Def;\n use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n use crate::rustc::ty::{self, Ty};\n@@ -1428,6 +1429,23 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n         return;\n     }\n \n+    // `Iterator::any` cannot be used within a pattern guard\n+    // See https://github.com/rust-lang-nursery/rust-clippy/issues/3069\n+    if_chain! {\n+        if let Some(fold_parent) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(expr.id));\n+        if let Node::Expr(fold_parent) = fold_parent;\n+        if let ExprKind::Match(_, ref arms, _) = fold_parent.node;\n+        if arms.iter().any(|arm| {\n+            if let Some(Guard::If(ref guard)) = arm.guard {\n+                return guard.id == expr.id;\n+            }\n+            false\n+        });\n+        then {\n+            return;\n+        }\n+    }\n+\n     assert!(fold_args.len() == 3,\n         \"Expected fold_args to have three entries - the receiver, the initial value and the closure\");\n "}, {"sha": "3b70602d4adf121e62583fd451d20fa632669255", "filename": "tests/ui/unnecessary_fold.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3c06f7252fdca30b19aa6ff8ecf63c86675676e/tests%2Fui%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c06f7252fdca30b19aa6ff8ecf63c86675676e/tests%2Fui%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.rs?ref=d3c06f7252fdca30b19aa6ff8ecf63c86675676e", "patch": "@@ -45,6 +45,13 @@ fn unnecessary_fold_should_ignore() {\n \n     let _ = [(0..2), (0..3)].iter().fold(0, |a, b| a + b.len());\n     let _ = [(0..2), (0..3)].iter().fold(1, |a, b| a * b.len());\n+\n+    // Because `any` takes the iterator as a mutable reference,\n+    // it cannot be used in a pattern guard, and we must use `fold`.\n+    match 1 {\n+        _ if (0..3).fold(false, |acc, x| acc || x > 2) => {}\n+        _ => {}\n+    }\n }\n \n fn main() {}"}]}