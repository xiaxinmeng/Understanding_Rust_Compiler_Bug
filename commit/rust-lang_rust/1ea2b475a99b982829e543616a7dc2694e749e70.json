{"sha": "1ea2b475a99b982829e543616a7dc2694e749e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTJiNDc1YTk5Yjk4MjgyOWU1NDM2MTZhN2RjMjY5NGU3NDllNzA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-30T20:33:25Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "handle most cases", "tree": {"sha": "4136b037d123ce9a195c6bdb3664b28cc420651e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4136b037d123ce9a195c6bdb3664b28cc420651e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea2b475a99b982829e543616a7dc2694e749e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea2b475a99b982829e543616a7dc2694e749e70", "html_url": "https://github.com/rust-lang/rust/commit/1ea2b475a99b982829e543616a7dc2694e749e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea2b475a99b982829e543616a7dc2694e749e70/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62292e8f9e28410741059ebb25133b8e1e8638a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62292e8f9e28410741059ebb25133b8e1e8638a", "html_url": "https://github.com/rust-lang/rust/commit/b62292e8f9e28410741059ebb25133b8e1e8638a"}], "stats": {"total": 78, "additions": 67, "deletions": 11}, "files": [{"sha": "afcf042807289b219e6359e91a50e606ec769b2f", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1ea2b475a99b982829e543616a7dc2694e749e70/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea2b475a99b982829e543616a7dc2694e749e70/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=1ea2b475a99b982829e543616a7dc2694e749e70", "patch": "@@ -8,22 +8,12 @@ use crate::{\n };\n use hir_expand::name::Name;\n \n-// TODO handle prelude\n-// TODO handle enum variants\n // TODO don't import from super imports? or at least deprioritize\n // TODO use super?\n // TODO use shortest path\n // TODO performance / memoize\n \n pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n-    // 1. Find all locations that the item could be imported from (i.e. that are visible)\n-    //    - this needs to consider other crates, for reexports from transitive dependencies\n-    //    - filter by visibility\n-    // 2. For each of these, go up the module tree until we find an\n-    //    item/module/crate that is already in scope (including because it is in\n-    //    the prelude, and including aliases!)\n-    // 3. Then select the one that gives the shortest path\n-\n     // Base cases:\n \n     // - if the item is already in scope, return the name under which it is\n@@ -46,10 +36,28 @@ pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Optio\n     }\n \n     // - if the item is in the prelude, return the name from there\n-    // TODO check prelude\n+    if let Some(prelude_module) = def_map.prelude {\n+        let prelude_def_map = db.crate_def_map(prelude_module.krate);\n+        let prelude_scope: &crate::item_scope::ItemScope = &prelude_def_map.modules[prelude_module.local_id].scope;\n+        if let Some((name, vis)) = prelude_scope.reverse_get(item) {\n+            if vis.is_visible_from(db, from) {\n+                return Some(ModPath::from_simple_segments(PathKind::Plain, vec![name.clone()]));\n+            }\n+        }\n+    }\n \n     // Recursive case:\n     // - if the item is an enum variant, refer to it via the enum\n+    if let Some(ModuleDefId::EnumVariantId(variant)) = item.as_module_def_id() {\n+        if let Some(mut path) = find_path(db, ItemInNs::Types(variant.parent.into()), from) {\n+            let data = db.enum_data(variant.parent);\n+            path.segments.push(data.variants[variant.local_id].name.clone());\n+            return Some(path);\n+        }\n+        // If this doesn't work, it seems we have no way of referring to the\n+        // enum; that's very weird, but there might still be a reexport of the\n+        // variant somewhere\n+    }\n \n     // - otherwise, look for modules containing (reexporting) it and import it from one of those\n     let importable_locations = find_importable_locations(db, item, from);\n@@ -131,6 +139,16 @@ mod tests {\n         check_found_path(code, \"S\");\n     }\n \n+    #[test]\n+    fn enum_variant() {\n+        let code = r#\"\n+            //- /main.rs\n+            enum E { A }\n+            <|>\n+        \"#;\n+        check_found_path(code, \"E::A\");\n+    }\n+\n     #[test]\n     fn sub_module() {\n         let code = r#\"\n@@ -215,6 +233,19 @@ mod tests {\n         check_found_path(code, \"bar::U\");\n     }\n \n+    #[test]\n+    fn different_crate_reexport() {\n+        let code = r#\"\n+            //- /main.rs crate:main deps:std\n+            <|>\n+            //- /std.rs crate:std deps:core\n+            pub use core::S;\n+            //- /core.rs crate:core\n+            pub struct S;\n+        \"#;\n+        check_found_path(code, \"std::S\");\n+    }\n+\n     #[test]\n     fn prelude() {\n         let code = r#\"\n@@ -227,4 +258,21 @@ mod tests {\n         \"#;\n         check_found_path(code, \"S\");\n     }\n+\n+    #[test]\n+    fn enum_variant_from_prelude() {\n+        let code = r#\"\n+            //- /main.rs crate:main deps:std\n+            <|>\n+            //- /std.rs crate:std\n+            pub mod prelude {\n+                pub enum Option<T> { Some(T), None }\n+                pub use Option::*;\n+            }\n+            #[prelude_import]\n+            pub use prelude::*;\n+        \"#;\n+        check_found_path(code, \"None\");\n+        check_found_path(code, \"Some\");\n+    }\n }"}, {"sha": "71afdb235fe0173550dbd649a715a768fefc483c", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ea2b475a99b982829e543616a7dc2694e749e70/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea2b475a99b982829e543616a7dc2694e749e70/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=1ea2b475a99b982829e543616a7dc2694e749e70", "patch": "@@ -204,4 +204,12 @@ impl ItemInNs {\n             },\n         }\n     }\n+\n+    pub fn as_module_def_id(self) -> Option<ModuleDefId> {\n+        match self {\n+            ItemInNs::Types(t) => Some(t),\n+            ItemInNs::Values(v) => Some(v),\n+            ItemInNs::Macros(_) => None,\n+        }\n+    }\n }"}]}