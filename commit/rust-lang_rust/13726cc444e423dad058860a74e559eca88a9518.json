{"sha": "13726cc444e423dad058860a74e559eca88a9518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzI2Y2M0NDRlNDIzZGFkMDU4ODYwYTc0ZTU1OWVjYTg4YTk1MTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-10T15:19:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-10T15:19:19Z"}, "message": "Rollup merge of #63786 - tspiteri:const-abs, r=alexcrichton\n\nMake `abs`, `wrapping_abs`, `overflowing_abs` const functions\n\nThis makes `abs`, `wrapping_abs` and `overflowing_abs` const functions like #58044 makes `wrapping_neg` and `overflowing_neg` const functions.\n\n`abs` is made const by returning `(self ^ -1) - -1` = `!self + 1` = `-self` for negative numbers and `(self ^ 0) - 0` = `self` for non-negative numbers. The subexpression `self >> ($BITS - 1)` evaluates to `-1` for negative numbers and `0` otherwise. The subtraction overflows when `self` is `min_value()`, as we would be subtracting `max_value() - -1`; this is when `abs` should overflow.\n\n`wrapping_abs` and `overflowing_abs` make use of `wrapping_sub` and `overflowing_sub` instead of the subtraction operator.", "tree": {"sha": "965b34c8332d40db28e4c6994db86af38b4fe2a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/965b34c8332d40db28e4c6994db86af38b4fe2a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13726cc444e423dad058860a74e559eca88a9518", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdd773CRBK7hj4Ov3rIwAAdHIIAF5cTbATODnlyihxxrXdQ/FA\nxd0Wi74JSb/1jzBvflAk6FyfqX1SuXGjbVMMDehsIJy2YFAE0NUbXWxYqSYX5omB\nvsmjOV9kHdpe0NSFZ2S+8cfGzgRF1X12qFNs04mkx/FU1uFELmzfuGkoMS0sGAlk\nA0lFWPwZCeE3Txp3tRDOt7hfneV2aIZcMAItcz516b8ch69qKz1Sizez8500DrCu\ngrzLEsMgMCxT7utqceVhWCUC1UKQ7YKXcKxJnfWdbhtOKPQRivlSkHDnjZEpoOd9\nNKfP2HRYmhQVi59jk6s6RoF8yskJXIQwRVwba5NA2CHLroc/hDK1j6DUGNKb2s4=\n=MpD+\n-----END PGP SIGNATURE-----\n", "payload": "tree 965b34c8332d40db28e4c6994db86af38b4fe2a0\nparent 403c0def905c58f08e5a1ce48a430522df01abf1\nparent adee559659774054497fc36afea0076c334c0bb2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568128759 +0200\ncommitter GitHub <noreply@github.com> 1568128759 +0200\n\nRollup merge of #63786 - tspiteri:const-abs, r=alexcrichton\n\nMake `abs`, `wrapping_abs`, `overflowing_abs` const functions\n\nThis makes `abs`, `wrapping_abs` and `overflowing_abs` const functions like #58044 makes `wrapping_neg` and `overflowing_neg` const functions.\n\n`abs` is made const by returning `(self ^ -1) - -1` = `!self + 1` = `-self` for negative numbers and `(self ^ 0) - 0` = `self` for non-negative numbers. The subexpression `self >> ($BITS - 1)` evaluates to `-1` for negative numbers and `0` otherwise. The subtraction overflows when `self` is `min_value()`, as we would be subtracting `max_value() - -1`; this is when `abs` should overflow.\n\n`wrapping_abs` and `overflowing_abs` make use of `wrapping_sub` and `overflowing_sub` instead of the subtraction operator.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13726cc444e423dad058860a74e559eca88a9518", "html_url": "https://github.com/rust-lang/rust/commit/13726cc444e423dad058860a74e559eca88a9518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13726cc444e423dad058860a74e559eca88a9518/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403c0def905c58f08e5a1ce48a430522df01abf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/403c0def905c58f08e5a1ce48a430522df01abf1", "html_url": "https://github.com/rust-lang/rust/commit/403c0def905c58f08e5a1ce48a430522df01abf1"}, {"sha": "adee559659774054497fc36afea0076c334c0bb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/adee559659774054497fc36afea0076c334c0bb2", "html_url": "https://github.com/rust-lang/rust/commit/adee559659774054497fc36afea0076c334c0bb2"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "df1c00ccd184f17e7c4cdf9004b8eff68ad95ef9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/13726cc444e423dad058860a74e559eca88a9518/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13726cc444e423dad058860a74e559eca88a9518/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=13726cc444e423dad058860a74e559eca88a9518", "patch": "@@ -1401,12 +1401,8 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n-            pub fn wrapping_abs(self) -> Self {\n-                if self.is_negative() {\n-                    self.wrapping_neg()\n-                } else {\n-                    self\n-                }\n+            pub const fn wrapping_abs(self) -> Self {\n+                (self ^ (self >> ($BITS - 1))).wrapping_sub(self >> ($BITS - 1))\n             }\n         }\n \n@@ -1764,12 +1760,8 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n-            pub fn overflowing_abs(self) -> (Self, bool) {\n-                if self.is_negative() {\n-                    self.overflowing_neg()\n-                } else {\n-                    (self, false)\n-                }\n+            pub const fn overflowing_abs(self) -> (Self, bool) {\n+                (self ^ (self >> ($BITS - 1))).overflowing_sub(self >> ($BITS - 1))\n             }\n         }\n \n@@ -1973,15 +1965,11 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn abs(self) -> Self {\n-                if self.is_negative() {\n-                    // Note that the #[inline] above means that the overflow\n-                    // semantics of this negation depend on the crate we're being\n-                    // inlined into.\n-                    -self\n-                } else {\n-                    self\n-                }\n+            pub const fn abs(self) -> Self {\n+                // Note that the #[inline] above means that the overflow\n+                // semantics of the subtraction depend on the crate we're being\n+                // inlined into.\n+                (self ^ (self >> ($BITS - 1))) - (self >> ($BITS - 1))\n             }\n         }\n "}, {"sha": "9be87a6447cda77bb659efc34f6b9371878e99f8", "filename": "src/test/ui/consts/const-int-overflowing-rpass.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13726cc444e423dad058860a74e559eca88a9518/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13726cc444e423dad058860a74e559eca88a9518/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs?ref=13726cc444e423dad058860a74e559eca88a9518", "patch": "@@ -18,6 +18,10 @@ const SHR_B: (u32, bool) = 0x10u32.overflowing_shr(132);\n const NEG_A: (u32, bool) = 0u32.overflowing_neg();\n const NEG_B: (u32, bool) = core::u32::MAX.overflowing_neg();\n \n+const ABS_POS: (i32, bool) = 10i32.overflowing_abs();\n+const ABS_NEG: (i32, bool) = (-10i32).overflowing_abs();\n+const ABS_MIN: (i32, bool) = i32::min_value().overflowing_abs();\n+\n fn main() {\n     assert_eq!(ADD_A, (7, false));\n     assert_eq!(ADD_B, (0, true));\n@@ -36,4 +40,8 @@ fn main() {\n \n     assert_eq!(NEG_A, (0, false));\n     assert_eq!(NEG_B, (1, true));\n+\n+    assert_eq!(ABS_POS, (10, false));\n+    assert_eq!(ABS_NEG, (10, false));\n+    assert_eq!(ABS_MIN, (i32::min_value(), true));\n }"}, {"sha": "dc46fce39a93c4ec279c5effea5e9a6da614c0a8", "filename": "src/test/ui/consts/const-int-sign-rpass.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13726cc444e423dad058860a74e559eca88a9518/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13726cc444e423dad058860a74e559eca88a9518/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs?ref=13726cc444e423dad058860a74e559eca88a9518", "patch": "@@ -11,6 +11,9 @@ const SIGNUM_POS: i32 = 10i32.signum();\n const SIGNUM_NIL: i32 = 0i32.signum();\n const SIGNUM_NEG: i32 = (-42i32).signum();\n \n+const ABS_A: i32 = 10i32.abs();\n+const ABS_B: i32 = (-10i32).abs();\n+\n fn main() {\n     assert!(NEGATIVE_A);\n     assert!(!NEGATIVE_B);\n@@ -20,4 +23,7 @@ fn main() {\n     assert_eq!(SIGNUM_POS, 1);\n     assert_eq!(SIGNUM_NIL, 0);\n     assert_eq!(SIGNUM_NEG, -1);\n+\n+    assert_eq!(ABS_A, 10);\n+    assert_eq!(ABS_B, 10);\n }"}, {"sha": "2bbad99a52a902ea5b3e72f325b5b4955a84e122", "filename": "src/test/ui/consts/const-int-wrapping-rpass.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13726cc444e423dad058860a74e559eca88a9518/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13726cc444e423dad058860a74e559eca88a9518/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping-rpass.rs?ref=13726cc444e423dad058860a74e559eca88a9518", "patch": "@@ -18,6 +18,10 @@ const SHR_B: u32 = 128u32.wrapping_shr(128);\n const NEG_A: u32 = 5u32.wrapping_neg();\n const NEG_B: u32 = 1234567890u32.wrapping_neg();\n \n+const ABS_POS: i32 = 10i32.wrapping_abs();\n+const ABS_NEG: i32 = (-10i32).wrapping_abs();\n+const ABS_MIN: i32 = i32::min_value().wrapping_abs();\n+\n fn main() {\n     assert_eq!(ADD_A, 255);\n     assert_eq!(ADD_B, 199);\n@@ -36,4 +40,8 @@ fn main() {\n \n     assert_eq!(NEG_A, 4294967291);\n     assert_eq!(NEG_B, 3060399406);\n+\n+    assert_eq!(ABS_POS, 10);\n+    assert_eq!(ABS_NEG, 10);\n+    assert_eq!(ABS_MIN, i32::min_value());\n }"}]}