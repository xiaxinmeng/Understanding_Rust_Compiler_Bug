{"sha": "c782353a907ea121dcae670a5f0d8e14b8865b19", "node_id": "C_kwDOAAsO6NoAKGM3ODIzNTNhOTA3ZWExMjFkY2FlNjcwYTVmMGQ4ZTE0Yjg4NjViMTk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-09T13:59:02Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-09T14:23:30Z"}, "message": "Rename assist: `convert_ufcs_to_method` => `unqualify_method_call`", "tree": {"sha": "b3a88ff7b9d7932ba63977f05c823702b7e62046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a88ff7b9d7932ba63977f05c823702b7e62046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c782353a907ea121dcae670a5f0d8e14b8865b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c782353a907ea121dcae670a5f0d8e14b8865b19", "html_url": "https://github.com/rust-lang/rust/commit/c782353a907ea121dcae670a5f0d8e14b8865b19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c782353a907ea121dcae670a5f0d8e14b8865b19/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44c84a8d2848c9fae4d496c0d9dc9e8c98c8f1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c84a8d2848c9fae4d496c0d9dc9e8c98c8f1ef", "html_url": "https://github.com/rust-lang/rust/commit/44c84a8d2848c9fae4d496c0d9dc9e8c98c8f1ef"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "e9d4e270cdcfb8c93f5bada2a50fc74ce5763492", "filename": "crates/ide-assists/src/handlers/unqualify_method_call.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c782353a907ea121dcae670a5f0d8e14b8865b19/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c782353a907ea121dcae670a5f0d8e14b8865b19/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funqualify_method_call.rs?ref=c782353a907ea121dcae670a5f0d8e14b8865b19", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: convert_ufcs_to_method\n+// Assist: unqualify_method_call\n //\n // Transforms universal function call syntax into a method call.\n //\n@@ -22,7 +22,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // # mod std { pub mod ops { pub trait Add { fn add(self, _: Self) {} } impl Add for i32 {} } }\n // ```\n-pub(crate) fn convert_ufcs_to_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn unqualify_method_call(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let call = ctx.find_node_at_offset::<ast::CallExpr>()?;\n     let ast::Expr::PathExpr(path_expr) = call.expr()? else { return None };\n     let path = path_expr.path()?;\n@@ -66,8 +66,8 @@ pub(crate) fn convert_ufcs_to_method(acc: &mut Assists, ctx: &AssistContext<'_>)\n     );\n \n     acc.add(\n-        AssistId(\"convert_ufcs_to_method\", AssistKind::RefactorRewrite),\n-        \"Convert UFCS to a method call\",\n+        AssistId(\"unqualify_method_call\", AssistKind::RefactorRewrite),\n+        \"Unqualify method call\",\n         call.syntax().text_range(),\n         |edit| {\n             edit.delete(delete_path);\n@@ -105,9 +105,9 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn ufcs2method_simple() {\n+    fn unqualify_method_call_simple() {\n         check_assist(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n struct S;\n impl S { fn f(self, S: S) {} }\n@@ -120,9 +120,9 @@ fn f() { S.f(S); }\"#,\n     }\n \n     #[test]\n-    fn ufcs2method_trait() {\n+    fn unqualify_method_call_trait() {\n         check_assist(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n //- minicore: add\n fn f() { <u32 as core::ops::Add>::$0add(2, 2); }\"#,\n@@ -131,7 +131,7 @@ fn f() { 2.add(2); }\"#,\n         );\n \n         check_assist(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n //- minicore: add\n fn f() { core::ops::Add::$0add(2, 2); }\"#,\n@@ -140,7 +140,7 @@ fn f() { 2.add(2); }\"#,\n         );\n \n         check_assist(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n //- minicore: add\n use core::ops::Add;\n@@ -152,9 +152,9 @@ fn f() { 2.add(2); }\"#,\n     }\n \n     #[test]\n-    fn ufcs2method_single_arg() {\n+    fn unqualify_method_call_single_arg() {\n         check_assist(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n         struct S;\n         impl S { fn f(self) {} }\n@@ -167,9 +167,9 @@ fn f() { 2.add(2); }\"#,\n     }\n \n     #[test]\n-    fn ufcs2method_parens() {\n+    fn unqualify_method_call_parens() {\n         check_assist(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n //- minicore: deref\n struct S;\n@@ -189,19 +189,19 @@ fn f() { (&S).deref(); }\"#,\n     }\n \n     #[test]\n-    fn ufcs2method_doesnt_apply_with_cursor_not_on_path() {\n+    fn unqualify_method_call_doesnt_apply_with_cursor_not_on_path() {\n         check_assist_not_applicable(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n //- minicore: add\n fn f() { core::ops::Add::add(2,$0 2); }\"#,\n         );\n     }\n \n     #[test]\n-    fn ufcs2method_doesnt_apply_with_no_self() {\n+    fn unqualify_method_call_doesnt_apply_with_no_self() {\n         check_assist_not_applicable(\n-            convert_ufcs_to_method,\n+            unqualify_method_call,\n             r#\"\n struct S;\n impl S { fn assoc(S: S, S: S) {} }", "previous_filename": "crates/ide-assists/src/handlers/convert_ufcs_to_method.rs"}, {"sha": "6747b950074ff37f299f67ceb52ed8847ba3253e", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c782353a907ea121dcae670a5f0d8e14b8865b19/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c782353a907ea121dcae670a5f0d8e14b8865b19/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=c782353a907ea121dcae670a5f0d8e14b8865b19", "patch": "@@ -126,7 +126,6 @@ mod handlers {\n     mod convert_to_guarded_return;\n     mod convert_two_arm_bool_match_to_matches_macro;\n     mod convert_while_to_loop;\n-    mod convert_ufcs_to_method;\n     mod destructure_tuple_binding;\n     mod expand_glob_import;\n     mod extract_expressions_from_format_string;\n@@ -202,6 +201,7 @@ mod handlers {\n     mod unnecessary_async;\n     mod unwrap_block;\n     mod unwrap_result_return_type;\n+    mod unqualify_method_call;\n     mod wrap_return_type_in_result;\n \n     pub(crate) fn all() -> &'static [Handler] {\n@@ -219,7 +219,6 @@ mod handlers {\n             convert_bool_then::convert_bool_then_to_if,\n             convert_bool_then::convert_if_to_bool_then,\n             convert_comment_block::convert_comment_block,\n-            convert_ufcs_to_method::convert_ufcs_to_method,\n             convert_integer_literal::convert_integer_literal,\n             convert_into_to_from::convert_into_to_from,\n             convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n@@ -308,6 +307,7 @@ mod handlers {\n             unwrap_block::unwrap_block,\n             unwrap_result_return_type::unwrap_result_return_type,\n             unwrap_tuple::unwrap_tuple,\n+            unqualify_method_call::unqualify_method_call,\n             wrap_return_type_in_result::wrap_return_type_in_result,\n             // These are manually sorted for better priorities. By default,\n             // priority is determined by the size of the target range (smaller"}, {"sha": "2644e7dd11cd0819f48eb85a59023d67bf5f331d", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c782353a907ea121dcae670a5f0d8e14b8865b19/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c782353a907ea121dcae670a5f0d8e14b8865b19/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=c782353a907ea121dcae670a5f0d8e14b8865b19", "patch": "@@ -554,25 +554,6 @@ fn main() {\n     )\n }\n \n-#[test]\n-fn doctest_convert_ufcs_to_method() {\n-    check_doc_test(\n-        \"convert_ufcs_to_method\",\n-        r#####\"\n-fn main() {\n-    std::ops::Add::add$0(1, 2);\n-}\n-mod std { pub mod ops { pub trait Add { fn add(self, _: Self) {} } impl Add for i32 {} } }\n-\"#####,\n-        r#####\"\n-fn main() {\n-    1.add(2);\n-}\n-mod std { pub mod ops { pub trait Add { fn add(self, _: Self) {} } impl Add for i32 {} } }\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_convert_while_to_loop() {\n     check_doc_test(\n@@ -2552,6 +2533,25 @@ pub async fn bar() { foo() }\n     )\n }\n \n+#[test]\n+fn doctest_unqualify_method_call() {\n+    check_doc_test(\n+        \"unqualify_method_call\",\n+        r#####\"\n+fn main() {\n+    std::ops::Add::add$0(1, 2);\n+}\n+mod std { pub mod ops { pub trait Add { fn add(self, _: Self) {} } impl Add for i32 {} } }\n+\"#####,\n+        r#####\"\n+fn main() {\n+    1.add(2);\n+}\n+mod std { pub mod ops { pub trait Add { fn add(self, _: Self) {} } impl Add for i32 {} } }\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_unwrap_block() {\n     check_doc_test("}]}