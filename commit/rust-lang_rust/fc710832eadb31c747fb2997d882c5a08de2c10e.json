{"sha": "fc710832eadb31c747fb2997d882c5a08de2c10e", "node_id": "C_kwDOAAsO6NoAKGZjNzEwODMyZWFkYjMxYzc0N2ZiMjk5N2Q4ODJjNWEwOGRlMmMxMGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-25T17:11:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-28T17:35:39Z"}, "message": "partially_normalize_... -> At::normalize", "tree": {"sha": "e27c4869ebce7a4eb419de191f1a745e48f107d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27c4869ebce7a4eb419de191f1a745e48f107d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc710832eadb31c747fb2997d882c5a08de2c10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc710832eadb31c747fb2997d882c5a08de2c10e", "html_url": "https://github.com/rust-lang/rust/commit/fc710832eadb31c747fb2997d882c5a08de2c10e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc710832eadb31c747fb2997d882c5a08de2c10e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f12e772b83c3ff6a099a66920f73fa145e21b0f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f12e772b83c3ff6a099a66920f73fa145e21b0f3", "html_url": "https://github.com/rust-lang/rust/commit/f12e772b83c3ff6a099a66920f73fa145e21b0f3"}], "stats": {"total": 151, "additions": 58, "deletions": 93}, "files": [{"sha": "009787cc94cb8154057db088d24bb4bc99072c5d", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -291,9 +291,9 @@ where\n         // FIXME(lqd): Unify and de-duplicate the following with the actual\n         // `rustc_traits::type_op::type_op_normalize` query to allow the span we need in the\n         // `ObligationCause`. The normalization results are currently different between\n-        // `AtExt::normalize` used in the query and `normalize` called below: the former fails\n-        // to normalize the `nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs` test. Check\n-        // after #85499 lands to see if its fixes have erased this difference.\n+        // `QueryNormalizeExt::query_normalize` used in the query and `normalize` called below:\n+        // the former fails to normalize the `nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs` test.\n+        // Check after #85499 lands to see if its fixes have erased this difference.\n         let (param_env, value) = key.into_parts();\n         let _ = ocx.normalize(cause, param_env, value.value);\n "}, {"sha": "9ec85f0b1426d355f5efaee0cbfaa6d4c855f428", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -30,9 +30,10 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, ObligationCtxt};\n+use rustc_trait_selection::traits::{\n+    self, NormalizeExt, ObligationCause, ObligationCauseCode, ObligationCtxt,\n+};\n \n use std::collections::hash_map::Entry;\n use std::slice;\n@@ -382,11 +383,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.inh.partially_normalize_associated_types_in(\n-            ObligationCause::misc(span, self.body_id),\n-            self.param_env,\n-            value,\n-        )\n+        self.at(&ObligationCause::misc(span, self.body_id), self.param_env).normalize(value)\n     }\n \n     pub(in super::super) fn normalize_op_associated_types_in_as_infer_ok<T>(\n@@ -398,8 +395,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.inh.partially_normalize_associated_types_in(\n-            ObligationCause::new(\n+        self.at(\n+            &ObligationCause::new(\n                 span,\n                 self.body_id,\n                 traits::BinOp {\n@@ -410,8 +407,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 },\n             ),\n             self.param_env,\n-            value,\n         )\n+        .normalize(value)\n     }\n \n     pub fn require_type_meets("}, {"sha": "55179ff4011fb484fcd92e915e450234bd438579", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -12,9 +12,8 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n-    self, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n+    self, NormalizeExt, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n };\n \n use std::cell::RefCell;\n@@ -206,7 +205,7 @@ impl<'tcx> Inherited<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let ok = self.partially_normalize_associated_types_in(cause, param_env, value);\n+        let ok = self.at(&cause, param_env).normalize(value);\n         debug!(?ok);\n         self.register_infer_ok_obligations(ok)\n     }"}, {"sha": "c78a32c29dcdafe1bba9f32eaf3bc0b4e5d25cea", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -31,13 +31,13 @@ use rustc_span::lev_distance::{\n use rustc_span::symbol::sym;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::autoderef::{self, Autoderef};\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;\n use rustc_trait_selection::traits::query::method_autoderef::{\n     CandidateStep, MethodAutoderefStepsResult,\n };\n use rustc_trait_selection::traits::query::CanonicalTyGoal;\n+use rustc_trait_selection::traits::NormalizeExt;\n use rustc_trait_selection::traits::{self, ObligationCause};\n use std::cmp::max;\n use std::iter;\n@@ -716,9 +716,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // maybe shouldn't include `Param`s, but rather fresh variables or be canonicalized,\n             // see issue #89650\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-            let InferOk { value: xform_self_ty, obligations } = self\n-                .fcx\n-                .partially_normalize_associated_types_in(cause, self.param_env, xform_self_ty);\n+            let InferOk { value: xform_self_ty, obligations } =\n+                self.fcx.at(&cause, self.param_env).normalize(xform_self_ty);\n \n             debug!(\n                 \"assemble_inherent_impl_probe after normalization: xform_self_ty = {:?}/{:?}\",\n@@ -1507,11 +1506,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let InferOk {\n                         value: normalized_xform_ret_ty,\n                         obligations: normalization_obligations,\n-                    } = self.fcx.partially_normalize_associated_types_in(\n-                        cause.clone(),\n-                        self.param_env,\n-                        probe.xform_ret_ty,\n-                    );\n+                    } = self.fcx.at(&cause, self.param_env).normalize(probe.xform_ret_ty);\n                     xform_ret_ty = normalized_xform_ret_ty;\n                     debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n \n@@ -1521,11 +1516,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let impl_bounds = impl_bounds.instantiate(self.tcx, substs);\n \n                     let InferOk { value: impl_bounds, obligations: norm_obligations } =\n-                        self.fcx.partially_normalize_associated_types_in(\n-                            cause.clone(),\n-                            self.param_env,\n-                            impl_bounds,\n-                        );\n+                        self.fcx.at(&cause, self.param_env).normalize(impl_bounds);\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics("}, {"sha": "e988c77a064f6a03733c9817ff25a34e10d472b2", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n-use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n+use crate::traits::NormalizeExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n@@ -138,11 +138,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let normalized_ty = self.infcx.partially_normalize_associated_types_in(\n-            cause,\n-            self.param_env,\n-            tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs),\n-        );\n+        let normalized_ty = self\n+            .infcx\n+            .at(&cause, self.param_env)\n+            .normalize(tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs));\n         let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n         let normalized_ty =\n             normalized_ty.into_value_registering_obligations(self.infcx, &mut *fulfillcx);"}, {"sha": "6c70bbf75163a83348a12cd5ca8415abf1a7e7e8", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -3,7 +3,6 @@ use crate::traits::{self, ObligationCtxt};\n \n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n@@ -30,15 +29,6 @@ pub trait InferCtxtExt<'tcx> {\n         span: Span,\n     ) -> bool;\n \n-    fn partially_normalize_associated_types_in<T>(\n-        &self,\n-        cause: ObligationCause<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>;\n-\n     /// Check whether a `ty` implements given trait(trait_def_id).\n     /// The inputs are:\n     ///\n@@ -88,24 +78,6 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         traits::type_known_to_meet_bound_modulo_regions(self, param_env, ty, lang_item, span)\n     }\n \n-    /// Normalizes associated types in `value`, potentially returning\n-    /// new obligations that must further be processed.\n-    #[instrument(level = \"debug\", skip(self, cause, param_env), ret)]\n-    fn partially_normalize_associated_types_in<T>(\n-        &self,\n-        cause: ObligationCause<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n-    ) -> InferOk<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let mut selcx = traits::SelectionContext::new(self);\n-        let traits::Normalized { value, obligations } =\n-            traits::normalize(&mut selcx, param_env, cause, value);\n-        InferOk { value, obligations }\n-    }\n-\n     #[instrument(level = \"debug\", skip(self, params), ret)]\n     fn type_implements_trait(\n         &self,"}, {"sha": "86c877347c9e65f8af81e01a3d73a8476bf286e6", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -3,7 +3,7 @@ use std::fmt::Debug;\n \n use super::TraitEngine;\n use super::{ChalkFulfillmentContext, FulfillmentContext};\n-use crate::infer::InferCtxtExt;\n+use crate::traits::NormalizeExt;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::at::ToTrace;\n@@ -104,11 +104,12 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n \n     pub fn normalize<T: TypeFoldable<'tcx>>(\n         &self,\n+        // FIXME(compiler-errors): Make this borrow\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         value: T,\n     ) -> T {\n-        let infer_ok = self.infcx.partially_normalize_associated_types_in(cause, param_env, value);\n+        let infer_ok = self.infcx.at(&cause, param_env).normalize(value);\n         self.register_infer_ok_obligations(infer_ok)\n     }\n "}, {"sha": "e8468567cba0f9d220a6069a9df0181fcabbeaa9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -9,11 +9,11 @@ use super::{\n };\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::infer::InferCtxtExt as _;\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use crate::traits::query::normalize::AtExt as _;\n+use crate::traits::query::normalize::QueryNormalizeExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n+use crate::traits::NormalizeExt;\n use on_unimplemented::OnUnimplementedNote;\n use on_unimplemented::TypeErrCtxtExt as _;\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n@@ -2535,11 +2535,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 pred.fold_with(&mut ParamToVarFolder { infcx: self, var_map: Default::default() });\n \n             let InferOk { value: cleaned_pred, .. } =\n-                self.infcx.partially_normalize_associated_types_in(\n-                    ObligationCause::dummy(),\n-                    param_env,\n-                    cleaned_pred,\n-                );\n+                self.infcx.at(&ObligationCause::dummy(), param_env).normalize(cleaned_pred);\n \n             let obligation =\n                 Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);"}, {"sha": "1cb083ba3404d92cc32768494127d9b4d28e1c62", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -2,6 +2,7 @@ use super::{DefIdOrName, Obligation, ObligationCause, ObligationCauseCode, Predi\n \n use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n+use crate::traits::NormalizeExt;\n \n use hir::def::CtorOf;\n use hir::HirId;\n@@ -2972,12 +2973,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         self.tcx.mk_substs_trait(trait_pred.self_ty(), []),\n                     )\n                 });\n-                let InferOk { value: projection_ty, .. } = self\n-                    .partially_normalize_associated_types_in(\n-                        obligation.cause.clone(),\n-                        obligation.param_env,\n-                        projection_ty,\n-                    );\n+                let InferOk { value: projection_ty, .. } =\n+                    self.at(&obligation.cause, obligation.param_env).normalize(projection_ty);\n \n                 debug!(\n                     normalized_projection_type = ?self.resolve_vars_if_possible(projection_ty)"}, {"sha": "f038b294bd0fe113c6cdc01659660ce397e94bec", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -56,7 +56,7 @@ pub use self::object_safety::astconv_object_safety_violations;\n pub use self::object_safety::is_vtable_safe_method;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n-pub use self::project::{normalize, normalize_projection_type, normalize_to};\n+pub use self::project::{normalize, normalize_projection_type, normalize_to, NormalizeExt};\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;"}, {"sha": "55db9277353e08ab66ddfbca8cca710a389bac34", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -27,6 +27,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n+use rustc_infer::infer::at::At;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_infer::traits::ImplSourceBuiltinData;\n use rustc_middle::traits::select::OverflowError;\n@@ -48,6 +49,19 @@ pub type ProjectionTyObligation<'tcx> = Obligation<'tcx, ty::ProjectionTy<'tcx>>\n \n pub(super) struct InProgress;\n \n+pub trait NormalizeExt<'tcx> {\n+    fn normalize<T: TypeFoldable<'tcx>>(&self, t: T) -> InferOk<'tcx, T>;\n+}\n+\n+impl<'tcx> NormalizeExt<'tcx> for At<'_, 'tcx> {\n+    fn normalize<T: TypeFoldable<'tcx>>(&self, value: T) -> InferOk<'tcx, T> {\n+        let mut selcx = SelectionContext::new(self.infcx);\n+        let Normalized { value, obligations } =\n+            normalize(&mut selcx, self.param_env, self.cause.clone(), value);\n+        InferOk { value, obligations }\n+    }\n+}\n+\n /// When attempting to resolve `<T as TraitRef>::Name` ...\n #[derive(Debug)]\n pub enum ProjectionError<'tcx> {"}, {"sha": "1aed66308709e33a8e43df92298e951c4d549b9d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -22,13 +22,13 @@ use super::NoSolution;\n \n pub use rustc_middle::traits::query::NormalizationResult;\n \n-pub trait AtExt<'tcx> {\n+pub trait QueryNormalizeExt<'tcx> {\n     fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n         T: TypeFoldable<'tcx>;\n }\n \n-impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n+impl<'cx, 'tcx> QueryNormalizeExt<'tcx> for At<'cx, 'tcx> {\n     /// Normalize `value` in the context of the inference context,\n     /// yielding a resulting type, or an error if `value` cannot be\n     /// normalized. If you don't care about regions, you should prefer"}, {"sha": "51968c2d7a191fccc2bd21e17ff26b6a0ec343f1", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -8,8 +8,8 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{GenericArg, SubstsRef};\n \n+use super::NormalizeExt;\n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext};\n-use crate::infer::InferCtxtExt;\n use rustc_infer::infer::InferOk;\n pub use rustc_infer::traits::{self, util::*};\n \n@@ -202,15 +202,13 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n     let subject = selcx.tcx().bound_impl_subject(impl_def_id);\n     let subject = subject.subst(selcx.tcx(), impl_substs);\n-    let InferOk { value: subject, obligations: normalization_obligations1 } = selcx\n-        .infcx\n-        .partially_normalize_associated_types_in(ObligationCause::dummy(), param_env, subject);\n+    let InferOk { value: subject, obligations: normalization_obligations1 } =\n+        selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(subject);\n \n     let predicates = selcx.tcx().predicates_of(impl_def_id);\n     let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n-    let InferOk { value: predicates, obligations: normalization_obligations2 } = selcx\n-        .infcx\n-        .partially_normalize_associated_types_in(ObligationCause::dummy(), param_env, predicates);\n+    let InferOk { value: predicates, obligations: normalization_obligations2 } =\n+        selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(predicates);\n     let impl_obligations =\n         super::predicates_for_generics(|_, _| ObligationCause::dummy(), param_env, predicates);\n "}, {"sha": "66ab742f15782ae6689314daebb663653635eb41", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -11,7 +11,7 @@ use rustc_trait_selection::traits::query::dropck_outlives::trivial_dropck_outliv\n use rustc_trait_selection::traits::query::dropck_outlives::{\n     DropckConstraint, DropckOutlivesResult,\n };\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n "}, {"sha": "44fd8bfb31f231ab058a1b3a0a5ff120bf2e8564", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -2,7 +2,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable};\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n "}, {"sha": "98141506298d4f76bd1b79a16e06cc65474de9fc", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::{ParamEnvAnd, Predicate, ToPredicate};\n use rustc_middle::ty::{UserSelfTy, UserSubsts};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::query::type_op::ascribe_user_type::AscribeUserType;\n use rustc_trait_selection::traits::query::type_op::eq::Eq;\n use rustc_trait_selection::traits::query::type_op::normalize::Normalize;"}, {"sha": "8bb5af6d9609081f483042dbf367686d33bd3bf8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -1581,7 +1581,7 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>>\n     }\n \n     use crate::rustc_trait_selection::infer::TyCtxtInferExt;\n-    use crate::rustc_trait_selection::traits::query::normalize::AtExt;\n+    use crate::rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n     use rustc_middle::traits::ObligationCause;\n \n     // Try to normalize `<X as Y>::T` to a type"}, {"sha": "82496f120e372d3401bfbab5baee6f2efd81ed8a", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc710832eadb31c747fb2997d882c5a08de2c10e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc710832eadb31c747fb2997d882c5a08de2c10e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=fc710832eadb31c747fb2997d882c5a08de2c10e", "patch": "@@ -22,6 +22,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Size, VariantIdx};\n use rustc_trait_selection::infer::InferCtxtExt;\n+use rustc_trait_selection::traits::NormalizeExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use std::iter;\n "}]}