{"sha": "b651646510997948e9b3f26a452b38ea91d47355", "node_id": "C_kwDOAAsO6NoAKGI2NTE2NDY1MTA5OTc5NDhlOWIzZjI2YTQ1MmIzOGVhOTFkNDczNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T21:27:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T21:27:46Z"}, "message": "Auto merge of #13676 - fasterthanlime:subtree-fix, r=Veykril\n\nMega-sync from `rust-lang/rust`\n\nThis essentially implements `@oli-obk's` suggestion here https://github.com/rust-lang/rust-analyzer/pull/13459#issuecomment-1297285607, with `@eddyb's` help.\n\nThis PR is equivalent to 14 syncs (back and forth) between `rust-lang/rust` and `rust-lang/rust-analyzer`.\n\nWorking from this list (from bottom to top):\n\n```\n(x) a2a1d9954 :arrow_up: rust-analyzer\n(x) 79923c382 :arrow_up: rust-analyzer\n(x) c60b1f641 :arrow_up: rust-analyzer\n(x) 8807fc4cc :arrow_up: rust-analyzer\n(x) a99a48e78 :arrow_up: rust-analyzer\n(x) 4f55ebbd4 :arrow_up: rust-analyzer\n(x) f5fde4df4 :arrow_up: rust-analyzer\n(x) 459bbb422 :arrow_up: rust-analyzer\n(x) 65e1dc4d9 :arrow_up: rust-analyzer\n(x) 3e358a682 :arrow_up: rust-analyzer\n(x) 31519bb39 :arrow_up: rust-analyzer\n(x) 8231fee46 :arrow_up: rust-analyzer\n(x) 22c8c9c40 :arrow_up: rust-analyzer\n(x) 9d2cb42a4 :arrow_up: rust-analyzer\n```\n\n(This listed was assembled by doing a `git subtree push`, which made a branch, and looking at the new commits in that branch, picking only those that were `:arrow_up: rust-analyzer` commits)\n\nWe used the following commands to simulate merges in both directions:\n\n```shell\nTO_MERGE=22c8c9c40 # taken from the list above, bottom to top\ngit merge --no-edit --no-ff $TO_MERGE\ngit merge --no-edit --no-ff $(git -C ../rust log --pretty=format:'%cN | %s | %ad => %P' | rg -m1 -F \"$(git show --no-patch --pretty=format:%ad $TO_MERGE)\" | tee /dev/stderr | rg '.* => \\S+ (\\S+)$' --replace '$1')\n```\n\nWe encountered no merge conflicts that Git wasn't able to solve by doing it this way.\n\nHere's what the commit graph looks like (as shown in the Git Lens VSCode extension):\n\n<img width=\"1345\" alt=\"image\" src=\"https://user-images.githubusercontent.com/7998310/203984523-7c1a690a-8224-416c-8015-ed6e49667066.png\">\n\nThis PR closes #13459\n\n## Does this unbreak `rust->ra` syncs?\n\nYes, here's how we tried:\n\nIn `rust-analyzer`:\n\n  * check out `subtree-fix` (this PR's branch)\n  * make a new branch off of it: `git checkout -b subtree-fix-merge-test`\n  * simulate this PR getting merged with `git merge master`\n\nIn `rust`:\n\n  * pull latest master\n  * make a new branch: `git checkout -b test-change`\n  * mess with rust-analyzer (I added a comment to `src/tools/rust-analyzer/Cargo.toml`)\n  * commit\n  * run `git subtree push -P src/tools/rust-analyzer ra-local final-sync` (this follows the [Clippy sync guide](https://doc.rust-lang.org/nightly/clippy/development/infrastructure/sync.html))\n\nThis created a `final-sync` branch in `rust-analyzer`.\n\nIn `rust-analyzer`:\n\n  * `git merge --no-ff final-sync` (this follows the [Clippy sync guide](https://doc.rust-lang.org/nightly/clippy/development/infrastructure/sync.html))\n\nNow `git log` in `rust-analyzer` shows this:\n\n```\ncommit 460128387e46ddfc2b95921b2d7f6e913a3d2b9f (HEAD -> subtree-fix-merge-test)\nMerge: 0513fc02a 9ce6a734f\nAuthor: Amos Wenger <amoswenger@gmail.com>\nDate:   Fri Nov 25 13:28:24 2022 +0100\n\n    Merge branch 'final-sync' into subtree-fix-merge-test\n\ncommit 0513fc02a08ea9de952983624bd0a00e98044b36\nMerge: 38c98d1ff 6918009fe\nAuthor: Amos Wenger <amoswenger@gmail.com>\nDate:   Fri Nov 25 13:28:02 2022 +0100\n\n    Merge branch 'master' into subtree-fix-merge-test\n\ncommit 9ce6a734f37ef8e53689f1c6f427a9efafe846bd (final-sync)\nAuthor: Amos Wenger <amoswenger@gmail.com>\nDate:   Fri Nov 25 13:26:26 2022 +0100\n\n    Mess with rust-analyzer just for fun\n```\n\nAnd `git diff 0513fc02a08ea9de952983624bd0a00e98044b36` shows this:\n\n```patch\ndiff --git a/Cargo.toml b/Cargo.toml\nindex 286ef1e7d..c9e24cd19 100644\n--- a/Cargo.toml\n+++ b/Cargo.toml\n`@@` -32,3 +32,5 `@@` debug = 0\n # ungrammar = { path = \"../ungrammar\" }\n\n # salsa = { path = \"../salsa\" }\n+\n+# lol, hi\n```\n\n## Does this unbreak `ra->rust` syncs?\n\nYes, here's how we tried.\n\nFrom `rust`:\n\n  * `git checkout -b sync-from-ra`\n  * `git subtree pull -P src/tools/rust-analyzer ra-local subtree-fix-merge-test` (this is adapted from the [Clippy sync guide](https://doc.rust-lang.org/nightly/clippy/development/infrastructure/sync.html#performing-the-sync-from-clippy-to-rust-langrust), you would normally use `ra-upstream master` but we're simulating things here)\n\nA commit editor pops up, there was no merge conflicts.\n\n## How do we prevent this from happening again?\n\nLike `@bjorn3` said in https://github.com/rust-lang/rust-analyzer/pull/13459#issuecomment-1293587848\n\n> Whenever syncing from rust-analyzer -> rust you have to immediately sync the merge commit from rust -> rust-analyzer to prevent merge conflicts in the future.\n\nBut if we get it wrong again, at least now we have a not-so-painful way to fix it.", "tree": {"sha": "a546294501b662ea24cc4d84c80570dc5c7542a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a546294501b662ea24cc4d84c80570dc5c7542a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b651646510997948e9b3f26a452b38ea91d47355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b651646510997948e9b3f26a452b38ea91d47355", "html_url": "https://github.com/rust-lang/rust/commit/b651646510997948e9b3f26a452b38ea91d47355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b651646510997948e9b3f26a452b38ea91d47355/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e668eca632e57eb67f15c267019bcb8581518daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e668eca632e57eb67f15c267019bcb8581518daa", "html_url": "https://github.com/rust-lang/rust/commit/e668eca632e57eb67f15c267019bcb8581518daa"}, {"sha": "38c98d1ffe4d78781cd9282acdd738991718254c", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c98d1ffe4d78781cd9282acdd738991718254c", "html_url": "https://github.com/rust-lang/rust/commit/38c98d1ffe4d78781cd9282acdd738991718254c"}], "stats": {"total": 83, "additions": 15, "deletions": 68}, "files": [{"sha": "764893daa12ad88affa9438271f46ceacc5e3561", "filename": "bench_data/glorious_old_parser", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/bench_data%2Fglorious_old_parser", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/bench_data%2Fglorious_old_parser", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bench_data%2Fglorious_old_parser?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -1988,7 +1988,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         span,\n                         \"declare the type after the parameter binding\",\n-                        String::from(\"<identifier>: <type>\"),\n+                        \"<identifier>: <type>\",\n                         Applicability::HasPlaceholders,\n                     );\n                 } else if require_name && is_trait_item {"}, {"sha": "39581b33a8da2b7a3b5387de6ee50333d7b0e634", "filename": "crates/hir-def/src/builtin_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -379,7 +379,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n-    rustc_attr!(rustc_allocator_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     gated!(\n         alloc_error_handler, Normal, template!(Word), WarnFollowing,\n         experimental!(alloc_error_handler)"}, {"sha": "09732d37106c03631b813fa15a6695b371ecc0a4", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -57,7 +57,7 @@ mod path_resolution;\n #[cfg(test)]\n mod tests;\n \n-use std::{ops::Deref, sync::Arc};\n+use std::{cmp::Ord, ops::Deref, sync::Arc};\n \n use base_db::{CrateId, Edition, FileId};\n use hir_expand::{name::Name, InFile, MacroCallId, MacroDefId};"}, {"sha": "78911d8dc0772be48ebec328c43bf0e082663c04", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -1,7 +1,7 @@\n //! In certain situations, rust automatically inserts derefs as necessary: for\n //! example, field accesses `foo.bar` still work when `foo` is actually a\n //! reference to a type with the field `bar`. This is an approximation of the\n-//! logic in rustc (which lives in librustc_typeck/check/autoderef.rs).\n+//! logic in rustc (which lives in rustc_hir_analysis/check/autoderef.rs).\n \n use std::sync::Arc;\n "}, {"sha": "0b3c23f5747adc303cf7b66edf8f5ba3a0c636b0", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -2,7 +2,7 @@\n //! the type of each expression and pattern.\n //!\n //! For type inference, compare the implementations in rustc (the various\n-//! check_* methods in librustc_typeck/check/mod.rs are a good entry point) and\n+//! check_* methods in rustc_hir_analysis/check/mod.rs are a good entry point) and\n //! IntelliJ-Rust (org.rust.lang.core.types.infer). Our entry point for\n //! inference here is the `infer` function, which infers the types of all\n //! expressions in a given function."}, {"sha": "8df25c83c6eb7d5b35a910881403186861be2a11", "filename": "crates/hir-ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -3,7 +3,7 @@\n //! like going from `&Vec<T>` to `&[T]`.\n //!\n //! See <https://doc.rust-lang.org/nomicon/coercions.html> and\n-//! `librustc_typeck/check/coercion.rs`.\n+//! `rustc_hir_analysis/check/coercion.rs`.\n \n use std::{iter, sync::Arc};\n "}, {"sha": "8bcfa2728f071844a8e57c0ec81ca3f6f2dcbf46", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -1,7 +1,7 @@\n //! This module is concerned with finding methods that a given type provides.\n //! For details about how this works in rustc, see the method lookup page in the\n //! [rustc guide](https://rust-lang.github.io/rustc-guide/method-lookup.html)\n-//! and the corresponding code mostly in librustc_typeck/check/method/probe.rs.\n+//! and the corresponding code mostly in rustc_hir_analysis/check/method/probe.rs.\n use std::{iter, ops::ControlFlow, sync::Arc};\n \n use arrayvec::ArrayVec;"}, {"sha": "371d642c15d1d43b468213be0535284e9dc96d05", "filename": "crates/ide-db/src/imports/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fmerge_imports.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -225,7 +225,7 @@ fn path_cmp_short(a: &ast::Path, b: &ast::Path) -> Ordering {\n }\n \n /// Compares two paths, if one ends earlier than the other the has_tl parameters decide which is\n-/// greater as a a path that has a tree list should be greater, while one that just ends without\n+/// greater as a path that has a tree list should be greater, while one that just ends without\n /// a tree list should be considered less.\n pub(super) fn use_tree_path_cmp(\n     a: &ast::Path,"}, {"sha": "e4e43e97dde82eee29821dfb138cc75d14f7f297", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -37,23 +37,6 @@ pub struct SourceFile {\n type Level = super::proc_macro::Level;\n type LineColumn = super::proc_macro::LineColumn;\n \n-/// A structure representing a diagnostic message and associated children\n-/// messages.\n-#[derive(Clone, Debug)]\n-pub struct Diagnostic {\n-    level: Level,\n-    message: String,\n-    spans: Vec<Span>,\n-    children: Vec<Diagnostic>,\n-}\n-\n-impl Diagnostic {\n-    /// Creates a new diagnostic with the given `level` and `message`.\n-    pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n-        Diagnostic { level, message: message.into(), spans: vec![], children: vec![] }\n-    }\n-}\n-\n pub struct FreeFunctions;\n \n #[derive(Default)]\n@@ -65,8 +48,6 @@ impl server::Types for RustAnalyzer {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type SourceFile = SourceFile;\n-    type MultiSpan = Vec<Span>;\n-    type Diagnostic = Diagnostic;\n     type Span = Span;\n     type Symbol = Symbol;\n }\n@@ -90,6 +71,10 @@ impl server::FreeFunctions for RustAnalyzer {\n             span: tt::TokenId::unspecified(),\n         })\n     }\n+\n+    fn emit_diagnostic(&mut self, _: bridge::Diagnostic<Self::Span>) {\n+        // FIXME handle diagnostic\n+    }\n }\n \n impl server::TokenStream for RustAnalyzer {\n@@ -282,30 +267,6 @@ impl server::SourceFile for RustAnalyzer {\n     }\n }\n \n-impl server::Diagnostic for RustAnalyzer {\n-    fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n-        let mut diag = Diagnostic::new(level, msg);\n-        diag.spans = spans;\n-        diag\n-    }\n-\n-    fn sub(\n-        &mut self,\n-        _diag: &mut Self::Diagnostic,\n-        _level: Level,\n-        _msg: &str,\n-        _spans: Self::MultiSpan,\n-    ) {\n-        // FIXME handle diagnostic\n-        //\n-    }\n-\n-    fn emit(&mut self, _diag: Self::Diagnostic) {\n-        // FIXME handle diagnostic\n-        // diag.emit()\n-    }\n-}\n-\n impl server::Span for RustAnalyzer {\n     fn debug(&mut self, span: Self::Span) -> String {\n         format!(\"{:?}\", span.0)\n@@ -372,18 +333,6 @@ impl server::Span for RustAnalyzer {\n     }\n }\n \n-impl server::MultiSpan for RustAnalyzer {\n-    fn new(&mut self) -> Self::MultiSpan {\n-        // FIXME handle span\n-        vec![]\n-    }\n-\n-    fn push(&mut self, other: &mut Self::MultiSpan, span: Self::Span) {\n-        //TODP\n-        other.push(span)\n-    }\n-}\n-\n impl server::Symbol for RustAnalyzer {\n     fn normalize_and_validate_ident(&mut self, string: &str) -> Result<Self::Symbol, ()> {\n         // FIXME: nfc-normalize and validate idents"}, {"sha": "ac10721d95514049baa41f351b7a2a4c0a989811", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -132,7 +132,7 @@ where\n \n             let ext = span.extensions();\n \n-            // `FormattedFields` is a a formatted representation of the span's\n+            // `FormattedFields` is a formatted representation of the span's\n             // fields, which is stored in its extensions by the `fmt` layer's\n             // `new_span` method. The fields will have been formatted\n             // by the same field formatter that's provided to the event"}, {"sha": "1eea2346451dd42038a9edcb5bdfe3cd368bb20c", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651646510997948e9b3f26a452b38ea91d47355/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=b651646510997948e9b3f26a452b38ea91d47355", "patch": "@@ -5,9 +5,7 @@\n mod block;\n \n use rowan::Direction;\n-use rustc_lexer::unescape::{\n-    self, unescape_byte, unescape_byte_literal, unescape_char, unescape_literal, Mode,\n-};\n+use rustc_lexer::unescape::{self, unescape_byte, unescape_char, unescape_literal, Mode};\n \n use crate::{\n     algo,\n@@ -143,7 +141,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n         ast::LiteralKind::ByteString(s) => {\n             if !s.is_raw() {\n                 if let Some(without_quotes) = unquote(text, 2, '\"') {\n-                    unescape_byte_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n+                    unescape_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n                         if let Err(err) = char {\n                             push_err(2, (range.start, err));\n                         }"}]}