{"sha": "e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5N2NkNzA5Y2Q5MWNjZmFmYmQ0NWJhYjhiMmJmMDFmM2RkZjZhMDQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T16:43:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T17:28:31Z"}, "message": "Implement Crate::transitive_reverse_dependencies", "tree": {"sha": "bb6e1bcfae7fd44a7a63be31a17dc6e68799e7d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb6e1bcfae7fd44a7a63be31a17dc6e68799e7d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "html_url": "https://github.com/rust-lang/rust/commit/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eec64ec01b0553aca855df8146965ed6c6746e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eec64ec01b0553aca855df8146965ed6c6746e7d", "html_url": "https://github.com/rust-lang/rust/commit/eec64ec01b0553aca855df8146965ed6c6746e7d"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "06f1c14f54cb4020ec3220d20dc7e7e7b85efa8d", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "patch": "@@ -274,6 +274,34 @@ impl CrateGraph {\n         deps.into_iter()\n     }\n \n+    /// Returns an iterator over all transitive reverse dependencies of the given crate.\n+    pub fn transitive_reverse_dependencies(\n+        &self,\n+        of: CrateId,\n+    ) -> impl Iterator<Item = CrateId> + '_ {\n+        let mut worklist = vec![of];\n+        let mut rev_deps = FxHashSet::default();\n+        let mut inverted_graph = FxHashMap::default();\n+        self.arena.iter().for_each(|(&krate, data)| {\n+            data.dependencies.iter().for_each(|dep| {\n+                inverted_graph.entry(dep.crate_id).or_insert_with(Vec::default).push(krate)\n+            })\n+        });\n+\n+        while let Some(krate) = worklist.pop() {\n+            if !rev_deps.insert(krate) {\n+                continue;\n+            }\n+\n+            if let Some(rev_deps) = inverted_graph.get(&krate) {\n+                worklist.extend(rev_deps);\n+            }\n+        }\n+\n+        rev_deps.remove(&of);\n+        rev_deps.into_iter()\n+    }\n+\n     /// Returns all crates in the graph, sorted in topological order (ie. dependencies of a crate\n     /// come before the crate itself).\n     pub fn crates_in_topological_order(&self) -> Vec<CrateId> {"}, {"sha": "079a5f7b87fa851360472ff4a4dd6df936dbb25b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "patch": "@@ -58,6 +58,7 @@ use hir_ty::{\n     InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs, Ty,\n     TyDefId, TyKind, TyVariableKind,\n };\n+use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n use syntax::{\n@@ -139,7 +140,6 @@ impl Crate {\n             .collect()\n     }\n \n-    // FIXME: add `transitive_reverse_dependencies`.\n     pub fn reverse_dependencies(self, db: &dyn HirDatabase) -> Vec<Crate> {\n         let crate_graph = db.crate_graph();\n         crate_graph\n@@ -151,6 +151,14 @@ impl Crate {\n             .collect()\n     }\n \n+    pub fn transitive_reverse_dependencies(self, db: &dyn HirDatabase) -> Vec<Crate> {\n+        db.crate_graph()\n+            .transitive_reverse_dependencies(self.id)\n+            .into_iter()\n+            .map(|id| Crate { id })\n+            .collect()\n+    }\n+\n     pub fn root_module(self, db: &dyn HirDatabase) -> Module {\n         let def_map = db.crate_def_map(self.id);\n         Module { id: def_map.module_id(def_map.root()) }\n@@ -1497,11 +1505,17 @@ impl Impl {\n         };\n \n         let mut all = Vec::new();\n-        def_crates.into_iter().for_each(|id| {\n+        def_crates.iter().for_each(|&id| {\n             all.extend(db.inherent_impls_in_crate(id).all_impls().map(Self::from).filter(filter))\n         });\n         let fp = TyFingerprint::for_impl(&ty.value);\n-        for id in db.crate_graph().iter() {\n+        for id in def_crates\n+            .iter()\n+            .flat_map(|&id| Crate { id }.transitive_reverse_dependencies(db))\n+            .map(|Crate { id }| id)\n+            .chain(def_crates.iter().copied())\n+            .unique()\n+        {\n             match fp {\n                 Some(fp) => all.extend(\n                     db.trait_impls_in_crate(id).for_self_ty(fp).map(Self::from).filter(filter),\n@@ -1516,7 +1530,8 @@ impl Impl {\n     pub fn all_for_trait(db: &dyn HirDatabase, trait_: Trait) -> Vec<Impl> {\n         let krate = trait_.module(db).krate();\n         let mut all = Vec::new();\n-        for Crate { id } in krate.reverse_dependencies(db).into_iter().chain(Some(krate)) {\n+        for Crate { id } in krate.transitive_reverse_dependencies(db).into_iter().chain(Some(krate))\n+        {\n             let impls = db.trait_impls_in_crate(id);\n             all.extend(impls.for_trait(trait_.id).map(Self::from))\n         }"}, {"sha": "fc85cd0ce92115b7e3408da36b0efa65c3563156", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "patch": "@@ -1270,4 +1270,27 @@ fn foo(_: bool) -> bo$0ol { true }\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_transitive() {\n+        check(\n+            r#\"\n+//- /level3/level3.rs crate:level3\n+pub struct Fo$0o;\n+//- /level2/level2.rs crate:level2 deps:level3\n+pub use level3::Foo;\n+//- /level1/level1.rs crate:level1 deps:level2\n+pub use level2::Foo;\n+//- /level0/level0.rs crate:level0 deps:level1\n+pub use level1::Foo;\n+\"#,\n+            expect![[r#\"\n+                Foo Struct FileId(0) 0..15 11..14\n+\n+                FileId(1) 16..19\n+                FileId(2) 16..19\n+                FileId(3) 16..19\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "f56221a6c69622427d775896436ab400c9fa2d57", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=e97cd709cd91ccfafbd45bab8b2bf01f3ddf6a04", "patch": "@@ -260,7 +260,7 @@ impl Definition {\n             let mut res = source_root.iter().map(|id| (id, None)).collect::<FxHashMap<_, _>>();\n \n             let krate = module.krate();\n-            for rev_dep in krate.reverse_dependencies(db) {\n+            for rev_dep in krate.transitive_reverse_dependencies(db) {\n                 let root_file = rev_dep.root_file(db);\n                 let source_root_id = db.file_source_root(root_file);\n                 let source_root = db.source_root(source_root_id);"}]}