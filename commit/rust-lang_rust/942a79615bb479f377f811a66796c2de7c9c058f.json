{"sha": "942a79615bb479f377f811a66796c2de7c9c058f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MmE3OTYxNWJiNDc5ZjM3N2Y4MTFhNjY3OTZjMmRlN2M5YzA1OGY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-10T13:24:31Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-15T08:17:21Z"}, "message": "rustc/session: whitespace & formatting improvements", "tree": {"sha": "e1662ba5b2dda87a8e92cb04fbf1cf96b90b973d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1662ba5b2dda87a8e92cb04fbf1cf96b90b973d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942a79615bb479f377f811a66796c2de7c9c058f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942a79615bb479f377f811a66796c2de7c9c058f", "html_url": "https://github.com/rust-lang/rust/commit/942a79615bb479f377f811a66796c2de7c9c058f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942a79615bb479f377f811a66796c2de7c9c058f/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40e2ac2b61e7302de37f54574df987053c15cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40e2ac2b61e7302de37f54574df987053c15cb2", "html_url": "https://github.com/rust-lang/rust/commit/c40e2ac2b61e7302de37f54574df987053c15cb2"}], "stats": {"total": 164, "additions": 79, "deletions": 85}, "files": [{"sha": "8b921a4b46c20f4b7aa9fc71564a81958cbfb767", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 76, "deletions": 82, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/942a79615bb479f377f811a66796c2de7c9c058f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942a79615bb479f377f811a66796c2de7c9c058f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=942a79615bb479f377f811a66796c2de7c9c058f", "patch": "@@ -736,19 +736,19 @@ macro_rules! options {\n                     match (value, opt_type_desc) {\n                         (Some(..), None) => {\n                             early_error(error_format, &format!(\"{} option `{}` takes no \\\n-                                                              value\", $outputname, key))\n+                                                                value\", $outputname, key))\n                         }\n                         (None, Some(type_desc)) => {\n                             early_error(error_format, &format!(\"{0} option `{1}` requires \\\n-                                                              {2} ({3} {1}=<value>)\",\n-                                                             $outputname, key,\n-                                                             type_desc, $prefix))\n+                                                                {2} ({3} {1}=<value>)\",\n+                                                               $outputname, key,\n+                                                               type_desc, $prefix))\n                         }\n                         (Some(value), Some(type_desc)) => {\n                             early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n-                                                              option `{}` - {} was expected\",\n-                                                             value, $outputname,\n-                                                             key, type_desc))\n+                                                                option `{}` - {} was expected\",\n+                                                               value, $outputname,\n+                                                               key, type_desc))\n                         }\n                         (None, None) => bug!()\n                     }\n@@ -758,14 +758,13 @@ macro_rules! options {\n             }\n             if !found {\n                 early_error(error_format, &format!(\"unknown {} option: `{}`\",\n-                                                 $outputname, key));\n+                                                   $outputname, key));\n             }\n         }\n         return op;\n     }\n \n     impl<'a> dep_tracking::DepTrackingHash for $struct_name {\n-\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n             let mut sub_hashes = BTreeMap::new();\n             $({\n@@ -782,7 +781,7 @@ macro_rules! options {\n \n     pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n     pub const $stat: &'static [(&'static str, $setter_name,\n-                                     Option<&'static str>, &'static str)] =\n+                                Option<&'static str>, &'static str)] =\n         &[ $( (stringify!($opt), $mod_set::$opt, $mod_desc::$parse, $desc) ),* ];\n \n     #[allow(non_upper_case_globals, dead_code)]\n@@ -1062,8 +1061,8 @@ macro_rules! options {\n ) }\n \n options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n-         build_codegen_options, \"C\", \"codegen\",\n-         CG_OPTIONS, cg_type_desc, cgsetters,\n+          build_codegen_options, \"C\", \"codegen\",\n+          CG_OPTIONS, cg_type_desc, cgsetters,\n     ar: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n@@ -1107,13 +1106,13 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n+        \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the code model to use (rustc --print code-models for details)\"),\n+        \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-         \"metadata to mangle symbol names with\"),\n+        \"metadata to mangle symbol names with\"),\n     extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n-         \"extra data to put in each output filename\"),\n+        \"extra data to put in each output filename\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n@@ -1134,14 +1133,14 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n         [TRACKED], \"panic strategy to compile crate with\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"enable incremental compilation\"),\n+        \"enable incremental compilation\"),\n     default_linker_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n-          \"allow the linker to link its default libraries\"),\n+        \"allow the linker to link its default libraries\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n-         build_debugging_options, \"Z\", \"debugging\",\n-         DB_OPTIONS, db_type_desc, dbsetters,\n+          build_debugging_options, \"Z\", \"debugging\",\n+          DB_OPTIONS, db_type_desc, dbsetters,\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n@@ -1211,26 +1210,26 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     flowgraph_print_all: bool = (false, parse_bool, [UNTRACKED],\n         \"include all dataflow analysis data in -Z unpretty flowgraph output\"),\n     print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n-         \"prints region inference graph. \\\n-          Use with RUST_REGION_GRAPH=help for more info\"),\n+        \"prints region inference graph. \\\n+         Use with RUST_REGION_GRAPH=help for more info\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n-          \"parse only; do not compile, assemble, or link\"),\n+        \"parse only; do not compile, assemble, or link\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n-          \"run all passes except codegen; no output\"),\n+        \"run all passes except codegen; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n-          \"treat all errors that occur as bugs\"),\n+        \"treat all errors that occur as bugs\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n-          \"immediately print bugs registered with `delay_span_bug`\"),\n+        \"immediately print bugs registered with `delay_span_bug`\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-          \"show macro backtraces even for non-local macros\"),\n+        \"show macro backtraces even for non-local macros\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n-          \"show extended diagnostic help\"),\n+        \"show extended diagnostic help\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n-          \"attempt to recover from parse errors (experimental)\"),\n+        \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"enable incremental compilation (experimental)\"),\n+        \"enable incremental compilation (experimental)\"),\n     incremental_queries: bool = (true, parse_bool, [UNTRACKED],\n-          \"enable incremental compilation support for queries (experimental)\"),\n+        \"enable incremental compilation support for queries (experimental)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n         \"print high-level information about incremental reuse (or the lack thereof)\"),\n     incremental_dump_hash: bool = (false, parse_bool, [UNTRACKED],\n@@ -1240,64 +1239,64 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n         \"ignore spans during ICH computation -- used for testing\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-          \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n+        \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-          \"enable queries of the dependency graph for regression testing\"),\n+        \"enable queries of the dependency graph for regression testing\"),\n     profile_queries: bool = (false, parse_bool, [UNTRACKED],\n-          \"trace and profile the queries of the incremental compilation framework\"),\n+        \"trace and profile the queries of the incremental compilation framework\"),\n     profile_queries_and_keys: bool = (false, parse_bool, [UNTRACKED],\n-          \"trace and profile the queries and keys of the incremental compilation framework\"),\n+        \"trace and profile the queries and keys of the incremental compilation framework\"),\n     no_analysis: bool = (false, parse_bool, [UNTRACKED],\n-          \"parse and expand the source, but run no analysis\"),\n+        \"parse and expand the source, but run no analysis\"),\n     extra_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"load extra plugins\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n-          \"adds unstable command line options to rustc interface\"),\n+        \"adds unstable command line options to rustc interface\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"force overflow checks on or off\"),\n+        \"force overflow checks on or off\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n-          \"for every macro invocation, print its name and arguments\"),\n+        \"for every macro invocation, print its name and arguments\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n-          \"emit line numbers debug info inside macros\"),\n+        \"emit line numbers debug info inside macros\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-          \"don't clear the hygiene data after analysis\"),\n+        \"don't clear the hygiene data after analysis\"),\n     keep_ast: bool = (false, parse_bool, [UNTRACKED],\n-          \"keep the AST after lowering it to HIR\"),\n+        \"keep the AST after lowering it to HIR\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n-          \"show spans for compiler debugging (expr|pat|ty)\"),\n+        \"show spans for compiler debugging (expr|pat|ty)\"),\n     print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n-          \"print layout information for each type encountered\"),\n+        \"print layout information for each type encountered\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"print the result of the monomorphization collection pass\"),\n+        \"print the result of the monomorphization collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n-          \"set the MIR optimization level (0-3, default: 1)\"),\n+        \"set the MIR optimization level (0-3, default: 1)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n+        \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n     arg_align_attributes: bool = (false, parse_bool, [TRACKED],\n-          \"emit align metadata for reference arguments\"),\n+        \"emit align metadata for reference arguments\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-          \"dump MIR state at various points in transforms\"),\n+        \"dump MIR state at various points in transforms\"),\n     dump_mir_dir: String = (String::from(\"mir_dump\"), parse_string, [UNTRACKED],\n-          \"the directory the MIR is dumped into\"),\n+        \"the directory the MIR is dumped into\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n-          \"in addition to `.mir` files, create graphviz `.dot` files\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files\"),\n     dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n-          \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n+        \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n     mir_emit_validate: usize = (0, parse_uint, [TRACKED],\n-          \"emit Validate MIR statements, interpreted e.g. by miri (0: do not emit; 1: if function \\\n-           contains unsafe block, only validate arguments; 2: always emit full validation)\"),\n+        \"emit Validate MIR statements, interpreted e.g. by miri (0: do not emit; 1: if function \\\n+         contains unsafe block, only validate arguments; 2: always emit full validation)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some performance-related statistics\"),\n+        \"print some performance-related statistics\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some statistics about AST and HIR\"),\n+        \"print some statistics about AST and HIR\"),\n     mir_stats: bool = (false, parse_bool, [UNTRACKED],\n-          \"print some statistics about MIR\"),\n+        \"print some statistics about MIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n-          \"encode MIR of all functions into the crate metadata\"),\n+        \"encode MIR of all functions into the crate metadata\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n-          \"pass `-install_name @rpath/...` to the macOS linker\"),\n+        \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n-                                   \"Use a sanitizer\"),\n+                                    \"Use a sanitizer\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"Linker flavor\"),\n     fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n@@ -1313,13 +1312,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n     pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"Generate PGO profile data, to a given file, or to the default \\\n-         location if it's empty.\"),\n+        \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n     pgo_use: String = (String::new(), parse_string, [TRACKED],\n         \"Use PGO profile data from the given profile file.\"),\n-    disable_instrumentation_preinliner: bool =\n-        (false, parse_bool, [TRACKED], \"Disable the instrumentation pre-inliner, \\\n-        useful for profiling / PGO.\"),\n+    disable_instrumentation_preinliner: bool = (false, parse_bool, [TRACKED],\n+        \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll_subminimal_causes: bool = (false, parse_bool, [UNTRACKED],\n@@ -1341,7 +1338,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n     tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the TLS model to use (rustc --print tls-models for details)\"),\n+        \"choose the TLS model to use (rustc --print tls-models for details)\"),\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),\n@@ -1362,31 +1359,31 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"run `dsymutil` and delete intermediate object files\"),\n+        \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n-          \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n+        \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n-          \"embed LLVM bitcode in object files\"),\n+        \"embed LLVM bitcode in object files\"),\n     strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"tell the linker to strip debuginfo when building without debuginfo enabled.\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"make the current crate share its generic instantiations\"),\n+        \"make the current crate share its generic instantiations\"),\n     chalk: bool = (false, parse_bool, [TRACKED],\n-          \"enable the experimental Chalk-based trait solving engine\"),\n+        \"enable the experimental Chalk-based trait solving engine\"),\n     cross_lang_lto: CrossLangLto = (CrossLangLto::Disabled, parse_cross_lang_lto, [TRACKED],\n-          \"generate build artifacts that are compatible with linker-based LTO.\"),\n+        \"generate build artifacts that are compatible with linker-based LTO.\"),\n     no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n-          \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n+        \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n     no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n         \"disables the 'leak check' for subtyping; unsound, but useful for tests\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     self_profile: bool = (false, parse_bool, [UNTRACKED],\n-          \"run the self profiler\"),\n+        \"run the self profiler\"),\n     profile_json: bool = (false, parse_bool, [UNTRACKED],\n-          \"output a json file with profiler results\"),\n+        \"output a json file with profiler results\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n-          \"emits a section containing stack size metadata\"),\n+        \"emits a section containing stack size metadata\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"whether to use the PLT when calling into shared libraries;\n           only has effect for PIC code on systems with ELF binaries\n@@ -1502,7 +1499,6 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum OptionStability {\n     Stable,\n-\n     Unstable,\n }\n \n@@ -1851,7 +1847,7 @@ pub fn build_session_options_and_crate_config(\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"argument for --edition must be one of: \\\n-                    {}. (instead was `{}`)\",\n+                     {}. (instead was `{}`)\",\n                     EDITION_NAME_LIST,\n                     arg\n                 ),\n@@ -1865,7 +1861,7 @@ pub fn build_session_options_and_crate_config(\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"Edition {} is unstable and only \\\n-                    available for nightly builds of rustc.\",\n+                     available for nightly builds of rustc.\",\n                     edition,\n                 )\n         )\n@@ -2308,9 +2304,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"cdylib\" => CrateType::Cdylib,\n                 \"bin\" => CrateType::Executable,\n                 \"proc-macro\" => CrateType::ProcMacro,\n-                _ => {\n-                    return Err(format!(\"unknown crate type: `{}`\", part));\n-                }\n+                _ => return Err(format!(\"unknown crate type: `{}`\", part))\n             };\n             if !crate_types.contains(&new_part) {\n                 crate_types.push(new_part)"}, {"sha": "e55b82c63c3e5dabe2a110e3f96116dce2d09565", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942a79615bb479f377f811a66796c2de7c9c058f/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942a79615bb479f377f811a66796c2de7c9c058f/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=942a79615bb479f377f811a66796c2de7c9c058f", "patch": "@@ -175,7 +175,7 @@ fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n     // to lib64/lib32. This would be more foolproof by basing the sysroot off\n     // of the directory where librustc is located, rather than where the rustc\n     // binary is.\n-    //If --libdir is set during configuration to the value other than\n+    // If --libdir is set during configuration to the value other than\n     // \"lib\" (i.e. non-default), this value is used (see issue #16552).\n \n     match option_env!(\"CFG_LIBDIR_RELATIVE\") {"}, {"sha": "43c4bea9def362c208bda6246d4a1a6e02b48e7e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/942a79615bb479f377f811a66796c2de7c9c058f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942a79615bb479f377f811a66796c2de7c9c058f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=942a79615bb479f377f811a66796c2de7c9c058f", "patch": "@@ -703,8 +703,8 @@ impl Session {\n         match self.opts.maybe_sysroot {\n             Some(ref sysroot) => sysroot,\n             None => self.default_sysroot\n-                .as_ref()\n-                .expect(\"missing sysroot and default_sysroot in Session\"),\n+                        .as_ref()\n+                        .expect(\"missing sysroot and default_sysroot in Session\"),\n         }\n     }\n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {"}]}