{"sha": "e99e05d13592d2e9868fa69f98dc01f9766f05ed", "node_id": "C_kwDOAAsO6NoAKGU5OWUwNWQxMzU5MmQyZTk4NjhmYTY5Zjk4ZGMwMWY5NzY2ZjA1ZWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-03T22:15:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T22:15:22Z"}, "message": "Rollup merge of #107551 - fee1-dead-contrib:rm_const_fnmut_helper, r=oli-obk\n\n Replace `ConstFnMutClosure` with const closures\n\nAlso fixes a parser bug. cc `@oli-obk` for compiler changes", "tree": {"sha": "faa84e1df772ee6c48b73321bf6ba08931a456ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa84e1df772ee6c48b73321bf6ba08931a456ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e99e05d13592d2e9868fa69f98dc01f9766f05ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3Yd6CRBK7hj4Ov3rIwAAR2gIAIRKwiW73RANvErFT7YRMohh\n0PR/PCP9AsomuSY2ZrwMlp/oATP+to+s4VRmSxvWUcQb2khsxgbUbik+NZuEyT3D\ncdIgMWSvyPwMYjA2auzdpWy4GRCowHvSFXQi5c1YInk7AFg/fWCnJc/MzOPsp4/n\nwbfRxAMTXC/jqq9cxUqtsdV3M76Rw3chjmWg8wltWDfNYzNBujun68b8d1IZw62z\nxvB3JYyTkW77KtfnbNWtTxJKEGf9Y6Eni0JYlI+UEqDQ0IDzcQkWnR747+wWVGWq\nIFaqkcnFQO2it4CAlKeVRJlGOBqsliVG8M3ysHUiaeRjnJYE+dXzqtt/Rha1O9k=\n=Yybm\n-----END PGP SIGNATURE-----\n", "payload": "tree faa84e1df772ee6c48b73321bf6ba08931a456ef\nparent beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7\nparent b886a4de157873c6a3e536a517fd6b097a4ab11b\nauthor Michael Goulet <michael@errs.io> 1675462522 -0800\ncommitter GitHub <noreply@github.com> 1675462522 -0800\n\nRollup merge of #107551 - fee1-dead-contrib:rm_const_fnmut_helper, r=oli-obk\n\n Replace `ConstFnMutClosure` with const closures\n\nAlso fixes a parser bug. cc `@oli-obk` for compiler changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e99e05d13592d2e9868fa69f98dc01f9766f05ed", "html_url": "https://github.com/rust-lang/rust/commit/e99e05d13592d2e9868fa69f98dc01f9766f05ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e99e05d13592d2e9868fa69f98dc01f9766f05ed/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "html_url": "https://github.com/rust-lang/rust/commit/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7"}, {"sha": "b886a4de157873c6a3e536a517fd6b097a4ab11b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b886a4de157873c6a3e536a517fd6b097a4ab11b", "html_url": "https://github.com/rust-lang/rust/commit/b886a4de157873c6a3e536a517fd6b097a4ab11b"}], "stats": {"total": 180, "additions": 51, "deletions": 129}, "files": [{"sha": "28347b137f37c3eb92bbbe344c7a66783b8361ef", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -2109,7 +2109,7 @@ impl<'a> Parser<'a> {\n             ClosureBinder::NotPresent\n         };\n \n-        let constness = self.parse_constness(Case::Sensitive);\n+        let constness = self.parse_closure_constness(Case::Sensitive);\n \n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };"}, {"sha": "0cb88f3c3a91697726fd3cde44b7774a7cea8c3d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -732,9 +732,10 @@ impl<'a> Parser<'a> {\n     fn check_const_closure(&self) -> bool {\n         self.is_keyword_ahead(0, &[kw::Const])\n             && self.look_ahead(1, |t| match &t.kind {\n-                token::Ident(kw::Move | kw::Static | kw::Async, _)\n-                | token::OrOr\n-                | token::BinOp(token::Or) => true,\n+                // async closures do not work with const closures, so we do not parse that here.\n+                token::Ident(kw::Move | kw::Static, _) | token::OrOr | token::BinOp(token::Or) => {\n+                    true\n+                }\n                 _ => false,\n             })\n     }\n@@ -1198,8 +1199,18 @@ impl<'a> Parser<'a> {\n \n     /// Parses constness: `const` or nothing.\n     fn parse_constness(&mut self, case: Case) -> Const {\n-        // Avoid const blocks to be parsed as const items\n-        if self.look_ahead(1, |t| t != &token::OpenDelim(Delimiter::Brace))\n+        self.parse_constness_(case, false)\n+    }\n+\n+    /// Parses constness for closures\n+    fn parse_closure_constness(&mut self, case: Case) -> Const {\n+        self.parse_constness_(case, true)\n+    }\n+\n+    fn parse_constness_(&mut self, case: Case, is_closure: bool) -> Const {\n+        // Avoid const blocks and const closures to be parsed as const items\n+        if (self.check_const_closure() == is_closure)\n+            && self.look_ahead(1, |t| t != &token::OpenDelim(Delimiter::Brace))\n             && self.eat_keyword_case(kw::Const, case)\n         {\n             Const::Yes(self.prev_token.uninterpolated_span())"}, {"sha": "f290e5baf9dd3c21ccdd9c4f979daea388d8e459", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -22,7 +22,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::const_closure::ConstFnMutClosure;\n use crate::marker::Destruct;\n \n use self::Ordering::*;\n@@ -1291,17 +1290,7 @@ where\n     F: ~const Destruct,\n     K: ~const Destruct,\n {\n-    const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n-        f: &mut F,\n-        (v1, v2): (&T, &T),\n-    ) -> Ordering\n-    where\n-        T: ~const Destruct,\n-        K: ~const Destruct,\n-    {\n-        f(v1).cmp(&f(v2))\n-    }\n-    max_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n+    max_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n }\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types"}, {"sha": "97900a4862f5653fc49c537fdc95c3690d71d9a0", "filename": "library/core/src/const_closure.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=beb5cc9cf79b782094bb75fe41df3b7bdbb05bd7", "patch": "@@ -1,78 +0,0 @@\n-use crate::marker::Destruct;\n-use crate::marker::Tuple;\n-\n-/// Struct representing a closure with mutably borrowed data.\n-///\n-/// Example:\n-/// ```no_build\n-/// #![feature(const_mut_refs)]\n-/// use crate::const_closure::ConstFnMutClosure;\n-/// const fn imp(state: &mut i32, (arg,): (i32,)) -> i32 {\n-///   *state += arg;\n-///   *state\n-/// }\n-/// let mut i = 5;\n-/// let mut cl = ConstFnMutClosure::new(&mut i, imp);\n-///\n-/// assert!(7 == cl(2));\n-/// assert!(8 == cl(1));\n-/// ```\n-pub(crate) struct ConstFnMutClosure<CapturedData, Function> {\n-    /// The Data captured by the Closure.\n-    /// Must be either a (mutable) reference or a tuple of (mutable) references.\n-    pub data: CapturedData,\n-    /// The Function of the Closure, must be: Fn(CapturedData, ClosureArgs) -> ClosureReturn\n-    pub func: Function,\n-}\n-impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData, Function> {\n-    /// Function for creating a new closure.\n-    ///\n-    /// `data` is the a mutable borrow of data that is captured from the environment.\n-    /// If you want Data to be a tuple of mutable Borrows, the struct must be constructed manually.\n-    ///\n-    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n-    ///   and return the return value of the closure.\n-    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n-        data: &'a mut CapturedData,\n-        func: Function,\n-    ) -> Self\n-    where\n-        Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n-    {\n-        Self { data, func }\n-    }\n-}\n-\n-macro_rules! impl_fn_mut_tuple {\n-    ($($var:ident)*) => {\n-        #[allow(unused_parens)]\n-        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n-            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-        where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n-        {\n-            type Output = ClosureReturnValue;\n-\n-            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-            self.call_mut(args)\n-            }\n-        }\n-        #[allow(unused_parens)]\n-        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n-            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-        where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n-        {\n-            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-                #[allow(non_snake_case)]\n-                let ($($var),*) = &mut self.data;\n-                (self.func)(($($var),*), args)\n-            }\n-        }\n-    };\n-}\n-impl_fn_mut_tuple!(A);\n-impl_fn_mut_tuple!(A B);\n-impl_fn_mut_tuple!(A B C);\n-impl_fn_mut_tuple!(A B C D);\n-impl_fn_mut_tuple!(A B C D E);"}, {"sha": "af786609757b1325d85c166a3a382929bba74634", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -1,5 +1,4 @@\n use crate::array;\n-use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{ByRefSized, FusedIterator, Iterator, TrustedRandomAccessNoCoerce};\n use crate::mem::{self, MaybeUninit};\n use crate::ops::{ControlFlow, NeverShortCircuit, Try};\n@@ -189,13 +188,12 @@ where\n     I: Iterator,\n {\n     #[inline]\n-    default fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+    default fn fold<B, F>(mut self, init: B, f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        let fold = ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp);\n-        self.try_fold(init, fold).0\n+        self.try_fold(init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n }\n "}, {"sha": "477e7117c3ea125973252685d8bded87ab93686f", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -1,7 +1,4 @@\n-use crate::{\n-    const_closure::ConstFnMutClosure,\n-    ops::{NeverShortCircuit, Try},\n-};\n+use crate::ops::{NeverShortCircuit, Try};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n ///\n@@ -39,13 +36,12 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn fold<B, F>(self, init: B, mut f: F) -> B\n+    fn fold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `fold` needs ownership, so this can't forward directly.\n-        I::try_fold(self.0, init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp))\n-            .0\n+        I::try_fold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]\n@@ -76,17 +72,12 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn rfold<B, F>(self, init: B, mut f: F) -> B\n+    fn rfold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `rfold` needs ownership, so this can't forward directly.\n-        I::try_rfold(\n-            self.0,\n-            init,\n-            ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp),\n-        )\n-        .0\n+        I::try_rfold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]"}, {"sha": "00f57fbcc6162abd5e591edc85766a7711153225", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -362,15 +362,13 @@ macro_rules! impl_fold_via_try_fold {\n     };\n     (@internal $fold:ident -> $try_fold:ident) => {\n         #[inline]\n-        fn $fold<AAA, FFF>(mut self, init: AAA, mut fold: FFF) -> AAA\n+        fn $fold<AAA, FFF>(mut self, init: AAA, fold: FFF) -> AAA\n         where\n             FFF: FnMut(AAA, Self::Item) -> AAA,\n         {\n-            use crate::const_closure::ConstFnMutClosure;\n             use crate::ops::NeverShortCircuit;\n \n-            let fold = ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp);\n-            self.$try_fold(init, fold).0\n+            self.$try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n         }\n     };\n }"}, {"sha": "dc0702c467a4ea1d3c69d2ce21504c114a91fc13", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -376,8 +376,6 @@ mod bool;\n mod tuple;\n mod unit;\n \n-mod const_closure;\n-\n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n pub mod primitive;\n "}, {"sha": "9108fc63045250d5369d2d63d4fc6581cc18ad9e", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -379,13 +379,18 @@ pub(crate) type ChangeOutputType<T, V> = <<T as Try>::Residual as Residual<V>>::\n pub(crate) struct NeverShortCircuit<T>(pub T);\n \n impl<T> NeverShortCircuit<T> {\n-    /// Implementation for building `ConstFnMutClosure` for wrapping the output of a ~const FnMut in a `NeverShortCircuit`.\n     #[inline]\n-    pub const fn wrap_mut_2_imp<A, B, F: ~const FnMut(A, B) -> T>(\n-        f: &mut F,\n-        (a, b): (A, B),\n-    ) -> NeverShortCircuit<T> {\n-        NeverShortCircuit(f(a, b))\n+    pub fn wrap_mut_2<A, B>(\n+        mut f: impl ~const FnMut(A, B) -> T,\n+    ) -> impl ~const FnMut(A, B) -> Self {\n+        cfg_if! {\n+            if #[cfg(bootstrap)] {\n+                #[allow(unused_parens)]\n+                (const move |a, b| NeverShortCircuit(f(a, b)))\n+            } else {\n+                const move |a, b| NeverShortCircuit(f(a, b))\n+            }\n+        }\n     }\n }\n "}, {"sha": "10af39b70074882ef906f592ac57975f4df7beba", "filename": "tests/ui/parser/recover-quantified-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -7,6 +7,6 @@ fn main() {\n enum Foo { Bar }\n fn foo(x: impl Iterator<Item = Foo>) {\n     for <Foo>::Bar in x {}\n-    //~^ ERROR expected one of `const`, `move`, `static`, `|`\n+    //~^ ERROR expected one of `move`, `static`, `|`\n     //~^^ ERROR `for<...>` binders for closures are experimental\n }"}, {"sha": "39eec80f658ad9344ab64a8091c32381806b2b81", "filename": "tests/ui/parser/recover-quantified-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `const`, `move`, `static`, `|`, or `||`, found `::`\n+error: expected one of `move`, `static`, `|`, or `||`, found `::`\n   --> $DIR/recover-quantified-closure.rs:9:14\n    |\n LL |     for <Foo>::Bar in x {}\n-   |              ^^ expected one of `const`, `move`, `static`, `|`, or `||`\n+   |              ^^ expected one of `move`, `static`, `|`, or `||`\n \n error[E0658]: `for<...>` binders for closures are experimental\n   --> $DIR/recover-quantified-closure.rs:2:5"}, {"sha": "2c99d8bf1c6776899f51bec5ee735810fbafceb6", "filename": "tests/ui/rfc-2632-const-trait-impl/const-closure-parse-not-item.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e99e05d13592d2e9868fa69f98dc01f9766f05ed/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-parse-not-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99e05d13592d2e9868fa69f98dc01f9766f05ed/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-parse-not-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-parse-not-item.rs?ref=e99e05d13592d2e9868fa69f98dc01f9766f05ed", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(const_trait_impl, const_closures)]\n+#![allow(incomplete_features)]\n+\n+const fn test() -> impl ~const Fn() {\n+    const move || {}\n+}\n+\n+fn main() {}"}]}