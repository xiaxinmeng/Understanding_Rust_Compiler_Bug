{"sha": "632756396375ea0e74463ed9e239662d887ed3c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMjc1NjM5NjM3NWVhMGU3NDQ2M2VkOWUyMzk2NjJkODg3ZWQzYzE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-06T02:01:28Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-07T00:42:30Z"}, "message": "Rename fold_subitems_with to super_fold_with", "tree": {"sha": "04f11541cec830e8eb59e121fdb4481e6134a42f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f11541cec830e8eb59e121fdb4481e6134a42f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632756396375ea0e74463ed9e239662d887ed3c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632756396375ea0e74463ed9e239662d887ed3c1", "html_url": "https://github.com/rust-lang/rust/commit/632756396375ea0e74463ed9e239662d887ed3c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632756396375ea0e74463ed9e239662d887ed3c1/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76021d84b30b1b49fecab8e263cedb7a71f9d393", "url": "https://api.github.com/repos/rust-lang/rust/commits/76021d84b30b1b49fecab8e263cedb7a71f9d393", "html_url": "https://github.com/rust-lang/rust/commit/76021d84b30b1b49fecab8e263cedb7a71f9d393"}], "stats": {"total": 365, "additions": 182, "deletions": 183}, "files": [{"sha": "faf1bdb0ce504b87358bfac3203a718bbdbc8baa", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -318,7 +318,7 @@ impl<'cx, 'tcx> ty::fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n                 }\n             }\n             _ => {\n-                t.fold_subitems_with(self)\n+                t.super_fold_with(self)\n             }\n         }\n     }"}, {"sha": "76dd62383f1b1f1c65c1de47961185094967b2ec", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::TyTuple(..) |\n             ty::TyProjection(..) |\n             ty::TyParam(..) => {\n-                t.fold_subitems_with(self)\n+                t.super_fold_with(self)\n             }\n         }\n     }"}, {"sha": "c68d0a9fa5683948af04daabf08ac25d21e361e6", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t0 = self.infcx.shallow_resolve(t);\n-            t0.fold_subitems_with(self)\n+            t0.super_fold_with(self)\n         }\n     }\n }\n@@ -67,7 +67,7 @@ impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t0 = self.infcx.shallow_resolve(t);\n-            t0.fold_subitems_with(self)\n+            t0.super_fold_with(self)\n         }\n     }\n \n@@ -132,7 +132,7 @@ impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n                                 t));\n                 }\n                 _ => {\n-                    t.fold_subitems_with(self)\n+                    t.super_fold_with(self)\n                 }\n             }\n         }"}, {"sha": "61f7b2db4c43233769af36b0b8b5b185a49297b8", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -674,7 +674,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                 self.ty_for_param(p, t)\n             }\n             _ => {\n-                t.fold_subitems_with(self)\n+                t.super_fold_with(self)\n             }\n         };\n "}, {"sha": "ad3524661d326a4b8abb0023c97dae8292510073", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -273,7 +273,7 @@ impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n         // normalize it when we instantiate those bound regions (which\n         // should occur eventually).\n \n-        let ty = ty.fold_subitems_with(self);\n+        let ty = ty.super_fold_with(self);\n         match ty.sty {\n             ty::TyProjection(ref data) if !data.has_escaping_regions() => { // (*)\n "}, {"sha": "453420e2a54dccfcd2e20a062fd4dcdcf48160bc", "filename": "src/librustc/middle/traits/structural_impls.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fstructural_impls.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -132,87 +132,87 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n \n impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O>\n {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Obligation<'tcx, O> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::Obligation {\n             cause: self.cause.clone(),\n             recursion_depth: self.recursion_depth,\n             predicate: self.predicate.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.predicate.visit_with(visitor)\n     }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableImplData<'tcx, N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableImplData<'tcx, N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableImplData {\n             impl_def_id: self.impl_def_id,\n             substs: self.substs.fold_with(folder),\n             nested: self.nested.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.substs.visit_with(visitor) || self.nested.visit_with(visitor)\n     }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableClosureData<'tcx, N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableClosureData<'tcx, N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableClosureData {\n             closure_def_id: self.closure_def_id,\n             substs: self.substs.fold_with(folder),\n             nested: self.nested.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.substs.visit_with(visitor) || self.nested.visit_with(visitor)\n     }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultImplData<N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableDefaultImplData<N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableDefaultImplData {\n             trait_def_id: self.trait_def_id,\n             nested: self.nested.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.nested.visit_with(visitor)\n     }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinData<N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableBuiltinData<N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableBuiltinData {\n             nested: self.nested.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.nested.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for traits::VtableObjectData<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableObjectData<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableObjectData {\n             upcast_trait_ref: self.upcast_trait_ref.fold_with(folder),\n             vtable_base: self.vtable_base\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.upcast_trait_ref.visit_with(visitor)\n     }\n }\n \n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Vtable<'tcx, N> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             traits::VtableImpl(ref v) => traits::VtableImpl(v.fold_with(folder)),\n             traits::VtableDefaultImpl(ref t) => traits::VtableDefaultImpl(t.fold_with(folder)),\n@@ -228,7 +228,7 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             traits::VtableImpl(ref v) => v.visit_with(visitor),\n             traits::VtableDefaultImpl(ref t) => t.visit_with(visitor),\n@@ -242,14 +242,14 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Normalized<'tcx, T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Normalized<'tcx, T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Normalized {\n             value: self.value.fold_with(folder),\n             obligations: self.obligations.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.value.visit_with(visitor) || self.obligations.visit_with(visitor)\n     }\n }"}, {"sha": "da0245a8d25205cb5f3c87dd964e993399ccfce4", "filename": "src/librustc/middle/ty/fold.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -14,18 +14,18 @@\n //! instance of a \"folder\" (a type which implements `TypeFolder`). Then\n //! the setup is intended to be:\n //!\n-//!   T.fold_with(F) --calls--> F.fold_T(T) --calls--> T.fold_subitems_with(F)\n+//!   T.fold_with(F) --calls--> F.fold_T(T) --calls--> T.super_fold_with(F)\n //!\n //! This way, when you define a new folder F, you can override\n-//! `fold_T()` to customize the behavior, and invoke `T.fold_subitems_with()`\n+//! `fold_T()` to customize the behavior, and invoke `T.super_fold_with()`\n //! to get the original behavior. Meanwhile, to actually fold\n //! something, you can just write `T.fold_with(F)`, which is\n //! convenient. (Note that `fold_with` will also transparently handle\n //! things like a `Vec<T>` where T is foldable and so on.)\n //!\n //! In this ideal setup, the only function that actually *does*\n-//! anything is `T.fold_subitems_with()`, which traverses the type `T`.\n-//! Moreover, `T.fold_subitems_with()` should only ever call `T.fold_with()`.\n+//! anything is `T.super_fold_with()`, which traverses the type `T`.\n+//! Moreover, `T.super_fold_with()` should only ever call `T.fold_with()`.\n //!\n //! In some cases, we follow a degenerate pattern where we do not have\n //! a `fold_T` method. Instead, `T.fold_with` traverses the structure directly.\n@@ -35,7 +35,7 @@\n //! proper thing.\n //!\n //! A `TypeFoldable` T can also be visited by a `TypeVisitor` V using similar setup:\n-//!   T.visit_with(V) --calls--> V.visit_T(T) --calls--> T.visit_subitems_with(V).\n+//!   T.visit_with(V) --calls--> V.visit_T(T) --calls--> T.super_visit_with(V).\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n@@ -50,14 +50,14 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n /// The TypeFoldable trait is implemented for every type that can be folded.\n /// Basically, every type that has a corresponding method in TypeFolder.\n pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self;\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        self.fold_with(folder)\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self;\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        self.super_fold_with(folder)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool;\n-    fn visit_subitems_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.visit_with(visitor)\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool;\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.super_visit_with(visitor)\n     }\n \n     fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n@@ -131,64 +131,64 @@ pub trait TypeFolder<'tcx> : Sized {\n         where T : TypeFoldable<'tcx>\n     {\n         // FIXME(#20526) this should replace `enter_region_binder`/`exit_region_binder`.\n-        t.fold_subitems_with(self)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        t.fold_subitems_with(self)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_mt(&mut self, t: &ty::TypeAndMut<'tcx>) -> ty::TypeAndMut<'tcx> {\n-        t.fold_subitems_with(self)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_trait_ref(&mut self, t: &ty::TraitRef<'tcx>) -> ty::TraitRef<'tcx> {\n-        t.fold_subitems_with(self)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_substs(&mut self,\n                    substs: &subst::Substs<'tcx>)\n                    -> subst::Substs<'tcx> {\n-        substs.fold_subitems_with(self)\n+        substs.super_fold_with(self)\n     }\n \n     fn fold_fn_sig(&mut self,\n                    sig: &ty::FnSig<'tcx>)\n                    -> ty::FnSig<'tcx> {\n-        sig.fold_subitems_with(self)\n+        sig.super_fold_with(self)\n     }\n \n     fn fold_output(&mut self,\n                       output: &ty::FnOutput<'tcx>)\n                       -> ty::FnOutput<'tcx> {\n-        output.fold_subitems_with(self)\n+        output.super_fold_with(self)\n     }\n \n     fn fold_bare_fn_ty(&mut self,\n                        fty: &ty::BareFnTy<'tcx>)\n                        -> ty::BareFnTy<'tcx>\n     {\n-        fty.fold_subitems_with(self)\n+        fty.super_fold_with(self)\n     }\n \n     fn fold_closure_ty(&mut self,\n                        fty: &ty::ClosureTy<'tcx>)\n                        -> ty::ClosureTy<'tcx> {\n-        fty.fold_subitems_with(self)\n+        fty.super_fold_with(self)\n     }\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n-        r.fold_subitems_with(self)\n+        r.super_fold_with(self)\n     }\n \n     fn fold_existential_bounds(&mut self, s: &ty::ExistentialBounds<'tcx>)\n                                -> ty::ExistentialBounds<'tcx> {\n-        s.fold_subitems_with(self)\n+        s.super_fold_with(self)\n     }\n \n     fn fold_autoref(&mut self, ar: &adjustment::AutoRef<'tcx>)\n                     -> adjustment::AutoRef<'tcx> {\n-        ar.fold_subitems_with(self)\n+        ar.super_fold_with(self)\n     }\n }\n \n@@ -197,11 +197,11 @@ pub trait TypeVisitor<'tcx> : Sized {\n     fn exit_region_binder(&mut self) { }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-        t.visit_subitems_with(self)\n+        t.super_visit_with(self)\n     }\n \n     fn visit_region(&mut self, r: ty::Region) -> bool {\n-        r.visit_subitems_with(self)\n+        r.super_visit_with(self)\n     }\n }\n \n@@ -219,7 +219,7 @@ impl<'a, 'tcx, F> TypeFolder<'tcx> for BottomUpFolder<'a, 'tcx, F> where\n     fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let t1 = ty.fold_subitems_with(self);\n+        let t1 = ty.super_fold_with(self);\n         (self.fldop)(t1)\n     }\n }\n@@ -447,7 +447,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx>\n             return t;\n         }\n \n-        t.fold_subitems_with(self)\n+        t.super_fold_with(self)\n     }\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n@@ -498,7 +498,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n                     Some(u) => return u\n                 }\n \n-                let t_norm = ty.fold_subitems_with(self);\n+                let t_norm = ty.super_fold_with(self);\n                 self.tcx().normalized_cache.borrow_mut().insert(ty, t_norm);\n                 return t_norm;\n             }\n@@ -507,7 +507,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n                 where T : TypeFoldable<'tcx>\n             {\n                 let u = self.tcx().anonymize_late_bound_regions(t);\n-                u.fold_subitems_with(self)\n+                u.super_fold_with(self)\n             }\n \n             fn fold_region(&mut self, r: ty::Region) -> ty::Region {"}, {"sha": "01b2bd36b4f07a7f7e4b3ae73b0b5083132106a6", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 128, "deletions": 128, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -123,11 +123,11 @@ macro_rules! CopyImpls {\n     ($($ty:ty),+) => {\n         $(\n             impl<'tcx> TypeFoldable<'tcx> for $ty {\n-                fn fold_with<F:TypeFolder<'tcx>>(&self, _: &mut F) -> $ty {\n+                fn super_fold_with<F:TypeFolder<'tcx>>(&self, _: &mut F) -> $ty {\n                     *self\n                 }\n \n-                fn visit_with<F: TypeVisitor<'tcx>>(&self, _: &mut F) -> bool {\n+                fn super_visit_with<F: TypeVisitor<'tcx>>(&self, _: &mut F) -> bool {\n                     false\n                 }\n             }\n@@ -138,69 +138,69 @@ macro_rules! CopyImpls {\n CopyImpls! { (), hir::Unsafety, abi::Abi }\n \n impl<'tcx, T:TypeFoldable<'tcx>, U:TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> (T, U) {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> (T, U) {\n         (self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.0.visit_with(visitor) || self.1.visit_with(visitor)\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Option<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Option<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.as_ref().map(|t| t.fold_with(folder))\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.iter().any(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Rc<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Rc::new((**self).fold_with(folder))\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         (**self).visit_with(visitor)\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Box<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let content: T = (**self).fold_with(folder);\n         box content\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         (**self).visit_with(visitor)\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Vec<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.iter().any(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Binder<T> {\n-        folder.fold_binder(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.enter_region_binder();\n         let result = ty::Binder(self.0.fold_with(folder));\n         folder.exit_region_binder();\n         result\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_binder(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         visitor.enter_region_binder();\n         if self.0.visit_with(visitor) { return true }\n         visitor.exit_region_binder();\n@@ -209,17 +209,17 @@ impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for P<[T]> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> P<[T]> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.iter().any(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for VecPerParamSpace<T> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> VecPerParamSpace<T> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n \n         // Things in the Fn space take place under an additional level\n         // of region binding relative to the other spaces. This is\n@@ -240,7 +240,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for VecPerParamSpace<T> {\n         result\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         let mut entered_region_binder = false;\n         let result = self.iter_enumerated().any(|(space, index, t)| {\n             if space == subst::FnSpace && index == 0 {\n@@ -257,24 +257,20 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for VecPerParamSpace<T> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TraitTy<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TraitTy {\n             principal: self.principal.fold_with(folder),\n             bounds: self.bounds.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.principal.visit_with(visitor) || self.bounds.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Ty<'tcx> {\n-        folder.fold_ty(*self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let sty = match self.sty {\n             ty::TyBox(typ) => ty::TyBox(typ.fold_with(folder)),\n             ty::TyRawPtr(ref tm) => ty::TyRawPtr(tm.fold_with(folder)),\n@@ -309,11 +305,11 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         folder.tcx().mk_ty(sty)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        visitor.visit_ty(self)\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_ty(*self)\n     }\n \n-    fn visit_subitems_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match self.sty {\n             ty::TyBox(typ) => typ.visit_with(visitor),\n             ty::TyRawPtr(ref tm) => tm.visit_with(visitor),\n@@ -332,69 +328,73 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyParam(..) => false,\n         }\n     }\n-}\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::BareFnTy<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::BareFnTy<'tcx> {\n-        folder.fold_bare_fn_ty(self)\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        visitor.visit_ty(self)\n     }\n+}\n \n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+impl<'tcx> TypeFoldable<'tcx> for ty::BareFnTy<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::BareFnTy { sig: self.sig.fold_with(folder),\n                        abi: self.abi,\n                        unsafety: self.unsafety }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_bare_fn_ty(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.sig.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ClosureTy<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureTy<'tcx> {\n-        folder.fold_closure_ty(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n        ty::ClosureTy {\n             sig: self.sig.fold_with(folder),\n             unsafety: self.unsafety,\n             abi: self.abi,\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_closure_ty(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.sig.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeAndMut<'tcx> {\n-        folder.fold_mt(self)\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::TypeAndMut { ty: self.ty.fold_with(folder), mutbl: self.mutbl }\n     }\n \n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::TypeAndMut { ty: self.ty.fold_with(folder), mutbl: self.mutbl }\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_mt(self)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.ty.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::FnOutput<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::FnOutput<'tcx> {\n-        folder.fold_output(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             ty::FnConverging(ref ty) => ty::FnConverging(ty.fold_with(folder)),\n             ty::FnDiverging => ty::FnDiverging\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_output(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::FnConverging(ref ty) => ty.visit_with(visitor),\n             ty::FnDiverging => false,\n@@ -403,63 +403,59 @@ impl<'tcx> TypeFoldable<'tcx> for ty::FnOutput<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::FnSig<'tcx> {\n-        folder.fold_fn_sig(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::FnSig { inputs: self.inputs.fold_with(folder),\n                     output: self.output.fold_with(folder),\n                     variadic: self.variadic }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_fn_sig(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.inputs.visit_with(visitor) || self.output.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TraitRef<'tcx> {\n-        folder.fold_trait_ref(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let substs = self.substs.fold_with(folder);\n         ty::TraitRef {\n             def_id: self.def_id,\n             substs: folder.tcx().mk_substs(substs),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_trait_ref(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.substs.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Region {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Region {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self {\n+        *self\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_region(*self)\n     }\n \n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self {\n-        *self\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+        false\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         visitor.visit_region(*self)\n     }\n-\n-    fn visit_subitems_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n-        false\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for subst::Substs<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> subst::Substs<'tcx> {\n-        folder.fold_substs(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let regions = match self.regions {\n             subst::ErasedRegions => subst::ErasedRegions,\n             subst::NonerasedRegions(ref regions) => {\n@@ -471,7 +467,11 @@ impl<'tcx> TypeFoldable<'tcx> for subst::Substs<'tcx> {\n                         types: self.types.fold_with(folder) }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_substs(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.types.visit_with(visitor) || match self.regions {\n             subst::ErasedRegions => false,\n             subst::NonerasedRegions(ref regions) => regions.visit_with(visitor),\n@@ -480,37 +480,33 @@ impl<'tcx> TypeFoldable<'tcx> for subst::Substs<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ClosureSubsts<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureSubsts<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let func_substs = self.func_substs.fold_with(folder);\n         ty::ClosureSubsts {\n             func_substs: folder.tcx().mk_substs(func_substs),\n             upvar_tys: self.upvar_tys.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.func_substs.visit_with(visitor) || self.upvar_tys.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ItemSubsts<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ItemSubsts<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ItemSubsts {\n             substs: self.substs.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.substs.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoRef<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::adjustment::AutoRef<'tcx> {\n-        folder.fold_autoref(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             ty::adjustment::AutoPtr(r, m) => {\n                 let r = r.fold_with(folder);\n@@ -520,7 +516,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoRef<'tcx> {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_autoref(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::adjustment::AutoPtr(r, _m) => r.visit_with(visitor),\n             ty::adjustment::AutoUnsafe(_m) => false,\n@@ -529,35 +529,35 @@ impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoRef<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::BuiltinBounds {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> ty::BuiltinBounds {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self {\n         *self\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n         false\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialBounds<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ExistentialBounds<'tcx> {\n-        folder.fold_existential_bounds(self)\n-    }\n-\n-    fn fold_subitems_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ExistentialBounds {\n             region_bound: self.region_bound.fold_with(folder),\n             builtin_bounds: self.builtin_bounds,\n             projection_bounds: self.projection_bounds.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_existential_bounds(self)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.region_bound.visit_with(visitor) || self.projection_bounds.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeParameterDef<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TypeParameterDef {\n             name: self.name,\n             def_id: self.def_id,\n@@ -569,14 +569,14 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.default.visit_with(visitor) ||\n             self.object_lifetime_default.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ObjectLifetimeDefault {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             ty::ObjectLifetimeDefault::Ambiguous =>\n                 ty::ObjectLifetimeDefault::Ambiguous,\n@@ -589,7 +589,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::ObjectLifetimeDefault::Specific(r) => r.visit_with(visitor),\n             _ => false,\n@@ -598,7 +598,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::RegionParameterDef {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::RegionParameterDef {\n             name: self.name,\n             def_id: self.def_id,\n@@ -608,38 +608,38 @@ impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.bounds.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Generics<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Generics<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::Generics {\n             types: self.types.fold_with(folder),\n             regions: self.regions.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.types.visit_with(visitor) || self.regions.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::GenericPredicates<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::GenericPredicates {\n             predicates: self.predicates.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.predicates.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Predicate<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             ty::Predicate::Trait(ref a) =>\n                 ty::Predicate::Trait(a.fold_with(folder)),\n@@ -658,7 +658,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::Predicate::Trait(ref a) => a.visit_with(visitor),\n             ty::Predicate::Equate(ref binder) => binder.visit_with(visitor),\n@@ -672,62 +672,62 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionPredicate<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ProjectionPredicate<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ProjectionPredicate {\n             projection_ty: self.projection_ty.fold_with(folder),\n             ty: self.ty.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.projection_ty.visit_with(visitor) || self.ty.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ProjectionTy<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ProjectionTy {\n             trait_ref: self.trait_ref.fold_with(folder),\n             item_name: self.item_name,\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.trait_ref.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::InstantiatedPredicates<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::InstantiatedPredicates<'tcx> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::InstantiatedPredicates {\n             predicates: self.predicates.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.predicates.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::EquatePredicate<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::EquatePredicate<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::EquatePredicate(self.0.fold_with(folder),\n                             self.1.fold_with(folder))\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.0.visit_with(visitor) || self.1.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TraitPredicate<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TraitPredicate {\n             trait_ref: self.trait_ref.fold_with(folder)\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.trait_ref.visit_with(visitor)\n     }\n }\n@@ -736,32 +736,32 @@ impl<'tcx,T,U> TypeFoldable<'tcx> for ty::OutlivesPredicate<T,U>\n     where T : TypeFoldable<'tcx>,\n           U : TypeFoldable<'tcx>,\n {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::OutlivesPredicate<T,U> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::OutlivesPredicate(self.0.fold_with(folder),\n                               self.1.fold_with(folder))\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.0.visit_with(visitor) || self.1.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureUpvar<'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ClosureUpvar {\n             def: self.def,\n             span: self.span,\n             ty: self.ty.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.ty.visit_with(visitor)\n     }\n }\n \n impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where 'tcx: 'a {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ParameterEnvironment<'a, 'tcx> {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ParameterEnvironment {\n             tcx: self.tcx,\n             free_substs: self.free_substs.fold_with(folder),\n@@ -773,22 +773,22 @@ impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where '\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.free_substs.visit_with(visitor) ||\n             self.implicit_region_bound.visit_with(visitor) ||\n             self.caller_bounds.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::TypeScheme<'tcx>  {\n-    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TypeScheme {\n             generics: self.generics.fold_with(folder),\n             ty: self.ty.fold_with(folder),\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.generics.visit_with(visitor) || self.ty.visit_with(visitor)\n     }\n }"}, {"sha": "77e39bba54afcd834725abc42c3d63d3f4474e7b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632756396375ea0e74463ed9e239662d887ed3c1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=632756396375ea0e74463ed9e239662d887ed3c1", "patch": "@@ -251,12 +251,11 @@ fn in_binder<'tcx, T, U>(f: &mut fmt::Formatter,\n struct TraitAndProjections<'tcx>(ty::TraitRef<'tcx>, Vec<ty::ProjectionPredicate<'tcx>>);\n \n impl<'tcx> TypeFoldable<'tcx> for TraitAndProjections<'tcx> {\n-    fn fold_with<F:ty::fold::TypeFolder<'tcx>>(&self, folder: &mut F)\n-                                              -> TraitAndProjections<'tcx> {\n+    fn super_fold_with<F:ty::fold::TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         TraitAndProjections(self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n \n-    fn visit_with<V: ty::fold::TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: ty::fold::TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.0.visit_with(visitor) || self.1.visit_with(visitor)\n     }\n }"}]}