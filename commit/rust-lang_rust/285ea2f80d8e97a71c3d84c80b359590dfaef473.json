{"sha": "285ea2f80d8e97a71c3d84c80b359590dfaef473", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWVhMmY4MGQ4ZTk3YTcxYzNkODRjODBiMzU5NTkwZGZhZWY0NzM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-15T15:07:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-15T15:07:04Z"}, "message": "Rollup merge of #82107 - petrochenkov:minexpclean, r=Aaron1011\n\nexpand: Some cleanup\n\nSee individual commits for details.\n\nr? ``@Aaron1011``", "tree": {"sha": "c80aa8a6b02469dcbb7aba5a310e8f6c533b114a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c80aa8a6b02469dcbb7aba5a310e8f6c533b114a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285ea2f80d8e97a71c3d84c80b359590dfaef473", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKo4YCRBK7hj4Ov3rIwAAdHIIAFmZsyTQa8zGZLyaqRNRQlhz\nzpUXCwLaM4WHHW6UGWq5wBh6NuHyO/AZfE1K+H08/3M6YIhyp3UTPM8lbddPQCMt\nezxAZFJZC30PRhcWyiDuPKVgeL8jmxqXcgI3vCYIeowd/8qIkjmbQctR+JwXPq+b\nisZbuYq7FN92KpAzYF4dfPtvHV7b5jHo+AeM0z2LRg/B5xN3cSNBRS8V86ZvNBi3\ny/svoI6IhNRZRTk8oP3EZZrWXpJZHnsesGyDEd4W867G75zkZY7f/D3Juvrs8lJY\nVQ+JiYK2yPOMdNwA1cWCX0elP3VtE55Rtd3ROKGza6POx2rOiufCH+nhjbiZw48=\n=dPwV\n-----END PGP SIGNATURE-----\n", "payload": "tree c80aa8a6b02469dcbb7aba5a310e8f6c533b114a\nparent 40d85a5f7d102d0ffba6abb5ca22df47e8778d7d\nparent 6e11a8b66a5e390f94e6d96b652e25e31fafc0c0\nauthor Jonas Schievink <jonasschievink@gmail.com> 1613401624 +0100\ncommitter GitHub <noreply@github.com> 1613401624 +0100\n\nRollup merge of #82107 - petrochenkov:minexpclean, r=Aaron1011\n\nexpand: Some cleanup\n\nSee individual commits for details.\n\nr? ``@Aaron1011``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285ea2f80d8e97a71c3d84c80b359590dfaef473", "html_url": "https://github.com/rust-lang/rust/commit/285ea2f80d8e97a71c3d84c80b359590dfaef473", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285ea2f80d8e97a71c3d84c80b359590dfaef473/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d85a5f7d102d0ffba6abb5ca22df47e8778d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d85a5f7d102d0ffba6abb5ca22df47e8778d7d", "html_url": "https://github.com/rust-lang/rust/commit/40d85a5f7d102d0ffba6abb5ca22df47e8778d7d"}, {"sha": "6e11a8b66a5e390f94e6d96b652e25e31fafc0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0", "html_url": "https://github.com/rust-lang/rust/commit/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0"}], "stats": {"total": 48, "additions": 9, "deletions": 39}, "files": [{"sha": "c5d0927760b6aed29d47466426f40ce7c7a2e3f8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=285ea2f80d8e97a71c3d84c80b359590dfaef473", "patch": "@@ -1067,8 +1067,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {\n         self.cfg.configure_expr(expr);\n         visit_clobber(expr.deref_mut(), |mut expr| {\n-            self.cfg.configure_expr_kind(&mut expr.kind);\n-\n             if let Some(attr) = self.take_first_attr(&mut expr) {\n                 // Collect the invoc regardless of whether or not attributes are permitted here\n                 // expansion will eat the attribute so it won't error later.\n@@ -1166,8 +1164,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         let expr = configure!(self, expr);\n         expr.filter_map(|mut expr| {\n-            self.cfg.configure_expr_kind(&mut expr.kind);\n-\n             if let Some(attr) = self.take_first_attr(&mut expr) {\n                 self.cfg.maybe_emit_expr_attr_err(&attr.0);\n \n@@ -1192,7 +1188,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     }\n \n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n-        self.cfg.configure_pat(pat);\n         match pat.kind {\n             PatKind::MacCall(_) => {}\n             _ => return noop_visit_pat(pat, self),\n@@ -1406,15 +1401,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         });\n     }\n \n-    fn visit_foreign_mod(&mut self, foreign_mod: &mut ast::ForeignMod) {\n-        self.cfg.configure_foreign_mod(foreign_mod);\n-        noop_visit_foreign_mod(foreign_mod, self);\n-    }\n-\n     fn flat_map_foreign_item(\n         &mut self,\n-        mut foreign_item: P<ast::ForeignItem>,\n+        foreign_item: P<ast::ForeignItem>,\n     ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n+        let mut foreign_item = configure!(self, foreign_item);\n+\n         if let Some(attr) = self.take_first_attr(&mut foreign_item) {\n             return self\n                 .collect_attr(\n@@ -1439,11 +1431,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn visit_item_kind(&mut self, item: &mut ast::ItemKind) {\n-        self.cfg.configure_item_kind(item);\n-        noop_visit_item_kind(item, self);\n-    }\n-\n     fn flat_map_generic_param(\n         &mut self,\n         param: ast::GenericParam,\n@@ -1602,21 +1589,15 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             *id = self.cx.resolver.next_node_id()\n         }\n     }\n-\n-    fn visit_fn_decl(&mut self, mut fn_decl: &mut P<ast::FnDecl>) {\n-        self.cfg.configure_fn_decl(&mut fn_decl);\n-        noop_visit_fn_decl(fn_decl, self);\n-    }\n }\n \n pub struct ExpansionConfig<'feat> {\n     pub crate_name: String,\n     pub features: Option<&'feat Features>,\n     pub recursion_limit: Limit,\n     pub trace_mac: bool,\n-    pub should_test: bool, // If false, strip `#[test]` nodes\n-    pub keep_macs: bool,\n-    pub span_debug: bool, // If true, use verbose debugging for `proc_macro::Span`\n+    pub should_test: bool,          // If false, strip `#[test]` nodes\n+    pub span_debug: bool,           // If true, use verbose debugging for `proc_macro::Span`\n     pub proc_macro_backtrace: bool, // If true, show backtraces for proc-macro panics\n }\n \n@@ -1628,7 +1609,6 @@ impl<'feat> ExpansionConfig<'feat> {\n             recursion_limit: Limit::new(1024),\n             trace_mac: false,\n             should_test: false,\n-            keep_macs: false,\n             span_debug: false,\n             proc_macro_backtrace: false,\n         }"}, {"sha": "98682ba42959a0f53460a486e131c4eae2239f8d", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=285ea2f80d8e97a71c3d84c80b359590dfaef473", "patch": "@@ -371,12 +371,4 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n             }\n         }\n     }\n-\n-    fn visit_mod(&mut self, module: &mut ast::Mod) {\n-        noop_visit_mod(module, self);\n-        // remove macro definitions\n-        module.items.retain(\n-            |item| !matches!(item.kind, ast::ItemKind::MacCall(_) if !self.cx.ecfg.keep_macs),\n-        );\n-    }\n }"}, {"sha": "4b03d38ccba5bc012cc44452cbd9650d94e7b8cd", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=285ea2f80d8e97a71c3d84c80b359590dfaef473", "patch": "@@ -510,11 +510,10 @@ impl Span {\n     /// items can be used (that is, a macro marked with\n     /// `#[allow_internal_unstable]`).\n     pub fn allows_unstable(&self, feature: Symbol) -> bool {\n-        self.ctxt().outer_expn_data().allow_internal_unstable.map_or(false, |features| {\n-            features\n-                .iter()\n-                .any(|&f| f == feature || f == sym::allow_internal_unstable_backcompat_hack)\n-        })\n+        self.ctxt()\n+            .outer_expn_data()\n+            .allow_internal_unstable\n+            .map_or(false, |features| features.iter().any(|&f| f == feature))\n     }\n \n     /// Checks if this span arises from a compiler desugaring of kind `kind`."}, {"sha": "8c90eeb7f3f4a9cf476636447959e426d84450cb", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285ea2f80d8e97a71c3d84c80b359590dfaef473/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=285ea2f80d8e97a71c3d84c80b359590dfaef473", "patch": "@@ -252,7 +252,6 @@ symbols! {\n         allow_fail,\n         allow_internal_unsafe,\n         allow_internal_unstable,\n-        allow_internal_unstable_backcompat_hack,\n         allowed,\n         always,\n         and,"}]}