{"sha": "a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MTZjNWUwZjdjNGM5NDczMDY5YTU4NDEwZDNlYzNlODZiMWFjMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T12:10:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T12:10:48Z"}, "message": "Auto merge of #3545 - Kampfkarren:vec_boxed_sized, r=flip1995\n\nAdds lint for Vec<Box<T: Sized>>\n\nThis adds, and subsequently closes #3530. This is the first time I've ever worked with anything remotely close to internal Rust code, so I'm very much unsure about the if_chain! to figure this out!\n\nI can't get rustfmt working on WSL with nightly 2018-12-07:\n\n`error: component 'rustfmt' for target 'x86_64-unknown-linux-gnu' is unavailable for download`", "tree": {"sha": "901289e1ea4dba1b252b360543f2e7f6fc106e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/901289e1ea4dba1b252b360543f2e7f6fc106e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "html_url": "https://github.com/rust-lang/rust/commit/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4d64a01a3411974390fd1e26c083c9e692d9c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4d64a01a3411974390fd1e26c083c9e692d9c6", "html_url": "https://github.com/rust-lang/rust/commit/6e4d64a01a3411974390fd1e26c083c9e692d9c6"}, {"sha": "985eba08a558bae9a9042b65df59340d227d7673", "url": "https://api.github.com/repos/rust-lang/rust/commits/985eba08a558bae9a9042b65df59340d227d7673", "html_url": "https://github.com/rust-lang/rust/commit/985eba08a558bae9a9042b65df59340d227d7673"}], "stats": {"total": 99, "additions": 97, "deletions": 2}, "files": [{"sha": "1713fda031f6d5b23b611debaf78ab490b5e5db7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "patch": "@@ -899,6 +899,7 @@ All notable changes to this project will be documented in this file.\n [`useless_let_if_seq`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq\n [`useless_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute\n [`useless_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec\n+[`vec_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_box\n [`verbose_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask\n [`while_immutable_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_immutable_condition\n [`while_let_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop"}, {"sha": "5c5d32e4a89d8048aefcf7f1e2ae245fea5c78d3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 290 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 291 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "f4b5edee84c5a44ae5f3b3dcc81202f82fd368a9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "patch": "@@ -766,6 +766,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::UNIT_ARG,\n         types::UNIT_CMP,\n         types::UNNECESSARY_CAST,\n+        types::VEC_BOX,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,\n@@ -931,6 +932,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::TYPE_COMPLEXITY,\n         types::UNIT_ARG,\n         types::UNNECESSARY_CAST,\n+        types::VEC_BOX,\n         unused_label::UNUSED_LABEL,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);"}, {"sha": "dfa4cfdcf94f7a957c06fe034f01a25ab2b0ae24", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "patch": "@@ -68,6 +68,34 @@ declare_clippy_lint! {\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n \n+/// **What it does:** Checks for use of `Vec<Box<T>>` where T: Sized anywhere in the code.\n+///\n+/// **Why is this bad?** `Vec` already keeps its contents in a separate area on\n+/// the heap. So if you `Box` its contents, you just add another level of indirection.\n+///\n+/// **Known problems:** Vec<Box<T: Sized>> makes sense if T is a large type (see #3530,\n+/// 1st comment).\n+///\n+/// **Example:**\n+/// ```rust\n+/// struct X {\n+///     values: Vec<Box<i32>>,\n+/// }\n+/// ```\n+///\n+/// Better:\n+///\n+/// ```rust\n+/// struct X {\n+///     values: Vec<i32>,\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub VEC_BOX,\n+    complexity,\n+    \"usage of `Vec<Box<T>>` where T: Sized, vector elements are already on the heap\"\n+}\n+\n /// **What it does:** Checks for use of `Option<Option<_>>` in function signatures and type\n /// definitions\n ///\n@@ -148,7 +176,7 @@ declare_clippy_lint! {\n \n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_VEC, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n+        lint_array!(BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n     }\n }\n \n@@ -238,6 +266,43 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                         );\n                         return; // don't recurse into the type\n                     }\n+                } else if match_def_path(cx.tcx, def_id, &paths::VEC) {\n+                    if_chain! {\n+                        // Get the _ part of Vec<_>\n+                        if let Some(ref last) = last_path_segment(qpath).args;\n+                        if let Some(ty) = last.args.iter().find_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            GenericArg::Lifetime(_) => None,\n+                        });\n+                        // ty is now _ at this point\n+                        if let TyKind::Path(ref ty_qpath) = ty.node;\n+                        let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n+                        if let Some(def_id) = opt_def_id(def);\n+                        if Some(def_id) == cx.tcx.lang_items().owned_box();\n+                        // At this point, we know ty is Box<T>, now get T\n+                        if let Some(ref last) = last_path_segment(ty_qpath).args;\n+                        if let Some(ty) = last.args.iter().find_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            GenericArg::Lifetime(_) => None,\n+                        });\n+                        if let TyKind::Path(ref ty_qpath) = ty.node;\n+                        let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n+                        if let Some(def_id) = opt_def_id(def);\n+                        let boxed_type = cx.tcx.type_of(def_id);\n+                        if boxed_type.is_sized(cx.tcx.at(ty.span), cx.param_env);\n+                        then {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                VEC_BOX,\n+                                ast_ty.span,\n+                                \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n+                                \"try\",\n+                                format!(\"Vec<{}>\", boxed_type),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                    }\n                 } else if match_def_path(cx.tcx, def_id, &paths::OPTION) {\n                     if match_type_parameter(cx, qpath, &paths::OPTION) {\n                         span_lint("}, {"sha": "d740f95edfe27fbf4e32223ca8a1de8358b1b4c7", "filename": "tests/ui/vec_box_sized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/tests%2Fui%2Fvec_box_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/tests%2Fui%2Fvec_box_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.rs?ref=a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "patch": "@@ -0,0 +1,17 @@\n+struct SizedStruct {\n+\t_a: i32,\n+}\n+\n+struct UnsizedStruct {\n+\t_a: [i32],\n+}\n+\n+struct StructWithVecBox {\n+\tsized_type: Vec<Box<SizedStruct>>,\n+}\n+\n+struct StructWithVecBoxButItsUnsized {\n+\tunsized_type: Vec<Box<UnsizedStruct>>,\n+}\n+\n+fn main() {}"}, {"sha": "7f4bdfb5aed95a1ca477fa42bd2d376a60ea8ef7", "filename": "tests/ui/vec_box_sized.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/tests%2Fui%2Fvec_box_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d/tests%2Fui%2Fvec_box_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.stderr?ref=a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "patch": "@@ -0,0 +1,10 @@\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+  --> $DIR/vec_box_sized.rs:10:14\n+   |\n+10 |     sized_type: Vec<Box<SizedStruct>>,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `Vec<SizedStruct>`\n+   |\n+   = note: `-D clippy::vec-box` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}