{"sha": "f028636b1aec09366973468e8c347c1cf8291561", "node_id": "C_kwDOAAsO6NoAKGYwMjg2MzZiMWFlYzA5MzY2OTczNDY4ZThjMzQ3YzFjZjgyOTE1NjE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T19:21:43Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T19:33:33Z"}, "message": "Sprinkle some whitespace & uses", "tree": {"sha": "fc31391de6080c1c147eae61a641ae049f5648c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc31391de6080c1c147eae61a641ae049f5648c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f028636b1aec09366973468e8c347c1cf8291561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f028636b1aec09366973468e8c347c1cf8291561", "html_url": "https://github.com/rust-lang/rust/commit/f028636b1aec09366973468e8c347c1cf8291561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f028636b1aec09366973468e8c347c1cf8291561/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "html_url": "https://github.com/rust-lang/rust/commit/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "e69a11dae0a9d54cf838dd9b21e4cb60c87ee88e", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f028636b1aec09366973468e8c347c1cf8291561/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f028636b1aec09366973468e8c347c1cf8291561/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=f028636b1aec09366973468e8c347c1cf8291561", "patch": "@@ -13,7 +13,7 @@\n //! The tag must implement the `Tag` trait. We assert that the tag and `Pointer`\n //! are compatible at compile time.\n \n-use std::mem::ManuallyDrop;\n+use std::mem::{self, ManuallyDrop};\n use std::ops::Deref;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -104,14 +104,17 @@ pub unsafe trait Tag: Copy {\n \n unsafe impl<T> Pointer for Box<T> {\n     const BITS: usize = bits_for::<Self::Target>();\n+\n     #[inline]\n     fn into_usize(self) -> usize {\n         Box::into_raw(self) as usize\n     }\n+\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         Box::from_raw(ptr as *mut T)\n     }\n+\n     unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: usize, f: F) -> R {\n         let raw = ManuallyDrop::new(Self::from_usize(ptr));\n         f(&raw)\n@@ -120,14 +123,17 @@ unsafe impl<T> Pointer for Box<T> {\n \n unsafe impl<T> Pointer for Rc<T> {\n     const BITS: usize = bits_for::<Self::Target>();\n+\n     #[inline]\n     fn into_usize(self) -> usize {\n         Rc::into_raw(self) as usize\n     }\n+\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         Rc::from_raw(ptr as *const T)\n     }\n+\n     unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: usize, f: F) -> R {\n         let raw = ManuallyDrop::new(Self::from_usize(ptr));\n         f(&raw)\n@@ -136,14 +142,17 @@ unsafe impl<T> Pointer for Rc<T> {\n \n unsafe impl<T> Pointer for Arc<T> {\n     const BITS: usize = bits_for::<Self::Target>();\n+\n     #[inline]\n     fn into_usize(self) -> usize {\n         Arc::into_raw(self) as usize\n     }\n+\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         Arc::from_raw(ptr as *const T)\n     }\n+\n     unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: usize, f: F) -> R {\n         let raw = ManuallyDrop::new(Self::from_usize(ptr));\n         f(&raw)\n@@ -152,14 +161,17 @@ unsafe impl<T> Pointer for Arc<T> {\n \n unsafe impl<'a, T: 'a> Pointer for &'a T {\n     const BITS: usize = bits_for::<Self::Target>();\n+\n     #[inline]\n     fn into_usize(self) -> usize {\n         self as *const T as usize\n     }\n+\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         &*(ptr as *const T)\n     }\n+\n     unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: usize, f: F) -> R {\n         f(&*(&ptr as *const usize as *const Self))\n     }\n@@ -183,7 +195,7 @@ unsafe impl<'a, T: 'a> Pointer for &'a mut T {\n /// Returns the number of bits available for use for tags in a pointer to `T`\n /// (this is based on `T`'s alignment).\n pub const fn bits_for<T>() -> usize {\n-    let bits = std::mem::align_of::<T>().trailing_zeros();\n+    let bits = mem::align_of::<T>().trailing_zeros();\n \n     // This is a replacement for `.try_into().unwrap()` unavailable in `const`\n     // (it's fine to make an assert here, since this is only called in compile time)"}, {"sha": "d0c2b914584931d763d33c52bc4e7b16cc2a6378", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f028636b1aec09366973468e8c347c1cf8291561/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f028636b1aec09366973468e8c347c1cf8291561/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=f028636b1aec09366973468e8c347c1cf8291561", "patch": "@@ -3,6 +3,7 @@ use crate::stable_hasher::{HashStable, StableHasher};\n use std::fmt;\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n+use std::ops::{Deref, DerefMut};\n \n /// A `Copy` TaggedPtr.\n ///\n@@ -73,6 +74,7 @@ where\n     pub(super) fn pointer_raw(&self) -> usize {\n         self.packed.get() << T::BITS\n     }\n+\n     pub fn pointer(self) -> P\n     where\n         P: Copy,\n@@ -83,21 +85,25 @@ where\n         // P: Copy\n         unsafe { P::from_usize(self.pointer_raw()) }\n     }\n+\n     pub fn pointer_ref(&self) -> &P::Target {\n         // SAFETY: pointer_raw returns the original pointer\n         unsafe { std::mem::transmute_copy(&self.pointer_raw()) }\n     }\n+\n     pub fn pointer_mut(&mut self) -> &mut P::Target\n     where\n-        P: std::ops::DerefMut,\n+        P: DerefMut,\n     {\n         // SAFETY: pointer_raw returns the original pointer\n         unsafe { std::mem::transmute_copy(&self.pointer_raw()) }\n     }\n+\n     #[inline]\n     pub fn tag(&self) -> T {\n         unsafe { T::from_usize(self.packed.get() >> Self::TAG_BIT_SHIFT) }\n     }\n+\n     #[inline]\n     pub fn set_tag(&mut self, tag: T) {\n         let mut packed = self.packed.get();\n@@ -109,20 +115,21 @@ where\n     }\n }\n \n-impl<P, T, const COMPARE_PACKED: bool> std::ops::Deref for CopyTaggedPtr<P, T, COMPARE_PACKED>\n+impl<P, T, const COMPARE_PACKED: bool> Deref for CopyTaggedPtr<P, T, COMPARE_PACKED>\n where\n     P: Pointer,\n     T: Tag,\n {\n     type Target = P::Target;\n+\n     fn deref(&self) -> &Self::Target {\n         self.pointer_ref()\n     }\n }\n \n-impl<P, T, const COMPARE_PACKED: bool> std::ops::DerefMut for CopyTaggedPtr<P, T, COMPARE_PACKED>\n+impl<P, T, const COMPARE_PACKED: bool> DerefMut for CopyTaggedPtr<P, T, COMPARE_PACKED>\n where\n-    P: Pointer + std::ops::DerefMut,\n+    P: Pointer + DerefMut,\n     T: Tag,\n {\n     fn deref_mut(&mut self) -> &mut Self::Target {"}]}