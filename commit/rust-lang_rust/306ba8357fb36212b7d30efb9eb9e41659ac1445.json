{"sha": "306ba8357fb36212b7d30efb9eb9e41659ac1445", "node_id": "C_kwDOAAsO6NoAKDMwNmJhODM1N2ZiMzYyMTJiN2QzMGVmYjllYjllNDE2NTlhYzE0NDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-05T20:17:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-05T20:17:08Z"}, "message": "Auto merge of #95035 - m-ou-se:futex-locks-on-linux, r=Amanieu\n\nReplace Linux Mutex and Condvar with futex based ones.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93740", "tree": {"sha": "a5a3748d3ff4d00c458d2c064eee69865c1306df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5a3748d3ff4d00c458d2c064eee69865c1306df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/306ba8357fb36212b7d30efb9eb9e41659ac1445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/306ba8357fb36212b7d30efb9eb9e41659ac1445", "html_url": "https://github.com/rust-lang/rust/commit/306ba8357fb36212b7d30efb9eb9e41659ac1445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/306ba8357fb36212b7d30efb9eb9e41659ac1445/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f262ca12aac76152c4b46cefcf8300f0249a5eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f262ca12aac76152c4b46cefcf8300f0249a5eb2", "html_url": "https://github.com/rust-lang/rust/commit/f262ca12aac76152c4b46cefcf8300f0249a5eb2"}, {"sha": "650315ee8801e650c049312a899de4202f54a701", "url": "https://api.github.com/repos/rust-lang/rust/commits/650315ee8801e650c049312a899de4202f54a701", "html_url": "https://github.com/rust-lang/rust/commit/650315ee8801e650c049312a899de4202f54a701"}], "stats": {"total": 292, "additions": 251, "deletions": 41}, "files": [{"sha": "f7a00676daaed7e7de26fbfd4a9ed1c4824287c3", "filename": "library/std/src/sync/condvar/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsync%2Fcondvar%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsync%2Fcondvar%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar%2Ftests.rs?ref=306ba8357fb36212b7d30efb9eb9e41659ac1445", "patch": "@@ -191,7 +191,7 @@ fn wait_timeout_wake() {\n \n #[test]\n #[should_panic]\n-#[cfg_attr(not(unix), ignore)]\n+#[cfg(all(unix, not(target_os = \"linux\"), not(target_os = \"android\")))]\n fn two_mutexes() {\n     let m = Arc::new(Mutex::new(()));\n     let m2 = m.clone();"}, {"sha": "c61d948fb601dbbff54a9ec3799ca1a1662ea264", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=306ba8357fb36212b7d30efb9eb9e41659ac1445", "patch": "@@ -4,31 +4,46 @@\n     all(target_os = \"emscripten\", target_feature = \"atomics\")\n ))]\n \n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-use crate::convert::TryInto;\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-use crate::ptr::null;\n use crate::sync::atomic::AtomicI32;\n use crate::time::Duration;\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n-    let timespec = timeout.and_then(|d| {\n-        Some(libc::timespec {\n-            // Sleep forever if the timeout is longer than fits in a timespec.\n-            tv_sec: d.as_secs().try_into().ok()?,\n-            // This conversion never truncates, as subsec_nanos is always <1e9.\n-            tv_nsec: d.subsec_nanos() as _,\n-        })\n-    });\n-    unsafe {\n-        libc::syscall(\n-            libc::SYS_futex,\n-            futex as *const AtomicI32,\n-            libc::FUTEX_WAIT | libc::FUTEX_PRIVATE_FLAG,\n-            expected,\n-            timespec.as_ref().map_or(null(), |d| d as *const libc::timespec),\n-        );\n+pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) -> bool {\n+    use super::time::Timespec;\n+    use crate::ptr::null;\n+    use crate::sync::atomic::Ordering::Relaxed;\n+\n+    // Calculate the timeout as an absolute timespec.\n+    //\n+    // Overflows are rounded up to an infinite timeout (None).\n+    let timespec =\n+        timeout.and_then(|d| Some(Timespec::now(libc::CLOCK_MONOTONIC).checked_add_duration(&d)?));\n+\n+    loop {\n+        // No need to wait if the value already changed.\n+        if futex.load(Relaxed) != expected {\n+            return true;\n+        }\n+\n+        // Use FUTEX_WAIT_BITSET rather than FUTEX_WAIT to be able to give an\n+        // absolute time rather than a relative time.\n+        let r = unsafe {\n+            libc::syscall(\n+                libc::SYS_futex,\n+                futex as *const AtomicI32,\n+                libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,\n+                expected,\n+                timespec.as_ref().map_or(null(), |t| &t.t as *const libc::timespec),\n+                null::<u32>(), // This argument is unused for FUTEX_WAIT_BITSET.\n+                !0u32,         // A full bitmask, to make it behave like a regular FUTEX_WAIT.\n+            )\n+        };\n+\n+        match (r < 0).then(super::os::errno) {\n+            Some(libc::ETIMEDOUT) => return false,\n+            Some(libc::EINTR) => continue,\n+            _ => return true,\n+        }\n     }\n }\n \n@@ -65,6 +80,18 @@ pub fn futex_wake(futex: &AtomicI32) {\n     }\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+pub fn futex_wake_all(futex: &AtomicI32) {\n+    unsafe {\n+        libc::syscall(\n+            libc::SYS_futex,\n+            futex as *const AtomicI32,\n+            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,\n+            i32::MAX,\n+        );\n+    }\n+}\n+\n #[cfg(target_os = \"emscripten\")]\n pub fn futex_wake(futex: &AtomicI32) {\n     extern \"C\" {"}, {"sha": "630351d0dc278e7fd283f4422745da28e2340d3e", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=306ba8357fb36212b7d30efb9eb9e41659ac1445", "patch": "@@ -0,0 +1,164 @@\n+use crate::sync::atomic::{\n+    AtomicI32,\n+    Ordering::{Acquire, Relaxed, Release},\n+};\n+use crate::sys::futex::{futex_wait, futex_wake, futex_wake_all};\n+use crate::time::Duration;\n+\n+pub type MovableMutex = Mutex;\n+pub type MovableCondvar = Condvar;\n+\n+pub struct Mutex {\n+    /// 0: unlocked\n+    /// 1: locked, no other threads waiting\n+    /// 2: locked, and other threads waiting (contended)\n+    futex: AtomicI32,\n+}\n+\n+impl Mutex {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { futex: AtomicI32::new(0) }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn init(&mut self) {}\n+\n+    #[inline]\n+    pub unsafe fn destroy(&self) {}\n+\n+    #[inline]\n+    pub unsafe fn try_lock(&self) -> bool {\n+        self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_ok()\n+    }\n+\n+    #[inline]\n+    pub unsafe fn lock(&self) {\n+        if self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_err() {\n+            self.lock_contended();\n+        }\n+    }\n+\n+    #[cold]\n+    fn lock_contended(&self) {\n+        // Spin first to speed things up if the lock is released quickly.\n+        let mut state = self.spin();\n+\n+        // If it's unlocked now, attempt to take the lock\n+        // without marking it as contended.\n+        if state == 0 {\n+            match self.futex.compare_exchange(0, 1, Acquire, Relaxed) {\n+                Ok(_) => return, // Locked!\n+                Err(s) => state = s,\n+            }\n+        }\n+\n+        loop {\n+            // Put the lock in contended state.\n+            // We avoid an unnecessary write if it as already set to 2,\n+            // to be friendlier for the caches.\n+            if state != 2 && self.futex.swap(2, Acquire) == 0 {\n+                // We changed it from 0 to 2, so we just succesfully locked it.\n+                return;\n+            }\n+\n+            // Wait for the futex to change state, assuming it is still 2.\n+            futex_wait(&self.futex, 2, None);\n+\n+            // Spin again after waking up.\n+            state = self.spin();\n+        }\n+    }\n+\n+    fn spin(&self) -> i32 {\n+        let mut spin = 100;\n+        loop {\n+            // We only use `load` (and not `swap` or `compare_exchange`)\n+            // while spinning, to be easier on the caches.\n+            let state = self.futex.load(Relaxed);\n+\n+            // We stop spinning when the mutex is unlocked (0),\n+            // but also when it's contended (2).\n+            if state != 1 || spin == 0 {\n+                return state;\n+            }\n+\n+            crate::hint::spin_loop();\n+            spin -= 1;\n+        }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn unlock(&self) {\n+        if self.futex.swap(0, Release) == 2 {\n+            // We only wake up one thread. When that thread locks the mutex, it\n+            // will mark the mutex as contended (2) (see lock_contended above),\n+            // which makes sure that any other waiting threads will also be\n+            // woken up eventually.\n+            self.wake();\n+        }\n+    }\n+\n+    #[cold]\n+    fn wake(&self) {\n+        futex_wake(&self.futex);\n+    }\n+}\n+\n+pub struct Condvar {\n+    // The value of this atomic is simply incremented on every notification.\n+    // This is used by `.wait()` to not miss any notifications after\n+    // unlocking the mutex and before waiting for notifications.\n+    futex: AtomicI32,\n+}\n+\n+impl Condvar {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { futex: AtomicI32::new(0) }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn init(&mut self) {}\n+\n+    #[inline]\n+    pub unsafe fn destroy(&self) {}\n+\n+    // All the memory orderings here are `Relaxed`,\n+    // because synchronization is done by unlocking and locking the mutex.\n+\n+    pub unsafe fn notify_one(&self) {\n+        self.futex.fetch_add(1, Relaxed);\n+        futex_wake(&self.futex);\n+    }\n+\n+    pub unsafe fn notify_all(&self) {\n+        self.futex.fetch_add(1, Relaxed);\n+        futex_wake_all(&self.futex);\n+    }\n+\n+    pub unsafe fn wait(&self, mutex: &Mutex) {\n+        self.wait_optional_timeout(mutex, None);\n+    }\n+\n+    pub unsafe fn wait_timeout(&self, mutex: &Mutex, timeout: Duration) -> bool {\n+        self.wait_optional_timeout(mutex, Some(timeout))\n+    }\n+\n+    unsafe fn wait_optional_timeout(&self, mutex: &Mutex, timeout: Option<Duration>) -> bool {\n+        // Examine the notification counter _before_ we unlock the mutex.\n+        let futex_value = self.futex.load(Relaxed);\n+\n+        // Unlock the mutex before going to sleep.\n+        mutex.unlock();\n+\n+        // Wait, but only if there hasn't been any\n+        // notification since we unlocked the mutex.\n+        let r = futex_wait(&self.futex, futex_value, timeout);\n+\n+        // Lock the mutex again.\n+        mutex.lock();\n+\n+        r\n+    }\n+}"}, {"sha": "30e9f407eec4cecaa73b77ca164d48bd3b580ea4", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=306ba8357fb36212b7d30efb9eb9e41659ac1445", "patch": "@@ -1,8 +1,24 @@\n-mod pthread_condvar;\n-mod pthread_mutex;\n-mod pthread_remutex;\n-mod pthread_rwlock;\n-pub use pthread_condvar::{Condvar, MovableCondvar};\n-pub use pthread_mutex::{MovableMutex, Mutex};\n-pub use pthread_remutex::ReentrantMutex;\n-pub use pthread_rwlock::{MovableRWLock, RWLock};\n+cfg_if::cfg_if! {\n+    if #[cfg(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+    ))] {\n+        mod futex;\n+        #[allow(dead_code)]\n+        mod pthread_mutex; // Only used for PthreadMutexAttr, needed by pthread_remutex.\n+        mod pthread_remutex; // FIXME: Implement this using a futex\n+        mod pthread_rwlock; // FIXME: Implement this using a futex\n+        pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n+        pub use pthread_remutex::ReentrantMutex;\n+        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+    } else {\n+        mod pthread_mutex;\n+        mod pthread_remutex;\n+        mod pthread_rwlock;\n+        mod pthread_condvar;\n+        pub use pthread_mutex::{Mutex, MovableMutex};\n+        pub use pthread_remutex::ReentrantMutex;\n+        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+        pub use pthread_condvar::{Condvar, MovableCondvar};\n+    }\n+}"}, {"sha": "498c94d0cdcba2bad36d2f203ccf3580d0704dd0", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306ba8357fb36212b7d30efb9eb9e41659ac1445/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=306ba8357fb36212b7d30efb9eb9e41659ac1445", "patch": "@@ -9,16 +9,16 @@ use crate::convert::TryInto;\n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n #[derive(Copy, Clone)]\n-struct Timespec {\n-    t: libc::timespec,\n+pub(in crate::sys::unix) struct Timespec {\n+    pub t: libc::timespec,\n }\n \n impl Timespec {\n     const fn zero() -> Timespec {\n         Timespec { t: libc::timespec { tv_sec: 0, tv_nsec: 0 } }\n     }\n \n-    fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n+    pub fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n         if self >= other {\n             // NOTE(eddyb) two aspects of this `if`-`else` are required for LLVM\n             // to optimize it into a branchless form (see also #75545):\n@@ -51,7 +51,7 @@ impl Timespec {\n         }\n     }\n \n-    fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n@@ -68,7 +68,7 @@ impl Timespec {\n         Some(Timespec { t: libc::timespec { tv_sec: secs, tv_nsec: nsec as _ } })\n     }\n \n-    fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n@@ -266,6 +266,7 @@ mod inner {\n #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n mod inner {\n     use crate::fmt;\n+    use crate::mem::MaybeUninit;\n     use crate::sys::cvt;\n     use crate::time::Duration;\n \n@@ -285,7 +286,7 @@ mod inner {\n \n     impl Instant {\n         pub fn now() -> Instant {\n-            Instant { t: now(libc::CLOCK_MONOTONIC) }\n+            Instant { t: Timespec::now(libc::CLOCK_MONOTONIC) }\n         }\n \n         pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n@@ -312,7 +313,7 @@ mod inner {\n \n     impl SystemTime {\n         pub fn now() -> SystemTime {\n-            SystemTime { t: now(libc::CLOCK_REALTIME) }\n+            SystemTime { t: Timespec::now(libc::CLOCK_REALTIME) }\n         }\n \n         pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n@@ -348,9 +349,11 @@ mod inner {\n     #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\"))]\n     pub type clock_t = libc::c_ulong;\n \n-    fn now(clock: clock_t) -> Timespec {\n-        let mut t = Timespec { t: libc::timespec { tv_sec: 0, tv_nsec: 0 } };\n-        cvt(unsafe { libc::clock_gettime(clock, &mut t.t) }).unwrap();\n-        t\n+    impl Timespec {\n+        pub fn now(clock: clock_t) -> Timespec {\n+            let mut t = MaybeUninit::uninit();\n+            cvt(unsafe { libc::clock_gettime(clock, t.as_mut_ptr()) }).unwrap();\n+            Timespec { t: unsafe { t.assume_init() } }\n+        }\n     }\n }"}]}