{"sha": "9097410b433c0d7c7dca8f9296161b3074a8d21e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOTc0MTBiNDMzYzBkN2M3ZGNhOGY5Mjk2MTYxYjMwNzRhOGQyMWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-06T00:04:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-06T00:04:51Z"}, "message": "Fix tutorial tests", "tree": {"sha": "f1b24bf386dddd3496c7f976b8c1bcb69979b738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b24bf386dddd3496c7f976b8c1bcb69979b738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9097410b433c0d7c7dca8f9296161b3074a8d21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9097410b433c0d7c7dca8f9296161b3074a8d21e", "html_url": "https://github.com/rust-lang/rust/commit/9097410b433c0d7c7dca8f9296161b3074a8d21e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9097410b433c0d7c7dca8f9296161b3074a8d21e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48", "html_url": "https://github.com/rust-lang/rust/commit/0ddae5ec7dc2c1a4237bb091e52fff5940f18b48"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "ae1f52a27972c3d84b167a6fd21667906e56cf02", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9097410b433c0d7c7dca8f9296161b3074a8d21e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9097410b433c0d7c7dca8f9296161b3074a8d21e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9097410b433c0d7c7dca8f9296161b3074a8d21e", "patch": "@@ -1330,7 +1330,7 @@ This code creates a closure that adds a given string to its argument,\n returns it from a function, and then calls it:\n \n ~~~~\n-use std;\n+extern mod std;\n \n fn mk_appender(suffix: ~str) -> fn@(~str) -> ~str {\n     return fn@(s: ~str) -> ~str { s + suffix };\n@@ -1680,9 +1680,10 @@ content to the `poultry` module itself.\n \n ## Using other crates\n \n-Having compiled a crate that contains the `#[crate_type = \"lib\"]` attribute,\n-you can use it in another crate with a `use` directive. We've already seen\n-`use std` in several of the examples, which loads in the [standard library][std].\n+Having compiled a crate that contains the `#[crate_type = \"lib\"]`\n+attribute, you can use it in another crate with a `use`\n+directive. We've already seen `extern mod std` in several of the\n+examples, which loads in the [standard library][std].\n \n [std]: http://doc.rust-lang.org/doc/std/index/General.html\n \n@@ -1738,7 +1739,7 @@ fn world() -> ~str { ~\"world\" }\n \n ~~~~ {.ignore}\n // main.rs\n-use std;\n+extern mod std;\n use mylib;\n fn main() { io::println(~\"hello \" + mylib::world()); }\n ~~~~\n@@ -2254,7 +2255,7 @@ Tests can be interspersed with other code, and annotated with the\n ~~~~{.xfail-test}\n # // FIXME: xfailed because test_twice is a #[test] function it's not\n # // getting compiled\n-use std;\n+extern mod std;\n \n fn twice(x: int) -> int { x + x }\n \n@@ -2302,7 +2303,7 @@ To indicate that a test is supposed to fail instead of pass, you can\n give it a `#[should_fail]` attribute.\n \n ~~~~\n-use std;\n+extern mod std;\n \n fn divide(a: float, b: float) -> float {\n     if b == 0f { fail; }"}, {"sha": "0e8792c244b90d7def1b628f989d552835e93220", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9097410b433c0d7c7dca8f9296161b3074a8d21e/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/9097410b433c0d7c7dca8f9296161b3074a8d21e/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=9097410b433c0d7c7dca8f9296161b3074a8d21e", "patch": "@@ -51,8 +51,8 @@\n         if not ignore:\n             if not re.search(r\"\\bfn main\\b\", block):\n                 block = \"fn main() {\\n\" + block + \"\\n}\\n\"\n-            if not re.search(r\"\\buse std\\b\", block):\n-                block = \"use std;\\n\" + block;\n+            if not re.search(r\"\\bextern mod std\\b\", block):\n+                block = \"extern mod std;\\n\" + block;\n             if xfail:\n                 block = \"// xfail-test\\n\" + block\n             filename = (dest + \"/\" + str(chapter)"}]}