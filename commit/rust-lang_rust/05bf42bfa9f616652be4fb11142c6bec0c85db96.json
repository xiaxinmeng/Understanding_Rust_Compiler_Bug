{"sha": "05bf42bfa9f616652be4fb11142c6bec0c85db96", "node_id": "C_kwDOAAsO6NoAKDA1YmY0MmJmYTlmNjE2NjUyYmU0ZmIxMTE0MmM2YmVjMGM4NWRiOTY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-21T17:58:32Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-22T00:48:37Z"}, "message": "PR feedback: better comments and debug asserts", "tree": {"sha": "51228055361e532f6186481cfd61383069524842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51228055361e532f6186481cfd61383069524842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05bf42bfa9f616652be4fb11142c6bec0c85db96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05bf42bfa9f616652be4fb11142c6bec0c85db96", "html_url": "https://github.com/rust-lang/rust/commit/05bf42bfa9f616652be4fb11142c6bec0c85db96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05bf42bfa9f616652be4fb11142c6bec0c85db96/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "url": "https://api.github.com/repos/rust-lang/rust/commits/977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "html_url": "https://github.com/rust-lang/rust/commit/977ac5b4dd48aab9c41d380a3fb141d9c120ad29"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "6f46974ea0053eb049442ecf90b8c936a9386306", "filename": "compiler/rustc_mir_transform/src/prettify.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05bf42bfa9f616652be4fb11142c6bec0c85db96/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bf42bfa9f616652be4fb11142c6bec0c85db96/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs?ref=05bf42bfa9f616652be4fb11142c6bec0c85db96", "patch": "@@ -11,6 +11,10 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n \n+/// Rearranges the basic blocks into a *reverse post-order*.\n+///\n+/// Thus after this pass, all the successors of a block are later than it in the\n+/// `IndexVec`, unless that successor is a back-edge (such as from a loop).\n pub struct ReorderBasicBlocks;\n \n impl<'tcx> MirPass<'tcx> for ReorderBasicBlocks {\n@@ -33,6 +37,12 @@ impl<'tcx> MirPass<'tcx> for ReorderBasicBlocks {\n     }\n }\n \n+/// Rearranges the locals into *use* order.\n+///\n+/// Thus after this pass, a local with a smaller [`Location`] where it was first\n+/// assigned or referenced will have a smaller number.\n+///\n+/// (Does not reorder arguments nor the [`RETURN_PLACE`].)\n pub struct ReorderLocals;\n \n impl<'tcx> MirPass<'tcx> for ReorderLocals {\n@@ -45,8 +55,8 @@ impl<'tcx> MirPass<'tcx> for ReorderLocals {\n             LocalFinder { map: IndexVec::new(), seen: BitSet::new_empty(body.local_decls.len()) };\n \n         // We can't reorder the return place or the arguments\n-        for i in 0..=body.arg_count {\n-            finder.track(Local::from_usize(i));\n+        for local in (0..=body.arg_count).map(Local::from_usize) {\n+            finder.track(local);\n         }\n \n         for (bb, bbd) in body.basic_blocks.iter_enumerated() {\n@@ -64,7 +74,11 @@ impl<'tcx> MirPass<'tcx> for ReorderLocals {\n         }\n \n         let mut updater = LocalUpdater { map: finder.map.invert_bijective_mapping(), tcx };\n-        debug_assert_eq!(updater.map[RETURN_PLACE], RETURN_PLACE);\n+\n+        for local in (0..=body.arg_count).map(Local::from_usize) {\n+            debug_assert_eq!(updater.map[local], local);\n+        }\n+\n         updater.visit_body_preserves_cfg(body);\n \n         permute(&mut body.local_decls, &updater.map);\n@@ -112,6 +126,8 @@ impl LocalFinder {\n \n impl<'tcx> Visitor<'tcx> for LocalFinder {\n     fn visit_local(&mut self, l: Local, context: PlaceContext, _location: Location) {\n+        // Exclude non-uses to keep `StorageLive` from controlling where we put\n+        // a `Local`, since it might not actually be assigned until much later.\n         if context.is_use() {\n             self.track(l);\n         }"}]}