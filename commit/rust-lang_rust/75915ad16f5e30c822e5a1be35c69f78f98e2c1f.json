{"sha": "75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OTE1YWQxNmY1ZTMwYzgyMmU1YTFiZTM1YzY5Zjc4Zjk4ZTJjMWY=", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-07-20T20:35:26Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-08-04T17:38:17Z"}, "message": "Lint against named asm labels", "tree": {"sha": "bfc833c134625c3905a86b9ba041e4895a64c11c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc833c134625c3905a86b9ba041e4895a64c11c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "html_url": "https://github.com/rust-lang/rust/commit/75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3dc0464422ebadf3b8647f591bcf6e3107e805", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3dc0464422ebadf3b8647f591bcf6e3107e805", "html_url": "https://github.com/rust-lang/rust/commit/7f3dc0464422ebadf3b8647f591bcf6e3107e805"}], "stats": {"total": 512, "additions": 506, "deletions": 6}, "files": [{"sha": "9a82561db5e657362bf5f56d045232851c06e325", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_session::lint;\n+use rustc_session::lint::{self, BuiltinLintDiagnostics};\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{InnerSpan, Span};\n@@ -397,7 +397,11 @@ fn parse_reg<'a>(\n     Ok(result)\n }\n \n-fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::InlineAsm> {\n+fn expand_preparsed_asm(\n+    ecx: &mut ExtCtxt<'_>,\n+    args: AsmArgs,\n+    is_local_asm: bool,\n+) -> Option<ast::InlineAsm> {\n     let mut template = vec![];\n     // Register operands are implicitly used since they are not allowed to be\n     // referenced in the template string.\n@@ -469,6 +473,70 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             }\n         }\n \n+        if is_local_asm {\n+            let find_label_span = |needle: &str| -> Option<Span> {\n+                if let Some(snippet) = &template_snippet {\n+                    if let Some(pos) = snippet.find(needle) {\n+                        let end = pos\n+                            + &snippet[pos..]\n+                                .find(|c| c == ':')\n+                                .unwrap_or(snippet[pos..].len() - 1);\n+                        let inner = InnerSpan::new(pos, end);\n+                        return Some(template_sp.from_inner(inner));\n+                    }\n+                }\n+\n+                None\n+            };\n+\n+            let mut found_labels = Vec::new();\n+\n+            // A semicolon might not actually be specified as a separator for all targets, but it seems like LLVM accepts it always\n+            let statements = template_str.split(|c| matches!(c, '\\n' | ';'));\n+            for statement in statements {\n+                let mut start_idx = 0;\n+                for (idx, _) in statement.match_indices(':') {\n+                    let possible_label = statement[start_idx..idx].trim();\n+                    let mut chars = possible_label.chars();\n+                    if let Some(c) = chars.next() {\n+                        // A label starts with an alphabetic character and continues with alphanumeric characters\n+                        if c.is_alphabetic() {\n+                            if chars.all(char::is_alphanumeric) {\n+                                found_labels.push(possible_label);\n+                            }\n+                        }\n+                    }\n+\n+                    start_idx = idx + 1;\n+                }\n+            }\n+\n+            if found_labels.len() > 0 {\n+                let spans =\n+                    found_labels.into_iter().filter_map(find_label_span).collect::<Vec<Span>>();\n+                if spans.len() > 0 {\n+                    for span in spans.into_iter() {\n+                        ecx.parse_sess().buffer_lint_with_diagnostic(\n+                            lint::builtin::NAMED_ASM_LABELS,\n+                            span,\n+                            ecx.current_expansion.lint_node_id,\n+                            \"do not use named labels in inline assembly\",\n+                            BuiltinLintDiagnostics::NamedAsmLabel(\"Only GAS local labels of the form `N:` where N is a number may be used in inline asm\".to_string()),\n+                        );\n+                    }\n+                } else {\n+                    // If there were labels but we couldn't find a span, combine the warnings and use the template span\n+                    ecx.parse_sess().buffer_lint_with_diagnostic(\n+                        lint::builtin::NAMED_ASM_LABELS,\n+                        template_span,\n+                        ecx.current_expansion.lint_node_id,\n+                        \"do not use named labels in inline assembly\",\n+                        BuiltinLintDiagnostics::NamedAsmLabel(\"Only GAS local labels of the form `N:` where N is a number may be used in inline asm\".to_string()),\n+                    );\n+                }\n+            }\n+        }\n+\n         // Don't treat raw asm as a format string.\n         if args.options.contains(ast::InlineAsmOptions::RAW) {\n             template.push(ast::InlineAsmTemplatePiece::String(template_str.to_string()));\n@@ -670,7 +738,7 @@ pub fn expand_asm<'cx>(\n ) -> Box<dyn base::MacResult + 'cx> {\n     match parse_args(ecx, sp, tts, false) {\n         Ok(args) => {\n-            let expr = if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n+            let expr = if let Some(inline_asm) = expand_preparsed_asm(ecx, args, true) {\n                 P(ast::Expr {\n                     id: ast::DUMMY_NODE_ID,\n                     kind: ast::ExprKind::InlineAsm(P(inline_asm)),\n@@ -697,7 +765,7 @@ pub fn expand_global_asm<'cx>(\n ) -> Box<dyn base::MacResult + 'cx> {\n     match parse_args(ecx, sp, tts, true) {\n         Ok(args) => {\n-            if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n+            if let Some(inline_asm) = expand_preparsed_asm(ecx, args, false) {\n                 MacEager::items(smallvec![P(ast::Item {\n                     ident: Ident::invalid(),\n                     attrs: Vec::new(),"}, {"sha": "60d9e8e0e71f943a1ff382c76135460148acbd94", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "patch": "@@ -758,6 +758,10 @@ pub trait LintContext: Sized {\n                         Applicability::MachineApplicable\n                     );\n                 }\n+                BuiltinLintDiagnostics::NamedAsmLabel(help) => {\n+                    db.help(&help);\n+                    db.note(\"See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\");\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "88288e1a6a63f1db1eb5dc57f089e17af5e6e8eb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "patch": "@@ -2470,6 +2470,38 @@ declare_lint! {\n     \"incorrect use of inline assembly\",\n }\n \n+declare_lint! {\n+    /// The `named_asm_labels` lint detects the use of named labels in the\n+    /// inline `asm!` macro.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// fn main() {\n+    ///     unsafe {\n+    ///         asm!(\"foo: bar\");\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// LLVM's assembler is allowed to duplicate inline assembly blocks for any\n+    /// reason, for example when it is in a function that gets inlined. Because\n+    /// of this, GNU assembler [local labels] *must* be used instead of labels\n+    /// with a name. Using named labels might cause assembler or linker errors.\n+    ///\n+    /// See the [unstable book] for more details.\n+    ///\n+    /// [local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels\n+    /// [unstable book]: https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels\n+    pub NAMED_ASM_LABELS,\n+    Deny,\n+    \"named labels in inline assembly\",\n+}\n+\n declare_lint! {\n     /// The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\n     /// functions without an explicit unsafe block."}, {"sha": "038e5055a7b15f0b8803ec10bf28cc811cfd874b", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "patch": "@@ -274,15 +274,15 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n }\n \n // Duplicated from rustc_session::config::ExternDepSpec to avoid cyclic dependency\n-#[derive(PartialEq, Debug)]\n+#[derive(PartialEq)]\n pub enum ExternDepSpec {\n     Json(Json),\n     Raw(String),\n }\n \n // This could be a closure, but then implementing derive trait\n // becomes hacky (and it gets allocated).\n-#[derive(PartialEq, Debug)]\n+#[derive(PartialEq)]\n pub enum BuiltinLintDiagnostics {\n     Normal,\n     BareTraitObject(Span, /* is_global */ bool),\n@@ -305,6 +305,7 @@ pub enum BuiltinLintDiagnostics {\n     ReservedPrefix(Span),\n     TrailingMacro(bool, Ident),\n     BreakWithLabelAndLoop(Span),\n+    NamedAsmLabel(String),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "ba277b7aad66f7f223b4c189dca2d4872934b067", "filename": "src/test/ui/asm/named_asm_labels.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/src%2Ftest%2Fui%2Fasm%2Fnamed_asm_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/src%2Ftest%2Fui%2Fasm%2Fnamed_asm_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed_asm_labels.rs?ref=75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "patch": "@@ -0,0 +1,95 @@\n+#![feature(asm, global_asm)]\n+\n+fn main() {\n+    unsafe {\n+        // Basic usage\n+        asm!(\"bar: nop\"); //~ ERROR do not use named labels\n+\n+        // No following asm\n+        asm!(\"abcd:\"); //~ ERROR do not use named labels\n+\n+        // Multiple labels on one line\n+        asm!(\"foo: bar1: nop\");\n+        //~^ ERROR do not use named labels\n+        //~| ERROR do not use named labels\n+\n+        // Multiple lines\n+        asm!(\"foo1: nop\", \"nop\"); //~ ERROR do not use named labels\n+        asm!(\"foo2: foo3: nop\", \"nop\");\n+        //~^ ERROR do not use named labels\n+        //~| ERROR do not use named labels\n+        asm!(\"nop\", \"foo4: nop\"); //~ ERROR do not use named labels\n+        asm!(\"foo5: nop\", \"foo6: nop\");\n+        //~^ ERROR do not use named labels\n+        //~| ERROR do not use named labels\n+\n+        // Statement separator\n+        asm!(\"foo7: nop; foo8: nop\");\n+        //~^ ERROR do not use named labels\n+        //~| ERROR do not use named labels\n+        asm!(\"foo9: nop; nop\"); //~ ERROR do not use named labels\n+        asm!(\"nop; foo10: nop\"); //~ ERROR do not use named labels\n+\n+        // Escaped newline\n+        asm!(\"bar2: nop\\n bar3: nop\");\n+        //~^ ERROR do not use named labels\n+        //~| ERROR do not use named labels\n+        asm!(\"bar4: nop\\n nop\"); //~ ERROR do not use named labels\n+        asm!(\"nop\\n bar5: nop\"); //~ ERROR do not use named labels\n+        asm!(\"nop\\n bar6: bar7: nop\");\n+        //~^ ERROR do not use named labels\n+        //~| ERROR do not use named labels\n+\n+        // Raw strings\n+        asm!(\n+            r\"\n+            blah2: nop\n+            blah3: nop\n+            \"\n+        );\n+        //~^^^^ ERROR do not use named labels\n+        //~^^^^ ERROR do not use named labels\n+        asm!(\n+            r###\"\n+            nop\n+            nop ; blah4: nop\n+            \"###\n+        );\n+        //~^^^ ERROR do not use named labels\n+\n+        // Non-labels\n+        // should not trigger lint, but may be invalid asm\n+        asm!(\"ab cd: nop\");\n+\n+        // Only `blah:` should trigger\n+        asm!(\"1bar: blah: nop\"); //~ ERROR do not use named labels\n+\n+        // Only `blah1:` should trigger\n+        asm!(\"blah1: 2bar: nop\"); //~ ERROR do not use named labels\n+\n+        // Duplicate labels\n+        asm!(\"def: def: nop\"); //~ ERROR do not use named labels\n+        asm!(\"def: nop\\ndef: nop\"); //~ ERROR do not use named labels\n+        asm!(\"def: nop; def: nop\"); //~ ERROR do not use named labels\n+\n+        // Trying to break parsing\n+        asm!(\":\");\n+        asm!(\"\\n:\\n\");\n+        asm!(\"::::\");\n+\n+        // 0x3A is a ':'\n+        asm!(\"fooo\\u{003A} nop\"); //~ ERROR do not use named labels\n+        asm!(\"foooo\\x3A nop\"); //~ ERROR do not use named labels\n+\n+        // 0x0A is a newline\n+        asm!(\"fooooo:\\u{000A} nop\"); //~ ERROR do not use named labels\n+        asm!(\"foooooo:\\x0A nop\"); //~ ERROR do not use named labels\n+\n+        // Intentionally breaking span finding\n+        // equivalent to \"ABC: nop\"\n+        asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\"); //~ ERROR do not use named labels\n+    }\n+}\n+\n+// Don't trigger on global asm\n+global_asm!(\"aaaaaaaa: nop\");"}, {"sha": "62e4eef1992d66d58f52c658ba92dc82f070263f", "filename": "src/test/ui/asm/named_asm_labels.stderr", "status": "added", "additions": 300, "deletions": 0, "changes": 300, "blob_url": "https://github.com/rust-lang/rust/blob/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/src%2Ftest%2Fui%2Fasm%2Fnamed_asm_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75915ad16f5e30c822e5a1be35c69f78f98e2c1f/src%2Ftest%2Fui%2Fasm%2Fnamed_asm_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed_asm_labels.stderr?ref=75915ad16f5e30c822e5a1be35c69f78f98e2c1f", "patch": "@@ -0,0 +1,300 @@\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:6:15\n+   |\n+LL |         asm!(\"bar: nop\");\n+   |               ^^^\n+   |\n+   = note: `#[deny(named_asm_labels)]` on by default\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:9:15\n+   |\n+LL |         asm!(\"abcd:\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:12:15\n+   |\n+LL |         asm!(\"foo: bar1: nop\");\n+   |               ^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:12:20\n+   |\n+LL |         asm!(\"foo: bar1: nop\");\n+   |                    ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:17:15\n+   |\n+LL |         asm!(\"foo1: nop\", \"nop\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:18:15\n+   |\n+LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:18:21\n+   |\n+LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n+   |                     ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:21:22\n+   |\n+LL |         asm!(\"nop\", \"foo4: nop\");\n+   |                      ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:22:15\n+   |\n+LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:22:28\n+   |\n+LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n+   |                            ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:27:15\n+   |\n+LL |         asm!(\"foo7: nop; foo8: nop\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:27:26\n+   |\n+LL |         asm!(\"foo7: nop; foo8: nop\");\n+   |                          ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:30:15\n+   |\n+LL |         asm!(\"foo9: nop; nop\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:31:20\n+   |\n+LL |         asm!(\"nop; foo10: nop\");\n+   |                    ^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:34:15\n+   |\n+LL |         asm!(\"bar2: nop\\n bar3: nop\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:34:27\n+   |\n+LL |         asm!(\"bar2: nop\\n bar3: nop\");\n+   |                           ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:37:15\n+   |\n+LL |         asm!(\"bar4: nop\\n nop\");\n+   |               ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:38:21\n+   |\n+LL |         asm!(\"nop\\n bar5: nop\");\n+   |                     ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:39:21\n+   |\n+LL |         asm!(\"nop\\n bar6: bar7: nop\");\n+   |                     ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:39:27\n+   |\n+LL |         asm!(\"nop\\n bar6: bar7: nop\");\n+   |                           ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:46:13\n+   |\n+LL |             blah2: nop\n+   |             ^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:47:13\n+   |\n+LL |             blah3: nop\n+   |             ^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:55:19\n+   |\n+LL |             nop ; blah4: nop\n+   |                   ^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:65:21\n+   |\n+LL |         asm!(\"1bar: blah: nop\");\n+   |                     ^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:68:15\n+   |\n+LL |         asm!(\"blah1: 2bar: nop\");\n+   |               ^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:71:15\n+   |\n+LL |         asm!(\"def: def: nop\");\n+   |               ^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:72:15\n+   |\n+LL |         asm!(\"def: nop\\ndef: nop\");\n+   |               ^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:73:15\n+   |\n+LL |         asm!(\"def: nop; def: nop\");\n+   |               ^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:81:15\n+   |\n+LL |         asm!(\"fooo\\u{003A} nop\");\n+   |               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:82:15\n+   |\n+LL |         asm!(\"foooo\\x3A nop\");\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:85:15\n+   |\n+LL |         asm!(\"fooooo:\\u{000A} nop\");\n+   |               ^^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:86:15\n+   |\n+LL |         asm!(\"foooooo:\\x0A nop\");\n+   |               ^^^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: do not use named labels in inline assembly\n+  --> $DIR/named_asm_labels.rs:90:14\n+   |\n+LL |         asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\");\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Only GAS local labels of the form `N:` where N is a number may be used in inline asm\n+   = note: See the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: aborting due to 33 previous errors\n+"}]}