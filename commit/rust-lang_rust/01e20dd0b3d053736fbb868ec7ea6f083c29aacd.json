{"sha": "01e20dd0b3d053736fbb868ec7ea6f083c29aacd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTIwZGQwYjNkMDUzNzM2ZmJiODY4ZWM3ZWE2ZjA4M2MyOWFhY2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-19T08:00:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-19T08:18:37Z"}, "message": "core: Improve docs", "tree": {"sha": "2de379102e2b74ba3532e7a667b0e8130c4e1a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de379102e2b74ba3532e7a667b0e8130c4e1a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e20dd0b3d053736fbb868ec7ea6f083c29aacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e20dd0b3d053736fbb868ec7ea6f083c29aacd", "html_url": "https://github.com/rust-lang/rust/commit/01e20dd0b3d053736fbb868ec7ea6f083c29aacd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e20dd0b3d053736fbb868ec7ea6f083c29aacd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9604544e234b30673ffe1bbcd24809e91bd39867", "url": "https://api.github.com/repos/rust-lang/rust/commits/9604544e234b30673ffe1bbcd24809e91bd39867", "html_url": "https://github.com/rust-lang/rust/commit/9604544e234b30673ffe1bbcd24809e91bd39867"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "f32895fb7ae1570c9d06992ea81ffbf980cb515c", "filename": "src/libcore/core.rc", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/01e20dd0b3d053736fbb868ec7ea6f083c29aacd/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/01e20dd0b3d053736fbb868ec7ea6f083c29aacd/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=01e20dd0b3d053736fbb868ec7ea6f083c29aacd", "patch": "@@ -7,25 +7,30 @@\n #[license = \"MIT\"];\n #[crate_type = \"lib\"];\n \n-// Don't link to core. We are core.\n-#[no_core];\n-\n #[doc = \"\n-The Rust core library\n-\n-The core library provides functionality that is closely tied to the Rust\n+The Rust core library provides functionality that is closely tied to the Rust\n built-in types and runtime services, or that is used in nearly every\n non-trivial program.\n \n-It is linked by default to all crates and the contents imported. The effect is\n-as though the user had written the following:\n+`core` includes modules corresponding to each of the integer types, each of\n+the floating point types, the `bool` type, tules, characters, strings, vectors\n+(`vec`), shared boxes (`box`), and unsafe pointers (`ptr`).  Additionally,\n+`core` provides very commonly used built-in types and operations, concurrency\n+primitives, platform abstractions, I/O, and complete bindings to the C\n+standard library.\n+\n+`core` is linked by default to all crates and the contents imported.\n+Implicitly, all crates behave as if they included the following prologue:\n \n     use core;\n     import core::*;\n \n-This behavior can be disabled with the `no_core` crate attribute.\n+This behavior can be disabled with the `#[no_core]` crate attribute.\n \"];\n \n+// Don't link to core. We are core.\n+#[no_core];\n+\n export int, i8, i16, i32, i64;\n export uint, u8, u16, u32, u64;\n export float, f32, f64;\n@@ -42,6 +47,7 @@ export to_str;\n // core this should become unexported\n export priv;\n \n+\n // Built-in-type support modules\n \n #[doc = \"Operations and constants for `int`\"]\n@@ -129,6 +135,7 @@ mod u64 {\n     mod inst;\n }\n \n+\n mod box;\n mod char;\n mod float;\n@@ -138,48 +145,50 @@ mod str;\n mod ptr;\n mod vec;\n mod bool;\n+mod tuple;\n \n-// For internal use by char, not exported\n-mod unicode;\n-// Do not export\n-mod priv;\n \n // Ubiquitous-utility-type modules\n \n mod either;\n+mod iter;\n+mod logging;\n mod option;\n mod result;\n-mod tuple;\n-mod iter;\n+mod to_str;\n \n-// Useful ifaces\n \n-mod to_str;\n+// Concurrency\n+mod comm;\n+mod task;\n+mod future;\n+\n \n // Runtime and language-primitive support\n \n+mod io;\n mod libc;\n mod os;\n-mod io;\n-mod run;\n-mod rand;\n mod path;\n-\n-mod cmath;\n+mod rand;\n+mod run;\n mod sys;\n mod unsafe;\n-mod logging;\n \n-// Concurrency\n-mod comm;\n-mod task;\n-mod future;\n \n-// Compiler support modules\n+// Modules supporting compiler-generated code\n+// Exported but not part of the public interface\n \n mod extfmt;\n \n \n+// For internal use, not exported\n+\n+mod unicode;\n+mod priv;\n+mod cmath;\n+\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}]}