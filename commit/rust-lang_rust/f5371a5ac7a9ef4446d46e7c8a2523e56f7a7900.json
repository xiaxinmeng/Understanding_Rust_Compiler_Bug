{"sha": "f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzcxYTVhYzdhOWVmNDQ0NmQ0NmU3YzhhMjUyM2U1NmY3YTc5MDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-07T13:49:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-07T13:49:36Z"}, "message": "Auto merge of #60592 - davidtwco:generator-signature-deduction, r=eddyb\n\nDeduce signature of generator on type mismatch\n\nContributes towards #54326.\n\nr? @eddyb", "tree": {"sha": "b888ba5ea5ad1f08e77e5439dc799a03e7b8d5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b888ba5ea5ad1f08e77e5439dc799a03e7b8d5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "html_url": "https://github.com/rust-lang/rust/commit/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ac57564852cb6e2d0db60f7b46d9eb98d4b449", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ac57564852cb6e2d0db60f7b46d9eb98d4b449", "html_url": "https://github.com/rust-lang/rust/commit/c6ac57564852cb6e2d0db60f7b46d9eb98d4b449"}, {"sha": "f2919a31c8101da2dd773ea5ffca4195e96d3d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2919a31c8101da2dd773ea5ffca4195e96d3d50", "html_url": "https://github.com/rust-lang/rust/commit/f2919a31c8101da2dd773ea5ffca4195e96d3d50"}], "stats": {"total": 104, "additions": 72, "deletions": 32}, "files": [{"sha": "3fa192f16f32e2c431740c5735f747089f0d5773", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Given a projection like \"<F as Fn(X)>::Result == Y\", we can deduce\n-    /// everything we need to know about a closure.\n+    /// everything we need to know about a closure or generator.\n     ///\n     /// The `cause_span` should be the span that caused us to\n     /// have this expected signature, or `None` if we can't readily\n@@ -262,37 +262,50 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let trait_ref = projection.to_poly_trait_ref(tcx);\n \n-        if tcx.lang_items().fn_trait_kind(trait_ref.def_id()).is_none() {\n+        let is_fn = tcx.lang_items().fn_trait_kind(trait_ref.def_id()).is_some();\n+        let gen_trait = tcx.lang_items().gen_trait().unwrap();\n+        let is_gen = gen_trait == trait_ref.def_id();\n+        if !is_fn && !is_gen {\n+            debug!(\"deduce_sig_from_projection: not fn or generator\");\n             return None;\n         }\n \n-        let arg_param_ty = trait_ref.skip_binder().substs.type_at(1);\n-        let arg_param_ty = self.resolve_type_vars_if_possible(&arg_param_ty);\n-        debug!(\n-            \"deduce_sig_from_projection: arg_param_ty {:?}\",\n-            arg_param_ty\n-        );\n+        if is_gen {\n+            // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n+            // associated item and not yield.\n+            let return_assoc_item = self.tcx.associated_items(gen_trait).nth(1).unwrap().def_id;\n+            if return_assoc_item != projection.projection_def_id() {\n+                debug!(\"deduce_sig_from_projection: not return assoc item of generator\");\n+                return None;\n+            }\n+        }\n+\n+        let input_tys = if is_fn {\n+            let arg_param_ty = trait_ref.skip_binder().substs.type_at(1);\n+            let arg_param_ty = self.resolve_type_vars_if_possible(&arg_param_ty);\n+            debug!(\"deduce_sig_from_projection: arg_param_ty={:?}\", arg_param_ty);\n \n-        let input_tys = match arg_param_ty.sty {\n-            ty::Tuple(tys) => tys.into_iter().map(|k| k.expect_ty()),\n-            _ => return None,\n+            match arg_param_ty.sty {\n+                ty::Tuple(tys) => tys.into_iter().map(|k| k.expect_ty()).collect::<Vec<_>>(),\n+                _ => return None,\n+            }\n+        } else {\n+            // Generators cannot have explicit arguments.\n+            vec![]\n         };\n \n         let ret_param_ty = projection.skip_binder().ty;\n         let ret_param_ty = self.resolve_type_vars_if_possible(&ret_param_ty);\n-        debug!(\n-            \"deduce_sig_from_projection: ret_param_ty {:?}\",\n-            ret_param_ty\n-        );\n+        debug!(\"deduce_sig_from_projection: ret_param_ty={:?}\", ret_param_ty);\n \n         let sig = self.tcx.mk_fn_sig(\n-            input_tys,\n-            ret_param_ty,\n+            input_tys.iter(),\n+            &ret_param_ty,\n             false,\n             hir::Unsafety::Normal,\n             Abi::Rust,\n         );\n-        debug!(\"deduce_sig_from_projection: sig {:?}\", sig);\n+        debug!(\"deduce_sig_from_projection: sig={:?}\", sig);\n \n         Some(ExpectedSig { cause_span, sig })\n     }"}, {"sha": "fd5266798187307a66f77fd2d58b8f68bf875566", "filename": "src/test/ui/generator-yielding-or-returning-itself.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs?ref=f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "patch": "@@ -13,7 +13,7 @@ pub fn want_cyclic_generator_return<T>(_: T)\n \n fn supply_cyclic_generator_return() {\n     want_cyclic_generator_return(|| {\n-        //~^ ERROR type mismatch\n+        //~^ ERROR closure/generator type that references itself\n         if false { yield None.unwrap(); }\n         None.unwrap()\n     })"}, {"sha": "42591683fe4e327abea54e92bc9a61ed00aba4b9", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "patch": "@@ -1,20 +1,17 @@\n-error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _] as std::ops::Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _]`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n+error[E0644]: closure/generator type that references itself\n+  --> $DIR/generator-yielding-or-returning-itself.rs:15:34\n    |\n-LL |     want_cyclic_generator_return(|| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |       want_cyclic_generator_return(|| {\n+   |  __________________________________^\n+LL | |\n+LL | |         if false { yield None.unwrap(); }\n+LL | |         None.unwrap()\n+LL | |     })\n+   | |_____^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n            see https://github.com/rust-lang/rust/issues/46062 for more details\n-note: required by `want_cyclic_generator_return`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:9:1\n-   |\n-LL | / pub fn want_cyclic_generator_return<T>(_: T)\n-LL | |     where T: Generator<Yield = (), Return = T>\n-LL | | {\n-LL | | }\n-   | |_^\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _] as std::ops::Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n@@ -36,4 +33,5 @@ LL | | }\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0644.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "b9c6bc5d0796e4b30e8f97fb5ec33ac531905479", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs?ref=f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "patch": "@@ -0,0 +1,17 @@\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn foo() -> impl Generator<Return = i32> {\n+    || {\n+        if false {\n+            return Ok(6); //~ ERROR mismatched types [E0308]\n+        }\n+\n+        yield ();\n+\n+        5\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "35d3f95c3e9e4253f9ad91012c8486b852e8eee9", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-signature-deduction.rs:8:20\n+   |\n+LL |             return Ok(6);\n+   |                    ^^^^^ expected i32, found enum `std::result::Result`\n+   |\n+   = note: expected type `i32`\n+              found type `std::result::Result<{integer}, _>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}