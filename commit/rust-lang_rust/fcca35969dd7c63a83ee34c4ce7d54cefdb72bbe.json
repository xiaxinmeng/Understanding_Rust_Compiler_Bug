{"sha": "fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjY2EzNTk2OWRkN2M2M2E4M2VlMzRjNGNlN2Q1NGNlZmRiNzJiYmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-23T13:28:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-25T07:52:12Z"}, "message": "allow dyn diagnostics", "tree": {"sha": "dd7de0fe2c391803e735cb8d65db54c42d29e823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7de0fe2c391803e735cb8d65db54c42d29e823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "html_url": "https://github.com/rust-lang/rust/commit/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e8f17188efcecfdfd1afbbc894a53c65985f836", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e8f17188efcecfdfd1afbbc894a53c65985f836", "html_url": "https://github.com/rust-lang/rust/commit/7e8f17188efcecfdfd1afbbc894a53c65985f836"}], "stats": {"total": 145, "additions": 112, "deletions": 33}, "files": [{"sha": "a37d960a148e635ed61888d4cafc89d3d874f740", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n     impl_block::ImplBlock,\n     resolve::Resolver,\n-    diagnostics::FunctionDiagnostic,\n+    diagnostics::Diagnostics,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -521,8 +521,10 @@ impl Function {\n         r\n     }\n \n-    pub fn diagnostics(&self, db: &impl HirDatabase) -> Vec<FunctionDiagnostic> {\n-        self.infer(db).diagnostics()\n+    pub fn diagnostics(&self, db: &impl HirDatabase) -> Diagnostics {\n+        let mut res = Diagnostics::default();\n+        self.infer(db).add_diagnostics(db, *self, &mut res);\n+        res\n     }\n }\n "}, {"sha": "46a3fdd479484e01bf759cd7003ed489b7eb6244", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "patch": "@@ -1,6 +1,60 @@\n-use crate::{expr::ExprId};\n+use std::{fmt, any::Any};\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub enum FunctionDiagnostic {\n-    NoSuchField { expr: ExprId, field: usize },\n+use ra_syntax::{SyntaxNodePtr, AstPtr, ast};\n+\n+use crate::HirFileId;\n+\n+pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n+    fn file(&self) -> HirFileId;\n+    fn syntax_node(&self) -> SyntaxNodePtr;\n+    fn message(&self) -> String;\n+    fn as_any(&self) -> &(Any + Send + 'static);\n+}\n+\n+impl dyn Diagnostic {\n+    pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n+        self.as_any().downcast_ref()\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+pub struct Diagnostics {\n+    data: Vec<Box<dyn Diagnostic>>,\n+}\n+\n+impl Diagnostics {\n+    pub fn push(&mut self, d: impl Diagnostic) {\n+        self.data.push(Box::new(d))\n+    }\n+\n+    pub fn iter<'a>(&'a self) -> impl Iterator<Item = &'a dyn Diagnostic> + 'a {\n+        self.data.iter().map(|it| it.as_ref())\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct NoSuchField {\n+    pub(crate) file: HirFileId,\n+    pub(crate) field: AstPtr<ast::NamedField>,\n+}\n+\n+impl NoSuchField {\n+    pub fn field(&self) -> AstPtr<ast::NamedField> {\n+        self.field\n+    }\n+}\n+\n+impl Diagnostic for NoSuchField {\n+    fn file(&self) -> HirFileId {\n+        self.file\n+    }\n+    fn syntax_node(&self) -> SyntaxNodePtr {\n+        self.field.into()\n+    }\n+    fn message(&self) -> String {\n+        \"no such field\".to_string()\n+    }\n+    fn as_any(&self) -> &(Any + Send + 'static) {\n+        self\n+    }\n }"}, {"sha": "a85422955b991b39d535e65394931af2c89a3487", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "patch": "@@ -140,8 +140,8 @@ impl BodySourceMap {\n         self.pat_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n     }\n \n-    pub fn field_syntax(&self, expr: ExprId, field: usize) -> Option<AstPtr<ast::NamedField>> {\n-        self.field_map.get(&(expr, field)).cloned()\n+    pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::NamedField> {\n+        self.field_map[&(expr, field)].clone()\n     }\n }\n "}, {"sha": "02708ba0f4a6584e8bd8acb00bfbf410cad3542f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "patch": "@@ -37,7 +37,8 @@ use crate::{\n     adt::VariantDef,\n     resolve::{Resolver, Resolution},\n     nameres::Namespace,\n-    diagnostics::FunctionDiagnostic,\n+    ty::infer::diagnostics::InferenceDiagnostic,\n+    diagnostics::Diagnostics,\n };\n use super::{Ty, TypableDef, Substs, primitive, op, FnSig, ApplicationTy, TypeCtor};\n \n@@ -97,7 +98,7 @@ pub struct InferenceResult {\n     field_resolutions: FxHashMap<ExprId, StructField>,\n     /// For each associated item record what it resolves to\n     assoc_resolutions: FxHashMap<ExprOrPatId, ImplItem>,\n-    diagnostics: Vec<FunctionDiagnostic>,\n+    diagnostics: Vec<InferenceDiagnostic>,\n     pub(super) type_of_expr: ArenaMap<ExprId, Ty>,\n     pub(super) type_of_pat: ArenaMap<PatId, Ty>,\n }\n@@ -115,8 +116,13 @@ impl InferenceResult {\n     pub fn assoc_resolutions_for_pat(&self, id: PatId) -> Option<ImplItem> {\n         self.assoc_resolutions.get(&id.into()).map(|it| *it)\n     }\n-    pub(crate) fn diagnostics(&self) -> Vec<FunctionDiagnostic> {\n-        self.diagnostics.clone()\n+    pub(crate) fn add_diagnostics(\n+        &self,\n+        db: &impl HirDatabase,\n+        owner: Function,\n+        diagnostics: &mut Diagnostics,\n+    ) {\n+        self.diagnostics.iter().for_each(|it| it.add_to(db, owner, diagnostics))\n     }\n }\n \n@@ -148,7 +154,7 @@ struct InferenceContext<'a, D: HirDatabase> {\n     assoc_resolutions: FxHashMap<ExprOrPatId, ImplItem>,\n     type_of_expr: ArenaMap<ExprId, Ty>,\n     type_of_pat: ArenaMap<PatId, Ty>,\n-    diagnostics: Vec<FunctionDiagnostic>,\n+    diagnostics: Vec<InferenceDiagnostic>,\n     /// The return type of the function being inferred.\n     return_ty: Ty,\n }\n@@ -928,7 +934,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         .and_then(|it| match it.field(self.db, &field.name) {\n                             Some(field) => Some(field),\n                             None => {\n-                                self.diagnostics.push(FunctionDiagnostic::NoSuchField {\n+                                self.diagnostics.push(InferenceDiagnostic::NoSuchField {\n                                     expr: tgt_expr,\n                                     field: field_idx,\n                                 });\n@@ -1261,3 +1267,24 @@ impl Expectation {\n         Expectation { ty: Ty::Unknown }\n     }\n }\n+\n+mod diagnostics {\n+    use crate::{expr::ExprId, diagnostics::{Diagnostics, NoSuchField}, HirDatabase, Function};\n+\n+    #[derive(Debug, PartialEq, Eq, Clone)]\n+    pub(super) enum InferenceDiagnostic {\n+        NoSuchField { expr: ExprId, field: usize },\n+    }\n+\n+    impl InferenceDiagnostic {\n+        pub(super) fn add_to(&self, db: &impl HirDatabase, owner: Function, acc: &mut Diagnostics) {\n+            match self {\n+                InferenceDiagnostic::NoSuchField { expr, field } => {\n+                    let (file, _) = owner.source(db);\n+                    let field = owner.body_source_map(db).field_syntax(*expr, *field);\n+                    acc.push(NoSuchField { file, field })\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "943fd2f539a39f69a73877a5013457c0941a74a3", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "patch": "@@ -3,7 +3,7 @@ use hir::{Problem, source_binder};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     Location, SourceFile, SyntaxKind, TextRange, SyntaxNode,\n-    ast::{self, AstNode, NameOwner},\n+    ast::{self, AstNode},\n \n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n@@ -161,23 +161,13 @@ fn check_module(\n }\n \n fn check_function(acc: &mut Vec<Diagnostic>, db: &RootDatabase, function: hir::Function) {\n-    let (_file_id, fn_def) = function.source(db);\n-    let source_file = fn_def.syntax().ancestors().find_map(ast::SourceFile::cast).unwrap();\n-    let source_map = function.body_source_map(db);\n-    for d in function.diagnostics(db) {\n-        match d {\n-            hir::diagnostics::FunctionDiagnostic::NoSuchField { expr, field } => {\n-                if let Some(field) = source_map.field_syntax(expr, field) {\n-                    let field = field.to_node(&source_file);\n-                    acc.push(Diagnostic {\n-                        message: \"no such field\".into(),\n-                        range: field.syntax().range(),\n-                        severity: Severity::Error,\n-                        fix: None,\n-                    })\n-                }\n-            }\n-        }\n+    for d in function.diagnostics(db).iter() {\n+        acc.push(Diagnostic {\n+            message: d.message(),\n+            range: d.syntax_node().range(),\n+            severity: Severity::Error,\n+            fix: None,\n+        })\n     }\n }\n "}, {"sha": "d8de1c4c1b535ee9ce554b65e7e3df8d9fb2d2f3", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=fcca35969dd7c63a83ee34c4ce7d54cefdb72bbe", "patch": "@@ -64,6 +64,12 @@ impl<N: AstNode> AstPtr<N> {\n     }\n }\n \n+impl<N: AstNode> From<AstPtr<N>> for SyntaxNodePtr {\n+    fn from(ptr: AstPtr<N>) -> SyntaxNodePtr {\n+        ptr.raw\n+    }\n+}\n+\n #[test]\n fn test_local_syntax_ptr() {\n     use crate::{ast, AstNode};"}]}