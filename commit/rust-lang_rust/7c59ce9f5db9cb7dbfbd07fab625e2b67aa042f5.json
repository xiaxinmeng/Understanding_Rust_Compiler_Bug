{"sha": "7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNTljZTlmNWRiOWNiN2RiZmJkMDdmYWI2MjVlMmI2N2FhMDQyZjU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-03-13T23:29:24Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-03-14T22:42:20Z"}, "message": "Add `-Z allow_features=...` flag", "tree": {"sha": "49dc11b84077d62c5fefba968d74072624b0732b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49dc11b84077d62c5fefba968d74072624b0732b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "html_url": "https://github.com/rust-lang/rust/commit/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa8fd3daa7efefd4036a377f48f755be0b6952ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8fd3daa7efefd4036a377f48f755be0b6952ee", "html_url": "https://github.com/rust-lang/rust/commit/fa8fd3daa7efefd4036a377f48f755be0b6952ee"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "ff18678f091b90f108e23c504364f49cff33b23e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -1440,6 +1440,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n         \"control the operation of the MergeFunctions LLVM pass, taking\n          the same values as the target option of the same name\"),\n+    allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n+        \"only allow the listed language features to be enabled in code (space separated)\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -3286,6 +3288,10 @@ mod tests {\n         opts = reference.clone();\n         opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.allow_features = Some(vec![String::from(\"lang_items\")]);\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n \n     #[test]"}, {"sha": "0c710fd283be83fd37608a1190d770c7c89f49d3", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -243,6 +243,7 @@ pub fn register_plugins<'a>(\n         krate,\n         &sess.parse_sess,\n         sess.edition(),\n+        &sess.opts.debugging_opts.allow_features,\n     );\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);"}, {"sha": "2abb7e407eb026d1d22f94f51ef8ca91d131c253", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -24,8 +24,8 @@ pub struct StripUnconfigured<'a> {\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition)\n-                -> (ast::Crate, Features) {\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition,\n+                allow_features: &Option<Vec<String>>) -> (ast::Crate, Features) {\n     let features;\n     {\n         let mut strip_unconfigured = StripUnconfigured {\n@@ -43,7 +43,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition)\n             return (krate, Features::new());\n         }\n \n-        features = get_features(&sess.span_diagnostic, &krate.attrs, edition);\n+        features = get_features(&sess.span_diagnostic, &krate.attrs, edition, allow_features);\n \n         // Avoid reconfiguring malformed `cfg_attr`s\n         if err_count == sess.span_diagnostic.err_count() {"}, {"sha": "ac24475cab89fa1d6c614c3e2c3d9bd9f6a1e6d0", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -378,6 +378,21 @@ Erroneous code example:\n \n \"##,\n \n+E0725: r##\"\n+A feature attribute named a feature that was disallowed in the compiler\n+command line flags.\n+\n+Erroneous code example:\n+\n+```ignore (can't specify compiler flags from doctests)\n+#![feature(never_type)] // error: the feature `never_type` is not in\n+                        // the list of allowed features\n+```\n+\n+Delete the offending feature attribute, or add it to the list of allowed\n+features in the `-Z allow_features` flag.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "77e8e75d8321b8d8ba55b7bcfd8998c653f0676c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -2008,7 +2008,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n-                    crate_edition: Edition) -> Features {\n+                    crate_edition: Edition, allow_features: &Option<Vec<String>>) -> Features {\n     fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n         let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n         if let Some(reason) = reason {\n@@ -2127,6 +2127,15 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n \n             if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n+                if let Some(allowed) = allow_features.as_ref() {\n+                    if allowed.iter().find(|f| *f == name.as_str()).is_none() {\n+                        span_err!(span_handler, mi.span, E0725,\n+                                  \"the feature `{}` is not in the list of allowed features\",\n+                                  name);\n+                        continue;\n+                    }\n+                }\n+\n                 set(&mut features, mi.span);\n                 features.declared_lang_features.push((name, mi.span, None));\n                 continue"}, {"sha": "83250052cb506f83b7e9612104b24fa511dfc993", "filename": "src/test/ui/feature-gate/allow-features-empty.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z allow_features=\n+// Note: This test uses rustc internal flags because they will never stabilize.\n+\n+#![feature(rustc_diagnostic_macros)] //~ ERROR\n+\n+#![feature(rustc_const_unstable)] //~ ERROR\n+\n+#![feature(lang_items)] //~ ERROR\n+\n+fn main() {}"}, {"sha": "cce2c4078c242b5141ffe6bfc94f6a8b99625027", "filename": "src/test/ui/feature-gate/allow-features-empty.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -0,0 +1,21 @@\n+error[E0725]: the feature `rustc_diagnostic_macros` is not in the list of allowed features\n+  --> $DIR/allow-features-empty.rs:4:12\n+   |\n+LL | #![feature(rustc_diagnostic_macros)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n+  --> $DIR/allow-features-empty.rs:6:12\n+   |\n+LL | #![feature(rustc_const_unstable)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0725]: the feature `lang_items` is not in the list of allowed features\n+  --> $DIR/allow-features-empty.rs:8:12\n+   |\n+LL | #![feature(lang_items)]\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0725`."}, {"sha": "1cebc8f34f26fff1be71850b2d1f5499d8e0c4e4", "filename": "src/test/ui/feature-gate/allow-features.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z allow_features=rustc_diagnostic_macros,lang_items\n+// Note: This test uses rustc internal flags because they will never stabilize.\n+\n+#![feature(rustc_diagnostic_macros)]\n+\n+#![feature(rustc_const_unstable)] //~ ERROR\n+\n+#![feature(lang_items)]\n+\n+fn main() {}"}, {"sha": "b13560fb81c6a07586a12ecc5395da9ad5af9a92", "filename": "src/test/ui/feature-gate/allow-features.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr?ref=7c59ce9f5db9cb7dbfbd07fab625e2b67aa042f5", "patch": "@@ -0,0 +1,9 @@\n+error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n+  --> $DIR/allow-features.rs:6:12\n+   |\n+LL | #![feature(rustc_const_unstable)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0725`."}]}