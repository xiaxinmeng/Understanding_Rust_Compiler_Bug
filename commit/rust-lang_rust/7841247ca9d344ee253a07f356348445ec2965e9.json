{"sha": "7841247ca9d344ee253a07f356348445ec2965e9", "node_id": "C_kwDOAAsO6NoAKDc4NDEyNDdjYTlkMzQ0ZWUyNTNhMDdmMzU2MzQ4NDQ1ZWMyOTY1ZTk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-30T15:01:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-01T15:02:37Z"}, "message": "resolve: Rename `unusable_binding` to `ignore_binding`", "tree": {"sha": "f14696d69f44b0326abdd80bd9db766adf543c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f14696d69f44b0326abdd80bd9db766adf543c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7841247ca9d344ee253a07f356348445ec2965e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7841247ca9d344ee253a07f356348445ec2965e9", "html_url": "https://github.com/rust-lang/rust/commit/7841247ca9d344ee253a07f356348445ec2965e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7841247ca9d344ee253a07f356348445ec2965e9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1", "html_url": "https://github.com/rust-lang/rust/commit/f0e0434feb7ac3011e4f3ae2966cd0cabe9c4ea1"}], "stats": {"total": 95, "additions": 41, "deletions": 54}, "files": [{"sha": "7d40ecb18b74742d6311f44d85f4423a91b6a4ca", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=7841247ca9d344ee253a07f356348445ec2965e9", "patch": "@@ -1807,7 +1807,7 @@ impl<'a> Resolver<'a> {\n         opt_ns: Option<Namespace>, // `None` indicates a module path in import\n         parent_scope: &ParentScope<'a>,\n         ribs: Option<&PerNS<Vec<Rib<'a>>>>,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n         module: Option<ModuleOrUniformRoot<'a>>,\n         i: usize,\n         ident: Ident,\n@@ -1859,7 +1859,7 @@ impl<'a> Resolver<'a> {\n                         ns_to_try,\n                         parent_scope,\n                         None,\n-                        unusable_binding,\n+                        ignore_binding,\n                     ).ok()\n                 } else if let Some(ribs) = ribs\n                     && let Some(TypeNS | ValueNS) = opt_ns\n@@ -1870,7 +1870,7 @@ impl<'a> Resolver<'a> {\n                         parent_scope,\n                         None,\n                         &ribs[ns_to_try],\n-                        unusable_binding,\n+                        ignore_binding,\n                     ) {\n                         // we found a locally-imported or available item/module\n                         Some(LexicalScopeBinding::Item(binding)) => Some(binding),\n@@ -1884,7 +1884,7 @@ impl<'a> Resolver<'a> {\n                         parent_scope,\n                         None,\n                         false,\n-                        unusable_binding,\n+                        ignore_binding,\n                     ).ok()\n                 };\n                 if let Some(binding) = binding {\n@@ -1917,7 +1917,7 @@ impl<'a> Resolver<'a> {\n                     parent_scope,\n                     None,\n                     &ribs[ValueNS],\n-                    unusable_binding,\n+                    ignore_binding,\n                 )\n             } else {\n                 None"}, {"sha": "18ce359524da27fc555a304c1ccb00a599cf2e94", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 32, "deletions": 45, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=7841247ca9d344ee253a07f356348445ec2965e9", "patch": "@@ -281,7 +281,7 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n         ribs: &[Rib<'a>],\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> Option<LexicalScopeBinding<'a>> {\n         assert!(ns == TypeNS || ns == ValueNS);\n         let orig_ident = ident;\n@@ -343,7 +343,7 @@ impl<'a> Resolver<'a> {\n                 ns,\n                 parent_scope,\n                 finalize,\n-                unusable_binding,\n+                ignore_binding,\n             );\n             if let Ok(binding) = item {\n                 // The ident resolves to an item.\n@@ -356,7 +356,7 @@ impl<'a> Resolver<'a> {\n             parent_scope,\n             finalize,\n             finalize.is_some(),\n-            unusable_binding,\n+            ignore_binding,\n         )\n         .ok()\n         .map(LexicalScopeBinding::Item)\n@@ -375,7 +375,7 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n         force: bool,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n         bitflags::bitflags! {\n             struct Flags: u8 {\n@@ -495,7 +495,7 @@ impl<'a> Resolver<'a> {\n                             ns,\n                             parent_scope,\n                             finalize,\n-                            unusable_binding,\n+                            ignore_binding,\n                         );\n                         match binding {\n                             Ok(binding) => Ok((binding, Flags::MODULE | Flags::MISC_SUGGEST_CRATE)),\n@@ -517,7 +517,7 @@ impl<'a> Resolver<'a> {\n                             adjusted_parent_scope,\n                             !matches!(scope_set, ScopeSet::Late(..)),\n                             finalize,\n-                            unusable_binding,\n+                            ignore_binding,\n                         );\n                         match binding {\n                             Ok(binding) => {\n@@ -602,7 +602,7 @@ impl<'a> Resolver<'a> {\n                                 ns,\n                                 parent_scope,\n                                 None,\n-                                unusable_binding,\n+                                ignore_binding,\n                             ) {\n                                 if use_prelude || this.is_builtin_macro(binding.res()) {\n                                     result = Ok((binding, Flags::MISC_FROM_PRELUDE));\n@@ -736,19 +736,10 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n-        // This binding should be ignored during in-module resolution, so that we don't get\n-        // \"self-confirming\" import resolutions during import validation.\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n-        self.resolve_ident_in_module_ext(\n-            module,\n-            ident,\n-            ns,\n-            parent_scope,\n-            finalize,\n-            unusable_binding,\n-        )\n-        .map_err(|(determinacy, _)| determinacy)\n+        self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, finalize, ignore_binding)\n+            .map_err(|(determinacy, _)| determinacy)\n     }\n \n     #[tracing::instrument(level = \"debug\", skip(self))]\n@@ -759,7 +750,7 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n         let tmp_parent_scope;\n         let mut adjusted_parent_scope = parent_scope;\n@@ -785,7 +776,7 @@ impl<'a> Resolver<'a> {\n             adjusted_parent_scope,\n             false,\n             finalize,\n-            unusable_binding,\n+            ignore_binding,\n         )\n     }\n \n@@ -797,7 +788,7 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n         self.resolve_ident_in_module_unadjusted_ext(\n             module,\n@@ -806,7 +797,7 @@ impl<'a> Resolver<'a> {\n             parent_scope,\n             false,\n             finalize,\n-            unusable_binding,\n+            ignore_binding,\n         )\n         .map_err(|(determinacy, _)| determinacy)\n     }\n@@ -822,7 +813,9 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n         restricted_shadowing: bool,\n         finalize: Option<Finalize>,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        // This binding should be ignored during in-module resolution, so that we don't get\n+        // \"self-confirming\" import resolutions during import validation and checking.\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n         let module = match module {\n             ModuleOrUniformRoot::Module(module) => module,\n@@ -834,7 +827,7 @@ impl<'a> Resolver<'a> {\n                     parent_scope,\n                     finalize,\n                     finalize.is_some(),\n-                    unusable_binding,\n+                    ignore_binding,\n                 );\n                 return binding.map_err(|determinacy| (determinacy, Weak::No));\n             }\n@@ -874,7 +867,7 @@ impl<'a> Resolver<'a> {\n                     parent_scope,\n                     finalize,\n                     finalize.is_some(),\n-                    unusable_binding,\n+                    ignore_binding,\n                 );\n                 return binding.map_err(|determinacy| (determinacy, Weak::No));\n             }\n@@ -891,12 +884,8 @@ impl<'a> Resolver<'a> {\n             // hack to avoid inconsistent resolution ICEs during import validation.\n             let binding = [resolution.binding, resolution.shadowed_glob]\n                 .into_iter()\n-                .filter_map(|binding| match (binding, unusable_binding) {\n-                    (Some(binding), Some(unusable_binding))\n-                        if ptr::eq(binding, unusable_binding) =>\n-                    {\n-                        None\n-                    }\n+                .filter_map(|binding| match (binding, ignore_binding) {\n+                    (Some(binding), Some(ignored)) if ptr::eq(binding, ignored) => None,\n                     _ => binding,\n                 })\n                 .next();\n@@ -943,10 +932,8 @@ impl<'a> Resolver<'a> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n-            if let Some(unusable_binding) = unusable_binding {\n-                if ptr::eq(binding, unusable_binding) {\n-                    return Err((Determined, Weak::No));\n-                }\n+            if let Some(ignored) = ignore_binding && ptr::eq(binding, ignored) {\n+                return Err((Determined, Weak::No));\n             }\n             let usable = this.is_accessible_from(binding.vis, parent_scope.module);\n             if usable { Ok(binding) } else { Err((Determined, Weak::No)) }\n@@ -979,7 +966,7 @@ impl<'a> Resolver<'a> {\n                 ns,\n                 &single_import.parent_scope,\n                 None,\n-                unusable_binding,\n+                ignore_binding,\n             ) {\n                 Err(Determined) => continue,\n                 Ok(binding)\n@@ -1055,7 +1042,7 @@ impl<'a> Resolver<'a> {\n                 ns,\n                 adjusted_parent_scope,\n                 None,\n-                unusable_binding,\n+                ignore_binding,\n             );\n \n             match result {\n@@ -1362,9 +1349,9 @@ impl<'a> Resolver<'a> {\n         opt_ns: Option<Namespace>, // `None` indicates a module path in import\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> PathResult<'a> {\n-        self.resolve_path_with_ribs(path, opt_ns, parent_scope, finalize, None, unusable_binding)\n+        self.resolve_path_with_ribs(path, opt_ns, parent_scope, finalize, None, ignore_binding)\n     }\n \n     crate fn resolve_path_with_ribs(\n@@ -1374,7 +1361,7 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n         finalize: Option<Finalize>,\n         ribs: Option<&PerNS<Vec<Rib<'a>>>>,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> PathResult<'a> {\n         debug!(\"resolve_path(path={:?}, opt_ns={:?}, finalize={:?})\", path, opt_ns, finalize);\n \n@@ -1477,7 +1464,7 @@ impl<'a> Resolver<'a> {\n                         ns,\n                         parent_scope,\n                         finalize,\n-                        unusable_binding,\n+                        ignore_binding,\n                     )\n                 } else if let Some(ribs) = ribs\n                     && let Some(TypeNS | ValueNS) = opt_ns\n@@ -1488,7 +1475,7 @@ impl<'a> Resolver<'a> {\n                         parent_scope,\n                         finalize,\n                         &ribs[ns],\n-                        unusable_binding,\n+                        ignore_binding,\n                     ) {\n                         // we found a locally-imported or available item/module\n                         Some(LexicalScopeBinding::Item(binding)) => Ok(binding),\n@@ -1504,7 +1491,7 @@ impl<'a> Resolver<'a> {\n                         parent_scope,\n                         finalize,\n                         finalize.is_some(),\n-                        unusable_binding,\n+                        ignore_binding,\n                     )\n                 };\n                 FindBindingResult::Binding(binding)\n@@ -1577,7 +1564,7 @@ impl<'a> Resolver<'a> {\n                             opt_ns,\n                             parent_scope,\n                             ribs,\n-                            unusable_binding,\n+                            ignore_binding,\n                             module,\n                             i,\n                             ident,"}, {"sha": "ef06ec356bd688af46940980d700c6860e52a180", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=7841247ca9d344ee253a07f356348445ec2965e9", "patch": "@@ -588,7 +588,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n-        let unusable_binding = match &import.kind {\n+        let ignore_binding = match &import.kind {\n             ImportKind::Single { target_bindings, .. } => target_bindings[TypeNS].get(),\n             _ => None,\n         };\n@@ -599,7 +599,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             None,\n             &import.parent_scope,\n             Some(finalize),\n-            unusable_binding,\n+            ignore_binding,\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         import.vis.set(orig_vis);"}, {"sha": "ca89f61032221d8071f5f389c49e4fd8374043f2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7841247ca9d344ee253a07f356348445ec2965e9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=7841247ca9d344ee253a07f356348445ec2965e9", "patch": "@@ -969,15 +969,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ident: Ident,\n         ns: Namespace,\n         finalize: Option<Finalize>,\n-        unusable_binding: Option<&'a NameBinding<'a>>,\n+        ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> Option<LexicalScopeBinding<'a>> {\n         self.r.resolve_ident_in_lexical_scope(\n             ident,\n             ns,\n             &self.parent_scope,\n             finalize,\n             &self.ribs[ns],\n-            unusable_binding,\n+            ignore_binding,\n         )\n     }\n "}]}