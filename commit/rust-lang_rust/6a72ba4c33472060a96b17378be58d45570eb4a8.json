{"sha": "6a72ba4c33472060a96b17378be58d45570eb4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzJiYTRjMzM0NzIwNjBhOTZiMTczNzhiZTU4ZDQ1NTcwZWI0YTg=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T08:36:56Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:06:35Z"}, "message": "Logically seperate lazy norm from `const_generics`", "tree": {"sha": "b7c88929b251ee9349641a0d366ef83cfa26c235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c88929b251ee9349641a0d366ef83cfa26c235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a72ba4c33472060a96b17378be58d45570eb4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a72ba4c33472060a96b17378be58d45570eb4a8", "html_url": "https://github.com/rust-lang/rust/commit/6a72ba4c33472060a96b17378be58d45570eb4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a72ba4c33472060a96b17378be58d45570eb4a8/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "752d8a24d89b8fd6a4910d857b79c91ee0c3c250", "url": "https://api.github.com/repos/rust-lang/rust/commits/752d8a24d89b8fd6a4910d857b79c91ee0c3c250", "html_url": "https://github.com/rust-lang/rust/commit/752d8a24d89b8fd6a4910d857b79c91ee0c3c250"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "3467457b44997a0d21a8440684f899b86592b00e", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=6a72ba4c33472060a96b17378be58d45570eb4a8", "patch": "@@ -164,15 +164,15 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n-            (ty::ConstKind::Unevaluated(..), _) if self.tcx.features().const_generics => {\n+            (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n                 // FIXME(#59490): Need to remove the leak check to accomodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n                     relation.const_equate_obligation(a, b);\n                 }\n                 return Ok(b);\n             }\n-            (_, ty::ConstKind::Unevaluated(..)) if self.tcx.features().const_generics => {\n+            (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {\n                 // FIXME(#59490): Need to remove the leak check to accomodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n@@ -666,7 +666,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(..) if self.tcx().features().const_generics => Ok(c),\n+            ty::ConstKind::Unevaluated(..) if self.tcx().lazy_normalization() => Ok(c),\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }"}, {"sha": "8de892510060828e12c6ddc238a8650794178660", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=6a72ba4c33472060a96b17378be58d45570eb4a8", "patch": "@@ -988,7 +988,7 @@ where\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(..) if self.tcx().features().const_generics => Ok(a),\n+            ty::ConstKind::Unevaluated(..) if self.tcx().lazy_normalization() => Ok(a),\n             _ => relate::super_relate_consts(self, a, a),\n         }\n     }"}, {"sha": "da413f19eff234e5d1326560e391f33d85a1f34d", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=6a72ba4c33472060a96b17378be58d45570eb4a8", "patch": "@@ -1339,7 +1339,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// What mode(s) of borrowck should we run? AST? MIR? both?\n     /// (Also considers the `#![feature(nll)]` setting.)\n-    pub fn borrowck_mode(&self) -> BorrowckMode {\n+    pub fn borrowck_mode(self) -> BorrowckMode {\n         // Here are the main constraints we need to deal with:\n         //\n         // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is\n@@ -1369,6 +1369,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.sess.opts.borrowck_mode\n     }\n \n+    /// If `true`, we should use lazy normalization for constants, otherwise\n+    /// we still evaluate them eagerly.\n+    #[inline]\n+    pub fn lazy_normalization(self) -> bool {\n+        self.features().const_generics\n+    }\n+\n     #[inline]\n     pub fn local_crate_exports_generics(self) -> bool {\n         debug_assert!(self.sess.opts.share_generics());"}, {"sha": "594ffbcd83613ef888bff691ca8f74e9c04008ea", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=6a72ba4c33472060a96b17378be58d45570eb4a8", "patch": "@@ -433,7 +433,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n                 // FIXME(#72219) Implement improved diagnostics for mismatched array\n                 // length?\n-                Err(err) if relation.tcx().features().const_generics => Err(err),\n+                Err(err) if relation.tcx().lazy_normalization() => Err(err),\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics."}, {"sha": "c4cb72fa08c08c1c4806c7743919c4282b341fd6", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=6a72ba4c33472060a96b17378be58d45570eb4a8", "patch": "@@ -388,7 +388,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if self.selcx.tcx().features().const_generics {\n+        if self.selcx.tcx().lazy_normalization() {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);"}, {"sha": "7cfb89f3ff048eeb29d6c744ea6064663ecc44a8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a72ba4c33472060a96b17378be58d45570eb4a8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6a72ba4c33472060a96b17378be58d45570eb4a8", "patch": "@@ -1173,7 +1173,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             // HACK(eddyb) this provides the correct generics when\n             // `feature(const_generics)` is enabled, so that const expressions\n             // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-            if tcx.features().const_generics {\n+            if tcx.lazy_normalization() {\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}]}