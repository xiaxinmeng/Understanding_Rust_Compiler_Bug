{"sha": "57c215b08e18054c64428e00a291b45dc690d9de", "node_id": "C_kwDOAAsO6NoAKDU3YzIxNWIwOGUxODA1NGM2NDQyOGUwMGEyOTFiNDVkYzY5MGQ5ZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-14T05:37:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-14T05:37:08Z"}, "message": "Auto merge of #112609 - matthiaskrgr:rollup-er6weld, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #112197 (Erase regions even if normalization fails in writeback (in new solver))\n - #112495 (fix(resolve): update shadowed_glob more precision)\n - #112520 (Fix the overflow issue for transmute_generic_consts)\n - #112571 (rustdoc-search: search never type with `!`)\n - #112581 ([rustdoc] Fix URL encoding of % sign)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "285c685ef97e21d679275b84280d862fe27fc364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285c685ef97e21d679275b84280d862fe27fc364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c215b08e18054c64428e00a291b45dc690d9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c215b08e18054c64428e00a291b45dc690d9de", "html_url": "https://github.com/rust-lang/rust/commit/57c215b08e18054c64428e00a291b45dc690d9de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c215b08e18054c64428e00a291b45dc690d9de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa8762b7b6c2b75d6c83fb011ee8fa4874168829", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8762b7b6c2b75d6c83fb011ee8fa4874168829", "html_url": "https://github.com/rust-lang/rust/commit/fa8762b7b6c2b75d6c83fb011ee8fa4874168829"}, {"sha": "623b1d4b62be3d3f106f5c273443d71326356585", "url": "https://api.github.com/repos/rust-lang/rust/commits/623b1d4b62be3d3f106f5c273443d71326356585", "html_url": "https://github.com/rust-lang/rust/commit/623b1d4b62be3d3f106f5c273443d71326356585"}], "stats": {"total": 370, "additions": 331, "deletions": 39}, "files": [{"sha": "362c07431e0a2f6ae05264dbe835b06198095d63", "filename": "compiler/rustc_hir_typeck/src/intrinsicck.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -82,8 +82,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Try to display a sensible error with as much information as possible.\n         let skeleton_string = |ty: Ty<'tcx>, sk| match sk {\n-            Ok(SizeSkeleton::Known(size)) => format!(\"{} bits\", size.bits()),\n             Ok(SizeSkeleton::Pointer { tail, .. }) => format!(\"pointer to `{tail}`\"),\n+            Ok(SizeSkeleton::Known(size)) => {\n+                if let Some(v) = u128::from(size.bytes()).checked_mul(8) {\n+                    format!(\"{} bits\", v)\n+                } else {\n+                    // `u128` should definitely be able to hold the size of different architectures\n+                    // larger sizes should be reported as error `are too big for the current architecture`\n+                    // otherwise we have a bug somewhere\n+                    bug!(\"{:?} overflow for u128\", size)\n+                }\n+            }\n             Ok(SizeSkeleton::Generic(size)) => {\n                 if let Some(size) = size.try_eval_target_usize(tcx, self.param_env) {\n                     format!(\"{size} bytes\")"}, {"sha": "29abe921bbdcdac80ade89658355311cde561473", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -136,7 +136,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     fn write_ty_to_typeck_results(&mut self, hir_id: hir::HirId, ty: Ty<'tcx>) {\n         debug!(\"write_ty_to_typeck_results({:?}, {:?})\", hir_id, ty);\n-        assert!(!ty.has_infer() && !ty.has_placeholders() && !ty.has_free_regions());\n+        assert!(\n+            !ty.has_infer() && !ty.has_placeholders() && !ty.has_free_regions(),\n+            \"{ty} can't be put into typeck results\"\n+        );\n         self.typeck_results.node_types_mut().insert(hir_id, ty);\n     }\n \n@@ -803,7 +806,11 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n                 // We must normalize erasing regions here, since later lints\n                 // expect that types that show up in the typeck are fully\n                 // normalized.\n-                self.fcx.tcx.try_normalize_erasing_regions(self.fcx.param_env, t).unwrap_or(t)\n+                if let Ok(t) = self.fcx.tcx.try_normalize_erasing_regions(self.fcx.param_env, t) {\n+                    t\n+                } else {\n+                    EraseEarlyRegions { tcx: self.fcx.tcx }.fold_ty(t)\n+                }\n             }\n             Ok(t) => {\n                 // Do not anonymize late-bound regions"}, {"sha": "47d8e5993fd825e1a02d81f94d606dcf72e037b5", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -338,7 +338,21 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         } else {\n                             resolution.binding = Some(nonglob_binding);\n                         }\n-                        resolution.shadowed_glob = Some(glob_binding);\n+\n+                        if let Some(old_binding) = resolution.shadowed_glob {\n+                            assert!(old_binding.is_glob_import());\n+                            if glob_binding.res() != old_binding.res() {\n+                                resolution.shadowed_glob = Some(this.ambiguity(\n+                                    AmbiguityKind::GlobVsGlob,\n+                                    old_binding,\n+                                    glob_binding,\n+                                ));\n+                            } else if !old_binding.vis.is_at_least(binding.vis, this.tcx) {\n+                                resolution.shadowed_glob = Some(glob_binding);\n+                            }\n+                        } else {\n+                            resolution.shadowed_glob = Some(glob_binding);\n+                        }\n                     }\n                     (false, false) => {\n                         return Err(old_binding);"}, {"sha": "5bd9389a400afebacf7788ec1585a3ad7cffb2ac", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -1940,8 +1940,6 @@ pub(crate) fn small_url_encode(s: String) -> String {\n             // While the same is not true for hashes, rustdoc only needs to be\n             // consistent with itself when encoding them.\n             st += \"+\";\n-        } else if b == b'%' {\n-            st += \"%%\";\n         } else {\n             write!(st, \"%{:02X}\", b).unwrap();\n         }"}, {"sha": "1ccfca8d0d5ffdaed4b8549ffa0c23ea074e0d2b", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -386,6 +386,35 @@ function initSearch(rawSearchIndex) {\n         if (query.literalSearch && parserState.totalElems - parserState.genericsElems > 0) {\n             throw [\"You cannot have more than one element if you use quotes\"];\n         }\n+        const typeFilter = parserState.typeFilter;\n+        parserState.typeFilter = null;\n+        if (name === \"!\") {\n+            if (typeFilter !== null && typeFilter !== \"primitive\") {\n+                throw [\n+                    \"Invalid search type: primitive never type \",\n+                    \"!\",\n+                    \" and \",\n+                    typeFilter,\n+                    \" both specified\",\n+                ];\n+            }\n+            if (generics.length !== 0) {\n+                throw [\n+                    \"Never type \",\n+                    \"!\",\n+                    \" does not accept generic parameters\",\n+                ];\n+            }\n+            return {\n+                name: \"never\",\n+                id: -1,\n+                fullPath: [\"never\"],\n+                pathWithoutLast: [],\n+                pathLast: \"never\",\n+                generics: [],\n+                typeFilter: \"primitive\",\n+            };\n+        }\n         const pathSegments = name.split(\"::\");\n         if (pathSegments.length > 1) {\n             for (let i = 0, len = pathSegments.length; i < len; ++i) {\n@@ -399,6 +428,13 @@ function initSearch(rawSearchIndex) {\n                     }\n                     throw [\"Unexpected \", \"::::\"];\n                 }\n+\n+                if (pathSegment === \"!\") {\n+                    pathSegments[i] = \"never\";\n+                    if (i !== 0) {\n+                        throw [\"Never type \", \"!\", \" is not associated item\"];\n+                    }\n+                }\n             }\n         }\n         // In case we only have something like `<p>`, there is no name.\n@@ -409,8 +445,6 @@ function initSearch(rawSearchIndex) {\n         if (isInGenerics) {\n             parserState.genericsElems += 1;\n         }\n-        const typeFilter = parserState.typeFilter;\n-        parserState.typeFilter = null;\n         return {\n             name: name,\n             id: -1,\n@@ -459,10 +493,11 @@ function initSearch(rawSearchIndex) {\n                         break;\n                     }\n                     if (foundExclamation !== -1) {\n-                        if (start <= (end - 2)) {\n+                        if (foundExclamation !== start &&\n+                            isIdentCharacter(parserState.userQuery[foundExclamation - 1])\n+                        ) {\n                             throw [\"Cannot have associated items in macros\"];\n                         } else {\n-                            // if start == end - 1, we got the never type\n                             // while the never type has no associated macros, we still\n                             // can parse a path like that\n                             foundExclamation = -1;\n@@ -478,7 +513,10 @@ function initSearch(rawSearchIndex) {\n             end = parserState.pos;\n         }\n         // if start == end - 1, we got the never type\n-        if (foundExclamation !== -1 && start <= (end - 2)) {\n+        if (foundExclamation !== -1 &&\n+            foundExclamation !== start &&\n+            isIdentCharacter(parserState.userQuery[foundExclamation - 1])\n+        ) {\n             if (parserState.typeFilter === null) {\n                 parserState.typeFilter = \"macro\";\n             } else if (parserState.typeFilter !== \"macro\") {"}, {"sha": "55bf38110a6d58ea6f627ac191e37d26f06551df", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -10,7 +10,7 @@ use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n-const ISSUES_ENTRY_LIMIT: usize = 1898;\n+const ISSUES_ENTRY_LIMIT: usize = 1896;\n const ROOT_ENTRY_LIMIT: usize = 870;\n \n const EXPECTED_TEST_FILE_EXTENSIONS: &[&str] = &["}, {"sha": "27d415b5e486d58858e88828f544c3e68fb6c0a6", "filename": "tests/rustdoc-js-std/never.js", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fnever.js", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fnever.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fnever.js?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -1,6 +1,14 @@\n-const EXPECTED = {\n-    'query': '!',\n-    'others': [\n-        { 'path': 'std', 'name': 'never' },\n-    ],\n-};\n+const EXPECTED = [\n+    {\n+        'query': '!',\n+        'others': [\n+            { 'path': 'std', 'name': 'never' },\n+        ],\n+    },\n+    {\n+        'query': '!::clone',\n+        'others': [\n+            { 'path': 'std::never', 'name': 'clone' },\n+        ],\n+    },\n+];"}, {"sha": "af7f63f99cbdf8c6c0edecf0ad2ed3123b5c28bb", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -359,6 +359,15 @@ const PARSED = [\n         userQuery: \"mod:a!\",\n         error: 'Invalid search type: macro `!` and `mod` both specified',\n     },\n+    {\n+        query: \"mod:!\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"mod:!\",\n+        returned: [],\n+        userQuery: \"mod:!\",\n+        error: 'Invalid search type: primitive never type `!` and `mod` both specified',\n+    },\n     {\n         query: \"a!::a\",\n         elems: [],"}, {"sha": "f65a7ce6692b0cbb6033adb69ec7bd68d816232a", "filename": "tests/rustdoc-js-std/parser-ident.js", "status": "modified", "additions": 71, "deletions": 9, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fparser-ident.js", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fparser-ident.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-ident.js?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -8,11 +8,12 @@ const PARSED = [\n             pathLast: \"r\",\n             generics: [\n                 {\n-                    name: \"!\",\n-                    fullPath: [\"!\"],\n+                    name: \"never\",\n+                    fullPath: [\"never\"],\n                     pathWithoutLast: [],\n-                    pathLast: \"!\",\n+                    pathLast: \"never\",\n                     generics: [],\n+                    typeFilter: 15,\n                 },\n             ],\n             typeFilter: -1,\n@@ -26,12 +27,12 @@ const PARSED = [\n     {\n         query: \"!\",\n         elems: [{\n-            name: \"!\",\n-            fullPath: [\"!\"],\n+            name: \"never\",\n+            fullPath: [\"never\"],\n             pathWithoutLast: [],\n-            pathLast: \"!\",\n+            pathLast: \"never\",\n             generics: [],\n-            typeFilter: -1,\n+            typeFilter: 15,\n         }],\n         foundElems: 1,\n         original: \"!\",\n@@ -64,12 +65,21 @@ const PARSED = [\n         userQuery: \"a!::b\",\n         error: \"Cannot have associated items in macros\",\n     },\n+    {\n+        query: \"!<T>\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"!<T>\",\n+        returned: [],\n+        userQuery: \"!<t>\",\n+        error: \"Never type `!` does not accept generic parameters\",\n+    },\n     {\n         query: \"!::b\",\n         elems: [{\n             name: \"!::b\",\n-            fullPath: [\"!\", \"b\"],\n-            pathWithoutLast: [\"!\"],\n+            fullPath: [\"never\", \"b\"],\n+            pathWithoutLast: [\"never\"],\n             pathLast: \"b\",\n             generics: [],\n             typeFilter: -1,\n@@ -80,6 +90,58 @@ const PARSED = [\n         userQuery: \"!::b\",\n         error: null,\n     },\n+    {\n+        query: \"b::!\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"b::!\",\n+        returned: [],\n+        userQuery: \"b::!\",\n+        error: \"Never type `!` is not associated item\",\n+    },\n+    {\n+        query: \"!::!\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"!::!\",\n+        returned: [],\n+        userQuery: \"!::!\",\n+        error: \"Never type `!` is not associated item\",\n+    },\n+    {\n+        query: \"b::!::c\",\n+        elems: [],\n+        foundElems: 0,\n+        original: \"b::!::c\",\n+        returned: [],\n+        userQuery: \"b::!::c\",\n+        error: \"Never type `!` is not associated item\",\n+    },\n+    {\n+        query: \"!::b<T>\",\n+        elems: [{\n+            name: \"!::b\",\n+            fullPath: [\"never\", \"b\"],\n+            pathWithoutLast: [\"never\"],\n+            pathLast: \"b\",\n+            generics: [\n+                {\n+                    name: \"t\",\n+                    fullPath: [\"t\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"t\",\n+                    generics: [],\n+                    typeFilter: -1,\n+                }\n+            ],\n+            typeFilter: -1,\n+        }],\n+        foundElems: 1,\n+        original: \"!::b<T>\",\n+        returned: [],\n+        userQuery: \"!::b<t>\",\n+        error: null,\n+    },\n     {\n         query: \"a!::b!\",\n         elems: [],"}, {"sha": "6ea86609115bf0252a0916615874077d943bc4a9", "filename": "tests/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-returned.js?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -84,12 +84,12 @@ const PARSED = [\n         foundElems: 1,\n         original: \"-> !\",\n         returned: [{\n-            name: \"!\",\n-            fullPath: [\"!\"],\n+            name: \"never\",\n+            fullPath: [\"never\"],\n             pathWithoutLast: [],\n-            pathLast: \"!\",\n+            pathLast: \"never\",\n             generics: [],\n-            typeFilter: -1,\n+            typeFilter: 15,\n         }],\n         userQuery: \"-> !\",\n         error: null,"}, {"sha": "ed24d693133ba669c9764f3ab201e7e331bbdfed", "filename": "tests/rustdoc-js/never-search.js", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js%2Fnever-search.js", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js%2Fnever-search.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fnever-search.js?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,46 @@\n+// exact-check\n+\n+const EXPECTED = [\n+    {\n+        'query': '-> !',\n+        'others': [\n+            { 'path': 'never_search', 'name': 'loops' },\n+        ],\n+    },\n+    {\n+        'query': '-> never',\n+        'others': [\n+            { 'path': 'never_search', 'name': 'loops' },\n+            { 'path': 'never_search', 'name': 'returns' },\n+        ],\n+    },\n+    {\n+        'query': '!',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'impossible' },\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+        ],\n+    },\n+    {\n+        'query': 'never',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'impossible' },\n+            { 'path': 'never_search', 'name': 'uninteresting' },\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+            { 'path': 'never_search', 'name': 'box_uninteresting' },\n+        ],\n+    },\n+    {\n+        'query': 'box<!>',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+        ],\n+    },\n+    {\n+        'query': 'box<never>',\n+        'in_args': [\n+            { 'path': 'never_search', 'name': 'box_impossible' },\n+            { 'path': 'never_search', 'name': 'box_uninteresting' },\n+        ],\n+    },\n+];"}, {"sha": "299b4660dae9ecdcfc7e711ab460d0fabc5afed8", "filename": "tests/rustdoc-js/never-search.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js%2Fnever-search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Frustdoc-js%2Fnever-search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fnever-search.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,13 @@\n+#![feature(never_type)]\n+\n+#[allow(nonstandard_style)]\n+pub struct never;\n+\n+pub fn loops() -> ! { loop {} }\n+pub fn returns() -> never { never }\n+\n+pub fn impossible(x: !) { match x {} }\n+pub fn uninteresting(x: never) { match x { never => {} } }\n+\n+pub fn box_impossible(x: Box<!>) { match *x {} }\n+pub fn box_uninteresting(x: Box<never>) { match *x { never => {} } }"}, {"sha": "0dd7776d5954426f97d94d4954d65a9079d235c6", "filename": "tests/ui/const-generics/issue-112505-overflow.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fconst-generics%2Fissue-112505-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fconst-generics%2Fissue-112505-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-112505-overflow.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,7 @@\n+#![feature(transmute_generic_consts)]\n+\n+fn overflow(v: [[[u32; 8888888]; 9999999]; 777777777]) -> [[[u32; 9999999]; 777777777]; 239] {\n+    unsafe { std::mem::transmute(v) } //~ ERROR cannot transmute between types of different sizes\n+}\n+\n+fn main() { }"}, {"sha": "0432f2fa8be5da8fd427b0591f806928df922b4f", "filename": "tests/ui/const-generics/issue-112505-overflow.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fconst-generics%2Fissue-112505-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fconst-generics%2Fissue-112505-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-112505-overflow.stderr?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,12 @@\n+error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n+  --> $DIR/issue-112505-overflow.rs:4:14\n+   |\n+LL |     unsafe { std::mem::transmute(v) }\n+   |              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: source type: `[[[u32; 8888888]; 9999999]; 777777777]` (values of the type `[[[u32; 8888888]; 9999999]; 777777777]` are too big for the current architecture)\n+   = note: target type: `[[[u32; 9999999]; 777777777]; 239]` (59484438436515561504 bits)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0512`."}, {"sha": "b9a53cbd4fcb28bd2106f33e733664b89b6dc56d", "filename": "tests/ui/for/issue-20605.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Ffor%2Fissue-20605.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Ffor%2Fissue-20605.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Fissue-20605.current.stderr?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cannot be known at compilation time\n-  --> $DIR/issue-20605.rs:2:17\n+  --> $DIR/issue-20605.rs:5:17\n    |\n LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ the trait `IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`", "previous_filename": "tests/ui/issues/issue-20605.stderr"}, {"sha": "5362a68c834a3a9017df16b623f9947a56ed282c", "filename": "tests/ui/for/issue-20605.next.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Ffor%2Fissue-20605.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Ffor%2Fissue-20605.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Fissue-20605.next.stderr?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n+  --> $DIR/issue-20605.rs:5:17\n+   |\n+LL |     for item in *things { *item = 0 }\n+   |                 ^^^^^^^ the trait `IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n+\n+error[E0277]: the size for values of type `<dyn Iterator<Item = &'a mut u8> as IntoIterator>::IntoIter` cannot be known at compilation time\n+  --> $DIR/issue-20605.rs:5:17\n+   |\n+LL |     for item in *things { *item = 0 }\n+   |                 ^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `<dyn Iterator<Item = &'a mut u8> as IntoIterator>::IntoIter`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error: the type `<_ as IntoIterator>::IntoIter` is not well-formed\n+  --> $DIR/issue-20605.rs:5:17\n+   |\n+LL |     for item in *things { *item = 0 }\n+   |                 ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "499271fa92fa90c04d61aa5a0b274fdea9cf9c16", "filename": "tests/ui/for/issue-20605.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Ffor%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Ffor%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor%2Fissue-20605.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,11 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n+fn changer<'a>(mut things: Box<dyn Iterator<Item=&'a mut u8>>) {\n+    for item in *things { *item = 0 }\n+    //~^ ERROR the size for values of type\n+    //[next]~^^ ERROR the type `<_ as IntoIterator>::IntoIter` is not well-formed\n+    //[next]~| ERROR the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "17b7d32ebf59b95e47fd19df991b0d92838b2fad", "filename": "tests/ui/issues/issue-20605.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa8762b7b6c2b75d6c83fb011ee8fa4874168829/tests%2Fui%2Fissues%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8762b7b6c2b75d6c83fb011ee8fa4874168829/tests%2Fui%2Fissues%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20605.rs?ref=fa8762b7b6c2b75d6c83fb011ee8fa4874168829", "patch": "@@ -1,6 +0,0 @@\n-fn changer<'a>(mut things: Box<dyn Iterator<Item=&'a mut u8>>) {\n-    for item in *things { *item = 0 }\n-//~^ ERROR the size for values of type\n-}\n-\n-fn main() {}"}, {"sha": "a049cac830ab4acc32313f36fa60b924b73d7728", "filename": "tests/ui/resolve/issue-105069.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fresolve%2Fissue-105069.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fresolve%2Fissue-105069.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-105069.stderr?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -4,17 +4,19 @@ error[E0659]: `V` is ambiguous\n LL | use V;\n    |     ^ ambiguous name\n    |\n-   = note: ambiguous because of multiple potential import sources\n+   = note: ambiguous because of multiple glob imports of a name in the same module\n note: `V` could refer to the variant imported here\n   --> $DIR/issue-105069.rs:1:5\n    |\n LL | use self::A::*;\n    |     ^^^^^^^^^^\n+   = help: consider adding an explicit import of `V` to disambiguate\n note: `V` could also refer to the variant imported here\n   --> $DIR/issue-105069.rs:3:5\n    |\n LL | use self::B::*;\n    |     ^^^^^^^^^^\n+   = help: consider adding an explicit import of `V` to disambiguate\n \n error: aborting due to previous error\n "}, {"sha": "bff6c911236e641772c0d0a2c906ecd7e7cb0a3d", "filename": "tests/ui/resolve/issue-109153.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fresolve%2Fissue-109153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fresolve%2Fissue-109153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-109153.rs?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,14 @@\n+use foo::*;\n+\n+mod foo {\n+    pub mod bar {\n+        pub mod bar {\n+            pub mod bar {}\n+        }\n+    }\n+}\n+\n+use bar::bar; //~ ERROR `bar` is ambiguous\n+use bar::*;\n+\n+fn main() { }"}, {"sha": "1a345d2a3e3a71ad6c2754b8d793be55952c822e", "filename": "tests/ui/resolve/issue-109153.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fresolve%2Fissue-109153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c215b08e18054c64428e00a291b45dc690d9de/tests%2Fui%2Fresolve%2Fissue-109153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-109153.stderr?ref=57c215b08e18054c64428e00a291b45dc690d9de", "patch": "@@ -0,0 +1,23 @@\n+error[E0659]: `bar` is ambiguous\n+  --> $DIR/issue-109153.rs:11:5\n+   |\n+LL | use bar::bar;\n+   |     ^^^ ambiguous name\n+   |\n+   = note: ambiguous because of multiple glob imports of a name in the same module\n+note: `bar` could refer to the module imported here\n+  --> $DIR/issue-109153.rs:1:5\n+   |\n+LL | use foo::*;\n+   |     ^^^^^^\n+   = help: consider adding an explicit import of `bar` to disambiguate\n+note: `bar` could also refer to the module imported here\n+  --> $DIR/issue-109153.rs:12:5\n+   |\n+LL | use bar::*;\n+   |     ^^^^^^\n+   = help: consider adding an explicit import of `bar` to disambiguate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}]}