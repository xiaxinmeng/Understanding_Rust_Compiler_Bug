{"sha": "c114fe576f12be5b17e34c37dc34283f25d2eae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTRmZTU3NmYxMmJlNWIxN2UzNGMzN2RjMzQyODNmMjVkMmVhZTE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-05T17:21:33Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:58Z"}, "message": "Finish fixing warnings and errors. Bootstrap builds.", "tree": {"sha": "f7f0f2cedeab8180c28d1cd58995b3e99e8e92a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f0f2cedeab8180c28d1cd58995b3e99e8e92a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c114fe576f12be5b17e34c37dc34283f25d2eae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c114fe576f12be5b17e34c37dc34283f25d2eae1", "html_url": "https://github.com/rust-lang/rust/commit/c114fe576f12be5b17e34c37dc34283f25d2eae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c114fe576f12be5b17e34c37dc34283f25d2eae1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db49fb4670ed09616d2c05b2e6c1444cee78071", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db49fb4670ed09616d2c05b2e6c1444cee78071", "html_url": "https://github.com/rust-lang/rust/commit/7db49fb4670ed09616d2c05b2e6c1444cee78071"}], "stats": {"total": 130, "additions": 51, "deletions": 79}, "files": [{"sha": "589401ea24e2c8e7093ac8189dc013244ae167c4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c114fe576f12be5b17e34c37dc34283f25d2eae1", "patch": "@@ -187,22 +187,6 @@ impl<'a> Builder<'a> {\n         self.ensure(compile::Assemble { target_compiler: Compiler { stage, host } })\n     }\n \n-    pub fn rustc(&self, compiler: Compiler) -> PathBuf {\n-        if compiler.is_snapshot(self) {\n-            self.build.initial_rustc.clone()\n-        } else {\n-            self.compiler(compiler.stage, compiler.host);\n-            self.sysroot(compiler).join(\"bin\").join(exe(\"rustc\", compiler.host))\n-        }\n-    }\n-\n-    pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n-        let mut rustdoc = self.rustc(compiler);\n-        rustdoc.pop();\n-        rustdoc.push(exe(\"rustdoc\", compiler.host));\n-        rustdoc\n-    }\n-\n     pub fn sysroot(&self, compiler: Compiler<'a>) -> PathBuf {\n         self.ensure(compile::Sysroot { compiler })\n     }\n@@ -254,14 +238,31 @@ impl<'a> Builder<'a> {\n         add_lib_path(vec![self.rustc_libdir(compiler)], cmd);\n     }\n \n+    /// Get a path to the compiler specified.\n+    pub fn rustc(&self, compiler: Compiler) -> PathBuf {\n+        if compiler.is_snapshot(self) {\n+            self.initial_rustc.clone()\n+        } else {\n+            self.sysroot(compiler).join(\"bin\").join(exe(\"rustc\", compiler.host))\n+        }\n+    }\n+\n+    /// Get the `rustdoc` executable next to the specified compiler\n+    pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n+        let mut rustdoc = self.rustc(compiler);\n+        rustdoc.pop();\n+        rustdoc.push(exe(\"rustdoc\", compiler.host));\n+        rustdoc\n+    }\n+\n     /// Prepares an invocation of `cargo` to be run.\n     ///\n     /// This will create a `Command` that represents a pending execution of\n     /// Cargo. This cargo will be configured to use `compiler` as the actual\n     /// rustc compiler, its output will be scoped by `mode`'s output directory,\n     /// it will pass the `--target` flag for the specified `target`, and will be\n     /// executing the Cargo command `cmd`.\n-    fn cargo(&self,\n+    pub fn cargo(&self,\n              compiler: Compiler,\n              mode: Mode,\n              target: &str,\n@@ -293,7 +294,7 @@ impl<'a> Builder<'a> {\n         // src/bootstrap/bin/{rustc.rs,rustdoc.rs}\n         cargo.env(\"RUSTBUILD_NATIVE_DIR\", self.native_dir(target))\n              .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n-             .env(\"RUSTC_REAL\", self.compiler_path(compiler))\n+             .env(\"RUSTC_REAL\", self.rustc(compiler))\n              .env(\"RUSTC_STAGE\", stage.to_string())\n              .env(\"RUSTC_CODEGEN_UNITS\",\n                   self.config.rust_codegen_units.to_string())\n@@ -353,7 +354,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n         } else {\n-            cargo.env(\"RUSTC_SNAPSHOT\", self.compiler_path(compiler))\n+            cargo.env(\"RUSTC_SNAPSHOT\", self.rustc(compiler))\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n "}, {"sha": "f253ce80160732132b2059ecb0361b5e86bcad0a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=c114fe576f12be5b17e34c37dc34283f25d2eae1", "patch": "@@ -170,8 +170,8 @@ impl<'a> Step<'a> for Cargotest<'a> {\n         let mut cmd = builder.tool_cmd(Tool::CargoTest);\n         try_run(build, cmd.arg(&build.initial_cargo)\n                           .arg(&out_dir)\n-                          .env(\"RUSTC\", build.compiler_path(compiler))\n-                          .env(\"RUSTDOC\", build.rustdoc(compiler)));\n+                          .env(\"RUSTC\", builder.rustc(compiler))\n+                          .env(\"RUSTDOC\", builder.rustdoc(compiler)));\n     }\n }\n \n@@ -215,7 +215,7 @@ impl<'a> Step<'a> for Cargo<'a> {\n             iter::once(path).chain(env::split_paths(&old_path))\n         ).expect(\"\");\n \n-        let mut cargo = build.cargo(compiler, Mode::Tool, self.host, \"test\");\n+        let mut cargo = builder.cargo(compiler, Mode::Tool, self.host, \"test\");\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n         if !build.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n@@ -584,10 +584,10 @@ impl<'a> Step<'a> for Compiletest<'a> {\n         // compiletest currently has... a lot of arguments, so let's just pass all\n         // of them!\n \n-        cmd.arg(\"--compile-lib-path\").arg(build.rustc_libdir(compiler));\n+        cmd.arg(\"--compile-lib-path\").arg(builder.rustc_libdir(compiler));\n         cmd.arg(\"--run-lib-path\").arg(builder.sysroot_libdir(compiler, target));\n-        cmd.arg(\"--rustc-path\").arg(build.compiler_path(compiler));\n-        cmd.arg(\"--rustdoc-path\").arg(build.rustdoc(compiler));\n+        cmd.arg(\"--rustc-path\").arg(builder.rustc(compiler));\n+        cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler));\n         cmd.arg(\"--src-base\").arg(build.src.join(\"src/test\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(build, compiler.host).join(suite));\n         cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n@@ -806,11 +806,12 @@ impl<'a> Step<'a> for ErrorIndex<'a> {\n                     .arg(&output)\n                     .env(\"CFG_BUILD\", &build.build));\n \n-        markdown_test(build, compiler, &output);\n+        markdown_test(builder, compiler, &output);\n     }\n }\n \n-fn markdown_test(build: &Build, compiler: Compiler, markdown: &Path) {\n+fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) {\n+    let build = builder.build;\n     let mut file = t!(File::open(markdown));\n     let mut contents = String::new();\n     t!(file.read_to_string(&mut contents));\n@@ -819,8 +820,8 @@ fn markdown_test(build: &Build, compiler: Compiler, markdown: &Path) {\n     }\n \n     println!(\"doc tests for: {}\", markdown.display());\n-    let mut cmd = Command::new(build.rustdoc(compiler));\n-    build.add_rustc_lib_path(compiler, &mut cmd);\n+    let mut cmd = Command::new(builder.rustdoc(compiler));\n+    builder.add_rustc_lib_path(compiler, &mut cmd);\n     build.add_rust_test_threads(&mut cmd);\n     cmd.arg(\"--test\");\n     cmd.arg(markdown);\n@@ -1071,7 +1072,7 @@ impl<'a> Step<'a> for Krate<'a> {\n         // Pass in some standard flags then iterate over the graph we've discovered\n         // in `cargo metadata` with the maps above and figure out what `-p`\n         // arguments need to get passed.\n-        let mut cargo = build.cargo(compiler, mode, target, test_kind.subcommand());\n+        let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         cargo.arg(\"--manifest-path\")\n             .arg(build.src.join(path).join(\"Cargo.toml\"))\n             .arg(\"--features\").arg(features);"}, {"sha": "2c544bf1f949ecfe80fd9899df21a2b77664cbfb", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c114fe576f12be5b17e34c37dc34283f25d2eae1", "patch": "@@ -196,7 +196,7 @@ impl<'a> Step<'a> for Std<'a> {\n                 compiler.host, target);\n \n         let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n-        build.clear_if_dirty(&out_dir, &build.compiler_path(compiler));\n+        build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n         let mut features = build.std_features();\n \n@@ -365,7 +365,7 @@ impl<'a> Step<'a> for StartupObjects<'a> {\n         }\n \n         let compiler = builder.compiler(0, &build.build);\n-        let compiler_path = build.compiler_path(compiler);\n+        let compiler_path = builder.rustc(compiler);\n         let src_dir = &build.src.join(\"src/rtstartup\");\n         let dst_dir = &build.native_dir(target).join(\"rtstartup\");\n         let sysroot_dir = &builder.sysroot_libdir(for_compiler, target);\n@@ -454,7 +454,7 @@ impl<'a> Step<'a> for Test<'a> {\n                 compiler.host, target);\n         let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n         build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n-        let mut cargo = build.cargo(compiler, Mode::Libtest, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"build\");\n         if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n             cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n         }\n@@ -465,7 +465,7 @@ impl<'a> Step<'a> for Test<'a> {\n                 &libtest_stamp(build, compiler, target));\n \n         builder.ensure(TestLink {\n-            compiler: builder.compiler(1, &build.build),\n+            compiler: builder.compiler(compiler.stage, &build.build),\n             target_compiler: compiler,\n             target: target,\n         });\n@@ -583,7 +583,7 @@ impl<'a> Step<'a> for Rustc<'a> {\n         let out_dir = build.cargo_out(compiler, Mode::Librustc, target);\n         build.clear_if_dirty(&out_dir, &libtest_stamp(build, compiler, target));\n \n-        let mut cargo = build.cargo(compiler, Mode::Librustc, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n         cargo.arg(\"--features\").arg(build.rustc_features())\n              .arg(\"--manifest-path\")\n              .arg(build.src.join(\"src/rustc/Cargo.toml\"));\n@@ -838,7 +838,7 @@ impl<'a> Step<'a> for Assemble<'a> {\n         let rustc = out_dir.join(exe(\"rustc\", host));\n         let bindir = sysroot.join(\"bin\");\n         t!(fs::create_dir_all(&bindir));\n-        let compiler = build.compiler_path(target_compiler);\n+        let compiler = builder.rustc(target_compiler);\n         let _ = fs::remove_file(&compiler);\n         copy(&rustc, &compiler);\n "}, {"sha": "a2f779514a9975bdf0551277e995d0cfab06e7ea", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c114fe576f12be5b17e34c37dc34283f25d2eae1", "patch": "@@ -998,7 +998,7 @@ impl<'a> Step<'a> for Cargo<'a> {\n         let etc = src.join(\"src/etc\");\n         let release_num = build.release_num(\"cargo\");\n         let name = pkgname(build, \"cargo\");\n-        let version = build.cargo_info.version(build, &release_num);\n+        let version = builder.cargo_info.version(build, &release_num);\n \n         let tmp = tmpdir(build);\n         let image = tmp.join(\"cargo-image\");"}, {"sha": "3493f4e66bca0089befaa6cea3b0888c0e2961dd", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c114fe576f12be5b17e34c37dc34283f25d2eae1", "patch": "@@ -271,7 +271,7 @@ fn invoke_rustdoc(builder: &Builder, target: &str, markdown: &str) {\n \n     let path = build.src.join(\"src/doc\").join(markdown);\n \n-    let rustdoc = build.rustdoc(compiler);\n+    let rustdoc = builder.rustdoc(compiler);\n \n     let favicon = build.src.join(\"src/doc/favicon.inc\");\n     let footer = build.src.join(\"src/doc/footer.inc\");\n@@ -290,7 +290,7 @@ fn invoke_rustdoc(builder: &Builder, target: &str, markdown: &str) {\n \n     let mut cmd = Command::new(&rustdoc);\n \n-    build.add_rustc_lib_path(compiler, &mut cmd);\n+    builder.add_rustc_lib_path(compiler, &mut cmd);\n \n     let out = out.join(\"book\");\n \n@@ -386,7 +386,7 @@ impl<'a> Step<'a> for Standalone<'a> {\n             }\n \n             let html = out.join(filename).with_extension(\"html\");\n-            let rustdoc = build.rustdoc(compiler);\n+            let rustdoc = builder.rustdoc(compiler);\n             if up_to_date(&path, &html) &&\n                up_to_date(&footer, &html) &&\n                up_to_date(&favicon, &html) &&\n@@ -397,7 +397,7 @@ impl<'a> Step<'a> for Standalone<'a> {\n             }\n \n             let mut cmd = Command::new(&rustdoc);\n-            build.add_rustc_lib_path(compiler, &mut cmd);\n+            builder.add_rustc_lib_path(compiler, &mut cmd);\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)\n@@ -483,7 +483,7 @@ impl<'a> Step<'a> for Std<'a> {\n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Libstd)\n                            .join(target).join(\"doc\");\n-        let rustdoc = build.rustdoc(compiler);\n+        let rustdoc = builder.rustdoc(compiler);\n \n         // Here what we're doing is creating a *symlink* (directory junction on\n         // Windows) to the final output location. This is not done as an\n@@ -502,7 +502,7 @@ impl<'a> Step<'a> for Std<'a> {\n         build.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n-        let mut cargo = build.cargo(compiler, Mode::Libstd, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"doc\");\n         cargo.arg(\"--manifest-path\")\n              .arg(build.src.join(\"src/libstd/Cargo.toml\"))\n              .arg(\"--features\").arg(build.std_features());\n@@ -597,14 +597,14 @@ impl<'a> Step<'a> for Test<'a> {\n         builder.ensure(compile::Test { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Libtest)\n                            .join(target).join(\"doc\");\n-        let rustdoc = build.rustdoc(compiler);\n+        let rustdoc = builder.rustdoc(compiler);\n \n         // See docs in std above for why we symlink\n         let my_out = build.crate_doc_out(target);\n         build.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n-        let mut cargo = build.cargo(compiler, Mode::Libtest, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"doc\");\n         cargo.arg(\"--manifest-path\")\n              .arg(build.src.join(\"src/libtest/Cargo.toml\"));\n         build.run(&mut cargo);\n@@ -685,14 +685,14 @@ impl<'a> Step<'a> for Rustc<'a> {\n         builder.ensure(compile::Rustc { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Librustc)\n                            .join(target).join(\"doc\");\n-        let rustdoc = build.rustdoc(compiler);\n+        let rustdoc = builder.rustdoc(compiler);\n \n         // See docs in std above for why we symlink\n         let my_out = build.crate_doc_out(target);\n         build.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n-        let mut cargo = build.cargo(compiler, Mode::Librustc, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n         cargo.arg(\"--manifest-path\")\n              .arg(build.src.join(\"src/rustc/Cargo.toml\"))\n              .arg(\"--features\").arg(build.rustc_features());"}, {"sha": "2a7cc58bddd8e6548cf23b3b968ce832cac09c28", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c114fe576f12be5b17e34c37dc34283f25d2eae1", "patch": "@@ -96,7 +96,7 @@ use std::process::Command;\n \n use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n \n-use util::{exe, libdir, add_lib_path, OutputFolder, CiEnv};\n+use util::{exe, libdir, OutputFolder, CiEnv};\n \n mod cc;\n mod channel;\n@@ -352,23 +352,6 @@ impl Build {\n         t!(File::create(stamp));\n     }\n \n-    /// Get a path to the compiler specified.\n-    fn compiler_path(&self, compiler: Compiler) -> PathBuf {\n-        if compiler.is_snapshot(self) {\n-            self.initial_rustc.clone()\n-        } else {\n-            self.sysroot(compiler).join(\"bin\").join(exe(\"rustc\", compiler.host))\n-        }\n-    }\n-\n-    /// Get the `rustdoc` executable next to the specified compiler\n-    fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n-        let mut rustdoc = self.compiler_path(compiler);\n-        rustdoc.pop();\n-        rustdoc.push(exe(\"rustdoc\", compiler.host));\n-        rustdoc\n-    }\n-\n     /// Get the space-separated set of activated features for the standard\n     /// library.\n     fn std_features(&self) -> String {\n@@ -532,19 +515,6 @@ impl Build {\n         }\n     }\n \n-    /// Returns the compiler's libdir where it stores the dynamic libraries that\n-    /// it itself links against.\n-    ///\n-    /// For example this returns `<sysroot>/lib` on Unix and `<sysroot>/bin` on\n-    /// Windows.\n-    fn rustc_libdir(&self, compiler: Compiler) -> PathBuf {\n-        if compiler.is_snapshot(self) {\n-            self.rustc_snapshot_libdir()\n-        } else {\n-            self.sysroot(compiler).join(libdir(compiler.host))\n-        }\n-    }\n-\n     /// Returns the libdir of the snapshot compiler.\n     fn rustc_snapshot_libdir(&self) -> PathBuf {\n         self.initial_rustc.parent().unwrap().parent().unwrap()"}, {"sha": "50e76c324c3ea5712c67b6b69a24532b49904989", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c114fe576f12be5b17e34c37dc34283f25d2eae1/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c114fe576f12be5b17e34c37dc34283f25d2eae1", "patch": "@@ -110,7 +110,7 @@ impl<'a> Step<'a> for ToolBuild<'a> {\n         let _folder = build.fold_output(|| format!(\"stage{}-{}\", stage, tool));\n         println!(\"Building stage{} tool {} ({})\", stage, tool, target);\n \n-        let mut cargo = build.cargo(compiler, Mode::Tool, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Tool, target, \"build\");\n         let dir = build.src.join(\"src/tools\").join(tool);\n         cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n "}]}