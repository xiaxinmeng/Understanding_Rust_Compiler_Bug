{"sha": "5387b6542f1d72d332c84e8325309f0c9de7b6a0", "node_id": "C_kwDOAAsO6NoAKDUzODdiNjU0MmYxZDcyZDMzMmM4NGU4MzI1MzA5ZjBjOWRlN2I2YTA", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-10-12T05:06:37Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-10-12T05:42:23Z"}, "message": "Add const_eval_select intrinsic", "tree": {"sha": "1f01043fc08bd969b58879b64b73f11f08f26624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f01043fc08bd969b58879b64b73f11f08f26624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5387b6542f1d72d332c84e8325309f0c9de7b6a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmFlID8ACgkQAn35M4hi\nrd1Vvg/9FshXYx/dMsPkiPKCrw0LyrP3yxZFFk/qbIk6yPtvCbu4RJy0NiMDFqh0\nbmOF4jxL0iqauKutFcShxvN9RTNwYeB6mip/h3UVh+03HuDoksc7d8G5Gugg7FwW\n6AKQyGmGCdxkf30D2haRK5QDoUtrj6REQ4KvC5rFc3+QnXBNm9KpQGhkJP07q2Vj\nor8MVG8p/DsQalhL5HnZeoUjCPJUfBCb8SNwzVgu/kUOM5EkyZ8m1mDQslRAZnkN\n6FqOe79aWXB0/urnFYiGseGOkVqzOe4X5Ye5FsqGAYWowzCewr0UGmVS0IcX1T8Z\nF06rKvm/Zu2WLoYycKQpRCSYaD3wM1PHvvuFmijO3aTp3FT6WMekBvTn6zNaFksV\nZdBQ/JBAiJYcnN9ZaeoJbQUDPZgrodqWHfDymDh7o/VmZGF0wqs/scFBstElH0Qg\n/tTf7TkK7VOHpHchhSznq2kWxQXAgZsVVl4wVnyxWU8JAOD02ltW3ZubpJ+m3VtV\nVpY4vmH0XUZhCctgku+MOs9NyNIj3ch82GxqpvaeGF5ewceo9RzlBXACU2ffQTbf\ndSvzW7BAyJe/XXtUD0Yplv3NOwc5o8/QcWAFHfS4phgtoG6L8nG175ltusXt+tAE\ncFJ5qFELzBB2vVYGt5voylApwGlCfP+NVZTD2cRaU4NmpRx8rik=\n=LVS7\n-----END PGP SIGNATURE-----", "payload": "tree 1f01043fc08bd969b58879b64b73f11f08f26624\nparent 0c87288f92b7e6365d61cfbcbc453ea4c696c030\nauthor Deadbeef <ent3rm4n@gmail.com> 1634015197 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1634017343 +0000\n\nAdd const_eval_select intrinsic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5387b6542f1d72d332c84e8325309f0c9de7b6a0", "html_url": "https://github.com/rust-lang/rust/commit/5387b6542f1d72d332c84e8325309f0c9de7b6a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5387b6542f1d72d332c84e8325309f0c9de7b6a0/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c87288f92b7e6365d61cfbcbc453ea4c696c030", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c87288f92b7e6365d61cfbcbc453ea4c696c030", "html_url": "https://github.com/rust-lang/rust/commit/0c87288f92b7e6365d61cfbcbc453ea4c696c030"}], "stats": {"total": 372, "additions": 334, "deletions": 38}, "files": [{"sha": "78fdf9c02d06ae74bb97485e04881a464bf125b7", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -309,13 +309,13 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     span: Span,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n-    destination: Option<(Place<'tcx>, BasicBlock)>,\n+    mir_dest: Option<(Place<'tcx>, BasicBlock)>,\n ) {\n     let fn_ty = fx.monomorphize(func.ty(fx.mir, fx.tcx));\n     let fn_sig =\n         fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), fn_ty.fn_sig(fx.tcx));\n \n-    let destination = destination.map(|(place, bb)| (codegen_place(fx, place), bb));\n+    let destination = mir_dest.map(|(place, bb)| (codegen_place(fx, place), bb));\n \n     // Handle special calls like instrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {"}, {"sha": "313b62c5770b6fe823fa6e6723f73d20bab6d4e8", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -407,11 +407,9 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n     span: Span,\n ) {\n-    let def_id = instance.def_id();\n+    let intrinsic = fx.tcx.item_name(instance.def_id());\n     let substs = instance.substs;\n \n-    let intrinsic = fx.tcx.item_name(def_id);\n-\n     let ret = match destination {\n         Some((place, _)) => place,\n         None => {"}, {"sha": "202c9cad8eb53aa856336931f37acd700099b885", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -26,14 +26,35 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n     /// \"Intercept\" a function call to a panic-related function\n     /// because we have something special to do for it.\n     /// If this returns successfully (`Ok`), the function should just be evaluated normally.\n-    fn hook_panic_fn(\n+    fn hook_special_const_fn(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n+        is_const_fn: bool,\n     ) -> InterpResult<'tcx, Option<ty::Instance<'tcx>>> {\n         // The list of functions we handle here must be in sync with\n-        // `is_lang_panic_fn` in `transform/check_consts/mod.rs`.\n+        // `is_lang_special_const_fn` in `transform/check_consts/mod.rs`.\n         let def_id = instance.def_id();\n+\n+        if is_const_fn {\n+            if Some(def_id) == self.tcx.lang_items().const_eval_select() {\n+                // redirect to const_eval_select_ct\n+                if let Some(const_eval_select) = self.tcx.lang_items().const_eval_select_ct() {\n+                    return Ok(Some(\n+                        ty::Instance::resolve(\n+                            *self.tcx,\n+                            ty::ParamEnv::reveal_all(),\n+                            const_eval_select,\n+                            instance.substs,\n+                        )\n+                        .unwrap()\n+                        .unwrap(),\n+                    ));\n+                }\n+            }\n+            return Ok(None);\n+        }\n+\n         if Some(def_id) == self.tcx.lang_items().panic_fn()\n             || Some(def_id) == self.tcx.lang_items().panic_str()\n             || Some(def_id) == self.tcx.lang_items().panic_display()\n@@ -255,31 +276,31 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def) = instance.def {\n+            let mut is_const_fn = true;\n+\n             // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def.did) {\n                 // allow calling functions marked with #[default_method_body_is_const].\n                 if !ecx.tcx.has_attr(def.did, sym::default_method_body_is_const) {\n-                    // Some functions we support even if they are non-const -- but avoid testing\n-                    // that for const fn!\n-                    if let Some(new_instance) = ecx.hook_panic_fn(instance, args)? {\n-                        // We call another const fn instead.\n-                        return Self::find_mir_or_eval_fn(\n-                            ecx,\n-                            new_instance,\n-                            _abi,\n-                            args,\n-                            _ret,\n-                            _unwind,\n-                        );\n-                    } else {\n-                        // We certainly do *not* want to actually call the fn\n-                        // though, so be sure we return here.\n-                        throw_unsup_format!(\"calling non-const function `{}`\", instance)\n-                    }\n+                    is_const_fn = false;\n                 }\n             }\n+\n+            // Some functions we support even if they are non-const -- but avoid testing\n+            // that for const fn!\n+            // `const_eval_select` is a const fn because it must use const trait bounds.\n+            if let Some(new_instance) = ecx.hook_special_const_fn(instance, args, is_const_fn)? {\n+                // We call another const fn instead.\n+                return Self::find_mir_or_eval_fn(ecx, new_instance, _abi, args, _ret, _unwind);\n+            }\n+\n+            if !is_const_fn {\n+                // We certainly do *not* want to actually call the fn\n+                // though, so be sure we return here.\n+                throw_unsup_format!(\"calling non-const function `{}`\", instance)\n+            }\n         }\n         // This is a const fn. Call it.\n         Ok(Some(ecx.load_mir(instance.def, None)?))"}, {"sha": "8d3544d434acf8560f81ab6b544ae1fe121e271d", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -231,7 +231,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     /// Call this function -- pushing the stack frame and initializing the arguments.\n-    fn eval_fn_call(\n+    pub(crate) fn eval_fn_call(\n         &mut self,\n         fn_val: FnVal<'tcx, M::ExtraFnVal>,\n         caller_abi: Abi,"}, {"sha": "22f14ffbd583a26661fec76158bb25b5756357f6", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -24,7 +24,7 @@ use std::ops::Deref;\n use super::ops::{self, NonConstOp, Status};\n use super::qualifs::{self, CustomEq, HasMutInterior, NeedsNonConstDrop};\n use super::resolver::FlowSensitiveAnalysis;\n-use super::{is_lang_panic_fn, ConstCx, Qualif};\n+use super::{is_lang_special_const_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n \n // We are using `MaybeMutBorrowedLocals` as a proxy for whether an item may have been mutated\n@@ -259,7 +259,9 @@ impl Checker<'mir, 'tcx> {\n             self.check_local_or_return_ty(return_ty.skip_binder(), RETURN_PLACE);\n         }\n \n-        self.visit_body(&body);\n+        if !tcx.has_attr(def_id.to_def_id(), sym::rustc_do_not_const_check) {\n+            self.visit_body(&body);\n+        }\n \n         // Ensure that the end result is `Sync` in a non-thread local `static`.\n         let should_check_for_sync = self.const_kind()\n@@ -886,7 +888,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 }\n \n                 // At this point, we are calling a function, `callee`, whose `DefId` is known...\n-                if is_lang_panic_fn(tcx, callee) {\n+                if is_lang_special_const_fn(tcx, callee) {\n                     // `begin_panic` and `panic_display` are generic functions that accept\n                     // types other than str. Check to enforce that only str can be used in\n                     // const-eval."}, {"sha": "0a852282f8f2693600855ec3802d085e607a1227", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -74,9 +74,6 @@ impl ConstCx<'mir, 'tcx> {\n \n /// Returns `true` if this `DefId` points to one of the official `panic` lang items.\n pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    // We can allow calls to these functions because `hook_panic_fn` in\n-    // `const_eval/machine.rs` ensures the calls are handled specially.\n-    // Keep in sync with what that function handles!\n     Some(def_id) == tcx.lang_items().panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_str()\n         || Some(def_id) == tcx.lang_items().panic_display()\n@@ -85,6 +82,15 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         || Some(def_id) == tcx.lang_items().begin_panic_fmt()\n }\n \n+/// Returns `true` if this `DefId` points to one of the lang items that will be handled differently\n+/// in const_eval.\n+pub fn is_lang_special_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    // We can allow calls to these functions because `hook_special_const_fn` in\n+    // `const_eval/machine.rs` ensures the calls are handled specially.\n+    // Keep in sync with what that function handles!\n+    is_lang_panic_fn(tcx, def_id) || Some(def_id) == tcx.lang_items().const_eval_select()\n+}\n+\n pub fn rustc_allow_const_fn_unstable(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,"}, {"sha": "1a8c8b1c78d0857ef323990cb26ba9bf63d6d6d5", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -1,7 +1,7 @@\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{self, BasicBlock, Location};\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::Span;\n+use rustc_span::{symbol::sym, Span};\n \n use super::check::Qualifs;\n use super::ops::{self, NonConstOp};\n@@ -30,6 +30,10 @@ pub fn check_live_drops(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>) {\n         return;\n     }\n \n+    if tcx.has_attr(def_id.to_def_id(), sym::rustc_do_not_const_check) {\n+        return;\n+    }\n+\n     let ccx = ConstCx { body, tcx, const_kind, param_env: tcx.param_env(def_id) };\n     if !checking_enabled(&ccx) {\n         return;"}, {"sha": "7cfe3d7f809e923e3bd1e59eeea6683c6840877c", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -26,7 +26,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use std::cell::Cell;\n use std::{cmp, iter, mem};\n \n-use crate::transform::check_consts::{is_lang_panic_fn, qualifs, ConstCx};\n+use crate::transform::check_consts::{is_lang_special_const_fn, qualifs, ConstCx};\n use crate::transform::MirPass;\n \n /// A `MirPass` for promotion.\n@@ -657,7 +657,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n         let is_const_fn = match *fn_ty.kind() {\n             ty::FnDef(def_id, _) => {\n-                self.tcx.is_const_fn_raw(def_id) || is_lang_panic_fn(self.tcx, def_id)\n+                self.tcx.is_const_fn_raw(def_id) || is_lang_special_const_fn(self.tcx, def_id)\n             }\n             _ => false,\n         };"}, {"sha": "85b0db468d1258cd1727a8e08ccc7e75075ccb55", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -467,6 +467,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(rustc_promotable, Normal, template!(Word), IMPL_DETAIL),\n     rustc_attr!(rustc_legacy_const_generics, Normal, template!(List: \"N\"), INTERNAL_UNSTABLE),\n+    // Do not const-check this function's body. It will always get replaced during CTFE.\n+    rustc_attr!(rustc_do_not_const_check, Normal, template!(Word), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Layout related:"}, {"sha": "f35353dbfb581493539b931a1240cf268fae2af4", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -299,6 +299,8 @@ language_item_table! {\n     DropInPlace,             sym::drop_in_place,       drop_in_place_fn,           Target::Fn,             GenericRequirement::Minimum(1);\n     Oom,                     sym::oom,                 oom,                        Target::Fn,             GenericRequirement::None;\n     AllocLayout,             sym::alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n+    ConstEvalSelect,         sym::const_eval_select,   const_eval_select,          Target::Fn,             GenericRequirement::Exact(4);\n+    ConstConstEvalSelect,    sym::const_eval_select_ct,const_eval_select_ct,       Target::Fn,             GenericRequirement::Exact(4);\n \n     Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);\n "}, {"sha": "63bd58a3bec3884b29bb7a9f25887817e2ad8d76", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -441,6 +441,8 @@ symbols! {\n         const_compare_raw_pointers,\n         const_constructor,\n         const_eval_limit,\n+        const_eval_select,\n+        const_eval_select_ct,\n         const_evaluatable_checked,\n         const_extern_fn,\n         const_fn,\n@@ -1095,6 +1097,7 @@ symbols! {\n         rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n         rustc_dirty,\n+        rustc_do_not_const_check,\n         rustc_dummy,\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,"}, {"sha": "b78c227c364c11f7b7f2da8f4221722c1eafaae7", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -973,12 +973,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::Tuple(_) => stack.extend(ty.tuple_fields().map(|t| (t, depth + 1))),\n \n                 ty::Closure(_, substs) => {\n-                    stack.extend(substs.as_closure().upvar_tys().map(|t| (t, depth + 1)))\n+                    let substs = substs.as_closure();\n+                    let ty = self.infcx.shallow_resolve(substs.tupled_upvars_ty());\n+                    stack.push((ty, depth + 1));\n                 }\n \n                 ty::Generator(_, substs, _) => {\n                     let substs = substs.as_generator();\n-                    stack.extend(substs.upvar_tys().map(|t| (t, depth + 1)));\n+                    let ty = self.infcx.shallow_resolve(substs.tupled_upvars_ty());\n+\n+                    stack.push((ty, depth + 1));\n                     stack.push((substs.witness(), depth + 1));\n                 }\n "}, {"sha": "06c42098791ef1ad47872572c12014fc690e4bef", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -17,7 +17,7 @@ use rustc_infer::{\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n-use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -317,6 +317,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let (fn_sig, def_id) = match *callee_ty.kind() {\n             ty::FnDef(def_id, subst) => {\n+                let fn_sig = self.tcx.fn_sig(def_id).subst(self.tcx, subst);\n+\n                 // Unit testing: function items annotated with\n                 // `#[rustc_evaluate_where_clauses]` trigger special output\n                 // to let us test the trait evaluation system.\n@@ -342,7 +344,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .emit();\n                     }\n                 }\n-                (callee_ty.fn_sig(self.tcx), Some(def_id))\n+                (fn_sig, Some(def_id))\n             }\n             ty::FnPtr(sig) => (sig, None),\n             ref t => {"}, {"sha": "b0cb8443bfbc1f7dee9477fce5040aa79c563e9e", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -390,6 +390,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n \n             sym::black_box => (1, vec![param(0)], param(0)),\n \n+            sym::const_eval_select => (4, vec![param(0), param(1), param(2)], param(3)),\n+\n             other => {\n                 tcx.sess.emit_err(UnrecognizedIntrinsicFunction { span: it.span, name: other });\n                 return;"}, {"sha": "da0591418f072732c4e7d6246ab7667c93cf1dfd", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -2221,3 +2221,72 @@ pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.\n     unsafe { write_bytes(dst, val, count) }\n }\n+\n+/// Selects which function to call depending on the context.\n+///\n+/// If this function is evaluated at compile-time, then a call to this\n+/// intrinsic will be replaced with a call to `called_in_const`. It gets\n+/// replaced with a call to `called_at_rt` otherwise.\n+///\n+/// # Type Requirements\n+///\n+/// The two functions must be both function items. They cannot be function\n+/// pointers or closures.\n+///\n+/// `arg` will be the arguments that will be passed to either one of the\n+/// two functions, therefore, both functions must accept the same type of\n+/// arguments. Both functions must return RET.\n+///\n+/// # Safety\n+///\n+/// This intrinsic allows breaking [referential transparency] in `const fn`\n+/// and is therefore `unsafe`.\n+///\n+/// Code that uses this intrinsic must be extremely careful to ensure that\n+/// `const fn`s remain referentially-transparent independently of when they\n+/// are evaluated.\n+///\n+/// The Rust compiler assumes that it is sound to replace a call to a `const\n+/// fn` with the result produced by evaluating it at compile-time. If\n+/// evaluating the function at run-time were to produce a different result,\n+/// or have any other observable side-effects, the behavior is undefined.\n+///\n+/// [referential transparency]: https://en.wikipedia.org/wiki/Referential_transparency\n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"const_eval_select\",\n+    issue = \"none\",\n+    reason = \"const_eval_select will never be stable\"\n+)]\n+#[lang = \"const_eval_select\"]\n+#[rustc_do_not_const_check]\n+pub const unsafe fn const_eval_select<ARG, F, G, RET>(\n+    arg: ARG,\n+    _called_in_const: F,\n+    called_at_rt: G,\n+) -> RET\n+where\n+    F: ~const FnOnce(ARG) -> RET,\n+    G: FnOnce(ARG) -> RET + ~const Drop,\n+{\n+    called_at_rt(arg)\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"const_eval_select\",\n+    issue = \"none\",\n+    reason = \"const_eval_select will never be stable\"\n+)]\n+#[lang = \"const_eval_select_ct\"]\n+pub const unsafe fn const_eval_select_ct<ARG, F, G, RET>(\n+    arg: ARG,\n+    called_in_const: F,\n+    _called_at_rt: G,\n+) -> RET\n+where\n+    F: ~const FnOnce(ARG) -> RET,\n+    G: FnOnce(ARG) -> RET + ~const Drop,\n+{\n+    called_in_const(arg)\n+}"}, {"sha": "84777cac7c3902de0c353bad99eec66a72045b27", "filename": "src/test/codegen/intrinsics/const_eval_select.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(const_eval_select)]\n+\n+use std::intrinsics::const_eval_select;\n+\n+const fn foo(_: (i32,)) -> i32 { 1 }\n+\n+#[no_mangle]\n+pub fn hi((n,): (i32,)) -> i32 { n }\n+\n+#[no_mangle]\n+pub unsafe fn hey() {\n+    // CHECK: call i32 @hi(i32\n+    const_eval_select((42,), foo, hi);\n+}"}, {"sha": "1e5bf7a70b8c4bc3598ec4136c6f091defd9ecd8", "filename": "src/test/ui/intrinsics/const-eval-select-bad.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -0,0 +1,36 @@\n+#![feature(const_eval_select)]\n+\n+use std::intrinsics::const_eval_select;\n+\n+const fn not_fn_items() {\n+    const_eval_select((), |()| {}, |()| {});\n+    //~^ ERROR expected a `FnOnce<((),)>` closure\n+    const_eval_select((), 42, 0xDEADBEEF);\n+    //~^ ERROR expected a `FnOnce<((),)>` closure\n+}\n+\n+const fn foo((n,): (i32,)) -> i32 {\n+    n\n+}\n+\n+fn bar((n,): (i32,)) -> bool {\n+    assert_eq!(n, 0, \"{} must be equal to {}\", n, 0);\n+    n == 0\n+}\n+\n+fn baz((n,): (bool,)) -> i32 {\n+    assert!(n, \"{} must be true\", n);\n+    n as i32\n+}\n+\n+const fn return_ty_mismatch() {\n+    const_eval_select((1,), foo, bar);\n+    //~^ ERROR type mismatch\n+}\n+\n+const fn args_ty_mismatch() {\n+    const_eval_select((true,), foo, baz);\n+    //~^ ERROR type mismatch\n+}\n+\n+fn main() {}"}, {"sha": "a38eb627e341de280974e98b2fb998deec6281dc", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -0,0 +1,63 @@\n+error[E0277]: expected a `FnOnce<((),)>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:34]`\n+  --> $DIR/const-eval-select-bad.rs:6:36\n+   |\n+LL |     const_eval_select((), |()| {}, |()| {});\n+   |     -----------------              ^^^^^^^ expected an `FnOnce<((),)>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:34]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `FnOnce<((),)>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:34]`\n+note: required by a bound in `const_eval_select`\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     F: ~const FnOnce(ARG) -> RET,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n+\n+error[E0277]: expected a `FnOnce<((),)>` closure, found `{integer}`\n+  --> $DIR/const-eval-select-bad.rs:8:31\n+   |\n+LL |     const_eval_select((), 42, 0xDEADBEEF);\n+   |     -----------------         ^^^^^^^^^^ expected an `FnOnce<((),)>` closure, found `{integer}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `FnOnce<((),)>` is not implemented for `{integer}`\n+note: required by a bound in `const_eval_select`\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     F: ~const FnOnce(ARG) -> RET,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n+\n+error[E0271]: type mismatch resolving `<fn((i32,)) -> bool {bar} as FnOnce<((i32,),)>>::Output == i32`\n+  --> $DIR/const-eval-select-bad.rs:27:5\n+   |\n+LL |     const_eval_select((1,), foo, bar);\n+   |     ^^^^^^^^^^^^^^^^^ expected `i32`, found `bool`\n+   |\n+note: required by a bound in `const_eval_select`\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     G: FnOnce(ARG) -> RET + ~const Drop,\n+   |                       ^^^ required by this bound in `const_eval_select`\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/const-eval-select-bad.rs:32:37\n+   |\n+LL | const fn foo((n,): (i32,)) -> i32 {\n+   | --------------------------------- found signature of `fn((i32,)) -> _`\n+...\n+LL |     const_eval_select((true,), foo, baz);\n+   |     -----------------               ^^^ expected signature of `fn((bool,)) -> _`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `const_eval_select`\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     F: ~const FnOnce(ARG) -> RET,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0271, E0277, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "807db65bc72d9885fc62b5df7b0bc901066ee14e", "filename": "src/test/ui/intrinsics/const-eval-select-x86_64.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -0,0 +1,39 @@\n+// run-pass\n+// only-x86_64\n+\n+#![feature(const_eval_select)]\n+use std::intrinsics::const_eval_select;\n+use std::arch::x86_64::*;\n+use std::mem::transmute;\n+\n+const fn eq_ct((x, y): ([i32; 4], [i32; 4])) -> bool {\n+    x[0] == y[0] && x[1] == y[1] && x[2] == y[2] && x[3] == y[3]\n+}\n+\n+fn eq_rt((x, y): ([i32; 4], [i32; 4])) -> bool {\n+    unsafe {\n+        let x = _mm_loadu_si128(&x as *const _ as *const _);\n+        let y = _mm_loadu_si128(&y as *const _ as *const _);\n+        let r = _mm_cmpeq_epi32(x, y);\n+        let r = _mm_movemask_ps(transmute(r) );\n+        r == 0b1111\n+    }\n+}\n+\n+const fn eq(x: [i32; 4], y: [i32; 4]) -> bool {\n+    unsafe {\n+        const_eval_select((x, y), eq_ct, eq_rt)\n+    }\n+}\n+\n+fn main() {\n+    const X: bool = eq([0, 1, 2, 3], [0, 1, 2, 3]);\n+    assert_eq!(X, true);\n+    let x = eq([0, 1, 2, 3], [0, 1, 2, 3]);\n+    assert_eq!(x, true);\n+\n+    const Y: bool = eq([0, 1, 2, 3], [0, 1, 3, 2]);\n+    assert_eq!(Y, false);\n+    let y = eq([0, 1, 2, 3], [0, 1, 3, 2]);\n+    assert_eq!(y, false);\n+}"}, {"sha": "0b2c2f6ed4f067e4005c21e4536368e66075fce0", "filename": "src/test/ui/intrinsics/const-eval-select.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5387b6542f1d72d332c84e8325309f0c9de7b6a0/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs?ref=5387b6542f1d72d332c84e8325309f0c9de7b6a0", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+\n+#![feature(const_eval_select)]\n+\n+use std::intrinsics::const_eval_select;\n+\n+const fn yes(_: ()) -> bool {\n+    true\n+}\n+\n+fn no(_: ()) -> bool {\n+    false\n+}\n+\n+// not a sound use case; testing only\n+const fn is_const_eval() -> bool {\n+    unsafe { const_eval_select((), yes, no) }\n+}\n+\n+fn main() {\n+    const YES: bool = is_const_eval();\n+    let no = is_const_eval();\n+\n+    assert_eq!(true, YES);\n+    assert_eq!(false, no);\n+}"}]}