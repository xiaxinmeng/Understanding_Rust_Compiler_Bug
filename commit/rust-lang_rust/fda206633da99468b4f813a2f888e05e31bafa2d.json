{"sha": "fda206633da99468b4f813a2f888e05e31bafa2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYTIwNjYzM2RhOTk0NjhiNGY4MTNhMmY4ODhlMDVlMzFiYWZhMmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-29T11:32:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-29T11:32:26Z"}, "message": "Rollup merge of #59467 - hgallagher1993:local_branch, r=estebank\n\nBetter diagnostic for binary operation on BoxedValues\n\nFixes #59458", "tree": {"sha": "f61f165ab84dc996ed1b412aa5fdfdb64e1ae279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61f165ab84dc996ed1b412aa5fdfdb64e1ae279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fda206633da99468b4f813a2f888e05e31bafa2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcngJKCRBK7hj4Ov3rIwAAdHIIALF5gp+qBMki/MclI7kRdQ8n\n59LS8AP4ora0fxNuPhBCgtNEkSRxjr0GkKudVLwwgh5WRbcsJCe7XrFOqlcyhHav\nNVKr+C6PSRsPRVawJ6A8212DZKHof5Re8EJKJ+Hty1tPfyCGD+ZZHnMTVG0pq7FS\n0axOQcLAladK4t6yCPV+TxtLmcWbWOnku+ape6uhCd5Ly/F9JGa6Or4GIymQnid3\nFASEslJuhIfGD6aqq6F86otZPOWR65cUlm663fKhOMg9V++Z18wTYfEuV0DUkAqa\nj5lKafO5AsLWOeNh3uJKP27m9PMFpxCNYK6NfOpiQ8xgJ/me/yCRrzOrEP1d45Q=\n=VjSU\n-----END PGP SIGNATURE-----\n", "payload": "tree f61f165ab84dc996ed1b412aa5fdfdb64e1ae279\nparent 647d09fced568c7275211e3d7e1a084d94757a2a\nparent 4644c3a6aa0ff0ad394175a029f5531728ecff31\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553859146 +0100\ncommitter GitHub <noreply@github.com> 1553859146 +0100\n\nRollup merge of #59467 - hgallagher1993:local_branch, r=estebank\n\nBetter diagnostic for binary operation on BoxedValues\n\nFixes #59458\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fda206633da99468b4f813a2f888e05e31bafa2d", "html_url": "https://github.com/rust-lang/rust/commit/fda206633da99468b4f813a2f888e05e31bafa2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fda206633da99468b4f813a2f888e05e31bafa2d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "647d09fced568c7275211e3d7e1a084d94757a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/647d09fced568c7275211e3d7e1a084d94757a2a", "html_url": "https://github.com/rust-lang/rust/commit/647d09fced568c7275211e3d7e1a084d94757a2a"}, {"sha": "4644c3a6aa0ff0ad394175a029f5531728ecff31", "url": "https://api.github.com/repos/rust-lang/rust/commits/4644c3a6aa0ff0ad394175a029f5531728ecff31", "html_url": "https://github.com/rust-lang/rust/commit/4644c3a6aa0ff0ad394175a029f5531728ecff31"}], "stats": {"total": 272, "additions": 184, "deletions": 88}, "files": [{"sha": "d6932094dddb6000b4761dc8f5258030f3d1ec0a", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, true) {\n+                                                            rhs_ty, &mut err, true, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -327,10 +327,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             err.emit();\n                         }\n                         IsAssign::No => {\n-                            let mut err = struct_span_err!(self.tcx.sess, expr.span, E0369,\n+                            let mut err = struct_span_err!(self.tcx.sess, op.span, E0369,\n                                 \"binary operation `{}` cannot be applied to type `{}`\",\n                                 op.node.as_str(),\n                                 lhs_ty);\n+\n+                            if !lhs_expr.span.eq(&rhs_expr.span) {\n+                                err.span_label(lhs_expr.span, lhs_ty.to_string());\n+                                err.span_label(rhs_expr.span, rhs_ty.to_string());\n+                            }\n+\n                             let mut suggested_deref = false;\n                             if let Ref(_, mut rty, _) = lhs_ty.sty {\n                                 if {\n@@ -380,7 +386,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, false) {\n+                                                            rhs_ty, &mut err, false, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -418,6 +424,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         rhs_ty: Ty<'tcx>,\n         err: &mut errors::DiagnosticBuilder<'_>,\n         is_assign: bool,\n+        op: hir::BinOp,\n     ) -> bool {\n         let source_map = self.tcx.sess.source_map();\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n@@ -431,7 +438,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             (&Ref(_, l_ty, _), &Ref(_, r_ty, _))\n             if l_ty.sty == Str && r_ty.sty == Str => {\n                 if !is_assign {\n-                    err.span_label(expr.span,\n+                    err.span_label(op.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n                     match source_map.span_to_snippet(lhs_expr.span) {\n                         Ok(lstring) => err.span_suggestion("}, {"sha": "c9f3e8b2e26c552efce32b943718f1c3b795b541", "filename": "src/test/ui/autoderef-full-lval.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,16 +1,20 @@\n error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n-  --> $DIR/autoderef-full-lval.rs:15:20\n+  --> $DIR/autoderef-full-lval.rs:15:24\n    |\n LL |     let z: isize = a.x + b.y;\n-   |                    ^^^^^^^^^\n+   |                    --- ^ --- std::boxed::Box<isize>\n+   |                    |\n+   |                    std::boxed::Box<isize>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n \n error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n-  --> $DIR/autoderef-full-lval.rs:21:25\n+  --> $DIR/autoderef-full-lval.rs:21:33\n    |\n LL |     let answer: isize = forty.a + two.a;\n-   |                         ^^^^^^^^^^^^^^^\n+   |                         ------- ^ ----- std::boxed::Box<isize>\n+   |                         |\n+   |                         std::boxed::Box<isize>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n "}, {"sha": "d036f06a8c7d0321bc1d0ffa496408d679976265", "filename": "src/test/ui/binary-op-on-double-ref.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `%` cannot be applied to type `&&{integer}`\n-  --> $DIR/binary-op-on-double-ref.rs:4:9\n+  --> $DIR/binary-op-on-double-ref.rs:4:11\n    |\n LL |         x % 2 == 0\n-   |         ^^^^^\n+   |         - ^ - {integer}\n+   |         |\n+   |         &&{integer}\n    |\n    = help: `%` can be used on '{integer}', you can dereference `x`: `*x`\n "}, {"sha": "9e8992235edd1d3e760bed8da3ccf2182ac71b5e", "filename": "src/test/ui/binop/binop-bitxor-str.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `^` cannot be applied to type `std::string::String`\n-  --> $DIR/binop-bitxor-str.rs:3:21\n+  --> $DIR/binop-bitxor-str.rs:3:37\n    |\n LL | fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     --------------- ^ --------------- std::string::String\n+   |                     |\n+   |                     std::string::String\n    |\n    = note: an implementation of `std::ops::BitXor` might be missing for `std::string::String`\n "}, {"sha": "92e14bccccd5818b5d23fe75d730537e34e49680", "filename": "src/test/ui/binop/binop-mul-bool.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `bool`\n-  --> $DIR/binop-mul-bool.rs:3:21\n+  --> $DIR/binop-mul-bool.rs:3:26\n    |\n LL | fn main() { let x = true * false; }\n-   |                     ^^^^^^^^^^^^\n+   |                     ---- ^ ----- bool\n+   |                     |\n+   |                     bool\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `bool`\n "}, {"sha": "d33cff313e7f9f34e890e48b1526fbb88eff5155", "filename": "src/test/ui/binop/binop-typeck.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `bool`\n-  --> $DIR/binop-typeck.rs:6:13\n+  --> $DIR/binop-typeck.rs:6:15\n    |\n LL |     let z = x + y;\n-   |             ^^^^^\n+   |             - ^ - {integer}\n+   |             |\n+   |             bool\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `bool`\n "}, {"sha": "07b93d9aae7ed6302a16e1a000fc369a03ca8881", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `==` cannot be applied to type `fn() {main::f}`\n-  --> $DIR/fn-compare-mismatch.rs:4:13\n+  --> $DIR/fn-compare-mismatch.rs:4:15\n    |\n LL |     let x = f == g;\n-   |             ^^^^^^\n+   |             - ^^ - fn() {main::g}\n+   |             |\n+   |             fn() {main::f}\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn() {main::f}`\n "}, {"sha": "588e7a0ed339e8d234dc8b1c3cdd640bc2468d0e", "filename": "src/test/ui/for/for-loop-type-error.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `()`\n-  --> $DIR/for-loop-type-error.rs:2:13\n+  --> $DIR/for-loop-type-error.rs:2:16\n    |\n LL |     let x = () + ();\n-   |             ^^^^^^^\n+   |             -- ^ -- ()\n+   |             |\n+   |             ()\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `()`\n "}, {"sha": "e8de44320da9c85b7399ff2341eb38e90e2a2391", "filename": "src/test/ui/issues/issue-14915.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n-  --> $DIR/issue-14915.rs:6:20\n+  --> $DIR/issue-14915.rs:6:22\n    |\n LL |     println!(\"{}\", x + 1);\n-   |                    ^^^^^\n+   |                    - ^ - {integer}\n+   |                    |\n+   |                    std::boxed::Box<isize>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n "}, {"sha": "6f269ba764c5dc9defab6c359d3a770042037e9b", "filename": "src/test/ui/issues/issue-24363.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -5,10 +5,12 @@ LL |     1.create_a_type_error[\n    |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: binary operation `+` cannot be applied to type `()`\n-  --> $DIR/issue-24363.rs:3:9\n+  --> $DIR/issue-24363.rs:3:11\n    |\n LL |         ()+()\n-   |         ^^^^^\n+   |         --^-- ()\n+   |         |\n+   |         ()\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `()`\n "}, {"sha": "ac2a9f2203d5af89ca2558b56cfeee8a011b2db9", "filename": "src/test/ui/issues/issue-28837.stderr", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,120 +1,150 @@\n error[E0369]: binary operation `+` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:6:5\n+  --> $DIR/issue-28837.rs:6:7\n    |\n LL |     a + a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `A`\n \n error[E0369]: binary operation `-` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:8:5\n+  --> $DIR/issue-28837.rs:8:7\n    |\n LL |     a - a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Sub` might be missing for `A`\n \n error[E0369]: binary operation `*` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:10:5\n+  --> $DIR/issue-28837.rs:10:7\n    |\n LL |     a * a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `A`\n \n error[E0369]: binary operation `/` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:12:5\n+  --> $DIR/issue-28837.rs:12:7\n    |\n LL |     a / a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Div` might be missing for `A`\n \n error[E0369]: binary operation `%` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:14:5\n+  --> $DIR/issue-28837.rs:14:7\n    |\n LL |     a % a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Rem` might be missing for `A`\n \n error[E0369]: binary operation `&` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:16:5\n+  --> $DIR/issue-28837.rs:16:7\n    |\n LL |     a & a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::BitAnd` might be missing for `A`\n \n error[E0369]: binary operation `|` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:18:5\n+  --> $DIR/issue-28837.rs:18:7\n    |\n LL |     a | a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::BitOr` might be missing for `A`\n \n error[E0369]: binary operation `<<` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:20:5\n+  --> $DIR/issue-28837.rs:20:7\n    |\n LL |     a << a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Shl` might be missing for `A`\n \n error[E0369]: binary operation `>>` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:22:5\n+  --> $DIR/issue-28837.rs:22:7\n    |\n LL |     a >> a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Shr` might be missing for `A`\n \n error[E0369]: binary operation `==` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:24:5\n+  --> $DIR/issue-28837.rs:24:7\n    |\n LL |     a == a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n error[E0369]: binary operation `!=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:26:5\n+  --> $DIR/issue-28837.rs:26:7\n    |\n LL |     a != a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n error[E0369]: binary operation `<` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:28:5\n+  --> $DIR/issue-28837.rs:28:7\n    |\n LL |     a < a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `<=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:30:5\n+  --> $DIR/issue-28837.rs:30:7\n    |\n LL |     a <= a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `>` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:32:5\n+  --> $DIR/issue-28837.rs:32:7\n    |\n LL |     a > a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `>=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:34:5\n+  --> $DIR/issue-28837.rs:34:7\n    |\n LL |     a >= a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n "}, {"sha": "60a3be1c36b753585628a8260d625d8b6c88dc1b", "filename": "src/test/ui/issues/issue-31076.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,16 +1,20 @@\n error[E0369]: binary operation `+` cannot be applied to type `{integer}`\n-  --> $DIR/issue-31076.rs:13:13\n+  --> $DIR/issue-31076.rs:13:15\n    |\n LL |     let x = 5 + 6;\n-   |             ^^^^^\n+   |             - ^ - {integer}\n+   |             |\n+   |             {integer}\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `{integer}`\n \n error[E0369]: binary operation `+` cannot be applied to type `i32`\n-  --> $DIR/issue-31076.rs:15:13\n+  --> $DIR/issue-31076.rs:15:18\n    |\n LL |     let y = 5i32 + 6i32;\n-   |             ^^^^^^^^^^^\n+   |             ---- ^ ---- i32\n+   |             |\n+   |             i32\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `i32`\n "}, {"sha": "59ca874bd20189cbb71dc27a5e3725615a2239e1", "filename": "src/test/ui/issues/issue-35668.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `&T`\n-  --> $DIR/issue-35668.rs:2:22\n+  --> $DIR/issue-35668.rs:2:23\n    |\n LL |     a.iter().map(|a| a*a)\n-   |                      ^^^\n+   |                      -^- &T\n+   |                      |\n+   |                      &T\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `&T`\n "}, {"sha": "35eceb3b3c63759ac8658d5dcaf7e26d11783e6b", "filename": "src/test/ui/issues/issue-3820.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `Thing`\n-  --> $DIR/issue-3820.rs:14:13\n+  --> $DIR/issue-3820.rs:14:15\n    |\n LL |     let w = u * 3;\n-   |             ^^^^^\n+   |             - ^ - {integer}\n+   |             |\n+   |             Thing\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `Thing`\n "}, {"sha": "9d5775919296d982ec4befa46c7c51b615f3baa9", "filename": "src/test/ui/issues/issue-40610.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `()`\n-  --> $DIR/issue-40610.rs:4:5\n+  --> $DIR/issue-40610.rs:4:8\n    |\n LL |     () + f(&[1.0]);\n-   |     ^^^^^^^^^^^^^^\n+   |     -- ^ --------- ()\n+   |     |\n+   |     ()\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `()`\n "}, {"sha": "5de5889d8172d1c064d378658675b49ee529e9f8", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-41394.rs:2:9\n+  --> $DIR/issue-41394.rs:2:12\n    |\n LL |     A = \"\" + 1\n-   |         ^^^^^^\n+   |         -- ^ - {integer}\n+   |         |\n+   |         &str\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `&str`\n "}, {"sha": "88466131e3144db988a478ad59b6dafd21d7b8b9", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,11 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-47377.rs:4:12\n+  --> $DIR/issue-47377.rs:4:14\n    |\n LL |      let _a = b + \", World!\";\n-   |               ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+   |               - ^ ---------- &str\n+   |               | |\n+   |               | `+` can't be used to concatenate two `&str` strings\n+   |               &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |      let _a = b.to_owned() + \", World!\";"}, {"sha": "d69101eab4c46e2f5bd4e9e0aeb4b67eb55aa6c9", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,11 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-47380.rs:3:33\n+  --> $DIR/issue-47380.rs:3:35\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n-   |                                      ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+   |                                      - ^ ---------- &str\n+   |                                      | |\n+   |                                      | `+` can't be used to concatenate two `&str` strings\n+   |                                      &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";"}, {"sha": "8899b0d43cd8bb31e3d646622556e783fb15461a", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -38,10 +38,12 @@ LL |     false == 0 < 2;\n               found type `{integer}`\n \n error[E0369]: binary operation `<` cannot be applied to type `fn() {f::<_>}`\n-  --> $DIR/require-parens-for-chained-comparison.rs:13:5\n+  --> $DIR/require-parens-for-chained-comparison.rs:13:6\n    |\n LL |     f<X>();\n-   |     ^^^\n+   |     -^- X\n+   |     |\n+   |     fn() {f::<_>}\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() {f::<_>}`\n "}, {"sha": "7c6ae499cbb07206c317d0a68ed201af752346b5", "filename": "src/test/ui/pattern/pattern-tyvar-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `std::vec::Vec<isize>`\n-  --> $DIR/pattern-tyvar-2.rs:3:69\n+  --> $DIR/pattern-tyvar-2.rs:3:71\n    |\n LL | fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n-   |                                                                     ^^^^^\n+   |                                                                     - ^ - {integer}\n+   |                                                                     |\n+   |                                                                     std::vec::Vec<isize>\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `std::vec::Vec<isize>`\n "}, {"sha": "a5b91f090d2c01a62d08fccad35f1a5c89a08935", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,26 +1,35 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-39018.rs:2:13\n+  --> $DIR/issue-39018.rs:2:22\n    |\n LL |     let x = \"Hello \" + \"World!\";\n-   |             ^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+   |             -------- ^ -------- &str\n+   |             |        |\n+   |             |        `+` can't be used to concatenate two `&str` strings\n+   |             &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + \"World!\";\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: binary operation `+` cannot be applied to type `World`\n-  --> $DIR/issue-39018.rs:8:13\n+  --> $DIR/issue-39018.rs:8:26\n    |\n LL |     let y = World::Hello + World::Goodbye;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ------------ ^ -------------- World\n+   |             |\n+   |             World\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `World`\n \n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-39018.rs:11:13\n+  --> $DIR/issue-39018.rs:11:22\n    |\n LL |     let x = \"Hello \" + \"World!\".to_owned();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate a `&str` with a `String`\n+   |             ---------^--------------------\n+   |             |          |\n+   |             |          std::string::String\n+   |             &str\n+   |             `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();"}, {"sha": "61ebcfdefc31601c5776e8a30372ed8d645d891a", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n-  --> $DIR/str-concat-on-double-ref.rs:4:13\n+  --> $DIR/str-concat-on-double-ref.rs:4:15\n    |\n LL |     let c = a + b;\n-   |             ^^^^^\n+   |             - ^ - &str\n+   |             |\n+   |             &std::string::String\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `&std::string::String`\n "}, {"sha": "d11562e2a001b3694b82733a0eea012a3e037d80", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `&T`\n-  --> $DIR/trait-resolution-in-overloaded-op.rs:8:5\n+  --> $DIR/trait-resolution-in-overloaded-op.rs:8:7\n    |\n LL |     a * b\n-   |     ^^^^^\n+   |     - ^ - f64\n+   |     |\n+   |     &T\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `&T`\n "}, {"sha": "b0e3c35c7056758bf6302eac05b0c78b49b80caa", "filename": "src/test/ui/type/type-check/missing_trait_impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `T`\n-  --> $DIR/missing_trait_impl.rs:5:13\n+  --> $DIR/missing_trait_impl.rs:5:15\n    |\n LL |     let z = x + y;\n-   |             ^^^^^\n+   |             - ^ - T\n+   |             |\n+   |             T\n    |\n    = note: `T` might need a bound for `std::ops::Add`\n "}, {"sha": "78b70f09e900544b549be56605fb7ae3b8df5714", "filename": "src/test/ui/vec/vec-res-add.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda206633da99468b4f813a2f888e05e31bafa2d/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr?ref=fda206633da99468b4f813a2f888e05e31bafa2d", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `std::vec::Vec<R>`\n-  --> $DIR/vec-res-add.rs:16:13\n+  --> $DIR/vec-res-add.rs:16:15\n    |\n LL |     let k = i + j;\n-   |             ^^^^^\n+   |             - ^ - std::vec::Vec<R>\n+   |             |\n+   |             std::vec::Vec<R>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::vec::Vec<R>`\n "}]}