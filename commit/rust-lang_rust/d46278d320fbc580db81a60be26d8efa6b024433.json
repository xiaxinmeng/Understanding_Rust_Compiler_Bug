{"sha": "d46278d320fbc580db81a60be26d8efa6b024433", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NjI3OGQzMjBmYmM1ODBkYjgxYTYwYmUyNmQ4ZWZhNmIwMjQ0MzM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-08T14:26:27Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-08T14:27:11Z"}, "message": "Remove node function in NavTarget", "tree": {"sha": "45a3f138cb79d19c729c23c83e9bf17940918afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a3f138cb79d19c729c23c83e9bf17940918afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d46278d320fbc580db81a60be26d8efa6b024433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d46278d320fbc580db81a60be26d8efa6b024433", "html_url": "https://github.com/rust-lang/rust/commit/d46278d320fbc580db81a60be26d8efa6b024433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d46278d320fbc580db81a60be26d8efa6b024433/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb55111c209a9d3a6249cab35308a506b7f22d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb55111c209a9d3a6249cab35308a506b7f22d53", "html_url": "https://github.com/rust-lang/rust/commit/bb55111c209a9d3a6249cab35308a506b7f22d53"}], "stats": {"total": 166, "additions": 86, "deletions": 80}, "files": [{"sha": "0eef114643bbcb52192364251075754446eaf04e", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=d46278d320fbc580db81a60be26d8efa6b024433", "patch": "@@ -5,7 +5,6 @@ mod function_signature;\n mod navigation_target;\n mod structure;\n \n-use crate::db::RootDatabase;\n use ra_syntax::{ast::{self, AstNode, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n \n pub use navigation_target::NavigationTarget;\n@@ -73,8 +72,8 @@ where\n \n // FIXME: this should not really use navigation target. Rather, approximately\n // resolved symbol should return a `DefId`.\n-pub(crate) fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Option<String> {\n-    match (nav.description(db), nav.docs(db)) {\n+pub(crate) fn doc_text_for(nav: NavigationTarget) -> Option<String> {\n+    match (nav.description, nav.docs) {\n         (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n         (None, Some(docs)) => Some(docs),\n         _ => None,"}, {"sha": "f8a7bd3addd6c90ca0823d5e998cbd8d106fbbe3", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 78, "deletions": 71, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=d46278d320fbc580db81a60be26d8efa6b024433", "patch": "@@ -1,6 +1,6 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    SyntaxNode, AstNode, SmolStr, TextRange, TreeArc, AstPtr,\n+    SyntaxNode, AstNode, SmolStr, TextRange, AstPtr,\n     SyntaxKind::{self, NAME},\n     ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner},\n     algo::visit::{visitor, Visitor},\n@@ -22,6 +22,9 @@ pub struct NavigationTarget {\n     full_range: TextRange,\n     focus_range: Option<TextRange>,\n     container_name: Option<SmolStr>,\n+\n+    pub(crate) description: Option<String>,\n+    pub(crate) docs: Option<String>,\n }\n \n impl NavigationTarget {\n@@ -63,14 +66,19 @@ impl NavigationTarget {\n         NavigationTarget::from_named(file_id, pat)\n     }\n \n-    pub(crate) fn from_symbol(symbol: FileSymbol) -> NavigationTarget {\n+    pub(crate) fn from_symbol(db: &RootDatabase, symbol: FileSymbol) -> NavigationTarget {\n+        let file = db.parse(symbol.file_id).tree;\n+        let node = symbol.ptr.to_node(file.syntax()).to_owned();\n+\n         NavigationTarget {\n             file_id: symbol.file_id,\n             name: symbol.name.clone(),\n             kind: symbol.ptr.kind(),\n             full_range: symbol.ptr.range(),\n             focus_range: symbol.name_range,\n             container_name: symbol.container_name.clone(),\n+            description: description_inner(&node),\n+            docs: docs_inner(&node),\n         }\n     }\n \n@@ -84,28 +92,38 @@ impl NavigationTarget {\n             ast::PatKind::BindPat(pat) => return NavigationTarget::from_bind_pat(file_id, &pat),\n             _ => (\"_\".into(), pat.syntax_node_ptr().range()),\n         };\n+        let node = pat.to_node(file.syntax()).syntax().to_owned();\n+\n         NavigationTarget {\n             file_id,\n             name,\n             full_range,\n             focus_range: None,\n             kind: NAME,\n             container_name: None,\n+            description: description_inner(&node),\n+            docs: docs_inner(&node),\n         }\n     }\n \n     pub(crate) fn from_self_param(\n+        db: &RootDatabase,\n         file_id: FileId,\n         par: AstPtr<ast::SelfParam>,\n     ) -> NavigationTarget {\n         let (name, full_range) = (\"self\".into(), par.syntax_node_ptr().range());\n+        let file = db.parse(file_id).tree;\n+        let node = par.to_node(file.syntax()).syntax().to_owned();\n+\n         NavigationTarget {\n             file_id,\n             name,\n             full_range,\n             focus_range: None,\n             kind: NAME,\n             container_name: None,\n+            description: description_inner(&node),\n+            docs: docs_inner(&node),\n         }\n     }\n \n@@ -290,83 +308,72 @@ impl NavigationTarget {\n             focus_range,\n             // ptr: Some(LocalSyntaxPtr::new(node)),\n             container_name: None,\n+            description: description_inner(node),\n+            docs: docs_inner(node),\n         }\n     }\n+}\n \n-    pub(crate) fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n-        let source_file = db.parse(self.file_id()).tree;\n-        let source_file = source_file.syntax();\n-        let node = source_file\n-            .descendants()\n-            .find(|node| node.kind() == self.kind() && node.range() == self.full_range())?\n-            .to_owned();\n-        Some(node)\n-    }\n-\n-    pub(crate) fn docs(&self, db: &RootDatabase) -> Option<String> {\n-        let node = self.node(db)?;\n-        fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n-            node.doc_comment_text()\n-        }\n-\n-        visitor()\n-            .visit(doc_comments::<ast::FnDef>)\n-            .visit(doc_comments::<ast::StructDef>)\n-            .visit(doc_comments::<ast::EnumDef>)\n-            .visit(doc_comments::<ast::TraitDef>)\n-            .visit(doc_comments::<ast::Module>)\n-            .visit(doc_comments::<ast::TypeAliasDef>)\n-            .visit(doc_comments::<ast::ConstDef>)\n-            .visit(doc_comments::<ast::StaticDef>)\n-            .visit(doc_comments::<ast::NamedFieldDef>)\n-            .visit(doc_comments::<ast::EnumVariant>)\n-            .visit(doc_comments::<ast::MacroCall>)\n-            .accept(&node)?\n+fn docs_inner(node: &SyntaxNode) -> Option<String> {\n+    fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n+        node.doc_comment_text()\n     }\n \n-    /// Get a description of this node.\n-    ///\n-    /// e.g. `struct Name`, `enum Name`, `fn Name`\n-    pub(crate) fn description(&self, db: &RootDatabase) -> Option<String> {\n-        // FIXME: After type inference is done, add type information to improve the output\n-        let node = self.node(db)?;\n-\n-        fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n-        where\n-            T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n-        {\n-            let mut string = visit_node(node, prefix)?;\n-\n-            if let Some(type_ref) = node.ascribed_type() {\n-                string.push_str(\": \");\n-                type_ref.syntax().text().push_to(&mut string);\n-            }\n+    visitor()\n+        .visit(doc_comments::<ast::FnDef>)\n+        .visit(doc_comments::<ast::StructDef>)\n+        .visit(doc_comments::<ast::EnumDef>)\n+        .visit(doc_comments::<ast::TraitDef>)\n+        .visit(doc_comments::<ast::Module>)\n+        .visit(doc_comments::<ast::TypeAliasDef>)\n+        .visit(doc_comments::<ast::ConstDef>)\n+        .visit(doc_comments::<ast::StaticDef>)\n+        .visit(doc_comments::<ast::NamedFieldDef>)\n+        .visit(doc_comments::<ast::EnumVariant>)\n+        .visit(doc_comments::<ast::MacroCall>)\n+        .accept(&node)?\n+}\n \n-            Some(string)\n+/// Get a description of this node.\n+///\n+/// e.g. `struct Name`, `enum Name`, `fn Name`\n+fn description_inner(node: &SyntaxNode) -> Option<String> {\n+    // FIXME: After type inference is done, add type information to improve the output\n+    fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+    where\n+        T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+    {\n+        let mut string = visit_node(node, prefix)?;\n+\n+        if let Some(type_ref) = node.ascribed_type() {\n+            string.push_str(\": \");\n+            type_ref.syntax().text().push_to(&mut string);\n         }\n \n-        fn visit_node<T>(node: &T, label: &str) -> Option<String>\n-        where\n-            T: NameOwner + VisibilityOwner,\n-        {\n-            let mut string =\n-                node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n-            string.push_str(label);\n-            string.push_str(node.name()?.text().as_str());\n-            Some(string)\n-        }\n+        Some(string)\n+    }\n \n-        visitor()\n-            .visit(|node: &ast::FnDef| Some(crate::display::function_label(node)))\n-            .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n-            .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n-            .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n-            .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n-            .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n-            .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n-            .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n-            .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n-            .visit(|node: &ast::EnumVariant| Some(node.name()?.text().to_string()))\n-            .accept(&node)?\n+    fn visit_node<T>(node: &T, label: &str) -> Option<String>\n+    where\n+        T: NameOwner + VisibilityOwner,\n+    {\n+        let mut string =\n+            node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n+        string.push_str(label);\n+        string.push_str(node.name()?.text().as_str());\n+        Some(string)\n     }\n+\n+    visitor()\n+        .visit(|node: &ast::FnDef| Some(crate::display::function_label(node)))\n+        .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n+        .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n+        .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n+        .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n+        .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n+        .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n+        .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n+        .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n+        .visit(|node: &ast::EnumVariant| Some(node.name()?.text().to_string()))\n+        .accept(&node)?\n }"}, {"sha": "31b6679aef3fb4dd6be53b92d5a832b3eaba8fa1", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=d46278d320fbc580db81a60be26d8efa6b024433", "patch": "@@ -72,7 +72,7 @@ pub(crate) fn reference_definition(\n             }\n         }\n         Some(Pat(pat)) => return Exact(NavigationTarget::from_pat(db, file_id, pat)),\n-        Some(SelfParam(par)) => return Exact(NavigationTarget::from_self_param(file_id, par)),\n+        Some(SelfParam(par)) => return Exact(NavigationTarget::from_self_param(db, file_id, par)),\n         Some(GenericParam(_)) => {\n             // FIXME: go to the generic param def\n         }\n@@ -82,7 +82,7 @@ pub(crate) fn reference_definition(\n     // Fallback index based approach:\n     let navs = crate::symbol_index::index_resolve(db, name_ref)\n         .into_iter()\n-        .map(NavigationTarget::from_symbol)\n+        .map(|s| NavigationTarget::from_symbol(db, s))\n         .collect();\n     Approximate(navs)\n }"}, {"sha": "cb676eb12aedce706251e964e522f52caaaa1bf7", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=d46278d320fbc580db81a60be26d8efa6b024433", "patch": "@@ -86,13 +86,13 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         use crate::goto_definition::{ReferenceResult::*, reference_definition};\n         let ref_result = reference_definition(db, position.file_id, name_ref);\n         match ref_result {\n-            Exact(nav) => res.extend(doc_text_for(db, nav)),\n+            Exact(nav) => res.extend(doc_text_for(nav)),\n             Approximate(navs) => {\n                 // We are no longer exact\n                 res.exact = false;\n \n                 for nav in navs {\n-                    res.extend(doc_text_for(db, nav))\n+                    res.extend(doc_text_for(nav))\n                 }\n             }\n         }\n@@ -104,7 +104,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n         if let Some(navs) = navs {\n             for nav in navs {\n-                res.extend(doc_text_for(db, nav))\n+                res.extend(doc_text_for(nav))\n             }\n         }\n "}, {"sha": "dbebf50a6200579eb501627d85e258438af263eb", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46278d320fbc580db81a60be26d8efa6b024433/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=d46278d320fbc580db81a60be26d8efa6b024433", "patch": "@@ -393,7 +393,7 @@ impl Analysis {\n         self.with_db(|db| {\n             symbol_index::world_symbols(db, query)\n                 .into_iter()\n-                .map(NavigationTarget::from_symbol)\n+                .map(|s| NavigationTarget::from_symbol(db, s))\n                 .collect::<Vec<_>>()\n         })\n     }"}]}