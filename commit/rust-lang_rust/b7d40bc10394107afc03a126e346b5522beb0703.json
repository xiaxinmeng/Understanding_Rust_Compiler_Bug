{"sha": "b7d40bc10394107afc03a126e346b5522beb0703", "node_id": "C_kwDOAAsO6NoAKGI3ZDQwYmMxMDM5NDEwN2FmYzAzYTEyNmUzNDZiNTUyMmJlYjA3MDM", "commit": {"author": {"name": "Andrew Pollack", "email": "andrewpkq@gmail.com", "date": "2021-08-30T01:49:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-28T05:23:17Z"}, "message": "Adding new  linting", "tree": {"sha": "769d3da192487756235e01b5f505cfa74e09e5cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769d3da192487756235e01b5f505cfa74e09e5cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7d40bc10394107afc03a126e346b5522beb0703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d40bc10394107afc03a126e346b5522beb0703", "html_url": "https://github.com/rust-lang/rust/commit/b7d40bc10394107afc03a126e346b5522beb0703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7d40bc10394107afc03a126e346b5522beb0703/comments", "author": {"login": "andrewpollack", "id": 24868505, "node_id": "MDQ6VXNlcjI0ODY4NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24868505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewpollack", "html_url": "https://github.com/andrewpollack", "followers_url": "https://api.github.com/users/andrewpollack/followers", "following_url": "https://api.github.com/users/andrewpollack/following{/other_user}", "gists_url": "https://api.github.com/users/andrewpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewpollack/subscriptions", "organizations_url": "https://api.github.com/users/andrewpollack/orgs", "repos_url": "https://api.github.com/users/andrewpollack/repos", "events_url": "https://api.github.com/users/andrewpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewpollack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8799da5aabf72aee26053075d2bd73ef9f7789", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8799da5aabf72aee26053075d2bd73ef9f7789", "html_url": "https://github.com/rust-lang/rust/commit/0c8799da5aabf72aee26053075d2bd73ef9f7789"}], "stats": {"total": 403, "additions": 261, "deletions": 142}, "files": [{"sha": "9518c51117104448df0459e85f416e9a140a9e3d", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7d40bc10394107afc03a126e346b5522beb0703/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7d40bc10394107afc03a126e346b5522beb0703/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b7d40bc10394107afc03a126e346b5522beb0703", "patch": "@@ -8,6 +8,10 @@ document.\n \n [74d1561...master](https://github.com/rust-lang/rust-clippy/compare/74d1561...master)\n \n+### New Lints\n+\n+* Renamed Lint: `if_let_some_result` is now called [`match_result_ok`].\n+\n ## Rust 1.55\n \n Current beta, release 2021-09-09\n@@ -2685,7 +2689,6 @@ Released 2018-09-13\n [`identity_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n [`if_let_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_mutex\n [`if_let_redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_redundant_pattern_matching\n-[`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`if_then_panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_panic\n@@ -2775,6 +2778,7 @@ Released 2018-09-13\n [`match_on_vec_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items\n [`match_overlapping_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_overlapping_arm\n [`match_ref_pats`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_ref_pats\n+[`match_result_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_result_ok\n [`match_same_arms`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms\n [`match_single_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding\n [`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm"}, {"sha": "adcd78ed0d42745adc2e0cb2d6518a3f98c5243e", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0c8799da5aabf72aee26053075d2bd73ef9f7789/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8799da5aabf72aee26053075d2bd73ef9f7789/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=0c8799da5aabf72aee26053075d2bd73ef9f7789", "patch": "@@ -1,76 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::higher;\n-use clippy_utils::method_chain_args;\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, PatKind, QPath};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    ///* Checks for unnecessary `ok()` in if let.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `ok()` in if let is unnecessary, instead match\n-    /// on `Ok(pat)`\n-    ///\n-    /// ### Example\n-    /// ```ignore\n-    /// for i in iter {\n-    ///     if let Some(value) = i.parse().ok() {\n-    ///         vec.push(value)\n-    ///     }\n-    /// }\n-    /// ```\n-    /// Could be written:\n-    ///\n-    /// ```ignore\n-    /// for i in iter {\n-    ///     if let Ok(value) = i.parse() {\n-    ///         vec.push(value)\n-    ///     }\n-    /// }\n-    /// ```\n-    pub IF_LET_SOME_RESULT,\n-    style,\n-    \"usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\"\n-}\n-\n-declare_lint_pass!(OkIfLet => [IF_LET_SOME_RESULT]);\n-\n-impl<'tcx> LateLintPass<'tcx> for OkIfLet {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! { //begin checking variables\n-            if let Some(higher::IfLet { let_pat, let_expr, .. }) = higher::IfLet::hir(cx, expr);\n-            if let ExprKind::MethodCall(_, ok_span, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n-            if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n-            if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::result_type);\n-            if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n-\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n-                let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_span), \"\", &mut applicability);\n-                let sugg = format!(\n-                    \"if let Ok({}) = {}\",\n-                    some_expr_string,\n-                    trimmed_ok.trim().trim_end_matches('.'),\n-                );\n-                span_lint_and_sugg(\n-                    cx,\n-                    IF_LET_SOME_RESULT,\n-                    expr.span.with_hi(let_expr.span.hi()),\n-                    \"matching on `Some` with `ok()` is redundant\",\n-                    &format!(\"consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n-                    sugg,\n-                    applicability,\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "879f3ba68f4a8dda7fb8e99d6e02251d0ac19c0b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7d40bc10394107afc03a126e346b5522beb0703/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d40bc10394107afc03a126e346b5522beb0703/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b7d40bc10394107afc03a126e346b5522beb0703", "patch": "@@ -225,7 +225,6 @@ mod future_not_send;\n mod get_last_with_len;\n mod identity_op;\n mod if_let_mutex;\n-mod if_let_some_result;\n mod if_not_else;\n mod if_then_panic;\n mod if_then_some_else_none;\n@@ -264,6 +263,7 @@ mod map_clone;\n mod map_err_ignore;\n mod map_unit_fn;\n mod match_on_vec_items;\n+mod match_result_ok;\n mod matches;\n mod mem_discriminant;\n mod mem_forget;\n@@ -658,7 +658,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         get_last_with_len::GET_LAST_WITH_LEN,\n         identity_op::IDENTITY_OP,\n         if_let_mutex::IF_LET_MUTEX,\n-        if_let_some_result::IF_LET_SOME_RESULT,\n         if_not_else::IF_NOT_ELSE,\n         if_then_panic::IF_THEN_PANIC,\n         if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n@@ -728,6 +727,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         map_unit_fn::OPTION_MAP_UNIT_FN,\n         map_unit_fn::RESULT_MAP_UNIT_FN,\n         match_on_vec_items::MATCH_ON_VEC_ITEMS,\n+        match_result_ok::MATCH_RESULT_OK,\n         matches::INFALLIBLE_DESTRUCTURING_MATCH,\n         matches::MATCH_AS_REF,\n         matches::MATCH_BOOL,\n@@ -1259,7 +1259,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n         LintId::of(identity_op::IDENTITY_OP),\n         LintId::of(if_let_mutex::IF_LET_MUTEX),\n-        LintId::of(if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(if_then_panic::IF_THEN_PANIC),\n         LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n         LintId::of(infinite_iter::INFINITE_ITER),\n@@ -1303,6 +1302,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(map_clone::MAP_CLONE),\n         LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n+        LintId::of(match_result_ok::MATCH_RESULT_OK),\n         LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(matches::MATCH_AS_REF),\n         LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n@@ -1513,7 +1513,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(functions::DOUBLE_MUST_USE),\n         LintId::of(functions::MUST_USE_UNIT),\n         LintId::of(functions::RESULT_UNIT_ERR),\n-        LintId::of(if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(if_then_panic::IF_THEN_PANIC),\n         LintId::of(inherent_to_string::INHERENT_TO_STRING),\n         LintId::of(len_zero::COMPARISON_TO_EMPTY),\n@@ -1530,6 +1529,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(manual_map::MANUAL_MAP),\n         LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n         LintId::of(map_clone::MAP_CLONE),\n+        LintId::of(match_result_ok::MATCH_RESULT_OK),\n         LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n         LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n         LintId::of(matches::MATCH_OVERLAPPING_ARM),\n@@ -1985,7 +1985,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(missing_doc::MissingDoc::new()));\n     store.register_late_pass(|| Box::new(missing_inline::MissingInline));\n     store.register_late_pass(move || Box::new(exhaustive_items::ExhaustiveItems));\n-    store.register_late_pass(|| Box::new(if_let_some_result::OkIfLet));\n+    store.register_late_pass(|| Box::new(match_result_ok::MatchResultOk));\n     store.register_late_pass(|| Box::new(partialeq_ne_impl::PartialEqNeImpl));\n     store.register_late_pass(|| Box::new(unused_io_amount::UnusedIoAmount));\n     let enum_variant_size_threshold = conf.enum_variant_size_threshold;"}, {"sha": "02b09a2dec63c33e48ac1b8788f60fe7c3dc04a5", "filename": "clippy_lints/src/match_result_ok.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b7d40bc10394107afc03a126e346b5522beb0703/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d40bc10394107afc03a126e346b5522beb0703/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=b7d40bc10394107afc03a126e346b5522beb0703", "patch": "@@ -0,0 +1,110 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::higher;\n+use clippy_utils::method_chain_args;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, PatKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for unnecessary `ok()` in `while let`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Calling `ok()` in `while let` is unnecessary, instead match\n+    /// on `Ok(pat)`\n+    ///\n+    /// ### Example\n+    /// ```ignore\n+    /// while let Some(value) = iter.next().ok() {\n+    ///     vec.push(value)\n+    /// }\n+    ///\n+    /// if let Some(valie) = iter.next().ok() {\n+    ///     vec.push(value)\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```ignore\n+    /// while let Ok(value) = iter.next() {\n+    ///     vec.push(value)\n+    /// }\n+    ///\n+    /// if let Ok(value) = iter.next() {\n+    ///        vec.push_value)\n+    /// }\n+    /// ```\n+    pub MATCH_RESULT_OK,\n+    style,\n+    \"usage of `ok()` in `let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\"\n+}\n+\n+declare_lint_pass!(MatchResultOk => [MATCH_RESULT_OK]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if let Some(higher::IfLet { let_pat, let_expr, .. }) = higher::IfLet::hir(cx, expr);\n+            if let ExprKind::MethodCall(_, ok_span, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n+            if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n+            if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::result_type);\n+            if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n+\n+            then {\n+\n+                let mut applicability = Applicability::MachineApplicable;\n+                let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n+                let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_span), \"\", &mut applicability);\n+                let sugg = format!(\n+                    \"if let Ok({}) = {}\",\n+                    some_expr_string,\n+                    trimmed_ok.trim().trim_end_matches('.'),\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    MATCH_RESULT_OK,\n+                    expr.span.with_hi(let_expr.span.hi()),\n+                    \"matching on `Some` with `ok()` is redundant\",\n+                    &format!(\"consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                    sugg,\n+                    applicability,\n+                );\n+            }\n+        }\n+\n+        if_chain! {\n+            if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr);\n+            if let ExprKind::MethodCall(_, ok_span, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n+            if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n+            if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::result_type);\n+            if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n+\n+            then {\n+\n+                let mut applicability = Applicability::MachineApplicable;\n+                let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n+                let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_span), \"\", &mut applicability);\n+                let sugg = format!(\n+                    \"while let Ok({}) = {}\",\n+                    some_expr_string,\n+                    trimmed_ok.trim().trim_end_matches('.'),\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    MATCH_RESULT_OK,\n+                    expr.span.with_hi(let_expr.span.hi()),\n+                    \"matching on `Some` with `ok()` is redundant\",\n+                    &format!(\"consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                    sugg,\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "1bddc47721e5a71037eb70ad49622519197a3392", "filename": "tests/ui/if_let_some_result.fixed", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c8799da5aabf72aee26053075d2bd73ef9f7789/tests%2Fui%2Fif_let_some_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8799da5aabf72aee26053075d2bd73ef9f7789/tests%2Fui%2Fif_let_some_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.fixed?ref=0c8799da5aabf72aee26053075d2bd73ef9f7789", "patch": "@@ -1,28 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::if_let_some_result)]\n-#![allow(dead_code)]\n-\n-fn str_to_int(x: &str) -> i32 {\n-    if let Ok(y) = x.parse() { y } else { 0 }\n-}\n-\n-fn str_to_int_ok(x: &str) -> i32 {\n-    if let Ok(y) = x.parse() { y } else { 0 }\n-}\n-\n-#[rustfmt::skip]\n-fn strange_some_no_else(x: &str) -> i32 {\n-    {\n-        if let Ok(y) = x   .   parse()       {\n-            return y;\n-        };\n-        0\n-    }\n-}\n-\n-fn negative() {\n-    while let Some(1) = \"\".parse().ok() {}\n-}\n-\n-fn main() {}"}, {"sha": "d4a52ec9881d76f465d003af6f7c60b2a4107519", "filename": "tests/ui/if_let_some_result.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c8799da5aabf72aee26053075d2bd73ef9f7789/tests%2Fui%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8799da5aabf72aee26053075d2bd73ef9f7789/tests%2Fui%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.rs?ref=0c8799da5aabf72aee26053075d2bd73ef9f7789", "patch": "@@ -1,28 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::if_let_some_result)]\n-#![allow(dead_code)]\n-\n-fn str_to_int(x: &str) -> i32 {\n-    if let Some(y) = x.parse().ok() { y } else { 0 }\n-}\n-\n-fn str_to_int_ok(x: &str) -> i32 {\n-    if let Ok(y) = x.parse() { y } else { 0 }\n-}\n-\n-#[rustfmt::skip]\n-fn strange_some_no_else(x: &str) -> i32 {\n-    {\n-        if let Some(y) = x   .   parse()   .   ok   ()    {\n-            return y;\n-        };\n-        0\n-    }\n-}\n-\n-fn negative() {\n-    while let Some(1) = \"\".parse().ok() {}\n-}\n-\n-fn main() {}"}, {"sha": "d4760a97567ea9da7c71f9548c72c7eb878418be", "filename": "tests/ui/match_result_ok.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b7d40bc10394107afc03a126e346b5522beb0703/tests%2Fui%2Fmatch_result_ok.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b7d40bc10394107afc03a126e346b5522beb0703/tests%2Fui%2Fmatch_result_ok.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_result_ok.fixed?ref=b7d40bc10394107afc03a126e346b5522beb0703", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_result_ok)]\n+#![allow(clippy::boxed_local)]\n+#![allow(dead_code)]\n+\n+// Checking `if` cases\n+\n+fn str_to_int(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() { y } else { 0 }\n+}\n+\n+fn str_to_int_ok(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() { y } else { 0 }\n+}\n+\n+#[rustfmt::skip]\n+fn strange_some_no_else(x: &str) -> i32 {\n+    {\n+        if let Ok(y) = x   .   parse()       {\n+            return y;\n+        };\n+        0\n+    }\n+}\n+\n+// Checking `while` cases\n+\n+struct Wat {\n+    counter: i32,\n+}\n+\n+impl Wat {\n+    fn next(&mut self) -> Result<i32, &str> {\n+        self.counter += 1;\n+        if self.counter < 5 {\n+            Ok(self.counter)\n+        } else {\n+            Err(\"Oh no\")\n+        }\n+    }\n+}\n+\n+fn base_1(x: i32) {\n+    let mut wat = Wat { counter: x };\n+    while let Ok(a) = wat.next() {\n+        println!(\"{}\", a);\n+    }\n+}\n+\n+fn base_2(x: i32) {\n+    let mut wat = Wat { counter: x };\n+    while let Ok(a) = wat.next() {\n+        println!(\"{}\", a);\n+    }\n+}\n+\n+fn base_3(test_func: Box<Result<i32, &str>>) {\n+    // Expected to stay as is\n+    while let Some(_b) = test_func.ok() {}\n+}\n+\n+fn main() {}"}, {"sha": "0b818723d989776e6764c7bb1488af57c5203d13", "filename": "tests/ui/match_result_ok.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b7d40bc10394107afc03a126e346b5522beb0703/tests%2Fui%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d40bc10394107afc03a126e346b5522beb0703/tests%2Fui%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_result_ok.rs?ref=b7d40bc10394107afc03a126e346b5522beb0703", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_result_ok)]\n+#![allow(clippy::boxed_local)]\n+#![allow(dead_code)]\n+\n+// Checking `if` cases\n+\n+fn str_to_int(x: &str) -> i32 {\n+    if let Some(y) = x.parse().ok() { y } else { 0 }\n+}\n+\n+fn str_to_int_ok(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() { y } else { 0 }\n+}\n+\n+#[rustfmt::skip]\n+fn strange_some_no_else(x: &str) -> i32 {\n+    {\n+        if let Some(y) = x   .   parse()   .   ok   ()    {\n+            return y;\n+        };\n+        0\n+    }\n+}\n+\n+// Checking `while` cases\n+\n+struct Wat {\n+    counter: i32,\n+}\n+\n+impl Wat {\n+    fn next(&mut self) -> Result<i32, &str> {\n+        self.counter += 1;\n+        if self.counter < 5 {\n+            Ok(self.counter)\n+        } else {\n+            Err(\"Oh no\")\n+        }\n+    }\n+}\n+\n+fn base_1(x: i32) {\n+    let mut wat = Wat { counter: x };\n+    while let Some(a) = wat.next().ok() {\n+        println!(\"{}\", a);\n+    }\n+}\n+\n+fn base_2(x: i32) {\n+    let mut wat = Wat { counter: x };\n+    while let Ok(a) = wat.next() {\n+        println!(\"{}\", a);\n+    }\n+}\n+\n+fn base_3(test_func: Box<Result<i32, &str>>) {\n+    // Expected to stay as is\n+    while let Some(_b) = test_func.ok() {}\n+}\n+\n+fn main() {}"}, {"sha": "cc3bc8c76ff3a3018d79c6f7e4c4023374b50897", "filename": "tests/ui/match_result_ok.stderr", "status": "renamed", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7d40bc10394107afc03a126e346b5522beb0703/tests%2Fui%2Fmatch_result_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d40bc10394107afc03a126e346b5522beb0703/tests%2Fui%2Fmatch_result_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_result_ok.stderr?ref=b7d40bc10394107afc03a126e346b5522beb0703", "patch": "@@ -1,17 +1,17 @@\n error: matching on `Some` with `ok()` is redundant\n-  --> $DIR/if_let_some_result.rs:7:5\n+  --> $DIR/match_result_ok.rs:10:5\n    |\n LL |     if let Some(y) = x.parse().ok() { y } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::if-let-some-result` implied by `-D warnings`\n+   = note: `-D clippy::match-result-ok` implied by `-D warnings`\n help: consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n LL |     if let Ok(y) = x.parse() { y } else { 0 }\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: matching on `Some` with `ok()` is redundant\n-  --> $DIR/if_let_some_result.rs:17:9\n+  --> $DIR/match_result_ok.rs:20:9\n    |\n LL |         if let Some(y) = x   .   parse()   .   ok   ()    {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -21,5 +21,16 @@ help: consider matching on `Ok(y)` and removing the call to `ok` instead\n LL |         if let Ok(y) = x   .   parse()       {\n    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 2 previous errors\n+error: matching on `Some` with `ok()` is redundant\n+  --> $DIR/match_result_ok.rs:46:5\n+   |\n+LL |     while let Some(a) = wat.next().ok() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider matching on `Ok(a)` and removing the call to `ok` instead\n+   |\n+LL |     while let Ok(a) = wat.next() {\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 3 previous errors\n ", "previous_filename": "tests/ui/if_let_some_result.stderr"}]}