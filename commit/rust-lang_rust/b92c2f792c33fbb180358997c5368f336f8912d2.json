{"sha": "b92c2f792c33fbb180358997c5368f336f8912d2", "node_id": "C_kwDOAAsO6NoAKGI5MmMyZjc5MmMzM2ZiYjE4MDM1ODk5N2M1MzY4ZjMzNmY4OTEyZDI", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-16T21:13:29Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2023-04-21T09:14:03Z"}, "message": "fix incorrect param env in dead code lint", "tree": {"sha": "810354c07ce694399c29c46949fc722e48aa712e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/810354c07ce694399c29c46949fc722e48aa712e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92c2f792c33fbb180358997c5368f336f8912d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92c2f792c33fbb180358997c5368f336f8912d2", "html_url": "https://github.com/rust-lang/rust/commit/b92c2f792c33fbb180358997c5368f336f8912d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92c2f792c33fbb180358997c5368f336f8912d2/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b95852b93c8a7b70f9238b0bbd787de68c9241bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b95852b93c8a7b70f9238b0bbd787de68c9241bd", "html_url": "https://github.com/rust-lang/rust/commit/b95852b93c8a7b70f9238b0bbd787de68c9241bd"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "170b0b91e5796311669d348ef6c990f45fdcbf7b", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b92c2f792c33fbb180358997c5368f336f8912d2/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92c2f792c33fbb180358997c5368f336f8912d2/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=b92c2f792c33fbb180358997c5368f336f8912d2", "patch": "@@ -242,7 +242,9 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         let &(container, ref indices) =\n             data.get(expr.hir_id).expect(\"no offset_of_data for offset_of\");\n \n-        let mut last_did = expr.hir_id.owner.to_def_id();\n+        let body_did = self.typeck_results().hir_owner.to_def_id();\n+        let param_env = self.tcx.param_env(body_did);\n+\n         let mut current_ty = container;\n \n         for &index in indices {\n@@ -253,15 +255,14 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     self.insert_def_id(field.did);\n                     let field_ty = field.ty(self.tcx, subst);\n \n-                    last_did = field.did;\n                     current_ty =\n-                        self.tcx.normalize_erasing_regions(self.tcx.param_env(field.did), field_ty);\n+                        self.tcx.normalize_erasing_regions(param_env, field_ty);\n                 }\n                 // we don't need to mark tuple fields as live,\n                 // but we may need to mark subfields\n                 ty::Tuple(tys) => {\n                     current_ty = self.tcx.normalize_erasing_regions(\n-                        self.tcx.param_env(last_did),\n+                        param_env,\n                         tys[index.as_usize()],\n                     );\n                 }"}, {"sha": "b2a7df6b2e95540f298fb06d0af2e08abba37656", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92c2f792c33fbb180358997c5368f336f8912d2/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92c2f792c33fbb180358997c5368f336f8912d2/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=b92c2f792c33fbb180358997c5368f336f8912d2", "patch": "@@ -458,4 +458,4 @@ fn offset_of_addr() {\n     assert_eq!(ptr::addr_of!(base).addr() + offset_of!(Foo, y), ptr::addr_of!(base.y).addr());\n     assert_eq!(ptr::addr_of!(base).addr() + offset_of!(Foo, z.0), ptr::addr_of!(base.z.0).addr());\n     assert_eq!(ptr::addr_of!(base).addr() + offset_of!(Foo, z.1), ptr::addr_of!(base.z.1).addr());\n-}\n+}\n\\ No newline at end of file"}, {"sha": "b7444049a88d9c7cc539cb72a62a6d7eb7e21d89", "filename": "tests/ui/lint/dead-code/offset-of-correct-param-env.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b92c2f792c33fbb180358997c5368f336f8912d2/tests%2Fui%2Flint%2Fdead-code%2Foffset-of-correct-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92c2f792c33fbb180358997c5368f336f8912d2/tests%2Fui%2Flint%2Fdead-code%2Foffset-of-correct-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Foffset-of-correct-param-env.rs?ref=b92c2f792c33fbb180358997c5368f336f8912d2", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+#![feature(offset_of)]\n+#![deny(dead_code)]\n+\n+// This struct contains a projection that can only be normalized after getting the field type.\n+struct A<T: Project> {\n+    a: <T as Project>::EquateParamTo,\n+}\n+\n+// This is the inner struct that we want to get.\n+struct MyFieldIsNotDead {\n+    not_dead: u8,\n+}\n+\n+// These are some helpers.\n+// Inside the param env of `test`, we want to make it so that it considers T=MyFieldIsNotDead.\n+struct GenericIsEqual<T>(T);\n+trait Project {\n+    type EquateParamTo;\n+}\n+impl<T> Project for GenericIsEqual<T> {\n+    type EquateParamTo = T;\n+}\n+\n+fn test<T>() -> usize\n+where\n+    GenericIsEqual<T>: Project<EquateParamTo = MyFieldIsNotDead>,\n+{\n+\t// The first field of the A that we construct here is `<GenericIsEqual<T>> as Project>::EquateParamTo`.\n+\t// Typeck normalizes this and figures that the not_dead field is totally fine and accessible.\n+\t// But importantly, the normalization ends up with T, which, as we've declared in our param env is MyFieldDead.\n+\t// When we're in the param env of the `a` field, the where bound above is not in scope, so we don't know what T is - it's generic.\n+\t// We cannot access a field on T. Boom!\n+    std::mem::offset_of!(A<GenericIsEqual<T>>, a.not_dead)\n+}\n+\n+fn main() {\n+    test::<MyFieldIsNotDead>();\n+}\n\\ No newline at end of file"}, {"sha": "da91de3862fc83c164b7dbd26c47bd183f176bf9", "filename": "tests/ui/lint/dead-code/offset-of.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b92c2f792c33fbb180358997c5368f336f8912d2/tests%2Fui%2Flint%2Fdead-code%2Foffset-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92c2f792c33fbb180358997c5368f336f8912d2/tests%2Fui%2Flint%2Fdead-code%2Foffset-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Foffset-of.rs?ref=b92c2f792c33fbb180358997c5368f336f8912d2", "previous_filename": "tests/ui/liveness/liveness-offset-of.rs"}, {"sha": "afc4c590eebbd229fa4fb992b0681bfadfbecccc", "filename": "tests/ui/lint/dead-code/offset-of.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b92c2f792c33fbb180358997c5368f336f8912d2/tests%2Fui%2Flint%2Fdead-code%2Foffset-of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92c2f792c33fbb180358997c5368f336f8912d2/tests%2Fui%2Flint%2Fdead-code%2Foffset-of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Foffset-of.stderr?ref=b92c2f792c33fbb180358997c5368f336f8912d2", "previous_filename": "tests/ui/liveness/liveness-offset-of.stderr"}]}