{"sha": "b331b6608265f98eea8c3fa85dd67d3156c88ead", "node_id": "C_kwDOAAsO6NoAKGIzMzFiNjYwODI2NWY5OGVlYThjM2ZhODVkZDY3ZDMxNTZjODhlYWQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-11-04T16:57:03Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-11-16T18:52:58Z"}, "message": "Improve compatible enum variant suggestions.", "tree": {"sha": "62de7b84ede63b3b78add0333924afa801892834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62de7b84ede63b3b78add0333924afa801892834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b331b6608265f98eea8c3fa85dd67d3156c88ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b331b6608265f98eea8c3fa85dd67d3156c88ead", "html_url": "https://github.com/rust-lang/rust/commit/b331b6608265f98eea8c3fa85dd67d3156c88ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b331b6608265f98eea8c3fa85dd67d3156c88ead/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453e2423e6238283acae39007741e0b122fdb191", "url": "https://api.github.com/repos/rust-lang/rust/commits/453e2423e6238283acae39007741e0b122fdb191", "html_url": "https://github.com/rust-lang/rust/commit/453e2423e6238283acae39007741e0b122fdb191"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "1e43d8fc2bdbf1ff930d2b9d63347947b027f6aa", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b331b6608265f98eea8c3fa85dd67d3156c88ead/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b331b6608265f98eea8c3fa85dd67d3156c88ead/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=b331b6608265f98eea8c3fa85dd67d3156c88ead", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            let mut compatible_variants = expected_adt\n+            let compatible_variants: Vec<String> = expected_adt\n                 .variants\n                 .iter()\n                 .filter(|variant| variant.fields.len() == 1)\n@@ -265,19 +265,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None\n                     }\n                 })\n-                .peekable();\n+                .collect();\n \n-            if compatible_variants.peek().is_some() {\n-                if let Ok(expr_text) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n-                    let suggestions = compatible_variants.map(|v| format!(\"{}({})\", v, expr_text));\n-                    let msg = \"try using a variant of the expected enum\";\n-                    err.span_suggestions(\n-                        expr.span,\n-                        msg,\n-                        suggestions,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+            if let [variant] = &compatible_variants[..] {\n+                // Just a single matching variant.\n+                err.multipart_suggestion(\n+                    &format!(\"try wrapping the expression in `{}`\", variant),\n+                    vec![\n+                        (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                        (expr.span.shrink_to_hi(), \")\".to_string()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else if compatible_variants.len() > 1 {\n+                // More than one matching variant.\n+                err.multipart_suggestions(\n+                    &format!(\n+                        \"try wrapping the expression in a variant of `{}`\",\n+                        self.tcx.def_path_str(expected_adt.did)\n+                    ),\n+                    compatible_variants.into_iter().map(|variant| {\n+                        vec![\n+                            (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                            (expr.span.shrink_to_hi(), \")\".to_string()),\n+                        ]\n+                    }),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n     }"}]}