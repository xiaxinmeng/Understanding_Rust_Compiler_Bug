{"sha": "ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNzAyMGZjYjQyNTQ3MTRkOGRiZTYyNDZjYzBhMTFmZGY5YzlkZTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-15T02:02:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-15T02:02:39Z"}, "message": "Rollup merge of #78848 - DevJPM:ci-llvm-9, r=nikic\n\nBump minimal supported LLVM version to 9\n\nThis bumps the minimal tested llvm version to 9.\nThis should enable supporting newer LLVM features (and CPU extensions).\n\nThis was motived by #78361 having to drop features because of LLVM 8 not supporting certain CPU extensions yet.\nThis was declared relatively uncontroversial on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Min.20Supported.20LLVM.20Upgrade.20Process.3F/near/215957859).\n\nPaging ````@eddyb```` because there was a comment in the [dockerfile](https://github.com/rust-lang/rust/blob/master/src/ci/docker/host-x86_64/x86_64-gnu-llvm-8/Dockerfile#L42) describing a hack (which I don't quite understand) which was also blocked by not having LLVM 9.", "tree": {"sha": "9eb42c8b737c8b0162aed07803668d318fc680ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eb42c8b737c8b0162aed07803668d318fc680ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsIw/CRBK7hj4Ov3rIwAAdHIIAJyEW1M5WwlsPSCeJ+um5Kdp\nX0iJCu/rwX4J2PnppGiXOXYpd5eRonwKAN27+87EjudWPrc+ak9OwPXew0hyZkFg\nqKmrjCIUEvan8549BrgMoRMOmsumFNfLk/IJ8Dsngw8JZfWxRv5FuSRAnWxvFBrs\nv8JhTrlRIxitM1fD7AsDNmTk7/H+5YrXUzUCdtlC+CDuiNZmOErE2iAT3Ao/7m0Z\n6hePNsahHSyaFNTlhwEILcxIWh4nNCJqPwmH5tdM92piWaavYMrJiUkydJhvwtu2\nrHIqdleAtTWBuUxFfhW9d14wITvQWsMjuhlHrx9xQY3OSl7ik/ABgOI30ivpuKA=\n=3l6x\n-----END PGP SIGNATURE-----\n", "payload": "tree 9eb42c8b737c8b0162aed07803668d318fc680ab\nparent dbb37fb1eed3f26b0071006844e7ceab3090062a\nparent 86193ca91c2fa472ef8fbebe05037331d803f0fd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605405759 +0100\ncommitter GitHub <noreply@github.com> 1605405759 +0100\n\nRollup merge of #78848 - DevJPM:ci-llvm-9, r=nikic\n\nBump minimal supported LLVM version to 9\n\nThis bumps the minimal tested llvm version to 9.\nThis should enable supporting newer LLVM features (and CPU extensions).\n\nThis was motived by #78361 having to drop features because of LLVM 8 not supporting certain CPU extensions yet.\nThis was declared relatively uncontroversial on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Min.20Supported.20LLVM.20Upgrade.20Process.3F/near/215957859).\n\nPaging ````@eddyb```` because there was a comment in the [dockerfile](https://github.com/rust-lang/rust/blob/master/src/ci/docker/host-x86_64/x86_64-gnu-llvm-8/Dockerfile#L42) describing a hack (which I don't quite understand) which was also blocked by not having LLVM 9.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "html_url": "https://github.com/rust-lang/rust/commit/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb37fb1eed3f26b0071006844e7ceab3090062a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb37fb1eed3f26b0071006844e7ceab3090062a", "html_url": "https://github.com/rust-lang/rust/commit/dbb37fb1eed3f26b0071006844e7ceab3090062a"}, {"sha": "86193ca91c2fa472ef8fbebe05037331d803f0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/86193ca91c2fa472ef8fbebe05037331d803f0fd", "html_url": "https://github.com/rust-lang/rust/commit/86193ca91c2fa472ef8fbebe05037331d803f0fd"}], "stats": {"total": 115, "additions": 15, "deletions": 100}, "files": [{"sha": "f10b6ca7ea94d82a94569476f9e0f654d859ae8d", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -43,7 +43,7 @@ jobs:\n           - name: mingw-check\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-8\n+          - name: x86_64-gnu-llvm-9\n             os: ubuntu-latest-xl\n             env: {}\n           - name: x86_64-gnu-tools\n@@ -265,7 +265,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-8\n+          - name: x86_64-gnu-llvm-9\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-latest-xl"}, {"sha": "e06e2d45665b1aae29ac40afefb27e4707d4b617", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -144,25 +144,6 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     );\n }\n \n-fn translate_obsolete_target_features(feature: &str) -> &str {\n-    const LLVM9_FEATURE_CHANGES: &[(&str, &str)] =\n-        &[(\"+fp-only-sp\", \"-fp64\"), (\"-fp-only-sp\", \"+fp64\"), (\"+d16\", \"-d32\"), (\"-d16\", \"+d32\")];\n-    if llvm_util::get_major_version() >= 9 {\n-        for &(old, new) in LLVM9_FEATURE_CHANGES {\n-            if feature == old {\n-                return new;\n-            }\n-        }\n-    } else {\n-        for &(old, new) in LLVM9_FEATURE_CHANGES {\n-            if feature == new {\n-                return old;\n-            }\n-        }\n-    }\n-    feature\n-}\n-\n pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n     const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n \n@@ -172,12 +153,7 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n         .target_feature\n         .split(',')\n         .filter(|f| !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)));\n-    sess.target\n-        .features\n-        .split(',')\n-        .chain(cmdline)\n-        .filter(|l| !l.is_empty())\n-        .map(translate_obsolete_target_features)\n+    sess.target.features.split(',').chain(cmdline).filter(|l| !l.is_empty())\n }\n \n pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {"}, {"sha": "6f956c3bcc1ce5da4c405adda97e32f75a79068f", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -377,11 +377,6 @@ fn get_pgo_use_path(config: &ModuleConfig) -> Option<CString> {\n }\n \n pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n-    // We only support the new pass manager starting with LLVM 9.\n-    if llvm_util::get_major_version() < 9 {\n-        return false;\n-    }\n-\n     // The new pass manager is disabled by default.\n     config.new_llvm_pass_manager\n }"}, {"sha": "8dd40308075edd3a706c85c2935aced09c580457", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -100,11 +100,6 @@ fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n     }\n }\n \n-fn strip_function_ptr_alignment(data_layout: String) -> String {\n-    // FIXME: Make this more general.\n-    data_layout.replace(\"-Fi8-\", \"-\")\n-}\n-\n fn strip_x86_address_spaces(data_layout: String) -> String {\n     data_layout.replace(\"-p270:32:32-p271:32:32-p272:64:64-\", \"-\")\n }\n@@ -119,9 +114,6 @@ pub unsafe fn create_module(\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n     let mut target_data_layout = sess.target.data_layout.clone();\n-    if llvm_util::get_major_version() < 9 {\n-        target_data_layout = strip_function_ptr_alignment(target_data_layout);\n-    }\n     if llvm_util::get_major_version() < 10\n         && (sess.target.arch == \"x86\" || sess.target.arch == \"x86_64\")\n     {"}, {"sha": "cc71b6289faf1ac217391b377fec12c2c371cbe3", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -104,7 +104,7 @@ unsafe fn configure_llvm(sess: &Session) {\n         }\n     }\n \n-    if sess.opts.debugging_opts.llvm_time_trace && get_major_version() >= 9 {\n+    if sess.opts.debugging_opts.llvm_time_trace {\n         // time-trace is not thread safe and running it in parallel will cause seg faults.\n         if !sess.opts.debugging_opts.no_parallel_llvm {\n             bug!(\"`-Z llvm-time-trace` requires `-Z no-parallel-llvm\")\n@@ -122,10 +122,8 @@ unsafe fn configure_llvm(sess: &Session) {\n \n pub fn time_trace_profiler_finish(file_name: &str) {\n     unsafe {\n-        if get_major_version() >= 9 {\n-            let file_name = CString::new(file_name).unwrap();\n-            llvm::LLVMTimeTraceProfilerFinish(file_name.as_ptr());\n-        }\n+        let file_name = CString::new(file_name).unwrap();\n+        llvm::LLVMTimeTraceProfilerFinish(file_name.as_ptr());\n     }\n }\n "}, {"sha": "01d76bb3e94f2b471f5e325caf9c9a64b01d5229", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -16,9 +16,7 @@\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Object/IRObjectFile.h\"\n #include \"llvm/Passes/PassBuilder.h\"\n-#if LLVM_VERSION_GE(9, 0)\n #include \"llvm/Passes/StandardInstrumentations.h\"\n-#endif\n #include \"llvm/Support/CBindingWrapping.h\"\n #include \"llvm/Support/FileSystem.h\"\n #include \"llvm/Support/Host.h\"\n@@ -31,15 +29,11 @@\n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n \n #include \"llvm/Transforms/Instrumentation.h\"\n-#if LLVM_VERSION_GE(9, 0)\n #include \"llvm/Transforms/Instrumentation/AddressSanitizer.h\"\n #include \"llvm/Support/TimeProfiler.h\"\n-#endif\n #include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n-#if LLVM_VERSION_GE(9, 0)\n #include \"llvm/Transforms/Utils/CanonicalizeAliases.h\"\n-#endif\n #include \"llvm/Transforms/Utils/NameAnonGlobals.h\"\n \n using namespace llvm;\n@@ -73,20 +67,18 @@ extern \"C\" void LLVMTimeTraceProfilerInitialize() {\n   timeTraceProfilerInitialize(\n       /* TimeTraceGranularity */ 0,\n       /* ProcName */ \"rustc\");\n-#elif LLVM_VERSION_GE(9, 0)\n+#else\n   timeTraceProfilerInitialize();\n #endif\n }\n \n extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n-#if LLVM_VERSION_GE(9, 0)\n   StringRef FN(FileName);\n   std::error_code EC;\n   raw_fd_ostream OS(FN, EC, sys::fs::CD_CreateAlways);\n \n   timeTraceProfilerWrite(OS);\n   timeTraceProfilerCleanup();\n-#endif\n }\n \n enum class LLVMRustPassKind {\n@@ -127,22 +119,14 @@ extern \"C\" LLVMPassRef LLVMRustCreateAddressSanitizerFunctionPass(bool Recover)\n extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {\n   const bool CompileKernel = false;\n \n-#if LLVM_VERSION_GE(9, 0)\n   return wrap(createModuleAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n-#else\n-  return wrap(createAddressSanitizerModulePass(CompileKernel, Recover));\n-#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool Recover) {\n-#if LLVM_VERSION_GE(9, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n       MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n-#else\n-  return wrap(createMemorySanitizerLegacyPassPass(TrackOrigins, Recover));\n-#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n@@ -657,8 +641,6 @@ extern \"C\" typedef void (*LLVMRustSelfProfileBeforePassCallback)(void*, // LlvmS\n                                                       const char*);     // IR name\n extern \"C\" typedef void (*LLVMRustSelfProfileAfterPassCallback)(void*); // LlvmSelfProfiler\n \n-#if LLVM_VERSION_GE(9, 0)\n-\n std::string LLVMRustwrappedIrGetName(const llvm::Any &WrappedIr) {\n   if (any_isa<const Module *>(WrappedIr))\n     return any_cast<const Module *>(WrappedIr)->getName().str();\n@@ -706,7 +688,6 @@ void LLVMSelfProfileInitializeCallbacks(\n         AfterPassCallback(LlvmSelfProfiler);\n       });\n }\n-#endif\n \n enum class LLVMRustOptStage {\n   PreLinkNoLTO,\n@@ -739,7 +720,6 @@ LLVMRustOptimizeWithNewPassManager(\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n-#if LLVM_VERSION_GE(9, 0)\n   Module *TheModule = unwrap(ModuleRef);\n   TargetMachine *TM = unwrap(TMRef);\n   PassBuilder::OptimizationLevel OptLevel = fromRust(OptLevelRust);\n@@ -970,11 +950,6 @@ LLVMRustOptimizeWithNewPassManager(\n     UpgradeCallsToIntrinsic(&*I++); // must be post-increment, as we remove\n \n   MPM.run(*TheModule, MAM);\n-#else\n-  // The new pass manager has been available for a long time,\n-  // but we don't bother supporting it on old LLVM versions.\n-  report_fatal_error(\"New pass manager only supported since LLVM 9\");\n-#endif\n }\n \n // Callback to demangle function name\n@@ -1325,12 +1300,9 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                               GlobalValue::LinkageTypes NewLinkage) {\n     Ret->ResolvedODR[ModuleIdentifier][GUID] = NewLinkage;\n   };\n-#if LLVM_VERSION_GE(9, 0)\n+\n   thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage,\n                                   Ret->GUIDPreservedSymbols);\n-#else\n-  thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage);\n-#endif\n \n   // Here we calculate an `ExportedGUIDs` set for use in the `isExported`\n   // callback below. This callback below will dictate the linkage for all"}, {"sha": "9b0c176b692034bc8aaa5db7377a9fb1601e791c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -124,9 +124,7 @@ extern \"C\" LLVMValueRef LLVMRustGetOrInsertFunction(LLVMModuleRef M,\n   return wrap(unwrap(M)\n                   ->getOrInsertFunction(StringRef(Name, NameLen),\n                                         unwrap<FunctionType>(FunctionTy))\n-#if LLVM_VERSION_GE(9, 0)\n                   .getCallee()\n-#endif\n   );\n }\n \n@@ -251,11 +249,7 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n                                              LLVMTypeRef Ty) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-#if LLVM_VERSION_GE(9, 0)\n   Attribute Attr = Attribute::getWithByValType(Call->getContext(), unwrap(Ty));\n-#else\n-  Attribute Attr = Attribute::get(Call->getContext(), Attribute::ByVal);\n-#endif\n   Call->addAttribute(Index, Attr);\n }\n \n@@ -296,11 +290,7 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n                                      LLVMTypeRef Ty) {\n   Function *F = unwrap<Function>(Fn);\n-#if LLVM_VERSION_GE(9, 0)\n   Attribute Attr = Attribute::getWithByValType(F->getContext(), unwrap(Ty));\n-#else\n-  Attribute Attr = Attribute::get(F->getContext(), Attribute::ByVal);\n-#endif\n   F->addAttribute(Index, Attr);\n }\n \n@@ -616,11 +606,9 @@ static DISubprogram::DISPFlags fromRust(LLVMRustDISPFlags SPFlags) {\n   if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagOptimized)) {\n     Result |= DISubprogram::DISPFlags::SPFlagOptimized;\n   }\n-#if LLVM_VERSION_GE(9, 0)\n   if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagMainSubprogram)) {\n     Result |= DISubprogram::DISPFlags::SPFlagMainSubprogram;\n   }\n-#endif\n \n   return Result;\n }\n@@ -744,10 +732,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n   DISubprogram::DISPFlags llvmSPFlags = fromRust(SPFlags);\n   DINode::DIFlags llvmFlags = fromRust(Flags);\n-#if LLVM_VERSION_LT(9, 0)\n-  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagMainSubprogram))\n-    llvmFlags |= DINode::DIFlags::FlagMainSubprogram;\n-#endif\n   DISubprogram *Sub = Builder->createFunction(\n       unwrapDI<DIScope>(Scope),\n       StringRef(Name, NameLen),"}, {"sha": "d716b23af6004c03b0006992417daae4b93e6c14", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -348,11 +348,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 8 {\n+        if major >= 9 {\n             return;\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=8.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=9.0\\n\\n\", version)\n }\n \n fn configure_cmake("}, {"sha": "0ab1f727a29a0c75216a07e9c99261dd5ad550dd", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-9/Dockerfile", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-9%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-9%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-9%2FDockerfile?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -13,7 +13,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-8-tools \\\n+  llvm-9-tools \\\n+  llvm-9-dev \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -27,7 +28,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-8 \\\n+      --llvm-root=/usr/lib/llvm-9 \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n ", "previous_filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-8/Dockerfile"}, {"sha": "9eea6243dfa57ea809ecd467b4b23a6d930e980b", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -280,7 +280,7 @@ jobs:\n           - name: mingw-check\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-8\n+          - name: x86_64-gnu-llvm-9\n             <<: *job-linux-xl\n \n           - name: x86_64-gnu-tools\n@@ -412,7 +412,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-8\n+          - name: x86_64-gnu-llvm-9\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl"}, {"sha": "6cb2728359b9597954063d3bd9aa011db4681b94", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -1,7 +1,6 @@\n // Checks if the correct annotation for the efiapi ABI is passed to llvm.\n \n // revisions:x86_64 i686 aarch64 arm riscv\n-// min-llvm-version: 9.0\n // needs-llvm-components: aarch64 arm riscv\n \n //[x86_64] compile-flags: --target x86_64-unknown-uefi"}, {"sha": "4c0a5602c6dad73ecb37e59e3431696749631f2a", "filename": "src/test/codegen/force-unwind-tables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 8.0\n // compile-flags: -C no-prepopulate-passes -C force-unwind-tables=y\n \n #![crate_type=\"lib\"]"}, {"sha": "1542c7f311848808903b90d2cafe388b49cb6754", "filename": "src/test/ui/sanitize/new-llvm-pass-manager-thin-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs?ref=ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "patch": "@@ -2,7 +2,6 @@\n // being run when compiling with new LLVM pass manager and ThinLTO.\n // Note: The issue occurred only on non-zero opt-level.\n //\n-// min-llvm-version: 9.0\n // needs-sanitizer-support\n // needs-sanitizer-address\n //"}]}