{"sha": "e5c01f4633f3109914390d67856b9910042a627e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YzAxZjQ2MzNmMzEwOTkxNDM5MGQ2Nzg1NmI5OTEwMDQyYTYyN2U=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-09-24T13:12:37Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-26T19:41:16Z"}, "message": "comment some ugly points in check_match", "tree": {"sha": "9cc01d4874cc03d9af67cb39f590241e3188a423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc01d4874cc03d9af67cb39f590241e3188a423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5c01f4633f3109914390d67856b9910042a627e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c01f4633f3109914390d67856b9910042a627e", "html_url": "https://github.com/rust-lang/rust/commit/e5c01f4633f3109914390d67856b9910042a627e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5c01f4633f3109914390d67856b9910042a627e/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b3b01b5f7f5a9d7d340dacf7dbf72be29e2c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b3b01b5f7f5a9d7d340dacf7dbf72be29e2c07", "html_url": "https://github.com/rust-lang/rust/commit/a6b3b01b5f7f5a9d7d340dacf7dbf72be29e2c07"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "709eb49dfccf081647c227258c797ae8bdf02f92", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e5c01f4633f3109914390d67856b9910042a627e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c01f4633f3109914390d67856b9910042a627e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=e5c01f4633f3109914390d67856b9910042a627e", "patch": "@@ -851,8 +851,11 @@ pub fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> us\n         ty::TyBox(_) => 1,\n         ty::TySlice(_) => match *ctor {\n             Slice(length) => length,\n-            ConstantValue(_) => 0,\n-            _ => bug!()\n+            ConstantValue(_) => {\n+                // TODO: this is utterly wrong, but required for byte arrays\n+                0\n+            }\n+            _ => bug!(\"bad slice pattern {:?} {:?}\", ctor, ty)\n         },\n         ty::TyRef(..) => 1,\n         ty::TyAdt(adt, _) => {\n@@ -981,20 +984,25 @@ pub fn specialize<'a, 'b, 'tcx>(\n             Some(vec![wpat(&**inner)]),\n \n         PatKind::Lit(ref expr) => {\n-            if let Some(&ty::TyS { sty: ty::TyRef(_, mt), .. }) = r[col].1 {\n-                // HACK: handle string literals. A string literal pattern\n-                // serves both as an unary reference pattern and as a\n-                // nullary value pattern, depending on the type.\n-                Some(vec![(pat, Some(mt.ty))])\n-            } else {\n-                let expr_value = eval_const_expr(cx.tcx, &expr);\n-                match range_covered_by_constructor(\n-                    cx.tcx, expr.span, constructor, &expr_value, &expr_value\n-                ) {\n-                    Ok(true) => Some(vec![]),\n-                    Ok(false) => None,\n-                    Err(ErrorReported) => None,\n+            match r[col].1 {\n+                Some(&ty::TyS { sty: ty::TyRef(_, mt), .. }) => {\n+                    // HACK: handle string literals. A string literal pattern\n+                    // serves both as an unary reference pattern and as a\n+                    // nullary value pattern, depending on the type.\n+                    Some(vec![(pat, Some(mt.ty))])\n+                }\n+                Some(ty) => {\n+                    assert_eq!(constructor_arity(cx, constructor, ty), 0);\n+                    let expr_value = eval_const_expr(cx.tcx, &expr);\n+                    match range_covered_by_constructor(\n+                        cx.tcx, expr.span, constructor, &expr_value, &expr_value\n+                            ) {\n+                        Ok(true) => Some(vec![]),\n+                        Ok(false) => None,\n+                        Err(ErrorReported) => None,\n+                    }\n                 }\n+                None => span_bug!(pat.span, \"literal pattern {:?} has no type\", pat)\n             }\n         }\n "}]}