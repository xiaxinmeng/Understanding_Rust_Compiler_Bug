{"sha": "81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZDZmOWNjODEzZTg5NDZiNmNiMmVlMjlkZmZlYjAwMDBjNjNlNjk=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-30T14:07:38Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:16Z"}, "message": "Add tests", "tree": {"sha": "13bbab2db136b5bb30adda28df8dac8fd6bcaae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13bbab2db136b5bb30adda28df8dac8fd6bcaae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "html_url": "https://github.com/rust-lang/rust/commit/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3790f08a42afd07835f9eec72db1d56235d32eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3790f08a42afd07835f9eec72db1d56235d32eed", "html_url": "https://github.com/rust-lang/rust/commit/3790f08a42afd07835f9eec72db1d56235d32eed"}], "stats": {"total": 278, "additions": 278, "deletions": 0}, "files": [{"sha": "df25bad622b3d09e83d3d6090f176f5cf914e887", "filename": "src/test/compile-fail/chalkify/chalk_initial_program.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fchalk_initial_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fchalk_initial_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fchalk_initial_program.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+\n+impl Foo for i32 { }\n+\n+impl Foo for u32 { }\n+\n+fn gimme<F: Foo>() { }\n+\n+// Note: this also tests that `std::process::Termination` is implemented for `()`.\n+fn main() {\n+    gimme::<i32>();\n+    gimme::<u32>();\n+    gimme::<f32>(); //~ERROR the trait bound `f32: Foo` is not satisfied\n+}"}, {"sha": "d70c6f8055ddf92adfd332a3d1963888ed08ce93", "filename": "src/test/compile-fail/chalkify/generic_impls.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fgeneric_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fgeneric_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fgeneric_impls.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+\n+impl<T> Foo for (T, u32) { }\n+\n+fn gimme<F: Foo>() { }\n+\n+fn foo<T>() {\n+    gimme::<(T, u32)>();\n+    gimme::<(Option<T>, u32)>();\n+    gimme::<(Option<T>, f32)>(); //~ ERROR\n+}\n+\n+fn main() {\n+    gimme::<(i32, u32)>();\n+    gimme::<(i32, f32)>(); //~ ERROR\n+}"}, {"sha": "96b1b2533712bd3407f9520990fc94b1c7f331ae", "filename": "src/test/compile-fail/chalkify/impl_wf.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fimpl_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fimpl_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fchalkify%2Fimpl_wf.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo: Sized { }\n+\n+trait Bar {\n+    type Item: Foo;\n+}\n+\n+impl Foo for i32 { }\n+\n+impl Foo for str { }\n+//~^ ERROR the size for values of type `str` cannot be known at compilation time\n+\n+// Implicit `T: Sized` bound.\n+impl<T> Foo for Option<T> { }\n+\n+impl Bar for () {\n+    type Item = i32;\n+}\n+\n+impl<T> Bar for Option<T> {\n+    type Item = Option<T>;\n+}\n+\n+impl Bar for f32 {\n+//~^ ERROR the trait bound `f32: Foo` is not satisfied\n+    type Item = f32;\n+}\n+\n+trait Baz<U: ?Sized> where U: Foo { }\n+\n+impl Baz<i32> for i32 { }\n+\n+impl Baz<f32> for f32 { }\n+//~^ ERROR the trait bound `f32: Foo` is not satisfied\n+\n+fn main() {\n+}"}, {"sha": "d1aa975ddc24d701a54f68b7b67db019dd53a7cf", "filename": "src/test/compile-fail/chalkify/type_wf.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Ftype_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fcompile-fail%2Fchalkify%2Ftype_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fchalkify%2Ftype_wf.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+\n+struct S<T: Foo> {\n+    x: T,\n+}\n+\n+impl Foo for i32 { }\n+impl<T> Foo for Option<T> { }\n+\n+fn main() {\n+    let s = S {\n+       x: 5,\n+    };\n+\n+    let s = S { //~ ERROR the trait bound `{float}: Foo` is not satisfied\n+        x: 5.0,\n+    };\n+\n+    let s = S {\n+        x: Some(5.0),\n+    };\n+}"}, {"sha": "fbe30f115444e52392433878aa8b417fdcf7ab61", "filename": "src/test/run-pass/chalkify/inherent_impl.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchalkify%2Finherent_impl.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,41 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+\n+impl Foo for i32 { }\n+\n+struct S<T: Foo> {\n+    x: T,\n+}\n+\n+fn only_foo<T: Foo>(_x: &T) { }\n+\n+impl<T> S<T> {\n+    // Test that we have the correct environment inside an inherent method.\n+    fn dummy_foo(&self) {\n+        only_foo(&self.x)\n+    }\n+}\n+\n+trait Bar { }\n+impl Bar for u32 { }\n+\n+fn only_bar<T: Bar>() { }\n+\n+impl<T> S<T> {\n+    // Test that the environment of `dummy_bar` adds up with the environment\n+    // of the inherent impl.\n+    fn dummy_bar<U: Bar>(&self) {\n+        only_foo(&self.x);\n+        only_bar::<U>();\n+    }\n+}\n+\n+fn main() {\n+    let s = S {\n+        x: 5,\n+    };\n+\n+    s.dummy_foo();\n+    s.dummy_bar::<u32>();\n+}"}, {"sha": "a598f68d3f98796fb6cf41e6f8e0be794207c750", "filename": "src/test/run-pass/chalkify/projection.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchalkify%2Fprojection.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+\n+trait Bar {\n+    type Item: Foo;\n+}\n+\n+impl Foo for i32 { }\n+impl Bar for i32 {\n+    type Item = i32;\n+}\n+\n+fn only_foo<T: Foo>() { }\n+\n+fn only_bar<T: Bar>() {\n+    // `T` implements `Bar` hence `<T as Bar>::Item` must also implement `Bar`\n+    only_foo::<T::Item>()\n+}\n+\n+fn main() {\n+    only_bar::<i32>();\n+    only_foo::<<i32 as Bar>::Item>();\n+}"}, {"sha": "441d61ef24893fbbfd9961e3d5941eaec29fb2e6", "filename": "src/test/run-pass/chalkify/super_trait.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Fsuper_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Fsuper_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchalkify%2Fsuper_trait.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+trait Bar: Foo { }\n+\n+impl Foo for i32 { }\n+impl Bar for i32 { }\n+\n+fn only_foo<T: Foo>() { }\n+\n+fn only_bar<T: Bar>() {\n+    // `T` implements `Bar` hence `T` must also implement `Foo`\n+    only_foo::<T>()\n+}\n+\n+fn main() {\n+    only_bar::<i32>()\n+}"}, {"sha": "f82453792ff4c3b65d2d82260d4f10b5d4738791", "filename": "src/test/run-pass/chalkify/trait_implied_bound.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Ftrait_implied_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Ftrait_implied_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchalkify%2Ftrait_implied_bound.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+trait Bar<U> where U: Foo { }\n+\n+impl Foo for i32 { }\n+impl Bar<i32> for i32 { }\n+\n+fn only_foo<T: Foo>() { }\n+\n+fn only_bar<U, T: Bar<U>>() {\n+    only_foo::<U>()\n+}\n+\n+fn main() {\n+    only_bar::<i32, i32>()\n+}"}, {"sha": "94d976d3242710bc8567bb7ba812e897309b62a1", "filename": "src/test/run-pass/chalkify/type_implied_bound.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Ftype_implied_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Frun-pass%2Fchalkify%2Ftype_implied_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchalkify%2Ftype_implied_bound.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: -Z chalk\n+\n+trait Eq { }\n+trait Hash: Eq { }\n+\n+impl Eq for i32 { }\n+impl Hash for i32 { }\n+\n+struct Set<T: Hash> {\n+    _x: T,\n+}\n+\n+fn only_eq<T: Eq>() { }\n+\n+fn take_a_set<T>(_: &Set<T>) {\n+    // `Set<T>` is an input type of `take_a_set`, hence we know that\n+    // `T` must implement `Hash`, and we know in turn that `T` must\n+    // implement `Eq`.\n+    only_eq::<T>()\n+}\n+\n+fn main() {\n+    let set = Set {\n+        _x: 5,\n+    };\n+\n+    take_a_set(&set);\n+}"}, {"sha": "62a53ec0317b3f5942c100ca2e2db3ec3e7cd5fc", "filename": "src/test/ui/chalkify/type_inference.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Z chalk\n+\n+trait Foo { }\n+impl Foo for i32 { }\n+\n+trait Bar { }\n+impl Bar for i32 { }\n+impl Bar for u32 { }\n+\n+fn only_foo<T: Foo>(_x: T) { }\n+\n+fn only_bar<T: Bar>(_x: T) { }\n+\n+fn main() {\n+    let x = 5.0;\n+\n+    // The only type which implements `Foo` is `i32`, so the chalk trait solver\n+    // is expecting a variable of type `i32`. This behavior differs from the\n+    // old-style trait solver. I guess this will change, that's why I'm\n+    // adding that test.\n+    only_foo(x); //~ ERROR mismatched types\n+\n+    // Here we have two solutions so we get back the behavior of the old-style\n+    // trait solver.\n+    only_bar(x); //~ ERROR the trait bound `{float}: Bar` is not satisfied\n+}"}, {"sha": "49ed97d71680b72426399675c39978d2dcf62ebc", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81d6f9cc813e8946b6cb2ee29dffeb0000c63e69/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=81d6f9cc813e8946b6cb2ee29dffeb0000c63e69", "patch": "@@ -0,0 +1,28 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type_inference.rs:21:14\n+   |\n+LL |     only_foo(x); //~ ERROR mismatched types\n+   |              ^ expected i32, found floating-point variable\n+   |\n+   = note: expected type `i32`\n+              found type `{float}`\n+\n+error[E0277]: the trait bound `{float}: Bar` is not satisfied\n+  --> $DIR/type_inference.rs:25:5\n+   |\n+LL |     only_bar(x); //~ ERROR the trait bound `{float}: Bar` is not satisfied\n+   |     ^^^^^^^^ the trait `Bar` is not implemented for `{float}`\n+   |\n+   = help: the following implementations were found:\n+             <i32 as Bar>\n+             <u32 as Bar>\n+note: required by `only_bar`\n+  --> $DIR/type_inference.rs:12:1\n+   |\n+LL | fn only_bar<T: Bar>(_x: T) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}