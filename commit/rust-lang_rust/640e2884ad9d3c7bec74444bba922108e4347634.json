{"sha": "640e2884ad9d3c7bec74444bba922108e4347634", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MGUyODg0YWQ5ZDNjN2JlYzc0NDQ0YmJhOTIyMTA4ZTQzNDc2MzQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-16T14:23:26Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-23T13:54:14Z"}, "message": "Panic on mutable allocs in constants", "tree": {"sha": "8d3229cde7bb1c8f5fbe3a73b65641259a0c19f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3229cde7bb1c8f5fbe3a73b65641259a0c19f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640e2884ad9d3c7bec74444bba922108e4347634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640e2884ad9d3c7bec74444bba922108e4347634", "html_url": "https://github.com/rust-lang/rust/commit/640e2884ad9d3c7bec74444bba922108e4347634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640e2884ad9d3c7bec74444bba922108e4347634/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "url": "https://api.github.com/repos/rust-lang/rust/commits/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "html_url": "https://github.com/rust-lang/rust/commit/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "5b19f879389f4fb5115e2f7c16f02aba46beb9d1", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/640e2884ad9d3c7bec74444bba922108e4347634/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640e2884ad9d3c7bec74444bba922108e4347634/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=640e2884ad9d3c7bec74444bba922108e4347634", "patch": "@@ -320,12 +320,19 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             // We can't call the `intern_shallow` method here, as its logic is tailored to safe\n             // references and a `leftover_allocations` set (where we only have a todo-list here).\n             // So we hand-roll the interning logic here again.\n-            if base_intern_mode != InternMode::Static {\n-                // If it's not a static, it *must* be immutable.\n-                // We cannot have mutable memory inside a constant.\n-                // FIXME: ideally we would assert that they already are immutable, to double-\n-                // check our static checks.\n-                alloc.mutability = Mutability::Not;\n+            match base_intern_mode {\n+                InternMode::Static => {}\n+                InternMode::Const | InternMode::ConstBase => {\n+                    // If it's not a static, it *must* be immutable.\n+                    // We cannot have mutable memory inside a constant.\n+                    // We use `delay_span_bug` here, because this can be reached in the presence\n+                    // of fancy transmutes.\n+                    if alloc.mutability == Mutability::Mut {\n+                        // For better errors later, mark the allocation as immutable\n+                        alloc.mutability = Mutability::Not;\n+                        ecx.tcx.sess.delay_span_bug(ecx.tcx.span, \"mutable allocation in constant\");\n+                    }\n+                }\n             }\n             let alloc = tcx.intern_const_alloc(alloc);\n             tcx.alloc_map.lock().set_alloc_id_memory(alloc_id, alloc);\n@@ -337,6 +344,8 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n         } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // dangling pointer\n             throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n+        } else if ecx.tcx.alloc_map.lock().get(alloc_id).is_none() {\n+            span_bug!(ecx.tcx.span, \"encountered unknown alloc id {:?}\", alloc_id);\n         }\n     }\n     Ok(())"}, {"sha": "97af1f2f993c347510a2aa2b60660fd20fd7d8c3", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/640e2884ad9d3c7bec74444bba922108e4347634/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640e2884ad9d3c7bec74444bba922108e4347634/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs?ref=640e2884ad9d3c7bec74444bba922108e4347634", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n+// normalize-stderr-test \"note: rustc 1.* running on .*\" -> \"note: rustc VERSION running on TARGET\"\n+// normalize-stderr-test \"note: compiler flags: .*\" -> \"note: compiler flags: FLAGS\"\n+// normalize-stderr-test \"interpret/intern.rs:[0-9]*:[0-9]*\" -> \"interpret/intern.rs:LL:CC\"\n+\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+#![deny(const_err)]\n+\n+use std::cell::UnsafeCell;\n+\n+// make sure we do not just intern this as mutable\n+const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+//~^ WARN: skipping const checks\n+//~| ERROR: mutable allocation in constant\n+\n+fn main() {}"}, {"sha": "3493b7c54c43b4773bf440a7f927305976a7c040", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/640e2884ad9d3c7bec74444bba922108e4347634/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/640e2884ad9d3c7bec74444bba922108e4347634/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=640e2884ad9d3c7bec74444bba922108e4347634", "patch": "@@ -0,0 +1,25 @@\n+warning: skipping const checks\n+  --> $DIR/mutable_const2.rs:15:38\n+   |\n+LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error: internal compiler error: mutable allocation in constant\n+  --> $DIR/mutable_const2.rs:15:1\n+   |\n+LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:347:17\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc VERSION running on TARGET\n+\n+note: compiler flags: FLAGS\n+"}]}