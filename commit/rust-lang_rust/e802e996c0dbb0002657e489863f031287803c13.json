{"sha": "e802e996c0dbb0002657e489863f031287803c13", "node_id": "C_kwDOAAsO6NoAKGU4MDJlOTk2YzBkYmIwMDAyNjU3ZTQ4OTg2M2YwMzEyODc4MDNjMTM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-10-31T10:21:06Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-10-31T10:21:06Z"}, "message": "Don't generate tuple struct fields into the search index", "tree": {"sha": "7da7e6561659cb550465ebe07c0e013671137f61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7da7e6561659cb550465ebe07c0e013671137f61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e802e996c0dbb0002657e489863f031287803c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e802e996c0dbb0002657e489863f031287803c13", "html_url": "https://github.com/rust-lang/rust/commit/e802e996c0dbb0002657e489863f031287803c13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e802e996c0dbb0002657e489863f031287803c13/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab0432952b24df769459d4c973dbb8d08561a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab0432952b24df769459d4c973dbb8d08561a83", "html_url": "https://github.com/rust-lang/rust/commit/fab0432952b24df769459d4c973dbb8d08561a83"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "d027fb6e8763cad8fdc3d1ffd6a237111b5de891", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e802e996c0dbb0002657e489863f031287803c13/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e802e996c0dbb0002657e489863f031287803c13/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=e802e996c0dbb0002657e489863f031287803c13", "patch": "@@ -316,21 +316,28 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                         let desc = item.doc_value().map_or_else(String::new, |x| {\n                             short_markdown_summary(x.as_str(), &item.link_names(self.cache))\n                         });\n-                        self.cache.search_index.push(IndexItem {\n-                            ty: item.type_(),\n-                            name: s.to_string(),\n-                            path: join_with_double_colon(path),\n-                            desc,\n-                            parent,\n-                            parent_idx: None,\n-                            search_type: get_function_type_for_search(\n-                                &item,\n-                                self.tcx,\n-                                clean_impl_generics(self.cache.parent_stack.last()).as_ref(),\n-                                self.cache,\n-                            ),\n-                            aliases: item.attrs.get_doc_aliases(),\n-                        });\n+                        let ty = item.type_();\n+                        let name = s.to_string();\n+                        if ty != ItemType::StructField || u16::from_str_radix(&name, 10).is_err() {\n+                            // In case this is a field from a tuple struct, we don't add it into\n+                            // the search index because its name is something like \"0\", which is\n+                            // not useful for rustdoc search.\n+                            self.cache.search_index.push(IndexItem {\n+                                ty,\n+                                name,\n+                                path: join_with_double_colon(path),\n+                                desc,\n+                                parent,\n+                                parent_idx: None,\n+                                search_type: get_function_type_for_search(\n+                                    &item,\n+                                    self.tcx,\n+                                    clean_impl_generics(self.cache.parent_stack.last()).as_ref(),\n+                                    self.cache,\n+                                ),\n+                                aliases: item.attrs.get_doc_aliases(),\n+                            });\n+                        }\n                     }\n                 }\n                 (Some(parent), None) if is_inherent_impl_item => {"}]}