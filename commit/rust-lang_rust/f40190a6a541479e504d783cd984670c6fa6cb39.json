{"sha": "f40190a6a541479e504d783cd984670c6fa6cb39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDE5MGE2YTU0MTQ3OWU1MDRkNzgzY2Q5ODQ2NzBjNmZhNmNiMzk=", "commit": {"author": {"name": "David Laban", "email": "alsuren@gmail.com", "date": "2019-08-05T14:26:08Z"}, "committer": {"name": "David Laban", "email": "alsuren@gmail.com", "date": "2019-08-05T14:26:08Z"}, "message": "test drop order for parameters when a future is dropped part-way through execution", "tree": {"sha": "660ef12137bd5b845c2529d1cdbbfc07374e4389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660ef12137bd5b845c2529d1cdbbfc07374e4389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f40190a6a541479e504d783cd984670c6fa6cb39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f40190a6a541479e504d783cd984670c6fa6cb39", "html_url": "https://github.com/rust-lang/rust/commit/f40190a6a541479e504d783cd984670c6fa6cb39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f40190a6a541479e504d783cd984670c6fa6cb39/comments", "author": {"login": "alsuren", "id": 254647, "node_id": "MDQ6VXNlcjI1NDY0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/254647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alsuren", "html_url": "https://github.com/alsuren", "followers_url": "https://api.github.com/users/alsuren/followers", "following_url": "https://api.github.com/users/alsuren/following{/other_user}", "gists_url": "https://api.github.com/users/alsuren/gists{/gist_id}", "starred_url": "https://api.github.com/users/alsuren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alsuren/subscriptions", "organizations_url": "https://api.github.com/users/alsuren/orgs", "repos_url": "https://api.github.com/users/alsuren/repos", "events_url": "https://api.github.com/users/alsuren/events{/privacy}", "received_events_url": "https://api.github.com/users/alsuren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alsuren", "id": 254647, "node_id": "MDQ6VXNlcjI1NDY0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/254647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alsuren", "html_url": "https://github.com/alsuren", "followers_url": "https://api.github.com/users/alsuren/followers", "following_url": "https://api.github.com/users/alsuren/following{/other_user}", "gists_url": "https://api.github.com/users/alsuren/gists{/gist_id}", "starred_url": "https://api.github.com/users/alsuren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alsuren/subscriptions", "organizations_url": "https://api.github.com/users/alsuren/orgs", "repos_url": "https://api.github.com/users/alsuren/repos", "events_url": "https://api.github.com/users/alsuren/events{/privacy}", "received_events_url": "https://api.github.com/users/alsuren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a1bdd4a53c239ac412bc7031b8b6056fe80674a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1bdd4a53c239ac412bc7031b8b6056fe80674a", "html_url": "https://github.com/rust-lang/rust/commit/0a1bdd4a53c239ac412bc7031b8b6056fe80674a"}], "stats": {"total": 307, "additions": 307, "deletions": 0}, "files": [{"sha": "21600cfc139b2091bddc00cef0b28d8366d731d9", "filename": "src/test/ui/async-await/drop-order/drop-order-when-cancelled.rs", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/rust-lang/rust/blob/f40190a6a541479e504d783cd984670c6fa6cb39/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40190a6a541479e504d783cd984670c6fa6cb39/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs?ref=f40190a6a541479e504d783cd984670c6fa6cb39", "patch": "@@ -0,0 +1,307 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![feature(async_await)]\n+\n+// Test that the drop order for parameters in a fn and async fn matches up. Also test that\n+// parameters (used or unused) are not dropped until the async fn is cancelled.\n+// This file is mostly copy-pasted from drop-order-for-async-fn-parameters.rs\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::pin::Pin;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+struct NeverReady;\n+\n+impl Future for NeverReady {\n+    type Output = ();\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        Poll::Pending\n+    }\n+}\n+\n+/// Check that unused bindings are dropped after the function is polled.\n+async fn foo_async(x: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn foo_sync(x: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns are dropped after the function is polled.\n+async fn bar_async(x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn bar_sync(x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns within more complex patterns are dropped after the function\n+/// is polled.\n+async fn baz_async((x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn baz_sync((x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore and unused bindings within and outwith more complex patterns are dropped\n+/// after the function is polled.\n+async fn foobar_async(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+    NeverReady.await;\n+}\n+\n+fn foobar_sync(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    /// Check that unused bindings are dropped after the method is polled.\n+    async fn foo_async(x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foo_sync(x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method is polled.\n+    async fn bar_async(x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn bar_sync(x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// is polled.\n+    async fn baz_async((x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn baz_sync((x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method is polled.\n+    async fn foobar_async(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foobar_sync(x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+struct Bar<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> Bar<'a> {\n+    /// Check that unused bindings are dropped after the method with self is polled.\n+    async fn foo_async(&'a self, x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foo_sync(&'a self, x: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method with self is polled.\n+    async fn bar_async(&'a self, x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn bar_sync(&'a self, x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// with self is polled.\n+    async fn baz_async(&'a self, (x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn baz_sync(&'a self, (x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method with self is polled.\n+    async fn foobar_async(&'a self, x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+        NeverReady.await;\n+    }\n+\n+    fn foobar_sync(&'a self, x: D, (a, _, _c): (D, D, D), _: D, _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+fn assert_drop_order_after_cancel<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+\n+    // Parameters are never dropped until the future completes.\n+    assert_eq!(*actual_order.borrow(), vec![DropOrder::Function]);\n+    \n+    drop(fut);\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    // Free functions (see doc comment on function for what it tests).\n+    assert_drop_order_after_cancel(\n+        |l| foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+        |l| foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+        |l| bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+        |l| baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| {\n+            foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods w/out self (see doc comment on function for what it tests).\n+    assert_drop_order_after_cancel(\n+        |l| Foo::foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+        |l| Foo::foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| Foo::bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+        |l| Foo::bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| Foo::baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+        |l| Foo::baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| {\n+            Foo::foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            Foo::foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods (see doc comment on function for what it tests).\n+    let b = Bar(Default::default());\n+    assert_drop_order_after_cancel(\n+        |l| b.foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+        |l| b.foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| b.bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+        |l| b.bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| b.baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+        |l| b.baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+    );\n+    assert_drop_order_after_cancel(\n+        |l| {\n+            b.foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            b.foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+}"}]}