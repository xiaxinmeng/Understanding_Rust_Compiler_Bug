{"sha": "1808e4da68bd94393c03229550b166cafebf38e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDhlNGRhNjhiZDk0MzkzYzAzMjI5NTUwYjE2NmNhZmViZjM4ZTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-19T19:24:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-19T19:24:06Z"}, "message": "review comments", "tree": {"sha": "239331fb671dd0a1cc38f99ec1b3f589f0f6e201", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239331fb671dd0a1cc38f99ec1b3f589f0f6e201"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1808e4da68bd94393c03229550b166cafebf38e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1808e4da68bd94393c03229550b166cafebf38e8", "html_url": "https://github.com/rust-lang/rust/commit/1808e4da68bd94393c03229550b166cafebf38e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1808e4da68bd94393c03229550b166cafebf38e8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ee54c42504267cbbce6ec8ab8fc408161a0bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ee54c42504267cbbce6ec8ab8fc408161a0bc3", "html_url": "https://github.com/rust-lang/rust/commit/94ee54c42504267cbbce6ec8ab8fc408161a0bc3"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "d1f541afbe9d3a5fb299809868c21428472238e4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1808e4da68bd94393c03229550b166cafebf38e8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1808e4da68bd94393c03229550b166cafebf38e8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1808e4da68bd94393c03229550b166cafebf38e8", "patch": "@@ -1033,13 +1033,14 @@ impl<'a> LoweringContext<'a> {\n     /// ```\n     ///\n     /// returns a `hir::TypeBinding` representing `Item`.\n-    fn lower_assoc_ty_constraint(&mut self,\n-                                 c: &AssocTyConstraint,\n-                                 itctx: ImplTraitContext<'_>)\n-                                 -> hir::TypeBinding {\n-        debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", c, itctx);\n+    fn lower_assoc_ty_constraint(\n+        &mut self,\n+        constraint: &AssocTyConstraint,\n+        itctx: ImplTraitContext<'_>,\n+    ) -> hir::TypeBinding {\n+        debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n \n-        let kind = match c.kind {\n+        let kind = match constraint.kind {\n             AssocTyConstraintKind::Equality { ref ty } => hir::TypeBindingKind::Equality {\n                 ty: self.lower_ty(ty, itctx)\n             },\n@@ -1094,15 +1095,15 @@ impl<'a> LoweringContext<'a> {\n                         impl_trait_node_id,\n                         DefPathData::ImplTrait,\n                         ExpnId::root(),\n-                        c.span,\n+                        constraint.span,\n                     );\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let ty = this.lower_ty(\n                             &Ty {\n                                 id: this.sess.next_node_id(),\n                                 node: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: c.span,\n+                                span: constraint.span,\n                             },\n                             itctx,\n                         );\n@@ -1124,10 +1125,10 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         hir::TypeBinding {\n-            hir_id: self.lower_node_id(c.id),\n-            ident: c.ident,\n+            hir_id: self.lower_node_id(constraint.id),\n+            ident: constraint.ident,\n             kind,\n-            span: c.span,\n+            span: constraint.span,\n         }\n     }\n "}, {"sha": "c1de4939c1d9154a567b4ea8c12342968f8d28b8", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1808e4da68bd94393c03229550b166cafebf38e8/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1808e4da68bd94393c03229550b166cafebf38e8/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=1808e4da68bd94393c03229550b166cafebf38e8", "patch": "@@ -427,8 +427,8 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             ty::Predicate::WellFormed(ty) => {\n                 match ty::wf::obligations(\n                     self.selcx.infcx(),\n-                                          obligation.param_env,\n-                                          obligation.cause.body_id,\n+                    obligation.param_env,\n+                    obligation.cause.body_id,\n                     ty,\n                     obligation.cause.span,\n                 ) {"}, {"sha": "65b58b70e9259cba949aecd048441e6fe4f34d58", "filename": "src/test/ui/associated-item/associated-item-type-issue-63594.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94ee54c42504267cbbce6ec8ab8fc408161a0bc3/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-type-issue-63594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ee54c42504267cbbce6ec8ab8fc408161a0bc3/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-type-issue-63594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-type-issue-63594.rs?ref=94ee54c42504267cbbce6ec8ab8fc408161a0bc3", "patch": "@@ -1,22 +0,0 @@\n-#![feature(associated_type_bounds)]\n-\n-fn main() {}\n-\n-trait Bar { type Assoc; }\n-\n-trait Thing {\n-    type Out;\n-    fn func() -> Self::Out;\n-}\n-\n-struct AssocNoCopy;\n-impl Bar for AssocNoCopy { type Assoc = String; }\n-\n-impl Thing for AssocNoCopy {\n-    type Out = Box<dyn Bar<Assoc: Copy>>;\n-    //~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-\n-    fn func() -> Self::Out {\n-        Box::new(AssocNoCopy)\n-    }\n-}"}, {"sha": "a58cec53421427b972603994a504677f27b8e752", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1808e4da68bd94393c03229550b166cafebf38e8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1808e4da68bd94393c03229550b166cafebf38e8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=1808e4da68bd94393c03229550b166cafebf38e8", "patch": "@@ -0,0 +1,32 @@\n+// This test documents that `type Out = Box<dyn Bar<Assoc: Copy>>;`\n+// is allowed and will correctly reject an opaque `type Out` which\n+// does not satisfy the bound `<TheType as Bar>::Assoc: Copy`.\n+//\n+// FIXME(rust-lang/lang): I think this behavior is logical if we want to allow\n+// `dyn Trait<Assoc: Bound>` but we should decide if we want that. // Centril\n+//\n+// Additionally, as reported in https://github.com/rust-lang/rust/issues/63594,\n+// we check that the spans for the error message are sane here.\n+\n+#![feature(associated_type_bounds)]\n+\n+fn main() {}\n+\n+trait Bar { type Assoc; }\n+\n+trait Thing {\n+    type Out;\n+    fn func() -> Self::Out;\n+}\n+\n+struct AssocNoCopy;\n+impl Bar for AssocNoCopy { type Assoc = String; }\n+\n+impl Thing for AssocNoCopy {\n+    type Out = Box<dyn Bar<Assoc: Copy>>;\n+    //~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied\n+\n+    fn func() -> Self::Out {\n+        Box::new(AssocNoCopy)\n+    }\n+}"}, {"sha": "b6b49c2e903508d75e01d7def22695f2975e15ad", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1808e4da68bd94393c03229550b166cafebf38e8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1808e4da68bd94393c03229550b166cafebf38e8/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=1808e4da68bd94393c03229550b166cafebf38e8", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/associated-item-type-issue-63594.rs:16:28\n+  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:26:28\n    |\n LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n    |                            ^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`", "previous_filename": "src/test/ui/associated-item/associated-item-type-issue-63594.stderr"}]}