{"sha": "e1091fd412eb5acb2ec5cc945741e0a9c04a0165", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDkxZmQ0MTJlYjVhY2IyZWM1Y2M5NDU3NDFlMGE5YzA0YTAxNjU=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-23T15:51:46Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-11-24T10:08:41Z"}, "message": "std::libc: Simplify win32/win64 type definitions", "tree": {"sha": "0b14cdcc33010ddcac1f6c0faa6127c807b3b77e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b14cdcc33010ddcac1f6c0faa6127c807b3b77e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1091fd412eb5acb2ec5cc945741e0a9c04a0165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1091fd412eb5acb2ec5cc945741e0a9c04a0165", "html_url": "https://github.com/rust-lang/rust/commit/e1091fd412eb5acb2ec5cc945741e0a9c04a0165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1091fd412eb5acb2ec5cc945741e0a9c04a0165/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d990c3aafed9bedd0a3619db13effa891b2c068", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d990c3aafed9bedd0a3619db13effa891b2c068", "html_url": "https://github.com/rust-lang/rust/commit/8d990c3aafed9bedd0a3619db13effa891b2c068"}], "stats": {"total": 194, "additions": 30, "deletions": 164}, "files": [{"sha": "556009c2838967614406b40528aa7db3f50cb253", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 30, "deletions": 164, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/e1091fd412eb5acb2ec5cc945741e0a9c04a0165/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1091fd412eb5acb2ec5cc945741e0a9c04a0165/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=e1091fd412eb5acb2ec5cc945741e0a9c04a0165", "patch": "@@ -663,7 +663,6 @@ pub mod types {\n             }\n         }\n \n-        #[cfg(target_arch = \"x86\")]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -677,27 +676,53 @@ pub mod types {\n                 pub type c_ulong = u32;\n                 pub type c_float = f32;\n                 pub type c_double = f64;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type size_t = u32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type size_t = u64;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type ptrdiff_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type ptrdiff_t = i64;\n+\n                 pub type clock_t = i32;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type time_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type time_t = i64;\n+\n                 pub type wchar_t = u16;\n             }\n+\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n                 pub type intptr_t = int;\n                 pub type uintptr_t = uint;\n             }\n+\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u32;\n                 pub type ino_t = i16;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type pid_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type pid_t = i64;\n+\n                 pub type useconds_t = u32;\n                 pub type mode_t = u16;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type ssize_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type ssize_t = i64;\n             }\n+\n             pub mod posix01 {\n             }\n             pub mod posix08 {\n@@ -725,7 +750,11 @@ pub mod types {\n \n                 pub type LONG = c_long;\n                 pub type PLONG = *mut c_long;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type LONG_PTR = c_long;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type LONG_PTR = i64;\n \n                 pub type LARGE_INTEGER = c_longlong;\n                 pub type PLARGE_INTEGER = *mut c_longlong;\n@@ -843,169 +872,6 @@ pub mod types {\n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n             }\n         }\n-\n-        #[cfg(target_arch = \"x86_64\")]\n-        pub mod arch {\n-            pub mod c95 {\n-                pub type c_char = i8;\n-                pub type c_schar = i8;\n-                pub type c_uchar = u8;\n-                pub type c_short = i16;\n-                pub type c_ushort = u16;\n-                pub type c_int = i32;\n-                pub type c_uint = u32;\n-                pub type c_long = i32;\n-                pub type c_ulong = u32;\n-                pub type c_float = f32;\n-                pub type c_double = f64;\n-                pub type size_t = u64;\n-                pub type ptrdiff_t = i64;\n-                pub type clock_t = i32;\n-                pub type time_t = i64;\n-                pub type wchar_t = u16;\n-            }\n-            pub mod c99 {\n-                pub type c_longlong = i64;\n-                pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n-            }\n-            pub mod posix88 {\n-                pub type off_t = i32; // XXX unless _FILE_OFFSET_BITS == 64\n-                pub type dev_t = u32;\n-                pub type ino_t = i16;\n-                pub type pid_t = i64;\n-                pub type useconds_t = u32;\n-                pub type mode_t = u16;\n-                pub type ssize_t = i64;\n-            }\n-            pub mod posix01 {\n-            }\n-            pub mod posix08 {\n-            }\n-            pub mod bsd44 {\n-            }\n-            pub mod extra {\n-                use ptr;\n-                use libc::types::common::c95::c_void;\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n-                use libc::types::os::arch::c95::{c_ulong};\n-                use libc::types::os::arch::c95::{wchar_t};\n-                use libc::types::os::arch::c99::{c_ulonglong};\n-\n-                pub type BOOL = c_int;\n-                pub type BYTE = u8;\n-                pub type CCHAR = c_char;\n-                pub type CHAR = c_char;\n-\n-                pub type DWORD = c_ulong;\n-                pub type DWORDLONG = c_ulonglong;\n-\n-                pub type HANDLE = LPVOID;\n-                pub type HMODULE = c_uint;\n-\n-                pub type LONG_PTR = i64; // changed\n-\n-                pub type LPCWSTR = *WCHAR;\n-                pub type LPCSTR = *CHAR;\n-\n-                pub type LPWSTR = *mut WCHAR;\n-                pub type LPSTR = *mut CHAR;\n-\n-                // Not really, but opaque to us.\n-                pub type LPSECURITY_ATTRIBUTES = LPVOID;\n-\n-                pub type LPVOID = *mut c_void;\n-                pub type LPCVOID = *c_void;\n-                pub type LPBYTE = *mut BYTE;\n-                pub type LPWORD = *mut WORD;\n-                pub type LPDWORD = *mut DWORD;\n-                pub type LPHANDLE = *mut HANDLE;\n-\n-                pub type LRESULT = LONG_PTR;\n-                pub type PBOOL = *mut BOOL;\n-                pub type WCHAR = wchar_t;\n-                pub type WORD = u16;\n-                pub type SIZE_T = size_t;\n-\n-                pub type time64_t = i64;\n-                pub type int64 = i64;\n-\n-                pub struct STARTUPINFO {\n-                    cb: DWORD,\n-                    lpReserved: LPWSTR,\n-                    lpDesktop: LPWSTR,\n-                    lpTitle: LPWSTR,\n-                    dwX: DWORD,\n-                    dwY: DWORD,\n-                    dwXSize: DWORD,\n-                    dwYSize: DWORD,\n-                    dwXCountChars: DWORD,\n-                    dwYCountCharts: DWORD,\n-                    dwFillAttribute: DWORD,\n-                    dwFlags: DWORD,\n-                    wShowWindow: WORD,\n-                    cbReserved2: WORD,\n-                    lpReserved2: LPBYTE,\n-                    hStdInput: HANDLE,\n-                    hStdOutput: HANDLE,\n-                    hStdError: HANDLE\n-                }\n-                pub type LPSTARTUPINFO = *mut STARTUPINFO;\n-\n-                pub struct PROCESS_INFORMATION {\n-                    hProcess: HANDLE,\n-                    hThread: HANDLE,\n-                    dwProcessId: DWORD,\n-                    dwThreadId: DWORD\n-                }\n-                pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n-\n-                pub struct SYSTEM_INFO {\n-                    wProcessorArchitecture: WORD,\n-                    wReserved: WORD,\n-                    dwPageSize: DWORD,\n-                    lpMinimumApplicationAddress: LPVOID,\n-                    lpMaximumApplicationAddress: LPVOID,\n-                    dwActiveProcessorMask: DWORD,\n-                    dwNumberOfProcessors: DWORD,\n-                    dwProcessorType: DWORD,\n-                    dwAllocationGranularity: DWORD,\n-                    wProcessorLevel: WORD,\n-                    wProcessorRevision: WORD\n-                }\n-                pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n-\n-                impl SYSTEM_INFO {\n-                    pub fn new() -> SYSTEM_INFO {\n-                        SYSTEM_INFO {\n-                            wProcessorArchitecture: 0,\n-                            wReserved: 0,\n-                            dwPageSize: 0,\n-                            lpMinimumApplicationAddress: ptr::mut_null(),\n-                            lpMaximumApplicationAddress: ptr::mut_null(),\n-                            dwActiveProcessorMask: 0,\n-                            dwNumberOfProcessors: 0,\n-                            dwProcessorType: 0,\n-                            dwAllocationGranularity: 0,\n-                            wProcessorLevel: 0,\n-                            wProcessorRevision: 0\n-                        }\n-                    }\n-                }\n-\n-                pub struct MEMORY_BASIC_INFORMATION {\n-                    BaseAddress: LPVOID,\n-                    AllocationBase: LPVOID,\n-                    AllocationProtect: DWORD,\n-                    RegionSize: SIZE_T,\n-                    State: DWORD,\n-                    Protect: DWORD,\n-                    Type: DWORD\n-                }\n-                pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n-            }\n-        }\n     }\n \n     #[cfg(target_os = \"macos\")]"}]}