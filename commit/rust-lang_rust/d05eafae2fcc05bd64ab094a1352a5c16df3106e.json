{"sha": "d05eafae2fcc05bd64ab094a1352a5c16df3106e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNWVhZmFlMmZjYzA1YmQ2NGFiMDk0YTEzNTJhNWMxNmRmMzEwNmU=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-30T17:23:50Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-07-08T21:53:37Z"}, "message": "Move the `PartialEq` and `Eq` impls for arrays to a separate file", "tree": {"sha": "01215eb3b0f2d0f390b597b3b8bf2cc81ae59257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01215eb3b0f2d0f390b597b3b8bf2cc81ae59257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d05eafae2fcc05bd64ab094a1352a5c16df3106e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d05eafae2fcc05bd64ab094a1352a5c16df3106e", "html_url": "https://github.com/rust-lang/rust/commit/d05eafae2fcc05bd64ab094a1352a5c16df3106e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d05eafae2fcc05bd64ab094a1352a5c16df3106e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "html_url": "https://github.com/rust-lang/rust/commit/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd"}], "stats": {"total": 224, "additions": 112, "deletions": 112}, "files": [{"sha": "dcd78e7a245d45f39302f8bc12438457f5c44908", "filename": "library/core/src/array/equality.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/d05eafae2fcc05bd64ab094a1352a5c16df3106e/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05eafae2fcc05bd64ab094a1352a5c16df3106e/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fequality.rs?ref=d05eafae2fcc05bd64ab094a1352a5c16df3106e", "patch": "@@ -0,0 +1,111 @@\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<A, B, const N: usize> PartialEq<[B; N]> for [A; N]\n+where\n+    A: PartialEq<B>,\n+{\n+    #[inline]\n+    fn eq(&self, other: &[B; N]) -> bool {\n+        self[..] == other[..]\n+    }\n+    #[inline]\n+    fn ne(&self, other: &[B; N]) -> bool {\n+        self[..] != other[..]\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<A, B, const N: usize> PartialEq<[B]> for [A; N]\n+where\n+    A: PartialEq<B>,\n+{\n+    #[inline]\n+    fn eq(&self, other: &[B]) -> bool {\n+        self[..] == other[..]\n+    }\n+    #[inline]\n+    fn ne(&self, other: &[B]) -> bool {\n+        self[..] != other[..]\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<A, B, const N: usize> PartialEq<[A; N]> for [B]\n+where\n+    B: PartialEq<A>,\n+{\n+    #[inline]\n+    fn eq(&self, other: &[A; N]) -> bool {\n+        self[..] == other[..]\n+    }\n+    #[inline]\n+    fn ne(&self, other: &[A; N]) -> bool {\n+        self[..] != other[..]\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<A, B, const N: usize> PartialEq<&[B]> for [A; N]\n+where\n+    A: PartialEq<B>,\n+{\n+    #[inline]\n+    fn eq(&self, other: &&[B]) -> bool {\n+        self[..] == other[..]\n+    }\n+    #[inline]\n+    fn ne(&self, other: &&[B]) -> bool {\n+        self[..] != other[..]\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<A, B, const N: usize> PartialEq<[A; N]> for &[B]\n+where\n+    B: PartialEq<A>,\n+{\n+    #[inline]\n+    fn eq(&self, other: &[A; N]) -> bool {\n+        self[..] == other[..]\n+    }\n+    #[inline]\n+    fn ne(&self, other: &[A; N]) -> bool {\n+        self[..] != other[..]\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<A, B, const N: usize> PartialEq<&mut [B]> for [A; N]\n+where\n+    A: PartialEq<B>,\n+{\n+    #[inline]\n+    fn eq(&self, other: &&mut [B]) -> bool {\n+        self[..] == other[..]\n+    }\n+    #[inline]\n+    fn ne(&self, other: &&mut [B]) -> bool {\n+        self[..] != other[..]\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<A, B, const N: usize> PartialEq<[A; N]> for &mut [B]\n+where\n+    B: PartialEq<A>,\n+{\n+    #[inline]\n+    fn eq(&self, other: &[A; N]) -> bool {\n+        self[..] == other[..]\n+    }\n+    #[inline]\n+    fn ne(&self, other: &[A; N]) -> bool {\n+        self[..] != other[..]\n+    }\n+}\n+\n+// NOTE: some less important impls are omitted to reduce code bloat\n+// __impl_slice_eq2! { [A; $N], &'b [B; $N] }\n+// __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: Eq, const N: usize> Eq for [T; N] {}"}, {"sha": "32d344010aafd3dea55d6f85f06144e0df384cc6", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 112, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d05eafae2fcc05bd64ab094a1352a5c16df3106e/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05eafae2fcc05bd64ab094a1352a5c16df3106e/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=d05eafae2fcc05bd64ab094a1352a5c16df3106e", "patch": "@@ -14,6 +14,7 @@ use crate::mem::{self, MaybeUninit};\n use crate::ops::{Index, IndexMut};\n use crate::slice::{Iter, IterMut};\n \n+mod equality;\n mod iter;\n \n #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n@@ -230,118 +231,6 @@ where\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, const N: usize> PartialEq<[B; N]> for [A; N]\n-where\n-    A: PartialEq<B>,\n-{\n-    #[inline]\n-    fn eq(&self, other: &[B; N]) -> bool {\n-        self[..] == other[..]\n-    }\n-    #[inline]\n-    fn ne(&self, other: &[B; N]) -> bool {\n-        self[..] != other[..]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, const N: usize> PartialEq<[B]> for [A; N]\n-where\n-    A: PartialEq<B>,\n-{\n-    #[inline]\n-    fn eq(&self, other: &[B]) -> bool {\n-        self[..] == other[..]\n-    }\n-    #[inline]\n-    fn ne(&self, other: &[B]) -> bool {\n-        self[..] != other[..]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, const N: usize> PartialEq<[A; N]> for [B]\n-where\n-    B: PartialEq<A>,\n-{\n-    #[inline]\n-    fn eq(&self, other: &[A; N]) -> bool {\n-        self[..] == other[..]\n-    }\n-    #[inline]\n-    fn ne(&self, other: &[A; N]) -> bool {\n-        self[..] != other[..]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, const N: usize> PartialEq<&[B]> for [A; N]\n-where\n-    A: PartialEq<B>,\n-{\n-    #[inline]\n-    fn eq(&self, other: &&[B]) -> bool {\n-        self[..] == other[..]\n-    }\n-    #[inline]\n-    fn ne(&self, other: &&[B]) -> bool {\n-        self[..] != other[..]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, const N: usize> PartialEq<[A; N]> for &[B]\n-where\n-    B: PartialEq<A>,\n-{\n-    #[inline]\n-    fn eq(&self, other: &[A; N]) -> bool {\n-        self[..] == other[..]\n-    }\n-    #[inline]\n-    fn ne(&self, other: &[A; N]) -> bool {\n-        self[..] != other[..]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, const N: usize> PartialEq<&mut [B]> for [A; N]\n-where\n-    A: PartialEq<B>,\n-{\n-    #[inline]\n-    fn eq(&self, other: &&mut [B]) -> bool {\n-        self[..] == other[..]\n-    }\n-    #[inline]\n-    fn ne(&self, other: &&mut [B]) -> bool {\n-        self[..] != other[..]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, const N: usize> PartialEq<[A; N]> for &mut [B]\n-where\n-    B: PartialEq<A>,\n-{\n-    #[inline]\n-    fn eq(&self, other: &[A; N]) -> bool {\n-        self[..] == other[..]\n-    }\n-    #[inline]\n-    fn ne(&self, other: &[A; N]) -> bool {\n-        self[..] != other[..]\n-    }\n-}\n-\n-// NOTE: some less important impls are omitted to reduce code bloat\n-// __impl_slice_eq2! { [A; $N], &'b [B; $N] }\n-// __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Eq, const N: usize> Eq for [T; N] {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd, const N: usize> PartialOrd for [T; N] {\n     #[inline]"}]}