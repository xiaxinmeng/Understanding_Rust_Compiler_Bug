{"sha": "f621193e5ea7ac54fcd37f0e730e955fd9f61200", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MjExOTNlNWVhN2FjNTRmY2QzN2YwZTczMGU5NTVmZDlmNjEyMDA=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-23T20:57:44Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-03-24T00:25:59Z"}, "message": "Accept 0 as a valid str char boundary\n\nIndex 0 must be a valid char boundary (invariant of str that it contains\nvalid UTF-8 data).\n\nIf we check explicitly for index == 0, that removes the need to read the\nbyte at index 0, so it avoids a trip to the string's memory, and it\noptimizes out the slicing index' bounds check whenever it is zero.\n\nWith this change, the following examples all change from having a read of\nthe byte at 0 and a branch to possibly panicing, to having the bounds\nchecking optimized away.\n\n```rust\npub fn split(s: &str) -> (&str, &str) {\n    s.split_at(0)\n}\n\npub fn both(s: &str) -> &str {\n    &s[0..s.len()]\n}\n\npub fn first(s: &str) -> &str {\n    &s[..0]\n}\n\npub fn last(s: &str) -> &str {\n    &s[0..]\n}\n```", "tree": {"sha": "09139c7dad6b0c26ff29c5ca25c439bd5a40ec32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09139c7dad6b0c26ff29c5ca25c439bd5a40ec32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f621193e5ea7ac54fcd37f0e730e955fd9f61200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f621193e5ea7ac54fcd37f0e730e955fd9f61200", "html_url": "https://github.com/rust-lang/rust/commit/f621193e5ea7ac54fcd37f0e730e955fd9f61200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f621193e5ea7ac54fcd37f0e730e955fd9f61200/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80e7a1be359fc0de4eb17056230ae2fc130b7090", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e7a1be359fc0de4eb17056230ae2fc130b7090", "html_url": "https://github.com/rust-lang/rust/commit/80e7a1be359fc0de4eb17056230ae2fc130b7090"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "f033f50e59e5c62925e466c0d354e0d97fe85512", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f621193e5ea7ac54fcd37f0e730e955fd9f61200/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f621193e5ea7ac54fcd37f0e730e955fd9f61200/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f621193e5ea7ac54fcd37f0e730e955fd9f61200", "patch": "@@ -1892,7 +1892,10 @@ impl StrExt for str {\n \n     #[inline]\n     fn is_char_boundary(&self, index: usize) -> bool {\n-        if index == self.len() { return true; }\n+        // 0 and len are always ok.\n+        // Test for 0 explicitly so that it can optimize out the check\n+        // easily and skip reading string data for that case.\n+        if index == 0 || index == self.len() { return true; }\n         match self.as_bytes().get(index) {\n             None => false,\n             Some(&b) => b < 128 || b >= 192,"}]}