{"sha": "d7d89712032e367b0eb8bafe9192403eef1ef4b2", "node_id": "C_kwDOAAsO6NoAKGQ3ZDg5NzEyMDMyZTM2N2IwZWI4YmFmZTkxOTI0MDNlZWYxZWY0YjI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-04T11:57:10Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-06T11:30:17Z"}, "message": "Remove `(..)`-style return type notation", "tree": {"sha": "6bfbf6454c26b46bd7fb68771e1a912b1c045a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bfbf6454c26b46bd7fb68771e1a912b1c045a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7d89712032e367b0eb8bafe9192403eef1ef4b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRWOm0ACgkQ4laYqTBY\nYXEBew//Wcms3RzvtBbtu+7KlGRV2vYqHKlWJU4fa6VubpSaNiuWcKPnU/i0K0cf\nOukpYl/Ou03DHs/io+dXMYI6Ju3lKjYdkp+ibFA62PVgfS+HEr8M8chQyr2s21Wd\nsxUdxODInmhxVgmiyqyvPrOSJ/Jpaa9OqV+XLBFcrI9Quw4BJ/8df61AXPFEdnBg\nv/ASebop3kY1vxpZ5izS3ZVN1vARY4XwsGoz2yCp4TaMfcd/8dkwJ6akDifDQdnl\nfHc1+UfNxHUzN2AL73V9CTU713HwpOjFQbctdZIEHSEgjslstAAxWbko+ZKSKX05\n/0Pd9oKs5BotCRhSbyNONQEln7Wh2MGX24Et+ZKpBHTFG48aZNH3YSBKZiu12XLw\nvL12kJqFcnyewjyZmkSPzCmVsswnD7kqGsPJGr9Fzhh/jwxmgN50tP3FmL09nUuh\nTF3vhZZo5kADT97cI/W3CgRaBmijHAzXL8pukOiZRCQEd/7MPDiXE5WXpzhxZCXE\nCVdTKAyqlN4L0BpjaP1G9keNzikGyAOZfTWbYmgQu31IDjlNVthWbb83iqkgC5kz\npGdW2XmhcrVylIl/UR/NEpfxz0IYcc+cv+HGuXMCGpbyq9W8IIMXSvEMJMdDcspI\nru924IfwBcntpH2D/9GNFJr+cIa5VwkveNvFiYdMCGOCCZSOJIg=\n=3Bqj\n-----END PGP SIGNATURE-----", "payload": "tree 6bfbf6454c26b46bd7fb68771e1a912b1c045a39\nparent a4966c92829f945d3846eb0ca0e240ac7f7c8c60\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1683201430 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1683372617 +0900\n\nRemove `(..)`-style return type notation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d89712032e367b0eb8bafe9192403eef1ef4b2", "html_url": "https://github.com/rust-lang/rust/commit/d7d89712032e367b0eb8bafe9192403eef1ef4b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7d89712032e367b0eb8bafe9192403eef1ef4b2/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4966c92829f945d3846eb0ca0e240ac7f7c8c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4966c92829f945d3846eb0ca0e240ac7f7c8c60", "html_url": "https://github.com/rust-lang/rust/commit/a4966c92829f945d3846eb0ca0e240ac7f7c8c60"}], "stats": {"total": 103, "additions": 2, "deletions": 101}, "files": [{"sha": "7e4b7ac34bfcd3ff5cf003ff5a4b5104474e3c64", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=d7d89712032e367b0eb8bafe9192403eef1ef4b2", "patch": "@@ -216,9 +216,6 @@ pub(super) fn lower_generic_args(\n                 let arg = ConstRefOrPath::from_expr_opt(arg.expr());\n                 args.push(GenericArg::Const(arg))\n             }\n-            ast::GenericArg::ReturnTypeArg(_) => {\n-                // FIXME: return type notation is experimental, we don't do anything with it yet.\n-            }\n         }\n     }\n "}, {"sha": "e583a4de71158fe0053e79d5225e16cf08e501ec", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=d7d89712032e367b0eb8bafe9192403eef1ef4b2", "patch": "@@ -76,7 +76,6 @@ fn generic_arg(p: &mut Parser<'_>) -> bool {\n                 }\n             }\n         }\n-        IDENT if p.nth(1) == T!['('] && p.nth_at(2, T![..]) => return_type_arg(p),\n         _ if p.at_ts(types::TYPE_FIRST) => type_arg(p),\n         _ => return false,\n     }\n@@ -140,20 +139,3 @@ fn type_arg(p: &mut Parser<'_>) {\n     types::type_(p);\n     m.complete(p, TYPE_ARG);\n }\n-\n-// test return_type_arg\n-// type T = S<foo(..): Send>;\n-pub(super) fn return_type_arg(p: &mut Parser<'_>) {\n-    let m = p.start();\n-    p.expect(IDENT);\n-    p.expect(T!['(']);\n-    p.expect(T![..]);\n-    p.expect(T![')']);\n-    if !p.at(T![:]) {\n-        p.error(\"expected :\");\n-        m.abandon(p);\n-        return;\n-    }\n-    generic_params::bounds(p);\n-    m.complete(p, RETURN_TYPE_ARG);\n-}"}, {"sha": "26d474f54f47f7f1b7b255394771ec45530e9619", "filename": "crates/parser/test_data/parser/inline/ok/0206_return_type_arg.rast", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a4966c92829f945d3846eb0ca0e240ac7f7c8c60/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a4966c92829f945d3846eb0ca0e240ac7f7c8c60/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast?ref=a4966c92829f945d3846eb0ca0e240ac7f7c8c60", "patch": "@@ -1,33 +0,0 @@\n-SOURCE_FILE\n-  TYPE_ALIAS\n-    TYPE_KW \"type\"\n-    WHITESPACE \" \"\n-    NAME\n-      IDENT \"T\"\n-    WHITESPACE \" \"\n-    EQ \"=\"\n-    WHITESPACE \" \"\n-    PATH_TYPE\n-      PATH\n-        PATH_SEGMENT\n-          NAME_REF\n-            IDENT \"S\"\n-          GENERIC_ARG_LIST\n-            L_ANGLE \"<\"\n-            RETURN_TYPE_ARG\n-              IDENT \"foo\"\n-              L_PAREN \"(\"\n-              DOT2 \"..\"\n-              R_PAREN \")\"\n-              COLON \":\"\n-              WHITESPACE \" \"\n-              TYPE_BOUND_LIST\n-                TYPE_BOUND\n-                  PATH_TYPE\n-                    PATH\n-                      PATH_SEGMENT\n-                        NAME_REF\n-                          IDENT \"Send\"\n-            R_ANGLE \">\"\n-    SEMICOLON \";\"\n-  WHITESPACE \"\\n\""}, {"sha": "2a9ff270839f8b2b5ac1a13c61df2efffb288954", "filename": "crates/parser/test_data/parser/inline/ok/0206_return_type_arg.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4966c92829f945d3846eb0ca0e240ac7f7c8c60/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4966c92829f945d3846eb0ca0e240ac7f7c8c60/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs?ref=a4966c92829f945d3846eb0ca0e240ac7f7c8c60", "patch": "@@ -1 +0,0 @@\n-type T = S<foo(..): Send>;"}, {"sha": "1c15a606f957854b0ce41af2f9d610671a27f973", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=d7d89712032e367b0eb8bafe9192403eef1ef4b2", "patch": "@@ -46,7 +46,6 @@ GenericArg =\n | AssocTypeArg\n | LifetimeArg\n | ConstArg\n-| ReturnTypeArg\n \n TypeArg =\n   Type\n@@ -60,9 +59,6 @@ LifetimeArg =\n ConstArg =\n   Expr\n \n-ReturnTypeArg =\n-  NameRef '(' '..' ')' ':' TypeBoundList\n-\n MacroCall =\n   Attr* Path '!' TokenTree ';'?\n "}, {"sha": "0e84aca5c7d9ab68b31b3e8e4e33831c8188b1a9", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d89712032e367b0eb8bafe9192403eef1ef4b2/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=d7d89712032e367b0eb8bafe9192403eef1ef4b2", "patch": "@@ -142,18 +142,6 @@ impl ConstArg {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ReturnTypeArg {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::HasTypeBounds for ReturnTypeArg {}\n-impl ReturnTypeArg {\n-    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n-    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1528,7 +1516,6 @@ pub enum GenericArg {\n     AssocTypeArg(AssocTypeArg),\n     LifetimeArg(LifetimeArg),\n     ConstArg(ConstArg),\n-    ReturnTypeArg(ReturnTypeArg),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1878,17 +1865,6 @@ impl AstNode for ConstArg {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ReturnTypeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_TYPE_ARG }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for TypeBoundList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3243,20 +3219,16 @@ impl From<LifetimeArg> for GenericArg {\n impl From<ConstArg> for GenericArg {\n     fn from(node: ConstArg) -> GenericArg { GenericArg::ConstArg(node) }\n }\n-impl From<ReturnTypeArg> for GenericArg {\n-    fn from(node: ReturnTypeArg) -> GenericArg { GenericArg::ReturnTypeArg(node) }\n-}\n impl AstNode for GenericArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        matches!(kind, TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG | RETURN_TYPE_ARG)\n+        matches!(kind, TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             TYPE_ARG => GenericArg::TypeArg(TypeArg { syntax }),\n             ASSOC_TYPE_ARG => GenericArg::AssocTypeArg(AssocTypeArg { syntax }),\n             LIFETIME_ARG => GenericArg::LifetimeArg(LifetimeArg { syntax }),\n             CONST_ARG => GenericArg::ConstArg(ConstArg { syntax }),\n-            RETURN_TYPE_ARG => GenericArg::ReturnTypeArg(ReturnTypeArg { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3267,7 +3239,6 @@ impl AstNode for GenericArg {\n             GenericArg::AssocTypeArg(it) => &it.syntax,\n             GenericArg::LifetimeArg(it) => &it.syntax,\n             GenericArg::ConstArg(it) => &it.syntax,\n-            GenericArg::ReturnTypeArg(it) => &it.syntax,\n         }\n     }\n }\n@@ -4199,13 +4170,7 @@ impl AstNode for AnyHasTypeBounds {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         matches!(\n             kind,\n-            ASSOC_TYPE_ARG\n-                | RETURN_TYPE_ARG\n-                | TRAIT\n-                | TYPE_ALIAS\n-                | LIFETIME_PARAM\n-                | TYPE_PARAM\n-                | WHERE_PRED\n+            ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4368,11 +4333,6 @@ impl std::fmt::Display for ConstArg {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ReturnTypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for TypeBoundList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}]}