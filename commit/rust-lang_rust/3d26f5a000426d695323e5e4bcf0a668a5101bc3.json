{"sha": "3d26f5a000426d695323e5e4bcf0a668a5101bc3", "node_id": "C_kwDOAAsO6NoAKDNkMjZmNWEwMDA0MjZkNjk1MzIzZTVlNGJjZjBhNjY4YTUxMDFiYzM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-08T16:45:49Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-10T08:09:50Z"}, "message": "eagerly check whether we replace any bound vars", "tree": {"sha": "67aa0d2b9feb695a5a77796e42607096bed67520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67aa0d2b9feb695a5a77796e42607096bed67520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d26f5a000426d695323e5e4bcf0a668a5101bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d26f5a000426d695323e5e4bcf0a668a5101bc3", "html_url": "https://github.com/rust-lang/rust/commit/3d26f5a000426d695323e5e4bcf0a668a5101bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d26f5a000426d695323e5e4bcf0a668a5101bc3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e61807c6bf1f99ca9dd0418ca7e862f0b364f0c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e61807c6bf1f99ca9dd0418ca7e862f0b364f0c6", "html_url": "https://github.com/rust-lang/rust/commit/e61807c6bf1f99ca9dd0418ca7e862f0b364f0c6"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "bb3b410b2bde3258203439f7b0fac269aa29dbf1", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3d26f5a000426d695323e5e4bcf0a668a5101bc3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d26f5a000426d695323e5e4bcf0a668a5101bc3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=3d26f5a000426d695323e5e4bcf0a668a5101bc3", "patch": "@@ -6,7 +6,6 @@ use super::{HigherRankedType, InferCtxt};\n use crate::infer::CombinedSnapshot;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Binder, TypeFoldable};\n-use std::cell::Cell;\n \n impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n     /// Checks whether `for<..> sub <: for<..> sup` holds.\n@@ -57,15 +56,17 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n \n             debug!(\"higher_ranked_sub: OK result={result:?}\");\n             // NOTE: returning the result here would be dangerous as it contains\n-            // placeholders which **must not** be named after wards.\n+            // placeholders which **must not** be named afterwards.\n             Ok(())\n         })\n     }\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Replaces all bound variables (lifetimes, types, and constants) bound by\n-    /// `binder` with placeholder variables.\n+    /// `binder` with placeholder variables in a new universe. This means that the\n+    /// new placeholders can only be named by inference variables created after\n+    /// this method has been called.\n     ///\n     /// This is the first step of checking subtyping when higher-ranked things are involved.\n     /// For more details visit the relevant sections of the [rustc dev guide].\n@@ -74,34 +75,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<'tcx> + Copy,\n     {\n-        // Figure out what the next universe will be, but don't actually create\n-        // it until after we've done the substitution (in particular there may\n-        // be no bound variables). This is a performance optimization, since the\n-        // leak check for example can be skipped if no new universes are created\n-        // (i.e., if there are no placeholders).\n-        let next_universe = self.universe().next_universe();\n+        if let Some(inner) = binder.no_bound_vars() {\n+            return inner;\n+        }\n+\n+        let next_universe = self.create_next_universe();\n \n-        let replaced_bound_var = Cell::new(false);\n         let fld_r = |br: ty::BoundRegion| {\n-            replaced_bound_var.set(true);\n             self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n                 universe: next_universe,\n                 name: br.kind,\n             }))\n         };\n \n         let fld_t = |bound_ty: ty::BoundTy| {\n-            replaced_bound_var.set(true);\n             self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                 universe: next_universe,\n                 name: bound_ty.var,\n             }))\n         };\n \n         let fld_c = |bound_var: ty::BoundVar, ty| {\n-            replaced_bound_var.set(true);\n             self.tcx.mk_const(ty::ConstS {\n                 val: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                     universe: next_universe,\n@@ -112,16 +108,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         let result = self.tcx.replace_bound_vars_uncached(binder, fld_r, fld_t, fld_c);\n-\n-        // If there were higher-ranked regions to replace, then actually create\n-        // the next universe (this avoids needlessly creating universes).\n-        if replaced_bound_var.get() {\n-            let n_u = self.create_next_universe();\n-            assert_eq!(n_u, next_universe);\n-        }\n-\n         debug!(?next_universe, ?result);\n-\n         result\n     }\n "}, {"sha": "30b75e9ae7562dbd7eb2af20e95ce7962f7b1a7f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d26f5a000426d695323e5e4bcf0a668a5101bc3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d26f5a000426d695323e5e4bcf0a668a5101bc3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=3d26f5a000426d695323e5e4bcf0a668a5101bc3", "patch": "@@ -1526,8 +1526,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         value: ty::Binder<'tcx, T>,\n     ) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<'tcx> + Copy,\n     {\n+        if let Some(inner) = value.no_bound_vars() {\n+            return inner;\n+        }\n+\n         let mut region_map = BTreeMap::new();\n         let fld_r = |br: ty::BoundRegion| {\n             *region_map"}, {"sha": "4061b7cae7c78348384d8050d226ef85162ecbb5", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d26f5a000426d695323e5e4bcf0a668a5101bc3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d26f5a000426d695323e5e4bcf0a668a5101bc3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=3d26f5a000426d695323e5e4bcf0a668a5101bc3", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n     fn replace_bound_vars_with_fresh_vars<T>(&self, value: ty::Binder<'tcx, T>) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<'tcx> + Copy,\n     {\n         self.fcx.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, value)\n     }"}]}