{"sha": "cad0cf6950fb73da4d137e005110d9921e6c04be", "node_id": "C_kwDOAAsO6NoAKGNhZDBjZjY5NTBmYjczZGE0ZDEzN2UwMDUxMTBkOTkyMWU2YzA0YmU", "commit": {"author": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-13T11:04:51Z"}, "committer": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-24T17:58:14Z"}, "message": "refactor helper function to work with function taking expression enum instead of break expression", "tree": {"sha": "0e011864bc4b7cd28c020201ddcbe119a2a985d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e011864bc4b7cd28c020201ddcbe119a2a985d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cad0cf6950fb73da4d137e005110d9921e6c04be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cad0cf6950fb73da4d137e005110d9921e6c04be", "html_url": "https://github.com/rust-lang/rust/commit/cad0cf6950fb73da4d137e005110d9921e6c04be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cad0cf6950fb73da4d137e005110d9921e6c04be/comments", "author": null, "committer": null, "parents": [{"sha": "1c074499f38df88d9e2fe86792e036c58bdebeee", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c074499f38df88d9e2fe86792e036c58bdebeee", "html_url": "https://github.com/rust-lang/rust/commit/1c074499f38df88d9e2fe86792e036c58bdebeee"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "2f82ac9755579692c7cb0fb8bb7c0cd96f3b0cb4", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cad0cf6950fb73da4d137e005110d9921e6c04be/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad0cf6950fb73da4d137e005110d9921e6c04be/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=cad0cf6950fb73da4d137e005110d9921e6c04be", "patch": "@@ -197,11 +197,14 @@ fn highlight_break_points(token: SyntaxToken) -> Option<Vec<HighlightedRange>> {\n             label.as_ref().map(|it| it.syntax().text_range()),\n         );\n         highlights.extend(range.map(|range| HighlightedRange { category: None, range }));\n-        for_each_break_expr(label, body, &mut |break_| {\n-            let range = cover_range(\n-                break_.break_token().map(|it| it.text_range()),\n-                break_.lifetime().map(|it| it.syntax().text_range()),\n-            );\n+        for_each_break_expr(label, body, &mut |expr| {\n+            let range: Option<TextRange> = match expr {\n+                ast::Expr::BreakExpr(break_) => cover_range(\n+                    break_.break_token().map(|it| it.text_range()),\n+                    break_.lifetime().map(|it| it.syntax().text_range()),\n+                ),\n+                _ => None,\n+            };\n             highlights.extend(range.map(|range| HighlightedRange { category: None, range }));\n         });\n         Some(highlights)"}, {"sha": "0fb6ca27b262f601dc2e327eb8b8a655bf4c5fce", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cad0cf6950fb73da4d137e005110d9921e6c04be/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad0cf6950fb73da4d137e005110d9921e6c04be/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=cad0cf6950fb73da4d137e005110d9921e6c04be", "patch": "@@ -121,7 +121,7 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n \n                 Some(ast::BlockModifier::Label(label)) => {\n                     for_each_break_expr(Some(label), b.stmt_list(), &mut |b| {\n-                        cb(&ast::Expr::BreakExpr(b))\n+                        cb(&b)\n                     });\n                 }\n                 Some(ast::BlockModifier::Unsafe(_)) => (),\n@@ -151,12 +151,14 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n         }\n         ast::Expr::LoopExpr(l) => {\n             for_each_break_expr(l.label(), l.loop_body().and_then(|it| it.stmt_list()), &mut |b| {\n-                cb(&ast::Expr::BreakExpr(b))\n+                cb(&b)\n             })\n         }\n         ast::Expr::MatchExpr(m) => {\n             if let Some(arms) = m.match_arm_list() {\n-                arms.arms().filter_map(|arm| arm.expr()).for_each(|e| for_each_tail_expr(&e, cb));\n+                arms.arms().filter_map(|arm| arm.expr()).for_each(|e| for_each_tail_expr(&e, &mut |b| {\n+                    cb(&b)\n+                }));\n             }\n         }\n         ast::Expr::ArrayExpr(_)\n@@ -194,7 +196,7 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n pub fn for_each_break_expr(\n     label: Option<ast::Label>,\n     body: Option<ast::StmtList>,\n-    cb: &mut dyn FnMut(ast::BreakExpr),\n+    cb: &mut dyn FnMut(ast::Expr),\n ) {\n     let label = label.and_then(|lbl| lbl.lifetime());\n     let mut depth = 0;\n@@ -217,7 +219,7 @@ pub fn for_each_break_expr(\n                     ast::Expr::BreakExpr(b)\n                         if (depth == 0 && b.lifetime().is_none()) || eq_label(b.lifetime()) =>\n                     {\n-                        cb(b);\n+                        cb(ast::Expr::BreakExpr(b));\n                     }\n                     _ => (),\n                 },"}]}