{"sha": "10470797a612af227fbbe39e829c4cc204fb482a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDcwNzk3YTYxMmFmMjI3ZmJiZTM5ZTgyOWM0Y2MyMDRmYjQ4MmE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T18:53:31Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in report_cannot_move_from_borrowed_content", "tree": {"sha": "4b45254f6e3bf795cc9036159aa36d6469ea1789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b45254f6e3bf795cc9036159aa36d6469ea1789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10470797a612af227fbbe39e829c4cc204fb482a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10470797a612af227fbbe39e829c4cc204fb482a", "html_url": "https://github.com/rust-lang/rust/commit/10470797a612af227fbbe39e829c4cc204fb482a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10470797a612af227fbbe39e829c4cc204fb482a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09014fc793fb0030f98af215d56350b07a8b4d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/09014fc793fb0030f98af215d56350b07a8b4d64", "html_url": "https://github.com/rust-lang/rust/commit/09014fc793fb0030f98af215d56350b07a8b4d64"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "156897aedb70acb18fda91793b98ec3f71362fba", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10470797a612af227fbbe39e829c4cc204fb482a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10470797a612af227fbbe39e829c4cc204fb482a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=10470797a612af227fbbe39e829c4cc204fb482a", "patch": "@@ -481,14 +481,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     pub(super) fn borrowed_content_source(\n         &self,\n-        deref_base: &Place<'tcx>,\n+        deref_base: PlaceRef<'cx, 'tcx>,\n     ) -> BorrowedContentSource<'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // Look up the provided place and work out the move path index for it,\n         // we'll use this to check whether it was originally from an overloaded\n         // operator.\n-        match self.move_data.rev_lookup.find(deref_base.as_place_ref()) {\n+        match self.move_data.rev_lookup.find(deref_base) {\n             LookupResult::Exact(mpi) | LookupResult::Parent(Some(mpi)) => {\n                 debug!(\"borrowed_content_source: mpi={:?}\", mpi);\n \n@@ -533,7 +533,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // If we didn't find an overloaded deref or index, then assume it's a\n         // built in deref and check the type of the base.\n-        let base_ty = deref_base.ty(self.body, tcx).ty;\n+        let base_ty = Place::ty_from(deref_base.base, deref_base.projection, self.body, tcx).ty;\n         if base_ty.is_unsafe_ptr() {\n             BorrowedContentSource::DerefRawPointer\n         } else if base_ty.is_mutable_pointer() {"}, {"sha": "38653dc0e5e9b79cf8596245ca84a1a2a35b3112", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10470797a612af227fbbe39e829c4cc204fb482a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10470797a612af227fbbe39e829c4cc204fb482a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=10470797a612af227fbbe39e829c4cc204fb482a", "patch": "@@ -312,18 +312,18 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             .find_map(|p| self.is_upvar_field_projection(p));\n \n         let deref_base = match deref_target_place.projection {\n-            Some(box Projection { ref base, elem: ProjectionElem::Deref }) => Place {\n-                base: deref_target_place.base.clone(),\n-                projection: base.clone(),\n+            Some(box Projection { ref base, elem: ProjectionElem::Deref }) => PlaceRef {\n+                base: &deref_target_place.base,\n+                projection: base,\n             },\n             _ => bug!(\"deref_target_place is not a deref projection\"),\n         };\n \n-        if let Place {\n+        if let PlaceRef {\n             base: PlaceBase::Local(local),\n             projection: None,\n         } = deref_base {\n-            let decl = &self.body.local_decls[local];\n+            let decl = &self.body.local_decls[*local];\n             if decl.is_ref_for_guard() {\n                 let mut err = self.cannot_move_out_of(\n                     span,\n@@ -391,7 +391,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 diag\n             }\n             _ => {\n-                let source = self.borrowed_content_source(&deref_base);\n+                let source = self.borrowed_content_source(deref_base);\n                 match (\n                     self.describe_place(move_place.as_place_ref()),\n                     source.describe_for_named_place(),"}, {"sha": "c424c06c41add30a8986b77cab091cbc4ca59082", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10470797a612af227fbbe39e829c4cc204fb482a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10470797a612af227fbbe39e829c4cc204fb482a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=10470797a612af227fbbe39e829c4cc204fb482a", "patch": "@@ -124,9 +124,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n                     reason = \", as it is immutable for the pattern guard\".to_string();\n                 } else {\n-                    let source = self.borrowed_content_source(&Place {\n-                        base: the_place_err.base.clone(),\n-                        projection: base.clone(),\n+                    let source = self.borrowed_content_source(PlaceRef {\n+                        base: the_place_err.base,\n+                        projection: base,\n                     });\n                     let pointer_type = source.describe_for_immutable_place();\n                     opt_source = Some(source);"}]}