{"sha": "1fd89b625be075e81da1791d6d22e9835512036c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZDg5YjYyNWJlMDc1ZTgxZGExNzkxZDZkMjJlOTgzNTUxMjAzNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-07T16:44:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-07T16:44:11Z"}, "message": "Auto merge of #24156 - Manishearth:rollup, r=Manishearth", "tree": {"sha": "9e1ed28a3f478a1259f2872ef4a37318f52a1b81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e1ed28a3f478a1259f2872ef4a37318f52a1b81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fd89b625be075e81da1791d6d22e9835512036c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd89b625be075e81da1791d6d22e9835512036c", "html_url": "https://github.com/rust-lang/rust/commit/1fd89b625be075e81da1791d6d22e9835512036c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fd89b625be075e81da1791d6d22e9835512036c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213", "url": "https://api.github.com/repos/rust-lang/rust/commits/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213", "html_url": "https://github.com/rust-lang/rust/commit/b41f2df4ca92e9ab816d9b6649c0fc5df9e9d213"}, {"sha": "ae64d8e41538fc760b20185e3f2d63826bc1bd34", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae64d8e41538fc760b20185e3f2d63826bc1bd34", "html_url": "https://github.com/rust-lang/rust/commit/ae64d8e41538fc760b20185e3f2d63826bc1bd34"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "890a2f8ae7de7d29b3dbd14bf867ca83f7c02563", "filename": "src/doc/trpl/benchmark-tests.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Fbenchmark-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Fbenchmark-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fbenchmark-tests.md?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -13,7 +13,7 @@ pub fn add_two(a: i32) -> i32 {\n }\n \n #[cfg(test)]\n-mod tests {\n+mod test {\n     use super::*;\n     use test::Bencher;\n "}, {"sha": "ae2a79bafecd52707417c980fb834700bd0c118d", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -1,7 +1,7 @@\n % Hello, Cargo!\n \n [Cargo](http://crates.io) is a tool that Rustaceans use to help manage their\n-Rust projects. Cargo is currently in an alpha state, just like Rust, and so it\n+Rust projects. Cargo is currently in a pre-1.0 state, just like Rust, and so it\n is still a work in progress. However, it is already good enough to use for many\n Rust projects, and so it is assumed that Rust projects will use Cargo from the\n beginning."}, {"sha": "8cf126cad95fbd7e4813c92e10bc52367c17b391", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -382,7 +382,7 @@ pub fn add_two(a: i32) -> i32 {\n }\n \n #[cfg(test)]\n-mod tests {\n+mod test {\n     use super::*;\n \n     #[test]"}, {"sha": "2986de4179b89cbb0aa817aaeda48c715a47620a", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -229,8 +229,6 @@ everything is fine:\n \n ```{rust}\n # #![feature(core)]\n-use shapes::HasArea;\n-\n mod shapes {\n     use std::f64::consts;\n \n@@ -251,6 +249,7 @@ mod shapes {\n     }\n }\n \n+use shapes::HasArea;\n \n fn main() {\n     let c = shapes::Circle {"}, {"sha": "687675f12ef64ff447432ac6302197892f703f0c", "filename": "src/libcore/any.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -83,11 +83,12 @@ use marker::{Reflect, Sized};\n // Any trait\n ///////////////////////////////////////////////////////////////////////////////\n \n-/// A type to emulate dynamic typing. See the [module-level documentation][mod] for more details.\n+/// A type to emulate dynamic typing.\n ///\n /// Every type with no non-`'static` references implements `Any`.\n+/// See the [module-level documentation][mod] for more details.\n ///\n-/// [mod]: ../index.html\n+/// [mod]: index.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Any: Reflect + 'static {\n     /// Get the `TypeId` of `self`"}, {"sha": "d6a7126a883f7fe738dd5fd1124bc7e6f859fce8", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -316,8 +316,49 @@ impl<A:?Sized,R:?Sized,T:?Sized> PhantomFn<A,R> for T { }\n ///\n /// # Examples\n ///\n-/// When handling external resources over a foreign function interface, `PhantomData<T>` can\n-/// prevent mismatches by enforcing types in the method implementations:\n+/// ## Unused lifetime parameter\n+///\n+/// Perhaps the most common time that `PhantomData` is required is\n+/// with a struct that has an unused lifetime parameter, typically as\n+/// part of some unsafe code. For example, here is a struct `Slice`\n+/// that has two pointers of type `*const T`, presumably pointing into\n+/// an array somewhere:\n+///\n+/// ```ignore\n+/// struct Slice<'a, T> {\n+///     start: *const T,\n+///     end: *const T,\n+/// }\n+/// ```\n+///\n+/// The intention is that the underlying data is only valid for the\n+/// lifetime `'a`, so `Slice` should not outlive `'a`. However, this\n+/// intent is not expressed in the code, since there are no uses of\n+/// the lifetime `'a` and hence it is not clear what data it applies\n+/// to. We can correct this by telling the compiler to act *as if* the\n+/// `Slice` struct contained a borrowed reference `&'a T`:\n+///\n+/// ```\n+/// use std::marker::PhantomData;\n+///\n+/// struct Slice<'a, T:'a> {\n+///     start: *const T,\n+///     end: *const T,\n+///     phantom: PhantomData<&'a T>\n+/// }\n+/// ```\n+///\n+/// This also in turn requires that we annotate `T:'a`, indicating\n+/// that `T` is a type that can be borrowed for the lifetime `'a`.\n+///\n+/// ## Unused type parameters\n+///\n+/// It sometimes happens that there are unused type parameters that\n+/// indicate what type of data a struct is \"tied\" to, even though that\n+/// data is not actually found in the struct itself. Here is an\n+/// example where this arises when handling external resources over a\n+/// foreign function interface. `PhantomData<T>` can prevent\n+/// mismatches by enforcing types in the method implementations:\n ///\n /// ```\n /// # trait ResType { fn foo(&self); };\n@@ -351,13 +392,21 @@ impl<A:?Sized,R:?Sized,T:?Sized> PhantomFn<A,R> for T { }\n /// }\n /// ```\n ///\n-/// Another example: embedding a `PhantomData<T>` will inform the compiler\n-/// that one or more instances of the type `T` could be dropped when\n-/// instances of the type itself is dropped, though that may not be\n-/// apparent from the other structure of the type itself. This is\n-/// commonly necessary if the structure is using an unsafe pointer\n-/// like `*mut T` whose referent may be dropped when the type is\n-/// dropped, as a `*mut T` is otherwise not treated as owned.\n+/// ## Indicating ownership\n+///\n+/// Adding a field of type `PhantomData<T>` also indicates that your\n+/// struct owns data of type `T`. This in turn implies that when your\n+/// struct is dropped, it may in turn drop one or more instances of\n+/// the type `T`, though that may not be apparent from the other\n+/// structure of the type itself. This is commonly necessary if the\n+/// structure is using an unsafe pointer like `*mut T` whose referent\n+/// may be dropped when the type is dropped, as a `*mut T` is\n+/// otherwise not treated as owned.\n+///\n+/// If your struct does not in fact *own* the data of type `T`, it is\n+/// better to use a reference type, like `PhantomData<&'a T>`\n+/// (ideally) or `PhantomData<*const T>` (if no lifetime applies), so\n+/// as not to indicate ownership.\n #[lang=\"phantom_data\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T:?Sized>;"}, {"sha": "00039c4fcdf15c23dcca3d768668c6fb95c7f24d", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -172,13 +172,13 @@ macro_rules! forward_ref_binop {\n ///     type Output = Foo;\n ///\n ///     fn add(self, _rhs: Foo) -> Foo {\n-///       println!(\"Adding!\");\n-///       self\n-///   }\n+///         println!(\"Adding!\");\n+///         self\n+///     }\n /// }\n ///\n /// fn main() {\n-///   Foo + Foo;\n+///     Foo + Foo;\n /// }\n /// ```\n #[lang=\"add\"]"}, {"sha": "1036c97a5ad583f12593a8e907eb99b7f8a01e53", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -507,7 +507,7 @@ impl<'a> LifetimeContext<'a> {\n                 EarlyScope(_, lifetimes, s) |\n                 LateScope(lifetimes, s) => {\n                     if let Some((_, lifetime_def)) = search_lifetimes(lifetimes, lifetime) {\n-                        self.sess.span_warn(\n+                        self.sess.span_err(\n                             lifetime.span,\n                             &format!(\"lifetime name `{}` shadows another \\\n                                      lifetime name that is already in scope\",\n@@ -516,10 +516,6 @@ impl<'a> LifetimeContext<'a> {\n                             lifetime_def.span,\n                             &format!(\"shadowed lifetime `{}` declared here\",\n                                      token::get_name(lifetime.name)));\n-                        self.sess.span_note(\n-                            lifetime.span,\n-                            \"shadowed lifetimes are deprecated \\\n-                             and will become a hard error before 1.0\");\n                         return;\n                     }\n "}, {"sha": "f0f37117ed3bebe582e79f541461c6fb5ee850fd", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -618,9 +618,6 @@ pub trait BufRead: Read {\n     /// The iterator returned from this function will yield instances of\n     /// `io::Result<String>`. Each string returned will *not* have a newline\n     /// byte (the 0xA byte) at the end.\n-    ///\n-    /// This function will yield errors whenever `read_string` would have also\n-    /// yielded an error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn lines(self) -> Lines<Self> where Self: Sized {\n         Lines { buf: self }"}, {"sha": "110b1a0d90c22dbf9ddeb83ec23a112d436fa87d", "filename": "src/test/compile-fail/shadowed-lifetime.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -15,16 +15,14 @@ struct Foo<'a>(&'a isize);\n impl<'a> Foo<'a> {\n     //~^ NOTE shadowed lifetime `'a` declared here\n     fn shadow_in_method<'a>(&'a self) -> &'a isize {\n-        //~^ WARNING lifetime name `'a` shadows another lifetime name that is already in scope\n-        //~| NOTE deprecated\n+        //~^ ERROR lifetime name `'a` shadows another lifetime name that is already in scope\n         self.0\n     }\n \n     fn shadow_in_type<'b>(&'b self) -> &'b isize {\n         //~^ NOTE shadowed lifetime `'b` declared here\n         let x: for<'b> fn(&'b isize) = panic!();\n-        //~^ WARNING lifetime name `'b` shadows another lifetime name that is already in scope\n-        //~| NOTE deprecated\n+        //~^ ERROR lifetime name `'b` shadows another lifetime name that is already in scope\n         self.0\n     }\n \n@@ -35,9 +33,4 @@ impl<'a> Foo<'a> {\n }\n \n fn main() {\n-    // intentional error that occurs after `resolve_lifetime` runs,\n-    // just to ensure that this test fails to compile; when shadowed\n-    // lifetimes become either an error or a proper lint, this will\n-    // not be needed.\n-    let x: isize = 3_usize; //~ ERROR mismatched types\n }"}, {"sha": "d98b1d9deae62156f08c575447fff269cfa6fd7f", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd89b625be075e81da1791d6d22e9835512036c/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd89b625be075e81da1791d6d22e9835512036c/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=1fd89b625be075e81da1791d6d22e9835512036c", "patch": "@@ -35,7 +35,7 @@ impl<K,V> AssociationList<K,V> {\n impl<'a, K: PartialEq + std::fmt::Debug, V:Clone> Index<&'a K> for AssociationList<K,V> {\n     type Output = V;\n \n-    fn index<'a>(&'a self, index: &K) -> &'a V {\n+    fn index(&self, index: &K) -> &V {\n         for pair in &self.pairs {\n             if pair.key == *index {\n                 return &pair.value"}]}