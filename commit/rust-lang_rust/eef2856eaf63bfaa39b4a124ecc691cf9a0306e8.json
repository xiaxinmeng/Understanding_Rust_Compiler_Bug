{"sha": "eef2856eaf63bfaa39b4a124ecc691cf9a0306e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZjI4NTZlYWY2M2JmYWEzOWI0YTEyNGVjYzY5MWNmOWEwMzA2ZTg=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-07-12T06:26:14Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-07-27T19:47:49Z"}, "message": "Add machine-applicable suggestions\n\nThis avoids the need for tools like rust-analyzer to implement these\nsuggestions themselves.", "tree": {"sha": "4c433ba1936aa3b405764c9ed5ecccab5c399ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c433ba1936aa3b405764c9ed5ecccab5c399ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eef2856eaf63bfaa39b4a124ecc691cf9a0306e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYQBi5QAKCRC4DhnkZita\npPFVAQDAZhtgPStsFCKqGcZ5tZYrS8jtkEGCsItussW9dKgG5AD9EsHz7lS51vhx\nqzUZ4qTqR47+v5ETUG8Vc37UASjQZAI=\n=vzmX\n-----END PGP SIGNATURE-----", "payload": "tree 4c433ba1936aa3b405764c9ed5ecccab5c399ec9\nparent c70147fd66e08962ab06adf12eb6a41bc1ea7f08\nauthor Jacob Pratt <jacob@jhpratt.dev> 1626071174 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1627415269 -0400\n\nAdd machine-applicable suggestions\n\nThis avoids the need for tools like rust-analyzer to implement these\nsuggestions themselves.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eef2856eaf63bfaa39b4a124ecc691cf9a0306e8", "html_url": "https://github.com/rust-lang/rust/commit/eef2856eaf63bfaa39b4a124ecc691cf9a0306e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eef2856eaf63bfaa39b4a124ecc691cf9a0306e8/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c70147fd66e08962ab06adf12eb6a41bc1ea7f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70147fd66e08962ab06adf12eb6a41bc1ea7f08", "html_url": "https://github.com/rust-lang/rust/commit/c70147fd66e08962ab06adf12eb6a41bc1ea7f08"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "8f672bb7d6529f23d0e1fbecd906c206e880a79b", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eef2856eaf63bfaa39b4a124ecc691cf9a0306e8/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eef2856eaf63bfaa39b4a124ecc691cf9a0306e8/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=eef2856eaf63bfaa39b4a124ecc691cf9a0306e8", "patch": "@@ -132,18 +132,52 @@ fn extract_default_variant<'a>(\n     let variant = match default_variants.as_slice() {\n         [variant] => variant,\n         [] => {\n-            cx.struct_span_err(trait_span, \"no default declared\")\n-                .help(\"make a unit variant default by placing `#[default]` above it\")\n-                .emit();\n+            let possible_defaults = enum_def\n+                .variants\n+                .iter()\n+                .filter(|variant| matches!(variant.data, VariantData::Unit(..)))\n+                .filter(|variant| !cx.sess.contains_name(&variant.attrs, sym::non_exhaustive));\n+\n+            let mut diag = cx.struct_span_err(trait_span, \"no default declared\");\n+            diag.help(\"make a unit variant default by placing `#[default]` above it\");\n+            for variant in possible_defaults {\n+                // Suggest making each unit variant default.\n+                diag.tool_only_span_suggestion(\n+                    variant.span,\n+                    &format!(\"make `{}` default\", variant.ident),\n+                    format!(\"#[default] {}\", variant.ident),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            diag.emit();\n \n             return Err(());\n         }\n         [first, rest @ ..] => {\n-            cx.struct_span_err(trait_span, \"multiple declared defaults\")\n-                .span_label(first.span, \"first default\")\n-                .span_labels(rest.iter().map(|variant| variant.span), \"additional default\")\n-                .note(\"only one variant can be default\")\n-                .emit();\n+            let mut diag = cx.struct_span_err(trait_span, \"multiple declared defaults\");\n+            diag.span_label(first.span, \"first default\");\n+            diag.span_labels(rest.iter().map(|variant| variant.span), \"additional default\");\n+            diag.note(\"only one variant can be default\");\n+            for variant in &default_variants {\n+                // Suggest making each variant already tagged default.\n+                let suggestion = default_variants\n+                    .iter()\n+                    .filter_map(|v| {\n+                        if v.ident == variant.ident {\n+                            None\n+                        } else {\n+                            Some((cx.sess.find_by_name(&v.attrs, kw::Default)?.span, String::new()))\n+                        }\n+                    })\n+                    .collect();\n+\n+                diag.tool_only_multipart_suggestion(\n+                    &format!(\"make `{}` default\", variant.ident),\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            diag.emit();\n \n             return Err(());\n         }"}]}