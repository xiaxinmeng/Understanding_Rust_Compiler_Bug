{"sha": "616885ec2c529bc795995108ac5c87d1c532b17f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjg4NWVjMmM1MjliYzc5NTk5NTEwOGFjNWM4N2QxYzUzMmIxN2Y=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-13T15:35:45Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-15T19:11:45Z"}, "message": "Fixed minor issues raised in review.", "tree": {"sha": "5a96c1939c4a2723ac21b1fa7cdecfe9f1bda0eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a96c1939c4a2723ac21b1fa7cdecfe9f1bda0eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/616885ec2c529bc795995108ac5c87d1c532b17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/616885ec2c529bc795995108ac5c87d1c532b17f", "html_url": "https://github.com/rust-lang/rust/commit/616885ec2c529bc795995108ac5c87d1c532b17f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/616885ec2c529bc795995108ac5c87d1c532b17f/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5656c96c71442b2dfc5aa01519dfe2027c6051b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5656c96c71442b2dfc5aa01519dfe2027c6051b0", "html_url": "https://github.com/rust-lang/rust/commit/5656c96c71442b2dfc5aa01519dfe2027c6051b0"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "429b7f03af8e40a058d9b7674fe4c10da06a9dd8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/616885ec2c529bc795995108ac5c87d1c532b17f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616885ec2c529bc795995108ac5c87d1c532b17f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=616885ec2c529bc795995108ac5c87d1c532b17f", "patch": "@@ -1756,7 +1756,7 @@ bitflags! {\n         const IS_ENUM             = 1 << 0;\n         const IS_UNION            = 1 << 1;\n         const IS_STRUCT           = 1 << 2;\n-        const IS_TUPLE_STRUCT     = 1 << 3;\n+        const HAS_CTOR            = 1 << 3;\n         const IS_PHANTOM_DATA     = 1 << 4;\n         const IS_FUNDAMENTAL      = 1 << 5;\n         const IS_BOX              = 1 << 6;\n@@ -2096,7 +2096,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             let variant_def = &variants[VariantIdx::new(0)];\n             let def_key = tcx.def_key(variant_def.did);\n             match def_key.disambiguated_data.data {\n-                DefPathData::StructCtor => flags |= AdtFlags::IS_TUPLE_STRUCT,\n+                DefPathData::StructCtor => flags |= AdtFlags::HAS_CTOR,\n                 _ => (),\n             }\n         }\n@@ -2131,12 +2131,6 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.flags.contains(AdtFlags::IS_STRUCT)\n     }\n \n-    /// If this function returns `true`, it implies that `is_struct` must return `true`.\n-    #[inline]\n-    pub fn is_tuple_struct(&self) -> bool {\n-        self.flags.contains(AdtFlags::IS_TUPLE_STRUCT)\n-    }\n-\n     #[inline]\n     pub fn is_union(&self) -> bool {\n         self.flags.contains(AdtFlags::IS_UNION)\n@@ -2181,6 +2175,12 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         }\n     }\n \n+    /// If this function returns `true`, it implies that `is_struct` must return `true`.\n+    #[inline]\n+    pub fn has_ctor(&self) -> bool {\n+        self.flags.contains(AdtFlags::HAS_CTOR)\n+    }\n+\n     /// Returns whether this type is `#[fundamental]` for the purposes\n     /// of coherence checking.\n     #[inline]"}, {"sha": "957c8d9f19f0ebe1f8e14ea8bb1c0ab4ad1eb087", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/616885ec2c529bc795995108ac5c87d1c532b17f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616885ec2c529bc795995108ac5c87d1c532b17f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=616885ec2c529bc795995108ac5c87d1c532b17f", "patch": "@@ -5163,7 +5163,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let adt_def = ty.ty_adt_def();\n \n                 match adt_def {\n-                    Some(adt_def) if adt_def.is_tuple_struct() => {\n+                    Some(adt_def) if adt_def.has_ctor() => {\n                         let variant = adt_def.non_enum_variant();\n                         new_def = Def::StructCtor(variant.did, variant.ctor_kind);\n                         (variant.did, self.tcx.type_of(variant.did))\n@@ -5176,8 +5176,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 AdtKind::Enum => {\n                                     err.note(\"did you mean to use one of the enum's variants?\");\n                                 },\n-                                AdtKind::Union => {},\n-                                AdtKind::Struct => {\n+                                AdtKind::Struct |\n+                                AdtKind::Union => {\n                                     err.span_label(\n                                         span,\n                                         format!(\"did you mean `Self {{ /* fields */ }}`?\"),"}]}