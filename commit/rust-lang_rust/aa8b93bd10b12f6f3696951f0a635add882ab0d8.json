{"sha": "aa8b93bd10b12f6f3696951f0a635add882ab0d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOGI5M2JkMTBiMTJmNmYzNjk2OTUxZjBhNjM1YWRkODgyYWIwZDg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-07T18:31:29Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:59Z"}, "message": "Rework compiletest implementation.", "tree": {"sha": "11737205f77fd017b3e0e61efa8bb8649b963cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11737205f77fd017b3e0e61efa8bb8649b963cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa8b93bd10b12f6f3696951f0a635add882ab0d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8b93bd10b12f6f3696951f0a635add882ab0d8", "html_url": "https://github.com/rust-lang/rust/commit/aa8b93bd10b12f6f3696951f0a635add882ab0d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa8b93bd10b12f6f3696951f0a635add882ab0d8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab893060388e1dc0bca95a29b47b49cc9b23288", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab893060388e1dc0bca95a29b47b49cc9b23288", "html_url": "https://github.com/rust-lang/rust/commit/1ab893060388e1dc0bca95a29b47b49cc9b23288"}], "stats": {"total": 139, "additions": 55, "deletions": 84}, "files": [{"sha": "bb98e26333cbaf76e0e84ee8c70984460ef20e2d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 55, "deletions": 84, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/aa8b93bd10b12f6f3696951f0a635add882ab0d8/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8b93bd10b12f6f3696951f0a635add882ab0d8/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=aa8b93bd10b12f6f3696951f0a635add882ab0d8", "patch": "@@ -444,101 +444,58 @@ pub struct Compiletest<'a> {\n     suite: &'a str,\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n struct Test {\n-    default: bool,\n     path: &'static str,\n     mode: &'static str,\n     suite: &'static str,\n }\n \n-static COMPILETESTS: &[Test] = &[\n-    Test { default: true, path: \"src/test/codegen\", mode: \"codegen\", suite: \"codegen\" },\n-    Test {\n-        default: true,\n-        path: \"src/test/codegen-units\",\n-        mode: \"codegen-units\",\n-        suite: \"codegen-units\",\n-    },\n+static DEFAULT_COMPILETESTS: &[Test] = &[\n+    Test { path: \"src/test/ui\", mode: \"ui\", suite: \"ui\" },\n+    Test { path: \"src/test/run-pass\", mode: \"run-pass\", suite: \"run-pass\" },\n+    Test { path: \"src/test/compile-fail\", mode: \"compile-fail\", suite: \"compile-fail\" },\n+    Test { path: \"src/test/parse-fail\", mode: \"parse-fail\", suite: \"parse-fail\" },\n+    Test { path: \"src/test/run-fail\", mode: \"run-fail\", suite: \"run-fail\" },\n     Test {\n-        default: true,\n-        path: \"src/test/compile-fail\",\n-        mode: \"compile-fail\",\n-        suite: \"compile-fail\",\n-    },\n-    Test { default: true, path: \"src/test/incremental\", mode: \"incremental\", suite: \"incremental\" },\n-    Test { default: true, path: \"src/test/mir-opt\", mode: \"mir-opt\", suite: \"mir-opt\" },\n-    Test { default: true, path: \"src/test/parse-fail\", mode: \"parse-fail\", suite: \"parse-fail\" },\n-    Test { default: true, path: \"src/test/run-fail\", mode: \"run-fail\", suite: \"run-fail\" },\n-    Test { default: true, path: \"src/test/run-pass\", mode: \"run-pass\", suite: \"run-pass\" },\n-    Test {\n-        default: true,\n         path: \"src/test/run-pass-valgrind\",\n         mode: \"run-pass-valgrind\",\n         suite: \"run-pass-valgrind\"\n     },\n-    Test { default: true, path: \"src/test/ui\", mode: \"ui\", suite: \"ui\" },\n-    Test {\n-        default: false,\n-        path: \"src/test/debuginfo-lldb\",\n-        mode: \"debuginfo-lldb\",\n-        suite: \"debuginfo\"\n-    },\n-    Test {\n-        default: false,\n-        path: \"src/test/debuginfo-gdb\",\n-        mode: \"debuginfo-gdb\",\n-        suite: \"debuginfo\"\n-    },\n+    Test { path: \"src/test/mir-opt\", mode: \"mir-opt\", suite: \"mir-opt\" },\n+    Test { path: \"src/test/codegen\", mode: \"codegen\", suite: \"codegen\" },\n+    Test { path: \"src/test/codegen-units\", mode: \"codegen-units\", suite: \"codegen-units\" },\n+    Test { path: \"src/test/incremental\", mode: \"incremental\", suite: \"incremental\" },\n \n-    // FIXME: What this runs varies depending on the native platform being apple\n-    Test { default: true, path: \"src/test/debuginfo\", mode: \"debuginfo-XXX\", suite: \"debuginfo\" },\n+    // What this runs varies depending on the native platform being apple\n+    Test { path: \"src/test/debuginfo\", mode: \"debuginfo-XXX\", suite: \"debuginfo\" },\n+];\n \n-    Test { default: true, path: \"src/test/ui-fulldeps\", mode: \"ui\", suite: \"ui-fulldeps\" },\n-    Test {\n-        default: true,\n-        path: \"src/test/run-pass-fulldeps\",\n-        mode: \"run-pass\",\n-        suite: \"run-pass-fulldeps\",\n-    },\n+// Also default, but host-only.\n+static HOST_COMPILETESTS: &[Test] = &[\n+    Test { path: \"src/test/ui-fulldeps\", mode: \"ui\", suite: \"ui-fulldeps\" },\n+    Test { path: \"src/test/run-pass-fulldeps\", mode: \"run-pass\", suite: \"run-pass-fulldeps\" },\n+    Test { path: \"src/test/run-fail-fulldeps\", mode: \"run-fail\", suite: \"run-fail-fulldeps\" },\n     Test {\n-        default: true,\n-        path: \"src/test/run-fail-fulldeps\",\n-        mode: \"run-fail\",\n-        suite: \"run-fail-fulldeps\",\n-    },\n-    Test {\n-        default: true,\n         path: \"src/test/compile-fail-fulldeps\",\n         mode: \"compile-fail\",\n         suite: \"compile-fail-fulldeps\",\n     },\n-    Test { default: true, path: \"src/test/run-make\", mode: \"run-make\", suite: \"run-make\" },\n-    Test { default: true, path: \"src/test/rustdoc\", mode: \"rustdoc\", suite: \"rustdoc\" },\n-\n-    Test { default: false, path: \"src/test/pretty\", mode: \"pretty\", suite: \"pretty\" },\n-    Test { default: false, path: \"src/test/run-pass/pretty\", mode: \"pretty\", suite: \"run-pass\" },\n-    Test { default: false, path: \"src/test/run-fail/pretty\", mode: \"pretty\", suite: \"run-fail\" },\n-    Test {\n-        default: false,\n-        path: \"src/test/run-pass-valgrind/pretty\",\n-        mode: \"pretty\",\n-        suite: \"run-pass-valgrind\"\n-    },\n-    Test {\n-        default: false,\n-        path: \"src/test/run-pass-fulldeps/pretty\",\n-        mode: \"pretty\",\n-        suite: \"run-pass-fulldeps\",\n-    },\n-    Test {\n-        default: false,\n-        path: \"src/test/run-fail-fulldeps/pretty\",\n-        mode: \"pretty\",\n-        suite: \"run-fail-fulldeps\",\n-    },\n+    Test { path: \"src/test/run-make\", mode: \"run-make\", suite: \"run-make\" },\n+    Test { path: \"src/test/rustdoc\", mode: \"rustdoc\", suite: \"rustdoc\" },\n+\n+    Test { path: \"src/test/pretty\", mode: \"pretty\", suite: \"pretty\" },\n+    Test { path: \"src/test/run-pass/pretty\", mode: \"pretty\", suite: \"run-pass\" },\n+    Test { path: \"src/test/run-fail/pretty\", mode: \"pretty\", suite: \"run-fail\" },\n+    Test { path: \"src/test/run-pass-valgrind/pretty\", mode: \"pretty\", suite: \"run-pass-valgrind\" },\n+    Test { path: \"src/test/run-pass-fulldeps/pretty\", mode: \"pretty\", suite: \"run-pass-fulldeps\" },\n+    Test { path: \"src/test/run-fail-fulldeps/pretty\", mode: \"pretty\", suite: \"run-fail-fulldeps\" },\n ];\n \n+static COMPILETESTS: &[Test] = &[\n+    Test { path: \"src/test/debuginfo-lldb\", mode: \"debuginfo-lldb\", suite: \"debuginfo\" },\n+    Test { path: \"src/test/debuginfo-gdb\", mode: \"debuginfo-gdb\", suite: \"debuginfo\" },\n+];\n \n impl<'a> Step<'a> for Compiletest<'a> {\n     type Output = ();\n@@ -548,7 +505,7 @@ impl<'a> Step<'a> for Compiletest<'a> {\n         // Note that this is general, while a few more cases are skipped inside\n         // run() itself. This is to avoid duplication across should_run and\n         // make_run.\n-        COMPILETESTS.iter().any(|&test| {\n+        COMPILETESTS.iter().chain(DEFAULT_COMPILETESTS).chain(HOST_COMPILETESTS).any(|&test| {\n             path.ends_with(test.path)\n         })\n     }\n@@ -557,23 +514,36 @@ impl<'a> Step<'a> for Compiletest<'a> {\n         let compiler = builder.compiler(builder.top_stage, host);\n \n         let test = path.map(|path| {\n-            COMPILETESTS.iter().find(|&&test| {\n+            COMPILETESTS.iter().chain(DEFAULT_COMPILETESTS).chain(HOST_COMPILETESTS).find(|&&test| {\n                 path.ends_with(test.path)\n             }).unwrap_or_else(|| {\n                 panic!(\"make_run in compile test to receive test path, received {:?}\", path);\n             })\n         });\n \n         if let Some(test) = test { // specific test\n+            let target = if HOST_COMPILETESTS.contains(test) {\n+                host\n+            } else {\n+                target\n+            };\n             builder.ensure(Compiletest {\n                 compiler, target, mode: test.mode, suite: test.suite\n             });\n         } else { // default tests\n-            for test in COMPILETESTS {\n-                if test.default {\n+            for test in DEFAULT_COMPILETESTS {\n+                builder.ensure(Compiletest {\n+                    compiler,\n+                    target,\n+                    mode: test.mode,\n+                    suite: test.suite\n+                });\n+            }\n+            for test in HOST_COMPILETESTS {\n+                if test.mode != \"pretty\" {\n                     builder.ensure(Compiletest {\n                         compiler,\n-                        target,\n+                        target: host,\n                         mode: test.mode,\n                         suite: test.suite\n                     });\n@@ -623,6 +593,10 @@ impl<'a> Step<'a> for Compiletest<'a> {\n                 sysroot: &builder.sysroot(compiler),\n                 host: compiler.host\n             });\n+\n+            if mode == \"debuginfo-gdb\" {\n+                builder.ensure(RemoteCopyLibs { compiler, target });\n+            }\n         }\n \n         if suite.ends_with(\"fulldeps\") ||\n@@ -636,10 +610,7 @@ impl<'a> Step<'a> for Compiletest<'a> {\n \n         builder.ensure(compile::Test { compiler, target });\n         builder.ensure(native::TestHelpers { target });\n-\n-        if mode == \"debuginfo-gdb\" {\n-            builder.ensure(RemoteCopyLibs { compiler, target });\n-        }\n+        builder.ensure(RemoteCopyLibs { compiler, target });\n \n         let _folder = build.fold_output(|| format!(\"test_{}\", suite));\n         println!(\"Check compiletest suite={} mode={} ({} -> {})\","}]}