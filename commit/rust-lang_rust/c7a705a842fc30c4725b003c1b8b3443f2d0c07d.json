{"sha": "c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "node_id": "C_kwDOAAsO6NoAKGM3YTcwNWE4NDJmYzMwYzQ3MjViMDAzYzFiOGIzNDQzZjJkMGMwN2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T13:31:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T13:31:19Z"}, "message": "Auto merge of #8575 - FoseFx:trim_split_whitespace2, r=flip1995\n\nadd `trim_split_whitespace`\n\nCloses #8521\n\nchangelog: [`trim_split_whitespace`]", "tree": {"sha": "5fd03648669cd9864ce95c10e689166a20c72895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd03648669cd9864ce95c10e689166a20c72895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "html_url": "https://github.com/rust-lang/rust/commit/c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751fd0d735dfb2a8b2d061b496d38fae0c101772", "url": "https://api.github.com/repos/rust-lang/rust/commits/751fd0d735dfb2a8b2d061b496d38fae0c101772", "html_url": "https://github.com/rust-lang/rust/commit/751fd0d735dfb2a8b2d061b496d38fae0c101772"}, {"sha": "fea177fafe44c6ea950b71d812102167dfefd6b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea177fafe44c6ea950b71d812102167dfefd6b6", "html_url": "https://github.com/rust-lang/rust/commit/fea177fafe44c6ea950b71d812102167dfefd6b6"}], "stats": {"total": 295, "additions": 295, "deletions": 0}, "files": [{"sha": "751f9fccd88d4389866d835eb08ebd0a3d3547a7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -3736,6 +3736,7 @@ Released 2018-09-13\n [`transmute_undefined_repr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_undefined_repr\n [`transmutes_expressible_as_ptr_casts`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmutes_expressible_as_ptr_casts\n [`transmuting_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmuting_null\n+[`trim_split_whitespace`]: https://rust-lang.github.io/rust-clippy/master/index.html#trim_split_whitespace\n [`trivial_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivial_regex\n [`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\n [`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err"}, {"sha": "e68718f9fdf99165efdb6682b8e0ea4d5a2efe18", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -280,6 +280,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n     LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n+    LintId::of(strings::TRIM_SPLIT_WHITESPACE),\n     LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),"}, {"sha": "5768edc501884feee3e529445ff01f79188cf533", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -482,6 +482,7 @@ store.register_lints(&[\n     strings::STRING_SLICE,\n     strings::STRING_TO_STRING,\n     strings::STR_TO_STRING,\n+    strings::TRIM_SPLIT_WHITESPACE,\n     strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n     suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n     suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,"}, {"sha": "d183c0449cd5fd6fb7059de9c8076c5bdcb52f70", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -105,6 +105,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(returns::NEEDLESS_RETURN),\n     LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n     LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+    LintId::of(strings::TRIM_SPLIT_WHITESPACE),\n     LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n     LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n     LintId::of(unit_types::LET_UNIT_VALUE),"}, {"sha": "3bb821a14829535e924d08c81fadab601d68ce53", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -889,6 +889,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(bytes_count_to_len::BytesCountToLen));\n     let max_include_file_size = conf.max_include_file_size;\n     store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n+    store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "7c196ccaa8ccd2fb610f430e510b4a6aaa918314", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -5,6 +5,7 @@ use clippy_utils::{get_parent_expr, is_lint_allowed, match_function_call, method\n use clippy_utils::{peel_blocks, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -451,3 +452,58 @@ impl<'tcx> LateLintPass<'tcx> for StringToString {\n         }\n     }\n }\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Warns about calling `str::trim` (or variants) before `str::split_whitespace`.\n+    ///\n+    /// ### Why is this bad?\n+    /// `split_whitespace` already ignores leading and trailing whitespace.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// \" A B C \".trim().split_whitespace();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// \" A B C \".split_whitespace();\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub TRIM_SPLIT_WHITESPACE,\n+    style,\n+    \"using `str::trim()` or alike before `str::split_whitespace`\"\n+}\n+declare_lint_pass!(TrimSplitWhitespace => [TRIM_SPLIT_WHITESPACE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for TrimSplitWhitespace {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n+        let tyckres = cx.typeck_results();\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, [split_recv], split_ws_span) = expr.kind;\n+            if path.ident.name == sym!(split_whitespace);\n+            if let Some(split_ws_def_id) = tyckres.type_dependent_def_id(expr.hir_id);\n+            if cx.tcx.is_diagnostic_item(sym::str_split_whitespace, split_ws_def_id);\n+            if let ExprKind::MethodCall(path, [_trim_recv], trim_span) = split_recv.kind;\n+            if let trim_fn_name @ (\"trim\" | \"trim_start\" | \"trim_end\") = path.ident.name.as_str();\n+            if let Some(trim_def_id) = tyckres.type_dependent_def_id(split_recv.hir_id);\n+            if is_one_of_trim_diagnostic_items(cx, trim_def_id);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    TRIM_SPLIT_WHITESPACE,\n+                    trim_span.with_hi(split_ws_span.lo()),\n+                    &format!(\"found call to `str::{}` before `str::split_whitespace`\", trim_fn_name),\n+                    &format!(\"remove `{}()`\", trim_fn_name),\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_one_of_trim_diagnostic_items(cx: &LateContext<'_>, trim_def_id: DefId) -> bool {\n+    cx.tcx.is_diagnostic_item(sym::str_trim, trim_def_id)\n+        || cx.tcx.is_diagnostic_item(sym::str_trim_start, trim_def_id)\n+        || cx.tcx.is_diagnostic_item(sym::str_trim_end, trim_def_id)\n+}"}, {"sha": "e4d352f7367e4502e095b390c1e833f533e64518", "filename": "tests/ui/trim_split_whitespace.fixed", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/tests%2Fui%2Ftrim_split_whitespace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/tests%2Fui%2Ftrim_split_whitespace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrim_split_whitespace.fixed?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -0,0 +1,91 @@\n+// run-rustfix\n+#![warn(clippy::trim_split_whitespace)]\n+#![allow(clippy::let_unit_value)]\n+\n+struct Custom;\n+impl Custom {\n+    fn trim(self) -> Self {\n+        self\n+    }\n+    fn split_whitespace(self) {}\n+}\n+\n+struct DerefStr(&'static str);\n+impl std::ops::Deref for DerefStr {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+\n+struct DerefStrAndCustom(&'static str);\n+impl std::ops::Deref for DerefStrAndCustom {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+impl DerefStrAndCustom {\n+    fn trim(self) -> Self {\n+        self\n+    }\n+    fn split_whitespace(self) {}\n+}\n+\n+struct DerefStrAndCustomSplit(&'static str);\n+impl std::ops::Deref for DerefStrAndCustomSplit {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+impl DerefStrAndCustomSplit {\n+    #[allow(dead_code)]\n+    fn split_whitespace(self) {}\n+}\n+\n+struct DerefStrAndCustomTrim(&'static str);\n+impl std::ops::Deref for DerefStrAndCustomTrim {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+impl DerefStrAndCustomTrim {\n+    fn trim(self) -> Self {\n+        self\n+    }\n+}\n+\n+fn main() {\n+    // &str\n+    let _ = \" A B C \".split_whitespace(); // should trigger lint\n+    let _ = \" A B C \".split_whitespace(); // should trigger lint\n+    let _ = \" A B C \".split_whitespace(); // should trigger lint\n+\n+    // String\n+    let _ = (\" A B C \").to_string().split_whitespace(); // should trigger lint\n+    let _ = (\" A B C \").to_string().split_whitespace(); // should trigger lint\n+    let _ = (\" A B C \").to_string().split_whitespace(); // should trigger lint\n+\n+    // Custom\n+    let _ = Custom.trim().split_whitespace(); // should not trigger lint\n+\n+    // Deref<Target=str>\n+    let s = DerefStr(\" A B C \");\n+    let _ = s.split_whitespace(); // should trigger lint\n+\n+    // Deref<Target=str> + custom impl\n+    let s = DerefStrAndCustom(\" A B C \");\n+    let _ = s.trim().split_whitespace(); // should not trigger lint\n+\n+    // Deref<Target=str> + only custom split_ws() impl\n+    let s = DerefStrAndCustomSplit(\" A B C \");\n+    let _ = s.split_whitespace(); // should trigger lint\n+    // Expl: trim() is called on str (deref) and returns &str.\n+    //       Thus split_ws() is called on str as well and the custom impl on S is unused\n+\n+    // Deref<Target=str> + only custom trim() impl\n+    let s = DerefStrAndCustomTrim(\" A B C \");\n+    let _ = s.trim().split_whitespace(); // should not trigger lint\n+}"}, {"sha": "f98451a983712c552019b4b9122f3c347eae72d6", "filename": "tests/ui/trim_split_whitespace.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/tests%2Fui%2Ftrim_split_whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/tests%2Fui%2Ftrim_split_whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrim_split_whitespace.rs?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -0,0 +1,91 @@\n+// run-rustfix\n+#![warn(clippy::trim_split_whitespace)]\n+#![allow(clippy::let_unit_value)]\n+\n+struct Custom;\n+impl Custom {\n+    fn trim(self) -> Self {\n+        self\n+    }\n+    fn split_whitespace(self) {}\n+}\n+\n+struct DerefStr(&'static str);\n+impl std::ops::Deref for DerefStr {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+\n+struct DerefStrAndCustom(&'static str);\n+impl std::ops::Deref for DerefStrAndCustom {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+impl DerefStrAndCustom {\n+    fn trim(self) -> Self {\n+        self\n+    }\n+    fn split_whitespace(self) {}\n+}\n+\n+struct DerefStrAndCustomSplit(&'static str);\n+impl std::ops::Deref for DerefStrAndCustomSplit {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+impl DerefStrAndCustomSplit {\n+    #[allow(dead_code)]\n+    fn split_whitespace(self) {}\n+}\n+\n+struct DerefStrAndCustomTrim(&'static str);\n+impl std::ops::Deref for DerefStrAndCustomTrim {\n+    type Target = str;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+impl DerefStrAndCustomTrim {\n+    fn trim(self) -> Self {\n+        self\n+    }\n+}\n+\n+fn main() {\n+    // &str\n+    let _ = \" A B C \".trim().split_whitespace(); // should trigger lint\n+    let _ = \" A B C \".trim_start().split_whitespace(); // should trigger lint\n+    let _ = \" A B C \".trim_end().split_whitespace(); // should trigger lint\n+\n+    // String\n+    let _ = (\" A B C \").to_string().trim().split_whitespace(); // should trigger lint\n+    let _ = (\" A B C \").to_string().trim_start().split_whitespace(); // should trigger lint\n+    let _ = (\" A B C \").to_string().trim_end().split_whitespace(); // should trigger lint\n+\n+    // Custom\n+    let _ = Custom.trim().split_whitespace(); // should not trigger lint\n+\n+    // Deref<Target=str>\n+    let s = DerefStr(\" A B C \");\n+    let _ = s.trim().split_whitespace(); // should trigger lint\n+\n+    // Deref<Target=str> + custom impl\n+    let s = DerefStrAndCustom(\" A B C \");\n+    let _ = s.trim().split_whitespace(); // should not trigger lint\n+\n+    // Deref<Target=str> + only custom split_ws() impl\n+    let s = DerefStrAndCustomSplit(\" A B C \");\n+    let _ = s.trim().split_whitespace(); // should trigger lint\n+    // Expl: trim() is called on str (deref) and returns &str.\n+    //       Thus split_ws() is called on str as well and the custom impl on S is unused\n+\n+    // Deref<Target=str> + only custom trim() impl\n+    let s = DerefStrAndCustomTrim(\" A B C \");\n+    let _ = s.trim().split_whitespace(); // should not trigger lint\n+}"}, {"sha": "5ae7849e27d2ba6f6df63978ef93730140ba7f79", "filename": "tests/ui/trim_split_whitespace.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/tests%2Fui%2Ftrim_split_whitespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7a705a842fc30c4725b003c1b8b3443f2d0c07d/tests%2Fui%2Ftrim_split_whitespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrim_split_whitespace.stderr?ref=c7a705a842fc30c4725b003c1b8b3443f2d0c07d", "patch": "@@ -0,0 +1,52 @@\n+error: found call to `str::trim` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:62:23\n+   |\n+LL |     let _ = \" A B C \".trim().split_whitespace(); // should trigger lint\n+   |                       ^^^^^^^ help: remove `trim()`\n+   |\n+   = note: `-D clippy::trim-split-whitespace` implied by `-D warnings`\n+\n+error: found call to `str::trim_start` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:63:23\n+   |\n+LL |     let _ = \" A B C \".trim_start().split_whitespace(); // should trigger lint\n+   |                       ^^^^^^^^^^^^^ help: remove `trim_start()`\n+\n+error: found call to `str::trim_end` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:64:23\n+   |\n+LL |     let _ = \" A B C \".trim_end().split_whitespace(); // should trigger lint\n+   |                       ^^^^^^^^^^^ help: remove `trim_end()`\n+\n+error: found call to `str::trim` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:67:37\n+   |\n+LL |     let _ = (\" A B C \").to_string().trim().split_whitespace(); // should trigger lint\n+   |                                     ^^^^^^^ help: remove `trim()`\n+\n+error: found call to `str::trim_start` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:68:37\n+   |\n+LL |     let _ = (\" A B C \").to_string().trim_start().split_whitespace(); // should trigger lint\n+   |                                     ^^^^^^^^^^^^^ help: remove `trim_start()`\n+\n+error: found call to `str::trim_end` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:69:37\n+   |\n+LL |     let _ = (\" A B C \").to_string().trim_end().split_whitespace(); // should trigger lint\n+   |                                     ^^^^^^^^^^^ help: remove `trim_end()`\n+\n+error: found call to `str::trim` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:76:15\n+   |\n+LL |     let _ = s.trim().split_whitespace(); // should trigger lint\n+   |               ^^^^^^^ help: remove `trim()`\n+\n+error: found call to `str::trim` before `str::split_whitespace`\n+  --> $DIR/trim_split_whitespace.rs:84:15\n+   |\n+LL |     let _ = s.trim().split_whitespace(); // should trigger lint\n+   |               ^^^^^^^ help: remove `trim()`\n+\n+error: aborting due to 8 previous errors\n+"}]}