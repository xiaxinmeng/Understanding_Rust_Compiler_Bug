{"sha": "3b2403306f5d3d5826b0586d9f23bc650c65cce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMjQwMzMwNmY1ZDNkNTgyNmIwNTg2ZDlmMjNiYzY1MGM2NWNjZTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T18:48:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-25T18:48:44Z"}, "message": "Rollup merge of #47415 - varkor:cgu-partition-heuristic, r=michaelwoerister\n\nAdd CGU size heuristic for partitioning\n\nThis addresses the concern of #47316 by estimating CGU size based on\nthe size of its MIR. Looking at the size estimate differences for a\nsmall selection of crates, this heuristic produces different orderings,\nwhich should more accurately reflect optimisation time. (Fixes #47316.)\n\nr? @michaelwoerister", "tree": {"sha": "018f0561cd892a051bc3c2008f4370bbaed42db7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/018f0561cd892a051bc3c2008f4370bbaed42db7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b2403306f5d3d5826b0586d9f23bc650c65cce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2403306f5d3d5826b0586d9f23bc650c65cce3", "html_url": "https://github.com/rust-lang/rust/commit/3b2403306f5d3d5826b0586d9f23bc650c65cce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b2403306f5d3d5826b0586d9f23bc650c65cce3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6", "html_url": "https://github.com/rust-lang/rust/commit/9fd7da904b46ff7aa78c2e2cc1986c4975aeccc6"}, {"sha": "62703cfd26592be8ea641912aa61ecf5d1cbe64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/62703cfd26592be8ea641912aa61ecf5d1cbe64f", "html_url": "https://github.com/rust-lang/rust/commit/62703cfd26592be8ea641912aa61ecf5d1cbe64f"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "1de9091b5df7d34f059aa9418186f7bf1d4ea24f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -638,6 +638,7 @@ define_dep_nodes!( <'tcx>\n     [input] TargetFeaturesWhitelist,\n     [] TargetFeaturesEnabled(DefId),\n \n+    [] InstanceDefSizeEstimate { instance_def: InstanceDef<'tcx> },\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "49e5c0dc21f9ead7954c506cc9db63a6d32f9ef2", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -10,7 +10,7 @@\n \n use syntax::ast::NodeId;\n use syntax::symbol::InternedString;\n-use ty::Instance;\n+use ty::{Instance, TyCtxt};\n use util::nodemap::FxHashMap;\n use rustc_data_structures::base_n;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasherResult,\n@@ -25,6 +25,21 @@ pub enum MonoItem<'tcx> {\n     GlobalAsm(NodeId),\n }\n \n+impl<'tcx> MonoItem<'tcx> {\n+    pub fn size_estimate<'a>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) -> usize {\n+        match *self {\n+            MonoItem::Fn(instance) => {\n+                // Estimate the size of a function based on how many statements\n+                // it contains.\n+                tcx.instance_def_size_estimate(instance.def)\n+            },\n+            // Conservatively estimate the size of a static declaration\n+            // or assembly to be 1.\n+            MonoItem::Static(_) | MonoItem::GlobalAsm(_) => 1,\n+        }\n+    }\n+}\n+\n impl<'tcx> HashStable<StableHashingContext<'tcx>> for MonoItem<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                            hcx: &mut StableHashingContext<'tcx>,\n@@ -52,6 +67,7 @@ pub struct CodegenUnit<'tcx> {\n     /// as well as the crate name and disambiguator.\n     name: InternedString,\n     items: FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)>,\n+    size_estimate: Option<usize>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n@@ -101,6 +117,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         CodegenUnit {\n             name: name,\n             items: FxHashMap(),\n+            size_estimate: None,\n         }\n     }\n \n@@ -131,6 +148,24 @@ impl<'tcx> CodegenUnit<'tcx> {\n         let hash = hash & ((1u128 << 80) - 1);\n         base_n::encode(hash, base_n::CASE_INSENSITIVE)\n     }\n+\n+    pub fn estimate_size<'a>(&mut self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) {\n+        // Estimate the size of a codegen unit as (approximately) the number of MIR\n+        // statements it corresponds to.\n+        self.size_estimate = Some(self.items.keys().map(|mi| mi.size_estimate(tcx)).sum());\n+    }\n+\n+    pub fn size_estimate(&self) -> usize {\n+        // Should only be called if `estimate_size` has previously been called.\n+        self.size_estimate.expect(\"estimate_size must be called before getting a size_estimate\")\n+    }\n+\n+    pub fn modify_size_estimate(&mut self, delta: usize) {\n+        assert!(self.size_estimate.is_some());\n+        if let Some(size_estimate) = self.size_estimate {\n+            self.size_estimate = Some(size_estimate + delta);\n+        }\n+    }\n }\n \n impl<'tcx> HashStable<StableHashingContext<'tcx>> for CodegenUnit<'tcx> {\n@@ -140,6 +175,8 @@ impl<'tcx> HashStable<StableHashingContext<'tcx>> for CodegenUnit<'tcx> {\n         let CodegenUnit {\n             ref items,\n             name,\n+            // The size estimate is not relevant to the hash\n+            size_estimate: _,\n         } = *self;\n \n         name.hash_stable(hcx, hasher);"}, {"sha": "b0adfe20879667759c8333085d6ed2d80866adf8", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -637,6 +637,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::target_features_whitelist<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx> {\n+    fn describe(tcx: TyCtxt, def: ty::InstanceDef<'tcx>) -> String {\n+        format!(\"estimating size for `{}`\", tcx.item_path_str(def.def_id()))\n+    }\n+}\n+\n macro_rules! impl_disk_cacheable_query(\n     ($query_name:ident, |$key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {"}, {"sha": "6c79f6a62fa0b3779861edcddbe7bf95b300c89d", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -365,6 +365,9 @@ define_maps! { <'tcx>\n         target_features_whitelist_node(CrateNum) -> Rc<FxHashSet<String>>,\n     [] fn target_features_enabled: TargetFeaturesEnabled(DefId) -> Rc<Vec<String>>,\n \n+    // Get an estimate of the size of an InstanceDef based on its MIR for CGU partitioning.\n+    [] fn instance_def_size_estimate: instance_def_size_estimate_dep_node(ty::InstanceDef<'tcx>)\n+        -> usize,\n }\n \n //////////////////////////////////////////////////////////////////////\n@@ -514,3 +517,10 @@ fn substitute_normalize_and_test_predicates_node<'tcx>(key: (DefId, &'tcx Substs\n fn target_features_whitelist_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::TargetFeaturesWhitelist\n }\n+\n+fn instance_def_size_estimate_dep_node<'tcx>(instance_def: ty::InstanceDef<'tcx>)\n+                                              -> DepConstructor<'tcx> {\n+    DepConstructor::InstanceDefSizeEstimate {\n+        instance_def\n+    }\n+}"}, {"sha": "f35693c702b32665557c80ec16d30adbfda82795", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -761,6 +761,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::EraseRegionsTy |\n         DepKind::NormalizeTy |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n+        DepKind::InstanceDefSizeEstimate |\n \n         // This one should never occur in this context\n         DepKind::Null => {"}, {"sha": "b8c11e381b8f6e7a05fa94bf7f86fdc17db5e3dd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -2695,6 +2695,20 @@ fn crate_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.hir.crate_hash\n }\n \n+fn instance_def_size_estimate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                        instance_def: InstanceDef<'tcx>)\n+                                        -> usize {\n+    match instance_def {\n+        InstanceDef::Item(..) |\n+        InstanceDef::DropGlue(..) => {\n+            let mir = tcx.instance_mir(instance_def);\n+            mir.basic_blocks().iter().map(|bb| bb.statements.len()).sum()\n+        },\n+        // Estimate the size of other compiler-generated shims to be 1.\n+        _ => 1\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n@@ -2712,6 +2726,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         original_crate_name,\n         crate_hash,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n+        instance_def_size_estimate,\n         ..*providers\n     };\n }"}, {"sha": "806d787c84522601c69c4a56fde4acbc7f547ba4", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -115,6 +115,7 @@ use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use rustc::mir::mono::MonoItem;\n use monomorphize::item::{MonoItemExt, InstantiationMode};\n+use core::usize;\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -224,6 +225,8 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut initial_partitioning = place_root_translation_items(tcx,\n                                                                 trans_items);\n \n+    initial_partitioning.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(&tcx));\n+\n     debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n \n     // If the partitioning should produce a fixed count of codegen units, merge\n@@ -241,6 +244,8 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut post_inlining = place_inlined_translation_items(initial_partitioning,\n                                                             inlining_map);\n \n+    post_inlining.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(&tcx));\n+\n     debug_dump(tcx, \"POST INLINING:\", post_inlining.codegen_units.iter());\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n@@ -422,14 +427,13 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n     codegen_units.sort_by_key(|cgu| cgu.name().clone());\n \n     // Merge the two smallest codegen units until the target size is reached.\n-    // Note that \"size\" is estimated here rather inaccurately as the number of\n-    // translation items in a given unit. This could be improved on.\n     while codegen_units.len() > target_cgu_count {\n         // Sort small cgus to the back\n-        codegen_units.sort_by_key(|cgu| -(cgu.items().len() as i64));\n+        codegen_units.sort_by_key(|cgu| usize::MAX - cgu.size_estimate());\n         let mut smallest = codegen_units.pop().unwrap();\n         let second_smallest = codegen_units.last_mut().unwrap();\n \n+        second_smallest.modify_size_estimate(smallest.size_estimate());\n         for (k, v) in smallest.items_mut().drain() {\n             second_smallest.items_mut().insert(k, v);\n         }"}, {"sha": "466a86e7ea5584d221eb13e17d71ca043d3ab09f", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2403306f5d3d5826b0586d9f23bc650c65cce3/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3b2403306f5d3d5826b0586d9f23bc650c65cce3", "patch": "@@ -78,7 +78,7 @@ use std::ffi::CString;\n use std::str;\n use std::sync::Arc;\n use std::time::{Instant, Duration};\n-use std::i32;\n+use std::{i32, usize};\n use std::iter;\n use std::sync::mpsc;\n use syntax_pos::Span;\n@@ -823,12 +823,10 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ongoing_translation.submit_pre_translated_module_to_llvm(tcx, metadata_module);\n \n     // We sort the codegen units by size. This way we can schedule work for LLVM\n-    // a bit more efficiently. Note that \"size\" is defined rather crudely at the\n-    // moment as it is just the number of TransItems in the CGU, not taking into\n-    // account the size of each TransItem.\n+    // a bit more efficiently.\n     let codegen_units = {\n         let mut codegen_units = codegen_units;\n-        codegen_units.sort_by_key(|cgu| -(cgu.items().len() as isize));\n+        codegen_units.sort_by_key(|cgu| usize::MAX - cgu.size_estimate());\n         codegen_units\n     };\n "}]}