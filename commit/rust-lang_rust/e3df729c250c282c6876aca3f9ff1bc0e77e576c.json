{"sha": "e3df729c250c282c6876aca3f9ff1bc0e77e576c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZGY3MjljMjUwYzI4MmM2ODc2YWNhM2Y5ZmYxYmMwZTc3ZTU3NmM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T06:34:09Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-21T09:13:17Z"}, "message": "rustc: make mk_substs_trait take &[Kind] instead of &[Ty].", "tree": {"sha": "b41c3d3ae43a538d2fdaefaa47cdb9d816e43081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b41c3d3ae43a538d2fdaefaa47cdb9d816e43081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3df729c250c282c6876aca3f9ff1bc0e77e576c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3df729c250c282c6876aca3f9ff1bc0e77e576c", "html_url": "https://github.com/rust-lang/rust/commit/e3df729c250c282c6876aca3f9ff1bc0e77e576c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3df729c250c282c6876aca3f9ff1bc0e77e576c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d47dc98767b9362f82f14339fd22a4858e8eb7a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d47dc98767b9362f82f14339fd22a4858e8eb7a5", "html_url": "https://github.com/rust-lang/rust/commit/d47dc98767b9362f82f14339fd22a4858e8eb7a5"}], "stats": {"total": 168, "additions": 70, "deletions": 98}, "files": [{"sha": "9ad98b45e96aa81b05cbcb531900e0d993ac341c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -652,14 +652,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             && fallback_has_occurred\n                         {\n                             let predicate = trait_predicate.map_bound(|mut trait_pred| {\n-                                {\n-                                    let trait_ref = &mut trait_pred.trait_ref;\n-                                    let never_substs = trait_ref.substs;\n-                                    let mut unit_substs = Vec::with_capacity(never_substs.len());\n-                                    unit_substs.push(self.tcx.mk_nil().into());\n-                                    unit_substs.extend(&never_substs[1..]);\n-                                    trait_ref.substs = self.tcx.intern_substs(&unit_substs);\n-                                }\n+                                trait_pred.trait_ref.substs = self.tcx.mk_substs_trait(\n+                                    self.tcx.mk_nil(),\n+                                    &trait_pred.trait_ref.substs[1..],\n+                                );\n                                 trait_pred\n                             });\n                             let unit_obligation = Obligation {"}, {"sha": "3ab51a0eb2f64b34c7ee4d316c90f874d2209f7a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -3058,24 +3058,24 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n                     inner_source,\n-                    &[inner_target]));\n+                    &[inner_target.into()]));\n             }\n \n             // (.., T) -> (.., U).\n             (&ty::TyTuple(tys_a), &ty::TyTuple(tys_b)) => {\n                 assert_eq!(tys_a.len(), tys_b.len());\n \n                 // The last field of the tuple has to exist.\n-                let (a_last, a_mid) = if let Some(x) = tys_a.split_last() {\n+                let (&a_last, a_mid) = if let Some(x) = tys_a.split_last() {\n                     x\n                 } else {\n                     return Err(Unimplemented);\n                 };\n-                let b_last = tys_b.last().unwrap();\n+                let &b_last = tys_b.last().unwrap();\n \n                 // Check that the source tuple with the target's\n                 // last element is equal to the target.\n-                let new_tuple = tcx.mk_tup(a_mid.iter().chain(Some(b_last)));\n+                let new_tuple = tcx.mk_tup(a_mid.iter().cloned().chain(iter::once(b_last)));\n                 let InferOk { obligations, .. } =\n                     self.infcx.at(&obligation.cause, obligation.param_env)\n                               .eq(target, new_tuple)\n@@ -3089,7 +3089,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n                     a_last,\n-                    &[b_last]));\n+                    &[b_last.into()]));\n             }\n \n             _ => bug!()"}, {"sha": "684022f8e8a3cc58a208dce8ce3b41cd14712f1f", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::subst::{Subst, Substs};\n+use ty::subst::{Kind, Subst, Substs};\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use ty::outlives::Component;\n use util::nodemap::FxHashSet;\n@@ -430,13 +430,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                    cause: ObligationCause<'tcx>,\n                                    trait_def_id: DefId,\n                                    recursion_depth: usize,\n-                                   param_ty: Ty<'tcx>,\n-                                   ty_params: &[Ty<'tcx>])\n+                                   self_ty: Ty<'tcx>,\n+                                   params: &[Kind<'tcx>])\n         -> PredicateObligation<'tcx>\n     {\n         let trait_ref = ty::TraitRef {\n             def_id: trait_def_id,\n-            substs: self.mk_substs_trait(param_ty, ty_params)\n+            substs: self.mk_substs_trait(self_ty, params)\n         };\n         predicate_for_trait_ref(cause, param_env, trait_ref, recursion_depth)\n     }\n@@ -512,7 +512,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         };\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,\n-            substs: self.mk_substs_trait(self_ty, &[arguments_tuple]),\n+            substs: self.mk_substs_trait(self_ty, &[arguments_tuple.into()]),\n         };\n         ty::Binder::bind((trait_ref, sig.skip_binder().output()))\n     }"}, {"sha": "b1e9aab6872e98aa2ee50688937423ceaadba847", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -2584,11 +2584,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_substs_trait(self,\n-                     s: Ty<'tcx>,\n-                     t: &[Ty<'tcx>])\n+                     self_ty: Ty<'tcx>,\n+                     rest: &[Kind<'tcx>])\n                     -> &'tcx Substs<'tcx>\n     {\n-        self.mk_substs(iter::once(s).chain(t.into_iter().cloned()).map(Kind::from))\n+        self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))\n     }\n \n     pub fn mk_clauses<I: InternAs<[Clause<'tcx>], Clauses<'tcx>>>(self, iter: I) -> I::Output {"}, {"sha": "66edbeff749f712f8762bf84f0035bf4c3452a5a", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -10,7 +10,6 @@\n \n use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n-use ty::subst::Kind;\n use traits;\n use rustc_target::spec::abi::Abi;\n use util::ppaux;\n@@ -361,7 +360,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs([Kind::from(self_ty), sig.inputs()[0].into()].iter().cloned());\n+    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n \n     debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n     Instance { def, substs }"}, {"sha": "6bc0cb51a92e49c50fb0dc84fd5e226d1af29412", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -622,6 +622,18 @@ impl<'tcx> TraitRef<'tcx> {\n         // associated types.\n         self.substs.types()\n     }\n+\n+    pub fn from_method(tcx: TyCtxt<'_, '_, 'tcx>,\n+                       trait_id: DefId,\n+                       substs: &Substs<'tcx>)\n+                       -> ty::TraitRef<'tcx> {\n+        let defs = tcx.generics_of(trait_id);\n+\n+        ty::TraitRef {\n+            def_id: trait_id,\n+            substs: tcx.intern_substs(&substs[..defs.params.len()])\n+        }\n+    }\n }\n \n pub type PolyTraitRef<'tcx> = Binder<TraitRef<'tcx>>;\n@@ -663,6 +675,18 @@ impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n         self.substs.types()\n     }\n \n+    pub fn erase_self_ty(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                         trait_ref: ty::TraitRef<'tcx>)\n+                         -> ty::ExistentialTraitRef<'tcx> {\n+        // Assert there is a Self.\n+        trait_ref.substs.type_at(0);\n+\n+        ty::ExistentialTraitRef {\n+            def_id: trait_ref.def_id,\n+            substs: tcx.intern_substs(&trait_ref.substs[1..])\n+        }\n+    }\n+\n     /// Object types don't have a self-type specified. Therefore, when\n     /// we convert the principal trait-ref into a normal trait-ref,\n     /// you must give *some* self-type. A common choice is `mk_err()`\n@@ -674,8 +698,7 @@ impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n \n         ty::TraitRef {\n             def_id: self.def_id,\n-            substs: tcx.mk_substs(\n-                iter::once(self_ty.into()).chain(self.substs.iter().cloned()))\n+            substs: tcx.mk_substs_trait(self_ty, self.substs)\n         }\n     }\n }\n@@ -686,6 +709,16 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     pub fn def_id(&self) -> DefId {\n         self.skip_binder().def_id\n     }\n+\n+    /// Object types don't have a self-type specified. Therefore, when\n+    /// we convert the principal trait-ref into a normal trait-ref,\n+    /// you must give *some* self-type. A common choice is `mk_err()`\n+    /// or some skolemized type.\n+    pub fn with_self_ty(&self, tcx: TyCtxt<'_, '_, 'tcx>,\n+                        self_ty: Ty<'tcx>)\n+                        -> ty::PolyTraitRef<'tcx>  {\n+        self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))\n+    }\n }\n \n /// Binder is a binder for higher-ranked lifetimes. It is part of the\n@@ -1188,8 +1221,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n                 item_def_id: self.item_def_id,\n-                substs: tcx.mk_substs(\n-                iter::once(self_ty.into()).chain(self.substs.iter().cloned())),\n+                substs: tcx.mk_substs_trait(self_ty, self.substs),\n             },\n             ty: self.ty,\n         }"}, {"sha": "67dde685f8d0b8446a2a408ff51e7518d96bc7bf", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -20,7 +20,6 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n use core::intrinsics;\n use std::fmt;\n-use std::iter;\n use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n@@ -543,54 +542,3 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n         self.tcx().mk_region(ty::fold::shift_region(*region, self.region_binders_passed))\n     }\n }\n-\n-// Helper methods that modify substitutions.\n-\n-impl<'a, 'gcx, 'tcx> ty::TraitRef<'tcx> {\n-    pub fn from_method(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                       trait_id: DefId,\n-                       substs: &Substs<'tcx>)\n-                       -> ty::TraitRef<'tcx> {\n-        let defs = tcx.generics_of(trait_id);\n-\n-        ty::TraitRef {\n-            def_id: trait_id,\n-            substs: tcx.intern_substs(&substs[..defs.params.len()])\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx, 'tcx> ty::ExistentialTraitRef<'tcx> {\n-    pub fn erase_self_ty(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                         trait_ref: ty::TraitRef<'tcx>)\n-                         -> ty::ExistentialTraitRef<'tcx> {\n-        // Assert there is a Self.\n-        trait_ref.substs.type_at(0);\n-\n-        ty::ExistentialTraitRef {\n-            def_id: trait_ref.def_id,\n-            substs: tcx.intern_substs(&trait_ref.substs[1..])\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx, 'tcx> ty::PolyExistentialTraitRef<'tcx> {\n-    /// Object types don't have a self-type specified. Therefore, when\n-    /// we convert the principal trait-ref into a normal trait-ref,\n-    /// you must give *some* self-type. A common choice is `mk_err()`\n-    /// or some skolemized type.\n-    pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                        self_ty: Ty<'tcx>)\n-                        -> ty::PolyTraitRef<'tcx>  {\n-        // otherwise the escaping regions would be captured by the binder\n-        assert!(!self_ty.has_escaping_regions());\n-\n-        self.map_bound(|trait_ref| {\n-            ty::TraitRef {\n-                def_id: trait_ref.def_id,\n-                substs: tcx.mk_substs(\n-                    iter::once(self_ty.into()).chain(trait_ref.substs.iter().cloned()))\n-            }\n-        })\n-    }\n-}"}, {"sha": "456aa1aa66f112feaa3d25823c70083a121a33f4", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -1375,9 +1375,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n \n                 CastKind::Unsize => {\n+                    let &ty = ty;\n                     let trait_ref = ty::TraitRef {\n                         def_id: tcx.lang_items().coerce_unsized_trait().unwrap(),\n-                        substs: tcx.mk_substs_trait(op.ty(mir, tcx), &[ty]),\n+                        substs: tcx.mk_substs_trait(op.ty(mir, tcx), &[ty.into()]),\n                     };\n \n                     self.prove_trait_ref(trait_ref, location);"}, {"sha": "5dbe8d850bddc5c200f9874b91d487d95d5c14bc", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         },\n                     }\n                     let eq_def_id = self.hir.tcx().lang_items().eq_trait().unwrap();\n-                    let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty]);\n+                    let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty.into()]);\n \n                     // take the argument by reference\n                     let region_scope = self.topmost_scope();"}, {"sha": "71dd35c010d649ac776407f08a77cf8214d9ba23", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -24,7 +24,7 @@ use rustc::infer::InferCtxt;\n use rustc::ty::layout::{IntegerExt, Size};\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt, layout};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Kind, Substs};\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::symbol::Symbol;\n@@ -235,7 +235,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                         trait_def_id: DefId,\n                         method_name: &str,\n                         self_ty: Ty<'tcx>,\n-                        params: &[Ty<'tcx>])\n+                        params: &[Kind<'tcx>])\n                         -> (Ty<'tcx>, Literal<'tcx>) {\n         let method_name = Symbol::intern(method_name);\n         let substs = self.tcx.mk_substs_trait(self_ty, params);"}, {"sha": "bf544e5120cd81d691e6741c6da186ee4c4db7f8", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -12,7 +12,6 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::DropInPlaceFnLangItem;\n use rustc::traits;\n use rustc::ty::adjustment::CustomCoerceUnsized;\n-use rustc::ty::subst::Kind;\n use rustc::ty::{self, Ty, TyCtxt};\n \n pub use rustc::ty::Instance;\n@@ -89,10 +88,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs([\n-        Kind::from(self_ty),\n-        sig.inputs()[0].into(),\n-    ].iter().cloned());\n+    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n \n     debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n     Instance { def, substs }\n@@ -164,7 +160,7 @@ pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let trait_ref = ty::Binder::bind(ty::TraitRef {\n         def_id: def_id,\n-        substs: tcx.mk_substs_trait(source_ty, &[target_ty])\n+        substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()])\n     });\n \n     match tcx.codegen_fulfill_obligation( (ty::ParamEnv::reveal_all(), trait_ref)) {"}, {"sha": "f70a5ef57fe6d5a40fc8432e734604f6f0f02e4f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -14,12 +14,12 @@ use rustc::mir::*;\n use rustc::middle::lang_items;\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::subst::Substs;\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n use util::patch::MirPatch;\n \n-use std::{iter, u32};\n+use std::u32;\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum DropFlagState {\n@@ -520,7 +520,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let drop_trait = tcx.lang_items().drop_trait().unwrap();\n         let drop_fn = tcx.associated_items(drop_trait).next().unwrap();\n         let ty = self.place_ty(self.place);\n-        let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n+        let substs = tcx.mk_substs_trait(ty, &[]);\n \n         let ref_ty = tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n             ty,"}, {"sha": "5b3484dcccb85251de12d232a52f61296d829fbb", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -547,7 +547,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                                                          coerce_unsized_did,\n                                                          0,\n                                                          coerce_source,\n-                                                         &[coerce_target]));\n+                                                         &[coerce_target.into()]));\n \n         let mut has_unsized_tuple_coercion = false;\n "}, {"sha": "8a575c1478765af4ac401448391a6b8cd551455c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -56,8 +56,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     self.probe(|_| {\n-                        let fn_once_substs = tcx.mk_substs_trait(ty,\n-                            &[self.next_ty_var(TypeVariableOrigin::MiscVariable(span))]);\n+                        let fn_once_substs = tcx.mk_substs_trait(ty, &[\n+                            self.next_ty_var(TypeVariableOrigin::MiscVariable(span)).into()\n+                        ]);\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = trait_ref.to_poly_trait_ref();\n                         let obligation ="}, {"sha": "21197b4d85c061cc637330a7e41de0418600fd4b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -116,7 +116,6 @@ use std::collections::hash_map::Entry;\n use std::cmp;\n use std::fmt::Display;\n use std::mem::replace;\n-use std::iter;\n use std::ops::{self, Deref};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n@@ -1114,7 +1113,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n             if id == fn_id {\n                 match entry_type {\n                     config::EntryMain => {\n-                        let substs = fcx.tcx.mk_substs(iter::once(Kind::from(declared_ret_ty)));\n+                        let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n                         let trait_ref = ty::TraitRef::new(term_id, substs);\n                         let return_ty_span = decl.output.span();\n                         let cause = traits::ObligationCause::new("}, {"sha": "528f81a56126d979b25ce94f82ad354c24649c8b", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3df729c250c282c6876aca3f9ff1bc0e77e576c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=e3df729c250c282c6876aca3f9ff1bc0e77e576c", "patch": "@@ -387,7 +387,7 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n                                                     trait_def_id,\n                                                     0,\n                                                     source,\n-                                                    &[target]);\n+                                                    &[target.into()]);\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n \n         // Check that all transitive obligations are satisfied."}]}