{"sha": "43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWU3ODU0NTQzZWE5ODUxNmMzOTQ2ZTVmMTRmZjNiYjBmMThiZmQ=", "commit": {"author": {"name": "Julian Wollersberger", "email": "24991778+Julian-Wollersberger@users.noreply.github.com", "date": "2020-05-13T08:03:49Z"}, "committer": {"name": "Julian Wollersberger", "email": "24991778+Julian-Wollersberger@users.noreply.github.com", "date": "2020-05-13T08:05:04Z"}, "message": "Replace some usages of the old `unescape_` functions in AST, clippy and tests.", "tree": {"sha": "628cc02199910a84396af6793978447d916f4754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/628cc02199910a84396af6793978447d916f4754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "html_url": "https://github.com/rust-lang/rust/commit/43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/comments", "author": {"login": "Julian-Wollersberger", "id": 24991778, "node_id": "MDQ6VXNlcjI0OTkxNzc4", "avatar_url": "https://avatars.githubusercontent.com/u/24991778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-Wollersberger", "html_url": "https://github.com/Julian-Wollersberger", "followers_url": "https://api.github.com/users/Julian-Wollersberger/followers", "following_url": "https://api.github.com/users/Julian-Wollersberger/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-Wollersberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-Wollersberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-Wollersberger/subscriptions", "organizations_url": "https://api.github.com/users/Julian-Wollersberger/orgs", "repos_url": "https://api.github.com/users/Julian-Wollersberger/repos", "events_url": "https://api.github.com/users/Julian-Wollersberger/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-Wollersberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Julian-Wollersberger", "id": 24991778, "node_id": "MDQ6VXNlcjI0OTkxNzc4", "avatar_url": "https://avatars.githubusercontent.com/u/24991778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-Wollersberger", "html_url": "https://github.com/Julian-Wollersberger", "followers_url": "https://api.github.com/users/Julian-Wollersberger/followers", "following_url": "https://api.github.com/users/Julian-Wollersberger/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-Wollersberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-Wollersberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-Wollersberger/subscriptions", "organizations_url": "https://api.github.com/users/Julian-Wollersberger/orgs", "repos_url": "https://api.github.com/users/Julian-Wollersberger/repos", "events_url": "https://api.github.com/users/Julian-Wollersberger/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-Wollersberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cc63d693a3a1d130ba533994c895b56fed3769", "url": "https://api.github.com/repos/rust-lang/rust/commits/18cc63d693a3a1d130ba533994c895b56fed3769", "html_url": "https://github.com/rust-lang/rust/commit/18cc63d693a3a1d130ba533994c895b56fed3769"}], "stats": {"total": 137, "additions": 50, "deletions": 87}, "files": [{"sha": "4428d09902b92d6b8a3360e130737b33eb66b32d", "filename": "src/librustc_ast/util/literal.rs", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fliteral.rs?ref=43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "patch": "@@ -6,8 +6,7 @@ use crate::tokenstream::TokenTree;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_lexer::unescape::{unescape_byte, unescape_char};\n-use rustc_lexer::unescape::{unescape_byte_str, unescape_str};\n-use rustc_lexer::unescape::{unescape_raw_byte_str, unescape_raw_str};\n+use rustc_lexer::unescape::{unescape_byte_literal, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n@@ -59,45 +58,53 @@ impl LitKind {\n                 // new symbol because the string in the LitKind is different to the\n                 // string in the token.\n                 let s = symbol.as_str();\n-                let symbol = if s.contains(&['\\\\', '\\r'][..]) {\n-                    let mut buf = String::with_capacity(s.len());\n-                    let mut error = Ok(());\n-                    unescape_str(&s, &mut |_, unescaped_char| match unescaped_char {\n-                        Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n-                    });\n-                    error?;\n-                    Symbol::intern(&buf)\n-                } else {\n-                    symbol\n-                };\n+                let symbol =\n+                    if s.contains(&['\\\\', '\\r'][..]) {\n+                        let mut buf = String::with_capacity(s.len());\n+                        let mut error = Ok(());\n+                        unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {\n+                            match unescaped_char {\n+                                Ok(c) => buf.push(c),\n+                                Err(_) => error = Err(LitError::LexerError),\n+                            }\n+                        });\n+                        error?;\n+                        Symbol::intern(&buf)\n+                    } else {\n+                        symbol\n+                    };\n                 LitKind::Str(symbol, ast::StrStyle::Cooked)\n             }\n             token::StrRaw(n) => {\n                 // Ditto.\n                 let s = symbol.as_str();\n-                let symbol = if s.contains('\\r') {\n-                    let mut buf = String::with_capacity(s.len());\n-                    let mut error = Ok(());\n-                    unescape_raw_str(&s, &mut |_, unescaped_char| match unescaped_char {\n-                        Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n-                    });\n-                    error?;\n-                    buf.shrink_to_fit();\n-                    Symbol::intern(&buf)\n-                } else {\n-                    symbol\n-                };\n+                let symbol =\n+                    if s.contains('\\r') {\n+                        let mut buf = String::with_capacity(s.len());\n+                        let mut error = Ok(());\n+                        unescape_literal(&s, Mode::RawStr, &mut |_, unescaped_char| {\n+                            match unescaped_char {\n+                                Ok(c) => buf.push(c),\n+                                Err(_) => error = Err(LitError::LexerError),\n+                            }\n+                        });\n+                        error?;\n+                        buf.shrink_to_fit();\n+                        Symbol::intern(&buf)\n+                    } else {\n+                        symbol\n+                    };\n                 LitKind::Str(symbol, ast::StrStyle::Raw(n))\n             }\n             token::ByteStr => {\n                 let s = symbol.as_str();\n                 let mut buf = Vec::with_capacity(s.len());\n                 let mut error = Ok(());\n-                unescape_byte_str(&s, &mut |_, unescaped_byte| match unescaped_byte {\n-                    Ok(c) => buf.push(c),\n-                    Err(_) => error = Err(LitError::LexerError),\n+                unescape_byte_literal(&s, Mode::ByteStr, &mut |_, unescaped_byte| {\n+                    match unescaped_byte {\n+                        Ok(c) => buf.push(c),\n+                        Err(_) => error = Err(LitError::LexerError),\n+                    }\n                 });\n                 error?;\n                 buf.shrink_to_fit();\n@@ -108,9 +115,11 @@ impl LitKind {\n                 let bytes = if s.contains('\\r') {\n                     let mut buf = Vec::with_capacity(s.len());\n                     let mut error = Ok(());\n-                    unescape_raw_byte_str(&s, &mut |_, unescaped_byte| match unescaped_byte {\n-                        Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n+                    unescape_byte_literal(&s, Mode::RawByteStr, &mut |_, unescaped_byte| {\n+                        match unescaped_byte {\n+                            Ok(c) => buf.push(c),\n+                            Err(_) => error = Err(LitError::LexerError),\n+                        }\n                     });\n                     error?;\n                     buf.shrink_to_fit();"}, {"sha": "2a9e1b7cbc3460a440b35fc9da3785ab80fac262", "filename": "src/librustc_lexer/src/unescape.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs?ref=43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "patch": "@@ -111,54 +111,6 @@ pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n         .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n }\n \n-/// Takes a contents of a string literal (without quotes) and produces a\n-/// sequence of escaped characters or errors.\n-/// Values are returned through invoking of the provided callback.\n-pub fn unescape_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<char, EscapeError>),\n-{\n-    unescape_str_or_byte_str(literal_text, Mode::Str, callback)\n-}\n-\n-/// Takes a contents of a byte string literal (without quotes) and produces a\n-/// sequence of bytes or errors.\n-/// Values are returned through invoking of the provided callback.\n-pub fn unescape_byte_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<u8, EscapeError>),\n-{\n-    unescape_str_or_byte_str(literal_text, Mode::ByteStr, &mut |range, char| {\n-        callback(range, char.map(byte_from_char))\n-    })\n-}\n-\n-/// Takes a contents of a raw string literal (without quotes) and produces a\n-/// sequence of characters or errors.\n-/// Values are returned through invoking of the provided callback.\n-/// NOTE: Raw strings do not perform any explicit character escaping, here we\n-/// only translate CRLF to LF and produce errors on bare CR.\n-pub fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<char, EscapeError>),\n-{\n-    unescape_raw_str_or_byte_str(literal_text, Mode::Str, callback)\n-}\n-\n-/// Takes a contents of a raw byte string literal (without quotes) and produces a\n-/// sequence of bytes or errors.\n-/// Values are returned through invoking of the provided callback.\n-/// NOTE: Raw strings do not perform any explicit character escaping, here we\n-/// only translate CRLF to LF and produce errors on bare CR.\n-pub fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<u8, EscapeError>),\n-{\n-    unescape_raw_str_or_byte_str(literal_text, Mode::ByteStr, &mut |range, char| {\n-        callback(range, char.map(byte_from_char))\n-    })\n-}\n-\n /// What kind of literal do we parse.\n #[derive(Debug, Clone, Copy)]\n pub enum Mode {"}, {"sha": "f2b751a78f27fbd11a2a16987e54b7ddabf7253c", "filename": "src/librustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Flibrustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Flibrustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "patch": "@@ -102,7 +102,7 @@ fn test_unescape_char_good() {\n fn test_unescape_str_good() {\n     fn check(literal_text: &str, expected: &str) {\n         let mut buf = Ok(String::with_capacity(literal_text.len()));\n-        unescape_str(literal_text, &mut |range, c| {\n+        unescape_literal(literal_text, Mode::Str, &mut |range, c| {\n             if let Ok(b) = &mut buf {\n                 match c {\n                     Ok(c) => b.push(c),\n@@ -222,7 +222,7 @@ fn test_unescape_byte_good() {\n fn test_unescape_byte_str_good() {\n     fn check(literal_text: &str, expected: &[u8]) {\n         let mut buf = Ok(Vec::with_capacity(literal_text.len()));\n-        unescape_byte_str(literal_text, &mut |range, c| {\n+        unescape_byte_literal(literal_text, Mode::ByteStr, &mut |range, c| {\n             if let Ok(b) = &mut buf {\n                 match c {\n                     Ok(c) => b.push(c),\n@@ -246,7 +246,7 @@ fn test_unescape_byte_str_good() {\n fn test_unescape_raw_str() {\n     fn check(literal: &str, expected: &[(Range<usize>, Result<char, EscapeError>)]) {\n         let mut unescaped = Vec::with_capacity(literal.len());\n-        unescape_raw_str(literal, &mut |range, res| unescaped.push((range, res)));\n+        unescape_literal(literal, Mode::RawStr, &mut |range, res| unescaped.push((range, res)));\n         assert_eq!(unescaped, expected);\n     }\n \n@@ -258,7 +258,9 @@ fn test_unescape_raw_str() {\n fn test_unescape_raw_byte_str() {\n     fn check(literal: &str, expected: &[(Range<usize>, Result<u8, EscapeError>)]) {\n         let mut unescaped = Vec::with_capacity(literal.len());\n-        unescape_raw_byte_str(literal, &mut |range, res| unescaped.push((range, res)));\n+        unescape_byte_literal(literal, Mode::RawByteStr, &mut |range, res| {\n+            unescaped.push((range, res))\n+        });\n         assert_eq!(unescaped, expected);\n     }\n "}, {"sha": "26bf463bd2922eefd941e9bedd4d106eb6f9a011", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ae7854543ea98516c3946e5f14ff3bb0f18bfd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=43ae7854543ea98516c3946e5f14ff3bb0f18bfd", "patch": "@@ -483,8 +483,8 @@ fn check_newlines(fmtstr: &StrLit) -> bool {\n     };\n \n     match fmtstr.style {\n-        StrStyle::Cooked => unescape::unescape_str(contents, &mut cb),\n-        StrStyle::Raw(_) => unescape::unescape_raw_str(contents, &mut cb),\n+        StrStyle::Cooked => unescape::unescape_literal(contents, unescape::Mode::Str, &mut cb),\n+        StrStyle::Raw(_) => unescape::unescape_literal(contents, unescape::Mode::RawStr, &mut cb),\n     }\n \n     should_lint"}]}