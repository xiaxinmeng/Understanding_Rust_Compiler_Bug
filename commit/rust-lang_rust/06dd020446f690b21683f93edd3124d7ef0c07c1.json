{"sha": "06dd020446f690b21683f93edd3124d7ef0c07c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZGQwMjA0NDZmNjkwYjIxNjgzZjkzZWRkMzEyNGQ3ZWYwYzA3YzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T11:35:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T11:35:56Z"}, "message": "Rustup to rustc 1.34.0-nightly (a9410cd1a 2019-02-15)", "tree": {"sha": "caf6d0a76461476178e772e0c1887d1d039fe6d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf6d0a76461476178e772e0c1887d1d039fe6d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06dd020446f690b21683f93edd3124d7ef0c07c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06dd020446f690b21683f93edd3124d7ef0c07c1", "html_url": "https://github.com/rust-lang/rust/commit/06dd020446f690b21683f93edd3124d7ef0c07c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06dd020446f690b21683f93edd3124d7ef0c07c1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408f27badeb210f9cd824b98627c9b0ced73ed0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/408f27badeb210f9cd824b98627c9b0ced73ed0b", "html_url": "https://github.com/rust-lang/rust/commit/408f27badeb210f9cd824b98627c9b0ced73ed0b"}], "stats": {"total": 204, "additions": 108, "deletions": 96}, "files": [{"sha": "0d1507d9eff1ac04f7111b3bcffc718d621a616c", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/06dd020446f690b21683f93edd3124d7ef0c07c1/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/06dd020446f690b21683f93edd3124d7ef0c07c1/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=06dd020446f690b21683f93edd3124d7ef0c07c1", "patch": "@@ -1,32 +1,32 @@\n-From 1119ae3f160d7e89064583f1d9d6685bc2e6928b Mon Sep 17 00:00:00 2001\n+From 8080d322c8396b7b234cc92eb675f697c55f7298 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Wed, 13 Feb 2019 14:37:22 +0100\n+Date: Sat, 16 Feb 2019 12:09:42 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n  src/libcore/clone.rs             |   4 +-\n  src/libcore/cmp.rs               |   6 +-\n  src/libcore/default.rs           |   2 -\n- src/libcore/fmt/num.rs           |   6 +-\n- src/libcore/hash/mod.rs          |  20 -------\n+ src/libcore/fmt/num.rs           |   8 +-\n+ src/libcore/hash/mod.rs          |  20 -----\n  src/libcore/iter/range.rs        |   1 -\n  src/libcore/iter/traits/accum.rs |   2 +-\n  src/libcore/lib.rs               |   2 -\n  src/libcore/marker.rs            |   4 +-\n  src/libcore/mem.rs               |   2 -\n- src/libcore/num/mod.rs           | 100 +++++++++----------------------\n- src/libcore/num/wrapping.rs      |  14 ++---\n- src/libcore/ops/arith.rs         |  22 +++----\n- src/libcore/ops/bit.rs           |  30 ++++------\n- src/libcore/sync/atomic.rs       |  30 ----------\n- src/libcore/tests/iter.rs        |  15 -----\n- src/libcore/tests/num/mod.rs     |  18 ------\n- src/libcore/time.rs              | 123 ---------------------------------------\n- src/libstd/lib.rs                |   4 --\n- src/libstd/net/ip.rs             |  20 -------\n+ src/libcore/num/mod.rs           | 100 +++++++------------------\n+ src/libcore/num/wrapping.rs      |  14 ++--\n+ src/libcore/ops/arith.rs         |  22 +++---\n+ src/libcore/ops/bit.rs           |  30 +++-----\n+ src/libcore/sync/atomic.rs       |  30 --------\n+ src/libcore/tests/iter.rs        |  15 ----\n+ src/libcore/tests/num/mod.rs     |  18 -----\n+ src/libcore/time.rs              | 123 -------------------------------\n+ src/libstd/lib.rs                |   4 -\n+ src/libstd/net/ip.rs             |  20 -----\n  src/libstd/num.rs                |   2 +-\n  src/libstd/panic.rs              |   6 --\n- 22 files changed, 63 insertions(+), 370 deletions(-)\n+ 22 files changed, 63 insertions(+), 372 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n index ed90b7d..1739f91 100644\n@@ -94,7 +94,7 @@ index 5ad05b3..1b5a1d1 100644\n  default_impl! { f32, 0.0f32, \"Returns the default value of `0.0`\" }\n  default_impl! { f64, 0.0f64, \"Returns the default value of `0.0`\" }\n diff --git a/src/libcore/fmt/num.rs b/src/libcore/fmt/num.rs\n-index 3a81233..f889d57 100644\n+index b9fa364..cd9ee01 100644\n --- a/src/libcore/fmt/num.rs\n +++ b/src/libcore/fmt/num.rs\n @@ -17,7 +17,6 @@ trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n@@ -117,22 +117,21 @@ index 3a81233..f889d57 100644\n  \n  /// A type that represents a specific radix\n  #[doc(hidden)]\n-@@ -176,7 +174,6 @@ integer! { i8, u8 }\n+@@ -176,8 +174,6 @@ integer! { i8, u8 }\n  integer! { i16, u16 }\n  integer! { i32, u32 }\n  integer! { i64, u64 }\n -integer! { i128, u128 }\n+-\n  \n- const DEC_DIGITS_LUT: &'static[u8] =\n+ static DEC_DIGITS_LUT: &[u8; 200] =\n      b\"0001020304050607080910111213141516171819\\\n-@@ -252,7 +249,6 @@ macro_rules! impl_Display {\n- \n- impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n- impl_Display!(i64, u64: to_u64);\n--impl_Display!(i128, u128: to_u128);\n- #[cfg(target_pointer_width = \"16\")]\n- impl_Display!(isize, usize: to_u16);\n- #[cfg(target_pointer_width = \"32\")]\n+@@ -274,5 +270,3 @@ mod imp {\n+     impl_Display!(i8, u8, i16, u16, i32, u32, isize, usize as u32 via to_u32 named fmt_u32);\n+     impl_Display!(i64, u64 as u64 via to_u64 named fmt_u64);\n+ }\n+-\n+-impl_Display!(i128, u128 as u128 via to_u128 named fmt_u128);\n diff --git a/src/libcore/hash/mod.rs b/src/libcore/hash/mod.rs\n index d5d29c9..f98f382 100644\n --- a/src/libcore/hash/mod.rs\n@@ -218,10 +217,10 @@ index dfe1d2a..06cc578 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 9b37104..787b10b 100644\n+index cd88d3e..532d680 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -147,14 +147,12 @@ mod uint_macros;\n+@@ -148,14 +148,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -237,7 +236,7 @@ index 9b37104..787b10b 100644\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 457d556..91425fb 100644\n+index c4b41f1..0ade53b 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n @@ -664,8 +664,8 @@ mod copy_impls {\n@@ -252,7 +251,7 @@ index 457d556..91425fb 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 2a493e8..a7dba54 100644\n+index 3f7455a..7a0c44a 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -164,12 +164,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -898,10 +897,11 @@ index 51a6017..e6631db 100644\n  \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1977,19 +1975,6 @@ fn test_step_replace_signed() {\n+@@ -1976,19 +1974,6 @@ fn test_step_replace_signed() {\n+     assert_eq!(y, 5);\n  }\n  \n- #[test]\n+-#[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n -    let y = x.replace_zero();\n@@ -914,10 +914,9 @@ index 51a6017..e6631db 100644\n -    assert_eq!(y, 5);\n -}\n -\n--#[test]\n+ #[test]\n  fn test_rev_try_folds() {\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n-     assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n index ab638e0..4a2aa4c 100644\n --- a/src/libcore/tests/num/mod.rs\n@@ -1136,10 +1135,10 @@ index ac7e117..0dfd856 100644\n      ///\n      /// # Examples\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index 3c358dc..2dd5699 100644\n+index 9a4232d..592fea0 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -395,8 +395,6 @@ pub use core::i16;\n+@@ -392,8 +392,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -1148,7 +1147,7 @@ index 3c358dc..2dd5699 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -429,8 +427,6 @@ pub use alloc_crate::string;\n+@@ -426,8 +424,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n@@ -1202,7 +1201,7 @@ index c80b9a5..e32a6b3 100644\n  #[cfg(test)] use fmt;\n  #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n-index d27f6ca..8ac2a44 100644\n+index 862fdf0..171ebeb 100644\n --- a/src/libstd/panic.rs\n +++ b/src/libstd/panic.rs\n @@ -254,9 +254,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n@@ -1226,5 +1225,4 @@ index d27f6ca..8ac2a44 100644\n  #[cfg(target_has_atomic = \"8\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n -- \n-2.11.0\n-\n+2.17.2 (Apple Git-113)"}, {"sha": "844c2479fd5f89b78653b37bd5262f7694f59572", "filename": "src/base.rs", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=06dd020446f690b21683f93edd3124d7ef0c07c1", "patch": "@@ -392,6 +392,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         ty::Float(_) => trans_float_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n                         ty::Char => trans_char_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n                         ty::RawPtr(..) => trans_ptr_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n+                        ty::FnPtr(..) => trans_ptr_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n                         _ => unimplemented!(\"binop {:?} for {:?}\", bin_op, ty),\n                     };\n                     lval.write_cvalue(fx, res);\n@@ -992,49 +993,49 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n     rhs: CValue<'tcx>,\n     ret_ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n-    match lhs.layout().ty.sty {\n-        ty::RawPtr(TypeAndMut { ty, mutbl: _ }) => {\n-            if ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n-                binop_match! {\n-                    fx, bin_op, false, lhs, rhs, ret_ty, \"ptr\";\n-                    Add (_) bug;\n-                    Sub (_) bug;\n-                    Mul (_) bug;\n-                    Div (_) bug;\n-                    Rem (_) bug;\n-                    BitXor (_) bug;\n-                    BitAnd (_) bug;\n-                    BitOr (_) bug;\n-                    Shl (_) bug;\n-                    Shr (_) bug;\n-\n-                    Eq (_) icmp(Equal);\n-                    Lt (_) icmp(UnsignedLessThan);\n-                    Le (_) icmp(UnsignedLessThanOrEqual);\n-                    Ne (_) icmp(NotEqual);\n-                    Ge (_) icmp(UnsignedGreaterThanOrEqual);\n-                    Gt (_) icmp(UnsignedGreaterThan);\n-\n-                    Offset (_) iadd;\n-                }\n-            } else {\n-                let lhs = lhs.load_value_pair(fx).0;\n-                let rhs = rhs.load_value_pair(fx).0;\n-                let res = match bin_op {\n-                    BinOp::Eq => fx.bcx.ins().icmp(IntCC::Equal, lhs, rhs),\n-                    BinOp::Ne => fx.bcx.ins().icmp(IntCC::NotEqual, lhs, rhs),\n-                    _ => unimplemented!(\n-                        \"trans_ptr_binop({:?}, <fat ptr>, <fat ptr>) not implemented\",\n-                        bin_op\n-                    ),\n-                };\n-\n-                assert_eq!(fx.tcx.types.bool, ret_ty);\n-                let ret_layout = fx.layout_of(ret_ty);\n-                CValue::ByVal(fx.bcx.ins().bint(types::I8, res), ret_layout)\n-            }\n-        }\n+    let not_fat = match lhs.layout().ty.sty {\n+        ty::RawPtr(TypeAndMut { ty, mutbl: _ }) => ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()),\n+        ty::FnPtr(..) => true,\n         _ => bug!(\"trans_ptr_binop on non ptr\"),\n+    };\n+    if not_fat {\n+        binop_match! {\n+            fx, bin_op, false, lhs, rhs, ret_ty, \"ptr\";\n+            Add (_) bug;\n+            Sub (_) bug;\n+            Mul (_) bug;\n+            Div (_) bug;\n+            Rem (_) bug;\n+            BitXor (_) bug;\n+            BitAnd (_) bug;\n+            BitOr (_) bug;\n+            Shl (_) bug;\n+            Shr (_) bug;\n+\n+            Eq (_) icmp(Equal);\n+            Lt (_) icmp(UnsignedLessThan);\n+            Le (_) icmp(UnsignedLessThanOrEqual);\n+            Ne (_) icmp(NotEqual);\n+            Ge (_) icmp(UnsignedGreaterThanOrEqual);\n+            Gt (_) icmp(UnsignedGreaterThan);\n+\n+            Offset (_) iadd;\n+        }\n+    } else {\n+        let lhs = lhs.load_value_pair(fx).0;\n+        let rhs = rhs.load_value_pair(fx).0;\n+        let res = match bin_op {\n+            BinOp::Eq => fx.bcx.ins().icmp(IntCC::Equal, lhs, rhs),\n+            BinOp::Ne => fx.bcx.ins().icmp(IntCC::NotEqual, lhs, rhs),\n+            _ => unimplemented!(\n+                \"trans_ptr_binop({:?}, <fat ptr>, <fat ptr>) not implemented\",\n+                bin_op\n+            ),\n+        };\n+\n+        assert_eq!(fx.tcx.types.bool, ret_ty);\n+        let ret_layout = fx.layout_of(ret_ty);\n+        CValue::ByVal(fx.bcx.ins().bint(types::I8, res), ret_layout)\n     }\n }\n "}, {"sha": "29c5a0f38e455c6b6c43d95218e828f1602bc5f2", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=06dd020446f690b21683f93edd3124d7ef0c07c1", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::interpret::{\n };\n use rustc::ty::{Const, LazyConst};\n use rustc_mir::interpret::{\n-    EvalContext, MPlaceTy, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer, StackPopCleanup,\n+    EvalContext, MPlaceTy, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer, StackPopCleanup, ImmTy,\n };\n \n use cranelift_module::*;\n@@ -337,10 +337,8 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     fn ptr_op(\n         _: &EvalContext<'a, 'mir, 'tcx, Self>,\n         _: mir::BinOp,\n-        _: Scalar,\n-        _: TyLayout<'tcx>,\n-        _: Scalar,\n-        _: TyLayout<'tcx>,\n+        _: ImmTy<'tcx>,\n+        _: ImmTy<'tcx>,\n     ) -> EvalResult<'tcx, (Scalar, bool)> {\n         panic!();\n     }"}, {"sha": "ca349de4848d9ee2ca22f49191f49a467c58e819", "filename": "src/link.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=06dd020446f690b21683f93edd3124d7ef0c07c1", "patch": "@@ -291,7 +291,7 @@ fn link_args(cmd: &mut dyn Linker,\n              codegen_results: &CodegenResults) {\n \n     // Linker plugins should be specified early in the list of arguments\n-    cmd.cross_lang_lto();\n+    cmd.linker_plugin_lto();\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n@@ -306,13 +306,30 @@ fn link_args(cmd: &mut dyn Linker,\n     }\n     cmd.output_filename(out_filename);\n \n+    if crate_type == config::CrateType::Executable &&\n+       sess.target.target.options.is_like_windows {\n+        if let Some(ref s) = codegen_results.windows_subsystem {\n+            cmd.subsystem(s);\n+        }\n+    }\n+\n     // If we're building a dynamic library then some platforms need to make sure\n     // that all symbols are exported correctly from the dynamic library.\n     if crate_type != config::CrateType::Executable ||\n        sess.target.target.options.is_like_emscripten {\n         cmd.export_symbols(tmpdir, crate_type);\n     }\n \n+    // When linking a dynamic library, we put the metadata into a section of the\n+    // executable. This metadata is in a separate object file from the main\n+    // object file, so we link that in here.\n+    if crate_type == config::CrateType::Dylib ||\n+       crate_type == config::CrateType::ProcMacro {\n+        if let Some(obj) = codegen_results.metadata_module.object.as_ref() {\n+            cmd.add_object(obj);\n+        }\n+    }\n+\n     let obj = codegen_results.allocator_module\n         .as_ref()\n         .and_then(|m| m.object.as_ref());\n@@ -409,7 +426,7 @@ fn link_args(cmd: &mut dyn Linker,\n     //\n     // The rationale behind this ordering is that those items lower down in the\n     // list can't depend on items higher up in the list. For example nothing can\n-    // depend on what we just generated (e.g. that'd be a circular dependency).\n+    // depend on what we just generated (e.g., that'd be a circular dependency).\n     // Upstream rust libraries are not allowed to depend on our local native\n     // libraries as that would violate the structure of the DAG, in that\n     // scenario they are required to link to them as well in a shared fashion.\n@@ -418,7 +435,7 @@ fn link_args(cmd: &mut dyn Linker,\n     // well, but they also can't depend on what we just started to add to the\n     // link line. And finally upstream native libraries can't depend on anything\n     // in this DAG so far because they're only dylibs and dylibs can only depend\n-    // on other dylibs (e.g. other native deps).\n+    // on other dylibs (e.g., other native deps).\n     add_local_native_libraries(cmd, sess, codegen_results);\n     add_upstream_rust_crates(cmd, sess, codegen_results, crate_type, tmpdir);\n     add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);"}, {"sha": "517455e927522af9ed2366e802bea31f4ac2ab42", "filename": "src/link_copied.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Flink_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dd020446f690b21683f93edd3124d7ef0c07c1/src%2Flink_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink_copied.rs?ref=06dd020446f690b21683f93edd3124d7ef0c07c1", "patch": "@@ -177,8 +177,7 @@ pub fn exec_linker(sess: &Session, cmd: &mut Command, out_filename: &Path, tmpdi\n                 // ensure the line is interpreted as one whole argument.\n                 for c in self.arg.chars() {\n                     match c {\n-                        '\\\\' |\n-                        ' ' => write!(f, \"\\\\{}\", c)?,\n+                        '\\\\' | ' ' => write!(f, \"\\\\{}\", c)?,\n                         c => write!(f, \"{}\", c)?,\n                     }\n                 }\n@@ -298,7 +297,7 @@ pub fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n     // compiler-builtins are always placed last to ensure that they're\n     // linked correctly.\n     // We must always link the `compiler_builtins` crate statically. Even if it\n-    // was already \"included\" in a dylib (e.g. `libstd` when `-C prefer-dynamic`\n+    // was already \"included\" in a dylib (e.g., `libstd` when `-C prefer-dynamic`\n     // is used)\n     if let Some(cnum) = compiler_builtins {\n         add_static_crate(cmd, sess, codegen_results, tmpdir, crate_type, cnum);\n@@ -345,7 +344,6 @@ pub fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n         for f in archive.src_files() {\n             if f.ends_with(RLIB_BYTECODE_EXTENSION) || f == METADATA_FILENAME {\n                 archive.remove_file(&f);\n-                continue\n             }\n         }\n \n@@ -479,7 +477,7 @@ pub fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n             // because a `dylib` can be reused as an intermediate artifact.\n             //\n             // Note, though, that we don't want to include the whole of a\n-            // compiler-builtins crate (e.g. compiler-rt) because it'll get\n+            // compiler-builtins crate (e.g., compiler-rt) because it'll get\n             // repeatedly linked anyway.\n             if crate_type == config::CrateType::Dylib &&\n                 codegen_results.crate_info.compiler_builtins != Some(cnum) {\n@@ -628,7 +626,7 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n         Lto::Thin => {\n             // If we defer LTO to the linker, we haven't run LTO ourselves, so\n             // any upstream object files have not been copied yet.\n-            !sess.opts.debugging_opts.cross_lang_lto.enabled()\n+            !sess.opts.cg.linker_plugin_lto.enabled()\n         }\n         Lto::No |\n         Lto::ThinLocal => false,"}]}