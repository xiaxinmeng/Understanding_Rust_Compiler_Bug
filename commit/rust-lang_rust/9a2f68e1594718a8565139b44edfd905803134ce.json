{"sha": "9a2f68e1594718a8565139b44edfd905803134ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMmY2OGUxNTk0NzE4YTg1NjUxMzliNDRlZGZkOTA1ODAzMTM0Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-03T14:40:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-03T14:40:37Z"}, "message": "Auto merge of #25966 - pelmers:save-api, r=nrc\n\nMove EnumData into the API, and change a few spots where we use &String[..] when it is equivalent to &String.\r\n\r\nr? @nrc", "tree": {"sha": "1f025d27c78241ec5fc7b8716b44ba790a71a4f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f025d27c78241ec5fc7b8716b44ba790a71a4f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2f68e1594718a8565139b44edfd905803134ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2f68e1594718a8565139b44edfd905803134ce", "html_url": "https://github.com/rust-lang/rust/commit/9a2f68e1594718a8565139b44edfd905803134ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2f68e1594718a8565139b44edfd905803134ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b56d73dc0e8b988f91c44fd9f9e40331451796b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b56d73dc0e8b988f91c44fd9f9e40331451796b", "html_url": "https://github.com/rust-lang/rust/commit/5b56d73dc0e8b988f91c44fd9f9e40331451796b"}, {"sha": "1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "html_url": "https://github.com/rust-lang/rust/commit/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae"}], "stats": {"total": 179, "additions": 98, "deletions": 81}, "files": [{"sha": "0513653eb24f5d26bdbb5dbaae59cc58a0624e57", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 74, "deletions": 79, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f68e1594718a8565139b44edfd905803134ce/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f68e1594718a8565139b44edfd905803134ce/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=9a2f68e1594718a8565139b44edfd905803134ce", "patch": "@@ -169,7 +169,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             };\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,\n-                                     &qualname[..],\n+                                     &qualname,\n                                      self.cur_scope);\n         }\n     }\n@@ -192,7 +192,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             };\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,\n-                                     &qualname[..],\n+                                     &qualname,\n                                      self.cur_scope);\n         }\n     }\n@@ -211,7 +211,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         let (ref span, ref qualname) = sub_paths[len-2];\n         self.fmt.sub_type_ref_str(path.span,\n                                   *span,\n-                                  &qualname[..]);\n+                                  &qualname);\n \n         // write the other sub-paths\n         if len <= 2 {\n@@ -221,7 +221,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         for &(ref span, ref qualname) in sub_paths {\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,\n-                                     &qualname[..],\n+                                     &qualname,\n                                      self.cur_scope);\n         }\n     }\n@@ -293,7 +293,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                                     id,\n                                     qualname,\n                                     &path_to_string(p),\n-                                    &typ[..]);\n+                                    &typ);\n             }\n         }\n     }\n@@ -451,9 +451,9 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                     Some(sub_span) => self.fmt.field_str(field.span,\n                                                          Some(sub_span),\n                                                          field.node.id,\n-                                                         &name[..],\n-                                                         &qualname[..],\n-                                                         &typ[..],\n+                                                         &name,\n+                                                         &qualname,\n+                                                         &typ,\n                                                          scope_id),\n                     None => self.sess.span_bug(field.span,\n                                                &format!(\"Could not find sub-span for field {}\",\n@@ -485,7 +485,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             self.fmt.typedef_str(full_span,\n                                  Some(*param_ss),\n                                  param.id,\n-                                 &name[..],\n+                                 &name,\n                                  \"\");\n         }\n         self.visit_generics(generics);\n@@ -561,7 +561,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                             sub_span,\n                             id,\n                             &get_ident((*ident).clone()),\n-                            &qualname[..],\n+                            &qualname,\n                             &self.span.snippet(expr.span),\n                             &ty_to_string(&*typ),\n                             self.cur_scope);\n@@ -587,82 +587,77 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                             sub_span,\n                             item.id,\n                             ctor_id,\n-                            &qualname[..],\n+                            &qualname,\n                             self.cur_scope,\n-                            &val[..]);\n+                            &val);\n \n         // fields\n         for field in &def.fields {\n-            self.process_struct_field_def(field, &qualname[..], item.id);\n+            self.process_struct_field_def(field, &qualname, item.id);\n             self.visit_ty(&*field.node.ty);\n         }\n \n-        self.process_generic_params(ty_params, item.span, &qualname[..], item.id);\n+        self.process_generic_params(ty_params, item.span, &qualname, item.id);\n     }\n \n     fn process_enum(&mut self,\n                     item: &ast::Item,\n                     enum_definition: &ast::EnumDef,\n                     ty_params: &ast::Generics) {\n-        let enum_name = format!(\"::{}\", self.analysis.ty_cx.map.path_to_string(item.id));\n-        let val = self.span.snippet(item.span);\n-        match self.span.sub_span_after_keyword(item.span, keywords::Enum) {\n-            Some(sub_span) => self.fmt.enum_str(item.span,\n-                                                Some(sub_span),\n-                                                item.id,\n-                                                &enum_name[..],\n-                                                self.cur_scope,\n-                                                &val[..]),\n-            None => self.sess.span_bug(item.span,\n-                                       &format!(\"Could not find subspan for enum {}\",\n-                                               enum_name)),\n-        }\n-        for variant in &enum_definition.variants {\n-            let name = get_ident(variant.node.name);\n-            let name = &name;\n-            let mut qualname = enum_name.clone();\n-            qualname.push_str(\"::\");\n-            qualname.push_str(name);\n-            let val = self.span.snippet(variant.span);\n-            match variant.node.kind {\n-                ast::TupleVariantKind(ref args) => {\n-                    // first ident in span is the variant's name\n-                    self.fmt.tuple_variant_str(variant.span,\n-                                               self.span.span_for_first_ident(variant.span),\n-                                               variant.node.id,\n-                                               name,\n-                                               &qualname[..],\n-                                               &enum_name[..],\n-                                               &val[..],\n-                                               item.id);\n-                    for arg in args {\n-                        self.visit_ty(&*arg.ty);\n+        let enum_data = self.save_ctxt.get_item_data(item);\n+        if let super::Data::EnumData(enum_data) = enum_data {\n+            self.fmt.enum_str(item.span,\n+                              Some(enum_data.span),\n+                              enum_data.id,\n+                              &enum_data.qualname,\n+                              self.cur_scope,\n+                              &enum_data.value);\n+            for variant in &enum_definition.variants {\n+                let name = &get_ident(variant.node.name);\n+                let mut qualname = enum_data.qualname.clone();\n+                qualname.push_str(\"::\");\n+                qualname.push_str(name);\n+                let val = self.span.snippet(variant.span);\n+                match variant.node.kind {\n+                    ast::TupleVariantKind(ref args) => {\n+                        // first ident in span is the variant's name\n+                        self.fmt.tuple_variant_str(variant.span,\n+                                                   self.span.span_for_first_ident(variant.span),\n+                                                   variant.node.id,\n+                                                   name,\n+                                                   &qualname,\n+                                                   &enum_data.qualname,\n+                                                   &val,\n+                                                   item.id);\n+                        for arg in args {\n+                            self.visit_ty(&*arg.ty);\n+                        }\n                     }\n-                }\n-                ast::StructVariantKind(ref struct_def) => {\n-                    let ctor_id = match struct_def.ctor_id {\n-                        Some(node_id) => node_id,\n-                        None => -1,\n-                    };\n-                    self.fmt.struct_variant_str(\n-                        variant.span,\n-                        self.span.span_for_first_ident(variant.span),\n-                        variant.node.id,\n-                        ctor_id,\n-                        &qualname[..],\n-                        &enum_name[..],\n-                        &val[..],\n-                        item.id);\n-\n-                    for field in &struct_def.fields {\n-                        self.process_struct_field_def(field, &qualname, variant.node.id);\n-                        self.visit_ty(&*field.node.ty);\n+                    ast::StructVariantKind(ref struct_def) => {\n+                        let ctor_id = match struct_def.ctor_id {\n+                            Some(node_id) => node_id,\n+                            None => -1,\n+                        };\n+                        self.fmt.struct_variant_str(variant.span,\n+                                                    self.span.span_for_first_ident(variant.span),\n+                                                    variant.node.id,\n+                                                    ctor_id,\n+                                                    &qualname,\n+                                                    &enum_data.qualname,\n+                                                    &val,\n+                                                    item.id);\n+\n+                        for field in &struct_def.fields {\n+                            self.process_struct_field_def(field, &qualname, variant.node.id);\n+                            self.visit_ty(&*field.node.ty);\n+                        }\n                     }\n                 }\n             }\n+            self.process_generic_params(ty_params, item.span, &enum_data.qualname, item.id);\n+        } else {\n+            self.sess.span_bug(item.span, \"expected EnumData\");\n         }\n-\n-        self.process_generic_params(ty_params, item.span, &enum_name[..], item.id);\n     }\n \n     fn process_impl(&mut self,\n@@ -727,9 +722,9 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         self.fmt.trait_str(item.span,\n                            sub_span,\n                            item.id,\n-                           &qualname[..],\n+                           &qualname,\n                            self.cur_scope,\n-                           &val[..]);\n+                           &val);\n \n         // super-traits\n         for super_bound in &**trait_refs {\n@@ -761,7 +756,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         }\n \n         // walk generics and methods\n-        self.process_generic_params(generics, item.span, &qualname[..], item.id);\n+        self.process_generic_params(generics, item.span, &qualname, item.id);\n         for method in methods {\n             self.visit_trait_item(method)\n         }\n@@ -1001,7 +996,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                                self.cur_scope);\n \n         // walk receiver and args\n-        visit::walk_exprs(self, &args[..]);\n+        visit::walk_exprs(self, &args);\n     }\n \n     fn process_pat(&mut self, p:&ast::Pat) {\n@@ -1160,7 +1155,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                           item.id,\n                                           cnum,\n                                           name,\n-                                          &location[..],\n+                                          &location,\n                                           self.cur_scope);\n             }\n             ast::ItemFn(ref decl, _, _, _, ref ty_params, ref body) =>\n@@ -1195,8 +1190,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 self.fmt.typedef_str(item.span,\n                                      sub_span,\n                                      item.id,\n-                                     &qualname[..],\n-                                     &value[..]);\n+                                     &qualname,\n+                                     &value);\n \n                 self.visit_ty(&**ty);\n                 self.process_generic_params(ty_params, item.span, &qualname, item.id);\n@@ -1348,7 +1343,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n \n                 let mut id = String::from_str(\"$\");\n                 id.push_str(&ex.id.to_string());\n-                self.process_formals(&decl.inputs, &id[..]);\n+                self.process_formals(&decl.inputs, &id);\n \n                 // walk arg and return types\n                 for arg in &decl.inputs {\n@@ -1408,7 +1403,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                           Some(p.span),\n                                           id,\n                                           &path_to_string(p),\n-                                          &value[..],\n+                                          &value,\n                                           \"\")\n                 }\n                 def::DefVariant(..) | def::DefTy(..) | def::DefStruct(..) => {\n@@ -1466,8 +1461,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                   sub_span,\n                                   id,\n                                   &path_to_string(p),\n-                                  &value[..],\n-                                  &typ[..]);\n+                                  &value,\n+                                  &typ);\n         }\n \n         // Just walk the initialiser and type (don't want to walk the pattern again)."}, {"sha": "c6dc1c9b7074eff3c8c1be70086f09c0445fae25", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f68e1594718a8565139b44edfd905803134ce/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f68e1594718a8565139b44edfd905803134ce/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=9a2f68e1594718a8565139b44edfd905803134ce", "patch": "@@ -51,6 +51,8 @@ pub enum Data {\n     VariableData(VariableData),\n     /// Data for modules.\n     ModData(ModData),\n+    /// Data for Enums.\n+    EnumData(EnumData),\n \n     /// Data for the use of some variable (e.g., the use of a local variable, which\n     /// will refere to that variables declaration).\n@@ -88,6 +90,14 @@ pub struct ModData {\n     pub filename: String,\n }\n \n+/// Data for enum declarations.\n+pub struct EnumData {\n+    pub id: NodeId,\n+    pub value: String,\n+    pub qualname: String,\n+    pub span: Span,\n+}\n+\n /// Data for the use of some item (e.g., the use of a local variable, which\n /// will refere to that variables declaration (by ref_id)).\n pub struct VariableRefData {\n@@ -188,7 +198,19 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     scope: self.analysis.ty_cx.map.get_parent(item.id),\n                     filename: filename,\n                 })\n-            }\n+            },\n+            ast::ItemEnum(..) => {\n+                let enum_name = format!(\"::{}\", self.analysis.ty_cx.map.path_to_string(item.id));\n+                let val = self.span_utils.snippet(item.span);\n+                let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Enum);\n+\n+                Data::EnumData(EnumData {\n+                    id: item.id,\n+                    value: val,\n+                    span: sub_span.unwrap(),\n+                    qualname: enum_name,\n+                })\n+            },\n             _ => {\n                 // FIXME\n                 unimplemented!();\n@@ -345,7 +367,7 @@ pub fn process_crate(sess: &Session,\n \n     let mut visitor = dump_csv::DumpCsvVisitor::new(sess, analysis, output_file);\n \n-    visitor.dump_crate_info(&cratename[..], krate);\n+    visitor.dump_crate_info(&cratename, krate);\n     visit::walk_crate(&mut visitor, krate);\n }\n "}]}