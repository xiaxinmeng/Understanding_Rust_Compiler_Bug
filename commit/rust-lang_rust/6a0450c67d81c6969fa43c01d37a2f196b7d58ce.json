{"sha": "6a0450c67d81c6969fa43c01d37a2f196b7d58ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDQ1MGM2N2Q4MWM2OTY5ZmE0M2MwMWQzN2EyZjE5NmI3ZDU4Y2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T00:16:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:23Z"}, "message": "librustc: De-`@mut` the `tc_cache`", "tree": {"sha": "de794de73c02e08c16a35cdfdaac5ded3b06dec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de794de73c02e08c16a35cdfdaac5ded3b06dec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0450c67d81c6969fa43c01d37a2f196b7d58ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0450c67d81c6969fa43c01d37a2f196b7d58ce", "html_url": "https://github.com/rust-lang/rust/commit/6a0450c67d81c6969fa43c01d37a2f196b7d58ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0450c67d81c6969fa43c01d37a2f196b7d58ce/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2e6c1e9516ecf01378e4e54fd857e069535826", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2e6c1e9516ecf01378e4e54fd857e069535826", "html_url": "https://github.com/rust-lang/rust/commit/ba2e6c1e9516ecf01378e4e54fd857e069535826"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "82cee4b68a6af3d65f278845b910c46812c27042", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a0450c67d81c6969fa43c01d37a2f196b7d58ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0450c67d81c6969fa43c01d37a2f196b7d58ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6a0450c67d81c6969fa43c01d37a2f196b7d58ce", "patch": "@@ -309,7 +309,7 @@ struct ctxt_ {\n     rcache: creader_cache,\n     short_names_cache: RefCell<HashMap<t, @str>>,\n     needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n-    tc_cache: @mut HashMap<uint, TypeContents>,\n+    tc_cache: RefCell<HashMap<uint, TypeContents>>,\n     ast_ty_to_ty_cache: @mut HashMap<NodeId, ast_ty_to_ty_cache_entry>,\n     enum_var_cache: @mut HashMap<DefId, @~[@VariantInfo]>,\n     ty_param_defs: @mut HashMap<ast::NodeId, TypeParameterDef>,\n@@ -995,7 +995,7 @@ pub fn mk_ctxt(s: session::Session,\n         rcache: mk_rcache(),\n         short_names_cache: RefCell::new(HashMap::new()),\n         needs_unwind_cleanup_cache: RefCell::new(HashMap::new()),\n-        tc_cache: @mut HashMap::new(),\n+        tc_cache: RefCell::new(HashMap::new()),\n         ast_ty_to_ty_cache: @mut HashMap::new(),\n         enum_var_cache: @mut HashMap::new(),\n         methods: RefCell::new(HashMap::new()),\n@@ -1970,14 +1970,20 @@ pub fn type_is_freezable(cx: ctxt, t: ty::t) -> bool {\n \n pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n     let ty_id = type_id(ty);\n-    match cx.tc_cache.find(&ty_id) {\n-        Some(tc) => { return *tc; }\n-        None => {}\n+\n+    {\n+        let tc_cache = cx.tc_cache.borrow();\n+        match tc_cache.get().find(&ty_id) {\n+            Some(tc) => { return *tc; }\n+            None => {}\n+        }\n     }\n \n     let mut cache = HashMap::new();\n     let result = tc_ty(cx, ty, &mut cache);\n-    cx.tc_cache.insert(ty_id, result);\n+\n+    let mut tc_cache = cx.tc_cache.borrow_mut();\n+    tc_cache.get().insert(ty_id, result);\n     return result;\n \n     fn tc_ty(cx: ctxt,\n@@ -2010,9 +2016,12 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             Some(tc) => { return *tc; }\n             None => {}\n         }\n-        match cx.tc_cache.find(&ty_id) {    // Must check both caches!\n-            Some(tc) => { return *tc; }\n-            None => {}\n+        {\n+            let tc_cache = cx.tc_cache.borrow();\n+            match tc_cache.get().find(&ty_id) {    // Must check both caches!\n+                Some(tc) => { return *tc; }\n+                None => {}\n+            }\n         }\n         cache.insert(ty_id, TC::None);\n "}]}