{"sha": "8a454f810190a2ebf75b09991faa802f7c7465a1", "node_id": "C_kwDOAAsO6NoAKDhhNDU0ZjgxMDE5MGEyZWJmNzViMDk5OTFmYWE4MDJmN2M3NDY1YTE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-24T18:40:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-24T18:40:12Z"}, "message": "Rollup merge of #89072 - bjorn3:less_symbol_as_str, r=michaelwoerister\n\nAvoid a couple of Symbol::as_str calls in cg_llvm\n\nThis should improve performance a tiny bit. Also remove `Symbol::len` and make `SymbolIndex` private.", "tree": {"sha": "83f8f9c6c8712ace6a9b9258a47269e56e782642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f8f9c6c8712ace6a9b9258a47269e56e782642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a454f810190a2ebf75b09991faa802f7c7465a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhThuNCRBK7hj4Ov3rIwAAJiwIAD6rAVyhtv4DI1LNg2KAJV6h\nnfXHy/ce3xtPrJlMIvUp43+g9RQS2Rt7oSpgHMuW81S5qgPWpIA1JOgkA+vm7Y3g\nVsJQP8YpQH+1D7vqV3LYqCutnXgMqpDFjcmzvNNkQHQ0wUmeCIRS5YobT7voP13/\n4E8qy09tpiIVZL6ibkIr415v/ENZFCPKwYj5hDdrMgAuJ3X4bE5e5aovDYP2nv8W\n/9p6meOl/atwm3tXxfVBCpgcH+3PIyTuvGsXeMrKvjbDKxK5BmQxHrgO6vK5nsyK\nhn/5aFWnm9DU2U/05ZG1RWetAqyeDGQMRJMJkmgYCZbRPLa5Hhl3UvEI4VWxpAQ=\n=it1N\n-----END PGP SIGNATURE-----\n", "payload": "tree 83f8f9c6c8712ace6a9b9258a47269e56e782642\nparent ee2e97c41627e16a818871374add27c03e7e1355\nparent df727490b6adf58dc9ceb50440d930a989bd9729\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1632508812 -0700\ncommitter GitHub <noreply@github.com> 1632508812 -0700\n\nRollup merge of #89072 - bjorn3:less_symbol_as_str, r=michaelwoerister\n\nAvoid a couple of Symbol::as_str calls in cg_llvm\n\nThis should improve performance a tiny bit. Also remove `Symbol::len` and make `SymbolIndex` private.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a454f810190a2ebf75b09991faa802f7c7465a1", "html_url": "https://github.com/rust-lang/rust/commit/8a454f810190a2ebf75b09991faa802f7c7465a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a454f810190a2ebf75b09991faa802f7c7465a1/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2e97c41627e16a818871374add27c03e7e1355", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2e97c41627e16a818871374add27c03e7e1355", "html_url": "https://github.com/rust-lang/rust/commit/ee2e97c41627e16a818871374add27c03e7e1355"}, {"sha": "df727490b6adf58dc9ceb50440d930a989bd9729", "url": "https://api.github.com/repos/rust-lang/rust/commits/df727490b6adf58dc9ceb50440d930a989bd9729", "html_url": "https://github.com/rust-lang/rust/commit/df727490b6adf58dc9ceb50440d930a989bd9729"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "be55a0c868a462c38a37a429c12fe178911d59ff", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a454f810190a2ebf75b09991faa802f7c7465a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a454f810190a2ebf75b09991faa802f7c7465a1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=8a454f810190a2ebf75b09991faa802f7c7465a1", "patch": "@@ -96,7 +96,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = tcx.item_name(def_id);\n-        let name_str = &*name.as_str();\n \n         let llret_ty = self.layout_of(ret_ty).llvm_type(self);\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n@@ -230,9 +229,14 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                 &[args[0].immediate(), y],\n                             )\n                         }\n-                        sym::ctlz_nonzero | sym::cttz_nonzero => {\n+                        sym::ctlz_nonzero => {\n                             let y = self.const_bool(true);\n-                            let llvm_name = &format!(\"llvm.{}.i{}\", &name_str[..4], width);\n+                            let llvm_name = &format!(\"llvm.ctlz.i{}\", width);\n+                            self.call_intrinsic(llvm_name, &[args[0].immediate(), y])\n+                        }\n+                        sym::cttz_nonzero => {\n+                            let y = self.const_bool(true);\n+                            let llvm_name = &format!(\"llvm.cttz.i{}\", width);\n                             self.call_intrinsic(llvm_name, &[args[0].immediate(), y])\n                         }\n                         sym::ctpop => self.call_intrinsic(\n@@ -353,7 +357,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n \n-            _ if name_str.starts_with(\"simd_\") => {\n+            _ if name.as_str().starts_with(\"simd_\") => {\n                 match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                     Ok(llval) => llval,\n                     Err(()) => return,\n@@ -843,7 +847,6 @@ fn generic_simd_intrinsic(\n     let sig =\n         tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), callee_ty.fn_sig(tcx));\n     let arg_tys = sig.inputs();\n-    let name_str = &*name.as_str();\n \n     if name == sym::simd_select_bitmask {\n         let in_ty = arg_tys[0];\n@@ -917,7 +920,7 @@ fn generic_simd_intrinsic(\n         ));\n     }\n \n-    if let Some(stripped) = name_str.strip_prefix(\"simd_shuffle\") {\n+    if let Some(stripped) = name.as_str().strip_prefix(\"simd_shuffle\") {\n         // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n         // If there is no suffix, use the index array length.\n         let n: u64 = if stripped.is_empty() {"}, {"sha": "5cb97198765fe4411a8e691f1990e7e9e2a850c6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a454f810190a2ebf75b09991faa802f7c7465a1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a454f810190a2ebf75b09991faa802f7c7465a1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=8a454f810190a2ebf75b09991faa802f7c7465a1", "patch": "@@ -577,7 +577,7 @@ impl server::Literal for Rustc<'_> {\n             }\n \n             // Synthesize a new symbol that includes the minus sign.\n-            let symbol = Symbol::intern(&s[..1 + lit.symbol.len()]);\n+            let symbol = Symbol::intern(&s[..1 + lit.symbol.as_str().len()]);\n             lit = token::Lit::new(lit.kind, symbol, lit.suffix);\n         }\n "}, {"sha": "7cb4e18398cdcddf5cecc90dda0747f30d642349", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a454f810190a2ebf75b09991faa802f7c7465a1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a454f810190a2ebf75b09991faa802f7c7465a1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8a454f810190a2ebf75b09991faa802f7c7465a1", "patch": "@@ -1618,7 +1618,7 @@ impl fmt::Display for MacroRulesNormalizedIdent {\n pub struct Symbol(SymbolIndex);\n \n rustc_index::newtype_index! {\n-    pub struct SymbolIndex { .. }\n+    struct SymbolIndex { .. }\n }\n \n impl Symbol {\n@@ -1644,10 +1644,6 @@ impl Symbol {\n         self.0.as_u32()\n     }\n \n-    pub fn len(self) -> usize {\n-        with_session_globals(|session_globals| session_globals.symbol_interner.get(self).len())\n-    }\n-\n     pub fn is_empty(self) -> bool {\n         self == kw::Empty\n     }"}]}