{"sha": "fa1656e8aec9b64718cb456f810b40cea4b465b1", "node_id": "C_kwDOAAsO6NoAKGZhMTY1NmU4YWVjOWI2NDcxOGNiNDU2ZjgxMGI0MGNlYTRiNDY1YjE", "commit": {"author": {"name": "Robin Raymond", "email": "robin@robinraymond.de", "date": "2022-05-26T06:38:23Z"}, "committer": {"name": "Robin Raymond", "email": "robin@robinraymond.de", "date": "2022-06-19T07:23:35Z"}, "message": "Add safety comments", "tree": {"sha": "30ed5848c2f8ead8f6f610e518c4037077ae995a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ed5848c2f8ead8f6f610e518c4037077ae995a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa1656e8aec9b64718cb456f810b40cea4b465b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1656e8aec9b64718cb456f810b40cea4b465b1", "html_url": "https://github.com/rust-lang/rust/commit/fa1656e8aec9b64718cb456f810b40cea4b465b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa1656e8aec9b64718cb456f810b40cea4b465b1/comments", "author": {"login": "r-raymond", "id": 17067072, "node_id": "MDQ6VXNlcjE3MDY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/17067072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-raymond", "html_url": "https://github.com/r-raymond", "followers_url": "https://api.github.com/users/r-raymond/followers", "following_url": "https://api.github.com/users/r-raymond/following{/other_user}", "gists_url": "https://api.github.com/users/r-raymond/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-raymond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-raymond/subscriptions", "organizations_url": "https://api.github.com/users/r-raymond/orgs", "repos_url": "https://api.github.com/users/r-raymond/repos", "events_url": "https://api.github.com/users/r-raymond/events{/privacy}", "received_events_url": "https://api.github.com/users/r-raymond/received_events", "type": "User", "site_admin": false}, "committer": {"login": "r-raymond", "id": 17067072, "node_id": "MDQ6VXNlcjE3MDY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/17067072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-raymond", "html_url": "https://github.com/r-raymond", "followers_url": "https://api.github.com/users/r-raymond/followers", "following_url": "https://api.github.com/users/r-raymond/following{/other_user}", "gists_url": "https://api.github.com/users/r-raymond/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-raymond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-raymond/subscriptions", "organizations_url": "https://api.github.com/users/r-raymond/orgs", "repos_url": "https://api.github.com/users/r-raymond/repos", "events_url": "https://api.github.com/users/r-raymond/events{/privacy}", "received_events_url": "https://api.github.com/users/r-raymond/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0157593c744d778824d888980d736b190ff18eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0157593c744d778824d888980d736b190ff18eaa", "html_url": "https://github.com/rust-lang/rust/commit/0157593c744d778824d888980d736b190ff18eaa"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "02d221fe6c6b91dd32040d25e777f255c5cbddee", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa1656e8aec9b64718cb456f810b40cea4b465b1/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa1656e8aec9b64718cb456f810b40cea4b465b1/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=fa1656e8aec9b64718cb456f810b40cea4b465b1", "patch": "@@ -512,9 +512,8 @@ impl<T> From<T> for RwLock<T> {\n \n impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n     /// Create a new instance of `RwLockReadGuard<T>` from a `RwLock<T>`.\n-    ///\n-    /// It is safe to call this function if and only if `lock.inner.read()` (or\n-    /// `lock.inner.try_read()`) has been successfully called before instantiating this object.\n+    // SAFETY: if and only if `lock.inner.read()` (or `lock.inner.try_read()`) has been\n+    // successfully called from the same thread before instantiating this object.\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockReadGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.borrow(), |()| RwLockReadGuard {\n             data: NonNull::new_unchecked(lock.data.get()),\n@@ -525,9 +524,8 @@ impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n \n impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n     /// Create a new instance of `RwLockWriteGuard<T>` from a `RwLock<T>`.\n-    ///\n-    /// It is safe to call this function if and only if `lock.inner.write()` (or\n-    /// `lock.inner.try_write()`) has been successfully called before instantiating this object.\n+    // SAFETY: if and only if `lock.inner.write()` (or `lock.inner.try_write()`) has been\n+    // successfully called from the same thread before instantiating this object.\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockWriteGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.guard(), |guard| RwLockWriteGuard { lock, poison: guard })\n     }\n@@ -566,6 +564,7 @@ impl<T: ?Sized> Deref for RwLockReadGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n+        // SAFETY: the conditions of `RwLockGuard::new` were satisfied when created.\n         unsafe { self.data.as_ref() }\n     }\n }\n@@ -575,20 +574,23 @@ impl<T: ?Sized> Deref for RwLockWriteGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n+        // SAFETY: the conditions of `RwLockWriteGuard::new` were satisfied when created.\n         unsafe { &*self.lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> DerefMut for RwLockWriteGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n+        // SAFETY: the conditions of `RwLockWriteGuard::new` were satisfied when created.\n         unsafe { &mut *self.lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n     fn drop(&mut self) {\n+        // SAFETY: the conditions of `RwLockReadGuard::new` were satisfied when created.\n         unsafe {\n             self.inner_lock.read_unlock();\n         }\n@@ -599,6 +601,7 @@ impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n impl<T: ?Sized> Drop for RwLockWriteGuard<'_, T> {\n     fn drop(&mut self) {\n         self.lock.poison.done(&self.poison);\n+        // SAFETY: the conditions of `RwLockWriteGuard::new` were satisfied when created.\n         unsafe {\n             self.lock.inner.write_unlock();\n         }"}]}