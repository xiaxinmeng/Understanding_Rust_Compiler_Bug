{"sha": "31919aff3b4bf0369e6cc26978a64123c4a10998", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTE5YWZmM2I0YmYwMzY5ZTZjYzI2OTc4YTY0MTIzYzRhMTA5OTg=", "commit": {"author": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2017-02-05T05:22:33Z"}, "committer": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2017-02-05T05:22:33Z"}, "message": "Revert changes from accidentally running rustfmt", "tree": {"sha": "d6779171d604c9aa931e09062f7f60ea9077f95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6779171d604c9aa931e09062f7f60ea9077f95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31919aff3b4bf0369e6cc26978a64123c4a10998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31919aff3b4bf0369e6cc26978a64123c4a10998", "html_url": "https://github.com/rust-lang/rust/commit/31919aff3b4bf0369e6cc26978a64123c4a10998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31919aff3b4bf0369e6cc26978a64123c4a10998/comments", "author": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c922eb9db5bf122cd92d973240c29832ce8883f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c922eb9db5bf122cd92d973240c29832ce8883f9", "html_url": "https://github.com/rust-lang/rust/commit/c922eb9db5bf122cd92d973240c29832ce8883f9"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "b2a8d26000d14f2abe87f887a1bfb1de8072bc5a", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -173,8 +173,6 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                            EXPL_IMPL_CLONE_ON_COPY,\n                            item.span,\n                            \"you are implementing `Clone` explicitly on a `Copy` type\",\n-                           |db| {\n-            db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n-        });\n+                           |db| { db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\"); });\n     }\n }"}, {"sha": "087ae8c31b926efc53ef3308d87866b1e9ec64a6", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -1,8 +1,8 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use syntax::ast;\n-use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet,\n-            span_help_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n+use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet, span_help_and_lint,\n+            walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n \n /// **What it does:** Checks for mapping `clone()` over an iterator.\n ///"}, {"sha": "30ffcc9f6e3a66960ef6ba83b9ec12b4975f5439", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -1213,9 +1213,7 @@ fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr)\n                                SINGLE_CHAR_PATTERN,\n                                arg.span,\n                                \"single-character string constant used as pattern\",\n-                               |db| {\n-                db.span_suggestion(expr.span, \"try using a char instead:\", hint);\n-            });\n+                               |db| { db.span_suggestion(expr.span, \"try using a char instead:\", hint); });\n         }\n     }\n }"}, {"sha": "c9ade60c339ae7e4bc70f1992d9f783a23c97ff5", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -74,9 +74,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                                    NEEDLESS_BOOL,\n                                    e.span,\n                                    \"this if-then-else expression returns a bool literal\",\n-                                   |db| {\n-                    db.span_suggestion(e.span, \"you can reduce it to\", hint);\n-                });\n+                                   |db| { db.span_suggestion(e.span, \"you can reduce it to\", hint); });\n             };\n             match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n                 (RetBool(true), RetBool(true)) |\n@@ -123,19 +121,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n-                                       |db| {\n-                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n-                    });\n+                                       |db| { db.span_suggestion(e.span, \"try simplifying it as shown:\", hint); });\n                 },\n                 (Other, Bool(true)) => {\n                     let hint = snippet(cx, left_side.span, \"..\").into_owned();\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n-                                       |db| {\n-                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n-                    });\n+                                       |db| { db.span_suggestion(e.span, \"try simplifying it as shown:\", hint); });\n                 },\n                 (Bool(false), Other) => {\n                     let hint = Sugg::hir(cx, right_side, \"..\");"}, {"sha": "f53fcb60706eb38dbdc9f2e21d07537acbb0d6c9", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -120,9 +120,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         return;\n                     }\n                 }\n-                span_lint_and_then(cx, UNNECESSARY_OPERATION, stmt.span, \"statement can be reduced\", |db| {\n-                    db.span_suggestion(stmt.span, \"replace it with\", snippet);\n-                });\n+                span_lint_and_then(cx,\n+                                   UNNECESSARY_OPERATION,\n+                                   stmt.span,\n+                                   \"statement can be reduced\",\n+                                   |db| { db.span_suggestion(stmt.span, \"replace it with\", snippet); });\n             }\n         }\n     }"}, {"sha": "0dff1495dfb22830dcf171c308abcebfe1f62e29", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -36,11 +36,12 @@ impl LintPass for Precedence {\n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprKind::Binary(Spanned { node: op, .. }, ref left, ref right) = expr.node {\n-            let span_sugg = |expr: &Expr, sugg| {\n-                span_lint_and_then(cx, PRECEDENCE, expr.span, \"operator precedence can trip the unwary\", |db| {\n-                    db.span_suggestion(expr.span, \"consider parenthesizing your expression\", sugg);\n-                });\n-            };\n+            let span_sugg =\n+                |expr: &Expr, sugg| {\n+                    span_lint_and_then(cx, PRECEDENCE, expr.span, \"operator precedence can trip the unwary\", |db| {\n+                        db.span_suggestion(expr.span, \"consider parenthesizing your expression\", sugg);\n+                    });\n+                };\n \n             if !is_bit_op(op) {\n                 return;"}, {"sha": "62ef155c3211cbaa2aa9cb9ac014861f77147c14", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -250,9 +250,7 @@ fn lint_shadow<'a, 'tcx: 'a>(\n                                &format!(\"`{}` is shadowed by itself in `{}`\",\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")),\n-                               |db| {\n-                db.span_note(prev_span, \"previous binding is here\");\n-            });\n+                               |db| { db.span_note(prev_span, \"previous binding is here\"); });\n         } else if contains_self(cx, name, expr) {\n             span_lint_and_then(cx,\n                                SHADOW_REUSE,\n@@ -282,9 +280,7 @@ fn lint_shadow<'a, 'tcx: 'a>(\n                            SHADOW_UNRELATED,\n                            span,\n                            &format!(\"`{}` shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n-                           |db| {\n-            db.span_note(prev_span, \"previous binding is here\");\n-        });\n+                           |db| { db.span_note(prev_span, \"previous binding is here\"); });\n     }\n }\n "}, {"sha": "2c10db158cb32ba489f926bb0e6206db4511acc1", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -258,8 +258,9 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n     fn needs_paren(op: &AssocOp, other: &AssocOp, dir: Associativity) -> bool {\n         other.precedence() < op.precedence() ||\n         (other.precedence() == op.precedence() &&\n-         ((op != other && associativity(op) != dir) || (op == other && associativity(op) != Associativity::Both))) ||\n-        is_shift(op) && is_arith(other) || is_shift(other) && is_arith(op)\n+         ((op != other && associativity(op) != dir) ||\n+          (op == other && associativity(op) != Associativity::Both))) || is_shift(op) && is_arith(other) ||\n+        is_shift(other) && is_arith(op)\n     }\n \n     let lhs_paren = if let Sugg::BinOp(ref lop, _) = *lhs {"}, {"sha": "a8d2701ccfa829f44ad69737ff2d96840da44e2b", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31919aff3b4bf0369e6cc26978a64123c4a10998/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=31919aff3b4bf0369e6cc26978a64123c4a10998", "patch": "@@ -81,9 +81,11 @@ fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n         },\n     };\n \n-    span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n-        db.span_suggestion(span, \"you can use a slice directly\", snippet);\n-    });\n+    span_lint_and_then(cx,\n+                       USELESS_VEC,\n+                       span,\n+                       \"useless use of `vec!`\",\n+                       |db| { db.span_suggestion(span, \"you can use a slice directly\", snippet); });\n }\n \n /// Return the item type of the vector (ie. the `T` in `Vec<T>`)."}]}