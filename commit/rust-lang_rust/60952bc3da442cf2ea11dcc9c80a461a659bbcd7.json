{"sha": "60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "node_id": "C_kwDOAAsO6NoAKDYwOTUyYmMzZGE0NDJjZjJlYTExZGNjOWM4MGE0NjFhNjU5YmJjZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T05:33:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T05:33:16Z"}, "message": "Auto merge of #90485 - camsteffen:fmt-args-less-bind, r=m-ou-se\n\nDon't destructure args tuple in format_args!\n\nThis allows Clippy to parse the HIR more simply since `arg0` is changed to `_args.0`. (cc rust-lang/rust-clippy#7843). From rustc's perspective, I think this is something between a lateral move and a tiny improvement since there are fewer bindings.\n\nr? `@m-ou-se`", "tree": {"sha": "5c0793aef63ff65a56795a5852e448a64e054137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c0793aef63ff65a56795a5852e448a64e054137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "html_url": "https://github.com/rust-lang/rust/commit/60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c57704f3eb4319cc93513c232e9c434a73af46d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c57704f3eb4319cc93513c232e9c434a73af46d2", "html_url": "https://github.com/rust-lang/rust/commit/c57704f3eb4319cc93513c232e9c434a73af46d2"}, {"sha": "8e21f3a4d7a8a5a90ee21f00aed101340221a8b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e21f3a4d7a8a5a90ee21f00aed101340221a8b6", "html_url": "https://github.com/rust-lang/rust/commit/8e21f3a4d7a8a5a90ee21f00aed101340221a8b6"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "52b00a2bc74746d9d0fddbe3ff592ebd4f690774", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -760,16 +760,11 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Actually builds the expression which the format_args! block will be\n     /// expanded to.\n     fn into_expr(self) -> P<ast::Expr> {\n-        let mut locals =\n-            Vec::with_capacity((0..self.args.len()).map(|i| self.arg_unique_types[i].len()).sum());\n-        let mut counts = Vec::with_capacity(self.count_args.len());\n-        let mut pats = Vec::with_capacity(self.args.len());\n+        let mut args = Vec::with_capacity(\n+            self.arg_unique_types.iter().map(|v| v.len()).sum::<usize>() + self.count_args.len(),\n+        );\n         let mut heads = Vec::with_capacity(self.args.len());\n \n-        let names_pos: Vec<_> = (0..self.args.len())\n-            .map(|i| Ident::from_str_and_span(&format!(\"arg{}\", i), self.macsp))\n-            .collect();\n-\n         // First, build up the static array which will become our precompiled\n         // format \"string\"\n         let pieces = self.ecx.expr_vec_slice(self.fmtsp, self.str_pieces);\n@@ -787,11 +782,8 @@ impl<'a, 'b> Context<'a, 'b> {\n         // of each variable because we don't want to move out of the arguments\n         // passed to this function.\n         for (i, e) in self.args.into_iter().enumerate() {\n-            let name = names_pos[i];\n-            let span = self.ecx.with_def_site_ctxt(e.span);\n-            pats.push(self.ecx.pat_ident(span, name));\n             for arg_ty in self.arg_unique_types[i].iter() {\n-                locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, name));\n+                args.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, i));\n             }\n             heads.push(self.ecx.expr_addr_of(e.span, e));\n         }\n@@ -800,15 +792,11 @@ impl<'a, 'b> Context<'a, 'b> {\n                 Exact(i) => i,\n                 _ => panic!(\"should never happen\"),\n             };\n-            let name = names_pos[index];\n             let span = spans_pos[index];\n-            counts.push(Context::format_arg(self.ecx, self.macsp, span, &Count, name));\n+            args.push(Context::format_arg(self.ecx, self.macsp, span, &Count, index));\n         }\n \n-        // Now create a vector containing all the arguments\n-        let args = locals.into_iter().chain(counts.into_iter());\n-\n-        let args_array = self.ecx.expr_vec(self.macsp, args.collect());\n+        let args_array = self.ecx.expr_vec(self.macsp, args);\n \n         // Constructs an AST equivalent to:\n         //\n@@ -838,7 +826,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // But the nested match expression is proved to perform not as well\n         // as series of let's; the first approach does.\n         let args_match = {\n-            let pat = self.ecx.pat_tuple(self.macsp, pats);\n+            let pat = self.ecx.pat_ident(self.macsp, Ident::new(sym::_args, self.macsp));\n             let arm = self.ecx.arm(self.macsp, pat, args_array);\n             let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n             self.ecx.expr_match(self.macsp, head, vec![arm])\n@@ -877,10 +865,11 @@ impl<'a, 'b> Context<'a, 'b> {\n         macsp: Span,\n         mut sp: Span,\n         ty: &ArgumentType,\n-        arg: Ident,\n+        arg_index: usize,\n     ) -> P<ast::Expr> {\n         sp = ecx.with_def_site_ctxt(sp);\n-        let arg = ecx.expr_ident(sp, arg);\n+        let arg = ecx.expr_ident(sp, Ident::new(sym::_args, sp));\n+        let arg = ecx.expr(sp, ast::ExprKind::Field(arg, Ident::new(sym::integer(arg_index), sp)));\n         let trait_ = match *ty {\n             Placeholder(trait_) if trait_ == \"<invalid>\" => return DummyResult::raw_expr(sp, true),\n             Placeholder(trait_) => trait_,"}, {"sha": "99fa9f000944df2b6e66f6227ac44f85105641dd", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -271,6 +271,7 @@ symbols! {\n         __S,\n         __next,\n         __try_var,\n+        _args,\n         _d,\n         _e,\n         _task_context,"}, {"sha": "84eda08d203bfcacfe288766a7c38bc13888e9ef", "filename": "src/test/pretty/dollar-crate.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -12,7 +12,7 @@\n     {\n         ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"],\n                                                          &match () {\n-                                                              () => [],\n+                                                              _args => [],\n                                                           }));\n     };\n }"}, {"sha": "529daab903887de6122e0cbb8eb4b0cb096d0f5b", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -45,7 +45,7 @@\n                                                                                                                                                                      as\n                                                                                                                                                                      ())\n                                                                                                                                                                {\n-                                                                                                                                                               ()\n+                                                                                                                                                               _args\n                                                                                                                                                                =>\n                                                                                                                                                                ([]\n                                                                                                                                                                    as"}, {"sha": "e59216fe902704879d0eed6b815942532b9ed004", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -19,8 +19,8 @@ error: unexpected token: `{\n     let res =\n         ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n                                                             &match (&\"u8\",) {\n-                                                                 (arg0,) =>\n-                                                                 [::core::fmt::ArgumentV1::new(arg0,\n+                                                                 _args =>\n+                                                                 [::core::fmt::ArgumentV1::new(_args.0,\n                                                                                                ::core::fmt::Display::fmt)],\n                                                              }));\n     res"}, {"sha": "ee394d64a1dc945d5c072cf2e64f7766771cf292", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#25t, extern \"rust-call\" fn(()), _#26t]]`\n+                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#22t, extern \"rust-call\" fn(()), _#23t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "11b9fa7e40caa67f2d1a337f727b8c84a8dc60d4", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#25t, extern \"rust-call\" fn(()), _#26t]]`\n+                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#22t, extern \"rust-call\" fn(()), _#23t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "733cc97c84596546bd0005ab6608749270564f7c", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60952bc3da442cf2ea11dcc9c80a461a659bbcd7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=60952bc3da442cf2ea11dcc9c80a461a659bbcd7", "patch": "@@ -3,12 +3,12 @@\n #![deny(clippy::missing_docs_in_private_items)]\n \n use crate::ty::is_type_diagnostic_item;\n-use crate::{is_expn_of, last_path_segment, match_def_path, path_to_local_id, paths};\n+use crate::{is_expn_of, last_path_segment, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitKind};\n use rustc_hir as hir;\n use rustc_hir::{\n-    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, PatKind, QPath, StmtKind, UnOp,\n+    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, QPath, StmtKind, UnOp,\n };\n use rustc_lint::LateContext;\n use rustc_span::{sym, symbol, ExpnKind, Span, Symbol};\n@@ -513,8 +513,6 @@ pub struct FormatArgsExpn<'tcx> {\n     pub format_string_parts: &'tcx [Expr<'tcx>],\n     /// Symbols corresponding to [`Self::format_string_parts`]\n     pub format_string_symbols: Vec<Symbol>,\n-    /// Match arm patterns, the `arg0`, etc. from the next field `args`\n-    pub arg_names: &'tcx [Pat<'tcx>],\n     /// Expressions like `ArgumentV1::new(arg0, Debug::fmt)`\n     pub args: &'tcx [Expr<'tcx>],\n     /// The final argument passed to `Arguments::new_v1_formatted`, if applicable\n@@ -559,15 +557,13 @@ impl FormatArgsExpn<'tcx> {\n                     _ => None,\n                 })\n                 .collect();\n-            if let PatKind::Tuple(arg_names, None) = arm.pat.kind;\n             if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,\n                     value_args,\n                     format_string_parts,\n                     format_string_symbols,\n-                    arg_names,\n                     args,\n                     fmt_expr,\n                 })\n@@ -594,10 +590,8 @@ impl FormatArgsExpn<'tcx> {\n                             if let Ok(i) = usize::try_from(position);\n                             let arg = &self.args[i];\n                             if let ExprKind::Call(_, [arg_name, _]) = arg.kind;\n-                            if let Some(j) = self\n-                                .arg_names\n-                                .iter()\n-                                .position(|pat| path_to_local_id(arg_name, pat.hir_id));\n+                            if let ExprKind::Field(_, j) = arg_name.kind;\n+                            if let Ok(j) = j.name.as_str().parse::<usize>();\n                             then {\n                                 Some(FormatArgsArg { value: self.value_args[j], arg, fmt: Some(fmt) })\n                             } else {"}]}