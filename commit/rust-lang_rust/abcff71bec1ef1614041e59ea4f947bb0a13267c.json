{"sha": "abcff71bec1ef1614041e59ea4f947bb0a13267c", "node_id": "C_kwDOAAsO6NoAKGFiY2ZmNzFiZWMxZWYxNjE0MDQxZTU5ZWE0Zjk0N2JiMGExMzI2N2M", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-15T14:14:13Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-15T14:14:13Z"}, "message": "Significantly speed up assembling of sysroots\n\nBy avoiding some redundant rustc calls and stripping debuginfo for\nwrappers. ./y.rs build --sysroot none now runs 44% faster.\n\nBenchmark 1: ./y_before.bin build --sysroot none\n  Time (mean \u00b1 \u03c3):      2.200 s \u00b1  0.038 s    [User: 2.140 s, System: 0.653 s]\n  Range (min \u2026 max):    2.171 s \u2026  2.303 s    10 runs\n\nBenchmark 2: ./y_after.bin build --sysroot none\n  Time (mean \u00b1 \u03c3):      1.528 s \u00b1  0.020 s    [User: 1.388 s, System: 0.490 s]\n  Range (min \u2026 max):    1.508 s \u2026  1.580 s    10 runs\n\nSummary\n  './y_after.bin build --sysroot none' ran\n    1.44 \u00b1 0.03 times faster than './y_before.bin build --sysroot none'", "tree": {"sha": "5330859817bd2210357b0e14beba5a7b2ced6fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5330859817bd2210357b0e14beba5a7b2ced6fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abcff71bec1ef1614041e59ea4f947bb0a13267c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abcff71bec1ef1614041e59ea4f947bb0a13267c", "html_url": "https://github.com/rust-lang/rust/commit/abcff71bec1ef1614041e59ea4f947bb0a13267c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abcff71bec1ef1614041e59ea4f947bb0a13267c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13197322ec78820cdd3214d8001f81fa4773918b", "url": "https://api.github.com/repos/rust-lang/rust/commits/13197322ec78820cdd3214d8001f81fa4773918b", "html_url": "https://github.com/rust-lang/rust/commit/13197322ec78820cdd3214d8001f81fa4773918b"}], "stats": {"total": 60, "additions": 25, "deletions": 35}, "files": [{"sha": "01d44dafbdd17ac4e2c8b4412ecc695e318c1277", "filename": "build_system/bench.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=abcff71bec1ef1614041e59ea4f947bb0a13267c", "patch": "@@ -4,7 +4,7 @@ use std::path::Path;\n \n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n-use super::rustc_info::{get_file_name, get_wrapper_file_name};\n+use super::rustc_info::get_file_name;\n use super::utils::{hyperfine_command, is_ci, spawn_and_wait, CargoProject, Compiler};\n \n pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n@@ -51,7 +51,8 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n         .unwrap();\n \n     eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-    let cargo_clif = RelPath::DIST.to_path(dirs).join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+    let cargo_clif =\n+        RelPath::DIST.to_path(dirs).join(get_file_name(\"cargo_clif\", \"bin\").replace('_', \"-\"));\n     let manifest_path = SIMPLE_RAYTRACER.manifest_path(dirs);\n     let target_dir = SIMPLE_RAYTRACER.target_dir(dirs);\n "}, {"sha": "cbc58365e6974cd80ce51fbdc6681fef2c52ac1d", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=abcff71bec1ef1614041e59ea4f947bb0a13267c", "patch": "@@ -3,9 +3,7 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{\n-    get_file_name, get_rustc_version, get_toolchain_name, get_wrapper_file_name,\n-};\n+use super::rustc_info::{get_cargo_path, get_file_name, get_rustc_version, get_toolchain_name};\n use super::utils::{spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n \n@@ -42,16 +40,17 @@ pub(crate) fn build_sysroot(\n     try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n \n     // Build and copy rustc and cargo wrappers\n+    let wrapper_base_name = get_file_name(\"____\", \"bin\");\n     for wrapper in [\"rustc-clif\", \"rustdoc-clif\", \"cargo-clif\"] {\n-        let wrapper_name = get_wrapper_file_name(wrapper, \"bin\");\n+        let wrapper_name = wrapper_base_name.replace(\"____\", wrapper);\n \n         let mut build_cargo_wrapper_cmd = Command::new(&bootstrap_host_compiler.rustc);\n         build_cargo_wrapper_cmd\n             .env(\"TOOLCHAIN_NAME\", get_toolchain_name())\n             .arg(RelPath::SCRIPTS.to_path(dirs).join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n             .arg(DIST_DIR.to_path(dirs).join(wrapper_name))\n-            .arg(\"-g\");\n+            .arg(\"-Cstrip=debuginfo\");\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n@@ -89,7 +88,23 @@ pub(crate) fn build_sysroot(\n         }\n     }\n \n-    let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n+    let mut target_compiler = {\n+        let dirs: &Dirs = &dirs;\n+        let rustc_clif =\n+            RelPath::DIST.to_path(&dirs).join(wrapper_base_name.replace(\"____\", \"rustc-clif\"));\n+        let rustdoc_clif =\n+            RelPath::DIST.to_path(&dirs).join(wrapper_base_name.replace(\"____\", \"rustdoc-clif\"));\n+\n+        Compiler {\n+            cargo: get_cargo_path(),\n+            rustc: rustc_clif.clone(),\n+            rustdoc: rustdoc_clif.clone(),\n+            rustflags: String::new(),\n+            rustdocflags: String::new(),\n+            triple: target_triple,\n+            runner: vec![],\n+        }\n+    };\n     if !is_native {\n         target_compiler.set_cross_linker_and_runner();\n     }"}, {"sha": "a70453b4422898e31f0030f1613cf7877260e481", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=abcff71bec1ef1614041e59ea4f947bb0a13267c", "patch": "@@ -93,12 +93,3 @@ pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n     assert!(file_name.contains(crate_name));\n     file_name\n }\n-\n-/// Similar to `get_file_name`, but converts any dashes (`-`) in the `crate_name` to\n-/// underscores (`_`). This is specially made for the rustc and cargo wrappers\n-/// which have a dash in the name, and that is not allowed in a crate name.\n-pub(crate) fn get_wrapper_file_name(crate_name: &str, crate_type: &str) -> String {\n-    let crate_name = crate_name.replace('-', \"_\");\n-    let wrapper_name = get_file_name(&crate_name, crate_type);\n-    wrapper_name.replace('_', \"-\")\n-}"}, {"sha": "21bfb1b1f00f58454461b87ae1de1e67efd32a27", "filename": "build_system/utils.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcff71bec1ef1614041e59ea4f947bb0a13267c/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=abcff71bec1ef1614041e59ea4f947bb0a13267c", "patch": "@@ -5,7 +5,7 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path, get_wrapper_file_name};\n+use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path};\n \n #[derive(Clone, Debug)]\n pub(crate) struct Compiler {\n@@ -31,23 +31,6 @@ impl Compiler {\n         }\n     }\n \n-    pub(crate) fn clif_with_triple(dirs: &Dirs, triple: String) -> Compiler {\n-        let rustc_clif =\n-            RelPath::DIST.to_path(&dirs).join(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n-        let rustdoc_clif =\n-            RelPath::DIST.to_path(&dirs).join(get_wrapper_file_name(\"rustdoc-clif\", \"bin\"));\n-\n-        Compiler {\n-            cargo: get_cargo_path(),\n-            rustc: rustc_clif.clone(),\n-            rustdoc: rustdoc_clif.clone(),\n-            rustflags: String::new(),\n-            rustdocflags: String::new(),\n-            triple,\n-            runner: vec![],\n-        }\n-    }\n-\n     pub(crate) fn set_cross_linker_and_runner(&mut self) {\n         match self.triple.as_str() {\n             \"aarch64-unknown-linux-gnu\" => {"}]}