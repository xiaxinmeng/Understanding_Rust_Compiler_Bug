{"sha": "d71e030cd7dfbc1596b641576104494bbcb6d331", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MWUwMzBjZDdkZmJjMTU5NmI2NDE1NzYxMDQ0OTRiYmNiNmQzMzE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-24T16:47:10Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-24T16:47:10Z"}, "message": "Merge pull request #938 from Manishearth/fix-876\n\nSplit `new_without_default` and `new_without_default_derive`.", "tree": {"sha": "917a152a0af33afa15746249503e54fa2c6ff848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/917a152a0af33afa15746249503e54fa2c6ff848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d71e030cd7dfbc1596b641576104494bbcb6d331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d71e030cd7dfbc1596b641576104494bbcb6d331", "html_url": "https://github.com/rust-lang/rust/commit/d71e030cd7dfbc1596b641576104494bbcb6d331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d71e030cd7dfbc1596b641576104494bbcb6d331/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84098f56b6d6e89bbbeaa3d70d98f7818dacbfc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/84098f56b6d6e89bbbeaa3d70d98f7818dacbfc4", "html_url": "https://github.com/rust-lang/rust/commit/84098f56b6d6e89bbbeaa3d70d98f7818dacbfc4"}, {"sha": "9cfc42275d400d5b192e10e005d4f7ef772156b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cfc42275d400d5b192e10e005d4f7ef772156b7", "html_url": "https://github.com/rust-lang/rust/commit/9cfc42275d400d5b192e10e005d4f7ef772156b7"}], "stats": {"total": 97, "additions": 82, "deletions": 15}, "files": [{"sha": "9a1e7322e76fbe7a307eadd706929a4e9b888246", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d71e030cd7dfbc1596b641576104494bbcb6d331/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d71e030cd7dfbc1596b641576104494bbcb6d331/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d71e030cd7dfbc1596b641576104494bbcb6d331", "patch": "@@ -174,6 +174,7 @@ All notable changes to this project will be documented in this file.\n [`neg_multiply`]: https://github.com/Manishearth/rust-clippy/wiki#neg_multiply\n [`new_ret_no_self`]: https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self\n [`new_without_default`]: https://github.com/Manishearth/rust-clippy/wiki#new_without_default\n+[`new_without_default_derive`]: https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive\n [`no_effect`]: https://github.com/Manishearth/rust-clippy/wiki#no_effect\n [`non_ascii_literal`]: https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal\n [`nonminimal_bool`]: https://github.com/Manishearth/rust-clippy/wiki#nonminimal_bool"}, {"sha": "4c156dfb7a0f77d0b5e8f67617698c0242e88fd8", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d71e030cd7dfbc1596b641576104494bbcb6d331/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d71e030cd7dfbc1596b641576104494bbcb6d331/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d71e030cd7dfbc1596b641576104494bbcb6d331", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 150 lints included in this crate:\n+There are 151 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -107,6 +107,7 @@ name\n [neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                         | warn    | Warns on multiplying integers with -1\n [new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                   | warn    | not returning `Self` in a `new` method\n [new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                           | warn    | `fn new() -> Self` method without `Default` implementation\n+[new_without_default_derive](https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive)             | warn    | `fn new() -> Self` without `#[derive]`able `Default` implementation\n [no_effect](https://github.com/Manishearth/rust-clippy/wiki#no_effect)                                               | warn    | statements with no effect\n [non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                               | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n [nonminimal_bool](https://github.com/Manishearth/rust-clippy/wiki#nonminimal_bool)                                   | allow   | checks for boolean expressions that can be written more concisely"}, {"sha": "41c26cf71096d020f03246a1683057af7cf66606", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d71e030cd7dfbc1596b641576104494bbcb6d331/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e030cd7dfbc1596b641576104494bbcb6d331/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d71e030cd7dfbc1596b641576104494bbcb6d331", "patch": "@@ -527,6 +527,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         needless_update::NEEDLESS_UPDATE,\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n+        new_without_default::NEW_WITHOUT_DEFAULT_DERIVE,\n         no_effect::NO_EFFECT,\n         no_effect::UNNECESSARY_OPERATION,\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,"}, {"sha": "08d517014ee49a1df583c88e496971267d960985", "filename": "src/new_without_default.rs", "status": "modified", "additions": 74, "deletions": 10, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d71e030cd7dfbc1596b641576104494bbcb6d331/src%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e030cd7dfbc1596b641576104494bbcb6d331/src%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnew_without_default.rs?ref=d71e030cd7dfbc1596b641576104494bbcb6d331", "patch": "@@ -1,6 +1,8 @@\n use rustc::hir::intravisit::FnKind;\n+use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::lint::*;\n+use rustc::ty;\n use syntax::ast;\n use syntax::codemap::Span;\n use utils::paths;\n@@ -20,41 +22,70 @@ use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, sa\n /// **Example:**\n ///\n /// ```rust,ignore\n-/// struct Foo;\n+/// struct Foo(Bar);\n ///\n /// impl Foo {\n ///     fn new() -> Self {\n-///         Foo\n+///         Foo(Bar::new())\n ///     }\n /// }\n /// ```\n ///\n /// Instead, use:\n ///\n /// ```rust\n-/// struct Foo;\n+/// struct Foo(Bar);\n ///\n /// impl Default for Foo {\n ///     fn default() -> Self {\n-///         Foo\n+///         Foo(Bar::new())\n ///     }\n /// }\n /// ```\n ///\n /// You can also have `new()` call `Default::default()`\n-///\n declare_lint! {\n     pub NEW_WITHOUT_DEFAULT,\n     Warn,\n     \"`fn new() -> Self` method without `Default` implementation\"\n }\n \n+/// **What it does:** This lints about type with a `fn new() -> Self` method\n+/// and no implementation of\n+/// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n+///\n+/// **Why is this bad?** User might expect to be able to use\n+/// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n+/// as the type can be\n+/// constructed without arguments.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+///\n+/// ```rust,ignore\n+/// struct Foo;\n+///\n+/// impl Foo {\n+///     fn new() -> Self {\n+///         Foo\n+///     }\n+/// }\n+/// ```\n+///\n+/// Just prepend `#[derive(Default)]` before the `struct` definition\n+declare_lint! {\n+    pub NEW_WITHOUT_DEFAULT_DERIVE,\n+    Warn,\n+    \"`fn new() -> Self` without `#[derive]`able `Default` implementation\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct NewWithoutDefault;\n \n impl LintPass for NewWithoutDefault {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NEW_WITHOUT_DEFAULT)\n+        lint_array!(NEW_WITHOUT_DEFAULT, NEW_WITHOUT_DEFAULT_DERIVE)\n     }\n }\n \n@@ -66,19 +97,52 @@ impl LateLintPass for NewWithoutDefault {\n \n         if let FnKind::Method(name, _, _, _) = kind {\n             if decl.inputs.is_empty() && name.as_str() == \"new\" {\n-                let self_ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(cx.tcx.map.get_parent(id))).ty;\n-\n+                let self_ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(\n+                    cx.tcx.map.get_parent(id))).ty;\n                 if_let_chain!{[\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n                     let Some(ret_ty) = return_ty(cx, id),\n                     same_tys(cx, self_ty, ret_ty, id),\n                     let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT),\n                     !implements_trait(cx, self_ty, default_trait_id, Vec::new())\n                 ], {\n-                    span_lint(cx, NEW_WITHOUT_DEFAULT, span,\n-                              &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty));\n+                    if can_derive_default(self_ty, cx, default_trait_id) {\n+                        span_lint(cx,\n+                                  NEW_WITHOUT_DEFAULT_DERIVE, span,\n+                                  &format!(\"you should consider deriving a \\\n+                                           `Default` implementation for `{}`\",\n+                                           self_ty)).\n+                                  span_suggestion(span,\n+                                                  \"try this\",\n+                                                  \"#[derive(Default)]\".into());\n+                    } else {\n+                        span_lint(cx,\n+                                  NEW_WITHOUT_DEFAULT, span,\n+                                  &format!(\"you should consider adding a \\\n+                                           `Default` implementation for `{}`\",\n+                                           self_ty)).\n+                                  span_suggestion(span,\n+                                                  \"try this\",\n+                             format!(\"impl Default for {} {{ fn default() -> \\\n+                                    Self {{ {}::new() }} }}\", self_ty, self_ty));\n+                    }\n                 }}\n             }\n         }\n     }\n }\n+\n+fn can_derive_default<'t, 'c>(ty: ty::Ty<'t>, cx: &LateContext<'c, 't>, default_trait_id: DefId) -> bool {\n+    match ty.sty {\n+        ty::TyStruct(ref adt_def, ref substs) => {\n+            for field in adt_def.all_fields() {\n+                let f_ty = field.ty(cx.tcx, substs);\n+                if !implements_trait(cx, f_ty, default_trait_id, Vec::new()) {\n+                    return false\n+                }\n+            }\n+            true\n+        },\n+        _ => false\n+    }\n+}"}, {"sha": "78ffbb1a58a46efbd57b733e801fae1353616814", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d71e030cd7dfbc1596b641576104494bbcb6d331/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e030cd7dfbc1596b641576104494bbcb6d331/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=d71e030cd7dfbc1596b641576104494bbcb6d331", "patch": "@@ -3,7 +3,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n-#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default)]\n+#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "17f2a8d7b415034f9ea2ce632952474b4d5ab5cd", "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d71e030cd7dfbc1596b641576104494bbcb6d331/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e030cd7dfbc1596b641576104494bbcb6d331/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=d71e030cd7dfbc1596b641576104494bbcb6d331", "patch": "@@ -2,18 +2,18 @@\n #![plugin(clippy)]\n \n #![allow(dead_code)]\n-#![deny(new_without_default)]\n+#![deny(new_without_default, new_without_default_derive)]\n \n struct Foo;\n \n impl Foo {\n-    fn new() -> Foo { Foo } //~ERROR: you should consider adding a `Default` implementation for `Foo`\n+    fn new() -> Foo { Foo } //~ERROR: you should consider deriving a `Default` implementation for `Foo`\n }\n \n struct Bar;\n \n impl Bar {\n-    fn new() -> Self { Bar } //~ERROR: you should consider adding a `Default` implementation for `Bar`\n+    fn new() -> Self { Bar } //~ERROR: you should consider deriving a `Default` implementation for `Bar`\n }\n \n struct Ok;"}]}