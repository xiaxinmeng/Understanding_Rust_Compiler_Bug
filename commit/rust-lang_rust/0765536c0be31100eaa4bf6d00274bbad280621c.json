{"sha": "0765536c0be31100eaa4bf6d00274bbad280621c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NjU1MzZjMGJlMzExMDBlYWE0YmY2ZDAwMjc0YmJhZDI4MDYyMWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-19T06:15:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-19T06:15:57Z"}, "message": "Rollup merge of #78083 - ChaiTRex:master, r=m-ou-se\n\nStabilize or_insert_with_key\n\nStabilizes the `or_insert_with_key` feature from https://github.com/rust-lang/rust/issues/71024. This allows inserting key-derived values when a `HashMap`/`BTreeMap` entry is vacant.\n\nThe difference between this and  `.or_insert_with(|| ... )` is that this provides a reference to the key to the closure after it is moved with `.entry(key_being_moved)`, avoiding the need to copy or clone the key.", "tree": {"sha": "dcfa22376240fd950cdce2961883900a9153fbb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcfa22376240fd950cdce2961883900a9153fbb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0765536c0be31100eaa4bf6d00274bbad280621c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf3ZqeCRBK7hj4Ov3rIwAAdHIIAHSdAn1zOHv+1oiqsIsHQHE/\n1XqoCcwKLXDZlRWmDNaDurnfc+d+wOTbUc5kijb5Hgzh4joCBKp55Sk41a0wEavA\nD2Ti4YtfxsGfYpG9Vq56p3dLXFU+lKopMCUaBnS7Hlo8iEXDBsKB00gvZbJzZooP\nhkfWvsGEU89Oy9SB9qSqZZ4ti2tCDwyikN+ioT+l34ieMKgDjSf+lKGzn6F4qwYT\nxj+w2zxqFgM5q2kX1vmesfT2gPlXYUAIKamSfB1Uq28ra+SvrIuhVsyS4htP4s7e\nNd3D2ongs/GkNEbIpsMn37Z/LNm5Hd8gcHHgc3kFVD1bNF50yXVbQ1NgZPoyy3A=\n=ku/U\n-----END PGP SIGNATURE-----\n", "payload": "tree dcfa22376240fd950cdce2961883900a9153fbb0\nparent d1741e59cb87d3c8c794eebf6d5430d1b383f51f\nparent f115be93abd2634f3d71d91bf1341e9860a87056\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1608358557 +0900\ncommitter GitHub <noreply@github.com> 1608358557 +0900\n\nRollup merge of #78083 - ChaiTRex:master, r=m-ou-se\n\nStabilize or_insert_with_key\n\nStabilizes the `or_insert_with_key` feature from https://github.com/rust-lang/rust/issues/71024. This allows inserting key-derived values when a `HashMap`/`BTreeMap` entry is vacant.\n\nThe difference between this and  `.or_insert_with(|| ... )` is that this provides a reference to the key to the closure after it is moved with `.entry(key_being_moved)`, avoiding the need to copy or clone the key.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0765536c0be31100eaa4bf6d00274bbad280621c", "html_url": "https://github.com/rust-lang/rust/commit/0765536c0be31100eaa4bf6d00274bbad280621c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0765536c0be31100eaa4bf6d00274bbad280621c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "html_url": "https://github.com/rust-lang/rust/commit/d1741e59cb87d3c8c794eebf6d5430d1b383f51f"}, {"sha": "f115be93abd2634f3d71d91bf1341e9860a87056", "url": "https://api.github.com/repos/rust-lang/rust/commits/f115be93abd2634f3d71d91bf1341e9860a87056", "html_url": "https://github.com/rust-lang/rust/commit/f115be93abd2634f3d71d91bf1341e9860a87056"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "06e8442d47539841fb20fc776be7c241e3e43a54", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0765536c0be31100eaa4bf6d00274bbad280621c/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0765536c0be31100eaa4bf6d00274bbad280621c/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=0765536c0be31100eaa4bf6d00274bbad280621c", "patch": "@@ -40,7 +40,7 @@ const SSO_ARRAY_SIZE: usize = 8;\n //   into_keys/into_values (unstable)\n //   all raw_entry-related\n //   PartialEq/Eq (requires sorting the array)\n-//   Entry::or_insert_with_key (unstable)\n+//   Entry::or_insert_with_key\n //   Vacant/Occupied entries and related\n //\n // FIXME: In HashMap most methods accepting key reference"}, {"sha": "6cc8813bc523988fb554c7be51c0487e0e83ad19", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0765536c0be31100eaa4bf6d00274bbad280621c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0765536c0be31100eaa4bf6d00274bbad280621c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=0765536c0be31100eaa4bf6d00274bbad280621c", "patch": "@@ -116,15 +116,16 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n         }\n     }\n \n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n-    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n-    /// which takes the key as its argument, and returns a mutable reference to the value in the\n-    /// entry.\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function.\n+    /// This method allows for generating key-derived values for insertion by providing the default\n+    /// function a reference to the key that was moved during the `.entry(key)` method call.\n+    ///\n+    /// The reference to the moved key is provided so that cloning or copying the key is\n+    /// unnecessary, unlike with `.or_insert_with(|| ... )`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(or_insert_with_key)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();\n@@ -134,6 +135,7 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"or_insert_with_key\", since = \"1.50.0\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),"}, {"sha": "ac72345dad425fcc604df457130eab703b242225", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0765536c0be31100eaa4bf6d00274bbad280621c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0765536c0be31100eaa4bf6d00274bbad280621c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=0765536c0be31100eaa4bf6d00274bbad280621c", "patch": "@@ -2219,14 +2219,16 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n-    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n-    /// which takes the key as its argument, and returns a mutable reference to the value in the\n-    /// entry.\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function.\n+    /// This method allows for generating key-derived values for insertion by providing the default\n+    /// function a reference to the key that was moved during the `.entry(key)` method call.\n+    ///\n+    /// The reference to the moved key is provided so that cloning or copying the key is\n+    /// unnecessary, unlike with `.or_insert_with(|| ... )`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(or_insert_with_key)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, usize> = HashMap::new();\n@@ -2236,7 +2238,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n+    #[stable(feature = \"or_insert_with_key\", since = \"1.50.0\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),"}]}