{"sha": "003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "node_id": "C_kwDOAAsO6NoAKDAwM2I5NTRhNDNhN2YxZjkwNThmMjVlOGY5YjZkZGZkNGEzZGNlZDk", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-04-10T23:02:52Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-05-12T00:16:25Z"}, "message": "Apply CR suggestions; add real tracking issue", "tree": {"sha": "0f7e59be0a498f30146cc7290339125802f91f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f7e59be0a498f30146cc7290339125802f91f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "html_url": "https://github.com/rust-lang/rust/commit/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb15b3797452b87c6ea3189fa60dd52d59a567d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb15b3797452b87c6ea3189fa60dd52d59a567d", "html_url": "https://github.com/rust-lang/rust/commit/4bb15b3797452b87c6ea3189fa60dd52d59a567d"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "59ea40dc2f94e3bd85654ae5c776ae39c1becb97", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "patch": "@@ -377,6 +377,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         }\n \n                         let pointee_layout = self.layout_of(substs.type_at(0))?;\n+                        // This re-interprets an isize at ret_layout, but we already checked\n+                        // that if ret_layout is usize, then the result must be non-negative.\n                         let val = ImmTy::from_scalar(val, ret_layout);\n                         let size = ImmTy::from_int(pointee_layout.size.bytes(), ret_layout);\n                         self.exact_div(&val, &size, dest)?;"}, {"sha": "fd21b3671182bbea095da16d49005a94dcd32e5d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "patch": "@@ -127,7 +127,7 @@\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(ptr_metadata)]\n-#![feature(ptr_unsigned_offset_from)]\n+#![feature(ptr_sub_ptr)]\n #![feature(receiver_trait)]\n #![feature(set_ptr_value)]\n #![feature(slice_group_by)]"}, {"sha": "d1936b6b566c1a3f1feaabb0ac16d4971602220e", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "patch": "@@ -126,6 +126,7 @@\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_pin)]\n+#![feature(const_ptr_sub_ptr)]\n #![feature(const_replace)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_is_null)]"}, {"sha": "028adc796e526b25275636b7288807e30cda4ab5", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "patch": "@@ -627,7 +627,7 @@ impl<T: ?Sized> *const T {\n     /// to [`sub`](#method.sub)).  The following are all equivalent, assuming\n     /// that their safety preconditions are met:\n     /// ```rust\n-    /// # #![feature(ptr_unsigned_offset_from)]\n+    /// # #![feature(ptr_sub_ptr)]\n     /// # unsafe fn blah(ptr: *const i32, origin: *const i32, count: usize) -> bool {\n     /// ptr.sub_ptr(origin) == count\n     /// # &&\n@@ -656,7 +656,7 @@ impl<T: ?Sized> *const T {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ptr_unsigned_offset_from)]\n+    /// #![feature(ptr_sub_ptr)]\n     ///\n     /// let a = [0; 5];\n     /// let ptr1: *const i32 = &a[1];\n@@ -671,8 +671,8 @@ impl<T: ?Sized> *const T {\n     /// // This would be incorrect, as the pointers are not correctly ordered:\n     /// // ptr1.offset_from(ptr2)\n     /// ```\n-    #[unstable(feature = \"ptr_unsigned_offset_from\", issue = \"88888888\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n+    #[unstable(feature = \"ptr_sub_ptr\", issue = \"95892\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_sub_ptr\", issue = \"95892\")]\n     #[inline]\n     pub const unsafe fn sub_ptr(self, origin: *const T) -> usize\n     where"}, {"sha": "1a32dd62dfd559e5c70fc0b6a635194b348ab4c2", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "patch": "@@ -803,7 +803,7 @@ impl<T: ?Sized> *mut T {\n     /// to [`sub`](#method.sub)).  The following are all equivalent, assuming\n     /// that their safety preconditions are met:\n     /// ```rust\n-    /// # #![feature(ptr_unsigned_offset_from)]\n+    /// # #![feature(ptr_sub_ptr)]\n     /// # unsafe fn blah(ptr: *mut i32, origin: *mut i32, count: usize) -> bool {\n     /// ptr.sub_ptr(origin) == count\n     /// # &&\n@@ -832,7 +832,7 @@ impl<T: ?Sized> *mut T {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ptr_unsigned_offset_from)]\n+    /// #![feature(ptr_sub_ptr)]\n     ///\n     /// let mut a = [0; 5];\n     /// let p: *mut i32 = a.as_mut_ptr();\n@@ -848,8 +848,8 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// // This would be incorrect, as the pointers are not correctly ordered:\n     /// // ptr1.offset_from(ptr2)\n-    #[unstable(feature = \"ptr_unsigned_offset_from\", issue = \"88888888\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n+    #[unstable(feature = \"ptr_sub_ptr\", issue = \"95892\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_sub_ptr\", issue = \"95892\")]\n     #[inline]\n     pub const unsafe fn sub_ptr(self, origin: *const T) -> usize\n     where"}, {"sha": "b53718316f3b59a99ffbdd62e884fee737220dd6", "filename": "src/test/ui/consts/offset_from.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs?ref=003b954a43a7f1f9058f25e8f9b6ddfd4a3dced9", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n \n #![feature(const_ptr_offset_from)]\n-#![feature(ptr_unsigned_offset_from)]\n+#![feature(const_ptr_sub_ptr)]\n+#![feature(ptr_sub_ptr)]\n \n struct Struct {\n     field: (),"}]}