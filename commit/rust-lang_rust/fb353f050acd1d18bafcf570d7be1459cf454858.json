{"sha": "fb353f050acd1d18bafcf570d7be1459cf454858", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMzUzZjA1MGFjZDFkMThiYWZjZjU3MGQ3YmUxNDU5Y2Y0NTQ4NTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-19T23:55:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T17:51:33Z"}, "message": "resolve: Privatize all resolver fields", "tree": {"sha": "5ef3a1dfc6a53717b2a33be2212416549cc5bc32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef3a1dfc6a53717b2a33be2212416549cc5bc32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb353f050acd1d18bafcf570d7be1459cf454858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb353f050acd1d18bafcf570d7be1459cf454858", "html_url": "https://github.com/rust-lang/rust/commit/fb353f050acd1d18bafcf570d7be1459cf454858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb353f050acd1d18bafcf570d7be1459cf454858/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222503a354d263ee13ee160506443036b799a2ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/222503a354d263ee13ee160506443036b799a2ea", "html_url": "https://github.com/rust-lang/rust/commit/222503a354d263ee13ee160506443036b799a2ea"}], "stats": {"total": 111, "additions": 61, "deletions": 50}, "files": [{"sha": "3d6ea5354a9f87a27e8fac094161061192c1d38d", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fb353f050acd1d18bafcf570d7be1459cf454858/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb353f050acd1d18bafcf570d7be1459cf454858/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=fb353f050acd1d18bafcf570d7be1459cf454858", "patch": "@@ -6,6 +6,7 @@ use log::{info, warn, log_enabled};\n use rustc::dep_graph::DepGraph;\n use rustc::hir;\n use rustc::hir::lowering::lower_crate;\n+use rustc::hir::map::Definitions;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n@@ -154,7 +155,7 @@ pub fn configure_and_expand(\n             }\n         };\n         box_region_allow_access!(for(), (&mut Resolver<'_>), (&mut resolver));\n-        ExpansionResult::from_owned_resolver(resolver)\n+        ExpansionResult::from_resolver_outputs(resolver.into_outputs())\n     });\n     result.map(|k| (k, resolver))\n }\n@@ -165,42 +166,8 @@ pub struct ExpansionResult {\n }\n \n impl ExpansionResult {\n-    fn from_owned_resolver(\n-        resolver: Resolver<'_>,\n-    ) -> Self {\n-        ExpansionResult {\n-            defs: Steal::new(resolver.definitions),\n-            resolutions: Steal::new(Resolutions {\n-                extern_crate_map: resolver.extern_crate_map,\n-                export_map: resolver.export_map,\n-                trait_map: resolver.trait_map,\n-                glob_map: resolver.glob_map,\n-                maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n-                maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n-                extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n-                    (ident.name, entry.introduced_by_item)\n-                }).collect(),\n-            }),\n-        }\n-    }\n-\n-    pub fn from_resolver_ref(\n-        resolver: &Resolver<'_>,\n-    ) -> Self {\n-        ExpansionResult {\n-            defs: Steal::new(resolver.definitions.clone()),\n-            resolutions: Steal::new(Resolutions {\n-                extern_crate_map: resolver.extern_crate_map.clone(),\n-                export_map: resolver.export_map.clone(),\n-                trait_map: resolver.trait_map.clone(),\n-                glob_map: resolver.glob_map.clone(),\n-                maybe_unused_trait_imports: resolver.maybe_unused_trait_imports.clone(),\n-                maybe_unused_extern_crates: resolver.maybe_unused_extern_crates.clone(),\n-                extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n-                    (ident.name, entry.introduced_by_item)\n-                }).collect(),\n-            }),\n-        }\n+    fn from_resolver_outputs((defs, resolutions): (Definitions, Resolutions)) -> Self {\n+        ExpansionResult { defs: Steal::new(defs), resolutions: Steal::new(resolutions) }\n     }\n }\n \n@@ -213,7 +180,7 @@ impl BoxedResolver {\n             Err(resolver) => {\n                 let resolver = &*resolver;\n                 resolver.borrow_mut().access(|resolver| {\n-                    ExpansionResult::from_resolver_ref(resolver)\n+                    ExpansionResult::from_resolver_outputs(resolver.clone_outputs())\n                 })\n             }\n         }"}, {"sha": "57f1b5186cbabb497637edc66296f56291749840", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fb353f050acd1d18bafcf570d7be1459cf454858/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb353f050acd1d18bafcf570d7be1459cf454858/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fb353f050acd1d18bafcf570d7be1459cf454858", "patch": "@@ -831,12 +831,12 @@ pub struct Resolver<'a> {\n     session: &'a Session,\n     cstore: &'a CStore,\n \n-    pub definitions: Definitions,\n+    definitions: Definitions,\n \n-    pub graph_root: Module<'a>,\n+    graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n-    pub extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'a>>,\n+    extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'a>>,\n \n     /// N.B., this is used only for better diagnostics, not name resolution itself.\n     has_self: FxHashSet<DefId>,\n@@ -869,9 +869,9 @@ pub struct Resolver<'a> {\n     label_res_map: NodeMap<NodeId>,\n \n     /// `CrateNum` resolutions of `extern crate` items.\n-    pub extern_crate_map: NodeMap<CrateNum>,\n-    pub export_map: ExportMap<NodeId>,\n-    pub trait_map: TraitMap,\n+    extern_crate_map: NodeMap<CrateNum>,\n+    export_map: ExportMap<NodeId>,\n+    trait_map: TraitMap,\n \n     /// A map from nodes to anonymous modules.\n     /// Anonymous modules are pseudo-modules that are implicitly created around items\n@@ -898,11 +898,11 @@ pub struct Resolver<'a> {\n     underscore_disambiguator: u32,\n \n     /// Maps glob imports to the names of items actually imported.\n-    pub glob_map: GlobMap,\n+    glob_map: GlobMap,\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n-    pub maybe_unused_trait_imports: NodeSet,\n-    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n+    maybe_unused_trait_imports: NodeSet,\n+    maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n \n     /// Privacy errors are delayed until the end in order to deduplicate them.\n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -920,7 +920,7 @@ pub struct Resolver<'a> {\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, SyntaxExtension>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n-    pub all_macros: FxHashMap<Name, Res>,\n+    all_macros: FxHashMap<Name, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n@@ -1236,6 +1236,40 @@ impl<'a> Resolver<'a> {\n         Default::default()\n     }\n \n+    pub fn into_outputs(self) -> (Definitions, ty::Resolutions) {\n+        (\n+            self.definitions,\n+            ty::Resolutions {\n+                extern_crate_map: self.extern_crate_map,\n+                export_map: self.export_map,\n+                trait_map: self.trait_map,\n+                glob_map: self.glob_map,\n+                maybe_unused_trait_imports: self.maybe_unused_trait_imports,\n+                maybe_unused_extern_crates: self.maybe_unused_extern_crates,\n+                extern_prelude: self.extern_prelude.iter().map(|(ident, entry)| {\n+                    (ident.name, entry.introduced_by_item)\n+                }).collect(),\n+            },\n+        )\n+    }\n+\n+    pub fn clone_outputs(&self) -> (Definitions, ty::Resolutions) {\n+        (\n+            self.definitions.clone(),\n+            ty::Resolutions {\n+                extern_crate_map: self.extern_crate_map.clone(),\n+                export_map: self.export_map.clone(),\n+                trait_map: self.trait_map.clone(),\n+                glob_map: self.glob_map.clone(),\n+                maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n+                maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n+                extern_prelude: self.extern_prelude.iter().map(|(ident, entry)| {\n+                    (ident.name, entry.introduced_by_item)\n+                }).collect(),\n+            },\n+        )\n+    }\n+\n     fn non_macro_attr(&self, mark_used: bool) -> Lrc<SyntaxExtension> {\n         self.non_macro_attrs[mark_used as usize].clone()\n     }\n@@ -2808,6 +2842,16 @@ impl<'a> Resolver<'a> {\n         seg.id = self.session.next_node_id();\n         seg\n     }\n+\n+    // For rustdoc.\n+    pub fn graph_root(&self) -> Module<'a> {\n+        self.graph_root\n+    }\n+\n+    // For rustdoc.\n+    pub fn all_macros(&self) -> &FxHashMap<Name, Res> {\n+        &self.all_macros\n+    }\n }\n \n fn names_to_string(names: &[Name]) -> String {"}, {"sha": "caa7f08f68cffb3fb15840ab08108ab8ba229e7b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb353f050acd1d18bafcf570d7be1459cf454858/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb353f050acd1d18bafcf570d7be1459cf454858/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=fb353f050acd1d18bafcf570d7be1459cf454858", "patch": "@@ -432,13 +432,13 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n     let path = ast::Path::from_ident(Ident::from_str(path_str));\n     cx.enter_resolver(|resolver| {\n         if let Ok((Some(ext), res)) = resolver.resolve_macro_path(\n-            &path, None, &ParentScope::module(resolver.graph_root), false, false\n+            &path, None, &ParentScope::module(resolver.graph_root()), false, false\n         ) {\n             if let SyntaxExtensionKind::LegacyBang { .. } = ext.kind {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));\n             }\n         }\n-        if let Some(res) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n+        if let Some(res) = resolver.all_macros().get(&Symbol::intern(path_str)) {\n             return Some(res.map_id(|_| panic!(\"unexpected id\")));\n         }\n         None"}]}