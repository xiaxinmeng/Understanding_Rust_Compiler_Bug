{"sha": "184d3b3badb9072aee9a439386dcc8e905d1f800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NGQzYjNiYWRiOTA3MmFlZTlhNDM5Mzg2ZGNjOGU5MDVkMWY4MDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T02:24:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T03:17:07Z"}, "message": "expand thread-local storage tests to cover dtor order and re-running dtors", "tree": {"sha": "24fe82a6679632611b4dc33500a64dc544831bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24fe82a6679632611b4dc33500a64dc544831bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/184d3b3badb9072aee9a439386dcc8e905d1f800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/184d3b3badb9072aee9a439386dcc8e905d1f800", "html_url": "https://github.com/rust-lang/rust/commit/184d3b3badb9072aee9a439386dcc8e905d1f800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/184d3b3badb9072aee9a439386dcc8e905d1f800/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d539fafaf602c35d9dec0a7e509fed19d03f054b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d539fafaf602c35d9dec0a7e509fed19d03f054b", "html_url": "https://github.com/rust-lang/rust/commit/d539fafaf602c35d9dec0a7e509fed19d03f054b"}], "stats": {"total": 87, "additions": 68, "deletions": 19}, "files": [{"sha": "636cf2ad0b5e1dbe8f7a8ab400e859d3621edb0b", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/184d3b3badb9072aee9a439386dcc8e905d1f800/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184d3b3badb9072aee9a439386dcc8e905d1f800/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=184d3b3badb9072aee9a439386dcc8e905d1f800", "patch": "@@ -614,7 +614,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let arg_dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n                 self.write_primval(arg_dest, data, u8_ptr_ty)?;\n \n-                // We ourselbes return 0\n+                // We ourselves return 0\n                 self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n \n                 // Don't fall through"}, {"sha": "4fb43793eaec5b85fe34126c4079372bf2cd2c96", "filename": "tests/run-pass/thread-local-no-dtor.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d539fafaf602c35d9dec0a7e509fed19d03f054b/tests%2Frun-pass%2Fthread-local-no-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d539fafaf602c35d9dec0a7e509fed19d03f054b/tests%2Frun-pass%2Fthread-local-no-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fthread-local-no-dtor.rs?ref=d539fafaf602c35d9dec0a7e509fed19d03f054b", "patch": "@@ -1,18 +0,0 @@\n-//ignore-windows\n-\n-#![feature(libc)]\n-extern crate libc;\n-\n-use std::mem;\n-\n-pub type Key = libc::pthread_key_t;\n-\n-pub unsafe fn create(dtor: Option<unsafe extern fn(*mut u8)>) -> Key {\n-    let mut key = 0;\n-    assert_eq!(libc::pthread_key_create(&mut key, mem::transmute(dtor)), 0);\n-    key\n-}\n-\n-fn main() {\n-    let _ = unsafe { create(None) };\n-}"}, {"sha": "003fd1ad4c00f767e7fe13fb63d70196bdf0e5e2", "filename": "tests/run-pass/thread-local.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/184d3b3badb9072aee9a439386dcc8e905d1f800/tests%2Frun-pass%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184d3b3badb9072aee9a439386dcc8e905d1f800/tests%2Frun-pass%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fthread-local.rs?ref=184d3b3badb9072aee9a439386dcc8e905d1f800", "patch": "@@ -0,0 +1,67 @@\n+//ignore-windows\n+\n+#![feature(libc)]\n+extern crate libc;\n+\n+use std::mem;\n+\n+pub type Key = libc::pthread_key_t;\n+\n+static mut RECORD : usize = 0;\n+static mut KEYS : [Key; 2] = [0; 2];\n+static mut GLOBALS : [u64; 2] = [1, 0];\n+\n+static mut CANNARY : *mut u64 = 0 as *mut _; // this serves as a cannary: if TLS dtors are not run properly, this will not get deallocated, making the test fail.\n+\n+pub unsafe fn create(dtor: Option<unsafe extern fn(*mut u8)>) -> Key {\n+    let mut key = 0;\n+    assert_eq!(libc::pthread_key_create(&mut key, mem::transmute(dtor)), 0);\n+    key\n+}\n+\n+pub unsafe fn set(key: Key, value: *mut u8) {\n+    let r = libc::pthread_setspecific(key, value as *mut _);\n+    assert_eq!(r, 0);\n+}\n+\n+pub fn record(r: usize) {\n+    assert!(r < 10);\n+    unsafe { RECORD = RECORD*10 + r };\n+}\n+\n+unsafe extern fn dtor(mut ptr: *mut u64) {\n+    assert!(CANNARY != 0 as *mut _); // make sure we do not get run too often\n+    let val = *ptr;\n+    \n+    let which_key = GLOBALS.iter().position(|global| global as *const _ == ptr).expect(\"Should find my global\");\n+    record(which_key);\n+\n+    if val > 0 {\n+        *ptr = val-1;\n+        set(KEYS[which_key], ptr as *mut _);\n+    }\n+\n+    // Check if the records matches what we expect. If yes, clear the cannary.\n+    // If the record is wrong, the cannary will ever get cleared, leading to a leak -> test fails.\n+    // If the record is incomplete (i.e., more dtor calls happen), the check at the beginning of this function will fail -> test fails.\n+    // The correct sequence is: First key 0, then key 1, then key 0.\n+    if RECORD == 0_1_0 {\n+        drop(Box::from_raw(CANNARY));\n+        CANNARY = 0 as *mut _;\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        create(None); // check that the no-dtor case works\n+\n+        // Initialize the keys we use to check destructor ordering\n+        for (key, global) in KEYS.iter_mut().zip(GLOBALS.iter()) {\n+            *key = create(Some(mem::transmute(dtor as unsafe extern fn(*mut u64))));\n+            set(*key, global as *const _ as *mut _);\n+        }\n+\n+        // Initialize cannary\n+        CANNARY = Box::into_raw(Box::new(0u64));\n+    }\n+}"}]}