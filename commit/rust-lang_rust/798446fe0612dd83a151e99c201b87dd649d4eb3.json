{"sha": "798446fe0612dd83a151e99c201b87dd649d4eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ODQ0NmZlMDYxMmRkODNhMTUxZTk5YzIwMWI4N2RkNjQ5ZDRlYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-07T23:24:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-07T23:24:15Z"}, "message": "Auto merge of #87772 - npmccallum:naked_abi, r=Amanieu\n\nMove naked function ABI check to its own lint\n\nThis check was previously categorized under the lint named\n`UNSUPPORTED_NAKED_FUNCTIONS`. That lint is future incompatible and will\nbe turned into an error in a future release. However, as defined in the\nConstrained Naked Functions RFC, this check should only be a warning.\nThis is because it is possible for a naked function to be implemented in\nsuch a way that it does not break even the undefined ABI. For example, a\n`jmp` to a `const`.\n\nTherefore, this patch defines a new lint named\n`UNDEFINED_NAKED_FUNCTION_ABI` which contains just this single check.\nUnlike `UNSUPPORTED_NAKED_FUNCTIONS`, `UNDEFINED_NAKED_FUNCTION_ABI`\nwill not be converted to an error in the future.\n\nrust-lang/rfcs#2774\nrust-lang/rfcs#2972", "tree": {"sha": "6e71618e2083ebcfaf354a90db0ba81873082df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e71618e2083ebcfaf354a90db0ba81873082df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798446fe0612dd83a151e99c201b87dd649d4eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798446fe0612dd83a151e99c201b87dd649d4eb3", "html_url": "https://github.com/rust-lang/rust/commit/798446fe0612dd83a151e99c201b87dd649d4eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798446fe0612dd83a151e99c201b87dd649d4eb3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574d37568029f5c637557a87426ade54770d9a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/574d37568029f5c637557a87426ade54770d9a14", "html_url": "https://github.com/rust-lang/rust/commit/574d37568029f5c637557a87426ade54770d9a14"}, {"sha": "49685377805e9c87d00aa1d8b8cece3de2dc8319", "url": "https://api.github.com/repos/rust-lang/rust/commits/49685377805e9c87d00aa1d8b8cece3de2dc8319", "html_url": "https://github.com/rust-lang/rust/commit/49685377805e9c87d00aa1d8b8cece3de2dc8319"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "1998386603f12df543a4541f73f1f9ffae43d337", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/798446fe0612dd83a151e99c201b87dd649d4eb3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798446fe0612dd83a151e99c201b87dd649d4eb3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=798446fe0612dd83a151e99c201b87dd649d4eb3", "patch": "@@ -2689,6 +2689,38 @@ declare_lint! {\n     \"detects deprecation attributes with no effect\",\n }\n \n+declare_lint! {\n+    /// The `undefined_naked_function_abi` lint detects naked function definitions that\n+    /// either do not specify an ABI or specify the Rust ABI.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![feature(naked_functions)]\n+    /// #![feature(asm)]\n+    ///\n+    /// #[naked]\n+    /// pub fn default_abi() -> u32 {\n+    ///     unsafe { asm!(\"\", options(noreturn)); }\n+    /// }\n+    ///\n+    /// #[naked]\n+    /// pub extern \"Rust\" fn rust_abi() -> u32 {\n+    ///     unsafe { asm!(\"\", options(noreturn)); }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The Rust ABI is currently undefined. Therefore, naked functions should\n+    /// specify a non-Rust ABI.\n+    pub UNDEFINED_NAKED_FUNCTION_ABI,\n+    Warn,\n+    \"undefined naked function ABI\"\n+}\n+\n declare_lint! {\n     /// The `unsupported_naked_functions` lint detects naked function\n     /// definitions that are unsupported but were previously accepted.\n@@ -2699,7 +2731,7 @@ declare_lint! {\n     /// #![feature(naked_functions)]\n     ///\n     /// #[naked]\n-    /// pub fn f() -> u32 {\n+    /// pub extern \"C\" fn f() -> u32 {\n     ///     42\n     /// }\n     /// ```"}, {"sha": "899503cc556e5920e135d171966b32256129a348", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798446fe0612dd83a151e99c201b87dd649d4eb3/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798446fe0612dd83a151e99c201b87dd649d4eb3/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=798446fe0612dd83a151e99c201b87dd649d4eb3", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::intravisit::{ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{ExprKind, HirId, InlineAsmOperand, StmtKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::lint::builtin::UNDEFINED_NAKED_FUNCTION_ABI;\n use rustc_session::lint::builtin::UNSUPPORTED_NAKED_FUNCTIONS;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -87,7 +88,7 @@ fn check_inline(tcx: TyCtxt<'_>, hir_id: HirId, attrs: &[Attribute]) {\n /// Checks that function uses non-Rust ABI.\n fn check_abi(tcx: TyCtxt<'_>, hir_id: HirId, abi: Abi, fn_ident_span: Span) {\n     if abi == Abi::Rust {\n-        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, fn_ident_span, |lint| {\n+        tcx.struct_span_lint_hir(UNDEFINED_NAKED_FUNCTION_ABI, hir_id, fn_ident_span, |lint| {\n             lint.build(\"Rust ABI is unsupported in naked functions\").emit();\n         });\n     }"}, {"sha": "900f4443a1fd67317bf4acb791b35e50ca87f01d", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798446fe0612dd83a151e99c201b87dd649d4eb3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798446fe0612dd83a151e99c201b87dd649d4eb3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=798446fe0612dd83a151e99c201b87dd649d4eb3", "patch": "@@ -134,14 +134,12 @@ unsafe extern \"C\" fn invalid_options_continued() {\n #[naked]\n pub unsafe fn default_abi() {\n     //~^ WARN Rust ABI is unsupported in naked functions\n-    //~| WARN this was previously accepted\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n pub unsafe extern \"Rust\" fn rust_abi() {\n     //~^ WARN Rust ABI is unsupported in naked functions\n-    //~| WARN this was previously accepted\n     asm!(\"\", options(noreturn));\n }\n "}, {"sha": "231a6239cbde59602d20f6aa59fb107d69f41c99", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/798446fe0612dd83a151e99c201b87dd649d4eb3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/798446fe0612dd83a151e99c201b87dd649d4eb3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=798446fe0612dd83a151e99c201b87dd649d4eb3", "patch": "@@ -284,20 +284,16 @@ warning: Rust ABI is unsupported in naked functions\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+   = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:142:29\n+  --> $DIR/naked-functions.rs:141:29\n    |\n LL | pub unsafe extern \"Rust\" fn rust_abi() {\n    |                             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:177:1\n+  --> $DIR/naked-functions.rs:175:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -306,7 +302,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:185:1\n+  --> $DIR/naked-functions.rs:183:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -315,7 +311,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:193:1\n+  --> $DIR/naked-functions.rs:191:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n@@ -324,7 +320,7 @@ LL | #[inline(never)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:201:1\n+  --> $DIR/naked-functions.rs:199:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -333,7 +329,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:204:1\n+  --> $DIR/naked-functions.rs:202:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -342,7 +338,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:207:1\n+  --> $DIR/naked-functions.rs:205:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^"}]}