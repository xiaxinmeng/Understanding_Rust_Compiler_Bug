{"sha": "7ed39c6d9bddb6f11b4681574cc0375446eb594e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZDM5YzZkOWJkZGI2ZjExYjQ2ODE1NzRjYzAzNzU0NDZlYjU5NGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T17:47:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:57Z"}, "message": "Fallout in tests -- explain an interesting test failure having to\ndo with dropck and the new outlives rules", "tree": {"sha": "25e2b2e8ee088c286e45c61b348f68223790d4d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e2b2e8ee088c286e45c61b348f68223790d4d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ed39c6d9bddb6f11b4681574cc0375446eb594e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed39c6d9bddb6f11b4681574cc0375446eb594e", "html_url": "https://github.com/rust-lang/rust/commit/7ed39c6d9bddb6f11b4681574cc0375446eb594e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ed39c6d9bddb6f11b4681574cc0375446eb594e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "html_url": "https://github.com/rust-lang/rust/commit/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "5432cbf402a0cbafcf1b5779e1f6e766daf66b42", "filename": "src/test/compile-fail/dropck-object-cycle.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7ed39c6d9bddb6f11b4681574cc0375446eb594e/src%2Ftest%2Fcompile-fail%2Fdropck-object-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed39c6d9bddb6f11b4681574cc0375446eb594e/src%2Ftest%2Fcompile-fail%2Fdropck-object-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck-object-cycle.rs?ref=7ed39c6d9bddb6f11b4681574cc0375446eb594e", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test used to be part of a run-pass test, but revised outlives\n+// rule means that it no longer compiles.\n+\n+#![allow(unused_variables)]\n+\n+trait Trait<'a> {\n+    fn long(&'a self) -> isize;\n+    fn short<'b>(&'b self) -> isize;\n+}\n+\n+fn object_invoke1<'d>(x: &'d Trait<'d>) -> (isize, isize) { loop { } }\n+\n+trait MakerTrait {\n+    fn mk() -> Self;\n+}\n+\n+fn make_val<T:MakerTrait>() -> T {\n+    MakerTrait::mk()\n+}\n+\n+impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n+    fn mk() -> Box<Trait<'t>+'static> { loop { } }\n+}\n+\n+pub fn main() {\n+    let m : Box<Trait+'static> = make_val();\n+    assert_eq!(object_invoke1(&*m), (4,5));\n+    //~^ ERROR `*m` does not live long enough\n+\n+    // the problem here is that the full type of `m` is\n+    //\n+    //   Box<Trait<'m>+'static>\n+    //\n+    // Here `'m` must be exactly the lifetime of the variable `m`.\n+    // This is because of two requirements:\n+    // 1. First, the basic type rules require that the\n+    //    type of `m`'s value outlives the lifetime of `m`. This puts a lower\n+    //    bound `'m`.\n+    //\n+    // 2. Meanwhile, the signature of `object_invoke1` requires that\n+    //    we create a reference of type `&'d Trait<'d>` for some `'d`.\n+    //    `'d` cannot outlive `'m`, so that forces the lifetime to be `'m`.\n+    //\n+    // This then conflicts with the dropck rules, which require that\n+    // the type of `m` *strictly outlives* `'m`. Hence we get an\n+    // error.\n+}"}, {"sha": "72a214f4c9ad057eb5622997d630715c98c6330e", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ed39c6d9bddb6f11b4681574cc0375446eb594e/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed39c6d9bddb6f11b4681574cc0375446eb594e/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=7ed39c6d9bddb6f11b4681574cc0375446eb594e", "patch": "@@ -42,7 +42,7 @@ fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (isize,isize) {\n     (l,s)\n }\n \n-struct Struct2<'h, 'i> {\n+struct Struct2<'h, 'i:'h> {\n     f: &'h (Trait<'i>+'h)\n }\n \n@@ -126,7 +126,10 @@ pub fn main() {\n     assert_eq!(field_invoke2(&s2), 3);\n \n     let m : Box<Trait> = make_val();\n-    assert_eq!(object_invoke1(&*m), (4,5));\n+    // assert_eq!(object_invoke1(&*m), (4,5));\n+    //            ~~~~~~~~~~~~~~~~~~~\n+    // this call yields a compilation error; see compile-fail/dropck-object-cycle.rs\n+    // for details.\n     assert_eq!(object_invoke2(&*m), 5);\n \n     // The RefMakerTrait above is pretty strange (i.e. it is strange"}]}