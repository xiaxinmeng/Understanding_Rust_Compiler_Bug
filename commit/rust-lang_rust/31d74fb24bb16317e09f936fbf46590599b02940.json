{"sha": "31d74fb24bb16317e09f936fbf46590599b02940", "node_id": "C_kwDOAAsO6NoAKDMxZDc0ZmIyNGJiMTYzMTdlMDlmOTM2ZmJmNDY1OTA1OTliMDI5NDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T15:39:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T15:39:40Z"}, "message": "Auto merge of #109220 - nikic:poison, r=cuviper\n\nUse poison instead of undef\n\nIn cases where it is legal, we should prefer poison values over undef values.\n\nThis replaces undef with poison for aggregate construction and for uninhabited types. There are more places where we can likely use poison, but I wanted to stay conservative to start with.\n\nIn particular the aggregate case is important for newer LLVM versions, which are not able to handle an undef base value during early optimization due to poison-propagation concerns.\n\nr? `@cuviper`", "tree": {"sha": "543f3d1d99001cb31fdd805917309fb528819243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543f3d1d99001cb31fdd805917309fb528819243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d74fb24bb16317e09f936fbf46590599b02940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d74fb24bb16317e09f936fbf46590599b02940", "html_url": "https://github.com/rust-lang/rust/commit/31d74fb24bb16317e09f936fbf46590599b02940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d74fb24bb16317e09f936fbf46590599b02940/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f421586eed77de266a3f99ffa8a5687b7d2d893c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f421586eed77de266a3f99ffa8a5687b7d2d893c", "html_url": "https://github.com/rust-lang/rust/commit/f421586eed77de266a3f99ffa8a5687b7d2d893c"}, {"sha": "30331828cb9e694b59c9325dce7c1f25dac3e80e", "url": "https://api.github.com/repos/rust-lang/rust/commits/30331828cb9e694b59c9325dce7c1f25dac3e80e", "html_url": "https://github.com/rust-lang/rust/commit/30331828cb9e694b59c9325dce7c1f25dac3e80e"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "ac04b61a30672cf152dfb5736830899b2e5a6c11", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -73,6 +73,11 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         }\n     }\n \n+    fn const_poison(&self, typ: Type<'gcc>) -> RValue<'gcc> {\n+        // No distinction between undef and poison.\n+        self.const_undef(typ)\n+    }\n+\n     fn const_int(&self, typ: Type<'gcc>, int: i64) -> RValue<'gcc> {\n         self.gcc_int(typ, int)\n     }"}, {"sha": "580451ba26546ebf9c2cd6e8484abb26353f12b5", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -990,7 +990,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn resume(&mut self, exn0: &'ll Value, exn1: &'ll Value) {\n         let ty = self.type_struct(&[self.type_i8p(), self.type_i32()], false);\n-        let mut exn = self.const_undef(ty);\n+        let mut exn = self.const_poison(ty);\n         exn = self.insert_value(exn, exn0, 0);\n         exn = self.insert_value(exn, exn1, 1);\n         unsafe {"}, {"sha": "efa0c13226ecffe4f7ac48b41709a222c3288f72", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -130,6 +130,10 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMGetUndef(t) }\n     }\n \n+    fn const_poison(&self, t: &'ll Type) -> &'ll Value {\n+        unsafe { llvm::LLVMGetPoison(t) }\n+    }\n+\n     fn const_int(&self, t: &'ll Type, i: i64) -> &'ll Value {\n         unsafe { llvm::LLVMConstInt(t, i as u64, True) }\n     }"}, {"sha": "9e5265188b5035cee20776f49a11d1b15ae34ccc", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -1069,6 +1069,7 @@ extern \"C\" {\n     // Operations on constants of any type\n     pub fn LLVMConstNull(Ty: &Type) -> &Value;\n     pub fn LLVMGetUndef(Ty: &Type) -> &Value;\n+    pub fn LLVMGetPoison(Ty: &Type) -> &Value;\n \n     // Operations on metadata\n     pub fn LLVMMDStringInContext(C: &Context, Str: *const c_char, SLen: c_uint) -> &Value;"}, {"sha": "25721f7558383be62eb2ba2abe84c01a75bbcba6", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -60,7 +60,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n     ) -> OperandRef<'tcx, V> {\n         assert!(layout.is_zst());\n         OperandRef {\n-            val: OperandValue::Immediate(bx.const_undef(bx.immediate_backend_type(layout))),\n+            val: OperandValue::Immediate(bx.const_poison(bx.immediate_backend_type(layout))),\n             layout,\n         }\n     }\n@@ -145,7 +145,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n             let llty = bx.cx().backend_type(self.layout);\n             debug!(\"Operand::immediate_or_packed_pair: packing {:?} into {:?}\", self, llty);\n             // Reconstruct the immediate aggregate.\n-            let mut llpair = bx.cx().const_undef(llty);\n+            let mut llpair = bx.cx().const_poison(llty);\n             let imm_a = bx.from_immediate(a);\n             let imm_b = bx.from_immediate(b);\n             llpair = bx.insert_value(llpair, imm_a, 0);"}, {"sha": "f6523a448e32dc0b37df4ea71817f33f3549a100", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -214,7 +214,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         let cast_to_size = cast_to_layout.layout.size();\n         let cast_to = bx.cx().immediate_backend_type(cast_to_layout);\n         if self.layout.abi.is_uninhabited() {\n-            return bx.cx().const_undef(cast_to);\n+            return bx.cx().const_poison(cast_to);\n         }\n         let (tag_scalar, tag_encoding, tag_field) = match self.layout.variants {\n             Variants::Single { index } => {"}, {"sha": "14f57b63e97000e0db122e6032cbf905a9aab67c", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -346,7 +346,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let ll_t_out = bx.cx().immediate_backend_type(cast);\n                         if operand.layout.abi.is_uninhabited() {\n-                            let val = OperandValue::Immediate(bx.cx().const_undef(ll_t_out));\n+                            let val = OperandValue::Immediate(bx.cx().const_poison(ll_t_out));\n                             return OperandRef { val, layout: cast };\n                         }\n                         let r_t_in ="}, {"sha": "61906302779e95dbdc864d31dd49ee0519c3d6c5", "filename": "compiler/rustc_codegen_ssa/src/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -8,6 +8,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     // Constant constructors\n     fn const_null(&self, t: Self::Type) -> Self::Value;\n     fn const_undef(&self, t: Self::Type) -> Self::Value;\n+    fn const_poison(&self, t: Self::Type) -> Self::Value;\n     fn const_int(&self, t: Self::Type, i: i64) -> Self::Value;\n     fn const_uint(&self, t: Self::Type, i: u64) -> Self::Value;\n     fn const_uint_big(&self, t: Self::Type, u: u128) -> Self::Value;"}, {"sha": "b53a68a558802730ba72854048a49275cc238241", "filename": "tests/codegen/adjustments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d74fb24bb16317e09f936fbf46590599b02940/tests%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d74fb24bb16317e09f936fbf46590599b02940/tests%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fadjustments.rs?ref=31d74fb24bb16317e09f936fbf46590599b02940", "patch": "@@ -13,7 +13,7 @@ pub fn helper(_: usize) {\n pub fn no_op_slice_adjustment(x: &[u8]) -> &[u8] {\n     // We used to generate an extra alloca and memcpy for the block's trailing expression value, so\n     // check that we copy directly to the return value slot\n-// CHECK: %0 = insertvalue { {{\\[0 x i8\\]\\*|ptr}}, [[USIZE]] } undef, {{\\[0 x i8\\]\\*|ptr}} %x.0, 0\n+// CHECK: %0 = insertvalue { {{\\[0 x i8\\]\\*|ptr}}, [[USIZE]] } poison, {{\\[0 x i8\\]\\*|ptr}} %x.0, 0\n // CHECK: %1 = insertvalue { {{\\[0 x i8\\]\\*|ptr}}, [[USIZE]] } %0, [[USIZE]] %x.1, 1\n // CHECK: ret { {{\\[0 x i8\\]\\*|ptr}}, [[USIZE]] } %1\n     { x }"}]}