{"sha": "3fdab9c44681247a94b8d09e4396b6058751ffcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZGFiOWM0NDY4MTI0N2E5NGI4ZDA5ZTQzOTZiNjA1ODc1MWZmY2I=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-08T11:56:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T08:14:03Z"}, "message": "Update to rustc changes", "tree": {"sha": "c9da2b215ac180fc0c2b75e6c34631dcebf7d765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9da2b215ac180fc0c2b75e6c34631dcebf7d765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fdab9c44681247a94b8d09e4396b6058751ffcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdab9c44681247a94b8d09e4396b6058751ffcb", "html_url": "https://github.com/rust-lang/rust/commit/3fdab9c44681247a94b8d09e4396b6058751ffcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fdab9c44681247a94b8d09e4396b6058751ffcb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6396ffa55473bd1ba2555860954633d44798b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6396ffa55473bd1ba2555860954633d44798b9", "html_url": "https://github.com/rust-lang/rust/commit/8a6396ffa55473bd1ba2555860954633d44798b9"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "51aa7ae31047a5d5142e6c73411c78e79d1f1c18", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fdab9c44681247a94b8d09e4396b6058751ffcb/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdab9c44681247a94b8d09e4396b6058751ffcb/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=3fdab9c44681247a94b8d09e4396b6058751ffcb", "patch": "@@ -427,7 +427,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     fn canonical_alloc_id(mem: &Memory<'mir, 'tcx, Self>, id: AllocId) -> AllocId {\n         let tcx = mem.tcx;\n         // Figure out if this is an extern static, and if yes, which one.\n-        let def_id = match tcx.alloc_map.lock().get(id) {\n+        let def_id = match tcx.get_global_alloc(id) {\n             Some(GlobalAlloc::Static(def_id)) if tcx.is_foreign_item(def_id) => def_id,\n             _ => {\n                 // No need to canonicalize anything.\n@@ -494,7 +494,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         if Some(id) == memory_extra.tracked_alloc_id {\n             register_diagnostic(NonHaltingDiagnostic::FreedAlloc(id));\n         }\n-        \n+\n         Ok(())\n     }\n "}, {"sha": "d78beed28cfb7a6f1d22a20e95b0fb11b73737fb", "filename": "src/thread.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fdab9c44681247a94b8d09e4396b6058751ffcb/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdab9c44681247a94b8d09e4396b6058751ffcb/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=3fdab9c44681247a94b8d09e4396b6058751ffcb", "patch": "@@ -428,7 +428,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match *val {\n             mir::interpret::ConstValue::Scalar(Scalar::Ptr(ref mut ptr)) => {\n                 let alloc_id = ptr.alloc_id;\n-                let alloc = this.tcx.alloc_map.lock().get(alloc_id);\n+                let alloc = this.tcx.get_global_alloc(alloc_id);\n                 let tcx = this.tcx;\n                 let is_thread_local = |def_id| {\n                     tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n@@ -489,13 +489,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 })?;\n             let id = raw_const.alloc_id;\n             // Extract the allocation from the query result.\n-            let mut alloc_map = tcx.alloc_map.lock();\n-            let allocation = alloc_map.unwrap_memory(id);\n+            let allocation = tcx.global_alloc(id).unwrap_memory();\n             // Create a new allocation id for the same allocation in this hacky\n             // way. Internally, `alloc_map` deduplicates allocations, but this\n             // is fine because Miri will make a copy before a first mutable\n             // access.\n-            let new_alloc_id = alloc_map.create_memory_alloc(allocation);\n+            let new_alloc_id = tcx.create_memory_alloc(allocation);\n             this.machine.threads.set_thread_local_alloc_id(def_id, new_alloc_id);\n             Ok(new_alloc_id)\n         }"}, {"sha": "6e0809b15ca43f4517a1e7b83db46692535e8b23", "filename": "tests/compile-fail/validity/invalid_wide_raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdab9c44681247a94b8d09e4396b6058751ffcb/tests%2Fcompile-fail%2Fvalidity%2Finvalid_wide_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdab9c44681247a94b8d09e4396b6058751ffcb/tests%2Fcompile-fail%2Fvalidity%2Finvalid_wide_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_wide_raw.rs?ref=3fdab9c44681247a94b8d09e4396b6058751ffcb", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     struct S {\n         x: * mut dyn T\n     }\n-    dbg!(S { x: unsafe { std::mem::transmute((0usize, 0usize)) } }); //~ ERROR: encountered dangling vtable pointer\n+    dbg!(S { x: unsafe { std::mem::transmute((0usize, 0usize)) } }); //~ ERROR: encountered dangling vtable pointer in wide pointer\n }"}]}