{"sha": "3617adfaee29c698713f1c4b6b62d9438c985d46", "node_id": "C_kwDOAAsO6NoAKDM2MTdhZGZhZWUyOWM2OTg3MTNmMWM0YjZiNjJkOTQzOGM5ODVkNDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-29T21:43:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-29T21:43:15Z"}, "message": "Rollup merge of #103876 - oli-obk:tait_implications, r=lcnr\n\ntype alias impl trait: add tests showing that hidden type only outlives lifetimes that occur in bounds\n\nfixes #103642\n\nhttps://github.com/rust-lang/rust/pull/102417 only made sure that hidden types cannot outlive lifetimes other than the ones mentioned on bounds, but didn't allow us to actually infer anything from that.\n\ncc `@aliemjay`", "tree": {"sha": "340c6440851415df24b458dac7e078726e1c0b97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/340c6440851415df24b458dac7e078726e1c0b97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3617adfaee29c698713f1c4b6b62d9438c985d46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhnzzCRBK7hj4Ov3rIwAAnHIIAIQ0BS3o/3OCGJe0sLq7DJrV\nv5IZeuCbaMPleHP/bwm6SEijCcMhqLQDHdcxg8/gepzYK7Dz6Xz35spDlW+PKWtP\nQMktI7iAHlDIGzYtSlbfjfsN6nOHGJKijDy8jYoUrWMpCoGS9DTAAoMwRgs/DB4Y\nosdXRCUqvoUntmrMUvBiFlbm80LcV4rN9k4QTiUXspy+YzQV3jag834MQT6aZSVp\no+C9wWACXdmxZW/agYsumCo1LB2XXeJ55wfhMeyxGQ551rTN8UMjQkE+PUvxzOmC\nbRMIQua0dL9GhX+MlrtlfsxiJFSeOJDTKfpSpmX+taf6ATY5HoaEps7dHZW79xc=\n=+azD\n-----END PGP SIGNATURE-----\n", "payload": "tree 340c6440851415df24b458dac7e078726e1c0b97\nparent e0098a5cc3a87d857e597af824d0ce1ed1ad85e0\nparent ca57832db636fedeeb529a1cc1feab0befef2ab0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669758195 +0100\ncommitter GitHub <noreply@github.com> 1669758195 +0100\n\nRollup merge of #103876 - oli-obk:tait_implications, r=lcnr\n\ntype alias impl trait: add tests showing that hidden type only outlives lifetimes that occur in bounds\n\nfixes #103642\n\nhttps://github.com/rust-lang/rust/pull/102417 only made sure that hidden types cannot outlive lifetimes other than the ones mentioned on bounds, but didn't allow us to actually infer anything from that.\n\ncc `@aliemjay`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3617adfaee29c698713f1c4b6b62d9438c985d46", "html_url": "https://github.com/rust-lang/rust/commit/3617adfaee29c698713f1c4b6b62d9438c985d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3617adfaee29c698713f1c4b6b62d9438c985d46/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0", "html_url": "https://github.com/rust-lang/rust/commit/e0098a5cc3a87d857e597af824d0ce1ed1ad85e0"}, {"sha": "ca57832db636fedeeb529a1cc1feab0befef2ab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca57832db636fedeeb529a1cc1feab0befef2ab0", "html_url": "https://github.com/rust-lang/rust/commit/ca57832db636fedeeb529a1cc1feab0befef2ab0"}], "stats": {"total": 129, "additions": 123, "deletions": 6}, "files": [{"sha": "90e2b6b698cf832ec4a2d45e266e173369a3062f", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3617adfaee29c698713f1c4b6b62d9438c985d46/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3617adfaee29c698713f1c4b6b62d9438c985d46/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=3617adfaee29c698713f1c4b6b62d9438c985d46", "patch": "@@ -1705,29 +1705,29 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         });\n     }\n \n+    #[instrument(level = \"debug\", skip(self, infcx, errors_buffer))]\n     fn check_member_constraints(\n         &self,\n         infcx: &InferCtxt<'tcx>,\n         errors_buffer: &mut RegionErrors<'tcx>,\n     ) {\n         let member_constraints = self.member_constraints.clone();\n         for m_c_i in member_constraints.all_indices() {\n-            debug!(\"check_member_constraint(m_c_i={:?})\", m_c_i);\n+            debug!(?m_c_i);\n             let m_c = &member_constraints[m_c_i];\n             let member_region_vid = m_c.member_region_vid;\n             debug!(\n-                \"check_member_constraint: member_region_vid={:?} with value {}\",\n-                member_region_vid,\n-                self.region_value_str(member_region_vid),\n+                ?member_region_vid,\n+                value = ?self.region_value_str(member_region_vid),\n             );\n             let choice_regions = member_constraints.choice_regions(m_c_i);\n-            debug!(\"check_member_constraint: choice_regions={:?}\", choice_regions);\n+            debug!(?choice_regions);\n \n             // Did the member region wind up equal to any of the option regions?\n             if let Some(o) =\n                 choice_regions.iter().find(|&&o_r| self.eval_equal(o_r, m_c.member_region_vid))\n             {\n-                debug!(\"check_member_constraint: evaluated as equal to {:?}\", o);\n+                debug!(\"evaluated as equal to {:?}\", o);\n                 continue;\n             }\n "}, {"sha": "ee9bce15d3478e2e73c5b266a7d983f01383c5db", "filename": "src/test/ui/type-alias-impl-trait/imply_bounds_from_bounds.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs?ref=3617adfaee29c698713f1c4b6b62d9438c985d46", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Callable {\n+    type Output;\n+    fn call() -> Self::Output;\n+}\n+\n+impl<'a> Callable for &'a () {\n+    type Output = impl Sized;\n+    fn call() -> Self::Output {}\n+}\n+\n+fn test<'a>() -> impl Sized {\n+    <&'a () as Callable>::call()\n+}\n+\n+fn want_static<T: 'static>(_: T) {}\n+\n+fn test2<'a>() {\n+    want_static(<&'a () as Callable>::call());\n+}\n+\n+fn main() {}"}, {"sha": "ae21a9134a41662ced017662cb09323902481db4", "filename": "src/test/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs?ref=3617adfaee29c698713f1c4b6b62d9438c985d46", "patch": "@@ -0,0 +1,38 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Callable {\n+    type Output;\n+    fn call(x: Self) -> Self::Output;\n+}\n+\n+trait PlusOne {\n+    fn plus_one(&mut self);\n+}\n+\n+impl<'a> PlusOne for &'a mut i32 {\n+    fn plus_one(&mut self) {\n+        **self += 1;\n+    }\n+}\n+\n+impl<T: PlusOne> Callable for T {\n+    type Output = impl PlusOne;\n+    fn call(t: T) -> Self::Output { t }\n+}\n+\n+fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n+    <&'a mut i32 as Callable>::call(y)\n+    //~^ ERROR hidden type for `impl PlusOne` captures lifetime that does not appear in bounds\n+}\n+\n+fn main() {\n+    let mut z = 42;\n+    let mut thing = test(&mut z);\n+    let mut thing2 = test(&mut z);\n+    thing.plus_one();\n+    assert_eq!(z, 43);\n+    thing2.plus_one();\n+    assert_eq!(z, 44);\n+    thing.plus_one();\n+    assert_eq!(z, 45);\n+}"}, {"sha": "0ed8a703b6dc54cb8690a316b278e8f043315948", "filename": "src/test/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr?ref=3617adfaee29c698713f1c4b6b62d9438c985d46", "patch": "@@ -0,0 +1,16 @@\n+error[E0700]: hidden type for `impl PlusOne` captures lifetime that does not appear in bounds\n+  --> $DIR/imply_bounds_from_bounds_param.rs:24:5\n+   |\n+LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n+   |         -- hidden type `<&'a mut i32 as Callable>::Output` captures the lifetime `'a` as defined here\n+LL |     <&'a mut i32 as Callable>::call(y)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to declare that `impl PlusOne` captures `'a`, you can add an explicit `'a` lifetime bound\n+   |\n+LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne + 'a {\n+   |                                             ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "4e805ee308f4d9edb107019be39b995f5b414bcc", "filename": "src/test/ui/type-alias-impl-trait/self_implication.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself_implication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3617adfaee29c698713f1c4b6b62d9438c985d46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself_implication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself_implication.rs?ref=3617adfaee29c698713f1c4b6b62d9438c985d46", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+fn foo() {\n+    struct Foo<'a> {\n+        x: &'a mut u8,\n+    }\n+    impl<'a> Foo<'a> {\n+        fn foo(&self) -> impl Sized {}\n+    }\n+    // use site\n+    let mut x = 5;\n+    let y = Foo { x: &mut x };\n+    let z = y.foo();\n+    let _a = &x; // invalidate the `&'a mut`in `y`\n+    let _b = z; // this should *not* check that `'a` in the type `Foo<'a>::foo::opaque` is live\n+}\n+\n+fn bar() {\n+    struct Foo<'a> {\n+        x: &'a mut u8,\n+    }\n+\n+    // desugared\n+    type FooX<'a> = impl Sized;\n+    impl<'a> Foo<'a> {\n+        fn foo(&self) -> FooX<'a> {}\n+    }\n+\n+    // use site\n+    let mut x = 5;\n+    let y = Foo { x: &mut x };\n+    let z = y.foo();\n+    let _a = &x; // invalidate the `&'a mut`in `y`\n+    let _b = z; // this should *not* check that `'a` in the type `Foo<'a>::foo::opaque` is live\n+}\n+\n+fn main() {}"}]}