{"sha": "f9707cde6801f13cc4c20e3e08cee07ef23b8563", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzA3Y2RlNjgwMWYxM2NjNGMyMGUzZTA4Y2VlMDdlZjIzYjg1NjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-05T12:45:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-05T12:51:13Z"}, "message": "Rename expr -> tail_expr", "tree": {"sha": "56be395be11c1315ace19c50ad528c0af5ac0a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56be395be11c1315ace19c50ad528c0af5ac0a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9707cde6801f13cc4c20e3e08cee07ef23b8563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9707cde6801f13cc4c20e3e08cee07ef23b8563", "html_url": "https://github.com/rust-lang/rust/commit/f9707cde6801f13cc4c20e3e08cee07ef23b8563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9707cde6801f13cc4c20e3e08cee07ef23b8563/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c10f2f705d6757b9821387a5be759789b7ee480", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c10f2f705d6757b9821387a5be759789b7ee480", "html_url": "https://github.com/rust-lang/rust/commit/5c10f2f705d6757b9821387a5be759789b7ee480"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "fe45f9decddb80b87871b475159c7147a87779fb", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -1804,9 +1804,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.5.0\"\n+version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c11bffada52edc8f2a56160b286ea4640acf90ffcb21bded361ccb8ed43a1457\"\n+checksum = \"f96cc1b6938f7c548fbcc630bac5c896ae77a130909829ab18b8eab78c51b7ee\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "2c48f32bf62825926d7374aa0ba1551a623a1a1c", "filename": "crates/assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -69,7 +69,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n \n     let parent_block = if_expr.syntax().parent()?.ancestors().find_map(ast::BlockExpr::cast)?;\n \n-    if parent_block.expr()? != if_expr.clone().into() {\n+    if parent_block.tail_expr()? != if_expr.clone().into() {\n         return None;\n     }\n "}, {"sha": "6f35a061cf241a05e5b20accac12c17609a091c3", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -117,10 +117,14 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &Va\n         .into_iter()\n         .filter(|(_, def)| match def {\n             // only check type-namespace\n-            hir::ScopeDef::ModuleDef(def) => matches!(def,\n-                ModuleDef::Module(_) | ModuleDef::Adt(_) |\n-                ModuleDef::Variant(_) | ModuleDef::Trait(_) |\n-                ModuleDef::TypeAlias(_) | ModuleDef::BuiltinType(_)\n+            hir::ScopeDef::ModuleDef(def) => matches!(\n+                def,\n+                ModuleDef::Module(_)\n+                    | ModuleDef::Adt(_)\n+                    | ModuleDef::Variant(_)\n+                    | ModuleDef::Trait(_)\n+                    | ModuleDef::TypeAlias(_)\n+                    | ModuleDef::BuiltinType(_)\n             ),\n             _ => false,\n         })"}, {"sha": "29180920569faaa5498667758a41f3d438c1c592", "filename": "crates/assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -139,7 +139,7 @@ impl Anchor {\n     fn from(to_extract: &ast::Expr) -> Option<Anchor> {\n         to_extract.syntax().ancestors().find_map(|node| {\n             if let Some(expr) =\n-                node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr())\n+                node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.tail_expr())\n             {\n                 if expr.syntax() == &node {\n                     mark::hit!(test_extract_var_last_expr);"}, {"sha": "f499cdfdca1aa3b740051d7da322783af160bf31", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -89,7 +89,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n             let body = closure.body()?;\n             let body_start = body.syntax().first_token()?.text_range().start();\n             let (tail_expr, wrap_expr) = match body {\n-                ast::Expr::BlockExpr(block) => (block.expr()?, false),\n+                ast::Expr::BlockExpr(block) => (block.tail_expr()?, false),\n                 body => (body, true),\n             };\n \n@@ -101,7 +101,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n             let action = ret_ty_to_action(func.ret_type(), rparen_pos)?;\n \n             let body = func.body()?;\n-            let tail_expr = body.expr()?;\n+            let tail_expr = body.tail_expr()?;\n \n             let ret_range_end = body.l_curly_token()?.text_range().start();\n             let ret_range = TextRange::new(rparen_pos, ret_range_end);"}, {"sha": "6e351bdcd6e6af55d8ebdf8de7c8efeb39f16d31", "filename": "crates/assists/src/handlers/inline_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_function.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -71,7 +71,7 @@ pub(crate) fn inline_function(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             statements.extend(body.statements());\n \n             let original_indentation = call.indent_level();\n-            let replacement = make::block_expr(statements, body.expr())\n+            let replacement = make::block_expr(statements, body.tail_expr())\n                 .reset_indent()\n                 .indent(original_indentation);\n "}, {"sha": "4318ca6dcb584b5e9edc9bde456a09bdf74b01f1", "filename": "crates/assists/src/handlers/move_guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -98,7 +98,7 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n     let mut replace_node = None;\n     let if_expr: IfExpr = IfExpr::cast(arm_body.syntax().clone()).or_else(|| {\n         let block_expr = BlockExpr::cast(arm_body.syntax().clone())?;\n-        if let Expr::IfExpr(e) = block_expr.expr()? {\n+        if let Expr::IfExpr(e) = block_expr.tail_expr()? {\n             replace_node = Some(block_expr.syntax().clone());\n             Some(e)\n         } else {\n@@ -128,7 +128,7 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n         |edit| {\n             let then_only_expr = then_block.statements().next().is_none();\n \n-            match &then_block.expr() {\n+            match &then_block.tail_expr() {\n                 Some(then_expr) if then_only_expr => {\n                     edit.replace(replace_node.text_range(), then_expr.syntax().text())\n                 }"}, {"sha": "63b662fadead0d780033ec1dfe9a27ba78f986f9", "filename": "crates/assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -118,7 +118,7 @@ fn exprify_block(\n     sema: &hir::Semantics<ide_db::RootDatabase>,\n     name: &ast::Expr,\n ) -> Option<ast::BlockExpr> {\n-    if block.expr().is_some() {\n+    if block.tail_expr().is_some() {\n         return None;\n     }\n "}, {"sha": "b672192222401ce52ced4c1d78298eeaf4e6660d", "filename": "crates/assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -138,7 +138,7 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext)\n             };\n             let else_expr = match else_expr {\n                 ast::Expr::BlockExpr(block)\n-                    if block.statements().count() == 0 && block.expr().is_none() =>\n+                    if block.statements().count() == 0 && block.tail_expr().is_none() =>\n                 {\n                     None\n                 }"}, {"sha": "358b61046ecd493f04b65427092688c025adf7ee", "filename": "crates/assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -98,7 +98,7 @@ impl TailReturnCollector {\n         }\n \n         // Browse tail expressions for each block\n-        if let Some(expr) = block_expr.expr() {\n+        if let Some(expr) = block_expr.tail_expr() {\n             if let Some(last_exprs) = get_tail_expr_from_block(&expr) {\n                 for last_expr in last_exprs {\n                     let last_expr = match last_expr {\n@@ -170,7 +170,7 @@ impl TailReturnCollector {\n     }\n \n     fn collect_tail_exprs(&mut self, block: &BlockExpr) {\n-        if let Some(expr) = block.expr() {\n+        if let Some(expr) = block.tail_expr() {\n             self.handle_exprs(&expr, true);\n             self.fetch_tail_exprs(&expr);\n         }\n@@ -206,7 +206,7 @@ fn get_tail_expr_from_block(expr: &Expr) -> Option<Vec<NodeType>> {\n         Expr::IfExpr(if_expr) => {\n             let mut nodes = vec![];\n             for block in if_expr.blocks() {\n-                if let Some(block_expr) = block.expr() {\n+                if let Some(block_expr) = block.tail_expr() {\n                     if let Some(tail_exprs) = get_tail_expr_from_block(&block_expr) {\n                         nodes.extend(tail_exprs);\n                     }\n@@ -228,7 +228,7 @@ fn get_tail_expr_from_block(expr: &Expr) -> Option<Vec<NodeType>> {\n             while_expr.syntax().last_child().map(|lc| vec![NodeType::Node(lc)])\n         }\n         Expr::BlockExpr(block_expr) => {\n-            block_expr.expr().map(|lc| vec![NodeType::Node(lc.syntax().clone())])\n+            block_expr.tail_expr().map(|lc| vec![NodeType::Node(lc.syntax().clone())])\n         }\n         Expr::MatchExpr(match_expr) => {\n             let arm_list = match_expr.match_arm_list()?;"}, {"sha": "8212cd1292ac8e9846917025c45731adf40a6120", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -37,7 +37,7 @@ pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n         non_trivial_children.next().is_some()\n     };\n \n-    if let Some(expr) = block.expr() {\n+    if let Some(expr) = block.tail_expr() {\n         if has_anything_else(expr.syntax()) {\n             return None;\n         }"}, {"sha": "f979697ab1bcf82eb8fc4f2366bc0f92be536bbf", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -458,7 +458,7 @@ impl<'a> CompletionContext<'a> {\n                     }\n                     if let Some(block) = ast::BlockExpr::cast(node) {\n                         return Some(\n-                            block.expr().map(|e| e.syntax().text_range())\n+                            block.tail_expr().map(|e| e.syntax().text_range())\n                                 == Some(name_ref.syntax().text_range()),\n                         );\n                     }"}, {"sha": "cc19383339b4bddd3b415f1252b38fa1a0c220e3", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -1642,9 +1642,10 @@ impl Type {\n     }\n \n     pub fn is_fn(&self) -> bool {\n-        matches!(&self.ty.value,\n-            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnDef(..), .. }) |\n-            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnPtr { .. }, .. })\n+        matches!(\n+            &self.ty.value,\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::FnDef(..), .. })\n+                | Ty::Apply(ApplicationTy { ctor: TypeCtor::FnPtr { .. }, .. })\n         )\n     }\n "}, {"sha": "6be1eaade873e0a9db5b90ddda984a8a025a0693", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -695,7 +695,7 @@ impl ExprCollector<'_> {\n         self.collect_stmts_items(block.statements());\n         let statements =\n             block.statements().filter_map(|s| self.collect_stmt(s)).flatten().collect();\n-        let tail = block.expr().map(|e| self.collect_expr(e));\n+        let tail = block.tail_expr().map(|e| self.collect_expr(e));\n         self.alloc_expr(Expr::Block { statements, tail, label: None }, syntax_node_ptr)\n     }\n "}, {"sha": "e9e949c47f7a8db541b734f41cd5ea770caa0bde", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -168,7 +168,7 @@ pub enum DisplayTarget {\n \n impl DisplayTarget {\n     fn is_source_code(&self) -> bool {\n-        matches!(self, Self::SourceCode {..})\n+        matches!(self, Self::SourceCode { .. })\n     }\n     fn is_test(&self) -> bool {\n         matches!(self, Self::Test)"}, {"sha": "92ed2ee9df864fefe4576892121f907c41f55059", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -484,7 +484,7 @@ impl ast::AttrsOwner for BlockExpr {}\n impl BlockExpr {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn tail_expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "ea7482bb12451d5b93816f45118bb6c0cf17a27b", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -290,7 +290,7 @@ fn api_walkthrough() {\n \n     // Let's get the `1 + 1` expression!\n     let body: ast::BlockExpr = func.body().unwrap();\n-    let expr: ast::Expr = body.expr().unwrap();\n+    let expr: ast::Expr = body.tail_expr().unwrap();\n \n     // Enums are used to group related ast nodes together, and can be used for\n     // matching. However, because there are no public fields, it's possible to"}, {"sha": "7a2937f0e07d8cdeadf08dd7ead704f8b783fec5", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9707cde6801f13cc4c20e3e08cee07ef23b8563/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f9707cde6801f13cc4c20e3e08cee07ef23b8563/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=f9707cde6801f13cc4c20e3e08cee07ef23b8563", "patch": "@@ -15,7 +15,7 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.5\"\n+ungrammar = \"1.6\"\n walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\""}]}