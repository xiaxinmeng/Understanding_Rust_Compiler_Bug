{"sha": "3459eae96c3ab9ae40012e97723c7550e96200f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NTllYWU5NmMzYWI5YWU0MDAxMmU5NzcyM2M3NTUwZTk2MjAwZjY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-05-30T03:39:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T03:39:10Z"}, "message": "Rollup merge of #72162 - cuviper:extend_one, r=Mark-Simulacrum\n\nAdd Extend::{extend_one,extend_reserve}\n\nThis adds new optional methods on `Extend`: `extend_one` add a single\nelement to the collection, and `extend_reserve` pre-allocates space for\nthe predicted number of incoming elements. These are used in `Iterator`\nfor `partition` and `unzip` as they shuffle elements one-at-a-time into\ntheir respective collections.", "tree": {"sha": "50915fa5c4f97e213425d8abed679d7c016db0fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50915fa5c4f97e213425d8abed679d7c016db0fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3459eae96c3ab9ae40012e97723c7550e96200f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0dVfCRBK7hj4Ov3rIwAAdHIIAD7TRnjogck3WiHcE3Q6F13l\nG+Fuk4MbyEV785iJCk2nc9fn2wBY7oHjNh5AY4vuNM5NSZMxj1G30QqCVXc8T/Fa\n6Rn1SKhCW2RDFdMapJLYldQITLRDsHZ5ZHx3ZERAndP1BSKrVKWHjpZeEiQtYCCl\nQllsg6gst80XqU8BedYoYzrEGsjtbIFoV//J8nTBm4PWi4EHTUHIPxHfN8L+80j4\nvGB4tQIAI2W6gVCGoJw32UuUL13xH1RxRwF+rmwbg0hDOe5DI3tB3VU/WPruvblM\nkUpAzPEnLvBfx0uNzKVdcJzuBxSw1MUc5tcM/B78RO8sz11Svz5zjVWSuhN4PLQ=\n=1U84\n-----END PGP SIGNATURE-----\n", "payload": "tree 50915fa5c4f97e213425d8abed679d7c016db0fb\nparent a578ac52bafef5b2a270fddfd36870c9c7fc862e\nparent a51b22a9fda2fff37b17ad7b7fa516b3385089a9\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1590809950 +0900\ncommitter GitHub <noreply@github.com> 1590809950 +0900\n\nRollup merge of #72162 - cuviper:extend_one, r=Mark-Simulacrum\n\nAdd Extend::{extend_one,extend_reserve}\n\nThis adds new optional methods on `Extend`: `extend_one` add a single\nelement to the collection, and `extend_reserve` pre-allocates space for\nthe predicted number of incoming elements. These are used in `Iterator`\nfor `partition` and `unzip` as they shuffle elements one-at-a-time into\ntheir respective collections.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3459eae96c3ab9ae40012e97723c7550e96200f6", "html_url": "https://github.com/rust-lang/rust/commit/3459eae96c3ab9ae40012e97723c7550e96200f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3459eae96c3ab9ae40012e97723c7550e96200f6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a578ac52bafef5b2a270fddfd36870c9c7fc862e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a578ac52bafef5b2a270fddfd36870c9c7fc862e", "html_url": "https://github.com/rust-lang/rust/commit/a578ac52bafef5b2a270fddfd36870c9c7fc862e"}, {"sha": "a51b22a9fda2fff37b17ad7b7fa516b3385089a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51b22a9fda2fff37b17ad7b7fa516b3385089a9", "html_url": "https://github.com/rust-lang/rust/commit/a51b22a9fda2fff37b17ad7b7fa516b3385089a9"}], "stats": {"total": 257, "additions": 252, "deletions": 5}, "files": [{"sha": "c2fe4691b34c098f689b7d27a42e81ae1829fd0e", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -1376,6 +1376,16 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         <Self as SpecExtend<I>>::spec_extend(self, iter);\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, item: T) {\n+        self.push(item);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }\n \n impl<T: Ord, I: IntoIterator<Item = T>> SpecExtend<I> for BinaryHeap<T> {\n@@ -1406,4 +1416,14 @@ impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BinaryHeap<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, &item: &'a T) {\n+        self.push(item);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }"}, {"sha": "fa1c09d9ece87141bd839841e27cade56d3570c8", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -1901,13 +1901,23 @@ impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n             self.insert(k, v);\n         });\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, (k, v): (K, V)) {\n+        self.insert(k, v);\n+    }\n }\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, K: Ord + Copy, V: Copy> Extend<(&'a K, &'a V)> for BTreeMap<K, V> {\n     fn extend<I: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, (&k, &v): (&'a K, &'a V)) {\n+        self.insert(k, v);\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "525ef38c32fa269f2e31fefbbb3074a85bc9548a", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -1152,13 +1152,23 @@ impl<T: Ord> Extend<T> for BTreeSet<T> {\n             self.insert(elem);\n         });\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, elem: T) {\n+        self.insert(elem);\n+    }\n }\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, &elem: &'a T) {\n+        self.insert(elem);\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "85f2505f756aa256ea6d3077e1bbe9299ed443fe", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -1748,6 +1748,11 @@ impl<T> Extend<T> for LinkedList<T> {\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         <Self as SpecExtend<I>>::spec_extend(self, iter);\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, elem: T) {\n+        self.push_back(elem);\n+    }\n }\n \n impl<I: IntoIterator> SpecExtend<I> for LinkedList<I::Item> {\n@@ -1767,6 +1772,11 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for LinkedList<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, &elem: &'a T) {\n+        self.push_back(elem);\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ae54d3971baac42ee57703b401ced2808ce1fabd", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -2881,13 +2881,33 @@ impl<A> Extend<A> for VecDeque<A> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, elem: A) {\n+        self.push_back(elem);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Copy> Extend<&'a T> for VecDeque<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, &elem: &T) {\n+        self.push_back(elem);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9bcfc9457f50eeeddb839efdfeb8e94a02dcf5a1", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -93,6 +93,7 @@\n #![feature(container_error_extra)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(extend_one)]\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(fundamental)]"}, {"sha": "0378ff5362a8b9b0af6e2036e6d0ae1d128030f7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -1799,34 +1799,69 @@ impl Extend<char> for String {\n         self.reserve(lower_bound);\n         iterator.for_each(move |c| self.push(c));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, c: char) {\n+        self.push(c);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a> Extend<&'a char> for String {\n     fn extend<I: IntoIterator<Item = &'a char>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, &c: &'a char) {\n+        self.push(c);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Extend<&'a str> for String {\n     fn extend<I: IntoIterator<Item = &'a str>>(&mut self, iter: I) {\n         iter.into_iter().for_each(move |s| self.push_str(s));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, s: &'a str) {\n+        self.push_str(s);\n+    }\n }\n \n #[stable(feature = \"extend_string\", since = \"1.4.0\")]\n impl Extend<String> for String {\n     fn extend<I: IntoIterator<Item = String>>(&mut self, iter: I) {\n         iter.into_iter().for_each(move |s| self.push_str(&s));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, s: String) {\n+        self.push_str(&s);\n+    }\n }\n \n #[stable(feature = \"herd_cows\", since = \"1.19.0\")]\n impl<'a> Extend<Cow<'a, str>> for String {\n     fn extend<I: IntoIterator<Item = Cow<'a, str>>>(&mut self, iter: I) {\n         iter.into_iter().for_each(move |s| self.push_str(&s));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, s: Cow<'a, str>) {\n+        self.push_str(&s);\n+    }\n }\n \n /// A convenience impl that delegates to the impl for `&str`."}, {"sha": "42fb1f8c737b3fe92ba099e7dbd4169dd49e7176", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -2045,6 +2045,16 @@ impl<T> Extend<T> for Vec<T> {\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, item: T) {\n+        self.push(item);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }\n \n // Specialization trait used for Vec::from_iter and Vec::extend\n@@ -2316,6 +2326,16 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.spec_extend(iter.into_iter())\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, &item: &'a T) {\n+        self.push(item);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.reserve(additional);\n+    }\n }\n \n macro_rules! __impl_slice_eq1 {"}, {"sha": "9d20022b6ed6db75bd787773d4b4cc7e6ba7e772", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -322,7 +322,7 @@ impl<I: Iterator> IntoIterator for I {\n pub trait Extend<A> {\n     /// Extends a collection with the contents of an iterator.\n     ///\n-    /// As this is the only method for this trait, the [trait-level] docs\n+    /// As this is the only required method for this trait, the [trait-level] docs\n     /// contain more details.\n     ///\n     /// [trait-level]: trait.Extend.html\n@@ -341,11 +341,26 @@ pub trait Extend<A> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);\n+\n+    /// Extends a collection with exactly one element.\n+    #[unstable(feature = \"extend_one\", issue = \"72631\")]\n+    fn extend_one(&mut self, item: A) {\n+        self.extend(Some(item));\n+    }\n+\n+    /// Reserves capacity in a collection for the given number of additional elements.\n+    ///\n+    /// The default implementation does nothing.\n+    #[unstable(feature = \"extend_one\", issue = \"72631\")]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        let _ = additional;\n+    }\n }\n \n #[stable(feature = \"extend_for_unit\", since = \"1.28.0\")]\n impl Extend<()> for () {\n     fn extend<T: IntoIterator<Item = ()>>(&mut self, iter: T) {\n         iter.into_iter().for_each(drop)\n     }\n+    fn extend_one(&mut self, _item: ()) {}\n }"}, {"sha": "a10b34d931d10a9080d90db05fcb6ab67a03204d", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -1711,9 +1711,9 @@ pub trait Iterator {\n         ) -> impl FnMut((), T) + 'a {\n             move |(), x| {\n                 if f(&x) {\n-                    left.extend(Some(x));\n+                    left.extend_one(x);\n                 } else {\n-                    right.extend(Some(x));\n+                    right.extend_one(x);\n                 }\n             }\n         }\n@@ -2686,14 +2686,20 @@ pub trait Iterator {\n             us: &'a mut impl Extend<B>,\n         ) -> impl FnMut((), (A, B)) + 'a {\n             move |(), (t, u)| {\n-                ts.extend(Some(t));\n-                us.extend(Some(u));\n+                ts.extend_one(t);\n+                us.extend_one(u);\n             }\n         }\n \n         let mut ts: FromA = Default::default();\n         let mut us: FromB = Default::default();\n \n+        let (lower_bound, _) = self.size_hint();\n+        if lower_bound > 0 {\n+            ts.extend_reserve(lower_bound);\n+            us.extend_reserve(lower_bound);\n+        }\n+\n         self.fold((), extend(&mut ts, &mut us));\n \n         (ts, us)"}, {"sha": "0b2e7cda1b4ccdc774ab014e26852f58ca4ea849", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -22,6 +22,7 @@\n #![feature(test)]\n #![feature(associated_type_bounds)]\n #![feature(thread_id_value)]\n+#![feature(extend_one)]\n #![allow(rustc::default_hash_types)]\n \n #[macro_use]"}, {"sha": "43002178eb9717478e23ca88a3ffad7647adda14", "filename": "src/librustc_data_structures/thin_vec.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_data_structures%2Fthin_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_data_structures%2Fthin_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fthin_vec.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -53,6 +53,20 @@ impl<T> Extend<T> for ThinVec<T> {\n             ThinVec(None) => *self = iter.into_iter().collect::<Vec<_>>().into(),\n         }\n     }\n+\n+    fn extend_one(&mut self, item: T) {\n+        match *self {\n+            ThinVec(Some(ref mut vec)) => vec.push(item),\n+            ThinVec(None) => *self = vec![item].into(),\n+        }\n+    }\n+\n+    fn extend_reserve(&mut self, additional: usize) {\n+        match *self {\n+            ThinVec(Some(ref mut vec)) => vec.reserve(additional),\n+            ThinVec(None) => *self = Vec::with_capacity(additional).into(),\n+        }\n+    }\n }\n \n impl<T: HashStable<CTX>, CTX> HashStable<CTX> for ThinVec<T> {"}, {"sha": "3effc4164501155007c3006929201b2e9042d0d9", "filename": "src/librustc_index/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_index%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_index%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Flib.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -2,6 +2,7 @@\n #![feature(const_if_match)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n+#![feature(extend_one)]\n #![feature(unboxed_closures)]\n #![feature(test)]\n #![feature(fn_traits)]"}, {"sha": "4dde33283f575bab63edc8ec1b077798de874052", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -736,6 +736,16 @@ impl<I: Idx, T> Extend<T> for IndexVec<I, T> {\n     fn extend<J: IntoIterator<Item = T>>(&mut self, iter: J) {\n         self.raw.extend(iter);\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, item: T) {\n+        self.raw.push(item);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.raw.reserve(additional);\n+    }\n }\n \n impl<I: Idx, T> FromIterator<T> for IndexVec<I, T> {"}, {"sha": "ed04ee02b7203c6028ec3329d4401e4250873867", "filename": "src/librustc_infer/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -16,6 +16,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(extend_one)]\n #![feature(never_type)]\n #![feature(or_patterns)]\n #![feature(range_is_empty)]"}, {"sha": "8081cac0067f172821c84a07cf6d4a4c22ff8d3d", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -81,6 +81,14 @@ impl Extend<ty::Predicate<'tcx>> for PredicateSet<'tcx> {\n             self.insert(pred);\n         }\n     }\n+\n+    fn extend_one(&mut self, pred: ty::Predicate<'tcx>) {\n+        self.insert(pred);\n+    }\n+\n+    fn extend_reserve(&mut self, additional: usize) {\n+        Extend::<ty::Predicate<'tcx>>::extend_reserve(&mut self.set, additional);\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "5ba5eff44076b54318043a3547935cffb8e248f8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -2426,6 +2426,24 @@ where\n     fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {\n         self.base.extend(iter)\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, (k, v): (K, V)) {\n+        self.base.insert(k, v);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        // self.base.extend_reserve(additional);\n+        // FIXME: hashbrown should implement this method.\n+        // But until then, use the same reservation logic:\n+\n+        // Reserve the entire hint lower bound if the map is empty.\n+        // Otherwise reserve half the hint (rounded up), so the map\n+        // will only resize twice in the worst case.\n+        let reserve = if self.is_empty() { additional } else { (additional + 1) / 2 };\n+        self.base.reserve(reserve);\n+    }\n }\n \n #[stable(feature = \"hash_extend_copy\", since = \"1.4.0\")]\n@@ -2439,6 +2457,16 @@ where\n     fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {\n         self.base.extend(iter)\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, (&k, &v): (&'a K, &'a V)) {\n+        self.base.insert(k, v);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        Extend::<(K, V)>::extend_reserve(self, additional)\n+    }\n }\n \n /// `RandomState` is the default state for [`HashMap`] types."}, {"sha": "cb2f829803b85e8b1d748a308300d3f72339cde3", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -970,6 +970,16 @@ where\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         self.map.extend(iter.into_iter().map(|k| (k, ())));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, item: T) {\n+        self.map.insert(item, ());\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.map.extend_reserve(additional);\n+    }\n }\n \n #[stable(feature = \"hash_extend_copy\", since = \"1.4.0\")]\n@@ -982,6 +992,16 @@ where\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n         self.extend(iter.into_iter().cloned());\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, &item: &'a T) {\n+        self.map.insert(item, ());\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        Extend::<T>::extend_reserve(self, additional)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9ddaa100c0e9df520b0a2dd3d3e88c984efe7652", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -263,6 +263,7 @@\n #![feature(duration_constants)]\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n+#![feature(extend_one)]\n #![feature(external_doc)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]"}, {"sha": "8ff7508ba6457b5042ca2e2a5f498cca2b56748c", "filename": "src/libstd/path.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -1534,6 +1534,11 @@ impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {\n     fn extend<I: IntoIterator<Item = P>>(&mut self, iter: I) {\n         iter.into_iter().for_each(move |p| self.push(p.as_ref()));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, p: P) {\n+        self.push(p.as_ref());\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a5ba3daba3e87e89787c6096c3f2feac97a8dd5a", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3459eae96c3ab9ae40012e97723c7550e96200f6/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=3459eae96c3ab9ae40012e97723c7550e96200f6", "patch": "@@ -386,6 +386,17 @@ impl Extend<CodePoint> for Wtf8Buf {\n         self.bytes.reserve(low);\n         iterator.for_each(move |code_point| self.push(code_point));\n     }\n+\n+    #[inline]\n+    fn extend_one(&mut self, code_point: CodePoint) {\n+        self.push(code_point);\n+    }\n+\n+    #[inline]\n+    fn extend_reserve(&mut self, additional: usize) {\n+        // Lower bound of one byte per code point (ASCII only)\n+        self.bytes.reserve(additional);\n+    }\n }\n \n /// A borrowed slice of well-formed WTF-8 data."}]}