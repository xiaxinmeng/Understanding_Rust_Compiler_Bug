{"sha": "4c0aea69dab28a3e94d2c623ec741284f48e1205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMGFlYTY5ZGFiMjhhM2U5NGQyYzYyM2VjNzQxMjg0ZjQ4ZTEyMDU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T20:18:25Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T20:18:25Z"}, "message": "Support #fmt precision for unsigned types", "tree": {"sha": "47cc3127e5369dae6f26c14a26a369a9e8a4d4fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47cc3127e5369dae6f26c14a26a369a9e8a4d4fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0aea69dab28a3e94d2c623ec741284f48e1205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0aea69dab28a3e94d2c623ec741284f48e1205", "html_url": "https://github.com/rust-lang/rust/commit/4c0aea69dab28a3e94d2c623ec741284f48e1205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0aea69dab28a3e94d2c623ec741284f48e1205/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7edcb3a72f3991962acce0874c2ee24a4f38cf5", "html_url": "https://github.com/rust-lang/rust/commit/c7edcb3a72f3991962acce0874c2ee24a4f38cf5"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "f8c542c65bd69bccedde220bb32041bb2cc8c054", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4c0aea69dab28a3e94d2c623ec741284f48e1205/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0aea69dab28a3e94d2c623ec741284f48e1205/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=4c0aea69dab28a3e94d2c623ec741284f48e1205", "patch": "@@ -336,19 +336,55 @@ mod RT {\n     }\n \n     fn conv_uint(&conv cv, uint u) -> str {\n+\n+        // Convert a uint to string with a minimum number of digits.  If\n+        // precision is 0 and num is 0 then the result is the empty\n+        // string. Could move this to _str, but it doesn't seem all that\n+        // useful.\n+        fn uint_to_str_prec(uint num, uint radix, uint prec) -> str {\n+            auto s;\n+\n+            if (prec == 0u && num == 0u) {\n+                s = \"\";\n+            } else {\n+                s = _uint.to_str(num, radix);\n+                auto len = _str.char_len(s);\n+                if (len < prec) {\n+                    auto diff = prec - len;\n+                    auto pad = str_init_elt('0', diff);\n+                    s = pad + s;\n+                }\n+            }\n+\n+            ret s;\n+        }\n+\n+        fn get_precision(&conv cv) -> uint {\n+            alt (cv.precision) {\n+                case (count_is(?c)) {\n+                    ret c as uint;\n+                }\n+                case (count_implied) {\n+                    ret 1u;\n+                }\n+            }\n+        }\n+\n+        auto prec = get_precision(cv);\n+\n         auto res;\n         alt (cv.ty) {\n             case (ty_default) {\n-                res = _uint.to_str(u, 10u);\n+                res = uint_to_str_prec(u, 10u, prec);\n             }\n             case (ty_hex_lower) {\n-                res = _uint.to_str(u, 16u);\n+                res = uint_to_str_prec(u, 16u, prec);\n             }\n             case (ty_hex_upper) {\n-                res = _str.to_upper(_uint.to_str(u, 16u));\n+                res = _str.to_upper(uint_to_str_prec(u, 16u, prec));\n             }\n             case (ty_bits) {\n-                res = _uint.to_str(u, 2u);\n+                res = uint_to_str_prec(u, 2u, prec);\n             }\n         }\n         ret pad(cv, res);\n@@ -382,6 +418,14 @@ mod RT {\n         ret pad(cv, unpadded);\n     }\n \n+    // FIXME: This might be useful in _str, but needs to be utf8 safe first\n+    fn str_init_elt(char c, uint n_elts) -> str {\n+        auto svec = _vec.init_elt[u8](c as u8, n_elts);\n+        // FIXME: Using unsafe_from_bytes because rustboot\n+        // can't figure out the is_utf8 predicate on from_bytes?\n+        ret _str.unsafe_from_bytes(svec);\n+    }\n+\n     fn pad(&conv cv, str s) -> str {\n         alt (cv.width) {\n             case (count_implied) {\n@@ -393,13 +437,7 @@ mod RT {\n                 auto strlen = _str.char_len(s);\n                 if (strlen < uwidth) {\n                     auto diff = uwidth - strlen;\n-                    // FIXME: Probably should be a _str fn for\n-                    // initializing from n chars\n-                    auto padvec = _vec.init_elt[u8](' ' as u8, diff);\n-                    // FIXME: Using unsafe_from_bytes because rustboot\n-                    // can't figure out the is_utf8 predicate on from_bytes?\n-                    auto padstr = _str.unsafe_from_bytes(padvec);\n-\n+                    auto padstr = str_init_elt(' ', diff);\n                     if (have_flag(cv.flags, flag_left_justify)) {\n                         ret s + padstr;\n                     } else {"}, {"sha": "5c71a27b75b2b75c25973f8d5e015c58aabbcdc9", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4c0aea69dab28a3e94d2c623ec741284f48e1205/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0aea69dab28a3e94d2c623ec741284f48e1205/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=4c0aea69dab28a3e94d2c623ec741284f48e1205", "patch": "@@ -56,38 +56,38 @@ fn main() {\n \n   // Precision\n //   test(#fmt(\"%.d\", 0), \"\");\n-//   test(#fmt(\"%.u\", 0u), \"\");\n-//   test(#fmt(\"%.x\", 0u), \"\");\n+   test(#fmt(\"%.u\", 0u), \"\");\n+   test(#fmt(\"%.x\", 0u), \"\");\n //   test(#fmt(\"%.d\", 10), \"10\");\n //   test(#fmt(\"%.d\", -10), \"-10\");\n-//   test(#fmt(\"%.u\", 10u), \"10\");\n+   test(#fmt(\"%.u\", 10u), \"10\");\n    test(#fmt(\"%.s\", \"test\"), \"\");\n-//   test(#fmt(\"%.x\", 127u), \"7f\");\n+   test(#fmt(\"%.x\", 127u), \"7f\");\n \n //   test(#fmt(\"%.0d\", 0), \"\");\n-//   test(#fmt(\"%.0u\", 0u), \"\");\n-//   test(#fmt(\"%.0x\", 0u), \"\");\n+   test(#fmt(\"%.0u\", 0u), \"\");\n+   test(#fmt(\"%.0x\", 0u), \"\");\n //   test(#fmt(\"%.0d\", 10), \"10\");\n //   test(#fmt(\"%.0d\", -10), \"-10\");\n-//   test(#fmt(\"%.0u\", 10u), \"10\");\n+   test(#fmt(\"%.0u\", 10u), \"10\");\n    test(#fmt(\"%.0s\", \"test\"), \"\");\n-//   test(#fmt(\"%.0x\", 127u), \"7f\");\n+   test(#fmt(\"%.0x\", 127u), \"7f\");\n \n //   test(#fmt(\"%.1d\", 0), \"0\");\n-//   test(#fmt(\"%.1u\", 0u), \"0\");\n-//   test(#fmt(\"%.1x\", 0u), \"0\");\n+   test(#fmt(\"%.1u\", 0u), \"0\");\n+   test(#fmt(\"%.1x\", 0u), \"0\");\n //   test(#fmt(\"%.1d\", 10), \"10\");\n //   test(#fmt(\"%.1d\", -10), \"-10\");\n-//   test(#fmt(\"%.1u\", 10u), \"10\");\n+   test(#fmt(\"%.1u\", 10u), \"10\");\n    test(#fmt(\"%.1s\", \"test\"), \"t\");\n-//   test(#fmt(\"%.1x\", 127u), \"7f\");\n+   test(#fmt(\"%.1x\", 127u), \"7f\");\n \n //   test(#fmt(\"%.5d\", 0), \"00000\");\n-//   test(#fmt(\"%.5u\", 0u), \"00000\");\n-//   test(#fmt(\"%.5x\", 0u), \"00000\");\n+   test(#fmt(\"%.5u\", 0u), \"00000\");\n+   test(#fmt(\"%.5x\", 0u), \"00000\");\n //   test(#fmt(\"%.5d\", 10), \"00010\");\n //   test(#fmt(\"%.5d\", -10), \"-00010\");\n-//   test(#fmt(\"%.5u\", 10u), \"00010\");\n+   test(#fmt(\"%.5u\", 10u), \"00010\");\n    test(#fmt(\"%.5s\", \"test\"), \"test\");\n-//   test(#fmt(\"%.5x\", 127u), \"0007f\");\n+   test(#fmt(\"%.5x\", 127u), \"0007f\");\n }"}]}