{"sha": "01a6524d003e89cf04e2aa1b3fd244830596eba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTY1MjRkMDAzZTg5Y2YwNGUyYWExYjNmZDI0NDgzMDU5NmViYTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-13T03:15:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-14T22:59:32Z"}, "message": "Stop using spawn_conversation in chan_from_global_ptr", "tree": {"sha": "ce338ed9f3477a0b4e0dab4a4982c686d2e96c96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce338ed9f3477a0b4e0dab4a4982c686d2e96c96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a6524d003e89cf04e2aa1b3fd244830596eba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a6524d003e89cf04e2aa1b3fd244830596eba2", "html_url": "https://github.com/rust-lang/rust/commit/01a6524d003e89cf04e2aa1b3fd244830596eba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a6524d003e89cf04e2aa1b3fd244830596eba2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c35a8589ab66ee42965709f403b3032f757a79a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35a8589ab66ee42965709f403b3032f757a79a8", "html_url": "https://github.com/rust-lang/rust/commit/c35a8589ab66ee42965709f403b3032f757a79a8"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "fdee648403cba5f2fb16f587f20179dfcd81f2fd", "filename": "src/libcore/private.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/01a6524d003e89cf04e2aa1b3fd244830596eba2/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a6524d003e89cf04e2aa1b3fd244830596eba2/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=01a6524d003e89cf04e2aa1b3fd244830596eba2", "patch": "@@ -70,23 +70,29 @@ pub unsafe fn chan_from_global_ptr<T: Owned>(\n         log(debug,~\"is probably zero...\");\n         // There's no global channel. We must make it\n \n-        let (setup_po, setup_ch) = do task_fn().spawn_conversation\n-            |move f, setup_po, setup_ch| {\n+        let (setup1_po, setup1_ch) = pipes::stream();\n+        let (setup2_po, setup2_ch) = pipes::stream();\n+\n+        // XXX: Ugly type inference hints\n+        let setup1_po: pipes::Port<comm::Chan<T>> = setup1_po;\n+        let setup2_po: pipes::Port<Msg> = setup2_po;\n+\n+        do task_fn().spawn |move f, move setup1_ch, move setup2_po| {\n             let po = comm::Port::<T>();\n             let ch = comm::Chan(&po);\n-            comm::send(setup_ch, ch);\n+            setup1_ch.send(ch);\n \n             // Wait to hear if we are the official instance of\n             // this global task\n-            match comm::recv::<Msg>(setup_po) {\n+            match setup2_po.recv() {\n               Proceed => f(move po),\n               Abort => ()\n             }\n         };\n \n         log(debug,~\"before setup recv..\");\n         // This is the proposed global channel\n-        let ch = comm::recv(setup_po);\n+        let ch = setup1_po.recv();\n         // 0 is our sentinal value. It is not a valid channel\n         assert *ch != 0;\n \n@@ -99,11 +105,11 @@ pub unsafe fn chan_from_global_ptr<T: Owned>(\n \n         if swapped {\n             // Success!\n-            comm::send(setup_ch, Proceed);\n+            setup2_ch.send(Proceed);\n             ch\n         } else {\n             // Somebody else got in before we did\n-            comm::send(setup_ch, Abort);\n+            setup2_ch.send(Abort);\n             cast::reinterpret_cast(&*global)\n         }\n     } else {"}]}