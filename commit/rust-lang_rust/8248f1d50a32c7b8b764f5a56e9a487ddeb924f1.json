{"sha": "8248f1d50a32c7b8b764f5a56e9a487ddeb924f1", "node_id": "C_kwDOAAsO6NoAKDgyNDhmMWQ1MGEzMmM3YjhiNzY0ZjVhNTZlOWE0ODdkZGViOTI0ZjE", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-11T05:18:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T05:18:58Z"}, "message": "Rollup merge of #106690 - GuillaumeGomez:item-declaration-scrolling, r=notriddle\n\nFix scrolling for item declaration block\n\nFixes https://github.com/rust-lang/rust/issues/105580.\n\nThe `contain: layout` was the issue here and the bug was actually on both mobile and desktop.\n\nr? `@notriddle`", "tree": {"sha": "5b8dd5a02563f2c7cef7f2f65b428d10b50c9275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b8dd5a02563f2c7cef7f2f65b428d10b50c9275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvkbCCRBK7hj4Ov3rIwAA/J0IAB9Eed9tD+eHN9jvQNfUfZua\nWGfVQKUvp4Rj5iO1O3zW4jkEU/Gl4xodl3cOTCwfidjt/7cJ3gVb1TLYbx4mjBDl\nPfVQ2fORx/ZyJ1isVH3wM1xUM7yqz31qVBE9lBg+YEt3qH4Nnv6iUWHy0ZKWQ/3+\nUI1egax3DfDw4+Hq1JqJtIWar6Y8Y1+MzbqoV5LFprVO5F4SEuh9smHuwWreJZU9\n7mEFcqin9C4LOXE65ZPeaJXSpbuSkbGbVujXvDb9zZjHdyJ154QrQJmDZSOH5W9S\nQ2WApLbkdgrkrubJ49NelrzDD8x/V5m6lPD7SWLup5rv8gC2T+wgQTmFpgY841c=\n=ltKM\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b8dd5a02563f2c7cef7f2f65b428d10b50c9275\nparent 2c946bc303d3a3cbc8f3eb17976dc94d9e4c71a7\nparent 719f54583146de66d42396290df3293e27bd861f\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673414338 +0900\ncommitter GitHub <noreply@github.com> 1673414338 +0900\n\nRollup merge of #106690 - GuillaumeGomez:item-declaration-scrolling, r=notriddle\n\nFix scrolling for item declaration block\n\nFixes https://github.com/rust-lang/rust/issues/105580.\n\nThe `contain: layout` was the issue here and the bug was actually on both mobile and desktop.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1", "html_url": "https://github.com/rust-lang/rust/commit/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c946bc303d3a3cbc8f3eb17976dc94d9e4c71a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c946bc303d3a3cbc8f3eb17976dc94d9e4c71a7", "html_url": "https://github.com/rust-lang/rust/commit/2c946bc303d3a3cbc8f3eb17976dc94d9e4c71a7"}, {"sha": "719f54583146de66d42396290df3293e27bd861f", "url": "https://api.github.com/repos/rust-lang/rust/commits/719f54583146de66d42396290df3293e27bd861f", "html_url": "https://github.com/rust-lang/rust/commit/719f54583146de66d42396290df3293e27bd861f"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "91bc63f83b624bf5c0935faa4af7dedaa3d3c657", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8248f1d50a32c7b8b764f5a56e9a487ddeb924f1", "patch": "@@ -338,6 +338,10 @@ pre {\n .item-decl pre {\n \toverflow-x: auto;\n }\n+/* This rule allows to have scrolling on the X axis. */\n+.item-decl .type-contents-toggle {\n+\tcontain: initial;\n+}\n \n .source .content pre {\n \tpadding: 20px;"}, {"sha": "34e67d9d25438ce8105eea37111308f1bebfa6f6", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=8248f1d50a32c7b8b764f5a56e9a487ddeb924f1", "patch": "@@ -183,3 +183,161 @@ impl ItemInfoAlignmentTest {\n     #[deprecated]\n     pub fn bar() {}\n }\n+\n+pub mod scroll_traits {\n+    use std::iter::*;\n+\n+    /// Shamelessly (partially) copied from `std::iter::Iterator`.\n+    /// It allows us to check that the scroll is working as expected on \"hidden\" items.\n+    pub trait Iterator {\n+        type Item;\n+\n+        fn next(&mut self) -> Option<Self::Item>;\n+        fn size_hint(&self) -> (usize, Option<usize>);\n+        fn count(self) -> usize\n+        where\n+            Self: Sized;\n+        fn last(self) -> Option<Self::Item>\n+        where\n+            Self: Sized;\n+        fn advance_by(&mut self, n: usize) -> Result<(), usize>;\n+        fn nth(&mut self, n: usize) -> Option<Self::Item>;\n+        fn step_by(self, step: usize) -> StepBy<Self>\n+        where\n+            Self: Sized;\n+        fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>\n+        where\n+            Self: Sized,\n+            U: IntoIterator<Item = Self::Item>;\n+        fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n+        where\n+            Self: Sized,\n+            U: IntoIterator;\n+        fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n+        where\n+            Self: Sized,\n+            Self::Item: Clone;\n+        fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>\n+        where\n+            Self: Sized,\n+            G: FnMut() -> Self::Item;\n+        fn map<B, F>(self, f: F) -> Map<Self, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> B;\n+        fn for_each<F>(self, f: F)\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item);\n+        fn filter<P>(self, predicate: P) -> Filter<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> Option<B>;\n+        fn enumerate(self) -> Enumerate<Self>\n+        where\n+            Self: Sized;\n+        fn peekable(self) -> Peekable<Self>\n+        where\n+            Self: Sized;\n+        fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n+        where\n+            Self: Sized,\n+            P: FnMut(Self::Item) -> Option<B>;\n+        fn skip(self, n: usize) -> Skip<Self>\n+        where\n+            Self: Sized;\n+        fn take(self, n: usize) -> Take<Self>\n+        where\n+            Self: Sized;\n+        fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(&mut St, Self::Item) -> Option<B>;\n+        fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n+        where\n+            Self: Sized,\n+            U: IntoIterator,\n+            F: FnMut(Self::Item) -> U;\n+        fn flatten(self) -> Flatten<Self>\n+        where\n+            Self: Sized,\n+            Self::Item: IntoIterator;\n+        fn fuse(self) -> Fuse<Self>\n+        where\n+            Self: Sized;\n+        fn inspect<F>(self, f: F) -> Inspect<Self, F>\n+        where\n+            Self: Sized,\n+            F: FnMut(&Self::Item);\n+        fn by_ref(&mut self) -> &mut Self\n+        where\n+            Self: Sized;\n+        fn collect<B: FromIterator<Self::Item>>(self) -> B\n+        where\n+            Self: Sized;\n+        fn collect_into<E: Extend<Self::Item>>(self, collection: &mut E) -> &mut E\n+        where\n+            Self: Sized;\n+        fn partition<B, F>(self, f: F) -> (B, B)\n+        where\n+            Self: Sized,\n+            B: Default + Extend<Self::Item>,\n+            F: FnMut(&Self::Item) -> bool;\n+        fn partition_in_place<'a, T: 'a, P>(mut self, predicate: P) -> usize\n+        where\n+            Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n+            P: FnMut(&T) -> bool;\n+        fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n+        where\n+            Self: Sized,\n+            P: FnMut(Self::Item) -> bool;\n+        fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+        where\n+            Self: Sized,\n+            F: FnMut(B, Self::Item) -> B;\n+        fn reduce<F>(mut self, f: F) -> Option<Self::Item>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item, Self::Item) -> Self::Item;\n+        fn all<F>(&mut self, f: F) -> bool\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> bool;\n+        fn any<F>(&mut self, f: F) -> bool\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> bool;\n+        fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+        where\n+            Self: Sized,\n+            P: FnMut(&Self::Item) -> bool;\n+        fn find_map<B, F>(&mut self, f: F) -> Option<B>\n+        where\n+            Self: Sized,\n+            F: FnMut(Self::Item) -> Option<B>;\n+        fn position<P>(&mut self, predicate: P) -> Option<usize>\n+        where\n+            Self: Sized,\n+            P: FnMut(Self::Item) -> bool;\n+        /// We will scroll to \"string\" to ensure it scrolls as expected.\n+        fn this_is_a_method_with_a_long_name_returning_something() -> String;\n+    }\n+\n+    /// This one doesn't have hidden items (because there are too many) so we can also confirm that it\n+    /// scrolls as expected.\n+    pub trait TraitWithLongItemsName {\n+        fn this_is_a_method_with_a_long_name_returning_something() -> String;\n+    }\n+}"}, {"sha": "644429c014c1801c9dedefe6c35ae6a3eedded92", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8248f1d50a32c7b8b764f5a56e9a487ddeb924f1/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=8248f1d50a32c7b8b764f5a56e9a487ddeb924f1", "patch": "@@ -59,3 +59,18 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/too_long/struct.SuperIncrediblyLongLongLon\n compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))\n goto: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n compare-elements-position-false: (\".main-heading h1\", \".main-heading .out-of-band\", (\"y\"))\n+\n+// Now we will check that the scrolling is working.\n+// First on an item with \"hidden methods\".\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.Iterator.html\"\n+\n+click: \".item-decl .type-contents-toggle\"\n+assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='item-decl']//details/a[text()='String']\"\n+assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+\n+// Then on an item without \"hidden methods\".\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.TraitWithLongItemsName.html\"\n+assert-property: (\".item-decl > pre\", {\"scrollLeft\": 0})\n+scroll-to: \"//*[@class='item-decl']//code/a[text()='String']\"\n+assert-property-false: (\".item-decl > pre\", {\"scrollLeft\": 0})"}]}