{"sha": "d56751cc3405ec5c90d3edddf489e5cb16cf7344", "node_id": "C_kwDOAAsO6NoAKGQ1Njc1MWNjMzQwNWVjNWM5MGQzZWRkZGY0ODllNWNiMTZjZjczNDQ", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-08-08T00:19:16Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-08-30T08:40:16Z"}, "message": "Simplify pass manager's `run_passes` logic", "tree": {"sha": "9e8c5452951d81bb9374dd7e9ea34ff1025dac8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e8c5452951d81bb9374dd7e9ea34ff1025dac8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56751cc3405ec5c90d3edddf489e5cb16cf7344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56751cc3405ec5c90d3edddf489e5cb16cf7344", "html_url": "https://github.com/rust-lang/rust/commit/d56751cc3405ec5c90d3edddf489e5cb16cf7344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56751cc3405ec5c90d3edddf489e5cb16cf7344/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad14c701e3fec7cde0db105774bb14d7f5d7582", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad14c701e3fec7cde0db105774bb14d7f5d7582", "html_url": "https://github.com/rust-lang/rust/commit/aad14c701e3fec7cde0db105774bb14d7f5d7582"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "67ea5cfdb3c006a038bd9fffc4ae1d2842ef1f87", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d56751cc3405ec5c90d3edddf489e5cb16cf7344/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56751cc3405ec5c90d3edddf489e5cb16cf7344/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=d56751cc3405ec5c90d3edddf489e5cb16cf7344", "patch": "@@ -99,56 +99,46 @@ fn run_passes_inner<'tcx>(\n     let overridden_passes = &tcx.sess.opts.unstable_opts.mir_enable_passes;\n     trace!(?overridden_passes);\n \n-    if validate {\n-        validate_body(tcx, body, format!(\"start of phase transition from {:?}\", start_phase));\n-    }\n-\n     for pass in passes {\n         let name = pass.name();\n \n-        if let Some((_, polarity)) = overridden_passes.iter().rev().find(|(s, _)| s == &*name) {\n-            trace!(\n-                pass = %name,\n-                \"{} as requested by flag\",\n-                if *polarity { \"Running\" } else { \"Not running\" },\n-            );\n-            if !polarity {\n-                continue;\n-            }\n-        } else {\n-            if !pass.is_enabled(&tcx.sess) {\n-                continue;\n-            }\n-        }\n-        let dump_enabled = pass.is_mir_dump_enabled();\n+        // Gather information about what we should be doing for this pass\n+        let overriden =\n+            overridden_passes.iter().rev().find(|(s, _)| s == &*name).map(|(_name, polarity)| {\n+                trace!(\n+                    pass = %name,\n+                    \"{} as requested by flag\",\n+                    if *polarity { \"Running\" } else { \"Not running\" },\n+                );\n+                *polarity\n+            });\n+        let is_enabled = overriden.unwrap_or_else(|| pass.is_enabled(&tcx.sess));\n+        let new_phase = pass.phase_change();\n+        let dump_enabled = (is_enabled && pass.is_mir_dump_enabled()) || new_phase.is_some();\n+        let validate = (validate && is_enabled)\n+            || new_phase == Some(MirPhase::Runtime(RuntimePhase::Optimized));\n \n         if dump_enabled {\n             dump_mir(tcx, body, start_phase, &name, cnt, false);\n         }\n-\n-        pass.run_pass(tcx, body);\n-\n+        if is_enabled {\n+            pass.run_pass(tcx, body);\n+        }\n         if dump_enabled {\n             dump_mir(tcx, body, start_phase, &name, cnt, true);\n             cnt += 1;\n         }\n-\n         if let Some(new_phase) = pass.phase_change() {\n             if body.phase >= new_phase {\n                 panic!(\"Invalid MIR phase transition from {:?} to {:?}\", body.phase, new_phase);\n             }\n \n             body.phase = new_phase;\n         }\n-\n         if validate {\n-            validate_body(tcx, body, format!(\"after pass {}\", pass.name()));\n+            validate_body(tcx, body, format!(\"after pass {}\", name));\n         }\n     }\n-\n-    if validate || body.phase == MirPhase::Runtime(RuntimePhase::Optimized) {\n-        validate_body(tcx, body, format!(\"end of phase transition to {:?}\", body.phase));\n-    }\n }\n \n pub fn validate_body<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, when: String) {"}]}