{"sha": "d86835769c58b5d9599cdb54a90e239ee041189b", "node_id": "C_kwDOAAsO6NoAKGQ4NjgzNTc2OWM1OGI1ZDk1OTljZGI1NGE5MGUyMzllZTA0MTE4OWI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-30T21:55:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-30T21:55:25Z"}, "message": "Make structured suggestion for fn casting verbose", "tree": {"sha": "2b19a5b62b0ed6098f74d97c48a818b1891cafe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b19a5b62b0ed6098f74d97c48a818b1891cafe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86835769c58b5d9599cdb54a90e239ee041189b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86835769c58b5d9599cdb54a90e239ee041189b", "html_url": "https://github.com/rust-lang/rust/commit/d86835769c58b5d9599cdb54a90e239ee041189b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86835769c58b5d9599cdb54a90e239ee041189b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2c8edac3f7aa2d2aa779d0683db7f3dd2e9887", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2c8edac3f7aa2d2aa779d0683db7f3dd2e9887", "html_url": "https://github.com/rust-lang/rust/commit/6c2c8edac3f7aa2d2aa779d0683db7f3dd2e9887"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "73859aca4247892103acfb39d0d8d14f5af1673a", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d86835769c58b5d9599cdb54a90e239ee041189b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86835769c58b5d9599cdb54a90e239ee041189b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=d86835769c58b5d9599cdb54a90e239ee041189b", "patch": "@@ -404,7 +404,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (msg, sug)\n                     }\n                 };\n-                diag.span_suggestion(span, msg, sug, Applicability::MaybeIncorrect);\n+                diag.span_suggestion_verbose(span, msg, sug, Applicability::MaybeIncorrect);\n             }\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let expected_sig ="}, {"sha": "a674babcb324be2dffe063bb60eaceb57a95882a", "filename": "tests/ui/fn/fn-pointer-mismatch.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr?ref=d86835769c58b5d9599cdb54a90e239ee041189b", "patch": "@@ -43,42 +43,48 @@ error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:36:29\n    |\n LL |     let c: fn(u32) -> u32 = &foo;\n-   |            --------------   ^^^^\n-   |            |                |\n-   |            |                expected fn pointer, found `&fn(u32) -> u32 {foo}`\n-   |            |                help: consider removing the reference: `foo`\n+   |            --------------   ^^^^ expected fn pointer, found `&fn(u32) -> u32 {foo}`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected fn pointer `fn(u32) -> u32`\n                found reference `&fn(u32) -> u32 {foo}`\n+help: consider removing the reference\n+   |\n+LL |     let c: fn(u32) -> u32 = foo;\n+   |                             ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:42:30\n    |\n LL |     let d: &fn(u32) -> u32 = foo;\n-   |            ---------------   ^^^\n-   |            |                 |\n-   |            |                 expected `&fn(u32) -> u32`, found fn item\n-   |            |                 help: consider using a reference: `&foo`\n+   |            ---------------   ^^^ expected `&fn(u32) -> u32`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&fn(u32) -> u32`\n                 found fn item `fn(u32) -> u32 {foo}`\n+help: consider using a reference\n+   |\n+LL |     let d: &fn(u32) -> u32 = &foo;\n+   |                              ~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/fn-pointer-mismatch.rs:48:30\n    |\n LL |     let e: &fn(u32) -> u32 = &foo;\n-   |            ---------------   ^^^^\n-   |            |                 |\n-   |            |                 expected `&fn(u32) -> u32`, found `&fn(u32) -> u32 {foo}`\n-   |            |                 help: consider casting to a fn pointer: `&(foo as fn(u32) -> u32)`\n+   |            ---------------   ^^^^ expected `&fn(u32) -> u32`, found `&fn(u32) -> u32 {foo}`\n+   |            |\n    |            expected due to this\n    |\n    = note: expected reference `&fn(u32) -> u32`\n               found reference `&fn(u32) -> u32 {foo}`\n    = note: fn items are distinct from fn pointers\n    = note: when the arguments and return types match, functions can be coerced to function pointers\n+help: consider casting to a fn pointer\n+   |\n+LL |     let e: &fn(u32) -> u32 = &(foo as fn(u32) -> u32);\n+   |                              ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b0ac5dc44ad9a67a77a0dd7b4c3c4253b5ad430b", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr?ref=d86835769c58b5d9599cdb54a90e239ee041189b", "patch": "@@ -5,17 +5,19 @@ LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here\n ...\n LL |     let foo: fn() = foo;\n-   |              ----   ^^^\n-   |              |      |\n-   |              |      cannot coerce functions with `#[target_feature]` to safe function pointers\n-   |              |      help: consider casting to a fn pointer: `foo as fn()`\n+   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers\n+   |              |\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn()`\n                  found fn item `fn() {foo}`\n    = note: fn items are distinct from fn pointers\n    = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n    = note: when the arguments and return types match, functions can be coerced to function pointers\n+help: consider casting to a fn pointer\n+   |\n+LL |     let foo: fn() = foo as fn();\n+   |                     ~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "b0ac5dc44ad9a67a77a0dd7b4c3c4253b5ad430b", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr?ref=d86835769c58b5d9599cdb54a90e239ee041189b", "patch": "@@ -5,17 +5,19 @@ LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here\n ...\n LL |     let foo: fn() = foo;\n-   |              ----   ^^^\n-   |              |      |\n-   |              |      cannot coerce functions with `#[target_feature]` to safe function pointers\n-   |              |      help: consider casting to a fn pointer: `foo as fn()`\n+   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers\n+   |              |\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn()`\n                  found fn item `fn() {foo}`\n    = note: fn items are distinct from fn pointers\n    = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n    = note: when the arguments and return types match, functions can be coerced to function pointers\n+help: consider casting to a fn pointer\n+   |\n+LL |     let foo: fn() = foo as fn();\n+   |                     ~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "b68352b518314a6df9308e34a5e92829a6b9b5be", "filename": "tests/ui/static/static-reference-to-fn-1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d86835769c58b5d9599cdb54a90e239ee041189b/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr?ref=d86835769c58b5d9599cdb54a90e239ee041189b", "patch": "@@ -2,15 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/static-reference-to-fn-1.rs:17:15\n    |\n LL |         func: &foo,\n-   |               ^^^^\n-   |               |\n-   |               expected `&fn() -> Option<isize>`, found `&fn() -> Option<isize> {foo}`\n-   |               help: consider casting to a fn pointer: `&(foo as fn() -> Option<isize>)`\n+   |               ^^^^ expected `&fn() -> Option<isize>`, found `&fn() -> Option<isize> {foo}`\n    |\n    = note: expected reference `&fn() -> Option<isize>`\n               found reference `&fn() -> Option<isize> {foo}`\n    = note: fn items are distinct from fn pointers\n    = note: when the arguments and return types match, functions can be coerced to function pointers\n+help: consider casting to a fn pointer\n+   |\n+LL |         func: &(foo as fn() -> Option<isize>),\n+   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}]}