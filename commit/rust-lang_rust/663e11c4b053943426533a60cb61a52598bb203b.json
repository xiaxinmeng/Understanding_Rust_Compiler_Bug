{"sha": "663e11c4b053943426533a60cb61a52598bb203b", "node_id": "C_kwDOAAsO6NoAKDY2M2UxMWM0YjA1Mzk0MzQyNjUzM2E2MGNiNjFhNTI1OThiYjIwM2I", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T00:22:23Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:49:23Z"}, "message": "Move some tests", "tree": {"sha": "cd692537bbd437912b64f79f4df002b9f45426d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd692537bbd437912b64f79f4df002b9f45426d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/663e11c4b053943426533a60cb61a52598bb203b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/663e11c4b053943426533a60cb61a52598bb203b", "html_url": "https://github.com/rust-lang/rust/commit/663e11c4b053943426533a60cb61a52598bb203b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/663e11c4b053943426533a60cb61a52598bb203b/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5c63c8f90b7cf66d94626352141dc3f0585b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5c63c8f90b7cf66d94626352141dc3f0585b6e", "html_url": "https://github.com/rust-lang/rust/commit/da5c63c8f90b7cf66d94626352141dc3f0585b6e"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "31c01c20ee36fb8bcf326c7e3b73c8f3083f1eae", "filename": "lib/line-index/src/tests.rs", "status": "modified", "additions": 1, "deletions": 63, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/663e11c4b053943426533a60cb61a52598bb203b/lib%2Fline-index%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/663e11c4b053943426533a60cb61a52598bb203b/lib%2Fline-index%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Ftests.rs?ref=663e11c4b053943426533a60cb61a52598bb203b", "patch": "@@ -1,38 +1,4 @@\n-use super::*;\n-\n-#[test]\n-fn test_line_index() {\n-    let text = \"hello\\nworld\";\n-    let table = [\n-        (00, 0, 0),\n-        (01, 0, 1),\n-        (05, 0, 5),\n-        (06, 1, 0),\n-        (07, 1, 1),\n-        (08, 1, 2),\n-        (10, 1, 4),\n-        (11, 1, 5),\n-        (12, 1, 6),\n-    ];\n-\n-    let index = LineIndex::new(text);\n-    for (offset, line, col) in table {\n-        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n-    }\n-\n-    let text = \"\\nhello\\nworld\";\n-    let table = [(0, 0, 0), (1, 1, 0), (2, 1, 1), (6, 1, 5), (7, 2, 0)];\n-    let index = LineIndex::new(text);\n-    for (offset, line, col) in table {\n-        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n-    }\n-}\n-\n-#[test]\n-fn test_char_len() {\n-    assert_eq!('\u30e1'.len_utf8(), 3);\n-    assert_eq!('\u30e1'.len_utf16(), 1);\n-}\n+use super::LineIndex;\n \n #[test]\n fn test_empty_index() {\n@@ -43,31 +9,3 @@ const C: char = 'x';\n     );\n     assert_eq!(col_index.line_wide_chars.len(), 0);\n }\n-\n-#[test]\n-fn test_splitlines() {\n-    fn r(lo: u32, hi: u32) -> TextRange {\n-        TextRange::new(lo.into(), hi.into())\n-    }\n-\n-    let text = \"a\\nbb\\nccc\\n\";\n-    let line_index = LineIndex::new(text);\n-\n-    let actual = line_index.lines(r(0, 9)).collect::<Vec<_>>();\n-    let expected = vec![r(0, 2), r(2, 5), r(5, 9)];\n-    assert_eq!(actual, expected);\n-\n-    let text = \"\";\n-    let line_index = LineIndex::new(text);\n-\n-    let actual = line_index.lines(r(0, 0)).collect::<Vec<_>>();\n-    let expected = vec![];\n-    assert_eq!(actual, expected);\n-\n-    let text = \"\\n\";\n-    let line_index = LineIndex::new(text);\n-\n-    let actual = line_index.lines(r(0, 1)).collect::<Vec<_>>();\n-    let expected = vec![r(0, 1)];\n-    assert_eq!(actual, expected)\n-}"}, {"sha": "fcaf0e4a8c988d6cc7bd16eeb6475019d68b3002", "filename": "lib/line-index/tests/it.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/663e11c4b053943426533a60cb61a52598bb203b/lib%2Fline-index%2Ftests%2Fit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/663e11c4b053943426533a60cb61a52598bb203b/lib%2Fline-index%2Ftests%2Fit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Ftests%2Fit.rs?ref=663e11c4b053943426533a60cb61a52598bb203b", "patch": "@@ -0,0 +1,63 @@\n+use line_index::{LineCol, LineIndex, TextRange};\n+\n+#[test]\n+fn test_line_index() {\n+    let text = \"hello\\nworld\";\n+    let table = [\n+        (00, 0, 0),\n+        (01, 0, 1),\n+        (05, 0, 5),\n+        (06, 1, 0),\n+        (07, 1, 1),\n+        (08, 1, 2),\n+        (10, 1, 4),\n+        (11, 1, 5),\n+        (12, 1, 6),\n+    ];\n+\n+    let index = LineIndex::new(text);\n+    for (offset, line, col) in table {\n+        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n+    }\n+\n+    let text = \"\\nhello\\nworld\";\n+    let table = [(0, 0, 0), (1, 1, 0), (2, 1, 1), (6, 1, 5), (7, 2, 0)];\n+    let index = LineIndex::new(text);\n+    for (offset, line, col) in table {\n+        assert_eq!(index.line_col(offset.into()), LineCol { line, col });\n+    }\n+}\n+\n+#[test]\n+fn test_char_len() {\n+    assert_eq!('\u30e1'.len_utf8(), 3);\n+    assert_eq!('\u30e1'.len_utf16(), 1);\n+}\n+\n+#[test]\n+fn test_splitlines() {\n+    fn r(lo: u32, hi: u32) -> TextRange {\n+        TextRange::new(lo.into(), hi.into())\n+    }\n+\n+    let text = \"a\\nbb\\nccc\\n\";\n+    let line_index = LineIndex::new(text);\n+\n+    let actual = line_index.lines(r(0, 9)).collect::<Vec<_>>();\n+    let expected = vec![r(0, 2), r(2, 5), r(5, 9)];\n+    assert_eq!(actual, expected);\n+\n+    let text = \"\";\n+    let line_index = LineIndex::new(text);\n+\n+    let actual = line_index.lines(r(0, 0)).collect::<Vec<_>>();\n+    let expected = vec![];\n+    assert_eq!(actual, expected);\n+\n+    let text = \"\\n\";\n+    let line_index = LineIndex::new(text);\n+\n+    let actual = line_index.lines(r(0, 1)).collect::<Vec<_>>();\n+    let expected = vec![r(0, 1)];\n+    assert_eq!(actual, expected)\n+}"}]}