{"sha": "1841a5f64fc7c848de6c3a9790f4383c2929668e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDFhNWY2NGZjN2M4NDhkZTZjM2E5NzkwZjQzODNjMjkyOTY2OGU=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-06T09:07:06Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-29T08:35:38Z"}, "message": "diagnostics: Note capturing closures can't be coerced to fns\n\nFixes: #72457, #71895", "tree": {"sha": "4e304aef163754d72ab1fcdd1ad39aa2b8f0b061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e304aef163754d72ab1fcdd1ad39aa2b8f0b061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1841a5f64fc7c848de6c3a9790f4383c2929668e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1841a5f64fc7c848de6c3a9790f4383c2929668e", "html_url": "https://github.com/rust-lang/rust/commit/1841a5f64fc7c848de6c3a9790f4383c2929668e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1841a5f64fc7c848de6c3a9790f4383c2929668e/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9651648d3b741e81ba7042e49a07b78a441517", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9651648d3b741e81ba7042e49a07b78a441517", "html_url": "https://github.com/rust-lang/rust/commit/0d9651648d3b741e81ba7042e49a07b78a441517"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "e9efeed3d6e527b1021fb9c136a1e21b2821103b", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -32,6 +32,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n             return;\n         }\n+        self.suggest_no_capture_closure(err, expected, expr_ty);\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_parentheses(err, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);"}, {"sha": "9fbf330fe02086a52bd61cff54610dee5f5eae45", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -2,7 +2,7 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_span::{self, Span};\n+use rustc_span::{self, MultiSpan, Span};\n \n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -287,6 +287,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// When encountering a closure that captures variables, where a FnPtr is expected,\n+    /// suggest a non-capturing closure\n+    pub(in super::super) fn suggest_no_capture_closure(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if let (ty::FnPtr(_), ty::Closure(def_id, _)) = (expected.kind(), found.kind()) {\n+            if let Some(upvars) = self.tcx.upvars_mentioned(*def_id) {\n+                // Report upto four upvars being captured to reduce the amount error messages\n+                // reported back to the user.\n+                let spans_and_labels = upvars\n+                    .iter()\n+                    .take(4)\n+                    .map(|(var_hir_id, upvar)| {\n+                        let var_name = self.tcx.hir().name(*var_hir_id).to_string();\n+                        let msg = format!(\"`{}` captured here\", var_name);\n+                        (upvar.span, msg)\n+                    })\n+                    .collect::<Vec<_>>();\n+\n+                let mut multi_span: MultiSpan =\n+                    spans_and_labels.iter().map(|(sp, _)| *sp).collect::<Vec<_>>().into();\n+                for (sp, label) in spans_and_labels {\n+                    multi_span.push_span_label(sp, label);\n+                }\n+                err.span_note(multi_span, \"closures can only be coerced to `fn` types if they do not capture any variables\");\n+            }\n+        }\n+    }\n+\n     /// When encountering an `impl Future` where `BoxFuture` is expected, suggest `Box::pin`.\n     pub(in super::super) fn suggest_calling_boxed_future_when_appropriate(\n         &self,"}, {"sha": "2b53802fea793366b9b228d51e86e16d1eb261d7", "filename": "src/test/ui/closures/closure-no-fn-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -8,6 +8,11 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n                  found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-1.rs:6:39\n+   |\n+LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+   |                                       ^ `a` captured here\n \n error: aborting due to previous error\n "}, {"sha": "ed9f87a2c94a8cc5807f07b61a966aabe34e840f", "filename": "src/test/ui/closures/closure-no-fn-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -8,6 +8,11 @@ LL |     let bar: fn() -> u8 = || { b };\n    |\n    = note: expected fn pointer `fn() -> u8`\n                  found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-2.rs:6:32\n+   |\n+LL |     let bar: fn() -> u8 = || { b };\n+   |                                ^ `b` captured here\n \n error: aborting due to previous error\n "}, {"sha": "275bff645dba644965a56dca64fd9e159e5dc82a", "filename": "src/test/ui/closures/closure-no-fn-4.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.rs?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let b = 2;\n+    let _: fn(usize) -> usize = match true {\n+        true => |a| a + 1,\n+        false => |a| a - b,\n+        //~^ ERROR `match` arms have incompatible types\n+    };\n+}"}, {"sha": "89798ec5dd34f4d947c829d8d1f32b805d297a14", "filename": "src/test/ui/closures/closure-no-fn-4.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-4.stderr?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/closure-no-fn-4.rs:5:18\n+   |\n+LL |       let _: fn(usize) -> usize = match true {\n+   |  _________________________________-\n+LL | |         true => |a| a + 1,\n+   | |                 --------- this is found to be of type `fn(usize) -> usize`\n+LL | |         false => |a| a - b,\n+   | |                  ^^^^^^^^^ expected fn pointer, found closure\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected fn pointer `fn(usize) -> usize`\n+                 found closure `[closure@$DIR/closure-no-fn-4.rs:5:18: 5:27]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-4.rs:5:26\n+   |\n+LL |         false => |a| a - b,\n+   |                          ^ `b` captured here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "43e3e977e34abd716b60b70064abb5e7ab2fd581", "filename": "src/test/ui/closures/closure-no-fn-5.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.rs?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -0,0 +1,12 @@\n+// When providing diagnostics about not being able to coerce a capturing-closure\n+// to fn type, we want to report only upto 4 captures.\n+\n+fn main() {\n+    let a = 0u8;\n+    let b = 0u8;\n+    let c = 0u8;\n+    let d = 0u8;\n+    let e = 0u8;\n+    let bar: fn() -> u8 = || { a; b; c; d; e };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "1f373f10489e634fbf44ce5118f806a3ebfa24fd", "filename": "src/test/ui/closures/closure-no-fn-5.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-5.stderr?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-no-fn-5.rs:10:27\n+   |\n+LL |     let bar: fn() -> u8 = || { a; b; c; d; e };\n+   |              ----------   ^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n+   |              |\n+   |              expected due to this\n+   |\n+   = note: expected fn pointer `fn() -> u8`\n+                 found closure `[closure@$DIR/closure-no-fn-5.rs:10:27: 10:47]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-no-fn-5.rs:10:32\n+   |\n+LL |     let bar: fn() -> u8 = || { a; b; c; d; e };\n+   |                                ^  ^  ^  ^ `d` captured here\n+   |                                |  |  |\n+   |                                |  |  `c` captured here\n+   |                                |  `b` captured here\n+   |                                `a` captured here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "37813879ce7529d96fb4f656b6683c7654df9045", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -8,6 +8,11 @@ LL |     call_bare(f)\n    |\n    = note: expected fn pointer `for<'r> fn(&'r str)`\n                  found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-reform-bad.rs:10:43\n+   |\n+LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n+   |                                           ^^^^^^ `string` captured here\n \n error: aborting due to previous error\n "}, {"sha": "d19b07acbf175c3aa8ed7e88fbe87ed4e847e0b0", "filename": "src/test/ui/closures/print/closure-print-verbose.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1841a5f64fc7c848de6c3a9790f4383c2929668e/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr?ref=1841a5f64fc7c848de6c3a9790f4383c2929668e", "patch": "@@ -8,6 +8,11 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n                  found closure `[main::{closure#0} closure_substs=(unavailable)]`\n+note: closures can only be coerced to `fn` types if they do not capture any variables\n+  --> $DIR/closure-print-verbose.rs:10:39\n+   |\n+LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n+   |                                       ^ `a` captured here\n \n error: aborting due to previous error\n "}]}