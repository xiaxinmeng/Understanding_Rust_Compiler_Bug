{"sha": "521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMWQzZWExOTMyM2M0YzNiYTE4ZWZmYmZlZTU4YzEwYjJhYWYyOGI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-19T00:45:38Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T17:08:07Z"}, "message": "rustc_resolve: bring back \"struct called like a function\" cross-crate.", "tree": {"sha": "a36f54509717238c7500dee5d2285c25c36f7bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36f54509717238c7500dee5d2285c25c36f7bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "html_url": "https://github.com/rust-lang/rust/commit/521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564f2ee33c479c74f68fd9ae33b179de0b8537c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/564f2ee33c479c74f68fd9ae33b179de0b8537c9", "html_url": "https://github.com/rust-lang/rust/commit/564f2ee33c479c74f68fd9ae33b179de0b8537c9"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "e57e116cea7407e2a48b9fe87cf334e6ed226a7d", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "patch": "@@ -200,6 +200,7 @@ pub trait CrateStore<'tcx> {\n                              -> Option<DefIndex>;\n     fn def_key(&self, def: DefId) -> hir_map::DefKey;\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;\n+    fn variant_kind(&self, def_id: DefId) -> Option<ty::VariantKind>;\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n@@ -283,7 +284,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n-    fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind  { bug!(\"closure_kind\") }\n+    fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind { bug!(\"closure_kind\") }\n     fn closure_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                       -> ty::ClosureTy<'tcx>  { bug!(\"closure_ty\") }\n     fn item_variances(&self, def: DefId) -> Vec<ty::Variance> { bug!(\"item_variances\") }\n@@ -376,6 +377,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> {\n         bug!(\"relative_def_path\")\n     }\n+    fn variant_kind(&self, def_id: DefId) -> Option<ty::VariantKind> { bug!(\"variant_kind\") }\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n         { bug!(\"struct_ctor_def_id\") }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }"}, {"sha": "1f25136ffe1acc679c7870dc66be5362b2f3ff5c", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "patch": "@@ -342,6 +342,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n+    fn variant_kind(&self, def_id: DefId) -> Option<ty::VariantKind>\n+    {\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n+        self.get_crate_data(def_id.krate).get_variant_kind(def_id.index)\n+    }\n+\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n     {\n         self.dep_graph.read(DepNode::MetaData(struct_def_id));"}, {"sha": "3e4a2542b270bc9f7b7bd3c22e56142b2f2dac21", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "patch": "@@ -787,6 +787,15 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(id).variances.decode(self).collect()\n     }\n \n+    pub fn get_variant_kind(&self, node_id: DefIndex) -> Option<ty::VariantKind> {\n+        match self.entry(node_id).kind {\n+            EntryKind::Struct(data) |\n+            EntryKind::Union(data) |\n+            EntryKind::Variant(data) => Some(data.decode(self).kind),\n+            _ => None\n+        }\n+    }\n+\n     pub fn get_struct_ctor_def_id(&self, node_id: DefIndex) -> Option<DefId> {\n         match self.entry(node_id).kind {\n             EntryKind::Struct(data) => {"}, {"sha": "c9591c31831a850fe0ec7b30051ead1eac0ba45e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "patch": "@@ -411,12 +411,16 @@ impl<'b> Resolver<'b> {\n                 let module = self.new_module(parent_link, Some(def), None);\n                 let _ = self.try_define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n             }\n-            Def::Variant(..) => {\n+            Def::Variant(variant_id) => {\n                 debug!(\"(building reduced graph for external crate) building variant {}\", name);\n                 // Variants are always treated as importable to allow them to be glob used.\n                 // All variants are defined in both type and value namespaces as future-proofing.\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n                 let _ = self.try_define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n+                if self.session.cstore.variant_kind(variant_id) == Some(ty::VariantKind::Struct) {\n+                    // Not adding fields for variants as they are not accessed with a self receiver\n+                    self.structs.insert(variant_id, Vec::new());\n+                }\n             }\n             Def::Fn(..) |\n             Def::Static(..) |"}, {"sha": "205566e4b1f54afda5d78bae232873894c9440b8", "filename": "src/test/compile-fail/auxiliary/issue_19452_aux.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_19452_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_19452_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fissue_19452_aux.rs?ref=521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum Homura {\n+    Madoka { age: u32 }\n+}"}, {"sha": "34872b7c8c503edbb0e9521674e34f18f594b3b1", "filename": "src/test/compile-fail/issue-19452.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d3ea19323c4c3ba18effbfee58c10b2aaf28b/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs?ref=521d3ea19323c4c3ba18effbfee58c10b2aaf28b", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:issue_19452_aux.rs\n+extern crate issue_19452_aux;\n+\n enum Homura {\n     Madoka { age: u32 }\n }\n@@ -16,4 +19,8 @@ fn main() {\n     let homura = Homura::Madoka;\n     //~^ ERROR uses it like a function\n     //~| struct called like a function\n+\n+    let homura = issue_19452_aux::Homura::Madoka;\n+    //~^ ERROR uses it like a function\n+    //~| struct called like a function\n }"}]}