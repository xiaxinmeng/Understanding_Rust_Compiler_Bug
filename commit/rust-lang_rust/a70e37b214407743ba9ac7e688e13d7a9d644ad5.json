{"sha": "a70e37b214407743ba9ac7e688e13d7a9d644ad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MGUzN2IyMTQ0MDc3NDNiYTlhYzdlNjg4ZTEzZDdhOWQ2NDRhZDU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-29T02:49:36Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-29T02:51:11Z"}, "message": "In ty::impl_traits, treat structs properly\n\nTreat structs just like impls: use their associated list of\ntrait refs to get the list of traits that one of them implements.\nI don't understand what was happening before, but it was wrong.\n\nCloses #2936", "tree": {"sha": "34d451033f93a43a40385bb2f2fa67eb45bf4025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d451033f93a43a40385bb2f2fa67eb45bf4025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70e37b214407743ba9ac7e688e13d7a9d644ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70e37b214407743ba9ac7e688e13d7a9d644ad5", "html_url": "https://github.com/rust-lang/rust/commit/a70e37b214407743ba9ac7e688e13d7a9d644ad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70e37b214407743ba9ac7e688e13d7a9d644ad5/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19dce6c162f0dc24c615e8e667f190117126293", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19dce6c162f0dc24c615e8e667f190117126293", "html_url": "https://github.com/rust-lang/rust/commit/a19dce6c162f0dc24c615e8e667f190117126293"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "7666672406a2ed38d7c9546b23078cac19dd8ac0", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a70e37b214407743ba9ac7e688e13d7a9d644ad5/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70e37b214407743ba9ac7e688e13d7a9d644ad5/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a70e37b214407743ba9ac7e688e13d7a9d644ad5", "patch": "@@ -2826,22 +2826,11 @@ fn impl_traits(cx: ctxt, id: ast::def_id) -> ~[t] {\n                     node_id_to_type(cx, trait_ref.ref_id)\n                 }\n            }\n-           Some(ast_map::node_item(@{node: ast::item_class(*),\n+           Some(ast_map::node_item(@{node: ast::item_class(sd,_),\n                            _},_)) => {\n-             match cx.def_map.find(id.node) {\n-               Some(def_ty(trait_id)) => {\n-                   // XXX: Doesn't work cross-crate.\n-                   debug!(\"(impl_traits) found trait id %?\", trait_id);\n-                   ~[node_id_to_type(cx, trait_id.node)]\n-               }\n-               Some(x) => {\n-                 cx.sess.bug(fmt!(\"impl_traits: trait ref is in trait map \\\n-                                   but is bound to %?\", x));\n-               }\n-               None => {\n-                 ~[]\n-               }\n-             }\n+               do vec::map(sd.traits) |trait_ref| {\n+                    node_id_to_type(cx, trait_ref.ref_id)\n+                }\n            }\n            _ => ~[]\n         }"}, {"sha": "130e59125a1f485ea485b8c5e833158f26b1d750", "filename": "src/test/run-pass/issue-2936.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a70e37b214407743ba9ac7e688e13d7a9d644ad5/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70e37b214407743ba9ac7e688e13d7a9d644ad5/src%2Ftest%2Frun-pass%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2936.rs?ref=a70e37b214407743ba9ac7e688e13d7a9d644ad5", "patch": "@@ -0,0 +1,20 @@\n+trait bar<T> {\n+    fn get_bar() -> T;\n+}\n+\n+fn foo<T, U: bar<T>>(b: U) -> T {\n+    b.get_bar()\n+}\n+\n+struct cbar : bar<int> {\n+    x: int;\n+    new(x: int) { self.x = x; }\n+    fn get_bar() -> int {\n+        self.x\n+    }\n+}\n+\n+fn main() {\n+    let x: int = foo::<int, cbar>(cbar(5));\n+    assert x == 5;\n+}"}]}