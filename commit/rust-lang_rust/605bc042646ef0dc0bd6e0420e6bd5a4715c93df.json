{"sha": "605bc042646ef0dc0bd6e0420e6bd5a4715c93df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNWJjMDQyNjQ2ZWYwZGMwYmQ2ZTA0MjBlNmJkNWE0NzE1YzkzZGY=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-03T02:58:34Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-03T02:58:34Z"}, "message": "Use a BitVector instead of Vec<bool> for recording cleanup blocks\n\nAlso adds a FromIterator impl for BitVector to allow construction of a\nBitVector from an iterator yeilding bools.", "tree": {"sha": "46b52d148e0fad110de38a1622a9d643260c343b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b52d148e0fad110de38a1622a9d643260c343b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/605bc042646ef0dc0bd6e0420e6bd5a4715c93df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/605bc042646ef0dc0bd6e0420e6bd5a4715c93df", "html_url": "https://github.com/rust-lang/rust/commit/605bc042646ef0dc0bd6e0420e6bd5a4715c93df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/605bc042646ef0dc0bd6e0420e6bd5a4715c93df/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63321ca19390535795780ce15991b6238fb67db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/63321ca19390535795780ce15991b6238fb67db4", "html_url": "https://github.com/rust-lang/rust/commit/63321ca19390535795780ce15991b6238fb67db4"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "092b406ae9e3e23c474d7cae419e8e6a208b93a1", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/605bc042646ef0dc0bd6e0420e6bd5a4715c93df/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605bc042646ef0dc0bd6e0420e6bd5a4715c93df/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=605bc042646ef0dc0bd6e0420e6bd5a4715c93df", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::iter::FromIterator;\n+\n /// A very simple BitVector type.\n #[derive(Clone)]\n pub struct BitVector {\n@@ -51,7 +53,9 @@ impl BitVector {\n     pub fn grow(&mut self, num_bits: usize) {\n         let num_words = u64s(num_bits);\n         let extra_words = self.data.len() - num_words;\n-        self.data.extend((0..extra_words).map(|_| 0));\n+        if extra_words > 0 {\n+            self.data.extend((0..extra_words).map(|_| 0));\n+        }\n     }\n \n     /// Iterates over indexes of set bits in a sorted order\n@@ -94,6 +98,27 @@ impl<'a> Iterator for BitVectorIter<'a> {\n     }\n }\n \n+impl FromIterator<bool> for BitVector {\n+    fn from_iter<I>(iter: I) -> BitVector where I: IntoIterator<Item=bool> {\n+        let iter = iter.into_iter();\n+        let (len, _) = iter.size_hint();\n+        // Make the minimum length for the bitvector 64 bits since that's\n+        // the smallest non-zero size anyway.\n+        let len = if len < 64 { 64 } else { len };\n+        let mut bv = BitVector::new(len);\n+        for (idx, val) in iter.enumerate() {\n+            if idx > len {\n+                bv.grow(idx);\n+            }\n+            if val {\n+                bv.insert(idx);\n+            }\n+        }\n+\n+        bv\n+    }\n+}\n+\n /// A \"bit matrix\" is basically a square matrix of booleans\n /// represented as one gigantic bitvector. In other words, it is as if\n /// you have N bitvectors, each of length N. Note that `elements` here is `N`/"}, {"sha": "e1fb5dfd4374cfc176b1900f236240e0e7ad1bc8", "filename": "src/librustc_mir/transform/break_critical_edges.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/605bc042646ef0dc0bd6e0420e6bd5a4715c93df/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605bc042646ef0dc0bd6e0420e6bd5a4715c93df/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs?ref=605bc042646ef0dc0bd6e0420e6bd5a4715c93df", "patch": "@@ -13,6 +13,8 @@ use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, Pass};\n use syntax::ast::NodeId;\n \n+use rustc_data_structures::bitvec::BitVector;\n+\n use traversal;\n \n pub struct BreakCriticalEdges;\n@@ -60,6 +62,9 @@ fn break_critical_edges(mir: &mut Mir) {\n         }\n     }\n \n+    let cleanup_map : BitVector = mir.basic_blocks\n+        .iter().map(|bb| bb.is_cleanup).collect();\n+\n     // We need a place to store the new blocks generated\n     let mut new_blocks = Vec::new();\n \n@@ -84,7 +89,9 @@ fn break_critical_edges(mir: &mut Mir) {\n                             scope: term_scope,\n                             kind: TerminatorKind::Goto { target: *tgt }\n                         };\n-                        let data = BasicBlockData::new(Some(goto));\n+                        let mut data = BasicBlockData::new(Some(goto));\n+                        data.is_cleanup = cleanup_map.contains(tgt.index());\n+\n                         // Get the index it will be when inserted into the MIR\n                         let idx = cur_len + new_blocks.len();\n                         new_blocks.push(data);"}]}