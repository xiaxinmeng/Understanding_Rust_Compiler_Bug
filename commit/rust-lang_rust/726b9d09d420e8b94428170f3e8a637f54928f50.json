{"sha": "726b9d09d420e8b94428170f3e8a637f54928f50", "node_id": "C_kwDOAAsO6NoAKDcyNmI5ZDA5ZDQyMGU4Yjk0NDI4MTcwZjNlOGE2MzdmNTQ5MjhmNTA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-26T13:01:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-26T13:01:26Z"}, "message": "caller_span only makes sense when there are 2 frames on the stack", "tree": {"sha": "e190f690e1e1d767972feb0c301c97c14bf5b051", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e190f690e1e1d767972feb0c301c97c14bf5b051"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726b9d09d420e8b94428170f3e8a637f54928f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726b9d09d420e8b94428170f3e8a637f54928f50", "html_url": "https://github.com/rust-lang/rust/commit/726b9d09d420e8b94428170f3e8a637f54928f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726b9d09d420e8b94428170f3e8a637f54928f50/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8961e13802946e3c956b8f9657aaabf2978027b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8961e13802946e3c956b8f9657aaabf2978027b6", "html_url": "https://github.com/rust-lang/rust/commit/8961e13802946e3c956b8f9657aaabf2978027b6"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "8c7bc9eff0016b1bb1d335190116df04739e882f", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/726b9d09d420e8b94428170f3e8a637f54928f50/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726b9d09d420e8b94428170f3e8a637f54928f50/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=726b9d09d420e8b94428170f3e8a637f54928f50", "patch": "@@ -939,6 +939,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     /// Get the current span in the topmost function which is workspace-local and not\n     /// `#[track_caller]`.\n     /// This function is backed by a cache, and can be assumed to be very fast.\n+    /// It will work even when the stack is empty.\n     pub fn current_span(&self) -> Span {\n         self.top_user_relevant_frame()\n             .map(|frame_idx| self.stack()[frame_idx].current_span())\n@@ -953,10 +954,9 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub fn caller_span(&self) -> Span {\n         // We need to go down at least to the caller (len - 2), or however\n         // far we have to go to find a frame in a local crate which is also not #[track_caller].\n-        self.top_user_relevant_frame()\n-            .map(|frame_idx| cmp::min(frame_idx, self.stack().len() - 2))\n-            .map(|frame_idx| self.stack()[frame_idx].current_span())\n-            .unwrap_or(rustc_span::DUMMY_SP)\n+        let frame_idx = self.top_user_relevant_frame().unwrap();\n+        let frame_idx = cmp::min(frame_idx, self.stack().len().checked_sub(2).unwrap());\n+        self.stack()[frame_idx].current_span()\n     }\n \n     fn stack(&self) -> &[Frame<'mir, 'tcx, Provenance, machine::FrameData<'tcx>>] {"}]}