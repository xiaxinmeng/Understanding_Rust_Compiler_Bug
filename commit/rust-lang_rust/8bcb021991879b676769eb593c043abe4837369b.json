{"sha": "8bcb021991879b676769eb593c043abe4837369b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiY2IwMjE5OTE4NzliNjc2NzY5ZWI1OTNjMDQzYWJlNDgzNzM2OWI=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-11-20T04:06:53Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:27Z"}, "message": "Use LLVMRustConstInt128Get on stage1 too\n\nllvm::LLVMConstIntGetZExtValue doesn't accept values with more than 64 bits.\n\nThis fixes an LLVM assertion error when compiling libcore with stage1:\n\nsrc/llvm/include/llvm/ADT/APInt.h:1336:\n\tuint64_t llvm::APInt::getZExtValue() const:\n\t\tAssertion `getActiveBits() <= 64 && \"Too many bits for uint64_t\"' failed.", "tree": {"sha": "8f826bbf8e8b57ccd0be4d9cb58b4feea6b436d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f826bbf8e8b57ccd0be4d9cb58b4feea6b436d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bcb021991879b676769eb593c043abe4837369b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcb021991879b676769eb593c043abe4837369b", "html_url": "https://github.com/rust-lang/rust/commit/8bcb021991879b676769eb593c043abe4837369b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bcb021991879b676769eb593c043abe4837369b/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32d8d241599d8c72d23741db286e123a2f1cd7df", "url": "https://api.github.com/repos/rust-lang/rust/commits/32d8d241599d8c72d23741db286e123a2f1cd7df", "html_url": "https://github.com/rust-lang/rust/commit/32d8d241599d8c72d23741db286e123a2f1cd7df"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "79aa5663765820fdbe5afbff210b8022913ddb03", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8bcb021991879b676769eb593c043abe4837369b/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcb021991879b676769eb593c043abe4837369b/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=8bcb021991879b676769eb593c043abe4837369b", "patch": "@@ -592,31 +592,26 @@ fn is_const_integral(v: ValueRef) -> bool {\n     }\n }\n \n-\n+#[inline]\n #[cfg(stage0)]\n-pub fn const_to_opt_u128(v: ValueRef, sign_ext: bool) -> Option<u128> {\n-    unsafe {\n-        if is_const_integral(v) {\n-            if !sign_ext {\n-                Some(llvm::LLVMConstIntGetZExtValue(v))\n-            } else {\n-                Some(llvm::LLVMConstIntGetSExtValue(v) as u64)\n-            }\n-        } else {\n-            None\n-        }\n-    }\n+fn hi_lo_to_u128(lo: u64, _: u64) -> u128 {\n+    lo as u128\n }\n \n+#[inline]\n #[cfg(not(stage0))]\n+fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n+    ((hi as u128) << 64) | (lo as u128)\n+}\n+\n pub fn const_to_opt_u128(v: ValueRef, sign_ext: bool) -> Option<u128> {\n     unsafe {\n         if is_const_integral(v) {\n             let (mut lo, mut hi) = (0u64, 0u64);\n             let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n                                                        &mut hi as *mut u64, &mut lo as *mut u64);\n             if success {\n-                Some(((hi as u128) << 64) | (lo as u128))\n+                Some(hi_lo_to_u128(lo, hi))\n             } else {\n                 None\n             }"}]}