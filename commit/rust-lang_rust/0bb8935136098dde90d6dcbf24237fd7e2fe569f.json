{"sha": "0bb8935136098dde90d6dcbf24237fd7e2fe569f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjg5MzUxMzYwOThkZGU5MGQ2ZGNiZjI0MjM3ZmQ3ZTJmZTU2OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-11T05:29:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-11T05:29:20Z"}, "message": "Auto merge of #47657 - algesten:save-analysis-impls, r=nrc\n\nEmit data::Impl in save-analysis\n\nAs discussed on [internals.rust-lang](https://internals.rust-lang.org/t/rustdoc2-rls-analysis-and-the-compiler-help-wanted/6592/5), this PR emits `rls-data::Impl` in the save-analysis.\n\nA number of questions are outstanding:\n\n- [x] A few `???` around row 356. We need to discuss what goes here, if anything.\n- [ ] ~~Deriving `id` for impl using hashing. Is this going to clash with rustc defids?~~\n- [ ] ~~Deriving `id` for impl using hashing. Is the conversion from 64 bit -> 32 bit problematic?~~\n- [x] Need a new rls-data with an `id` field in `Impl` struct.\n- [ ] ~~Need a new rls-data which `derive` `Hash` for `ImplKind` enum.~~", "tree": {"sha": "98aab9d3332fa002439694194a7a85328ae8c6ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98aab9d3332fa002439694194a7a85328ae8c6ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb8935136098dde90d6dcbf24237fd7e2fe569f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb8935136098dde90d6dcbf24237fd7e2fe569f", "html_url": "https://github.com/rust-lang/rust/commit/0bb8935136098dde90d6dcbf24237fd7e2fe569f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb8935136098dde90d6dcbf24237fd7e2fe569f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2baba12182123012458d8b09f84a04ae8c1e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2baba12182123012458d8b09f84a04ae8c1e7c", "html_url": "https://github.com/rust-lang/rust/commit/7f2baba12182123012458d8b09f84a04ae8c1e7c"}, {"sha": "9a6afa8f670af6da28a62c551d9df1fbe51b7434", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6afa8f670af6da28a62c551d9df1fbe51b7434", "html_url": "https://github.com/rust-lang/rust/commit/9a6afa8f670af6da28a62c551d9df1fbe51b7434"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "6b722db53ed3a743b523464297bfe0a3a462cd2f", "filename": "src/Cargo.lock", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=0bb8935136098dde90d6dcbf24237fd7e2fe569f", "patch": "@@ -1685,6 +1685,15 @@ dependencies = [\n  \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rls-data\"\n+version = \"0.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rls-rustc\"\n version = \"0.2.1\"\n@@ -2122,7 +2131,7 @@ name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3107,6 +3116,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex-syntax 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e931c58b93d86f080c734bfd2bce7dd0079ae2331235818133c8be7f422e20e\"\n \"checksum rls-analysis 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38841e3c5271715a574ac220d9b408b59ed9e2626909c3bc54b5853b4eaadb7b\"\n \"checksum rls-data 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8024f1feaca72d0aa4ae1e2a8d454a31b9a33ed02f8d0e9c8559bf53c267ec3c\"\n+\"checksum rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bea04462e94b5512a78499837eecb7db182ff082144cd1b4bc32ef5d43de6510\"\n \"checksum rls-rustc 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"85cfb9dde19e313da3e47738008f8a472e470cc42d910b71595a9238494701f2\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd34691a510938bb67fe0444fb363103c73ffb31c121d1e16bc92d8945ea8ff\""}, {"sha": "005faa55b58842ff4ba71ff9b92a75692d4d0b88", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=0bb8935136098dde90d6dcbf24237fd7e2fe569f", "patch": "@@ -15,7 +15,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rls-data = \"0.14\"\n+rls-data = \"0.15\"\n rls-span = \"0.4\"\n # FIXME(#40527) should move rustc serialize out of tree\n rustc-serialize = \"0.3\""}, {"sha": "47530c4208520902cb2169150ef57d347da74e1a", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=0bb8935136098dde90d6dcbf24237fd7e2fe569f", "patch": "@@ -770,8 +770,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         impl_items: &'l [ast::ImplItem],\n     ) {\n         if let Some(impl_data) = self.save_ctxt.get_item_data(item) {\n-            down_cast_data!(impl_data, RelationData, item.span);\n-            self.dumper.dump_relation(impl_data);\n+            if let super::Data::RelationData(rel, imp) = impl_data {\n+                self.dumper.dump_relation(rel);\n+                self.dumper.dump_impl(imp);\n+            } else {\n+                span_bug!(item.span, \"unexpected data kind: {:?}\", impl_data);\n+            }\n         }\n         self.visit_ty(&typ);\n         if let &Some(ref trait_ref) = trait_ref {"}, {"sha": "1b09df16a7d16ba88771ad809646b5c72eb85bf8", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=0bb8935136098dde90d6dcbf24237fd7e2fe569f", "patch": "@@ -13,7 +13,7 @@ use std::io::Write;\n use rustc_serialize::json::as_json;\n \n use rls_data::{self, Analysis, CratePreludeData, Def, DefKind, Import, MacroRef, Ref, RefKind,\n-               Relation};\n+               Relation, Impl};\n use rls_data::config::Config;\n use rls_span::{Column, Row};\n \n@@ -142,4 +142,8 @@ impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n     pub fn dump_relation(&mut self, data: Relation) {\n         self.result.relations.push(data);\n     }\n+\n+    pub fn dump_impl(&mut self, data: Impl) {\n+        self.result.impls.push(data);\n+    }\n }"}, {"sha": "490dc4e5ac4a910338b5d4168a744a7277c0e0dc", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb8935136098dde90d6dcbf24237fd7e2fe569f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=0bb8935136098dde90d6dcbf24237fd7e2fe569f", "patch": "@@ -45,6 +45,7 @@ use rustc::session::config::CrateType::CrateTypeExecutable;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n \n+use std::cell::Cell;\n use std::default::Default;\n use std::env;\n use std::fs::File;\n@@ -65,7 +66,7 @@ use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n use rls_data::{Def, DefKind, ExternalCrateData, GlobalCrateId, MacroRef, Ref, RefKind, Relation,\n-               RelationKind, SpanData};\n+               RelationKind, SpanData, Impl, ImplKind};\n use rls_data::config::Config;\n \n \n@@ -75,13 +76,14 @@ pub struct SaveContext<'l, 'tcx: 'l> {\n     analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n+    impl_counter: Cell<u32>,\n }\n \n #[derive(Debug)]\n pub enum Data {\n     RefData(Ref),\n     DefData(Def),\n-    RelationData(Relation),\n+    RelationData(Relation, Impl),\n }\n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n@@ -315,7 +317,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.to_owned(), self),\n                 }))\n             }\n-            ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n+            ast::ItemKind::Impl(.., ref trait_ref, ref typ, ref impls) => {\n                 if let ast::TyKind::Path(None, ref path) = typ.node {\n                     // Common case impl for a struct or something basic.\n                     if generated_code(path.span) {\n@@ -324,17 +326,39 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     let sub_span = self.span_utils.sub_span_for_type_name(path.span);\n                     filter!(self.span_utils, sub_span, typ.span, None);\n \n+                    let impl_id = self.next_impl_id();\n+                    let span = self.span_from_span(sub_span.unwrap());\n+\n                     let type_data = self.lookup_ref_id(typ.id);\n                     type_data.map(|type_data| {\n                         Data::RelationData(Relation {\n-                            kind: RelationKind::Impl,\n-                            span: self.span_from_span(sub_span.unwrap()),\n+                            kind: RelationKind::Impl {\n+                                id: impl_id,\n+                            },\n+                            span: span.clone(),\n                             from: id_from_def_id(type_data),\n                             to: trait_ref\n                                 .as_ref()\n                                 .and_then(|t| self.lookup_ref_id(t.ref_id))\n                                 .map(id_from_def_id)\n                                 .unwrap_or(null_id()),\n+                        },\n+                        Impl {\n+                            id: impl_id,\n+                            kind: match *trait_ref {\n+                                Some(_) => ImplKind::Direct,\n+                                None => ImplKind::Inherent,\n+                            },\n+                            span: span,\n+                            value: String::new(),\n+                            parent: None,\n+                            children: impls\n+                                .iter()\n+                                .map(|i| id_from_node_id(i.id, self))\n+                                .collect(),\n+                            docs: String::new(),\n+                            sig: None,\n+                            attributes: vec![],\n                         })\n                     })\n                 } else {\n@@ -893,6 +917,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n         result\n     }\n+\n+    fn next_impl_id(&self) -> u32 {\n+        let next = self.impl_counter.get();\n+        self.impl_counter.set(next + 1);\n+        next\n+    }\n }\n \n fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n@@ -1099,6 +1129,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n             analysis,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),\n+            impl_counter: Cell::new(0),\n         };\n \n         handler.save(save_ctxt, krate, cratename)"}]}