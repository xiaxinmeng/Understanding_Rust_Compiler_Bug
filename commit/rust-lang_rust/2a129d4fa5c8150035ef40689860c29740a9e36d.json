{"sha": "2a129d4fa5c8150035ef40689860c29740a9e36d", "node_id": "C_kwDOAAsO6NoAKDJhMTI5ZDRmYTVjODE1MDAzNWVmNDA2ODk4NjBjMjk3NDBhOWUzNmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-02T22:32:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-05T03:26:31Z"}, "message": "Format invariance notes with backticks", "tree": {"sha": "cc167f89f737ba1d83d6d01f9520819f898dc554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc167f89f737ba1d83d6d01f9520819f898dc554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a129d4fa5c8150035ef40689860c29740a9e36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a129d4fa5c8150035ef40689860c29740a9e36d", "html_url": "https://github.com/rust-lang/rust/commit/2a129d4fa5c8150035ef40689860c29740a9e36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a129d4fa5c8150035ef40689860c29740a9e36d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8877cf73823351cee2a871bd5387628054fabea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8877cf73823351cee2a871bd5387628054fabea", "html_url": "https://github.com/rust-lang/rust/commit/a8877cf73823351cee2a871bd5387628054fabea"}], "stats": {"total": 226, "additions": 113, "deletions": 113}, "files": [{"sha": "1798c525f6d6cab067243bdd049c19d65593e60f", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -330,14 +330,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ty::RawPtr(ty_mut) => {\n                         assert_eq!(ty_mut.mutbl, rustc_hir::Mutability::Mut);\n                         (\n-                            format!(\"a mutable pointer to {}\", ty_mut.ty),\n+                            format!(\"a mutable pointer to `{}`\", ty_mut.ty),\n                             \"mutable pointers are invariant over their type parameter\".to_string(),\n                         )\n                     }\n                     ty::Ref(_, inner_ty, mutbl) => {\n                         assert_eq!(*mutbl, rustc_hir::Mutability::Mut);\n                         (\n-                            format!(\"a mutable reference to {}\", inner_ty),\n+                            format!(\"a mutable reference to `{}`\", inner_ty),\n                             \"mutable references are invariant over their type parameter\"\n                                 .to_string(),\n                         )\n@@ -351,10 +351,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         let adt_desc = adt.descr();\n \n                         let desc = format!(\n-                            \"the type {ty}, which makes the generic argument {generic_arg} invariant\"\n+                            \"the type `{ty}`, which makes the generic argument `{generic_arg}` invariant\"\n                         );\n                         let note = format!(\n-                            \"the {adt_desc} {base_ty} is invariant over the parameter {base_generic_arg}\"\n+                            \"the {adt_desc} `{base_ty}` is invariant over the parameter `{base_generic_arg}`\"\n                         );\n                         (desc, note)\n                     }"}, {"sha": "55532d6b9b3fae0ac86c27e6e647f5baf9e6bda1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,8 +10,8 @@ LL |     (a, b)\n    |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -26,8 +26,8 @@ LL |     (a, b)\n    |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other"}, {"sha": "fd9eb05473af8af5c03b1bf5416358c90a088d9e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,8 +10,8 @@ LL |     let a = bar(f, x);\n    |             ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -26,8 +26,8 @@ LL |     let b = bar(f, y);\n    |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other"}, {"sha": "5a7ead729498d03e4c39a3109ddc46b8afe5c79f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -7,8 +7,8 @@ LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n LL |     bar(foo, x)\n    |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Type<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Type<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "6f8e53298ace2ccf88385f2b5b7f181ab6ac5da7", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -8,8 +8,8 @@ LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f\n LL |     ap\n    |     ^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'f`\n    |\n-   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n-   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = note: requirement occurs because of the type `VaListImpl<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `VaListImpl<'f>` is invariant over the parameter `'f`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -22,8 +22,8 @@ LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f\n LL |     ap\n    |     ^^ function was supposed to return data with lifetime `'f` but it is returning data with lifetime `'1`\n    |\n-   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n-   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = note: requirement occurs because of the type `VaListImpl<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `VaListImpl<'f>` is invariant over the parameter `'f`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -34,8 +34,8 @@ LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'stati\n LL |     ap\n    |     ^^ returning this value requires that `'1` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n-   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = note: requirement occurs because of the type `VaListImpl<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `VaListImpl<'f>` is invariant over the parameter `'f`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -57,8 +57,8 @@ LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut\n LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'1` must outlive `'2`\n    |\n-   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n-   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = note: requirement occurs because of the type `VaListImpl<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `VaListImpl<'f>` is invariant over the parameter `'f`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -71,8 +71,8 @@ LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut\n LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'2` must outlive `'1`\n    |\n-   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n-   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = note: requirement occurs because of the type `VaListImpl<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `VaListImpl<'f>` is invariant over the parameter `'f`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -85,7 +85,7 @@ LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n    |\n-   = note: requirement occurs because of a mutable reference to VaListImpl<'_>\n+   = note: requirement occurs because of a mutable reference to `VaListImpl<'_>`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -99,7 +99,7 @@ LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'2` must outlive `'1`\n    |\n-   = note: requirement occurs because of a mutable reference to VaListImpl<'_>\n+   = note: requirement occurs because of a mutable reference to `VaListImpl<'_>`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -127,8 +127,8 @@ LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n    |\n-   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n-   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = note: requirement occurs because of the type `VaListImpl<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `VaListImpl<'f>` is invariant over the parameter `'f`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -141,8 +141,8 @@ LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'2` must outlive `'1`\n    |\n-   = note: requirement occurs because of the type VaListImpl<'_>, which makes the generic argument '_ invariant\n-   = note: the struct VaListImpl<'f> is invariant over the parameter 'f\n+   = note: requirement occurs because of the type `VaListImpl<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `VaListImpl<'f>` is invariant over the parameter `'f`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to 11 previous errors"}, {"sha": "f5db68e8be140ee2702bcb87c95ba18ac02c50be", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -13,8 +13,8 @@ LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n-   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -33,8 +33,8 @@ LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n-   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3b7e53cd52724885d99d94a76d9ffbcd1cd1e1ae", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -9,7 +9,7 @@ LL |         match self.0 { ref mut x => x }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of a mutable reference to &i32\n+   = note: requirement occurs because of a mutable reference to `&i32`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "f4d1cea670ba60d7f83c093cf095c048d70f8a4a", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,7 +10,7 @@ LL |         x\n    |         ^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of a mutable reference to &i32\n+   = note: requirement occurs because of a mutable reference to `&i32`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "ec2c220b6b8a044ea64a0a29c3253311a2e98c57", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -52,8 +52,8 @@ LL | |     });\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Cell<&'_#10r u32>, which makes the generic argument &'_#10r u32 invariant\n-   = note: the struct Cell<T> is invariant over the parameter T\n+   = note: requirement occurs because of the type `Cell<&'_#10r u32>`, which makes the generic argument `&'_#10r u32` invariant\n+   = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "234212c88767af4b5bfe34112dc9737a7a825cfb", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -52,8 +52,8 @@ LL | |     });\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Cell<&'_#11r u32>, which makes the generic argument &'_#11r u32 invariant\n-   = note: the struct Cell<T> is invariant over the parameter T\n+   = note: requirement occurs because of the type `Cell<&'_#11r u32>`, which makes the generic argument `&'_#11r u32` invariant\n+   = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "24b07cabbac560a1e13738f9366691ab29dcb9da", "filename": "src/test/ui/nll/type-check-pointer-coercions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -34,7 +34,7 @@ LL |     x\n    |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable pointer to &i32\n+   = note: requirement occurs because of a mutable pointer to `&i32`\n    = note: mutable pointers are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -50,7 +50,7 @@ LL |     x\n    |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of a mutable pointer to &i32\n+   = note: requirement occurs because of a mutable pointer to `&i32`\n    = note: mutable pointers are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "8c88b2290395c67179ae423cec5029965f63d227", "filename": "src/test/ui/nll/type-check-pointer-comparisons.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -9,7 +9,7 @@ LL |     x == y;\n    |     ^ requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of a mutable reference to &i32\n+   = note: requirement occurs because of a mutable reference to `&i32`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -24,7 +24,7 @@ LL |     x == y;\n    |          ^ requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to &i32\n+   = note: requirement occurs because of a mutable reference to `&i32`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -41,7 +41,7 @@ LL |     x == y;\n    |     ^ requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of a mutable pointer to &i32\n+   = note: requirement occurs because of a mutable pointer to `&i32`\n    = note: mutable pointers are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -56,7 +56,7 @@ LL |     x == y;\n    |          ^ requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable pointer to &i32\n+   = note: requirement occurs because of a mutable pointer to `&i32`\n    = note: mutable pointers are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -73,7 +73,7 @@ LL |     f == g;\n    |     ^ requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of a mutable reference to &i32\n+   = note: requirement occurs because of a mutable reference to `&i32`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -88,7 +88,7 @@ LL |     f == g;\n    |          ^ requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to &i32\n+   = note: requirement occurs because of a mutable reference to `&i32`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "b88c90e8f54162b2299bcd5d2f864ffba6208418", "filename": "src/test/ui/nll/where_clauses_in_structs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -9,8 +9,8 @@ LL |     Foo { x, y };\n    |           ^ this usage requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of the type Cell<&u32>, which makes the generic argument &u32 invariant\n-   = note: the struct Cell<T> is invariant over the parameter T\n+   = note: requirement occurs because of the type `Cell<&u32>`, which makes the generic argument `&u32` invariant\n+   = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "6e7eb734a50eac9ef35f08e84d81bfc2fe129316", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -12,8 +12,8 @@ LL |         x.unwrap()\n    |         `x` escapes the function body here\n    |         argument requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Invariant<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Invariant<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "233a040491c660a28573accbcb48b9ba2a55501d", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -23,7 +23,7 @@ LL |     a(x, y);\n    |     ^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to &isize\n+   = note: requirement occurs because of a mutable reference to `&isize`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "00119743acd780842f4b6b65acafdf3eb24473a7", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -23,7 +23,7 @@ LL |     a(x, y, z);\n    |     ^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to &isize\n+   = note: requirement occurs because of a mutable reference to `&isize`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "6193bf02f6d0d4f7ffaf089a2d9268f973e4b28c", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,8 +10,8 @@ LL |     a.bigger_region(b)\n    |     ^^^^^^^^^^^^^^^^^^ argument requires that `'y` must outlive `'x`\n    |\n    = help: consider adding the following bound: `'y: 'x`\n-   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "0e0086be9ea8d588e72d9593cb85cc3d4f06171f", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,8 +10,8 @@ LL |     f.method(b);\n    |     ^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of the type Inv<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Inv<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Inv<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Inv<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "c8c7808e06c5f9e0d320cbd1c37c231c86693455", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -6,8 +6,8 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Invariant<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Invariant<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "1165011c1f4fc19adf4dfd20df4db31ec26cafa4", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -6,8 +6,8 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Invariant<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Invariant<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "f3973a93bad84337c1343ef100e495bca7380c72", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -6,8 +6,8 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Invariant<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Invariant<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "f4875e49c3da4145765dc334113c962a304577c1", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -17,8 +17,8 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   lifetime `'a` defined here\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of the type Indirect2<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Indirect2<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Indirect2<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Indirect2<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -30,8 +30,8 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   lifetime `'a` defined here\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of the type Indirect2<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Indirect2<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Indirect2<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Indirect2<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'b` and `'a` must be the same: replace one with the other"}, {"sha": "ee3dcef1cb5c4455350c3fbf62fdd4274726ce9e", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -23,7 +23,7 @@ LL |     a(x, y);\n    |     ^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to &isize\n+   = note: requirement occurs because of a mutable reference to `&isize`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "1b3a116d508fad8334ed83b32ed726e2ea61160f", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,7 +10,7 @@ LL |     x\n    |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n-   = note: requirement occurs because of a mutable reference to dyn Dummy\n+   = note: requirement occurs because of a mutable reference to `dyn Dummy`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -26,7 +26,7 @@ LL |     x\n    |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a mutable reference to dyn Dummy\n+   = note: requirement occurs because of a mutable reference to `dyn Dummy`\n    = note: mutable references are invariant over their type parameter\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "b35a2cb905dc3c6ad5ef5e4a6a8c31f96101821f", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,8 +10,8 @@ LL |     let _: Invariant<'short> = c;\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n    |\n    = help: consider adding the following bound: `'short: 'long`\n-   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Invariant<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Invariant<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "761e78d179e414f3d17b59703fe26dbd0641269c", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -7,8 +7,8 @@ LL | fn use_<'b>(c: Invariant<'b>) {\n LL |     let _: Invariant<'static> = c;\n    |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type Invariant<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Invariant<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Invariant<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Invariant<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "0d9815cf788a1ed7218b215295eb08f3b11dcf65", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -6,8 +6,8 @@ LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::IterMut<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `std::collections::btree_map::IterMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -18,8 +18,8 @@ LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::IterMut<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `std::collections::btree_map::IterMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -30,8 +30,8 @@ LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::IterMut<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `std::collections::btree_map::IterMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -42,8 +42,8 @@ LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::IterMut<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct std::collections::btree_map::IterMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::IterMut<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `std::collections::btree_map::IterMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -54,8 +54,8 @@ LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type RangeMut<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `RangeMut<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `RangeMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -66,8 +66,8 @@ LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type RangeMut<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `RangeMut<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `RangeMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -78,8 +78,8 @@ LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type RangeMut<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `RangeMut<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `RangeMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -90,8 +90,8 @@ LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type RangeMut<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct RangeMut<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `RangeMut<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `RangeMut<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -103,8 +103,8 @@ LL |                          -> OccupiedEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::OccupiedEntry<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `std::collections::btree_map::OccupiedEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -116,8 +116,8 @@ LL |                          -> OccupiedEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::OccupiedEntry<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `std::collections::btree_map::OccupiedEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -129,8 +129,8 @@ LL |                             -> OccupiedEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::OccupiedEntry<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `std::collections::btree_map::OccupiedEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -142,8 +142,8 @@ LL |                             -> OccupiedEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::OccupiedEntry<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct std::collections::btree_map::OccupiedEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::OccupiedEntry<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `std::collections::btree_map::OccupiedEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -155,8 +155,8 @@ LL |                          -> VacantEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::VacantEntry<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `std::collections::btree_map::VacantEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -168,8 +168,8 @@ LL |                          -> VacantEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::VacantEntry<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `std::collections::btree_map::VacantEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -181,8 +181,8 @@ LL |                             -> VacantEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, &(), ()>, which makes the generic argument &() invariant\n-   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::VacantEntry<'_, &(), ()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `std::collections::btree_map::VacantEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -194,8 +194,8 @@ LL |                             -> VacantEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type std::collections::btree_map::VacantEntry<'_, (), &()>, which makes the generic argument () invariant\n-   = note: the struct std::collections::btree_map::VacantEntry<'a, K, V> is invariant over the parameter K\n+   = note: requirement occurs because of the type `std::collections::btree_map::VacantEntry<'_, (), &()>`, which makes the generic argument `()` invariant\n+   = note: the struct `std::collections::btree_map::VacantEntry<'a, K, V>` is invariant over the parameter `K`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to 16 previous errors"}, {"sha": "ab5435d1656d286d7e324eef216133eb3828eb77", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,8 +10,8 @@ LL |     let _: Foo<'long> = c;\n    |            ^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n    |\n    = help: consider adding the following bound: `'short: 'long`\n-   = note: requirement occurs because of the type Foo<'_>, which makes the generic argument '_ invariant\n-   = note: the struct Foo<'a> is invariant over the parameter 'a\n+   = note: requirement occurs because of the type `Foo<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Foo<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error"}, {"sha": "600b245c1f7fd83844e796e618256f5138ba8e14", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a129d4fa5c8150035ef40689860c29740a9e36d/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=2a129d4fa5c8150035ef40689860c29740a9e36d", "patch": "@@ -10,8 +10,8 @@ LL |     v\n    |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n-   = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant\n-   = note: the struct SomeStruct<T> is invariant over the parameter T\n+   = note: requirement occurs because of the type `SomeStruct<&()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `SomeStruct<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n@@ -26,8 +26,8 @@ LL |     v\n    |     ^ function was supposed to return data with lifetime `'max` but it is returning data with lifetime `'min`\n    |\n    = help: consider adding the following bound: `'min: 'max`\n-   = note: requirement occurs because of the type SomeStruct<&()>, which makes the generic argument &() invariant\n-   = note: the struct SomeStruct<T> is invariant over the parameter T\n+   = note: requirement occurs because of the type `SomeStruct<&()>`, which makes the generic argument `&()` invariant\n+   = note: the struct `SomeStruct<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to 2 previous errors"}]}