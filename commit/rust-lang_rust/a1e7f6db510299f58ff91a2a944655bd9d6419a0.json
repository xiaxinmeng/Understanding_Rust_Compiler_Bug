{"sha": "a1e7f6db510299f58ff91a2a944655bd9d6419a0", "node_id": "C_kwDOAAsO6NoAKGExZTdmNmRiNTEwMjk5ZjU4ZmY5MWEyYTk0NDY1NWJkOWQ2NDE5YTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T13:56:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T13:56:50Z"}, "message": "Rollup merge of #95654 - notriddle:notriddle/issue-95616, r=davidtwco\n\ndiagnostics: use correct span for const generics\n\nFixes #95616", "tree": {"sha": "6087b7667335e826568c7b10b2ec9c537367da7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6087b7667335e826568c7b10b2ec9c537367da7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e7f6db510299f58ff91a2a944655bd9d6419a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTEqiCRBK7hj4Ov3rIwAAwScIAA3zcRJeHUft9VdWuDa0JEtN\nRml0FzYMTaf6K7lw9m+xT1D4i9WGUazKLmGELJJZqqt0wGgSllAwTNuOfn5F94ta\nMa2zwZVQyQkPfS/BP7rDTZlvOS56BT9hBSKG5TLMz2dytbdfl4OU2ZDmpowUOHt6\nJus9Kdb8YIUepukfm5ZuEHkZ7uiNlq3v/rX2cS1MTkNaT2yzn/dmvxK5Y+geoN7h\njliecMoHrFS2UO8tCvf6a9RQ3BGHSskdHihCjzN1l0yplzYQn6qla5XsfyZ2YWSL\nfNzxdCya+bziF4DA4wKl6lxQHR/Y3yHyBIGU901HEM6x7q8r499EzfbVz1EsF1Q=\n=pwV/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6087b7667335e826568c7b10b2ec9c537367da7a\nparent 661b0e5b325429db17501bbe79168dc360cabf37\nparent 6ece80fcb672ee3053ccf4fafed62e7307b56a66\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649167010 +0200\ncommitter GitHub <noreply@github.com> 1649167010 +0200\n\nRollup merge of #95654 - notriddle:notriddle/issue-95616, r=davidtwco\n\ndiagnostics: use correct span for const generics\n\nFixes #95616\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e7f6db510299f58ff91a2a944655bd9d6419a0", "html_url": "https://github.com/rust-lang/rust/commit/a1e7f6db510299f58ff91a2a944655bd9d6419a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e7f6db510299f58ff91a2a944655bd9d6419a0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661b0e5b325429db17501bbe79168dc360cabf37", "url": "https://api.github.com/repos/rust-lang/rust/commits/661b0e5b325429db17501bbe79168dc360cabf37", "html_url": "https://github.com/rust-lang/rust/commit/661b0e5b325429db17501bbe79168dc360cabf37"}, {"sha": "6ece80fcb672ee3053ccf4fafed62e7307b56a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ece80fcb672ee3053ccf4fafed62e7307b56a66", "html_url": "https://github.com/rust-lang/rust/commit/6ece80fcb672ee3053ccf4fafed62e7307b56a66"}], "stats": {"total": 147, "additions": 91, "deletions": 56}, "files": [{"sha": "e7e82e651bb09ae0f7dd5518eb76d9530ed46cea", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -2068,7 +2068,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::GenericParam {\n             hir_id,\n             name,\n-            span: self.lower_span(param.ident.span),\n+            span: self.lower_span(param.span()),\n             pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n             bounds: self.arena.alloc_from_iter(bounds),\n             kind,"}, {"sha": "0edc9a556b7f6090402256492f1069d6fe7aad27", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `Add`\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n LL | pub trait Add<Rhs = Self> {\n-   |               ^^^ required by this bound in `Add`\n+   |               ^^^^^^^^^^ required by this bound in `Add`\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + Sized {}"}, {"sha": "0d12a948c68bdbc13a597f7a60a7c000e2ce6481", "filename": "src/test/ui/async-await/issues/issue-78654.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -5,10 +5,10 @@ LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:9:12\n+  --> $DIR/issue-78654.rs:9:6\n    |\n LL | impl<const H: feature> Foo {\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "0d12a948c68bdbc13a597f7a60a7c000e2ce6481", "filename": "src/test/ui/async-await/issues/issue-78654.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -5,10 +5,10 @@ LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:9:12\n+  --> $DIR/issue-78654.rs:9:6\n    |\n LL | impl<const H: feature> Foo {\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "4b2b05742538b35cea80d4c063fa720b68b38c85", "filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -1,8 +1,8 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:3:12\n+  --> $DIR/default-on-impl.rs:3:6\n    |\n LL | impl<const N: usize = 1> Foo<N> {}\n-   |            ^\n+   |      ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c587a7e153fe38075257b122600db093f9414bb9", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-76595.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -10,7 +10,7 @@ note: function defined here, with 2 generic parameters: `T`, `P`\n   --> $DIR/issue-76595.rs:10:4\n    |\n LL | fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n-   |    ^^^^ -        -\n+   |    ^^^^ -  --------------\n help: add missing generic argument\n    |\n LL |     test::<2, P>();"}, {"sha": "a845454f762cf444a06e719ff8bfa4542634f9e1", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -10,7 +10,7 @@ note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n+   |    ^^^ --------------  --------------\n help: add missing generic argument\n    |\n LL |     foo::<0, Y>();\n@@ -28,7 +28,7 @@ note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n+   |    ^^^ --------------  --------------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca9eb801dfce77962043f914d32843ace3a708f8", "filename": "src/test/ui/const-generics/issues/issue-68366.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -1,17 +1,17 @@\n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:11:13\n+  --> $DIR/issue-68366.rs:11:7\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |             ^ unconstrained const parameter\n+   |       ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:17:12\n+  --> $DIR/issue-68366.rs:17:6\n    |\n LL | impl<const N: usize> Foo {}\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "3740ced90b1d772ab2bc7e808677708bc0ee2cc1", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -8,19 +8,19 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:11:13\n+  --> $DIR/issue-68366.rs:11:7\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |             ^ unconstrained const parameter\n+   |       ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:17:12\n+  --> $DIR/issue-68366.rs:17:6\n    |\n LL | impl<const N: usize> Foo {}\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "f7b8d80eeca7f03c73d7823f18d3e371b24b8a26", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -1,14 +1,14 @@\n error[E0053]: method `bit` has an incompatible const parameter type for trait\n-  --> $DIR/issue-86820.rs:17:18\n+  --> $DIR/issue-86820.rs:17:12\n    |\n LL |     fn bit<const I : usize>(self) -> bool {\n-   |                  ^\n+   |            ^^^^^^^^^^^^^^^\n    |\n note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n-  --> $DIR/issue-86820.rs:12:18\n+  --> $DIR/issue-86820.rs:12:12\n    |\n LL |     fn bit<const I : u8>(self) -> bool;\n-   |                  ^\n+   |            ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dedad2880c9e86ad3df490b9b833f7a95f1fd3d2", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -1,8 +1,8 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default_function_param.rs:3:14\n+  --> $DIR/default_function_param.rs:3:8\n    |\n LL | fn foo<const SIZE: usize = 5usize>() {}\n-   |              ^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "acfdde8e1a01f16a45ee76e7f11e15ce22f96d84", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -17,7 +17,7 @@ note: trait defined here, with 1 generic parameter: `N`\n   --> $DIR/issue-89013-no-kw.rs:1:7\n    |\n LL | trait Foo<const N: usize> {\n-   |       ^^^       -\n+   |       ^^^ --------------\n help: add missing generic argument\n    |\n LL | impl Foo<N, N = 3> for Bar {"}, {"sha": "d2d58c496df2c898482e28c7c2ada6297ae2e519", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -29,7 +29,7 @@ note: trait defined here, with 1 generic parameter: `N`\n   --> $DIR/issue-89013.rs:1:7\n    |\n LL | trait Foo<const N: usize> {\n-   |       ^^^       -\n+   |       ^^^ --------------\n help: add missing generic argument\n    |\n LL | impl Foo<N, N = const 3> for Bar {"}, {"sha": "a7d5c7ac39b09b718afc2f7d5ba0873b2993bee2", "filename": "src/test/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -2,7 +2,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:3:8\n    |\n LL | fn avg<T=i32>(_: T) {}\n-   |        ^\n+   |        ^^^^^\n    |\n    = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -12,7 +12,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:8:6\n    |\n LL | impl<T=i32> S<T> {}\n-   |      ^\n+   |      ^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>"}, {"sha": "fe9b670da799c451196921466dfe67884e8ce115", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -10,7 +10,7 @@ note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-impl-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>(\n-   |        ^^^ -  -\n+   |        ^^^ -  --------\n \n error: aborting due to previous error\n "}, {"sha": "7f0198f0e842414932b260c27585e9c65375f20e", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -10,7 +10,7 @@ note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-type-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>(\n-   |        ^^^ -  -\n+   |        ^^^ -  --------\n \n error: aborting due to previous error\n "}, {"sha": "6791182238c72d978041c2bb39edbdd1e69a6c5c", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `Tsized`\n   --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:14\n    |\n LL | trait Tsized<P: Sized = [Self]> {}\n-   |              ^ required by this bound in `Tsized`\n+   |              ^^^^^^^^^^^^^^^^^ required by this bound in `Tsized`\n \n error: aborting due to previous error\n "}, {"sha": "3b0834a5f51b271b10445bb67d466cc19b0ed5c6", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -287,7 +287,7 @@ note: struct defined here, with at most 3 generic parameters: `A`, `B`, `C`\n   --> $DIR/wrong-number-of-args.rs:78:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n-   |            ^^ -  -  -\n+   |            ^^ -  -  ----------------\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:96:14\n@@ -922,7 +922,7 @@ note: struct defined here, with at most 3 generic parameters: `K`, `V`, `S`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n    |\n LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -  -\n+   |            ^^^^^^^ -  -  ---------------\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:319:18"}, {"sha": "58a2f79efb4c643e5f0cecdfbbb25faf395064b1", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -293,7 +293,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/where-allowed.rs:234:7\n    |\n LL | impl <T = impl Debug> T {}\n-   |       ^\n+   |       ^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -303,7 +303,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/where-allowed.rs:241:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n-   |                                    ^\n+   |                                    ^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>"}, {"sha": "fa2eaab5b417b21fd1021e3787a449b4cbb9db15", "filename": "src/test/ui/issues/issue-78957.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -2,13 +2,13 @@ error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-78957.rs:5:16\n    |\n LL | pub struct Foo<#[inline] const N: usize>;\n-   |                ^^^^^^^^^       - not a function or closure\n+   |                ^^^^^^^^^ -------------- not a function or closure\n \n error: attribute should be applied to a function\n   --> $DIR/issue-78957.rs:7:16\n    |\n LL | pub struct Bar<#[cold] const N: usize>;\n-   |                ^^^^^^^       - not a function\n+   |                ^^^^^^^ -------------- not a function\n    |\n note: the lint level is defined here\n   --> $DIR/issue-78957.rs:1:9\n@@ -21,7 +21,7 @@ error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/issue-78957.rs:10:23\n    |\n LL | pub struct Baz<#[repr(C)] const N: usize>;\n-   |                       ^         - not a struct, enum, or union\n+   |                       ^   -------------- not a struct, enum, or union\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-78957.rs:13:17"}, {"sha": "ed2766c000ec44ead22a07ae502c8e7c302c6f3a", "filename": "src/test/ui/mir/thir-constparam-temp.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -13,10 +13,10 @@ note: mutable reference created due to call to this method\n LL |     fn mut_self(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n-  --> $DIR/thir-constparam-temp.rs:13:14\n+  --> $DIR/thir-constparam-temp.rs:13:8\n    |\n LL | fn foo<const YIKES: Yikes>() {\n-   |              ^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "cbceec58eb1eb816e7f2ec3d0189cd4e68d76815", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -99,10 +99,10 @@ LL | impl X<{ N }> {}\n    |        +   +\n \n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/missing-type-parameter2.rs:6:15\n+  --> $DIR/missing-type-parameter2.rs:6:9\n    |\n LL | impl<T, const A: u8 = 2> X<N> {}\n-   |               ^\n+   |         ^^^^^^^^^^^^^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/missing-type-parameter2.rs:6:28"}, {"sha": "f174215f257eb4aef305e771de54f45435d378b7", "filename": "src/test/ui/polymorphization/const_parameters/closures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -11,7 +11,7 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:19:19\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n-   |                     - generic parameter `T` is unused\n+   |               -------------- generic parameter `T` is unused\n LL |\n LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n@@ -20,13 +20,13 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:17:8\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n-   |        ^^^^^^       - generic parameter `T` is unused\n+   |        ^^^^^^ -------------- generic parameter `T` is unused\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:28:19\n    |\n LL | pub fn used_parent<const T: usize>() -> usize {\n-   |                          - generic parameter `T` is unused\n+   |                    -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:48:13\n    |\n LL | pub fn unused_upvar<const T: usize>() -> usize {\n-   |                           - generic parameter `T` is unused\n+   |                     -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let y = || x;\n    |             ^^^^"}, {"sha": "f2b5a73073892b5730edf5fdc54cc025837584ca", "filename": "src/test/ui/polymorphization/const_parameters/functions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -11,7 +11,7 @@ error: item has unused generic parameters\n   --> $DIR/functions.rs:15:8\n    |\n LL | pub fn unused<const T: usize>() {\n-   |        ^^^^^^       - generic parameter `T` is unused\n+   |        ^^^^^^ -------------- generic parameter `T` is unused\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9cabb21e784adff9c0da3d333b29e72569567717", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -23,7 +23,7 @@ error: item has unused generic parameters\n   --> $DIR/generators.rs:60:5\n    |\n LL |   pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n-   |                             - generic parameter `T` is unused\n+   |                       ------------ generic parameter `T` is unused\n LL | /     || {\n LL | |\n LL | |         yield 1;"}, {"sha": "5ef04936ea244b19b874c2005cdff16e87b0b77a", "filename": "src/test/ui/save-analysis/issue-89066.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -31,7 +31,7 @@ note: struct defined here, with 2 generic parameters: `T`, `N`\n   --> $DIR/issue-89066.rs:8:8\n    |\n LL | struct All<'a, T, const N: usize> {\n-   |        ^^^     -        -\n+   |        ^^^     -  --------------\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3c06f4f88c1f91f9558685506a057100e3ddbe4e", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/95616\n+\n+fn buggy_const<'a, const N: usize>(_a: &'a Option<[u8; N]>, _f: &'a str) -> &'a str { //~ERROR [E0106]\n+    return \"\";\n+}\n+\n+fn main() {\n+    buggy_const(&Some([69,69,69,69,0]), \"test\");\n+}"}, {"sha": "110468cbbc52e80e0233f55891c331bbe05aece6", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/95616\n+\n+fn buggy_const<const N: usize>(_a: &Option<[u8; N]>, _f: &str) -> &str { //~ERROR [E0106]\n+    return \"\";\n+}\n+\n+fn main() {\n+    buggy_const(&Some([69,69,69,69,0]), \"test\");\n+}"}, {"sha": "7b126c90ee797ac7ade0e9fd17d15b26435035c5", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetimes-in-signature-before-const.rs:4:67\n+   |\n+LL | fn buggy_const<const N: usize>(_a: &Option<[u8; N]>, _f: &str) -> &str {\n+   |                                    ----------------      ----     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_a` or `_f`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn buggy_const<'a, const N: usize>(_a: &'a Option<[u8; N]>, _f: &'a str) -> &'a str {\n+   |                +++                      ++                       ++          ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "b2edcc5526a4abf329785fae9802006c1e3c3a76", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -29,10 +29,10 @@ LL |     t\n    |     ^\n    |\n note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:22\n+  --> $DIR/generic_duplicate_param_use.rs:12:16\n    |\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-   |                      ^               ^\n+   |                ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6c82d31e18d8bf6c02014202a894fb5793433e95", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -26,10 +26,10 @@ LL |     7u32\n    |     ^^^^\n    |\n note: used non-generic constant `123_usize` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:21\n+  --> $DIR/generic_nondefining_use.rs:11:15\n    |\n LL | type OneConst<const X: usize> = impl Debug;\n-   |                     ^\n+   |               ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "56a9b5317f76e49f2e78c280b5fceb723226a0a0", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e7f6db510299f58ff91a2a944655bd9d6419a0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=a1e7f6db510299f58ff91a2a944655bd9d6419a0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n-   |                   ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                   ^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`\n@@ -15,7 +15,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-   |                           ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`"}]}