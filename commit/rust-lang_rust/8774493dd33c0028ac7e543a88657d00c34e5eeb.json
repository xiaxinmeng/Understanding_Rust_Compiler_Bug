{"sha": "8774493dd33c0028ac7e543a88657d00c34e5eeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NzQ0OTNkZDMzYzAwMjhhYzdlNTQzYTg4NjU3ZDAwYzM0ZTVlZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-29T05:23:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-29T15:41:26Z"}, "message": "test: Rewrite binarytrees to use arenas\n\nPerf isn't bad now. Still 50% slower than Java, but faster than other GC'd languages.", "tree": {"sha": "ea02d693e0aa48382491ae01de55b64dcab4085b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea02d693e0aa48382491ae01de55b64dcab4085b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8774493dd33c0028ac7e543a88657d00c34e5eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8774493dd33c0028ac7e543a88657d00c34e5eeb", "html_url": "https://github.com/rust-lang/rust/commit/8774493dd33c0028ac7e543a88657d00c34e5eeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8774493dd33c0028ac7e543a88657d00c34e5eeb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166d14e42de0d29ba88fa5a88551a76f7a12418e", "url": "https://api.github.com/repos/rust-lang/rust/commits/166d14e42de0d29ba88fa5a88551a76f7a12418e", "html_url": "https://github.com/rust-lang/rust/commit/166d14e42de0d29ba88fa5a88551a76f7a12418e"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "4d2c6144cdc37d12c72c63f27d1e843c7e2ab189", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8774493dd33c0028ac7e543a88657d00c34e5eeb/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8774493dd33c0028ac7e543a88657d00c34e5eeb/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=8774493dd33c0028ac7e543a88657d00c34e5eeb", "patch": "@@ -1,8 +1,10 @@\n use std;\n+import std::arena;\n+import std::arena::arena;\n \n-enum tree { nil, node(~tree, ~tree, int), }\n+enum tree { nil, node(&tree, &tree, int), }\n \n-fn item_check(t: ~tree) -> int {\n+fn item_check(t: &tree) -> int {\n     alt *t {\n       nil { ret 0; }\n       node(left, right, item) {\n@@ -11,11 +13,13 @@ fn item_check(t: ~tree) -> int {\n     }\n }\n \n-fn bottom_up_tree(item: int, depth: int) -> ~tree {\n+fn bottom_up_tree(arena: &a.arena::arena, item: int, depth: int) -> &a.tree {\n     if depth > 0 {\n-        ret ~node(bottom_up_tree(2 * item - 1, depth - 1),\n-                  bottom_up_tree(2 * item, depth - 1), item);\n-    } else { ret ~nil; }\n+        ret new(*arena) node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n+                             bottom_up_tree(arena, 2 * item, depth - 1),\n+                             item);\n+    }\n+    ret new(*arena) nil;\n }\n \n fn main(args: [str]) {\n@@ -28,22 +32,29 @@ fn main(args: [str]) {\n     let mut max_depth;\n     if min_depth + 2 > n {\n         max_depth = min_depth + 2;\n-    } else { max_depth = n; }\n+    } else {\n+        max_depth = n;\n+    }\n+\n+    let stretch_arena = arena::arena();\n     let stretch_depth = max_depth + 1;\n-    let stretch_tree = bottom_up_tree(0, stretch_depth);\n+    let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n+\n     io::println(#fmt(\"stretch tree of depth %d\\t check: %d\",\n                           stretch_depth,\n                           item_check(stretch_tree)));\n-    let long_lived_tree = bottom_up_tree(0, max_depth);\n+\n+    let long_lived_arena = arena::arena();\n+    let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n     let mut depth = min_depth;\n     while depth <= max_depth {\n         let iterations = int::pow(2, (max_depth - depth + min_depth) as uint);\n         let mut chk = 0;\n         let mut i = 1;\n         while i <= iterations {\n-            let mut temp_tree = bottom_up_tree(i, depth);\n+            let mut temp_tree = bottom_up_tree(&long_lived_arena, i, depth);\n             chk += item_check(temp_tree);\n-            temp_tree = bottom_up_tree(-i, depth);\n+            temp_tree = bottom_up_tree(&long_lived_arena, -i, depth);\n             chk += item_check(temp_tree);\n             i += 1;\n         }"}]}