{"sha": "9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOWQwM2ZkNjZmMmZhMGViMDRiNTM4MWY0OTFkNjEzOWZhYjk0ZmY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-17T06:00:46Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-18T07:20:09Z"}, "message": "Add load_cached query modifier and keep dep node names consistent with query names", "tree": {"sha": "49e8158661dc7dbadf992cf66af04fc1a14dc4c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49e8158661dc7dbadf992cf66af04fc1a14dc4c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "html_url": "https://github.com/rust-lang/rust/commit/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d90547532012f31ad6fb1cda664bc47c558c6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d90547532012f31ad6fb1cda664bc47c558c6e4", "html_url": "https://github.com/rust-lang/rust/commit/7d90547532012f31ad6fb1cda664bc47c558c6e4"}], "stats": {"total": 623, "additions": 315, "deletions": 308}, "files": [{"sha": "43e865ad08941c6e877e8c99c7760603ba8a6ce6", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -492,8 +492,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // table in the tcx (or elsewhere) maps to one of these\n     // nodes.\n     [] AssociatedItems(DefId),\n-    [] GenericsOfItem(DefId),\n-    [] PredicatesOfItem(DefId),\n     [] ExplicitPredicatesOfItem(DefId),\n     [] PredicatesDefinedOnItem(DefId),\n     [] InferredOutlivesOf(DefId),"}, {"sha": "ecc00898600020b3a2fcab807b6c865bea7cd231", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -1,6 +1,7 @@\n use crate::ty::query::QueryDescription;\n use crate::ty::query::queries;\n use crate::ty::TyCtxt;\n+use crate::ty;\n use crate::hir::def_id::CrateNum;\n use crate::dep_graph::SerializedDepNodeIndex;\n use std::borrow::Cow;\n@@ -23,6 +24,34 @@ rustc_queries! {\n             cache { key.is_local() }\n         }\n \n+        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n+        /// associated generics.\n+        query generics_of(key: DefId) -> &'tcx ty::Generics {\n+            cache { key.is_local() }\n+            load_cached(tcx, id) {\n+                let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n+                                                        .try_load_query_result(tcx, id);\n+                generics.map(|x| tcx.alloc_generics(x))\n+            }\n+        }\n+\n+        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n+        /// predicates (where-clauses) that must be proven true in order\n+        /// to reference it. This is almost always the \"predicates query\"\n+        /// that you want.\n+        ///\n+        /// `predicates_of` builds on `predicates_defined_on` -- in fact,\n+        /// it is almost always the same as that query, except for the\n+        /// case of traits. For traits, `predicates_of` contains\n+        /// an additional `Self: Trait<...>` predicate that users don't\n+        /// actually write. This reflects the fact that to invoke the\n+        /// trait (e.g., via `Default::default`) you must supply types\n+        /// that actually implement the trait. (However, this extra\n+        /// predicate gets in the way of some checks, which are intended\n+        /// to operate over only the actual where-clauses written by the\n+        /// user.)\n+        query predicates_of(_: DefId) -> Lrc<ty::GenericPredicates<'tcx>> {}\n+\n         query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLibrary>> {\n             desc { \"looking up the native libraries of a linked crate\" }\n         }"}, {"sha": "d8159f11acec0e84969e91dd9b2850df5df155bb", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -937,21 +937,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n-    #[inline]\n-    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n-        def_id.is_local()\n-    }\n-\n-    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              id: SerializedDepNodeIndex)\n-                              -> Option<Self::Value> {\n-        let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n-                                                .try_load_query_result(tcx, id);\n-        generics.map(|x| tcx.alloc_generics(x))\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         \"generating chalk-style clauses\".into()"}, {"sha": "2f085a973d202aca119d91e6657f47dcebc087bd", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -104,27 +104,6 @@ rustc_query_append! { [define_queries!][ <'tcx>\n         /// Run analysis passes on the crate\n         [] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n \n-        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n-        /// associated generics.\n-        [] fn generics_of: GenericsOfItem(DefId) -> &'tcx ty::Generics,\n-\n-        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n-        /// predicates (where-clauses) that must be proven true in order\n-        /// to reference it. This is almost always the \"predicates query\"\n-        /// that you want.\n-        ///\n-        /// `predicates_of` builds on `predicates_defined_on` -- in fact,\n-        /// it is almost always the same as that query, except for the\n-        /// case of traits. For traits, `predicates_of` contains\n-        /// an additional `Self: Trait<...>` predicate that users don't\n-        /// actually write. This reflects the fact that to invoke the\n-        /// trait (e.g., via `Default::default`) you must supply types\n-        /// that actually implement the trait. (However, this extra\n-        /// predicate gets in the way of some checks, which are intended\n-        /// to operate over only the actual where-clauses written by the\n-        /// user.)\n-        [] fn predicates_of: PredicatesOfItem(DefId) -> Lrc<ty::GenericPredicates<'tcx>>,\n-\n         /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n         /// predicates (where-clauses) directly defined on it. This is\n         /// equal to the `explicit_predicates_of` predicates plus the"}, {"sha": "e82e09c29976564d9ff17e35f1d31d6738275cac", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -1285,8 +1285,6 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }\n         DepKind::AssociatedItems => { force!(associated_item, def_id!()); }\n-        DepKind::GenericsOfItem => { force!(generics_of, def_id!()); }\n-        DepKind::PredicatesOfItem => { force!(predicates_of, def_id!()); }\n         DepKind::PredicatesDefinedOnItem => { force!(predicates_defined_on, def_id!()); }\n         DepKind::ExplicitPredicatesOfItem => { force!(explicit_predicates_of, def_id!()); }\n         DepKind::InferredOutlivesOf => { force!(inferred_outlives_of, def_id!()); }\n@@ -1501,9 +1499,9 @@ impl_load_from_cache!(\n     SymbolName => def_symbol_name,\n     ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n     CheckMatch => check_match,\n-    TypeOf => type_of,\n-    GenericsOfItem => generics_of,\n-    PredicatesOfItem => predicates_of,\n+    type_of => type_of,\n+    generics_of => generics_of,\n+    predicates_of => predicates_of,\n     UsedTraitImports => used_trait_imports,\n     CodegenFnAttrs => codegen_fn_attrs,\n     SpecializationGraph => specialization_graph_of,"}, {"sha": "6b5e19ca49b76eccb1facbec1ec124eaf42ea69f", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -36,16 +36,16 @@ const CFG: &str = \"cfg\";\n \n /// For typedef, constants, and statics\n const BASE_CONST: &[&str] = &[\n-    label_strs::TypeOf,\n+    label_strs::type_of,\n ];\n \n /// DepNodes for functions + methods\n const BASE_FN: &[&str] = &[\n     // Callers will depend on the signature of these items, so we better test\n     label_strs::FnSignature,\n-    label_strs::GenericsOfItem,\n-    label_strs::PredicatesOfItem,\n-    label_strs::TypeOf,\n+    label_strs::generics_of,\n+    label_strs::predicates_of,\n+    label_strs::type_of,\n \n     // And a big part of compilation (that we eventually want to cache) is type inference\n     // information:\n@@ -62,7 +62,7 @@ const BASE_HIR: &[&str] = &[\n /// `impl` implementation of struct/trait\n const BASE_IMPL: &[&str] = &[\n     label_strs::AssociatedItemDefIds,\n-    label_strs::GenericsOfItem,\n+    label_strs::generics_of,\n     label_strs::ImplTraitRef,\n ];\n \n@@ -78,17 +78,17 @@ const BASE_MIR: &[&str] = &[\n /// Note that changing the type of a field does not change the type of the struct or enum, but\n /// adding/removing fields or changing a fields name or visibility does.\n const BASE_STRUCT: &[&str] = &[\n-    label_strs::GenericsOfItem,\n-    label_strs::PredicatesOfItem,\n-    label_strs::TypeOf,\n+    label_strs::generics_of,\n+    label_strs::predicates_of,\n+    label_strs::type_of,\n ];\n \n /// Trait definition `DepNode`s.\n const BASE_TRAIT_DEF: &[&str] = &[\n     label_strs::AssociatedItemDefIds,\n-    label_strs::GenericsOfItem,\n+    label_strs::generics_of,\n     label_strs::ObjectSafety,\n-    label_strs::PredicatesOfItem,\n+    label_strs::predicates_of,\n     label_strs::SpecializationGraph,\n     label_strs::TraitDefOfItem,\n     label_strs::TraitImpls,\n@@ -179,7 +179,7 @@ const LABELS_TRAIT: &[&[&str]] = &[\n // Fields are kind of separate from their containers, as they can change independently from\n // them. We should at least check\n //\n-//     TypeOf for these.\n+//     type_of for these.\n \n type Labels = FxHashSet<String>;\n "}, {"sha": "75ce8641b1091c654e2792bdabceface2a5c4f6c", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -1,7 +1,7 @@\n use proc_macro::TokenStream;\n use proc_macro2::Span;\n use syn::{\n-    Token, Ident, Type, Attribute, ReturnType, Expr,\n+    Token, Ident, Type, Attribute, ReturnType, Expr, Block,\n     braced, parenthesized, parse_macro_input,\n };\n use syn::parse::{Result, Parse, ParseStream};\n@@ -25,6 +25,7 @@ impl Parse for IdentOrWild {\n enum QueryAttribute {\n     Desc(Option<Ident>, Punctuated<Expr, Token![,]>),\n     Cache(Option<Ident>, Expr),\n+    LoadCached(Ident, Ident, Block),\n     FatalCycle,\n }\n \n@@ -63,6 +64,17 @@ impl Parse for QueryAttribute {\n                 panic!(\"unexpected tokens in block\");\n             };\n             Ok(QueryAttribute::Cache(tcx, expr))\n+        } else if attr == \"load_cached\" {\n+            let args;\n+            parenthesized!(args in input);\n+            let tcx = args.parse()?;\n+            args.parse::<Token![,]>()?;\n+            let id = args.parse()?;\n+            if !args.is_empty() {\n+                panic!(\"unexpected tokens in arguments\");\n+            };\n+            let block = input.parse()?;\n+            Ok(QueryAttribute::LoadCached(tcx, id, block))\n         } else if attr == \"fatal_cycle\" {\n             Ok(QueryAttribute::FatalCycle)\n         } else {\n@@ -153,22 +165,6 @@ impl Parse for Group {\n     }\n }\n \n-fn camel_case(string: &str) -> String {\n-    let mut pos = vec![0];\n-    for (i, c) in string.chars().enumerate() {\n-        if c == '_' {\n-            pos.push(i + 1);\n-        }\n-    }\n-    string.chars().enumerate().filter(|c| c.1 != '_').flat_map(|(i, c)| {\n-        if pos.contains(&i) {\n-            c.to_uppercase().collect::<Vec<char>>()\n-        } else {\n-            vec![c]\n-        }\n-    }).collect()\n-}\n-\n pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let groups = parse_macro_input!(input as List<Group>);\n \n@@ -181,9 +177,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         let mut group_stream = quote! {};\n         for query in &group.queries.0 {\n             let name = &query.name;\n-            let dep_node_name = Ident::new(\n-                &camel_case(&name.to_string()),\n-                name.span());\n             let arg = &query.arg;\n             let key = &query.key.0;\n             let result_full = &query.result;\n@@ -192,35 +185,60 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 _ => quote! { #result_full },\n             };\n \n+            let load_cached = query.attrs.0.iter().find_map(|attr| match attr {\n+                QueryAttribute::LoadCached(tcx, id, block) => Some((tcx, id, block)),\n+                _ => None,\n+            });\n+\n             // Find out if we should cache the query on disk\n             let cache = query.attrs.0.iter().find_map(|attr| match attr {\n                 QueryAttribute::Cache(tcx, expr) => Some((tcx, expr)),\n                 _ => None,\n             }).map(|(tcx, expr)| {\n+                let try_load_from_disk = if let Some((tcx, id, block)) = load_cached {\n+                    quote! {\n+                        #[inline]\n+                        fn try_load_from_disk(\n+                            #tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                            #id: SerializedDepNodeIndex\n+                        ) -> Option<Self::Value> {\n+                            #block\n+                        }\n+                    }\n+                } else {\n+                    quote! {\n+                        #[inline]\n+                        fn try_load_from_disk(\n+                            tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                            id: SerializedDepNodeIndex\n+                        ) -> Option<Self::Value> {\n+                            tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n+                        }\n+                    }\n+                };\n+\n                 let tcx = tcx.as_ref().map(|t| quote! { #t }).unwrap_or(quote! { _ });\n                 quote! {\n                     #[inline]\n                     fn cache_on_disk(#tcx: TyCtxt<'_, 'tcx, 'tcx>, #key: Self::Key) -> bool {\n                         #expr\n                     }\n \n-                    #[inline]\n-                    fn try_load_from_disk(\n-                        tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-                        id: SerializedDepNodeIndex\n-                    ) -> Option<Self::Value> {\n-                        tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n-                    }\n+                    #try_load_from_disk\n                 }\n             });\n \n+            if cache.is_none() && load_cached.is_some() {\n+                panic!(\"load_cached modifier on query `{}` without a cache modifier\", name);\n+            }\n+\n             let fatal_cycle = query.attrs.0.iter().find_map(|attr| match attr {\n                 QueryAttribute::FatalCycle => Some(()),\n                 _ => None,\n             }).map(|_| quote! { fatal_cycle }).unwrap_or(quote! {});\n \n             group_stream.extend(quote! {\n-                [#fatal_cycle] fn #name: #dep_node_name(#arg) #result,\n+                [#fatal_cycle] fn #name: #name(#arg) #result,\n             });\n \n             let desc = query.attrs.0.iter().find_map(|attr| match attr {\n@@ -251,10 +269,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             }\n \n             dep_node_def_stream.extend(quote! {\n-                [] #dep_node_name(#arg),\n+                [] #name(#arg),\n             });\n             dep_node_force_stream.extend(quote! {\n-                DepKind::#dep_node_name => {\n+                DepKind::#name => {\n                     if let Some(key) = RecoverKey::recover($tcx, $dep_node) {\n                         force_ex!($tcx, #name, key);\n                     } else {"}, {"sha": "516276a49ea8f3f9ae606d709e5cac0690aef0cd", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -29,7 +29,7 @@ pub const CONST_VISIBILITY: u8 = 0;\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n@@ -39,7 +39,7 @@ const CONST_CHANGE_TYPE_1: u32 = 0;\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n@@ -99,11 +99,11 @@ mod const_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "aa2dc798b81c8f34427a881b73797d7f0871e326", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -42,7 +42,7 @@ enum EnumChangeNameCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n     Variant1,\n@@ -59,7 +59,7 @@ enum EnumChangeNameTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n@@ -76,7 +76,7 @@ enum EnumChangeNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n@@ -109,7 +109,7 @@ enum EnumChangeValueCStyleVariant1 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n@@ -125,7 +125,7 @@ enum EnumAddCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddCStyleVariant {\n     Variant1,\n@@ -142,7 +142,7 @@ enum EnumRemoveCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n@@ -157,7 +157,7 @@ enum EnumAddTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n@@ -174,7 +174,7 @@ enum EnumRemoveTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n@@ -189,7 +189,7 @@ enum EnumAddStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddStructStyleVariant {\n     Variant1,\n@@ -206,7 +206,7 @@ enum EnumRemoveStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n@@ -257,7 +257,7 @@ enum EnumChangeFieldNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, c: u32 },\n@@ -289,7 +289,7 @@ enum EnumChangeFieldOrderStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { b: f32, a: u32 },\n@@ -304,7 +304,7 @@ enum EnumAddFieldTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32, u32),\n@@ -319,7 +319,7 @@ enum EnumAddFieldStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32, c: u32 },\n@@ -353,7 +353,7 @@ enum EnumAddReprC {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[repr(C)]\n enum EnumAddReprC {\n@@ -402,7 +402,7 @@ enum EnumChangeNameOfLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameOfLifetimeParameter<'b> {\n     Variant1(&'b u32),\n@@ -418,7 +418,7 @@ enum EnumAddLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameter<'a, 'b> {\n     Variant1(&'a u32),\n@@ -435,7 +435,7 @@ enum EnumAddLifetimeParameterBound<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOf\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n     Variant1(&'a u32),\n@@ -450,7 +450,7 @@ enum EnumAddLifetimeBoundToParameter<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOf\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n     Variant1(T),\n@@ -482,7 +482,7 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOf\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n     Variant1(&'a u32),\n@@ -499,7 +499,7 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOf\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n     Variant1(T),\n@@ -618,7 +618,7 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T: Trait> {\n         Variant1(T)\n@@ -634,7 +634,7 @@ mod change_trait_bound_indirectly_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T> where T: Trait {\n         Variant1(T)"}, {"sha": "fccec704d6356caf4ea08e28a61ce261a1cf908c", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -117,7 +117,7 @@ pub fn type_parameter() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOf, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_parameter<T>() {}\n \n@@ -128,7 +128,7 @@ pub fn type_parameter<T>() {}\n pub fn lifetime_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, GenericsOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, generics_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_parameter<'a>() {}\n \n@@ -139,7 +139,7 @@ pub fn lifetime_parameter<'a>() {}\n pub fn trait_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn trait_bound<T: Eq>() {}\n \n@@ -150,7 +150,7 @@ pub fn trait_bound<T: Eq>() {}\n pub fn builtin_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn builtin_bound<T: Send>() {}\n \n@@ -162,7 +162,7 @@ pub fn lifetime_bound<'a, T>() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOf, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_bound<'a, T: 'a>() {}\n \n@@ -173,7 +173,7 @@ pub fn lifetime_bound<'a, T: 'a>() {}\n pub fn second_trait_bound<T: Eq>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_trait_bound<T: Eq + Clone>() {}\n \n@@ -184,7 +184,7 @@ pub fn second_trait_bound<T: Eq + Clone>() {}\n pub fn second_builtin_bound<T: Send>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_builtin_bound<T: Send + Sized>() {}\n \n@@ -196,7 +196,7 @@ pub fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOf, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n \n@@ -326,7 +326,7 @@ pub mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound<T: Trait>(p: T) {}\n }\n@@ -340,7 +340,7 @@ pub mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound_where<T>(p: T)\n     where"}, {"sha": "ebafd07dbef573bd4517005b724f85c8dcdf479f", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -97,7 +97,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOf,PredicatesOfItem\")]\n+    #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n }\n@@ -334,7 +334,7 @@ impl Foo {\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOf\",\n+        except=\"Hir,HirBody,generics_of,predicates_of,type_of\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n@@ -354,7 +354,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOf,TypeckTables\"\n+        except=\"Hir,HirBody,generics_of,predicates_of,type_of,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n@@ -381,8 +381,8 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `TypeckTables`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,\\\n-                                        TypeOf\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,generics_of,predicates_of,\\\n+                                        type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n }\n@@ -408,7 +408,7 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `TypeckTables`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_type_param_of_method<T: Clone>(&self) { }\n }\n@@ -442,12 +442,12 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,generics_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOf,MirOptimized,MirBuilt\"\n+        except=\"generics_of,FnSignature,TypeckTables,type_of,MirOptimized,MirBuilt\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }"}, {"sha": "3bee2aca5b6c2f1c11d8c3f83b69cfceba0a29a6", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -74,7 +74,7 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n@@ -84,7 +84,7 @@ static STATIC_CHANGE_TYPE_1: u64 = 0;\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n@@ -144,11 +144,11 @@ mod static_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "8d32e33054ccc15d3831bbed8df9bb577f7127b0", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 126, "deletions": 126, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -26,14 +26,14 @@ pub struct LayoutPacked;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n #[repr(packed)]\n pub struct LayoutPacked;\n \n@@ -43,14 +43,14 @@ struct LayoutC;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n #[repr(C)]\n struct LayoutC;\n \n@@ -63,14 +63,14 @@ struct TupleStructFieldType(i32);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct TupleStructFieldType(\n@@ -86,14 +86,14 @@ struct TupleStructAddField(i32);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct TupleStructAddField(\n     i32,\n     u32\n@@ -108,14 +108,14 @@ struct TupleStructFieldVisibility(char);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct TupleStructFieldVisibility(pub char);\n \n \n@@ -127,14 +127,14 @@ struct RecordStructFieldType { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct RecordStructFieldType {\n@@ -150,14 +150,14 @@ struct RecordStructFieldName { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct RecordStructFieldName { y: f32 }\n \n \n@@ -169,14 +169,14 @@ struct RecordStructAddField { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct RecordStructAddField {\n     x: f32,\n     y: () }\n@@ -190,14 +190,14 @@ struct RecordStructFieldVisibility { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct RecordStructFieldVisibility {\n     pub x: f32\n }\n@@ -211,14 +211,14 @@ struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n \n \n@@ -230,14 +230,14 @@ struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddLifetimeParameterBound<'a, 'b: 'a>(\n     &'a f32,\n     &'b f64\n@@ -249,14 +249,14 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n     &'a f32,\n     &'b f64)\n@@ -271,14 +271,14 @@ struct AddTypeParameter<T1>(T1, T1);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddTypeParameter<T1, T2>(\n      // The field contains the parent's Generics, so it's dirty even though its\n      // type hasn't changed.\n@@ -295,14 +295,14 @@ struct AddTypeParameterBound<T>(T);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddTypeParameterBound<T: Send>(\n     T\n );\n@@ -314,14 +314,14 @@ struct AddTypeParameterBoundWhereClause<T>(T);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddTypeParameterBoundWhereClause<T>(\n     T\n ) where T: Sync;\n@@ -334,14 +334,14 @@ struct AddTypeParameterBoundWhereClause<T>(\n // Note: there is no #[cfg(...)], so this is ALWAYS compiled\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n pub struct EmptyStruct;\n \n \n@@ -353,14 +353,14 @@ struct Visibility;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n pub struct Visibility;\n \n struct ReferencedType1;\n@@ -375,14 +375,14 @@ mod tuple_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct TupleStruct(\n         FieldType\n     );\n@@ -398,14 +398,14 @@ mod record_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct RecordStruct {\n         _x: FieldType\n     }\n@@ -426,14 +426,14 @@ mod change_trait_bound_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct Struct<T: Trait>(T);\n }\n \n@@ -446,13 +446,13 @@ mod change_trait_bound_indirectly_in_where_clause {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct Struct<T>(T) where T : Trait;\n }"}, {"sha": "bd6d3a7e56fc38a280e84da4b2688c6e0bd2e6a2", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -24,7 +24,7 @@ struct WontChange {\n mod signatures {\n     use WillChange;\n \n-    #[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR no path\n     #[rustc_then_this_would_need(AssociatedItems)] //~ ERROR no path\n     #[rustc_then_this_would_need(TraitDefOfItem)] //~ ERROR no path\n     trait Bar {\n@@ -42,36 +42,36 @@ mod signatures {\n         WillChange { x: x, y: y }\n     }\n \n-    #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n     impl WillChange {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n         #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn new(x: u32, y: u32) -> WillChange { loop { } }\n     }\n \n-    #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n     impl WillChange {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n         #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn method(&self, x: u32) { }\n     }\n \n     struct WillChanges {\n-        #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n+        #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n         x: WillChange,\n-        #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n+        #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n         y: WillChange\n     }\n \n     // The fields change, not the type itself.\n-    #[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR no path\n     fn indirect(x: WillChanges) { }\n }\n \n mod invalid_signatures {\n     use WontChange;\n \n-    #[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR no path\n     trait A {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path\n         fn do_something_else_twice(x: WontChange);"}, {"sha": "7aa4251752e5ca46075e4dbe426368bbdf386b69", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -1,8 +1,8 @@\n-error: no path from `WillChange` to `TypeOfItem`\n+error: no path from `WillChange` to `type_of`\n   --> $DIR/dep-graph-struct-signature.rs:27:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `AssociatedItems`\n   --> $DIR/dep-graph-struct-signature.rs:28:5\n@@ -43,38 +43,38 @@ LL |     #[rustc_then_this_would_need(TypeckTables)]\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:45:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:52:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:60:9\n    |\n-LL |         #[rustc_then_this_would_need(TypeOfItem)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_then_this_would_need(type_of)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:62:9\n    |\n-LL |         #[rustc_then_this_would_need(TypeOfItem)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_then_this_would_need(type_of)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `WillChange` to `TypeOfItem`\n+error: no path from `WillChange` to `type_of`\n   --> $DIR/dep-graph-struct-signature.rs:67:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `WillChange` to `TypeOfItem`\n+error: no path from `WillChange` to `type_of`\n   --> $DIR/dep-graph-struct-signature.rs:74:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `FnSignature`\n   --> $DIR/dep-graph-struct-signature.rs:80:5"}, {"sha": "5621284fb18b2ec24c45ef536fc52e1a77072f79", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -14,38 +14,38 @@ type TypeAlias = u32;\n \n // The type alias directly affects the type of the field,\n // not the enclosing struct:\n-#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n struct Struct {\n-    #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n     x: TypeAlias,\n     y: u32\n }\n \n-#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n enum Enum {\n     Variant1 {\n-        #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n+        #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n         t: TypeAlias\n     },\n     Variant2(i32)\n }\n \n-#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n trait Trait {\n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n     fn method(&self, _: TypeAlias);\n }\n \n struct SomeType;\n \n-#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n impl SomeType {\n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     fn method(&self, _: TypeAlias) {}\n }\n \n-#[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n+#[rustc_then_this_would_need(type_of)] //~ ERROR OK\n type TypeAlias2 = TypeAlias;\n \n #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK"}, {"sha": "520c2a5ed2182f9ec0eafead5bdba9493726656c", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e9d03fd66f2fa0eb04b5381f491d6139fab94ff/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr?ref=9e9d03fd66f2fa0eb04b5381f491d6139fab94ff", "patch": "@@ -1,44 +1,44 @@\n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:17:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:19:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:24:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:27:9\n    |\n-LL |         #[rustc_then_this_would_need(TypeOfItem)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_then_this_would_need(type_of)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:33:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:41:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:48:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:51:1"}]}