{"sha": "7c80b6967ace2b669dc921e67d637c0d546318a9", "node_id": "C_kwDOAAsO6NoAKDdjODBiNjk2N2FjZTJiNjY5ZGM5MjFlNjdkNjM3YzBkNTQ2MzE4YTk", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-10-29T15:51:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-29T15:51:38Z"}, "message": "Merge pull request #311 from rust-lang/alias\n\nSpecify aliases in one place, and make it more uniform which are defined", "tree": {"sha": "832b896fdf705801e773af98b96f08acdef06504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/832b896fdf705801e773af98b96f08acdef06504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c80b6967ace2b669dc921e67d637c0d546318a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXUwKCRBK7hj4Ov3rIwAAHsYIAGuUxotcDXogq/4kCRnUxOvT\nyr5fOKIiZ8PBbnmpXqxk+7C/K+GuRNXLpa+ykGgCeHnFHOypHFW0cnon3TZbtgsU\n/ycAaJ0mueC+eFJvUfW/mWMyN7htmLPSIElmfq5basml4uliNUffuRG25ThQNciV\nUc41c1lkDouNbdbOhfLRrut8dZ7yYOOWCiipnVjPaEW5HdQW7A2emYOFJ/2J1S01\nKRKpFZpnoqrILaOAu+U0j58ZSgGJhrla9hHboZ4hs2eN+cVpY5yQ00FqVWj1Fw5E\nJ40j0ejW19iOKIT0kJSL6nR9M3qHe9toLQWMfQ2q0ttBGzmUtVYOXBunkwbAEq0=\n=G7Xe\n-----END PGP SIGNATURE-----\n", "payload": "tree 832b896fdf705801e773af98b96f08acdef06504\nparent aad8f0aba586c209a7bbc1678d5115cc66c785b4\nparent 402b50a2728ec4dd9a6da2e57b25cce3ffb48f06\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1667058698 -0400\ncommitter GitHub <noreply@github.com> 1667058698 -0400\n\nMerge pull request #311 from rust-lang/alias\n\nSpecify aliases in one place, and make it more uniform which are defined"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c80b6967ace2b669dc921e67d637c0d546318a9", "html_url": "https://github.com/rust-lang/rust/commit/7c80b6967ace2b669dc921e67d637c0d546318a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c80b6967ace2b669dc921e67d637c0d546318a9/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad8f0aba586c209a7bbc1678d5115cc66c785b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad8f0aba586c209a7bbc1678d5115cc66c785b4", "html_url": "https://github.com/rust-lang/rust/commit/aad8f0aba586c209a7bbc1678d5115cc66c785b4"}, {"sha": "402b50a2728ec4dd9a6da2e57b25cce3ffb48f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/402b50a2728ec4dd9a6da2e57b25cce3ffb48f06", "html_url": "https://github.com/rust-lang/rust/commit/402b50a2728ec4dd9a6da2e57b25cce3ffb48f06"}], "stats": {"total": 513, "additions": 229, "deletions": 284}, "files": [{"sha": "23f121c46197c58d39b851015256112469943253", "filename": "crates/core_simd/src/alias.rs", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Falias.rs?ref=7c80b6967ace2b669dc921e67d637c0d546318a9", "patch": "@@ -0,0 +1,227 @@\n+macro_rules! number {\n+    { 1 } => { \"one\" };\n+    { 2 } => { \"two\" };\n+    { 4 } => { \"four\" };\n+    { 8 } => { \"eight\" };\n+    { $x:literal } => { stringify!($x) };\n+}\n+\n+macro_rules! plural {\n+    { 1 } => { \"\" };\n+    { $x:literal } => { \"s\" };\n+}\n+\n+macro_rules! alias {\n+    {\n+        $(\n+            $element_ty:ty = {\n+                $($alias:ident $num_elements:tt)*\n+            }\n+        )*\n+    } => {\n+        $(\n+            $(\n+            #[doc = concat!(\"A SIMD vector with \", number!($num_elements), \" element\", plural!($num_elements), \" of type [`\", stringify!($element_ty), \"`].\")]\n+            #[allow(non_camel_case_types)]\n+            pub type $alias = $crate::simd::Simd<$element_ty, $num_elements>;\n+            )*\n+        )*\n+    }\n+}\n+\n+macro_rules! mask_alias {\n+    {\n+        $(\n+            $element_ty:ty : $size:literal = {\n+                $($alias:ident $num_elements:tt)*\n+            }\n+        )*\n+    } => {\n+        $(\n+            $(\n+            #[doc = concat!(\"A SIMD mask with \", number!($num_elements), \" element\", plural!($num_elements), \" for vectors with \", $size, \" element types.\")]\n+            ///\n+            #[doc = concat!(\n+                \"The layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to `[\",\n+                stringify!($element_ty), \"; \", $num_elements, \"]`.\"\n+            )]\n+            #[allow(non_camel_case_types)]\n+            pub type $alias = $crate::simd::Mask<$element_ty, $num_elements>;\n+            )*\n+        )*\n+    }\n+}\n+\n+alias! {\n+    i8 = {\n+        i8x1 1\n+        i8x2 2\n+        i8x4 4\n+        i8x8 8\n+        i8x16 16\n+        i8x32 32\n+        i8x64 64\n+    }\n+\n+    i16 = {\n+        i16x1 1\n+        i16x2 2\n+        i16x4 4\n+        i16x8 8\n+        i16x16 16\n+        i16x32 32\n+        i16x64 64\n+    }\n+\n+    i32 = {\n+        i32x1 1\n+        i32x2 2\n+        i32x4 4\n+        i32x8 8\n+        i32x16 16\n+        i32x32 32\n+        i32x64 64\n+    }\n+\n+    i64 = {\n+        i64x1 1\n+        i64x2 2\n+        i64x4 4\n+        i64x8 8\n+        i64x16 16\n+        i64x32 32\n+        i64x64 64\n+    }\n+\n+    isize = {\n+        isizex1 1\n+        isizex2 2\n+        isizex4 4\n+        isizex8 8\n+        isizex16 16\n+        isizex32 32\n+        isizex64 64\n+    }\n+\n+    u8 = {\n+        u8x1 1\n+        u8x2 2\n+        u8x4 4\n+        u8x8 8\n+        u8x16 16\n+        u8x32 32\n+        u8x64 64\n+    }\n+\n+    u16 = {\n+        u16x1 1\n+        u16x2 2\n+        u16x4 4\n+        u16x8 8\n+        u16x16 16\n+        u16x32 32\n+        u16x64 64\n+    }\n+\n+    u32 = {\n+        u32x1 1\n+        u32x2 2\n+        u32x4 4\n+        u32x8 8\n+        u32x16 16\n+        u32x32 32\n+        u32x64 64\n+    }\n+\n+    u64 = {\n+        u64x1 1\n+        u64x2 2\n+        u64x4 4\n+        u64x8 8\n+        u64x16 16\n+        u64x32 32\n+        u64x64 64\n+    }\n+\n+    usize = {\n+        usizex1 1\n+        usizex2 2\n+        usizex4 4\n+        usizex8 8\n+        usizex16 16\n+        usizex32 32\n+        usizex64 64\n+    }\n+\n+    f32 = {\n+        f32x1 1\n+        f32x2 2\n+        f32x4 4\n+        f32x8 8\n+        f32x16 16\n+        f32x32 32\n+        f32x64 64\n+    }\n+\n+    f64 = {\n+        f64x1 1\n+        f64x2 2\n+        f64x4 4\n+        f64x8 8\n+        f64x16 16\n+        f64x32 32\n+        f64x64 64\n+    }\n+}\n+\n+mask_alias! {\n+    i8 : \"8-bit\" = {\n+        mask8x1 1\n+        mask8x2 2\n+        mask8x4 4\n+        mask8x8 8\n+        mask8x16 16\n+        mask8x32 32\n+        mask8x64 64\n+    }\n+\n+    i16 : \"16-bit\" = {\n+        mask16x1 1\n+        mask16x2 2\n+        mask16x4 4\n+        mask16x8 8\n+        mask16x16 16\n+        mask16x32 32\n+        mask16x64 64\n+    }\n+\n+    i32 : \"32-bit\" = {\n+        mask32x1 1\n+        mask32x2 2\n+        mask32x4 4\n+        mask32x8 8\n+        mask32x16 16\n+        mask32x32 32\n+        mask32x64 64\n+    }\n+\n+    i64 : \"64-bit\" = {\n+        mask64x1 1\n+        mask64x2 2\n+        mask64x4 4\n+        mask64x8 8\n+        mask64x16 16\n+        mask64x32 32\n+        mask64x64 64\n+    }\n+\n+    isize : \"pointer-sized\" = {\n+        masksizex1 1\n+        masksizex2 2\n+        masksizex4 4\n+        masksizex8 8\n+        masksizex16 16\n+        masksizex32 32\n+        masksizex64 64\n+    }\n+}"}, {"sha": "e58df80fca8b54c87e0bbbf65ffc4c363dfac352", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=7c80b6967ace2b669dc921e67d637c0d546318a9", "patch": "@@ -530,132 +530,6 @@ where\n     }\n }\n \n-/// A mask for SIMD vectors with eight elements of 8 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i8; 8]`.\n-pub type mask8x8 = Mask<i8, 8>;\n-\n-/// A mask for SIMD vectors with 16 elements of 8 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i8; 16]`.\n-pub type mask8x16 = Mask<i8, 16>;\n-\n-/// A mask for SIMD vectors with 32 elements of 8 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i8; 32]`.\n-pub type mask8x32 = Mask<i8, 32>;\n-\n-/// A mask for SIMD vectors with 64 elements of 8 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i8; 64]`.\n-pub type mask8x64 = Mask<i8, 64>;\n-\n-/// A mask for SIMD vectors with four elements of 16 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i16; 4]`.\n-pub type mask16x4 = Mask<i16, 4>;\n-\n-/// A mask for SIMD vectors with eight elements of 16 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i16; 8]`.\n-pub type mask16x8 = Mask<i16, 8>;\n-\n-/// A mask for SIMD vectors with 16 elements of 16 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i16; 16]`.\n-pub type mask16x16 = Mask<i16, 16>;\n-\n-/// A mask for SIMD vectors with 32 elements of 16 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i16; 32]`.\n-pub type mask16x32 = Mask<i16, 32>;\n-\n-/// A mask for SIMD vectors with two elements of 32 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i32; 2]`.\n-pub type mask32x2 = Mask<i32, 2>;\n-\n-/// A mask for SIMD vectors with four elements of 32 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i32; 4]`.\n-pub type mask32x4 = Mask<i32, 4>;\n-\n-/// A mask for SIMD vectors with eight elements of 32 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i32; 8]`.\n-pub type mask32x8 = Mask<i32, 8>;\n-\n-/// A mask for SIMD vectors with 16 elements of 32 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i32; 16]`.\n-pub type mask32x16 = Mask<i32, 16>;\n-\n-/// A mask for SIMD vectors with two elements of 64 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i64; 2]`.\n-pub type mask64x2 = Mask<i64, 2>;\n-\n-/// A mask for SIMD vectors with four elements of 64 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i64; 4]`.\n-pub type mask64x4 = Mask<i64, 4>;\n-\n-/// A mask for SIMD vectors with eight elements of 64 bits.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[i64; 8]`.\n-pub type mask64x8 = Mask<i64, 8>;\n-\n-/// A mask for SIMD vectors with two elements of pointer width.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[isize; 2]`.\n-pub type masksizex2 = Mask<isize, 2>;\n-\n-/// A mask for SIMD vectors with four elements of pointer width.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[isize; 4]`.\n-pub type masksizex4 = Mask<isize, 4>;\n-\n-/// A mask for SIMD vectors with eight elements of pointer width.\n-///\n-/// The layout of this type is unspecified, and may change between platforms\n-/// and/or Rust versions, and code should not assume that it is equivalent to\n-/// `[isize; 8]`.\n-pub type masksizex8 = Mask<isize, 8>;\n-\n macro_rules! impl_from {\n     { $from:ty  => $($to:ty),* } => {\n         $("}, {"sha": "9909d639874235b6327511429bb0734c98a7107c", "filename": "crates/core_simd/src/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmod.rs?ref=7c80b6967ace2b669dc921e67d637c0d546318a9", "patch": "@@ -6,6 +6,7 @@ pub(crate) mod intrinsics;\n #[cfg(feature = \"generic_const_exprs\")]\n mod to_bytes;\n \n+mod alias;\n mod elements;\n mod eq;\n mod fmt;\n@@ -22,6 +23,7 @@ mod vendor;\n pub mod simd {\n     pub(crate) use crate::core_simd::intrinsics;\n \n+    pub use crate::core_simd::alias::*;\n     pub use crate::core_simd::elements::*;\n     pub use crate::core_simd::eq::*;\n     pub use crate::core_simd::lane_count::{LaneCount, SupportedLaneCount};"}, {"sha": "7f0e8350cf8664f5e98dfbbc679e5d8973668ac5", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c80b6967ace2b669dc921e67d637c0d546318a9/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=7c80b6967ace2b669dc921e67d637c0d546318a9", "patch": "@@ -1,11 +1,3 @@\n-mod float;\n-mod int;\n-mod uint;\n-\n-pub use float::*;\n-pub use int::*;\n-pub use uint::*;\n-\n // Vectors of pointers are not for public use at the current time.\n pub(crate) mod ptr;\n "}, {"sha": "f836c99b1e2dc41564f0e85ad648f5ad2d476c04", "filename": "crates/core_simd/src/vector/float.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aad8f0aba586c209a7bbc1678d5115cc66c785b4/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad8f0aba586c209a7bbc1678d5115cc66c785b4/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=aad8f0aba586c209a7bbc1678d5115cc66c785b4", "patch": "@@ -1,24 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-use crate::simd::Simd;\n-\n-/// A 64-bit SIMD vector with two elements of type `f32`.\n-pub type f32x2 = Simd<f32, 2>;\n-\n-/// A 128-bit SIMD vector with four elements of type `f32`.\n-pub type f32x4 = Simd<f32, 4>;\n-\n-/// A 256-bit SIMD vector with eight elements of type `f32`.\n-pub type f32x8 = Simd<f32, 8>;\n-\n-/// A 512-bit SIMD vector with 16 elements of type `f32`.\n-pub type f32x16 = Simd<f32, 16>;\n-\n-/// A 128-bit SIMD vector with two elements of type `f64`.\n-pub type f64x2 = Simd<f64, 2>;\n-\n-/// A 256-bit SIMD vector with four elements of type `f64`.\n-pub type f64x4 = Simd<f64, 4>;\n-\n-/// A 512-bit SIMD vector with eight elements of type `f64`.\n-pub type f64x8 = Simd<f64, 8>;"}, {"sha": "20e56c7dc6443bdca6b8922dc3659e4f554c665e", "filename": "crates/core_simd/src/vector/int.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/aad8f0aba586c209a7bbc1678d5115cc66c785b4/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad8f0aba586c209a7bbc1678d5115cc66c785b4/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=aad8f0aba586c209a7bbc1678d5115cc66c785b4", "patch": "@@ -1,63 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-use crate::simd::Simd;\n-\n-/// A SIMD vector with two elements of type `isize`.\n-pub type isizex2 = Simd<isize, 2>;\n-\n-/// A SIMD vector with four elements of type `isize`.\n-pub type isizex4 = Simd<isize, 4>;\n-\n-/// A SIMD vector with eight elements of type `isize`.\n-pub type isizex8 = Simd<isize, 8>;\n-\n-/// A 32-bit SIMD vector with two elements of type `i16`.\n-pub type i16x2 = Simd<i16, 2>;\n-\n-/// A 64-bit SIMD vector with four elements of type `i16`.\n-pub type i16x4 = Simd<i16, 4>;\n-\n-/// A 128-bit SIMD vector with eight elements of type `i16`.\n-pub type i16x8 = Simd<i16, 8>;\n-\n-/// A 256-bit SIMD vector with 16 elements of type `i16`.\n-pub type i16x16 = Simd<i16, 16>;\n-\n-/// A 512-bit SIMD vector with 32 elements of type `i16`.\n-pub type i16x32 = Simd<i16, 32>;\n-\n-/// A 64-bit SIMD vector with two elements of type `i32`.\n-pub type i32x2 = Simd<i32, 2>;\n-\n-/// A 128-bit SIMD vector with four elements of type `i32`.\n-pub type i32x4 = Simd<i32, 4>;\n-\n-/// A 256-bit SIMD vector with eight elements of type `i32`.\n-pub type i32x8 = Simd<i32, 8>;\n-\n-/// A 512-bit SIMD vector with 16 elements of type `i32`.\n-pub type i32x16 = Simd<i32, 16>;\n-\n-/// A 128-bit SIMD vector with two elements of type `i64`.\n-pub type i64x2 = Simd<i64, 2>;\n-\n-/// A 256-bit SIMD vector with four elements of type `i64`.\n-pub type i64x4 = Simd<i64, 4>;\n-\n-/// A 512-bit SIMD vector with eight elements of type `i64`.\n-pub type i64x8 = Simd<i64, 8>;\n-\n-/// A 32-bit SIMD vector with four elements of type `i8`.\n-pub type i8x4 = Simd<i8, 4>;\n-\n-/// A 64-bit SIMD vector with eight elements of type `i8`.\n-pub type i8x8 = Simd<i8, 8>;\n-\n-/// A 128-bit SIMD vector with 16 elements of type `i8`.\n-pub type i8x16 = Simd<i8, 16>;\n-\n-/// A 256-bit SIMD vector with 32 elements of type `i8`.\n-pub type i8x32 = Simd<i8, 32>;\n-\n-/// A 512-bit SIMD vector with 64 elements of type `i8`.\n-pub type i8x64 = Simd<i8, 64>;"}, {"sha": "b4a69c44363f1d5a0d9297ccc06504f1ea65ac78", "filename": "crates/core_simd/src/vector/uint.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/aad8f0aba586c209a7bbc1678d5115cc66c785b4/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad8f0aba586c209a7bbc1678d5115cc66c785b4/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=aad8f0aba586c209a7bbc1678d5115cc66c785b4", "patch": "@@ -1,63 +0,0 @@\n-#![allow(non_camel_case_types)]\n-\n-use crate::simd::Simd;\n-\n-/// A SIMD vector with two elements of type `usize`.\n-pub type usizex2 = Simd<usize, 2>;\n-\n-/// A SIMD vector with four elements of type `usize`.\n-pub type usizex4 = Simd<usize, 4>;\n-\n-/// A SIMD vector with eight elements of type `usize`.\n-pub type usizex8 = Simd<usize, 8>;\n-\n-/// A 32-bit SIMD vector with two elements of type `u16`.\n-pub type u16x2 = Simd<u16, 2>;\n-\n-/// A 64-bit SIMD vector with four elements of type `u16`.\n-pub type u16x4 = Simd<u16, 4>;\n-\n-/// A 128-bit SIMD vector with eight elements of type `u16`.\n-pub type u16x8 = Simd<u16, 8>;\n-\n-/// A 256-bit SIMD vector with 16 elements of type `u16`.\n-pub type u16x16 = Simd<u16, 16>;\n-\n-/// A 512-bit SIMD vector with 32 elements of type `u16`.\n-pub type u16x32 = Simd<u16, 32>;\n-\n-/// A 64-bit SIMD vector with two elements of type `u32`.\n-pub type u32x2 = Simd<u32, 2>;\n-\n-/// A 128-bit SIMD vector with four elements of type `u32`.\n-pub type u32x4 = Simd<u32, 4>;\n-\n-/// A 256-bit SIMD vector with eight elements of type `u32`.\n-pub type u32x8 = Simd<u32, 8>;\n-\n-/// A 512-bit SIMD vector with 16 elements of type `u32`.\n-pub type u32x16 = Simd<u32, 16>;\n-\n-/// A 128-bit SIMD vector with two elements of type `u64`.\n-pub type u64x2 = Simd<u64, 2>;\n-\n-/// A 256-bit SIMD vector with four elements of type `u64`.\n-pub type u64x4 = Simd<u64, 4>;\n-\n-/// A 512-bit SIMD vector with eight elements of type `u64`.\n-pub type u64x8 = Simd<u64, 8>;\n-\n-/// A 32-bit SIMD vector with four elements of type `u8`.\n-pub type u8x4 = Simd<u8, 4>;\n-\n-/// A 64-bit SIMD vector with eight elements of type `u8`.\n-pub type u8x8 = Simd<u8, 8>;\n-\n-/// A 128-bit SIMD vector with 16 elements of type `u8`.\n-pub type u8x16 = Simd<u8, 16>;\n-\n-/// A 256-bit SIMD vector with 32 elements of type `u8`.\n-pub type u8x32 = Simd<u8, 32>;\n-\n-/// A 512-bit SIMD vector with 64 elements of type `u8`.\n-pub type u8x64 = Simd<u8, 64>;"}]}