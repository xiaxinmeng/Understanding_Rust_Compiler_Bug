{"sha": "7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "node_id": "C_kwDOAAsO6NoAKDdlYjJkNGU3ZDBlMDcwZWFmMTU5NTVmYzM3NjQ5OGQ5ZTVmYTllNzg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-09T22:25:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T02:06:19Z"}, "message": "Generalize call suggestion for unsatisfied predicate", "tree": {"sha": "a09f04dad464af25f3ebe306344a97fa08ac3e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a09f04dad464af25f3ebe306344a97fa08ac3e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "html_url": "https://github.com/rust-lang/rust/commit/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5336a969ca549ba72f91b14b50b9830cdda49b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5336a969ca549ba72f91b14b50b9830cdda49b6", "html_url": "https://github.com/rust-lang/rust/commit/f5336a969ca549ba72f91b14b50b9830cdda49b6"}], "stats": {"total": 248, "additions": 174, "deletions": 74}, "files": [{"sha": "088de1979babe5cf7a4423276d42bd8b99c1bfdc", "filename": "compiler/rustc_hir_analysis/src/check/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -1,6 +1,6 @@\n use super::method::probe::{IsSuggestion, Mode, ProbeScope};\n use super::method::MethodCallee;\n-use super::{DefIdOrName, Expectation, FnCtxt, TupleArgumentsFlag};\n+use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n use rustc_ast::util::parser::PREC_POSTFIX;\n@@ -27,6 +27,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi;\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n+use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n use std::iter;"}, {"sha": "8c4fe75878fbb281b4ca140812c8a4fa30faca95", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -2,7 +2,6 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n \n-use hir::def_id::DefId;\n use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX};\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n@@ -19,6 +18,7 @@ use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n+use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -1209,8 +1209,3 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n-\n-pub enum DefIdOrName {\n-    DefId(DefId),\n-    Name(&'static str),\n-}"}, {"sha": "b7e6a564f3953f5c113706bf4b9d5bae37f600f8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -2796,3 +2796,8 @@ impl<'tcx> ty::TypeVisitor<'tcx> for HasNumericInferVisitor {\n         }\n     }\n }\n+\n+pub enum DefIdOrName {\n+    DefId(DefId),\n+    Name(&'static str),\n+}"}, {"sha": "98e32e2ce8595c40b30b1cd02f7d3ab41b0a9668", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 118, "deletions": 46, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -1,11 +1,13 @@\n use super::{\n-    Obligation, ObligationCause, ObligationCauseCode, PredicateObligation, SelectionContext,\n+    DefIdOrName, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation,\n+    SelectionContext,\n };\n \n use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n use crate::traits::normalize_to;\n \n+use hir::def::CtorOf;\n use hir::HirId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -812,28 +814,87 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n-        // Skipping binder here, remapping below\n-        let self_ty = trait_pred.self_ty().skip_binder();\n+        if let ty::PredicateKind::Trait(trait_pred) = obligation.predicate.kind().skip_binder()\n+            && Some(trait_pred.def_id()) == self.tcx.lang_items().sized_trait()\n+        {\n+            // Don't suggest calling to turn an unsized type into a sized type\n+            return false;\n+        }\n \n-        let (def_id, inputs, output, kind) = match *self_ty.kind() {\n-            ty::Closure(def_id, substs) => {\n-                let sig = substs.as_closure().sig();\n-                (def_id, sig.inputs().map_bound(|inputs| &inputs[1..]), sig.output(), \"closure\")\n+        // This is duplicated from `extract_callable_info` in typeck, which\n+        // relies on autoderef, so we can't use it here.\n+        let found = trait_pred.self_ty().skip_binder().peel_refs();\n+        let Some((def_id_or_name, output, inputs)) = (match *found.kind()\n+        {\n+            ty::FnPtr(fn_sig) => {\n+                Some((DefIdOrName::Name(\"function pointer\"), fn_sig.output(), fn_sig.inputs()))\n             }\n             ty::FnDef(def_id, _) => {\n-                let sig = self_ty.fn_sig(self.tcx);\n-                (\n-                    def_id,\n-                    sig.inputs(),\n-                    sig.output(),\n-                    match self.tcx.def_kind(def_id) {\n-                        DefKind::Ctor(..) => \"constructor\",\n-                        _ => \"function\",\n-                    },\n-                )\n+                let fn_sig = found.fn_sig(self.tcx);\n+                Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs()))\n             }\n-            _ => return false,\n-        };\n+            ty::Closure(def_id, substs) => {\n+                let fn_sig = substs.as_closure().sig();\n+                Some((\n+                    DefIdOrName::DefId(def_id),\n+                    fn_sig.output(),\n+                    fn_sig.inputs().map_bound(|inputs| &inputs[1..]),\n+                ))\n+            }\n+            ty::Opaque(def_id, substs) => {\n+                self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n+                    if let ty::PredicateKind::Projection(proj) = pred.kind().skip_binder()\n+                    && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    // args tuple will always be substs[1]\n+                    && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n+                    {\n+                        Some((\n+                            DefIdOrName::DefId(def_id),\n+                            pred.kind().rebind(proj.term.ty().unwrap()),\n+                            pred.kind().rebind(args.as_slice()),\n+                        ))\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            ty::Dynamic(data, _, ty::Dyn) => {\n+                data.iter().find_map(|pred| {\n+                    if let ty::ExistentialPredicate::Projection(proj) = pred.skip_binder()\n+                    && Some(proj.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    // for existential projection, substs are shifted over by 1\n+                    && let ty::Tuple(args) = proj.substs.type_at(0).kind()\n+                    {\n+                        Some((\n+                            DefIdOrName::Name(\"trait object\"),\n+                            pred.rebind(proj.term.ty().unwrap()),\n+                            pred.rebind(args.as_slice()),\n+                        ))\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            ty::Param(_) => {\n+                obligation.param_env.caller_bounds().iter().find_map(|pred| {\n+                    if let ty::PredicateKind::Projection(proj) = pred.kind().skip_binder()\n+                    && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    && proj.projection_ty.self_ty() == found\n+                    // args tuple will always be substs[1]\n+                    && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n+                    {\n+                        Some((\n+                            DefIdOrName::Name(\"type parameter\"),\n+                            pred.kind().rebind(proj.term.ty().unwrap()),\n+                            pred.kind().rebind(args.as_slice()),\n+                        ))\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            _ => None,\n+        }) else { return false; };\n         let output = self.replace_bound_vars_with_fresh_vars(\n             obligation.cause.span,\n             LateBoundRegionConversionTime::FnCall,\n@@ -859,7 +920,18 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // Get the name of the callable and the arguments to be used in the suggestion.\n         let hir = self.tcx.hir();\n \n-        let msg = format!(\"use parentheses to call the {}\", kind);\n+        let msg = match def_id_or_name {\n+            DefIdOrName::DefId(def_id) => match self.tcx.def_kind(def_id) {\n+                DefKind::Ctor(CtorOf::Struct, _) => {\n+                    \"use parentheses to instantiate this tuple struct\".to_string()\n+                }\n+                DefKind::Ctor(CtorOf::Variant, _) => {\n+                    \"use parentheses to instantiate this tuple variant\".to_string()\n+                }\n+                kind => format!(\"use parentheses to call this {}\", kind.descr(def_id)),\n+            },\n+            DefIdOrName::Name(name) => format!(\"use parentheses to call this {name}\"),\n+        };\n \n         let args = inputs\n             .map(|ty| {\n@@ -872,31 +944,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .collect::<Vec<_>>()\n             .join(\", \");\n \n-        let name = match hir.get_if_local(def_id) {\n-            Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(hir::Closure { fn_decl_span, .. }),\n-                ..\n-            })) => {\n-                err.span_label(*fn_decl_span, \"consider calling this closure\");\n-                let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n-                    return false;\n-                };\n-                name.to_string()\n-            }\n-            Some(hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(..), .. })) => {\n-                err.span_label(ident.span, \"consider calling this function\");\n-                ident.to_string()\n-            }\n-            Some(hir::Node::Ctor(..)) => {\n-                let name = self.tcx.def_path_str(def_id);\n-                err.span_label(\n-                    self.tcx.def_span(def_id),\n-                    format!(\"consider calling the constructor for `{}`\", name),\n-                );\n-                name\n-            }\n-            _ => return false,\n-        };\n         if matches!(obligation.cause.code(), ObligationCauseCode::FunctionArgumentObligation { .. })\n             && obligation.cause.span.can_be_used_for_suggestions()\n         {\n@@ -910,7 +957,32 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 format!(\"({args})\"),\n                 Applicability::HasPlaceholders,\n             );\n-        } else {\n+        } else if let DefIdOrName::DefId(def_id) = def_id_or_name {\n+            let name = match hir.get_if_local(def_id) {\n+                Some(hir::Node::Expr(hir::Expr {\n+                    kind: hir::ExprKind::Closure(hir::Closure { fn_decl_span, .. }),\n+                    ..\n+                })) => {\n+                    err.span_label(*fn_decl_span, \"consider calling this closure\");\n+                    let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n+                        return false;\n+                    };\n+                    name.to_string()\n+                }\n+                Some(hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(..), .. })) => {\n+                    err.span_label(ident.span, \"consider calling this function\");\n+                    ident.to_string()\n+                }\n+                Some(hir::Node::Ctor(..)) => {\n+                    let name = self.tcx.def_path_str(def_id);\n+                    err.span_label(\n+                        self.tcx.def_span(def_id),\n+                        format!(\"consider calling the constructor for `{}`\", name),\n+                    );\n+                    name\n+                }\n+                _ => return false,\n+            };\n             err.help(&format!(\"{msg}: `{name}({args})`\"));\n         }\n         true"}, {"sha": "263a35d9829114aacec90478a2e3e59ec34ad791", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -19,7 +19,7 @@ LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'a> fn(&'a i32) -> &'a i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for fn item `for<'a> fn(&'a i32) -> &'a i32 {foo}`\n-   = help: use parentheses to call the function: `foo(/* &i32 */)`\n+   = help: use parentheses to call this function: `foo(/* &i32 */)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "8ad8273fc2b9b483df2f3fca1bf33ee759cd677e", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `take_const_owned`\n    |\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n    |                                                  ^^^^ required by this bound in `take_const_owned`\n+help: use parentheses to call this type parameter\n+   |\n+LL |     take_const_owned(f());\n+   |                       ++\n help: consider further restricting this bound\n    |\n LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {"}, {"sha": "b30bcfb776c8c415cfd1277644bfac5856eba06a", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -29,7 +29,7 @@ LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for fn item `fn() -> i32 {a}`\n-   = help: use parentheses to call the function: `a()`\n+   = help: use parentheses to call this function: `a()`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "8ed62f854f09636e6ddae724fce92c10f4c1a02d", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `fn() -> impl Future<Output = ()> {foo}` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:10:9\n    |\n-LL | async fn foo() {}\n-   |          --- consider calling this function\n-...\n LL |     bar(foo);\n    |     --- ^^^ `fn() -> impl Future<Output = ()> {foo}` is not a future\n    |     |\n@@ -16,16 +13,14 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n    |                ^^^^^^^^^^^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the function\n+help: use parentheses to call this function\n    |\n LL |     bar(foo());\n    |            ++\n \n error[E0277]: `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n    |\n-LL |     let async_closure = async || ();\n-   |                         -------- consider calling this closure\n LL |     bar(async_closure);\n    |     --- ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]` is not a future\n    |     |\n@@ -38,7 +33,7 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n    |                ^^^^^^^^^^^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the closure\n+help: use parentheses to call this closure\n    |\n LL |     bar(async_closure());\n    |                      ++"}, {"sha": "0e7412807b46553f3068e1e39d5a2817831fa808", "filename": "src/test/ui/suggestions/call-on-unimplemented-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.rs?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     insert_resource(Marker);\n     insert_resource(Time);\n     //~^ ERROR the trait bound `fn(u32) -> Time {Time}: Resource` is not satisfied\n-    //~| HELP use parentheses to call the constructor\n+    //~| HELP use parentheses to instantiate this tuple struct\n }\n \n trait Resource {}"}, {"sha": "48f3366596f6b826079143a2b6a4481ab974c61a", "filename": "src/test/ui/suggestions/call-on-unimplemented-ctor.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -5,16 +5,13 @@ LL |     insert_resource(Time);\n    |     --------------- ^^^^ the trait `Resource` is not implemented for fn item `fn(u32) -> Time {Time}`\n    |     |\n    |     required by a bound introduced by this call\n-...\n-LL | struct Time(u32);\n-   | ----------- consider calling the constructor for `Time`\n    |\n note: required by a bound in `insert_resource`\n   --> $DIR/call-on-unimplemented-ctor.rs:10:23\n    |\n LL | fn insert_resource<R: Resource>(resource: R) {}\n    |                       ^^^^^^^^ required by this bound in `insert_resource`\n-help: use parentheses to call the constructor\n+help: use parentheses to instantiate this tuple struct\n    |\n LL |     insert_resource(Time(/* u32 */));\n    |                         +++++++++++"}, {"sha": "86490c724e0183627edac8e71b62e8a17ccd2eb0", "filename": "src/test/ui/suggestions/call-on-unimplemented-fn-ptr.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.rs?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -0,0 +1,15 @@\n+struct Foo;\n+\n+trait Bar {}\n+\n+impl Bar for Foo {}\n+\n+fn needs_bar<T: Bar>(_: T) {}\n+\n+fn blah(f: fn() -> Foo) {\n+    needs_bar(f);\n+    //~^ ERROR the trait bound `fn() -> Foo: Bar` is not satisfied\n+    //~| HELP use parentheses to call this function pointer\n+}\n+\n+fn main() {}"}, {"sha": "167f7e592a97c362db75e54517122458728f5633", "filename": "src/test/ui/suggestions/call-on-unimplemented-fn-ptr.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.stderr?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `fn() -> Foo: Bar` is not satisfied\n+  --> $DIR/call-on-unimplemented-fn-ptr.rs:10:15\n+   |\n+LL |     needs_bar(f);\n+   |     --------- ^ the trait `Bar` is not implemented for `fn() -> Foo`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `needs_bar`\n+  --> $DIR/call-on-unimplemented-fn-ptr.rs:7:17\n+   |\n+LL | fn needs_bar<T: Bar>(_: T) {}\n+   |                 ^^^ required by this bound in `needs_bar`\n+help: use parentheses to call this function pointer\n+   |\n+LL |     needs_bar(f());\n+   |                ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "955148315baefe01231f163e4b6e8232c4583954", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=7eb2d4e7d0e070eaf15955fc376498d9e5fa9e78", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `fn() -> impl T<O = ()> {foo}: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:9\n    |\n-LL | fn foo() -> impl T<O=()> { S }\n-   |    --- consider calling this function\n-...\n LL |     bar(foo);\n    |     --- ^^^ the trait `T` is not implemented for fn item `fn() -> impl T<O = ()> {foo}`\n    |     |\n@@ -14,16 +11,14 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl T<O=()>) {}\n    |                ^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the function\n+help: use parentheses to call this function\n    |\n LL |     bar(foo());\n    |            ++\n \n error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n    |\n-LL |     let closure = || S;\n-   |                   -- consider calling this closure\n LL |     bar(closure);\n    |     --- ^^^^^^^ the trait `T` is not implemented for closure `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]`\n    |     |\n@@ -34,7 +29,7 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl T<O=()>) {}\n    |                ^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the closure\n+help: use parentheses to call this closure\n    |\n LL |     bar(closure());\n    |                ++"}]}