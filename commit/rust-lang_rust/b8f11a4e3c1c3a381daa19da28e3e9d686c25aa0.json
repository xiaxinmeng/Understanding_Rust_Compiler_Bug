{"sha": "b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZjExYTRlM2MxYzNhMzgxZGFhMTlkYTI4ZTNlOWQ2ODZjMjVhYTA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-14T11:39:07Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-14T11:39:07Z"}, "message": "Format source codes", "tree": {"sha": "3f9ef49d08a54c3938f9bcd0b8f3530a5e175d98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f9ef49d08a54c3938f9bcd0b8f3530a5e175d98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "html_url": "https://github.com/rust-lang/rust/commit/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c06d487712c309b1ff0197916e8148cad23cb0bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06d487712c309b1ff0197916e8148cad23cb0bd", "html_url": "https://github.com/rust-lang/rust/commit/c06d487712c309b1ff0197916e8148cad23cb0bd"}], "stats": {"total": 157, "additions": 79, "deletions": 78}, "files": [{"sha": "e9f84b71e48408b21d7d628cc63fbeef1fc5ec07", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -319,8 +319,8 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> &'a str {\n         } else {\n             &line[opener.trim_right().len()..]\n         }\n-    } else if line.starts_with(\"/* \") || line.starts_with(\"// \") ||\n-               line.starts_with(\"//!\") || line.starts_with(\"///\") ||\n+    } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\") ||\n+               line.starts_with(\"///\") ||\n                line.starts_with(\"** \") || line.starts_with(\"/*!\") ||\n                (line.starts_with(\"/**\") && !line.starts_with(\"/**/\"))\n     {"}, {"sha": "d236448caf539d7b4b73e091c0324e0d6aff0529", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -729,9 +729,10 @@ fn and_one_line(x: Option<String>) -> Option<String> {\n \n fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String> {\n     debug!(\"nop_block_collapse {:?} {}\", block_str, budget);\n-    block_str.map(|block_str| if block_str.starts_with('{') &&\n-        budget >= 2 &&\n-        (block_str[1..].find(|c: char| !c.is_whitespace()).unwrap() == block_str.len() - 2)\n+    block_str.map(|block_str| if block_str.starts_with('{') && budget >= 2 &&\n+        (block_str[1..]\n+             .find(|c: char| !c.is_whitespace())\n+             .unwrap() == block_str.len() - 2)\n     {\n         \"{}\".to_owned()\n     } else {\n@@ -1509,9 +1510,9 @@ impl Rewrite for ast::Arm {\n         let pats_str = format!(\"{}{}\", pats_str, guard_str);\n \n         let (mut extend, body) = match body.node {\n-            ast::ExprKind::Block(ref block) if !is_unsafe_block(block) &&\n-                                                   is_simple_block(block, context.codemap) &&\n-                                                   context.config.wrap_match_arms() => {\n+            ast::ExprKind::Block(ref block)\n+                if !is_unsafe_block(block) && is_simple_block(block, context.codemap) &&\n+                       context.config.wrap_match_arms() => {\n                 if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n                     (false, &**expr)\n                 } else {\n@@ -2539,21 +2540,10 @@ pub fn rewrite_assign_rhs<S: Into<String>>(\n \n             // FIXME: DRY!\n             match (rhs, new_rhs) {\n-                (Some(ref orig_rhs), Some(ref replacement_rhs)) if count_line_breaks(\n-                    orig_rhs,\n-                ) >\n-                                                                       count_line_breaks(\n-                    replacement_rhs,\n-                ) + 1 ||\n-                                                                       (orig_rhs\n-                                                                            .rewrite(context, shape)\n-                                                                            .is_none() &&\n-                                                                            replacement_rhs\n-                                                                                .rewrite(\n-                    context,\n-                    new_shape,\n-                )\n-                                                                                .is_some()) => {\n+                (Some(ref orig_rhs), Some(ref replacement_rhs))\n+                    if count_line_breaks(orig_rhs) > count_line_breaks(replacement_rhs) + 1 ||\n+                           (orig_rhs.rewrite(context, shape).is_none() &&\n+                                replacement_rhs.rewrite(context, new_shape).is_some()) => {\n                     result.push_str(&format!(\"\\n{}\", new_shape.indent.to_string(context.config)));\n                     result.push_str(replacement_rhs);\n                 }"}, {"sha": "a660f287a5b08e987ca86c027ee22d3a8d223b92", "filename": "src/items.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -685,12 +685,12 @@ fn format_impl_ref_and_type(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(unsafety,\n-                            polarity,\n-                            _,\n-                            ref generics,\n-                            ref trait_ref,\n-                            ref self_ty,\n-                            _) = item.node\n+                               polarity,\n+                               _,\n+                               ref generics,\n+                               ref trait_ref,\n+                               ref self_ty,\n+                               _) = item.node\n     {\n         let mut result = String::new();\n \n@@ -942,8 +942,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let has_body = !trait_items.is_empty();\n \n         let where_density = if (context.config.where_density() == Density::Compressed &&\n-                                 (!result.contains('\\n') ||\n-                                      context.config.fn_args_layout() == IndentStyle::Block)) ||\n+                                    (!result.contains('\\n') ||\n+                                         context.config.fn_args_layout() == IndentStyle::Block)) ||\n             (context.config.fn_args_layout() == IndentStyle::Block && result.is_empty()) ||\n             (context.config.where_density() == Density::CompressedIfEmpty && !has_body &&\n                  !result.contains('\\n'))\n@@ -1468,9 +1468,9 @@ impl Rewrite for ast::StructField {\n             Some(ref ty) if ty.contains('\\n') => {\n                 let new_ty = rewrite_type_in_next_line();\n                 match new_ty {\n-                    Some(ref new_ty) if !new_ty.contains('\\n') &&\n-                                            new_ty.len() + type_offset.width() <=\n-                                                context.config.max_width() => {\n+                    Some(ref new_ty)\n+                        if !new_ty.contains('\\n') &&\n+                               new_ty.len() + type_offset.width() <= context.config.max_width() => {\n                         Some(format!(\n                             \"{}\\n{}{}\",\n                             result,\n@@ -2688,7 +2688,8 @@ fn format_generics(\n         let same_line_brace = force_same_line_brace ||\n             (generics.where_clause.predicates.is_empty() && trimmed_last_line_width(&result) == 1);\n         if !same_line_brace &&\n-            (brace_style == BraceStyle::SameLineWhere || brace_style == BraceStyle::AlwaysNextLine)\n+            (brace_style == BraceStyle::SameLineWhere ||\n+                brace_style == BraceStyle::AlwaysNextLine)\n         {\n             result.push('\\n');\n             result.push_str(&offset.block_only().to_string(context.config));"}, {"sha": "5ba273ad2725321970228109e954aa29b87935ba", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -81,7 +81,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n                     if cur_end < cur_start + MIN_STRING {\n                         cur_end = cur_start + max_chars;\n                         while !(punctuation.contains(graphemes[cur_end - 1]) ||\n-                              graphemes[cur_end - 1].trim().is_empty())\n+                                    graphemes[cur_end - 1].trim().is_empty())\n                         {\n                             if cur_end >= graphemes.len() {\n                                 let line = &graphemes[cur_start..].join(\"\");"}, {"sha": "3774df701463287445db2e45397330353a717de3", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -206,9 +206,9 @@ fn rewrite_segment(\n \n     let params = if let Some(ref params) = segment.parameters {\n         match **params {\n-            ast::PathParameters::AngleBracketed(ref data) if !data.lifetimes.is_empty() ||\n-                                                                 !data.types.is_empty() ||\n-                                                                 !data.bindings.is_empty() => {\n+            ast::PathParameters::AngleBracketed(ref data)\n+                if !data.lifetimes.is_empty() || !data.types.is_empty() ||\n+                       !data.bindings.is_empty() => {\n                 let param_list = data.lifetimes\n                     .iter()\n                     .map(SegmentParam::LifeTime)"}, {"sha": "9ed40cc29ee2fece8c1344b612185f5f518eef65", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -546,10 +546,11 @@ impl<'a> FmtVisitor<'a> {\n     fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(source!(self, span).lo);\n         self.failed = match rewrite {\n-            Some(ref s) if s.rewrite(\n-                &self.get_context(),\n-                Shape::indented(self.block_indent, self.config),\n-            ).is_none() => true,\n+            Some(ref s)\n+                if s.rewrite(\n+                    &self.get_context(),\n+                    Shape::indented(self.block_indent, self.config),\n+                ).is_none() => true,\n             None => true,\n             _ => self.failed,\n         };"}, {"sha": "20742da2195fb73dfbd508042778478cd24bb501", "filename": "tests/target/configs-control_style-rfc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-control_style-rfc.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     loop {\n         if foo {\n             if ((right_paddle_speed < 0.) &&\n-                 (right_paddle.position().y - paddle_size.y / 2. > 5.)) ||\n+                    (right_paddle.position().y - paddle_size.y / 2. > 5.)) ||\n                 ((right_paddle_speed > 0.) &&\n                      (right_paddle.position().y + paddle_size.y / 2. < game_height as f32 - 5.))\n             {"}, {"sha": "8f351e8dfc2e0c8c85981f1e651cee2edc32a83f", "filename": "tests/target/configs-trailing_comma-never.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fconfigs-trailing_comma-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fconfigs-trailing_comma-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-trailing_comma-never.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -14,10 +14,10 @@ fn main() {\n \n     // #1544\n     if let VrMsg::ClientReply {\n-            request_num: reply_req_num,\n-            value,\n-            ..\n-        } = msg\n+        request_num: reply_req_num,\n+        value,\n+        ..\n+    } = msg\n     {\n         let _ = safe_assert_eq!(reply_req_num, request_num, op);\n         return Ok((request_num, op, value));"}, {"sha": "3b17aee5a787cd00ec7aaddd3cb8cc8d9ae74eb0", "filename": "tests/target/expr.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -7,8 +7,8 @@ fn foo() -> bool {\n     let referenced = &5;\n \n     let very_long_variable_name = (a + first + simple + test);\n-    let very_long_variable_name =\n-        (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB + b + c);\n+    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA +\n+                                       BBBBBBBBBBBBBBBBB + b + c);\n \n     let is_internalxxxx = self.codemap.span_to_filename(s) ==\n         self.codemap.span_to_filename(m.inner);\n@@ -20,8 +20,10 @@ fn foo() -> bool {\n         10000 * 30000000000 + 40000 / 1002200000000 - 50000 * sqrt(-1),\n         trivial_value,\n     );\n-    (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + a +\n-             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa)))))))))   ;\n+    (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+                 a +\n+                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+                 aaaaa)))))))));\n \n     {\n         for _ in 0..10 {}\n@@ -47,21 +49,21 @@ fn foo() -> bool {\n     }\n \n     if let Some(x) = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-                       aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)\n+                          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)\n     {}\n \n     if let (some_very_large,\n-         tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n     {\n     }\n \n     if let (some_very_large,\n-         tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n         1111 + 2222\n     {}\n \n     if let (some_very_large,\n-         tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n     {}\n \n     let test = if true { 5 } else { 3 };"}, {"sha": "1d4a1fb67922a613e398b42879d8fb1d7e854ba6", "filename": "tests/target/fn_args_layout-block.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Ffn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Ffn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-block.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -96,7 +96,12 @@ fn foo<g: G>() {\n     foo();\n }\n \n-fn foo<L: Loooooooooooooooooooooong, G: Geeeeeeeeeeeneric, I: iiiiiiiiis, L: Looooooooooooooooong>() {\n+fn foo<\n+    L: Loooooooooooooooooooooong,\n+    G: Geeeeeeeeeeeneric,\n+    I: iiiiiiiiis,\n+    L: Looooooooooooooooong,\n+>() {\n     foo();\n }\n "}, {"sha": "48c72afd055108a7ec8646280436780fbed578fb", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -22,7 +22,7 @@ fn main() {\n \tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n \n \tif let (some_very_large,\n-\t     tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n+\t        tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3\n \t{}\n \n \tif cond() {"}, {"sha": "21c3c9e38de2de7a966d0ae6bdf3c5f9e720d3b0", "filename": "tests/target/issue-1397.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fissue-1397.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fissue-1397.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1397.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -12,8 +12,8 @@ fn baz(p: Packet) {\n             loop {\n                 loop {\n                     if let Packet::Transaction {\n-                            state: TransactionState::Committed(ts, ..), ..\n-                        } = p\n+                        state: TransactionState::Committed(ts, ..), ..\n+                    } = p\n                     {\n                         unreachable!()\n                     }"}, {"sha": "9cc3305ea39ce77ae719af2a98d157fc19239c09", "filename": "tests/target/macros.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -67,13 +67,18 @@ fn main() {\n     vec![a, b; c];\n     vec![a; b, c];\n \n-    vec![a;\n-            (|x| {\n-                 let y = x + 1;\n-                 let z = y + 1;\n-                 z\n-             })(2)];\n-    vec![a; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx];\n+    vec![\n+        a;\n+        (|x| {\n+             let y = x + 1;\n+             let z = y + 1;\n+             z\n+         })(2)\n+    ];\n+    vec![\n+        a;\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n+    ];\n     vec![a; unsafe { x + 1 }];\n \n     unknown_bracket_macro__comma_should_not_be_stripped!["}, {"sha": "040fbf155a48e616ceed9161e37d887e1479eb1c", "filename": "tests/target/match.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=b8f11a4e3c1c3a381daa19da28e3e9d686c25aa0", "patch": "@@ -37,10 +37,8 @@ fn foo() {\n         Patternnnnnnnnnnnnnnnnnnnnnnnnn if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n \n         _ => {}\n-        ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() >\n-                                                                       0 ||\n-                                                                       data.types.len() > 0 ||\n-                                                                       data.bindings.len() > 0 => {}\n+        ast::PathParameters::AngleBracketedParameters(ref data)\n+            if data.lifetimes.len() > 0 || data.types.len() > 0 || data.bindings.len() > 0 => {}\n     }\n \n     let whatever = match something {\n@@ -316,16 +314,15 @@ fn issue386() {\n \n fn guards() {\n     match foo {\n-        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo &&\n-                                                                          barrrrrrrrrrrr => {}\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+            if foooooooooooooo && barrrrrrrrrrrr => {}\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |\n-        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa if foooooooooooooo &&\n-                                                                          barrrrrrrrrrrr => {}\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+            if foooooooooooooo && barrrrrrrrrrrr => {}\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n             if fooooooooooooooooooooo &&\n-                   (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb || cccccccccccccccccccccccccccccccccccccccc) => {\n-            {}\n-        }\n+                   (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb ||\n+                        cccccccccccccccccccccccccccccccccccccccc) => {}\n     }\n }\n "}]}