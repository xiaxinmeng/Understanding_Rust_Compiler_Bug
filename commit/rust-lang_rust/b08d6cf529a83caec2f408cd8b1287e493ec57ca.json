{"sha": "b08d6cf529a83caec2f408cd8b1287e493ec57ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOGQ2Y2Y1MjlhODNjYWVjMmY0MDhjZDhiMTI4N2U0OTNlYzU3Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-17T22:45:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-17T22:45:10Z"}, "message": "Auto merge of #24500 - pnkfelix:oflo-checked-neg, r=nikomatsakis\n\nAdd conditional overflow-checking to signed negate operator.\r\n\r\nI argue this can land independently of #24420 , because one can write the implementation of `wrapped_neg()` inline if necessary (as illustrated in two cases on this PR).\r\n\r\nThis needs to go into beta channel.", "tree": {"sha": "6ef971f443e9797d767a2b05f837f9026ba68117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef971f443e9797d767a2b05f837f9026ba68117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08d6cf529a83caec2f408cd8b1287e493ec57ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08d6cf529a83caec2f408cd8b1287e493ec57ca", "html_url": "https://github.com/rust-lang/rust/commit/b08d6cf529a83caec2f408cd8b1287e493ec57ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08d6cf529a83caec2f408cd8b1287e493ec57ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f305579e490a9fa046b1b7a14e62daf643e41865", "url": "https://api.github.com/repos/rust-lang/rust/commits/f305579e490a9fa046b1b7a14e62daf643e41865", "html_url": "https://github.com/rust-lang/rust/commit/f305579e490a9fa046b1b7a14e62daf643e41865"}, {"sha": "b8ec7e88fc6c5a81194fd09dad042dc291a1cbb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ec7e88fc6c5a81194fd09dad042dc291a1cbb5", "html_url": "https://github.com/rust-lang/rust/commit/b8ec7e88fc6c5a81194fd09dad042dc291a1cbb5"}], "stats": {"total": 83, "additions": 63, "deletions": 20}, "files": [{"sha": "a056e585fee65644beeba413ba9a5accaebb9023", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b08d6cf529a83caec2f408cd8b1287e493ec57ca", "patch": "@@ -1321,7 +1321,11 @@ macro_rules! int_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn abs(self) -> $T {\n-            if self.is_negative() { -self } else { self }\n+            if self.is_negative() {\n+                self.wrapping_neg()\n+            } else {\n+                self\n+            }\n         }\n \n         /// Returns a number representing sign of `self`."}, {"sha": "023f9e0bda1865ea41e65bee0527ad3a5269c447", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b08d6cf529a83caec2f408cd8b1287e493ec57ca", "patch": "@@ -566,6 +566,25 @@ fn cast_shift_rhs<F, G>(op: ast::BinOp_,\n     }\n }\n \n+pub fn llty_and_min_for_signed_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n+                                              val_t: Ty<'tcx>) -> (Type, u64) {\n+    match val_t.sty {\n+        ty::ty_int(t) => {\n+            let llty = Type::int_from_ty(cx.ccx(), t);\n+            let min = match t {\n+                ast::TyIs if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n+                ast::TyIs => i64::MIN as u64,\n+                ast::TyI8 => i8::MIN as u64,\n+                ast::TyI16 => i16::MIN as u64,\n+                ast::TyI32 => i32::MIN as u64,\n+                ast::TyI64 => i64::MIN as u64,\n+            };\n+            (llty, min)\n+        }\n+        _ => unreachable!(),\n+    }\n+}\n+\n pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n                                 cx: Block<'blk, 'tcx>,\n                                 call_info: NodeIdAndSpan,\n@@ -620,21 +639,7 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n     // signed division/remainder which would trigger overflow. For unsigned\n     // integers, no action beyond checking for zero need be taken.\n     if is_signed {\n-        let (llty, min) = match rhs_t.sty {\n-            ty::ty_int(t) => {\n-                let llty = Type::int_from_ty(cx.ccx(), t);\n-                let min = match t {\n-                    ast::TyIs if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n-                    ast::TyIs => i64::MIN as u64,\n-                    ast::TyI8 => i8::MIN as u64,\n-                    ast::TyI16 => i16::MIN as u64,\n-                    ast::TyI32 => i32::MIN as u64,\n-                    ast::TyI64 => i64::MIN as u64,\n-                };\n-                (llty, min)\n-            }\n-            _ => unreachable!(),\n-        };\n+        let (llty, min) = llty_and_min_for_signed_ty(cx, rhs_t);\n         let minus_one = ICmp(bcx, llvm::IntEQ, rhs,\n                              C_integral(llty, !0, false), debug_loc);\n         with_cond(bcx, minus_one, |bcx| {"}, {"sha": "27919d645b695fa39a259ba786c80f5680d536b9", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=b08d6cf529a83caec2f408cd8b1287e493ec57ca", "patch": "@@ -1530,11 +1530,26 @@ fn trans_unary<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::UnNeg => {\n             let datum = unpack_datum!(bcx, trans(bcx, sub_expr));\n             let val = datum.to_llscalarish(bcx);\n-            let llneg = {\n+            let (bcx, llneg) = {\n                 if ty::type_is_fp(un_ty) {\n-                    FNeg(bcx, val, debug_loc)\n+                    let result = FNeg(bcx, val, debug_loc);\n+                    (bcx, result)\n                 } else {\n-                    Neg(bcx, val, debug_loc)\n+                    let is_signed = ty::type_is_signed(un_ty);\n+                    let result = Neg(bcx, val, debug_loc);\n+                    let bcx = if bcx.ccx().check_overflow() && is_signed {\n+                        let (llty, min) = base::llty_and_min_for_signed_ty(bcx, un_ty);\n+                        let is_min = ICmp(bcx, llvm::IntEQ, val,\n+                                          C_integral(llty, min, true), debug_loc);\n+                        with_cond(bcx, is_min, |bcx| {\n+                            let msg = InternedString::new(\n+                                \"attempted to negate with overflow\");\n+                            controlflow::trans_fail(bcx, expr_info(expr), msg)\n+                        })\n+                    } else {\n+                        bcx\n+                    };\n+                    (bcx, result)\n                 }\n             };\n             immediate_rvalue_bcx(bcx, llneg, un_ty).to_expr_datumblock()"}, {"sha": "b4f679a81098901f0f4863eb0af100d09cce1e15", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=b08d6cf529a83caec2f408cd8b1287e493ec57ca", "patch": "@@ -1540,7 +1540,7 @@ impl<T: Iterator<Item=char>> Parser<T> {\n             F64Value(res)\n         } else {\n             if neg {\n-                let res = -(res as i64);\n+                let res = (res as i64).wrapping_neg();\n \n                 // Make sure we didn't underflow.\n                 if res > 0 {"}, {"sha": "cdb74c7d7e2610ecce3ea003216f65b88683f74a", "filename": "src/test/run-fail/overflowing-neg.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08d6cf529a83caec2f408cd8b1287e493ec57ca/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs?ref=b08d6cf529a83caec2f408cd8b1287e493ec57ca", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'attempted to negate with overflow'\n+// compile-flags: -C debug-assertions\n+\n+// (Work around constant-evaluation)\n+fn value() -> i8 { std::i8::MIN }\n+\n+fn main() {\n+    let _x = -value();\n+}"}]}