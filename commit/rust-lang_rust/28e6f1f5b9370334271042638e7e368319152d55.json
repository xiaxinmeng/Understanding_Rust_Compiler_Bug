{"sha": "28e6f1f5b9370334271042638e7e368319152d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZTZmMWY1YjkzNzAzMzQyNzEwNDI2MzhlN2UzNjgzMTkxNTJkNTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-10T22:13:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-14T17:50:24Z"}, "message": "Suggest boxing or borrowing unsized fields", "tree": {"sha": "9a08889953c5ebc43b04ac62b2e61476bc455e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a08889953c5ebc43b04ac62b2e61476bc455e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28e6f1f5b9370334271042638e7e368319152d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28e6f1f5b9370334271042638e7e368319152d55", "html_url": "https://github.com/rust-lang/rust/commit/28e6f1f5b9370334271042638e7e368319152d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28e6f1f5b9370334271042638e7e368319152d55/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15bda4036b194a36a91a4011220c10547b13628", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15bda4036b194a36a91a4011220c10547b13628", "html_url": "https://github.com/rust-lang/rust/commit/a15bda4036b194a36a91a4011220c10547b13628"}], "stats": {"total": 530, "additions": 424, "deletions": 106}, "files": [{"sha": "c15c31a53f0c9fefafb2f06bdf6d086e95c08488", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -229,6 +229,7 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized {\n         adt_kind: AdtKind,\n+        span: Span,\n         last: bool,\n     },\n "}, {"sha": "334462790edbcc5a2f03c2de543fcdf9148d0065", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -156,7 +156,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::SizedYieldType => Some(super::SizedYieldType),\n             super::InlineAsmSized => Some(super::InlineAsmSized),\n             super::RepeatVec(suggest_flag) => Some(super::RepeatVec(suggest_flag)),\n-            super::FieldSized { adt_kind, last } => Some(super::FieldSized { adt_kind, last }),\n+            super::FieldSized { adt_kind, span, last } => {\n+                Some(super::FieldSized { adt_kind, span, last })\n+            }\n             super::ConstSized => Some(super::ConstSized),\n             super::ConstPatternStructural => Some(super::ConstPatternStructural),\n             super::SharedStatic => Some(super::SharedStatic),"}, {"sha": "3daa5b3b1abdc93d901b904bae95deea2f24fe43", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1856,26 +1856,43 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::StructInitializerSized => {\n                 err.note(\"structs must have a statically known size to be initialized\");\n             }\n-            ObligationCauseCode::FieldSized { adt_kind: ref item, last } => match *item {\n-                AdtKind::Struct => {\n-                    if last {\n-                        err.note(\n-                            \"the last field of a packed struct may only have a \\\n-                             dynamically sized type if it does not need drop to be run\",\n-                        );\n-                    } else {\n-                        err.note(\n-                            \"only the last field of a struct may have a dynamically sized type\",\n-                        );\n+            ObligationCauseCode::FieldSized { adt_kind: ref item, last, span } => {\n+                match *item {\n+                    AdtKind::Struct => {\n+                        if last {\n+                            err.note(\n+                                \"the last field of a packed struct may only have a \\\n+                                dynamically sized type if it does not need drop to be run\",\n+                            );\n+                        } else {\n+                            err.note(\n+                                \"only the last field of a struct may have a dynamically sized type\",\n+                            );\n+                        }\n+                    }\n+                    AdtKind::Union => {\n+                        err.note(\"no field of a union may have a dynamically sized type\");\n+                    }\n+                    AdtKind::Enum => {\n+                        err.note(\"no field of an enum variant may have a dynamically sized type\");\n                     }\n                 }\n-                AdtKind::Union => {\n-                    err.note(\"no field of a union may have a dynamically sized type\");\n-                }\n-                AdtKind::Enum => {\n-                    err.note(\"no field of an enum variant may have a dynamically sized type\");\n-                }\n-            },\n+                err.help(\"change the field's type to have a statically known size\");\n+                err.span_suggestion(\n+                    span.shrink_to_lo(),\n+                    \"borrowed types always have a statically known size\",\n+                    \"&\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.multipart_suggestion(\n+                    \"heap allocated types always have a statically known size\",\n+                    vec![\n+                        (span.shrink_to_lo(), \"Box<\".to_string()),\n+                        (span.shrink_to_hi(), \">\".to_string()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n             ObligationCauseCode::ConstSized => {\n                 err.note(\"constant expressions must have a statically known size\");\n             }"}, {"sha": "19c556942afc1397462390030fb97b722f879b10", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -394,6 +394,7 @@ fn check_type_defn<'tcx, F>(\n                                 Some(i) => i,\n                                 None => bug!(),\n                             },\n+                            span: field.span,\n                             last,\n                         },\n                     ),\n@@ -1329,7 +1330,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let field_ty = self.normalize_associated_types_in(field.ty.span, &field_ty);\n                 let field_ty = self.resolve_vars_if_possible(&field_ty);\n                 debug!(\"non_enum_variant: type of field {:?} is {:?}\", field, field_ty);\n-                AdtField { ty: field_ty, span: field.span }\n+                AdtField { ty: field_ty, span: field.ty.span }\n             })\n             .collect();\n         AdtVariant { fields, explicit_discr: None }"}, {"sha": "ad67a87265bd3f0e66959bf691864ee8625610e1", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -16,10 +16,10 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:14:5\n+  --> $DIR/array-size-in-generic-struct-param.rs:14:10\n    |\n LL |     arr: [u8; CFG.arr_size],\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n "}, {"sha": "38736de8d9ac72d7c22b392c85ab1b025ef49445", "filename": "src/test/ui/error-codes/E0478.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/E0478.rs:4:5\n+  --> $DIR/E0478.rs:4:12\n    |\n LL |     child: Box<dyn Wedding<'kiss> + 'SnowWhite>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'SnowWhite` as defined on the struct at 3:22\n   --> $DIR/E0478.rs:3:22"}, {"sha": "987cde191cbb98431dc46b85f41800f15ecb026d", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:5\n+  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:10\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "63f0701974b8b1efe1b37028d63ad523c3f976c0", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,13 +1,13 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n-  --> $DIR/issue-19380.rs:11:3\n+  --> $DIR/issue-19380.rs:11:9\n    |\n LL | trait Qiz {\n    |       --- this trait cannot be made into an object...\n LL |   fn qiz();\n    |      --- ...because associated function `qiz` has no `self` parameter\n ...\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n    |\n help: consider turning `qiz` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n    |"}, {"sha": "9a74bc03131692bc8974b618627143f0c64823cd", "filename": "src/test/ui/issues/issue-22874.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[std::string::String]` cannot be known at compilation time\n-  --> $DIR/issue-22874.rs:2:5\n+  --> $DIR/issue-22874.rs:2:11\n    |\n LL |     rows: [[String]],\n-   |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::string::String]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "8b64128fb01dad7c8046d24e3edf257a416f9311", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,14 +1,23 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/issue-27060-2.rs:3:5\n+  --> $DIR/issue-27060-2.rs:3:11\n    |\n LL | pub struct Bad<T: ?Sized> {\n    |                - this type parameter needs to be `std::marker::Sized`\n LL |     data: T,\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n+   |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     data: &T,\n+   |           ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     data: Box<T>,\n+   |           ^^^^ ^\n \n error: aborting due to previous error\n "}, {"sha": "52660eb7cdac982163b9313d694278bd914ba468", "filename": "src/test/ui/issues/issue-35988.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -7,6 +7,15 @@ LL |     V([Box<E>]),\n    = help: the trait `std::marker::Sized` is not implemented for `[std::boxed::Box<E>]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     V(&[Box<E>]),\n+   |       ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     V(Box<[Box<E>]>),\n+   |       ^^^^        ^\n \n error: aborting due to previous error\n "}, {"sha": "ce0495dd8b0cbaa3a0b137715e6d7f03122530f2", "filename": "src/test/ui/lazy_normalization_consts/issue-57739.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-57739.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -8,10 +8,10 @@ LL | #![feature(lazy_normalization_consts)]\n    = note: see issue #72219 <https://github.com/rust-lang/rust/issues/72219> for more information\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-57739.rs:12:5\n+  --> $DIR/issue-57739.rs:12:12\n    |\n LL |     array: [u8; T::SIZE],\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n "}, {"sha": "e5083e3a088b6b53be9e6b1f8d8976d8c47d31b2", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:19:5\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:19:10\n    |\n LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     foo: &'static T\n-   |     ^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |          ^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19"}, {"sha": "22586b5de91ff9e2158c52df337f083e74fedeac", "filename": "src/test/ui/regions/region-bounds-on-objects-and-type-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -5,10 +5,10 @@ LL |     z: Box<dyn Is<'a>+'b+'c>,\n    |                          ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/region-bounds-on-objects-and-type-parameters.rs:21:5\n+  --> $DIR/region-bounds-on-objects-and-type-parameters.rs:21:8\n    |\n LL |     z: Box<dyn Is<'a>+'b+'c>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 11:15\n   --> $DIR/region-bounds-on-objects-and-type-parameters.rs:11:15"}, {"sha": "1ddbf73a46372dc13dbc2c54a9f20a4fc6d8ca23", "filename": "src/test/ui/regions/regions-wf-trait-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/regions-wf-trait-object.rs:7:5\n+  --> $DIR/regions-wf-trait-object.rs:7:8\n    |\n LL |     x: Box<dyn TheTrait<'a>+'b>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 6:15\n   --> $DIR/regions-wf-trait-object.rs:6:15"}, {"sha": "a449fac11930d8ce0571b2bace6738863aa20da3", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/dont-infer-static.rs:8:5\n+  --> $DIR/dont-infer-static.rs:8:10\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |     ^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "03877e60e2b7200282bd3dab9f622feb5dd53c53", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:5\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9\n    |\n LL | struct X<T>(T);\n    |          - required by this bound in `X`\n ...\n LL | struct Struct5<T: ?Sized>{\n    |                - this type parameter needs to be `std::marker::Sized`\n LL |     _t: X<T>,\n-   |     ^^^^^^^^ doesn't have a size known at compile-time\n+   |         ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "d7549835a09051c5e433291322160acc13ef62eb", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -13,13 +13,13 @@ LL | impl<T: Trait> Foo<T> {\n    |       ^^^^^^^\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:19:8\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n ...\n LL |     a: Foo<isize>,\n-   |     ^^^^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n+   |        ^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n \n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:23:10\n@@ -31,13 +31,13 @@ LL |     Quux(Bar<usize>),\n    |          ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n \n error[E0277]: the trait bound `U: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:27:5\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:27:8\n    |\n LL | struct Foo<T:Trait> {\n    |              ----- required by this bound in `Foo`\n ...\n LL |     b: Foo<U>,\n-   |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n+   |        ^^^^^^ the trait `Trait` is not implemented for `U`\n    |\n help: consider restricting type parameter `U`\n    |\n@@ -68,13 +68,13 @@ LL |     Foo<i32>,\n    |     ^^^^^^^^ the trait `Trait` is not implemented for `i32`\n \n error[E0277]: the trait bound `u8: Trait` is not satisfied\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:39:22\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:39:29\n    |\n LL | enum Bar<T:Trait> {\n    |            ----- required by this bound in `Bar`\n ...\n LL |     DictionaryLike { field: Bar<u8> },\n-   |                      ^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u8`\n+   |                             ^^^^^^^ the trait `Trait` is not implemented for `u8`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "1bfc44e3eec62f22151ba294be326de436dce529", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,26 +1,44 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/union-sized-field.rs:4:5\n+  --> $DIR/union-sized-field.rs:4:12\n    |\n LL | union Foo<T: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n-   |     ^^^^^^^^ doesn't have a size known at compile-time\n+   |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/union-sized-field.rs:9:5\n+  --> $DIR/union-sized-field.rs:9:12\n    |\n LL | struct Foo2<T: ?Sized> {\n    |             - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n-   |     ^^^^^^^^ doesn't have a size known at compile-time\n+   |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:15:11\n@@ -33,6 +51,15 @@ LL |     Value(T),\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     Value(&T),\n+   |           ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     Value(Box<T>),\n+   |           ^^^^ ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "442ea83f80168d1d14ab852c5f5d634e68a1680d", "filename": "src/test/ui/union/union-unsized.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,22 +1,40 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:4:5\n+  --> $DIR/union-unsized.rs:4:8\n    |\n LL |     a: str,\n-   |     ^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     a: &str,\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     a: Box<str>,\n+   |        ^^^^   ^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:12:5\n+  --> $DIR/union-unsized.rs:12:8\n    |\n LL |     b: str,\n-   |     ^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     b: &str,\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     b: Box<str>,\n+   |        ^^^^   ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb89a6f45d234dc018efd65e0ed2d253f846c22f", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 200, "deletions": 20, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -10,19 +10,37 @@ LL |     VA(W),\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VA(&W),\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VA(Box<W>),\n+   |        ^^^^ ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:25:8\n+  --> $DIR/unsized-enum2.rs:25:11\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n    |                   - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VB{x: X},\n-   |        ^^^^ doesn't have a size known at compile-time\n+   |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VB{x: &X},\n+   |           ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VB{x: Box<X>},\n+   |           ^^^^ ^\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:27:15\n@@ -36,19 +54,37 @@ LL |     VC(isize, Y),\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VC(isize, &Y),\n+   |               ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VC(isize, Box<Y>),\n+   |               ^^^^ ^\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:29:18\n+  --> $DIR/unsized-enum2.rs:29:21\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n    |                                         - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VD{u: isize, x: Z},\n-   |                  ^^^^ doesn't have a size known at compile-time\n+   |                     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VD{u: isize, x: &Z},\n+   |                     ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VD{u: isize, x: Box<Z>},\n+   |                     ^^^^ ^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:33:8\n@@ -59,16 +95,34 @@ LL |     VE([u8]),\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VE(&[u8]),\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VE(Box<[u8]>),\n+   |        ^^^^    ^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:35:8\n+  --> $DIR/unsized-enum2.rs:35:11\n    |\n LL |     VF{x: str},\n-   |        ^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VF{x: &str},\n+   |           ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VF{x: Box<str>},\n+   |           ^^^^   ^\n \n error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:37:15\n@@ -79,16 +133,34 @@ LL |     VG(isize, [f32]),\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VG(isize, &[f32]),\n+   |               ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VG(isize, Box<[f32]>),\n+   |               ^^^^     ^\n \n error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:39:18\n+  --> $DIR/unsized-enum2.rs:39:21\n    |\n LL |     VH{u: isize, x: [u32]},\n-   |                  ^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VH{u: isize, x: &[u32]},\n+   |                     ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VH{u: isize, x: Box<[u32]>},\n+   |                     ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:53:8\n@@ -99,16 +171,34 @@ LL |     VM(dyn Foo),\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VM(&dyn Foo),\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VM(Box<dyn Foo>),\n+   |        ^^^^       ^\n \n error[E0277]: the size for values of type `(dyn Bar + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:55:8\n+  --> $DIR/unsized-enum2.rs:55:11\n    |\n LL |     VN{x: dyn Bar},\n-   |        ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VN{x: &dyn Bar},\n+   |           ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VN{x: Box<dyn Bar>},\n+   |           ^^^^       ^\n \n error[E0277]: the size for values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:57:15\n@@ -119,16 +209,34 @@ LL |     VO(isize, dyn FooBar),\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VO(isize, &dyn FooBar),\n+   |               ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VO(isize, Box<dyn FooBar>),\n+   |               ^^^^          ^\n \n error[E0277]: the size for values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:59:18\n+  --> $DIR/unsized-enum2.rs:59:21\n    |\n LL |     VP{u: isize, x: dyn BarFoo},\n-   |                  ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VP{u: isize, x: &dyn BarFoo},\n+   |                     ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VP{u: isize, x: Box<dyn BarFoo>},\n+   |                     ^^^^          ^\n \n error[E0277]: the size for values of type `[i8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:63:8\n@@ -139,16 +247,34 @@ LL |     VQ(<&'static [i8] as Deref>::Target),\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VQ(&<&'static [i8] as Deref>::Target),\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VQ(Box<<&'static [i8] as Deref>::Target>),\n+   |        ^^^^                                ^\n \n error[E0277]: the size for values of type `[char]` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:65:8\n+  --> $DIR/unsized-enum2.rs:65:11\n    |\n LL |     VR{x: <&'static [char] as Deref>::Target},\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VR{x: &<&'static [char] as Deref>::Target},\n+   |           ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VR{x: Box<<&'static [char] as Deref>::Target>},\n+   |           ^^^^                                  ^\n \n error[E0277]: the size for values of type `[f64]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:67:15\n@@ -159,16 +285,34 @@ LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VS(isize, &<&'static [f64] as Deref>::Target),\n+   |               ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VS(isize, Box<<&'static [f64] as Deref>::Target>),\n+   |               ^^^^                                 ^\n \n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:69:18\n+  --> $DIR/unsized-enum2.rs:69:21\n    |\n LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VT{u: isize, x: &<&'static [i32] as Deref>::Target},\n+   |                     ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VT{u: isize, x: Box<<&'static [i32] as Deref>::Target>},\n+   |                     ^^^^                                 ^\n \n error[E0277]: the size for values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:43:8\n@@ -180,17 +324,35 @@ LL |     VI(Path1),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VI(&Path1),\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VI(Box<Path1>),\n+   |        ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn PathHelper2 + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:45:8\n+  --> $DIR/unsized-enum2.rs:45:11\n    |\n LL |     VJ{x: Path2},\n-   |        ^^^^^^^^ doesn't have a size known at compile-time\n+   |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VJ{x: &Path2},\n+   |           ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VJ{x: Box<Path2>},\n+   |           ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn PathHelper3 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:47:15\n@@ -202,17 +364,35 @@ LL |     VK(isize, Path3),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VK(isize, &Path3),\n+   |               ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VK(isize, Box<Path3>),\n+   |               ^^^^     ^\n \n error[E0277]: the size for values of type `(dyn PathHelper4 + 'static)` cannot be known at compilation time\n-  --> $DIR/unsized-enum2.rs:49:18\n+  --> $DIR/unsized-enum2.rs:49:21\n    |\n LL |     VL{u: isize, x: Path4},\n-   |                  ^^^^^^^^ doesn't have a size known at compile-time\n+   |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     VL{u: isize, x: &Path4},\n+   |                     ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     VL{u: isize, x: Box<Path4>},\n+   |                     ^^^^     ^\n \n error: aborting due to 20 previous errors\n "}, {"sha": "3eef1f4f6771ebd2ef821a12ec87a1d0aa27e8ff", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 64, "deletions": 10, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,47 +1,83 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:4:5\n+  --> $DIR/unsized5.rs:4:9\n    |\n LL | struct S1<X: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n LL |     f1: X,\n-   |     ^^^^^ doesn't have a size known at compile-time\n+   |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     f1: &X,\n+   |         ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     f1: Box<X>,\n+   |         ^^^^ ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:10:5\n+  --> $DIR/unsized5.rs:10:8\n    |\n LL | struct S2<X: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n LL |     f: isize,\n LL |     g: X,\n-   |     ^^^^ doesn't have a size known at compile-time\n+   |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     g: &X,\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     g: Box<X>,\n+   |        ^^^^ ^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:15:5\n+  --> $DIR/unsized5.rs:15:8\n    |\n LL |     f: str,\n-   |     ^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     f: &str,\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     f: Box<str>,\n+   |        ^^^^   ^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:20:5\n+  --> $DIR/unsized5.rs:20:8\n    |\n LL |     f: [u8],\n-   |     ^^^^^^^ doesn't have a size known at compile-time\n+   |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     f: &[u8],\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     f: Box<[u8]>,\n+   |        ^^^^    ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:25:8\n@@ -54,18 +90,36 @@ LL |     V1(X, isize),\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     V1(&X, isize),\n+   |        ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     V1(Box<X>, isize),\n+   |        ^^^^ ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized5.rs:29:8\n+  --> $DIR/unsized5.rs:29:12\n    |\n LL | enum F<X: ?Sized> {\n    |        - this type parameter needs to be `std::marker::Sized`\n LL |     V2{f1: X, f: isize},\n-   |        ^^^^^ doesn't have a size known at compile-time\n+   |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     V2{f1: &X, f: isize},\n+   |            ^\n+help: heap allocated types always have a statically known size\n+   |\n+LL |     V2{f1: Box<X>, f: isize},\n+   |            ^^^^ ^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b424c9f3ac981d578d365c88b2665c8c82e41630", "filename": "src/test/ui/wf/wf-array-elem-sized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-array-elem-sized.rs:7:5\n+  --> $DIR/wf-array-elem-sized.rs:7:10\n    |\n LL |     foo: [[u8]],\n-   |     ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "1eb7010c77a79988e88589ad0f93444f90ec3eb4", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-enum-fields-struct-variant.rs:13:9\n+  --> $DIR/wf-enum-fields-struct-variant.rs:13:12\n    |\n LL | struct IsCopy<T:Copy> {\n    |                 ---- required by this bound in `IsCopy`\n ...\n LL |         f: IsCopy<A>\n-   |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n+   |            ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n help: consider restricting type parameter `A`\n    |"}, {"sha": "212c61e1e5e07336f10cd5dac645d4c0923aac78", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-arg.rs:9:5\n+  --> $DIR/wf-in-fn-type-arg.rs:9:8\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn(MustBeCopy<T>)\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        ^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "3fb05fe81763bd4f5da0ec4516bd5e1036d7a231", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-fn-type-ret.rs:9:5\n+  --> $DIR/wf-in-fn-type-ret.rs:9:8\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn() -> MustBeCopy<T>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        ^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "44cacf4ef4dfe5d75fadd5041c0f93ed50af7178", "filename": "src/test/ui/wf/wf-in-fn-type-static.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,20 +1,20 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-in-fn-type-static.rs:13:5\n+  --> $DIR/wf-in-fn-type-static.rs:13:8\n    |\n LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: fn() -> &'static T\n-   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |        ^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-in-fn-type-static.rs:18:5\n+  --> $DIR/wf-in-fn-type-static.rs:18:8\n    |\n LL | struct Bar<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: Copy\n LL |     x: fn(&'static T)\n-   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |        ^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c50a6bb6e4d878939e0c963e3a3306dcf5d556c6", "filename": "src/test/ui/wf/wf-in-obj-type-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,11 +1,11 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-in-obj-type-static.rs:14:5\n+  --> $DIR/wf-in-obj-type-static.rs:14:8\n    |\n LL | struct Foo<T> {\n    |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: dyn Object<&'static T>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |        ^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "129f9484df29bef1993cfcec02bf9311fed5f650", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-in-obj-type-trait.rs:11:5\n+  --> $DIR/wf-in-obj-type-trait.rs:11:8\n    |\n LL | struct MustBeCopy<T:Copy> {\n    |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: dyn Object<MustBeCopy<T>>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "d7d0b7a0820a8739a344e97e126c8971e972bcea", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28e6f1f5b9370334271042638e7e368319152d55/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=28e6f1f5b9370334271042638e7e368319152d55", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-struct-field.rs:12:5\n+  --> $DIR/wf-struct-field.rs:12:11\n    |\n LL | struct IsCopy<T:Copy> {\n    |                 ---- required by this bound in `IsCopy`\n ...\n LL |     data: IsCopy<A>\n-   |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n+   |           ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n help: consider restricting type parameter `A`\n    |"}]}