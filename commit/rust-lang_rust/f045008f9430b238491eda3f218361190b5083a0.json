{"sha": "f045008f9430b238491eda3f218361190b5083a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNDUwMDhmOTQzMGIyMzg0OTFlZGEzZjIxODM2MTE5MGI1MDgzYTA=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-06-20T22:31:58Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-06-20T23:30:43Z"}, "message": "Kill conflicting borrows of places with projections.\n\nResolves #62007.\n\nDue to a bug, the previous version of this check did not actually kill\nany conflicting borrows unless the borrowed place had no projections.\nSpecifically, `entry_set` will always be empty when `statement_effect`\nis called. It does not contain the set of borrows which are live at this\npoint in the program.", "tree": {"sha": "4a519abf4396773af826044357fcce42ddca06cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a519abf4396773af826044357fcce42ddca06cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f045008f9430b238491eda3f218361190b5083a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f045008f9430b238491eda3f218361190b5083a0", "html_url": "https://github.com/rust-lang/rust/commit/f045008f9430b238491eda3f218361190b5083a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f045008f9430b238491eda3f218361190b5083a0/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f693d339f175b3aa23a91c62632c5f0c86886059", "url": "https://api.github.com/repos/rust-lang/rust/commits/f693d339f175b3aa23a91c62632c5f0c86886059", "html_url": "https://github.com/rust-lang/rust/commit/f693d339f175b3aa23a91c62632c5f0c86886059"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "7617d3b997d087b2f857ec05c0b3948fa0e87aca", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f045008f9430b238491eda3f218361190b5083a0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045008f9430b238491eda3f218361190b5083a0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=f045008f9430b238491eda3f218361190b5083a0", "patch": "@@ -193,43 +193,38 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n         place: &Place<'tcx>\n     ) {\n         debug!(\"kill_borrows_on_place: place={:?}\", place);\n-        // Handle the `Place::Local(..)` case first and exit early.\n-        if let Place::Base(PlaceBase::Local(local)) = place {\n-            if let Some(borrow_indices) = self.borrow_set.local_map.get(&local) {\n-                debug!(\"kill_borrows_on_place: borrow_indices={:?}\", borrow_indices);\n-                sets.kill_all(borrow_indices);\n+\n+        if let Some(local) = place.base_local() {\n+            let other_borrows_of_local = self\n+                .borrow_set\n+                .local_map\n+                .get(&local)\n+                .into_iter()\n+                .flat_map(|bs| bs.into_iter());\n+\n+            // If the borrowed place is a local with no projections, all other borrows of this\n+            // local must conflict. This is purely an optimization so we don't have to call\n+            // `places_conflict` for every borrow.\n+            if let Place::Base(PlaceBase::Local(_)) = place {\n+                sets.kill_all(other_borrows_of_local);\n                 return;\n             }\n-        }\n-\n-        // Otherwise, look at all borrows that are live and if they conflict with the assignment\n-        // into our place then we can kill them.\n-        let mut borrows = sets.on_entry.clone();\n-        let _ = borrows.union(sets.gen_set);\n-        for borrow_index in borrows.iter() {\n-            let borrow_data = &self.borrows()[borrow_index];\n-            debug!(\n-                \"kill_borrows_on_place: borrow_index={:?} borrow_data={:?}\",\n-                borrow_index, borrow_data,\n-            );\n \n             // By passing `PlaceConflictBias::NoOverlap`, we conservatively assume that any given\n             // pair of array indices are unequal, so that when `places_conflict` returns true, we\n             // will be assured that two places being compared definitely denotes the same sets of\n             // locations.\n-            if places_conflict::places_conflict(\n-                self.tcx,\n-                self.body,\n-                &borrow_data.borrowed_place,\n-                place,\n-                places_conflict::PlaceConflictBias::NoOverlap,\n-            ) {\n-                debug!(\n-                    \"kill_borrows_on_place: (kill) borrow_index={:?} borrow_data={:?}\",\n-                    borrow_index, borrow_data,\n-                );\n-                sets.kill(borrow_index);\n-            }\n+            let definitely_conflicting_borrows = other_borrows_of_local\n+                .filter(|&&i| {\n+                    places_conflict::places_conflict(\n+                        self.tcx,\n+                        self.body,\n+                        &self.borrow_set.borrows[i].borrowed_place,\n+                        place,\n+                        places_conflict::PlaceConflictBias::NoOverlap)\n+                });\n+\n+            sets.kill_all(definitely_conflicting_borrows);\n         }\n     }\n }"}, {"sha": "2ab0e6cf35520248425520dc620b794b9afb8a77", "filename": "src/test/run-pass/borrowck/borrowck-borrow-of-projection-kills-other-borrows-issue-62007.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f045008f9430b238491eda3f218361190b5083a0/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-projection-kills-other-borrows-issue-62007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f045008f9430b238491eda3f218361190b5083a0/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-projection-kills-other-borrows-issue-62007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-projection-kills-other-borrows-issue-62007.rs?ref=f045008f9430b238491eda3f218361190b5083a0", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+#![allow(dead_code)]\n+\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n+}\n+\n+fn to_refs<T>(mut list: (&mut List<T>,)) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut (list.0).value);\n+        if let Some(n) = (list.0).next.as_mut() {\n+            list.0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}