{"sha": "11f5893610b8511eefde072b580e7f7a286aa422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjU4OTM2MTBiODUxMWVlZmRlMDcyYjU4MGU3ZjdhMjg2YWE0MjI=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-04-16T03:44:39Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-16T11:56:24Z"}, "message": "label-break-value: Parsing and AST/HIR changes", "tree": {"sha": "ee558eb05bf3e70808d773cd7acb699682bdfdf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee558eb05bf3e70808d773cd7acb699682bdfdf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f5893610b8511eefde072b580e7f7a286aa422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f5893610b8511eefde072b580e7f7a286aa422", "html_url": "https://github.com/rust-lang/rust/commit/11f5893610b8511eefde072b580e7f7a286aa422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f5893610b8511eefde072b580e7f7a286aa422/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448cc578a903730d422f6e638641787d0dbd7bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/448cc578a903730d422f6e638641787d0dbd7bc7", "html_url": "https://github.com/rust-lang/rust/commit/448cc578a903730d422f6e638641787d0dbd7bc7"}], "stats": {"total": 116, "additions": 77, "deletions": 39}, "files": [{"sha": "7e03288f57284bf4c0a6f32af369ba2e518da930", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -179,7 +179,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n     fn expr(&mut self, expr: &hir::Expr, pred: CFGIndex) -> CFGIndex {\n         match expr.node {\n-            hir::ExprBlock(ref blk) => {\n+            hir::ExprBlock(ref blk, _) => {\n                 let blk_exit = self.block(&blk, pred);\n                 self.add_ast_node(expr.hir_id.local_id, &[blk_exit])\n             }"}, {"sha": "59b058e98611c5336ccd8a84c37e9a324ae9acee", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -1015,7 +1015,10 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n                              expression.span,\n                              expression.id)\n         }\n-        ExprBlock(ref block) => visitor.visit_block(block),\n+        ExprBlock(ref block, ref opt_label) => {\n+            walk_list!(visitor, visit_label, opt_label);\n+            visitor.visit_block(block);\n+        }\n         ExprAssign(ref left_hand_expression, ref right_hand_expression) => {\n             visitor.visit_expr(right_hand_expression);\n             visitor.visit_expr(left_hand_expression)"}, {"sha": "09fff64094f597fba872ff9f6091430fa2be0414", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -3048,7 +3048,7 @@ impl<'a> LoweringContext<'a> {\n                     );\n                     block.expr = Some(this.wrap_in_try_constructor(\n                         \"from_ok\", tail, unstable_span));\n-                    hir::ExprBlock(P(block))\n+                    hir::ExprBlock(P(block), None)\n                 })\n             }\n             ExprKind::Match(ref expr, ref arms) => hir::ExprMatch(\n@@ -3100,7 +3100,9 @@ impl<'a> LoweringContext<'a> {\n                     })\n                 })\n             }\n-            ExprKind::Block(ref blk) => hir::ExprBlock(self.lower_block(blk, false)),\n+            ExprKind::Block(ref blk, opt_label) => {\n+                hir::ExprBlock(self.lower_block(blk, false), self.lower_label(opt_label))\n+            }\n             ExprKind::Assign(ref el, ref er) => {\n                 hir::ExprAssign(P(self.lower_expr(el)), P(self.lower_expr(er)))\n             }\n@@ -3843,7 +3845,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn expr_block(&mut self, b: P<hir::Block>, attrs: ThinVec<Attribute>) -> hir::Expr {\n-        self.expr(b.span, hir::ExprBlock(b), attrs)\n+        self.expr(b.span, hir::ExprBlock(b, None), attrs)\n     }\n \n     fn expr_tuple(&mut self, sp: Span, exprs: hir::HirVec<hir::Expr>) -> P<hir::Expr> {"}, {"sha": "722a920d91c68cc3e8d913f851191a151ca8fe28", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -1381,8 +1381,8 @@ pub enum Expr_ {\n     /// This may also be a generator literal, indicated by the final boolean,\n     /// in that case there is an GeneratorClause.\n     ExprClosure(CaptureClause, P<FnDecl>, BodyId, Span, Option<GeneratorMovability>),\n-    /// A block (`{ ... }`)\n-    ExprBlock(P<Block>),\n+    /// A block (`'label: { ... }`)\n+    ExprBlock(P<Block>, Option<Label>),\n \n     /// An assignment (`a = foo()`)\n     ExprAssign(P<Expr>, P<Expr>),"}, {"sha": "9cd9e0dce54e35d487d2d1fe2db8cde85f4607fe", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -1047,7 +1047,7 @@ impl<'a> State<'a> {\n                         self.print_else(e.as_ref().map(|e| &**e))\n                     }\n                     // \"final else\"\n-                    hir::ExprBlock(ref b) => {\n+                    hir::ExprBlock(ref b, _) => {\n                         self.cbox(indent_unit - 1)?;\n                         self.ibox(0)?;\n                         self.s.word(\" else \")?;\n@@ -1377,7 +1377,11 @@ impl<'a> State<'a> {\n                 // empty box to satisfy the close.\n                 self.ibox(0)?;\n             }\n-            hir::ExprBlock(ref blk) => {\n+            hir::ExprBlock(ref blk, opt_label) => {\n+                if let Some(label) = opt_label {\n+                    self.print_name(label.name)?;\n+                    self.word_space(\":\")?;\n+                }\n                 // containing cbox, will be closed by print-block at }\n                 self.cbox(indent_unit)?;\n                 // head-box, will be closed by print-block after {\n@@ -1893,7 +1897,11 @@ impl<'a> State<'a> {\n         self.word_space(\"=>\")?;\n \n         match arm.body.node {\n-            hir::ExprBlock(ref blk) => {\n+            hir::ExprBlock(ref blk, opt_label) => {\n+                if let Some(label) = opt_label {\n+                    self.print_name(label.name)?;\n+                    self.word_space(\":\")?;\n+                }\n                 // the block will close the pattern's ibox\n                 self.print_block_unclosed_indent(&blk, indent_unit)?;\n \n@@ -2299,7 +2307,7 @@ fn expr_requires_semi_to_be_stmt(e: &hir::Expr) -> bool {\n     match e.node {\n         hir::ExprIf(..) |\n         hir::ExprMatch(..) |\n-        hir::ExprBlock(_) |\n+        hir::ExprBlock(..) |\n         hir::ExprWhile(..) |\n         hir::ExprLoop(..) => false,\n         _ => true,"}, {"sha": "ed01704e6a45c4dcd90b39bad59f69723317a54e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -589,7 +589,7 @@ impl_stable_hash_for!(enum hir::Expr_ {\n     ExprLoop(body, label, loop_src),\n     ExprMatch(matchee, arms, match_src),\n     ExprClosure(capture_clause, decl, body_id, span, gen),\n-    ExprBlock(blk),\n+    ExprBlock(blk, label),\n     ExprAssign(lhs, rhs),\n     ExprAssignOp(op, lhs, rhs),\n     ExprField(owner, field_name),"}, {"sha": "3ba230fe55a5132de01c10fd66ef0e7e3efdad3a", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_expr(&rhs);\n             }\n \n-            hir::ExprBlock(ref blk) => {\n+            hir::ExprBlock(ref blk, _) => {\n                 self.walk_block(&blk);\n             }\n "}, {"sha": "b39311a74718f5ac1a021cb3533fb280822c0563", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -1187,7 +1187,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             succ\n           }\n \n-          hir::ExprBlock(ref blk) => {\n+          // Note that labels have been resolved, so we don't need to look\n+          // at the label ident\n+          hir::ExprBlock(ref blk, _) => {\n             self.propagate_through_block(&blk, succ)\n           }\n         }"}, {"sha": "52217600759313192aebe52df34d51b7537d9353", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -1247,7 +1247,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n             hir::ExprCast(ref subexpr, _) => {\n                 record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id)\n             }\n-            hir::ExprBlock(ref block) => {\n+            hir::ExprBlock(ref block, _) => {\n                 if let Some(ref subexpr) = block.expr {\n                     record_rvalue_scope_if_borrow_expr(\n                         visitor, &subexpr, blk_id);"}, {"sha": "19280372d551dc676a561c2d24e168f4c6adb09f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -228,7 +228,7 @@ impl UnsafeCode {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        if let hir::ExprBlock(ref blk) = e.node {\n+        if let hir::ExprBlock(ref blk, _) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == hir::UnsafeBlock(hir::UserProvided) {\n                 self.report_unsafe(cx, blk.span, \"usage of an `unsafe` block\");"}, {"sha": "97a4e0f37249f41007391ca34b8dbc38e423e2f8", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -292,7 +292,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         }\n \n-        hir::ExprBlock(ref blk) => ExprKind::Block { body: &blk },\n+        hir::ExprBlock(ref blk, _) => ExprKind::Block { body: &blk },\n \n         hir::ExprAssign(ref lhs, ref rhs) => {\n             ExprKind::Assign {"}, {"sha": "85af00956c933851e5696ca592a32ab0b4b65e19", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -141,7 +141,7 @@ fn fn_contains_unsafe<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource) ->\n             }\n             // Check if this is an unsafe block, or an item\n             match node {\n-                Node::NodeExpr(&hir::Expr { node: hir::ExprBlock(ref block), ..}) => {\n+                Node::NodeExpr(&hir::Expr { node: hir::ExprBlock(ref block, _), ..}) => {\n                     if block_is_unsafe(&*block) {\n                         // Found an unsafe block, we can bail out here.\n                         return true;"}, {"sha": "e488bb47e34f6bc80780b37deb35978e2bc13f33", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -342,7 +342,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             let mut callee = &**callee;\n             loop {\n                 callee = match callee.node {\n-                    hir::ExprBlock(ref block) => match block.expr {\n+                    hir::ExprBlock(ref block, _) => match block.expr {\n                         Some(ref tail) => &tail,\n                         None => break\n                     },\n@@ -404,7 +404,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             }\n         }\n \n-        hir::ExprBlock(_) |\n+        hir::ExprBlock(..) |\n         hir::ExprIndex(..) |\n         hir::ExprField(..) |\n         hir::ExprArray(_) |"}, {"sha": "86c8ab66f7738d7affe0ecbb10307019b0b1dd35", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -3536,7 +3536,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Warn for non-block expressions with diverging children.\n         match expr.node {\n-            hir::ExprBlock(_) |\n+            hir::ExprBlock(..) |\n             hir::ExprLoop(..) | hir::ExprWhile(..) |\n             hir::ExprIf(..) | hir::ExprMatch(..) => {}\n \n@@ -3912,7 +3912,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           hir::ExprClosure(capture, ref decl, body_id, _, gen) => {\n               self.check_expr_closure(expr, capture, &decl, body_id, gen, expected)\n           }\n-          hir::ExprBlock(ref body) => {\n+          hir::ExprBlock(ref body, _) => {\n             self.check_block_with_expected(&body, expected)\n           }\n           hir::ExprCall(ref callee, ref args) => {"}, {"sha": "2b6635ec7831f09da58276e7206a310cce4e2a3a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -934,7 +934,7 @@ impl Expr {\n     /// Whether this expression would be valid somewhere that expects a value, for example, an `if`\n     /// condition.\n     pub fn returns(&self) -> bool {\n-        if let ExprKind::Block(ref block) = self.node {\n+        if let ExprKind::Block(ref block, _) = self.node {\n             match block.stmts.last().map(|last_stmt| &last_stmt.node) {\n                 // implicit return\n                 Some(&StmtKind::Expr(_)) => true,\n@@ -1121,8 +1121,8 @@ pub enum ExprKind {\n     ///\n     /// The final span is the span of the argument block `|...|`\n     Closure(CaptureBy, Movability, P<FnDecl>, P<Expr>, Span),\n-    /// A block (`{ ... }`)\n-    Block(P<Block>),\n+    /// A block (`'label: { ... }`)\n+    Block(P<Block>, Option<Label>),\n     /// A catch block (`catch { ... }`)\n     Catch(P<Block>),\n "}, {"sha": "a4f9ebcf41811190393294ba9a400ca3093357f2", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -668,7 +668,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(span, ast::ExprKind::MethodCall(segment, args))\n     }\n     fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr> {\n-        self.expr(b.span, ast::ExprKind::Block(b))\n+        self.expr(b.span, ast::ExprKind::Block(b, None))\n     }\n     fn field_imm(&self, span: Span, ident: Ident, e: P<ast::Expr>) -> ast::Field {\n         ast::Field {"}, {"sha": "29cc208c06b1a4154064a4fdcd603392f2b0698a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -1256,7 +1256,10 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                                   folder.fold_expr(body),\n                                   folder.new_span(span))\n             }\n-            ExprKind::Block(blk) => ExprKind::Block(folder.fold_block(blk)),\n+            ExprKind::Block(blk, opt_label) => {\n+                ExprKind::Block(folder.fold_block(blk),\n+                                opt_label.map(|label| folder.fold_label(label)))\n+            }\n             ExprKind::Assign(el, er) => {\n                 ExprKind::Assign(folder.fold_expr(el), folder.fold_expr(er))\n             }"}, {"sha": "531483e7de120efd0fa8c06d554d0621d3a874b1", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -26,7 +26,7 @@ pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n         ast::ExprKind::If(..) |\n         ast::ExprKind::IfLet(..) |\n         ast::ExprKind::Match(..) |\n-        ast::ExprKind::Block(_) |\n+        ast::ExprKind::Block(..) |\n         ast::ExprKind::While(..) |\n         ast::ExprKind::WhileLet(..) |\n         ast::ExprKind::Loop(..) |"}, {"sha": "7b91c49170068c8a4f0e02f26dc20e7a7708bae3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -128,7 +128,7 @@ macro_rules! maybe_whole_expr {\n                 token::NtBlock(ref block) => {\n                     $p.bump();\n                     let span = $p.span;\n-                    let kind = ExprKind::Block((*block).clone());\n+                    let kind = ExprKind::Block((*block).clone(), None);\n                     return Ok($p.mk_expr(span, kind, ThinVec::new()));\n                 }\n                 _ => {},\n@@ -2244,7 +2244,7 @@ impl<'a> Parser<'a> {\n                 };\n             }\n             token::OpenDelim(token::Brace) => {\n-                return self.parse_block_expr(lo, BlockCheckMode::Default, attrs);\n+                return self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs);\n             }\n             token::BinOp(token::Or) | token::OrOr => {\n                 return self.parse_lambda_expr(attrs);\n@@ -2318,7 +2318,13 @@ impl<'a> Parser<'a> {\n                     if self.eat_keyword(keywords::Loop) {\n                         return self.parse_loop_expr(Some(label), lo, attrs)\n                     }\n-                    let msg = \"expected `while`, `for`, or `loop` after a label\";\n+                    if self.token == token::OpenDelim(token::Brace) {\n+                        return self.parse_block_expr(Some(label),\n+                                                     lo,\n+                                                     BlockCheckMode::Default,\n+                                                     attrs);\n+                    }\n+                    let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n                     let mut err = self.fatal(msg);\n                     err.span_label(self.span, msg);\n                     return Err(err);\n@@ -2338,6 +2344,7 @@ impl<'a> Parser<'a> {\n                 }\n                 if self.eat_keyword(keywords::Unsafe) {\n                     return self.parse_block_expr(\n+                        None,\n                         lo,\n                         BlockCheckMode::Unsafe(ast::UserProvided),\n                         attrs);\n@@ -2502,7 +2509,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a block or unsafe block\n-    pub fn parse_block_expr(&mut self, lo: Span, blk_mode: BlockCheckMode,\n+    pub fn parse_block_expr(&mut self, opt_label: Option<Label>,\n+                            lo: Span, blk_mode: BlockCheckMode,\n                             outer_attrs: ThinVec<Attribute>)\n                             -> PResult<'a, P<Expr>> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n@@ -2511,7 +2519,7 @@ impl<'a> Parser<'a> {\n         attrs.extend(self.parse_inner_attributes()?);\n \n         let blk = self.parse_block_tail(lo, blk_mode)?;\n-        return Ok(self.mk_expr(blk.span, ExprKind::Block(blk), attrs));\n+        return Ok(self.mk_expr(blk.span, ExprKind::Block(blk, opt_label), attrs));\n     }\n \n     /// parse a.b or a(13) or a[4] or just a\n@@ -3261,7 +3269,7 @@ impl<'a> Parser<'a> {\n                 // If an explicit return type is given, require a\n                 // block to appear (RFC 968).\n                 let body_lo = self.span;\n-                self.parse_block_expr(body_lo, BlockCheckMode::Default, ThinVec::new())?\n+                self.parse_block_expr(None, body_lo, BlockCheckMode::Default, ThinVec::new())?\n             }\n         };\n \n@@ -3277,7 +3285,7 @@ impl<'a> Parser<'a> {\n             return self.parse_if_expr(ThinVec::new());\n         } else {\n             let blk = self.parse_block()?;\n-            return Ok(self.mk_expr(blk.span, ExprKind::Block(blk), ThinVec::new()));\n+            return Ok(self.mk_expr(blk.span, ExprKind::Block(blk, None), ThinVec::new()));\n         }\n     }\n "}, {"sha": "0fe48f791dcb5f26d8fbdfe77d6cebb185fce352", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -1791,7 +1791,7 @@ impl<'a> State<'a> {\n                         self.print_else(e.as_ref().map(|e| &**e))\n                     }\n                     // \"final else\"\n-                    ast::ExprKind::Block(ref b) => {\n+                    ast::ExprKind::Block(ref b, _) => {\n                         self.cbox(INDENT_UNIT - 1)?;\n                         self.ibox(0)?;\n                         self.s.word(\" else \")?;\n@@ -2181,7 +2181,11 @@ impl<'a> State<'a> {\n                 // empty box to satisfy the close.\n                 self.ibox(0)?;\n             }\n-            ast::ExprKind::Block(ref blk) => {\n+            ast::ExprKind::Block(ref blk, opt_label) => {\n+                if let Some(label) = opt_label {\n+                    self.print_ident(label.ident)?;\n+                    self.word_space(\":\")?;\n+                }\n                 // containing cbox, will be closed by print-block at }\n                 self.cbox(INDENT_UNIT)?;\n                 // head-box, will be closed by print-block after {\n@@ -2694,7 +2698,12 @@ impl<'a> State<'a> {\n         self.word_space(\"=>\")?;\n \n         match arm.body.node {\n-            ast::ExprKind::Block(ref blk) => {\n+            ast::ExprKind::Block(ref blk, opt_label) => {\n+                if let Some(label) = opt_label {\n+                    self.print_ident(label.ident)?;\n+                    self.word_space(\":\")?;\n+                }\n+\n                 // the block will close the pattern's ibox\n                 self.print_block_unclosed_indent(blk, INDENT_UNIT)?;\n "}, {"sha": "2013e838c05cc7f1c747afb8747833dc55834de8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f5893610b8511eefde072b580e7f7a286aa422/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=11f5893610b8511eefde072b580e7f7a286aa422", "patch": "@@ -736,7 +736,10 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n                              expression.span,\n                              expression.id)\n         }\n-        ExprKind::Block(ref block) => visitor.visit_block(block),\n+        ExprKind::Block(ref block, ref opt_label) => {\n+            walk_list!(visitor, visit_label, opt_label);\n+            visitor.visit_block(block);\n+        }\n         ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n             visitor.visit_expr(left_hand_expression);\n             visitor.visit_expr(right_hand_expression);"}]}