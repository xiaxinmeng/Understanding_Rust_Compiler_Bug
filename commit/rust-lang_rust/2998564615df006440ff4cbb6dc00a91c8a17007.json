{"sha": "2998564615df006440ff4cbb6dc00a91c8a17007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTg1NjQ2MTVkZjAwNjQ0MGZmNGNiYjZkYzAwYTkxYzhhMTcwMDc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-06T05:46:24Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-06T05:46:49Z"}, "message": "Refactor away `ExternalExports`", "tree": {"sha": "f7e29b936735fe2073a1632942d18dc00414929e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e29b936735fe2073a1632942d18dc00414929e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2998564615df006440ff4cbb6dc00a91c8a17007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2998564615df006440ff4cbb6dc00a91c8a17007", "html_url": "https://github.com/rust-lang/rust/commit/2998564615df006440ff4cbb6dc00a91c8a17007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2998564615df006440ff4cbb6dc00a91c8a17007/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbae67aea7f1979251c855c0bd25f5b1a664b53a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbae67aea7f1979251c855c0bd25f5b1a664b53a", "html_url": "https://github.com/rust-lang/rust/commit/cbae67aea7f1979251c855c0bd25f5b1a664b53a"}], "stats": {"total": 34, "additions": 3, "deletions": 31}, "files": [{"sha": "77feec93268f10ad15dd485e05ddd4aca4c6b54d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2998564615df006440ff4cbb6dc00a91c8a17007", "patch": "@@ -761,7 +761,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         freevars,\n         export_map,\n         trait_map,\n-        external_exports,\n         glob_map,\n     } = time(time_passes,\n              \"resolution\",\n@@ -822,9 +821,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n         analysis.access_levels =\n             time(time_passes, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx,\n-                                           &analysis.export_map,\n-                                           external_exports)\n+                rustc_privacy::check_crate(tcx, &analysis.export_map)\n             });\n \n         // Do not move this check past lint"}, {"sha": "82f4ad1d746512abbfc4381712d7a35672dfa561", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2998564615df006440ff4cbb6dc00a91c8a17007", "patch": "@@ -42,7 +42,6 @@ use rustc::middle::cstore::CrateStore;\n use rustc::middle::def::{self, Def};\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n-use rustc::middle::privacy::ExternalExports;\n use rustc::middle::ty::{self, TyCtxt};\n use rustc::util::nodemap::{NodeMap, NodeSet};\n use rustc::front::map as ast_map;\n@@ -477,7 +476,6 @@ struct PrivacyVisitor<'a, 'tcx: 'a> {\n     curitem: ast::NodeId,\n     in_foreign: bool,\n     parents: NodeMap<ast::NodeId>,\n-    external_exports: ExternalExports,\n }\n \n #[derive(Debug)]\n@@ -1568,10 +1566,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n     }\n }\n \n-pub fn check_crate(tcx: &TyCtxt,\n-                   export_map: &def::ExportMap,\n-                   external_exports: ExternalExports)\n-                   -> AccessLevels {\n+pub fn check_crate(tcx: &TyCtxt, export_map: &def::ExportMap) -> AccessLevels {\n     let _task = tcx.dep_graph.in_task(DepNode::Privacy);\n \n     let krate = tcx.map.krate();\n@@ -1594,7 +1589,6 @@ pub fn check_crate(tcx: &TyCtxt,\n         in_foreign: false,\n         tcx: tcx,\n         parents: visitor.parents,\n-        external_exports: external_exports,\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n "}, {"sha": "884196a97af8f08713ec0bb795a4f6291a977553", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2998564615df006440ff4cbb6dc00a91c8a17007", "patch": "@@ -289,7 +289,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         krate: crate_id,\n                         index: CRATE_DEF_INDEX,\n                     };\n-                    self.external_exports.insert(def_id);\n                     let parent_link = ModuleParentLink(parent, name);\n                     let def = Def::Mod(def_id);\n                     let module = self.new_extern_crate_module(parent_link, def, is_public, item.id);\n@@ -495,15 +494,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             modifiers = modifiers | DefModifiers::IMPORTABLE;\n         }\n \n-        let is_exported = is_public &&\n-                          match new_parent.def_id() {\n-            None => true,\n-            Some(did) => self.external_exports.contains(&did),\n-        };\n-        if is_exported {\n-            self.external_exports.insert(def.def_id());\n-        }\n-\n         match def {\n             Def::Mod(_) | Def::ForeignMod(_) | Def::Enum(..) | Def::TyAlias(..) => {\n                 debug!(\"(building reduced graph for external crate) building module {} {}\",\n@@ -552,10 +542,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                            trait_item_name);\n \n                     self.trait_item_map.insert((trait_item_name, def_id), trait_item_def.def_id());\n-\n-                    if is_exported {\n-                        self.external_exports.insert(trait_item_def.def_id());\n-                    }\n                 }\n \n                 let parent_link = ModuleParentLink(new_parent, name);"}, {"sha": "970f54207baf57d4f38794b4f2278de7ea0b0293", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2998564615df006440ff4cbb6dc00a91c8a17007/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2998564615df006440ff4cbb6dc00a91c8a17007", "patch": "@@ -55,10 +55,9 @@ use rustc::middle::cstore::{CrateStore, DefLike, DlDef};\n use rustc::middle::def::*;\n use rustc::middle::def_id::DefId;\n use rustc::middle::pat_util::pat_bindings;\n-use rustc::middle::privacy::ExternalExports;\n use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n+use rustc::util::nodemap::{NodeMap, FnvHashMap};\n \n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n@@ -1093,7 +1092,6 @@ pub struct Resolver<'a, 'tcx: 'a> {\n     freevars_seen: NodeMap<NodeMap<usize>>,\n     export_map: ExportMap,\n     trait_map: TraitMap,\n-    external_exports: ExternalExports,\n \n     // Whether or not to print error messages. Can be set to true\n     // when getting additional info for error message suggestions,\n@@ -1184,7 +1182,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             trait_map: NodeMap(),\n             used_imports: HashSet::new(),\n             used_crates: HashSet::new(),\n-            external_exports: DefIdSet(),\n \n             emit_errors: true,\n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n@@ -3716,7 +3713,6 @@ pub struct CrateMap {\n     pub freevars: FreevarMap,\n     pub export_map: ExportMap,\n     pub trait_map: TraitMap,\n-    pub external_exports: ExternalExports,\n     pub glob_map: Option<GlobMap>,\n }\n \n@@ -3754,7 +3750,6 @@ pub fn resolve_crate<'a, 'tcx>(session: &'a Session,\n         freevars: resolver.freevars,\n         export_map: resolver.export_map,\n         trait_map: resolver.trait_map,\n-        external_exports: resolver.external_exports,\n         glob_map: if resolver.make_glob_map {\n             Some(resolver.glob_map)\n         } else {"}]}