{"sha": "79feb9476d9275cb6abac88affdbfd3c922a2805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZmViOTQ3NmQ5Mjc1Y2I2YWJhYzg4YWZmZGJmZDNjOTIyYTI4MDU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-09T09:10:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-27T06:57:23Z"}, "message": "allow `InternedString` to be compared to `str` directly", "tree": {"sha": "9dceb45f241944d944ac305be8611f6eb6085ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dceb45f241944d944ac305be8611f6eb6085ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79feb9476d9275cb6abac88affdbfd3c922a2805", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAljYt9MACgkQpp+NIls6\n19nJ1g//TrvO8mHv750MtiIRRiYad52wfDlX+CqqDHoiwDdyp0+PZ3UALMmp3Esv\nmDpFWkq2/U/OnUgVWRF2TzZpwdPHy4mkhvb3RpoUbqk5exFhh5W0dm8nimaJCySA\nWFPy9QhwzTENDFt6StZmLwMCWIYy/RAdYZFWzmvA3s1O92ZV5jPVdR+y9UAcCZEK\nS2N6Fhw6L5X6StUX46/PWihlbg/B0WDAmfvOM8Ev3OFD6Ca0QEdlPbzSlNCHSntG\n9araQF88YGRnGEzhgdFSUU8+CoNftDNJ0SSb74nsPTnolL4FLwhNv7421Ywd1j7A\n8DZHrN6cAjoPkQDzNe1+V0m8FUwTrwAszi5tcbrFCc+1t5NLF2tdkBPpjBHWq43U\nWdwbwYNSrX4xQE7Xt7RNNhweeGqVYssj7/582JKyJa9sxCvRc8qefPL4Wm8Z/twd\nOCXldvngzdIYtdMEPq+0AWyDVHY7ubSRXjI/vt20S4uImonc9msEyqGKI7Pvj/wm\n8t76oz/P169V/5Hitmbixro1ElbhBOzAknqhmUxM2IM+VGMsb0/i79EnEFp10ECT\nJa7vRb06Mjtjbw8EzpWkF4jdqtT1MQZKMLoIfAvPyBqzZTC9c5c9kiP8Kw8+gMn0\n4179zd8iXBowIRALTLAixeng2riUkDeHx11L6mXuOdUPivvO/SE=\n=xArl\n-----END PGP SIGNATURE-----", "payload": "tree 9dceb45f241944d944ac305be8611f6eb6085ea7\nparent 7846dbe0c8de17f59cdfc3d2b914d58faad7eade\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1489050618 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1490597843 +0200\n\nallow `InternedString` to be compared to `str` directly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79feb9476d9275cb6abac88affdbfd3c922a2805", "html_url": "https://github.com/rust-lang/rust/commit/79feb9476d9275cb6abac88affdbfd3c922a2805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79feb9476d9275cb6abac88affdbfd3c922a2805/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7846dbe0c8de17f59cdfc3d2b914d58faad7eade", "url": "https://api.github.com/repos/rust-lang/rust/commits/7846dbe0c8de17f59cdfc3d2b914d58faad7eade", "html_url": "https://github.com/rust-lang/rust/commit/7846dbe0c8de17f59cdfc3d2b914d58faad7eade"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "2acbeee426beead4b72b286e16bfffacf89957ad", "filename": "src/libsyntax/symbol.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/79feb9476d9275cb6abac88affdbfd3c922a2805/src%2Flibsyntax%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79feb9476d9275cb6abac88affdbfd3c922a2805/src%2Flibsyntax%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsymbol.rs?ref=79feb9476d9275cb6abac88affdbfd3c922a2805", "patch": "@@ -72,9 +72,9 @@ impl Decodable for Symbol {\n     }\n }\n \n-impl<'a> PartialEq<&'a str> for Symbol {\n-    fn eq(&self, other: &&str) -> bool {\n-        *self.as_str() == **other\n+impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n+    fn eq(&self, other: &T) -> bool {\n+        self.as_str() == other.deref()\n     }\n }\n \n@@ -244,11 +244,47 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n /// destroyed. In particular, they must not access string contents. This can\n /// be fixed in the future by just leaking all strings until thread death\n /// somehow.\n-#[derive(Clone, PartialEq, Hash, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Hash, PartialOrd, Eq, Ord)]\n pub struct InternedString {\n     string: &'static str,\n }\n \n+impl<U: ?Sized> ::std::convert::AsRef<U> for InternedString where str: ::std::convert::AsRef<U> {\n+    fn as_ref(&self) -> &U {\n+        self.string.as_ref()\n+    }\n+}\n+\n+impl<T: ::std::ops::Deref<Target = str>> ::std::cmp::PartialEq<T> for InternedString {\n+    fn eq(&self, other: &T) -> bool {\n+        self.string == other.deref()\n+    }\n+}\n+\n+impl ::std::cmp::PartialEq<InternedString> for str {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        self == other.string\n+    }\n+}\n+\n+impl<'a> ::std::cmp::PartialEq<InternedString> for &'a str {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        *self == other.string\n+    }\n+}\n+\n+impl ::std::cmp::PartialEq<InternedString> for String {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        self == other.string\n+    }\n+}\n+\n+impl<'a> ::std::cmp::PartialEq<InternedString> for &'a String {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        *self == other.string\n+    }\n+}\n+\n impl !Send for InternedString { }\n \n impl ::std::ops::Deref for InternedString {"}]}