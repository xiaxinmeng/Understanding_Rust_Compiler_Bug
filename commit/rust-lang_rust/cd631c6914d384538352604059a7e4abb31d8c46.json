{"sha": "cd631c6914d384538352604059a7e4abb31d8c46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNjMxYzY5MTRkMzg0NTM4MzUyNjA0MDU5YTdlNGFiYjMxZDhjNDY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-20T14:51:09Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-20T21:15:44Z"}, "message": "Register snapshot for 9006c3c", "tree": {"sha": "628f7254ee3674c7b603721aefb8cc1aefba1c03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/628f7254ee3674c7b603721aefb8cc1aefba1c03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd631c6914d384538352604059a7e4abb31d8c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd631c6914d384538352604059a7e4abb31d8c46", "html_url": "https://github.com/rust-lang/rust/commit/cd631c6914d384538352604059a7e4abb31d8c46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd631c6914d384538352604059a7e4abb31d8c46/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf41dafcfb6c979efb4e2438e047e1a54045eec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf41dafcfb6c979efb4e2438e047e1a54045eec", "html_url": "https://github.com/rust-lang/rust/commit/3bf41dafcfb6c979efb4e2438e047e1a54045eec"}], "stats": {"total": 349, "additions": 9, "deletions": 340}, "files": [{"sha": "b516d9b4d3149300637ab5948140af4113adc712", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -174,61 +174,17 @@ struct RcBox<T> {\n /// See the [module level documentation](../index.html) for more details.\n #[unsafe_no_drop_flag]\n #[stable]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct Rc<T> {\n     // FIXME #12808: strange names to try to avoid interfering with field accesses of the contained\n     // type via Deref\n     _ptr: NonZero<*mut RcBox<T>>,\n-    _nosend: marker::NoSend,\n-    _noshare: marker::NoSync\n }\n \n-/// An immutable reference-counted pointer type.\n-///\n-/// See the [module level documentation](../index.html) for more details.\n-#[unsafe_no_drop_flag]\n-#[stable]\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-pub struct Rc<T> {\n-    // FIXME #12808: strange names to try to avoid interfering with field accesses of the contained\n-    // type via Deref\n-    _ptr: NonZero<*mut RcBox<T>>,\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl<T> !marker::Send for Rc<T> {}\n \n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl<T> !marker::Sync for Rc<T> {}\n \n impl<T> Rc<T> {\n-    /// Constructs a new `Rc<T>`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::rc::Rc;\n-    ///\n-    /// let five = Rc::new(5i);\n-    /// ```\n-    #[stable]\n-    #[cfg(stage0)] // NOTE remove after next snapshot\n-    pub fn new(value: T) -> Rc<T> {\n-        unsafe {\n-            Rc {\n-                // there is an implicit weak pointer owned by all the strong pointers, which\n-                // ensures that the weak destructor never frees the allocation while the strong\n-                // destructor is running, even if the weak pointer is stored inside the strong one.\n-                _ptr: NonZero::new(transmute(box RcBox {\n-                    value: value,\n-                    strong: Cell::new(1),\n-                    weak: Cell::new(1)\n-                })),\n-                _nosend: marker::NoSend,\n-                _noshare: marker::NoSync\n-            }\n-        }\n-    }\n \n     /// Constructs a new `Rc<T>`.\n     ///\n@@ -240,7 +196,6 @@ impl<T> Rc<T> {\n     /// let five = Rc::new(5i);\n     /// ```\n     #[stable]\n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     pub fn new(value: T) -> Rc<T> {\n         unsafe {\n             Rc {\n@@ -267,29 +222,6 @@ impl<T> Rc<T> {\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n-    #[cfg(stage0)] // NOTE remove after next snapshot\n-    #[unstable = \"Weak pointers may not belong in this module\"]\n-    pub fn downgrade(&self) -> Weak<T> {\n-        self.inc_weak();\n-        Weak {\n-            _ptr: self._ptr,\n-            _nosend: marker::NoSend,\n-            _noshare: marker::NoSync\n-        }\n-    }\n-\n-    /// Downgrades the `Rc<T>` to a `Weak<T>` reference.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::rc::Rc;\n-    ///\n-    /// let five = Rc::new(5i);\n-    ///\n-    /// let weak_five = five.downgrade();\n-    /// ```\n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     #[unstable = \"Weak pointers may not belong in this module\"]\n     pub fn downgrade(&self) -> Weak<T> {\n         self.inc_weak();\n@@ -483,25 +415,6 @@ impl<T> Drop for Rc<T> {\n \n #[stable]\n impl<T> Clone for Rc<T> {\n-    /// Makes a clone of the `Rc<T>`.\n-    ///\n-    /// This increases the strong reference count.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::rc::Rc;\n-    ///\n-    /// let five = Rc::new(5i);\n-    ///\n-    /// five.clone();\n-    /// ```\n-    #[inline]\n-    #[cfg(stage0)] // NOTE remove after next snapshot\n-    fn clone(&self) -> Rc<T> {\n-        self.inc_strong();\n-        Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n-    }\n \n     /// Makes a clone of the `Rc<T>`.\n     ///\n@@ -517,7 +430,6 @@ impl<T> Clone for Rc<T> {\n     /// five.clone();\n     /// ```\n     #[inline]\n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     fn clone(&self) -> Rc<T> {\n         self.inc_strong();\n         Rc { _ptr: self._ptr }\n@@ -714,66 +626,21 @@ impl<T: fmt::String> fmt::String for Rc<T> {\n /// See the [module level documentation](../index.html) for more.\n #[unsafe_no_drop_flag]\n #[unstable = \"Weak pointers may not belong in this module.\"]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct Weak<T> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _ptr: NonZero<*mut RcBox<T>>,\n-    _nosend: marker::NoSend,\n-    _noshare: marker::NoSync\n }\n \n-/// A weak version of `Rc<T>`.\n-///\n-/// Weak references do not count when determining if the inner value should be dropped.\n-///\n-/// See the [module level documentation](../index.html) for more.\n-#[unsafe_no_drop_flag]\n-#[unstable = \"Weak pointers may not belong in this module.\"]\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-pub struct Weak<T> {\n-    // FIXME #12808: strange names to try to avoid interfering with\n-    // field accesses of the contained type via Deref\n-    _ptr: NonZero<*mut RcBox<T>>,\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n #[allow(unstable)]\n impl<T> !marker::Send for Weak<T> {}\n \n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n #[allow(unstable)]\n impl<T> !marker::Sync for Weak<T> {}\n \n \n #[unstable = \"Weak pointers may not belong in this module.\"]\n impl<T> Weak<T> {\n-    /// Upgrades a weak reference to a strong reference.\n-    ///\n-    /// Upgrades the `Weak<T>` reference to an `Rc<T>`, if possible.\n-    ///\n-    /// Returns `None` if there were no strong references and the data was destroyed.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::rc::Rc;\n-    ///\n-    /// let five = Rc::new(5i);\n-    ///\n-    /// let weak_five = five.downgrade();\n-    ///\n-    /// let strong_five: Option<Rc<_>> = weak_five.upgrade();\n-    /// ```\n-    #[cfg(stage0)] // NOTE remove after next snapshot\n-    pub fn upgrade(&self) -> Option<Rc<T>> {\n-        if self.strong() == 0 {\n-            None\n-        } else {\n-            self.inc_strong();\n-            Some(Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync })\n-        }\n-    }\n \n     /// Upgrades a weak reference to a strong reference.\n     ///\n@@ -792,7 +659,6 @@ impl<T> Weak<T> {\n     ///\n     /// let strong_five: Option<Rc<_>> = weak_five.upgrade();\n     /// ```\n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n         if self.strong() == 0 {\n             None\n@@ -849,25 +715,6 @@ impl<T> Drop for Weak<T> {\n \n #[unstable = \"Weak pointers may not belong in this module.\"]\n impl<T> Clone for Weak<T> {\n-    /// Makes a clone of the `Weak<T>`.\n-    ///\n-    /// This increases the weak reference count.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::rc::Rc;\n-    ///\n-    /// let weak_five = Rc::new(5i).downgrade();\n-    ///\n-    /// weak_five.clone();\n-    /// ```\n-    #[inline]\n-    #[cfg(stage0)] // NOTE remove after next snapshot\n-    fn clone(&self) -> Weak<T> {\n-        self.inc_weak();\n-        Weak { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n-    }\n \n     /// Makes a clone of the `Weak<T>`.\n     ///\n@@ -883,7 +730,6 @@ impl<T> Clone for Weak<T> {\n     /// weak_five.clone();\n     /// ```\n     #[inline]\n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     fn clone(&self) -> Weak<T> {\n         self.inc_weak();\n         Weak { _ptr: self._ptr }"}, {"sha": "90b61d3c5d1267bd4fe412440bebe445faa54bf0", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -18,9 +18,6 @@ use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::default::Default;\n use core::fmt::Show;\n use core::fmt;\n-// NOTE(stage0) remove import after a snapshot\n-#[cfg(stage0)]\n-use core::hash::Hash;\n use core::iter::{Peekable, Map, FromIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub};\n "}, {"sha": "a987a0a5068a887341e585b5da5c31f35c1bf7d8", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -376,16 +376,6 @@ pub struct ContravariantLifetime<'a>;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub struct InvariantLifetime<'a>;\n \n-/// A type which is considered \"not sendable\", meaning that it cannot\n-/// be safely sent between tasks, even if it is owned. This is\n-/// typically embedded in other types, such as `Gc`, to ensure that\n-/// their instances remain thread-local.\n-#[unstable = \"likely to change with new variance strategy\"]\n-#[lang=\"no_send_bound\"]\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n-pub struct NoSend;\n-\n /// A type which is considered \"not POD\", meaning that it is not\n /// implicitly copyable. This is typically embedded in other types to\n /// ensure that they are never copied, even if they lack a destructor.\n@@ -395,15 +385,6 @@ pub struct NoSend;\n #[allow(missing_copy_implementations)]\n pub struct NoCopy;\n \n-/// A type which is considered \"not sync\", meaning that\n-/// its contents are not threadsafe, hence they cannot be\n-/// shared between tasks.\n-#[unstable = \"likely to change with new variance strategy\"]\n-#[lang=\"no_sync_bound\"]\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n-pub struct NoSync;\n-\n /// A type which is considered managed by the GC. This is typically\n /// embedded in other types.\n #[unstable = \"likely to change with new variance strategy\"]"}, {"sha": "b4b2e1b63e80cfe4c0f950df38c12418ef5160e6", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -22,9 +22,6 @@ use util::nodemap::{FnvHashMap, FnvHashSet, NodeMap};\n use util::common::can_reach;\n \n use std::cell::RefCell;\n-// NOTE(stage0) remove import after a snapshot\n-#[cfg(stage0)]\n-use std::hash::{Hash};\n use syntax::codemap::Span;\n use syntax::{ast, visit};\n use syntax::ast::{Block, Item, FnDecl, NodeId, Arm, Pat, Stmt, Expr, Local};"}, {"sha": "d98f155ba83dcd30e915b1566dbead186491ec60", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -21,9 +21,6 @@ use prelude::v1::*;\n use collections::HashMap;\n use ffi::CString;\n use fmt;\n-// NOTE(stage0) remove import after a snapshot\n-#[cfg(stage0)]\n-use hash::Hash;\n use io::pipe::{PipeStream, PipePair};\n use io::{IoResult, IoError};\n use io;"}, {"sha": "61ffb532d36ad49cb20a97822371d53ac7af5b73", "filename": "src/libstd/sync/mpsc/blocking.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -14,8 +14,6 @@ use thread::Thread;\n use sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n use sync::Arc;\n use marker::{Sync, Send};\n-#[cfg(stage0)] // NOTE remove use after next snapshot\n-use marker::{NoSend, NoSync};\n use mem;\n use clone::Clone;\n \n@@ -32,42 +30,14 @@ pub struct SignalToken {\n     inner: Arc<Inner>,\n }\n \n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct WaitToken {\n     inner: Arc<Inner>,\n-    no_send: NoSend,\n-    no_sync: NoSync,\n }\n \n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-pub struct WaitToken {\n-    inner: Arc<Inner>,\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl !Send for WaitToken {}\n \n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl !Sync for WaitToken {}\n \n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n-pub fn tokens() -> (WaitToken, SignalToken) {\n-    let inner = Arc::new(Inner {\n-        thread: Thread::current(),\n-        woken: ATOMIC_BOOL_INIT,\n-    });\n-    let wait_token = WaitToken {\n-        inner: inner.clone(),\n-        no_send: NoSend,\n-        no_sync: NoSync,\n-    };\n-    let signal_token = SignalToken {\n-        inner: inner\n-    };\n-    (wait_token, signal_token)\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n pub fn tokens() -> (WaitToken, SignalToken) {\n     let inner = Arc::new(Inner {\n         thread: Thread::current(),"}, {"sha": "375a85eb879c4c505c5a8b29030cd0c1eb053591", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -370,22 +370,10 @@ unsafe impl<T:Send> Send for Sender<T> { }\n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n #[stable]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct SyncSender<T> {\n     inner: Arc<RacyCell<sync::Packet<T>>>,\n-    // can't share in an arc\n-    _marker: marker::NoSync,\n }\n \n-/// The sending-half of Rust's synchronous channel type. This half can only be\n-/// owned by one task, but it can be cloned to send to other tasks.\n-#[stable]\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-pub struct SyncSender<T> {\n-    inner: Arc<RacyCell<sync::Packet<T>>>,\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl<T> !marker::Sync for SyncSender<T> {}\n \n /// An error returned from the `send` function on channels.\n@@ -689,12 +677,7 @@ impl<T: Send> Drop for Sender<T> {\n ////////////////////////////////////////////////////////////////////////////////\n \n impl<T: Send> SyncSender<T> {\n-    #[cfg(stage0)] // NOTE remove impl after next snapshot\n-    fn new(inner: Arc<RacyCell<sync::Packet<T>>>) -> SyncSender<T> {\n-        SyncSender { inner: inner, _marker: marker::NoSync }\n-    }\n \n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     fn new(inner: Arc<RacyCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner }\n     }"}, {"sha": "e726b1f484601b40a2d23ac9a312f613f946f6b0", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -66,24 +66,12 @@ use sync::mpsc::blocking::{self, SignalToken};\n \n /// The \"receiver set\" of the select interface. This structure is used to manage\n /// a set of receivers which are being selected over.\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct Select {\n     head: *mut Handle<'static, ()>,\n     tail: *mut Handle<'static, ()>,\n     next_id: Cell<uint>,\n-    marker1: marker::NoSend,\n }\n \n-/// The \"receiver set\" of the select interface. This structure is used to manage\n-/// a set of receivers which are being selected over.\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-pub struct Select {\n-    head: *mut Handle<'static, ()>,\n-    tail: *mut Handle<'static, ()>,\n-    next_id: Cell<uint>,\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl !marker::Send for Select {}\n \n /// A handle to a receiver which is currently a member of a `Select` set of\n@@ -121,27 +109,12 @@ pub trait Packet {\n }\n \n impl Select {\n-    /// Creates a new selection structure. This set is initially empty and\n-    /// `wait` will panic!() if called.\n-    ///\n-    /// Usage of this struct directly can sometimes be burdensome, and usage is\n-    /// rather much easier through the `select!` macro.\n-    #[cfg(stage0)] // NOTE remove impl after next snapshot\n-    pub fn new() -> Select {\n-        Select {\n-            marker1: marker::NoSend,\n-            head: 0 as *mut Handle<'static, ()>,\n-            tail: 0 as *mut Handle<'static, ()>,\n-            next_id: Cell::new(1),\n-        }\n-    }\n \n     /// Creates a new selection structure. This set is initially empty and\n     /// `wait` will panic!() if called.\n     ///\n     /// Usage of this struct directly can sometimes be burdensome, and usage is\n     /// rather much easier through the `select!` macro.\n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     pub fn new() -> Select {\n         Select {\n             head: 0 as *mut Handle<'static, ()>,"}, {"sha": "6ddfe3e075b8c80272cb3d6c7fcb5060af92e8c5", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -160,33 +160,14 @@ unsafe impl Sync for StaticMutex {}\n /// Deref and DerefMut implementations\n #[must_use]\n #[stable]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct MutexGuard<'a, T: 'a> {\n     // funny underscores due to how Deref/DerefMut currently work (they\n     // disregard field privacy).\n     __lock: &'a StaticMutex,\n     __data: &'a UnsafeCell<T>,\n     __poison: poison::Guard,\n-    __marker: marker::NoSend,\n }\n \n-/// An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n-/// dropped (falls out of scope), the lock will be unlocked.\n-///\n-/// The data protected by the mutex can be access through this guard via its\n-/// Deref and DerefMut implementations\n-#[must_use]\n-#[stable]\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-pub struct MutexGuard<'a, T: 'a> {\n-    // funny underscores due to how Deref/DerefMut currently work (they\n-    // disregard field privacy).\n-    __lock: &'a StaticMutex,\n-    __data: &'a UnsafeCell<T>,\n-    __poison: poison::Guard,\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl<'a, T> !marker::Send for MutexGuard<'a, T> {}\n \n /// Static initialization of a mutex. This constant can be used to initialize\n@@ -299,20 +280,7 @@ impl StaticMutex {\n }\n \n impl<'mutex, T> MutexGuard<'mutex, T> {\n-    #[cfg(stage0)] // NOTE remove afte next snapshot\n-    fn new(lock: &'mutex StaticMutex, data: &'mutex UnsafeCell<T>)\n-           -> LockResult<MutexGuard<'mutex, T>> {\n-        poison::map_result(lock.poison.borrow(), |guard| {\n-            MutexGuard {\n-                __lock: lock,\n-                __data: data,\n-                __poison: guard,\n-                __marker: marker::NoSend,\n-            }\n-        })\n-    }\n \n-    #[cfg(not(stage0))] // NOTE remove cfg afte next snapshot\n     fn new(lock: &'mutex StaticMutex, data: &'mutex UnsafeCell<T>)\n            -> LockResult<MutexGuard<'mutex, T>> {\n         poison::map_result(lock.poison.borrow(), |guard| {"}, {"sha": "35d305466b5554a0a93c82e62639ed170cc0e70d", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -110,50 +110,23 @@ pub const RW_LOCK_INIT: StaticRwLock = StaticRwLock {\n /// dropped.\n #[must_use]\n #[stable]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n pub struct RwLockReadGuard<'a, T: 'a> {\n     __lock: &'a StaticRwLock,\n     __data: &'a UnsafeCell<T>,\n-    __marker: marker::NoSend,\n }\n \n-/// RAII structure used to release the shared read access of a lock when\n-/// dropped.\n-#[must_use]\n-#[stable]\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-pub struct RwLockReadGuard<'a, T: 'a> {\n-    __lock: &'a StaticRwLock,\n-    __data: &'a UnsafeCell<T>,\n-}\n-\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl<'a, T> !marker::Send for RwLockReadGuard<'a, T> {}\n \n /// RAII structure used to release the exclusive write access of a lock when\n /// dropped.\n #[must_use]\n #[stable]\n-#[cfg(stage0)] // NOTE remove impl after next snapshot\n-pub struct RwLockWriteGuard<'a, T: 'a> {\n-    __lock: &'a StaticRwLock,\n-    __data: &'a UnsafeCell<T>,\n-    __poison: poison::Guard,\n-    __marker: marker::NoSend,\n-}\n-\n-/// RAII structure used to release the exclusive write access of a lock when\n-/// dropped.\n-#[must_use]\n-#[stable]\n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n pub struct RwLockWriteGuard<'a, T: 'a> {\n     __lock: &'a StaticRwLock,\n     __data: &'a UnsafeCell<T>,\n     __poison: poison::Guard,\n }\n \n-#[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n impl<'a, T> !marker::Send for RwLockWriteGuard<'a, T> {}\n \n impl<T: Send + Sync> RwLock<T> {\n@@ -332,19 +305,7 @@ impl StaticRwLock {\n }\n \n impl<'rwlock, T> RwLockReadGuard<'rwlock, T> {\n-    #[cfg(stage0)] // NOTE remove impl after next snapshot\n-    fn new(lock: &'rwlock StaticRwLock, data: &'rwlock UnsafeCell<T>)\n-           -> LockResult<RwLockReadGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |_| {\n-            RwLockReadGuard {\n-                __lock: lock,\n-                __data: data,\n-                __marker: marker::NoSend,\n-            }\n-        })\n-    }\n \n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     fn new(lock: &'rwlock StaticRwLock, data: &'rwlock UnsafeCell<T>)\n            -> LockResult<RwLockReadGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.borrow(), |_| {\n@@ -356,20 +317,7 @@ impl<'rwlock, T> RwLockReadGuard<'rwlock, T> {\n     }\n }\n impl<'rwlock, T> RwLockWriteGuard<'rwlock, T> {\n-    #[cfg(stage0)] // NOTE remove impl after next snapshot\n-    fn new(lock: &'rwlock StaticRwLock, data: &'rwlock UnsafeCell<T>)\n-           -> LockResult<RwLockWriteGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |guard| {\n-            RwLockWriteGuard {\n-                __lock: lock,\n-                __data: data,\n-                __poison: guard,\n-                __marker: marker::NoSend,\n-            }\n-        })\n-    }\n \n-    #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n     fn new(lock: &'rwlock StaticRwLock, data: &'rwlock UnsafeCell<T>)\n            -> LockResult<RwLockWriteGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.borrow(), |guard| {"}, {"sha": "8b50278573346c9883dab7bc683b55322993f5fd", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd631c6914d384538352604059a7e4abb31d8c46/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/cd631c6914d384538352604059a7e4abb31d8c46/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=cd631c6914d384538352604059a7e4abb31d8c46", "patch": "@@ -1,3 +1,12 @@\n+S 2015-01-20 9006c3c\n+  freebsd-x86_64 240b30b33263d175e30f925ed1e1e1a4e553a513\n+  linux-i386 544c2063b8d5035342c705b881b8868244c1e9a1\n+  linux-x86_64 eb41db80978210a013a8dcf8f4fe804969197337\n+  macos-i386 3ed08c5ae66367e85b8f2b207615d45bfd9cf89d\n+  macos-x86_64 d102760316b90b17d54b0bef02ca6dc35f82e6bd\n+  winnt-i386 6940fef6caa2f64d158b8f5eb00afd5c8e0c71a5\n+  winnt-x86_64 36b6f239fe1264bceb4b8202e692b7d49947eebe\n+\n S 2015-01-15 9ade482\n   freebsd-x86_64 eb8f52c6e8dc24a293456d5e4dc5d1072442e758\n   linux-i386 0197ad7179d74eba06a8b46432548caf226aa03d"}]}