{"sha": "be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMGQ2ZjFjMDYzNmIyYzdjM2M4ZGY4MTlkOGMyMDY2NjY5YzgwMjQ=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-06T08:22:32Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-09T07:41:26Z"}, "message": "Change Ord impl for ParamKindOrd\n\nUpdated tests and error msgs\n\nUpdate stderr from test\n\nUpdate w/ lcnr comments\n\nChange some tests around, and also updated Ord implementation for ParamKindOrd\n\nUpdate w/ nits from lcnr", "tree": {"sha": "5c38c608f74f76a1511f26fe0fc9fec0e6fc915a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c38c608f74f76a1511f26fe0fc9fec0e6fc915a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "html_url": "https://github.com/rust-lang/rust/commit/be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f461f5d1282ac58892b8985f1df7ea26df6613f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f461f5d1282ac58892b8985f1df7ea26df6613f", "html_url": "https://github.com/rust-lang/rust/commit/4f461f5d1282ac58892b8985f1df7ea26df6613f"}], "stats": {"total": 137, "additions": 82, "deletions": 55}, "files": [{"sha": "2f11596c22c04b6ac236bcb1b5945fab34d40165", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -35,6 +35,7 @@ use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n+use std::cmp::Ordering;\n use std::convert::TryFrom;\n use std::fmt;\n use std::iter;\n@@ -309,13 +310,37 @@ pub type GenericBounds = Vec<GenericBound>;\n /// Specifies the enforced ordering for generic parameters. In the future,\n /// if we wanted to relax this order, we could override `PartialEq` and\n /// `PartialOrd`, to allow the kinds to be unordered.\n-#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n+#[derive(PartialEq, Eq, Hash, Clone, Copy)]\n pub enum ParamKindOrd {\n     Lifetime,\n     Type,\n+    // `unordered` is only `true` if `sess.has_features().const_generics`\n+    // is active. Specifically, if it's only `min_const_generics`, it will still require\n+    // ordering consts after types.\n     Const { unordered: bool },\n }\n \n+impl Ord for ParamKindOrd {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        use ParamKindOrd::*;\n+        let to_int = |v| match v {\n+            Lifetime => 0,\n+            Type | Const { unordered: true } => 1,\n+            // technically both consts should be ordered equally,\n+            // but only one is ever encountered at a time, so this is\n+            // fine.\n+            Const { unordered: false } => 2,\n+        };\n+\n+        to_int(*self).cmp(&to_int(*other))\n+    }\n+}\n+impl PartialOrd for ParamKindOrd {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n impl fmt::Display for ParamKindOrd {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {"}, {"sha": "83f64793833be6e8b4edf629d390ca6fb661e62c", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -735,7 +735,6 @@ fn validate_generic_param_order<'a>(\n         }\n         let max_param = &mut max_param;\n         match max_param {\n-            Some(ParamKindOrd::Const { unordered: true }) if kind != ParamKindOrd::Lifetime => (),\n             Some(max_param) if *max_param > kind => {\n                 let entry = out_of_order.entry(kind).or_insert((*max_param, vec![]));\n                 entry.1.push(span);"}, {"sha": "2be100ae33662174e16a127c54c18e04a0e580ef", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -504,14 +504,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             GenericArg::Const(_) => ParamKindOrd::Const { unordered },\n         };\n \n-        // This note will be true as long as generic parameters are strictly ordered by their kind.\n-        let (first, last) =\n-            if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n-        err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n-\n-        if let Some(help) = help {\n-            err.help(help);\n+        // This note is only true when generic parameters are strictly ordered by their kind.\n+        if kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n+            let (first, last) =\n+                if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n+            err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n+            if let Some(help) = help {\n+                err.help(help);\n+            }\n         }\n+\n         err.emit();\n     }\n "}, {"sha": "687e8589bf0834c349f147c64820fb8d7f39d08c", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/argument_order.rs:9:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, T, U, const N: usize, const M: usize>`\n+   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n   --> $DIR/argument_order.rs:16:23\n@@ -11,7 +11,7 @@ LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^\n    |\n    = note: lifetime arguments must be provided before type arguments\n-   = help: reorder the arguments: lifetimes, then types, then consts: `<'a, 'b, T, U, N, M>`\n+   = help: reorder the arguments: lifetimes, then consts, then types, then consts, then types: `<'a, 'b, N, T, M, U>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "13ca56ad3e69b59f1e92455c2aa86d7a0430d767", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![allow(incomplete_features)]\n \n type Array<T, const N: usize> = [T; N];\n "}, {"sha": "2e2bfed51fb26b050d15b57014c1ec483f1548e5", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -1,21 +1,9 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-arg-type-arg-misordered.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0747]: constant provided when a type was expected\n   --> $DIR/const-arg-type-arg-misordered.rs:6:35\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^\n-   |\n-   = note: type arguments must be provided before constant arguments\n-   = help: reorder the arguments: types, then consts: `<T, N>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0747`."}, {"sha": "72967640a8e62eba02eeeb7b5046ca668cfce176", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -5,14 +5,6 @@\n #![allow(incomplete_features)]\n #![allow(dead_code)]\n \n-struct FixedOutput<'a, const N: usize, T=u32> {\n-  out: &'a [T; N],\n-}\n-\n-trait FixedOutputter {\n-  fn out(&self) -> FixedOutput<'_, 10>;\n-}\n-\n struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n   args: &'a [&'a [T; M]; N],\n   specifier: A,"}, {"sha": "ea3a8c14b98cb2d38c76a4c687895121e63e620b", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -7,6 +7,6 @@ struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters\n \n struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-//~^ Error lifetime parameters must be declared prior to const parameters\n+//~^ Error lifetime parameters must be declared prior to type parameters\n \n fn main() {}"}, {"sha": "0f6d7f1065af83c78047ff5a0f151a556529d677", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -2,13 +2,13 @@ error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/intermixed-lifetime.rs:6:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, const N: usize>`\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n \n-error: lifetime parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/intermixed-lifetime.rs:9:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, T, const N: usize>`\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d57190ea3bbabc4cee234135d6448573cfd7bdd5", "filename": "src/test/ui/const-generics/defaults/needs-feature.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -0,0 +1,8 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/needs-feature.rs:10:26\n+   |\n+LL | struct A<const N: usize, T=u32>(T);\n+   |         -----------------^----- help: reorder the parameters: lifetimes, then consts, then types: `<T, const N: usize>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b6f63a8efecd7cdbeaac62a34bb82f7b41d593d", "filename": "src/test/ui/const-generics/defaults/needs-feature.none.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -1,17 +1,17 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/needs-feature.rs:4:26\n+  --> $DIR/needs-feature.rs:10:26\n    |\n LL | struct A<const N: usize, T=u32>(T);\n    |         -----------------^----- help: reorder the parameters: lifetimes, then types: `<T, const N: usize>`\n \n error[E0658]: const generics are unstable\n-  --> $DIR/needs-feature.rs:4:16\n+  --> $DIR/needs-feature.rs:10:16\n    |\n LL | struct A<const N: usize, T=u32>(T);\n    |                ^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n ", "previous_filename": "src/test/ui/const-generics/defaults/needs-feature.stderr"}, {"sha": "ec02dbf407d6ddb8de1cf75cffb6afefe1fac3f3", "filename": "src/test/ui/const-generics/defaults/needs-feature.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -1,8 +1,17 @@\n+//[full] run-pass\n // Verifies that having generic parameters after constants is not permitted without the\n // `const_generics` feature.\n+// revisions: none min full\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize, T=u32>(T);\n-//~^ ERROR type parameters must be declared prior\n-//~| ERROR const generics are unstable\n+//[none]~^ ERROR type parameters must be declared prior\n+//[none]~| ERROR const generics are unstable\n+//[min]~^^^ ERROR type parameters must be declared prior\n \n-fn main() {}\n+fn main() {\n+  let _: A<3> = A(0);\n+}"}, {"sha": "fce3ab2e6a3a675f40a7d581ce0c52f8053c242e", "filename": "src/test/ui/const-generics/defaults/right-order.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fright-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fright-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fright-order.rs?ref=4f461f5d1282ac58892b8985f1df7ea26df6613f", "patch": "@@ -1,11 +0,0 @@\n-// run-pass\n-// Verifies that having generic parameters after constants is permitted.\n-\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n-\n-struct A<const N: usize, T=u32>(T);\n-\n-fn main() {\n-  let _: A<3> = A(0);\n-}"}, {"sha": "b282dfd37cc4a86aa93e8425d4e1736d4c5d1b7d", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// Checks some basic test cases for defaults.\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+#![allow(dead_code)]\n+\n+struct FixedOutput<'a, const N: usize, T=u32> {\n+  out: &'a [T; N],\n+}\n+\n+trait FixedOutputter {\n+  fn out(&self) -> FixedOutput<'_, 10>;\n+}\n+\n+fn main() {}"}, {"sha": "fc977d6617c563a647beceed9e06211ad953727a", "filename": "src/test/ui/const-generics/type-after-const-ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d6f1c0636b2c7c3c8df819d8c2066669c8024/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs?ref=be0d6f1c0636b2c7c3c8df819d8c2066669c8024", "previous_filename": "src/test/ui/const-generics/defaults/type-after-const-requires-default.rs"}]}