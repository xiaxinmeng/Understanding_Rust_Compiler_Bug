{"sha": "19dc5195d01f184b0526ad0c9cd7f3b7f65c894b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZGM1MTk1ZDAxZjE4NGIwNTI2YWQwYzljZDdmM2I3ZjY1Yzg5NGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-26T12:29:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-26T12:29:47Z"}, "message": "Merge #7393\n\n7393: Document `paths` items r=matklad a=arnaudgolfouse\n\n\n\nCo-authored-by: Arnaud <arnaud.golfouse@laposte.net>", "tree": {"sha": "706bef7a8933ef3c6853f53e4f9907d9f194d8af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/706bef7a8933ef3c6853f53e4f9907d9f194d8af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19dc5195d01f184b0526ad0c9cd7f3b7f65c894b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgEAs7CRBK7hj4Ov3rIwAAdHIIAC2S2E9+tCEz7CUYJXkwcbFs\nzJM8k4/zeG6HTGQ12AmjGhURzYZtT+0157Q/3kpwnPGNh5idaPRNQYUGpo17TSS9\nPx29FseBTbhgOM+V5LXJm/8/ACICLJnb2Tx9Hl3g5yrnvZCvDsH/NZH5iuT0f0ap\nwC47dfaGUBSN2seYG11j1S0cKsqNJf5TxVulFvC4JaVV/123XIBiMt4VF6z9Ale1\nk+wTOaw6QBRHhP0PC6rKxTcUFhGbZmL4zMkVzn76eQn4tRJTzXwdOmER5xhPwB0y\nCC/8LhwU/Hj0ER+ezFkLSJtzHDx20nlly/XawAYsXV4gOd6jLbmnNnmLF6bRvAQ=\n=0Rbc\n-----END PGP SIGNATURE-----\n", "payload": "tree 706bef7a8933ef3c6853f53e4f9907d9f194d8af\nparent 3a5cd6bbc60673aaaa62a94839062f870a62777a\nparent 1fc56ea2244931335c0fa09f725968107b869d34\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611664187 +0000\ncommitter GitHub <noreply@github.com> 1611664187 +0000\n\nMerge #7393\n\n7393: Document `paths` items r=matklad a=arnaudgolfouse\n\n\n\nCo-authored-by: Arnaud <arnaud.golfouse@laposte.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19dc5195d01f184b0526ad0c9cd7f3b7f65c894b", "html_url": "https://github.com/rust-lang/rust/commit/19dc5195d01f184b0526ad0c9cd7f3b7f65c894b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19dc5195d01f184b0526ad0c9cd7f3b7f65c894b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5cd6bbc60673aaaa62a94839062f870a62777a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5cd6bbc60673aaaa62a94839062f870a62777a", "html_url": "https://github.com/rust-lang/rust/commit/3a5cd6bbc60673aaaa62a94839062f870a62777a"}, {"sha": "1fc56ea2244931335c0fa09f725968107b869d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc56ea2244931335c0fa09f725968107b869d34", "html_url": "https://github.com/rust-lang/rust/commit/1fc56ea2244931335c0fa09f725968107b869d34"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "22011cb33e6a57d03b22c3738961e4ab237d3d7c", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/19dc5195d01f184b0526ad0c9cd7f3b7f65c894b/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dc5195d01f184b0526ad0c9cd7f3b7f65c894b/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=19dc5195d01f184b0526ad0c9cd7f3b7f65c894b", "patch": "@@ -6,6 +6,7 @@ use std::{\n     path::{Component, Path, PathBuf},\n };\n \n+/// Wrapper around an absolute [`PathBuf`].\n #[derive(Debug, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]\n pub struct AbsPathBuf(PathBuf);\n \n@@ -58,18 +59,33 @@ impl PartialEq<AbsPath> for AbsPathBuf {\n }\n \n impl AbsPathBuf {\n+    /// Wrap the given absolute path in `AbsPathBuf`\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `path` is not absolute.\n     pub fn assert(path: PathBuf) -> AbsPathBuf {\n         AbsPathBuf::try_from(path)\n             .unwrap_or_else(|path| panic!(\"expected absolute path, got {}\", path.display()))\n     }\n+\n+    /// Coerces to a `AbsPath` slice.\n+    ///\n+    /// Equivalent of [`PathBuf::as_path`] for `AbsPathBuf`.\n     pub fn as_path(&self) -> &AbsPath {\n         AbsPath::assert(self.0.as_path())\n     }\n+\n+    /// Equivalent of [`PathBuf::pop`] for `AbsPathBuf`.\n+    ///\n+    /// Note that this won't remove the root component, so `self` will still be\n+    /// absolute.\n     pub fn pop(&mut self) -> bool {\n         self.0.pop()\n     }\n }\n \n+/// Wrapper around an absolute [`Path`].\n #[derive(Debug, Ord, PartialOrd, Eq, PartialEq, Hash)]\n #[repr(transparent)]\n pub struct AbsPath(Path);\n@@ -98,28 +114,56 @@ impl<'a> TryFrom<&'a Path> for &'a AbsPath {\n }\n \n impl AbsPath {\n+    /// Wrap the given absolute path in `AbsPath`\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `path` is not absolute.\n     pub fn assert(path: &Path) -> &AbsPath {\n         assert!(path.is_absolute());\n         unsafe { &*(path as *const Path as *const AbsPath) }\n     }\n \n+    /// Equivalent of [`Path::parent`] for `AbsPath`.\n     pub fn parent(&self) -> Option<&AbsPath> {\n         self.0.parent().map(AbsPath::assert)\n     }\n+\n+    /// Equivalent of [`Path::join`] for `AbsPath`.\n     pub fn join(&self, path: impl AsRef<Path>) -> AbsPathBuf {\n         self.as_ref().join(path).try_into().unwrap()\n     }\n+\n+    /// Normalize the given path:\n+    /// - Removes repeated separators: `/a//b` becomes `/a/b`\n+    /// - Removes occurrences of `.` and resolves `..`.\n+    /// - Removes trailing slashes: `/a/b/` becomes `/a/b`.\n+    ///\n+    /// # Example\n+    /// ```\n+    /// # use paths::AbsPathBuf;\n+    /// let abs_path_buf = AbsPathBuf::assert(\"/a/../../b/.//c//\".into());\n+    /// let normalized = abs_path_buf.normalize();\n+    /// assert_eq!(normalized, AbsPathBuf::assert(\"/b/c\".into()));\n+    /// ```\n     pub fn normalize(&self) -> AbsPathBuf {\n         AbsPathBuf(normalize_path(&self.0))\n     }\n+\n+    /// Equivalent of [`Path::to_path_buf`] for `AbsPath`.\n     pub fn to_path_buf(&self) -> AbsPathBuf {\n         AbsPathBuf::try_from(self.0.to_path_buf()).unwrap()\n     }\n+\n+    /// Equivalent of [`Path::strip_prefix`] for `AbsPath`.\n+    ///\n+    /// Returns a relative path.\n     pub fn strip_prefix(&self, base: &AbsPath) -> Option<&RelPath> {\n         self.0.strip_prefix(base).ok().map(RelPath::new_unchecked)\n     }\n }\n \n+/// Wrapper around a relative [`PathBuf`].\n #[derive(Debug, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]\n pub struct RelPathBuf(PathBuf);\n \n@@ -160,11 +204,15 @@ impl TryFrom<&str> for RelPathBuf {\n }\n \n impl RelPathBuf {\n+    /// Coerces to a `RelPath` slice.\n+    ///\n+    /// Equivalent of [`PathBuf::as_path`] for `RelPathBuf`.\n     pub fn as_path(&self) -> &RelPath {\n         RelPath::new_unchecked(self.0.as_path())\n     }\n }\n \n+/// Wrapper around a relative [`Path`].\n #[derive(Debug, Ord, PartialOrd, Eq, PartialEq, Hash)]\n #[repr(transparent)]\n pub struct RelPath(Path);\n@@ -183,12 +231,13 @@ impl AsRef<Path> for RelPath {\n }\n \n impl RelPath {\n+    /// Creates a new `RelPath` from `path`, without checking if it is relative.\n     pub fn new_unchecked(path: &Path) -> &RelPath {\n         unsafe { &*(path as *const Path as *const RelPath) }\n     }\n }\n \n-// https://github.com/rust-lang/cargo/blob/79c769c3d7b4c2cf6a93781575b7f592ef974255/src/cargo/util/paths.rs#L60-L85\n+/// Taken from https://github.com/rust-lang/cargo/blob/79c769c3d7b4c2cf6a93781575b7f592ef974255/src/cargo/util/paths.rs#L60-L85\n fn normalize_path(path: &Path) -> PathBuf {\n     let mut components = path.components().peekable();\n     let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().cloned() {"}]}