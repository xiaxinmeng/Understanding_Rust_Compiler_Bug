{"sha": "40ab9d2bd57a2203131abd723f7120e960299fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYWI5ZDJiZDU3YTIyMDMxMzFhYmQ3MjNmNzEyMGU5NjAyOTlmYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-25T12:07:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-25T12:07:19Z"}, "message": "Auto merge of #61765 - Keruspe:rustbuild-cxx, r=alexcrichton\n\nrustbuild: detect cxx for all targets\n\nReplaces #61544\nFixes #59917\n\nWe need CXX to build llvm-libunwind which can be enabled for alltargets.\nAs we needed it for all hosts anyways, just move the detection so that it is ran for all targets (which contains all hosts) instead.", "tree": {"sha": "81c9c4ea94173e8fa7fb31b9d9fd6ba7f55fc62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c9c4ea94173e8fa7fb31b9d9fd6ba7f55fc62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ab9d2bd57a2203131abd723f7120e960299fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ab9d2bd57a2203131abd723f7120e960299fae", "html_url": "https://github.com/rust-lang/rust/commit/40ab9d2bd57a2203131abd723f7120e960299fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ab9d2bd57a2203131abd723f7120e960299fae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10deeae3263301f1d337721ed55c14637b70c3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/10deeae3263301f1d337721ed55c14637b70c3c7", "html_url": "https://github.com/rust-lang/rust/commit/10deeae3263301f1d337721ed55c14637b70c3c7"}, {"sha": "087cd77d969d9c3cf80f47d4fd8a4379aa48f224", "url": "https://api.github.com/repos/rust-lang/rust/commits/087cd77d969d9c3cf80f47d4fd8a4379aa48f224", "html_url": "https://github.com/rust-lang/rust/commit/087cd77d969d9c3cf80f47d4fd8a4379aa48f224"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "400375cd201c4dca8a8579a3f9c170b2d24f4404", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/40ab9d2bd57a2203131abd723f7120e960299fae/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab9d2bd57a2203131abd723f7120e960299fae/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=40ab9d2bd57a2203131abd723f7120e960299fae", "patch": "@@ -95,29 +95,39 @@ pub fn find(build: &mut Build) {\n         };\n \n         build.cc.insert(target, compiler);\n-        build.verbose(&format!(\"CC_{} = {:?}\", &target, build.cc(target)));\n-        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target, build.cflags(target, GitRepo::Rustc)));\n-        if let Some(ar) = ar {\n-            build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n-            build.ar.insert(target, ar);\n-        }\n-    }\n+        let cflags = build.cflags(target, GitRepo::Rustc);\n \n-    // For all host triples we need to find a C++ compiler as well\n-    let hosts = build.hosts.iter().cloned().chain(iter::once(build.build)).collect::<HashSet<_>>();\n-    for host in hosts.into_iter() {\n+        // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n+        // We'll need one anyways if the target triple is also a host triple\n         let mut cfg = cc::Build::new();\n         cfg.cargo_metadata(false).opt_level(2).warnings(false).debug(false).cpp(true)\n-           .target(&host).host(&build.build);\n-        let config = build.config.target_config.get(&host);\n-        if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n+            .target(&target).host(&build.build);\n+\n+        let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n+            true\n+        } else if build.hosts.contains(&target) || build.build == target {\n+            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n+            true\n         } else {\n-            set_compiler(&mut cfg, Language::CPlusPlus, host, config, build);\n+            false\n+        };\n+\n+        if cxx_configured {\n+            let compiler = cfg.get_compiler();\n+            build.cxx.insert(target, compiler);\n+        }\n+\n+        build.verbose(&format!(\"CC_{} = {:?}\", &target, build.cc(target)));\n+        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target, cflags));\n+        if let Ok(cxx) = build.cxx(target) {\n+            build.verbose(&format!(\"CXX_{} = {:?}\", &target, cxx));\n+            build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target, cflags));\n+        }\n+        if let Some(ar) = ar {\n+            build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n+            build.ar.insert(target, ar);\n         }\n-        let compiler = cfg.get_compiler();\n-        build.verbose(&format!(\"CXX_{} = {:?}\", host, compiler.path()));\n-        build.cxx.insert(host, compiler);\n     }\n }\n "}]}