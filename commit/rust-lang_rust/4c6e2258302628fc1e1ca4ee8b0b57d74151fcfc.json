{"sha": "4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNmUyMjU4MzAyNjI4ZmMxZTFjYTRlZThiMGI1N2Q3NDE1MWZjZmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-13T10:32:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-13T10:40:56Z"}, "message": "Run rustfmt", "tree": {"sha": "9288d19fcd615ed2f9abc72f91fe7181b0ea198b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9288d19fcd615ed2f9abc72f91fe7181b0ea198b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAljGdzgACgkQpp+NIls6\n19l4lQ/+LHeovWYVZZFT8ENFoSXX7DhhrKPnXTBSuvg9i7oW9U6emRKIqkXF7jgb\n3nnCX2wt///xMv0G1HK83WoXQmONnU1Gb3vG/yXpTpyIPzPx43Z/swWs1ZIlrsaK\ntS1tmEu2MzraHkyWUlAWly2xDq2biZtrCeYg59JCDVbikbAotIzMJj+NW3atC6SO\njYYEyrpO9nNxeon3wXdAgPPCGPgIZ8qpWq8Jzs6qcuBmPZR41I55xqOuzIYjgSD6\nICiKm1J4mjT5p4+qe8rgSrs14kTuI8Zk8YcMsnYbZTilTtYV7lTjh8s5jSa866HT\n2X2DPQZDkEskrZp3RPMbQIakocneZ27gOqo4JyfgPCEZQyh+wL9lJIlFFGthIuLm\ng+UkENpLcc78KKZPj17cLuU7m6Z7GdzaP2P71dYqr4Ju+8j57+dbLdXf07sIxbII\n6gO/E9yDN11n/f3dT8O1uzY7J710fUVS7sALoxLvXLUag+X9NqC0lBquJWEetnaI\nFX56kVoulT+4s4ZMWd9wI55xQXH9iGwVDnMseMrBaxBFOTXgx+uIPUKReJMfrNCd\nlr8wt1JPZXGEaD6EE2BvMZpzqU/LDSrnmsde0uaQV8cYI1EcgUoUVRvsekHaqTL+\nUO7xqn3TppT5Am6DvItraih/Xj5WwiUYLJAygBByx8VYRmELm+A=\n=bpKe\n-----END PGP SIGNATURE-----", "payload": "tree 9288d19fcd615ed2f9abc72f91fe7181b0ea198b\nparent 49dd2dda57c030409353909bbb18d74703983fce\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1489401178 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1489401656 +0100\n\nRun rustfmt"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc", "html_url": "https://github.com/rust-lang/rust/commit/4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49dd2dda57c030409353909bbb18d74703983fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/49dd2dda57c030409353909bbb18d74703983fce", "html_url": "https://github.com/rust-lang/rust/commit/49dd2dda57c030409353909bbb18d74703983fce"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "328bba9f6fe7cc7a488f2c8747dd634b223c8b3b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=4c6e2258302628fc1e1ca4ee8b0b57d74151fcfc", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     if let Some(name) = get_item_name(cx, expr) {\n                         let name = &*name.as_str();\n                         if name == \"eq\" || name == \"ne\" || name == \"is_nan\" || name.starts_with(\"eq_\") ||\n-                        name.ends_with(\"_eq\") {\n+                           name.ends_with(\"_eq\") {\n                             return;\n                         }\n                     }\n@@ -316,15 +316,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n                         db.span_suggestion(expr.span,\n-                                        \"consider comparing them within some error\",\n-                                        format!(\"({}).abs() < error\", lhs - rhs));\n+                                           \"consider comparing them within some error\",\n+                                           format!(\"({}).abs() < error\", lhs - rhs));\n                         db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n                     });\n                 } else if op == BiRem && is_integer_literal(right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n                 }\n             },\n-            _ => {}\n+            _ => {},\n         }\n         if in_attributes_expansion(cx, expr) {\n             // Don't lint things expanded by #[derive(...)], etc\n@@ -380,9 +380,9 @@ fn check_nan(cx: &LateContext, path: &Path, expr: &Expr) {\n     if !in_constant(cx, expr.id) {\n         path.segments.last().map(|seg| if &*seg.name.as_str() == \"NAN\" {\n             span_lint(cx,\n-                    CMP_NAN,\n-                    expr.span,\n-                    \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\");\n+                      CMP_NAN,\n+                      expr.span,\n+                      \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\");\n         });\n     }\n }"}]}