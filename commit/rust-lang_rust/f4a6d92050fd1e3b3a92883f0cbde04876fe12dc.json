{"sha": "f4a6d92050fd1e3b3a92883f0cbde04876fe12dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTZkOTIwNTBmZDFlM2IzYTkyODgzZjBjYmRlMDQ4NzZmZTEyZGM=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-09T07:08:34Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-09T07:08:34Z"}, "message": "Reduce code duplication in lexer by introducing small macro", "tree": {"sha": "cfa630561b370b278acfb97ce7e212cdaef6d131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa630561b370b278acfb97ce7e212cdaef6d131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a6d92050fd1e3b3a92883f0cbde04876fe12dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a6d92050fd1e3b3a92883f0cbde04876fe12dc", "html_url": "https://github.com/rust-lang/rust/commit/f4a6d92050fd1e3b3a92883f0cbde04876fe12dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a6d92050fd1e3b3a92883f0cbde04876fe12dc/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87608904f697a3f58ddb71a7f6828dac80f8b3ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/87608904f697a3f58ddb71a7f6828dac80f8b3ce", "html_url": "https://github.com/rust-lang/rust/commit/87608904f697a3f58ddb71a7f6828dac80f8b3ce"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "926811d96fd3d9ac26de728671d3aa74a82b3a97", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f4a6d92050fd1e3b3a92883f0cbde04876fe12dc/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a6d92050fd1e3b3a92883f0cbde04876fe12dc/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=f4a6d92050fd1e3b3a92883f0cbde04876fe12dc", "patch": "@@ -12,6 +12,21 @@ pub struct Token {\n     pub len: TextUnit,\n }\n \n+macro_rules! match_literal_kind {\n+    ($kind:expr) => {\n+        match $kind {\n+                ra_rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n+                ra_rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n+                ra_rustc_lexer::LiteralKind::Char { .. } => CHAR,\n+                ra_rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n+                ra_rustc_lexer::LiteralKind::Str { .. } => STRING,\n+                ra_rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n+                ra_rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n+                ra_rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n+            }\n+    }\n+}\n+\n /// Break a string up into its component tokens\n pub fn tokenize(text: &str) -> Vec<Token> {\n     if text.is_empty() {\n@@ -53,16 +68,7 @@ pub fn tokenize(text: &str) -> Vec<Token> {\n                 }\n             }\n             ra_rustc_lexer::TokenKind::RawIdent => IDENT,\n-            ra_rustc_lexer::TokenKind::Literal { kind, .. } => match kind {\n-                ra_rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n-                ra_rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n-                ra_rustc_lexer::LiteralKind::Char { .. } => CHAR,\n-                ra_rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n-                ra_rustc_lexer::LiteralKind::Str { .. } => STRING,\n-                ra_rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n-                ra_rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n-                ra_rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n-            },\n+            ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind!(kind),\n             ra_rustc_lexer::TokenKind::Lifetime { .. } => LIFETIME,\n             ra_rustc_lexer::TokenKind::Semi => SEMI,\n             ra_rustc_lexer::TokenKind::Comma => COMMA,\n@@ -131,16 +137,7 @@ pub fn classify_literal(text: &str) -> Option<Token> {\n         return None;\n     }\n     let kind = match t.kind {\n-        ra_rustc_lexer::TokenKind::Literal { kind, .. } => match kind {\n-            ra_rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n-            ra_rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n-            ra_rustc_lexer::LiteralKind::Char { .. } => CHAR,\n-            ra_rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n-            ra_rustc_lexer::LiteralKind::Str { .. } => STRING,\n-            ra_rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n-            ra_rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n-            ra_rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n-        },\n+        ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind!(kind),\n         _ => return None,\n     };\n     Some(Token { kind, len: TextUnit::from_usize(t.len) })"}]}