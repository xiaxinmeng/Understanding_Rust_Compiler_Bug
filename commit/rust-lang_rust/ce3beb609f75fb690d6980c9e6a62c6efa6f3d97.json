{"sha": "ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlM2JlYjYwOWY3NWZiNjkwZDY5ODBjOWU2YTYyYzZlZmE2ZjNkOTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-23T16:32:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-27T19:59:35Z"}, "message": "Discern between `Path` and `Path<>` in AST", "tree": {"sha": "393b1ae3dd4e554835638bb3cc5c451caa2aad24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393b1ae3dd4e554835638bb3cc5c451caa2aad24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "html_url": "https://github.com/rust-lang/rust/commit/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da77a1a0acf54fddba97052d55187a441224d022", "url": "https://api.github.com/repos/rust-lang/rust/commits/da77a1a0acf54fddba97052d55187a441224d022", "html_url": "https://github.com/rust-lang/rust/commit/da77a1a0acf54fddba97052d55187a441224d022"}], "stats": {"total": 82, "additions": 50, "deletions": 32}, "files": [{"sha": "e8331cc539795e7ef9c190fba4909657de8a09a8", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "patch": "@@ -197,7 +197,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 let path = view_path.node.path();\n                 if path.segments.iter().any(|segment| segment.parameters.is_some()) {\n                     self.err_handler()\n-                        .span_err(path.span, \"type or lifetime parameters in import path\");\n+                        .span_err(path.span, \"generic arguments in import path\");\n                 }\n             }\n             ItemKind::Impl(.., Some(..), _, ref impl_items) => {\n@@ -297,9 +297,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_vis(&mut self, vis: &'a Visibility) {\n         match *vis {\n             Visibility::Restricted { ref path, .. } => {\n-                if !path.segments.iter().all(|segment| segment.parameters.is_none()) {\n+                if path.segments.iter().any(|segment| segment.parameters.is_some()) {\n                     self.err_handler()\n-                        .span_err(path.span, \"type or lifetime parameters in visibility path\");\n+                        .span_err(path.span, \"generic arguments in visibility path\");\n                 }\n             }\n             _ => {}"}, {"sha": "c256b42f1bde909205e78b1cb9259c9beb922162", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "patch": "@@ -387,11 +387,7 @@ impl<'a> Resolver<'a> {\n                             -> Result<Def, Determinacy> {\n         let ast::Path { ref segments, span } = *path;\n         if segments.iter().any(|segment| segment.parameters.is_some()) {\n-            let kind =\n-                if segments.last().unwrap().parameters.is_some() { \"macro\" } else { \"module\" };\n-            let msg = format!(\"type parameters are not allowed on {}s\", kind);\n-            self.session.span_err(path.span, &msg);\n-            return Err(Determinacy::Determined);\n+            self.session.span_err(span, \"generic arguments in macro path\");\n         }\n \n         let path: Vec<_> = segments.iter().map(|seg| respan(seg.span, seg.identifier)).collect();"}, {"sha": "544afc5d6f6b341a1246dd89094d36ad2d582e05", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "patch": "@@ -120,12 +120,11 @@ pub struct PathSegment {\n     pub span: Span,\n \n     /// Type/lifetime parameters attached to this path. They come in\n-    /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that\n-    /// this is more than just simple syntactic sugar; the use of\n-    /// parens affects the region binding rules, so we preserve the\n-    /// distinction.\n-    /// The `Option<P<..>>` wrapper is purely a size optimization;\n-    /// `None` is used to represent both `Path` and `Path<>`.\n+    /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`.\n+    /// `None` means that no parameter list is supplied (`Path`),\n+    /// `Some` means that parameter list is supplied (`Path<X, Y>`)\n+    /// but it can be empty (`Path<>`).\n+    /// `P` is used as a size optimization for the common case with no parameters.\n     pub parameters: Option<P<PathParameters>>,\n }\n \n@@ -181,8 +180,7 @@ pub struct AngleBracketedParameterData {\n \n impl Into<Option<P<PathParameters>>> for AngleBracketedParameterData {\n     fn into(self) -> Option<P<PathParameters>> {\n-        let empty = self.lifetimes.is_empty() && self.types.is_empty() && self.bindings.is_empty();\n-        if empty { None } else { Some(P(PathParameters::AngleBracketed(self))) }\n+        Some(P(PathParameters::AngleBracketed(self)))\n     }\n }\n "}, {"sha": "af9143eadbc8800e5ceab4d7878c4bb54f3f2931", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "patch": "@@ -326,14 +326,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n \n         segments.extend(idents.into_iter().map(|i| ast::PathSegment::from_ident(i, sp)));\n-        let parameters = if lifetimes.is_empty() && types.is_empty() && bindings.is_empty() {\n-            None\n+        let parameters = if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n+            ast::AngleBracketedParameterData { lifetimes, types, bindings }.into()\n         } else {\n-            Some(P(ast::PathParameters::AngleBracketed(ast::AngleBracketedParameterData {\n-                lifetimes: lifetimes,\n-                types: types,\n-                bindings: bindings,\n-            })))\n+            None\n         };\n         segments.push(ast::PathSegment {\n             identifier: last_identifier,\n@@ -369,15 +365,15 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                  bindings: Vec<ast::TypeBinding>)\n                  -> (ast::QSelf, ast::Path) {\n         let mut path = trait_path;\n-        let parameters = ast::AngleBracketedParameterData {\n-            lifetimes: lifetimes,\n-            types: types,\n-            bindings: bindings,\n+        let parameters = if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n+            ast::AngleBracketedParameterData { lifetimes, types, bindings }.into()\n+        } else {\n+            None\n         };\n         path.segments.push(ast::PathSegment {\n             identifier: ident.node,\n             span: ident.span,\n-            parameters: Some(P(ast::PathParameters::AngleBracketed(parameters))),\n+            parameters: parameters,\n         });\n \n         (ast::QSelf {"}, {"sha": "d1e3d20f4ba1e99a7b20488f3cf351c9fe27342e", "filename": "src/test/compile-fail/import-ty-params.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Ftest%2Fcompile-fail%2Fimport-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Ftest%2Fcompile-fail%2Fimport-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-ty-params.rs?ref=ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "patch": "@@ -20,6 +20,11 @@ macro_rules! import {\n     ($p: path) => (use $p;);\n }\n \n-import! { a::b::c::S<u8> } //~ERROR type or lifetime parameters in import path\n+fn f1() {\n+    import! { a::b::c::S<u8> } //~ ERROR generic arguments in import path\n+}\n+fn f2() {\n+    import! { a::b::c::S<> } //~ ERROR generic arguments in import path\n+}\n \n fn main() {}"}, {"sha": "8e0c451959dc699c6be84b2066304c849d8e9a53", "filename": "src/test/compile-fail/macro-with-seps-err-msg.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs?ref=ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "patch": "@@ -10,9 +10,28 @@\n \n // gate-test-use_extern_macros\n \n+macro_rules! m {\n+    ($p1: path) => {\n+        #[derive($p1)] struct U;\n+    }\n+}\n+\n fn main() {\n     globnar::brotz!(); //~ ERROR non-ident macro paths are experimental\n-    ::foo!(); //~ ERROR non-ident macro paths are experimental\n-    foo::<T>!(); //~ ERROR type parameters are not allowed on macros\n     #[derive(foo::Bar)] struct T; //~ ERROR non-ident macro paths are experimental\n+    ::foo!(); //~ ERROR non-ident macro paths are experimental\n+\n+    foo::<T>!();\n+    //~^ ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    foo::<>!();\n+    //~^ ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    m!(MyTrait<>);\n+    //~^ ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n+    //~| ERROR generic arguments in macro path\n }"}, {"sha": "8d4817e80b95c1d3a35ef01628f6cd032cdd886d", "filename": "src/test/compile-fail/privacy/restricted/ty-params.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3beb609f75fb690d6980c9e6a62c6efa6f3d97/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs?ref=ce3beb609f75fb690d6980c9e6a62c6efa6f3d97", "patch": "@@ -13,7 +13,11 @@ macro_rules! m {\n }\n \n struct S<T>(T);\n-m!{ S<u8> } //~ ERROR type or lifetime parameters in visibility path\n+m!{ S<u8> } //~ ERROR generic arguments in visibility path\n //~^ ERROR expected module, found struct `S`\n \n+mod m {\n+    m!{ m<> } //~ ERROR generic arguments in visibility path\n+}\n+\n fn main() {}"}]}