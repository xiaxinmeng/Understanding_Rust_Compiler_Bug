{"sha": "9ff020e0dd73cd8a64711bf999f69970ec608718", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZjAyMGUwZGQ3M2NkOGE2NDcxMWJmOTk5ZjY5OTcwZWM2MDg3MTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-24T00:47:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T00:47:30Z"}, "message": "Rollup merge of #71063 - LeSeulArtichaut:document-unsafe, r=Mark-Simulacrum\n\nDocument unsafety in core::{option, hash}\n\nHelps with #66219.\nI think that the part that will need reviewing the most is the `hash/sip.rs` file.\nr? @LukasKalbertodt (or someone else from the libs team)", "tree": {"sha": "28831f6e8ce759d9d2f8dcb9c506cdc0f3e6fc8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28831f6e8ce759d9d2f8dcb9c506cdc0f3e6fc8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff020e0dd73cd8a64711bf999f69970ec608718", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeojciCRBK7hj4Ov3rIwAAdHIIAJmowzex5MVbvVx10vDz4LBW\nxMs1xh/W2haFsF1CeEZHc3pBp+NoHVUIKqBen9qhrO1bqiJemTM3SE9F3Psds566\nsFyj2ZnXgYVtXE7ZKbc6yLjPfAxwgeFNfG7G0Y+iqHfnBPMKhs91StkhBxCjqF0N\nEYsC2dORZ6+bmDtfKQVSmJD45hSNpxOGt1kuKVfFpjyige8fbnBwM07URHBGwr5E\n65rIaeQ6xbnCl+MxUsAA8shvTA4Zn4PePMMT6KmsIO2UxK34udtxmY3vQa052coz\nKJwflRLTM9saIK5OqY6JTdoHkWUZTcb0bi0Z199MCsnybUvqHp/g4F6hSr0CsTs=\n=DasG\n-----END PGP SIGNATURE-----\n", "payload": "tree 28831f6e8ce759d9d2f8dcb9c506cdc0f3e6fc8d\nparent 45e04feb1d25103127beb5f34c126a64e959cff6\nparent a694315ed1943496149980dd80a0da2b1d71ff1c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587689250 +0200\ncommitter GitHub <noreply@github.com> 1587689250 +0200\n\nRollup merge of #71063 - LeSeulArtichaut:document-unsafe, r=Mark-Simulacrum\n\nDocument unsafety in core::{option, hash}\n\nHelps with #66219.\nI think that the part that will need reviewing the most is the `hash/sip.rs` file.\nr? @LukasKalbertodt (or someone else from the libs team)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff020e0dd73cd8a64711bf999f69970ec608718", "html_url": "https://github.com/rust-lang/rust/commit/9ff020e0dd73cd8a64711bf999f69970ec608718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff020e0dd73cd8a64711bf999f69970ec608718/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e04feb1d25103127beb5f34c126a64e959cff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e04feb1d25103127beb5f34c126a64e959cff6", "html_url": "https://github.com/rust-lang/rust/commit/45e04feb1d25103127beb5f34c126a64e959cff6"}, {"sha": "a694315ed1943496149980dd80a0da2b1d71ff1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a694315ed1943496149980dd80a0da2b1d71ff1c", "html_url": "https://github.com/rust-lang/rust/commit/a694315ed1943496149980dd80a0da2b1d71ff1c"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "d80101753cbef4b554c1a536fcebd4a47523d2c7", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ff020e0dd73cd8a64711bf999f69970ec608718/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff020e0dd73cd8a64711bf999f69970ec608718/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=9ff020e0dd73cd8a64711bf999f69970ec608718", "patch": "@@ -79,8 +79,6 @@\n //! }\n //! ```\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::fmt;\n@@ -572,6 +570,10 @@ mod impls {\n                 fn hash_slice<H: Hasher>(data: &[$ty], state: &mut H) {\n                     let newlen = data.len() * mem::size_of::<$ty>();\n                     let ptr = data.as_ptr() as *const u8;\n+                    // SAFETY: `ptr` is valid and aligned, as this macro is only used\n+                    // for numeric primitives which have no padding. The new slice only\n+                    // spans across `data` and is never mutated, and its total size is the\n+                    // same as the original `data` so it can't be over `isize::MAX`.\n                     state.write(unsafe { slice::from_raw_parts(ptr, newlen) })\n                 }\n             }\n@@ -691,6 +693,11 @@ mod impls {\n                 state.write_usize(*self as *const () as usize);\n             } else {\n                 // Fat pointer\n+                // SAFETY: we are accessing the memory occupied by `self`\n+                // which is guaranteed to be valid.\n+                // This assumes a fat pointer can be represented by a `(usize, usize)`,\n+                // which is safe to do in `std` because it is shipped and kept in sync\n+                // with the implementation of fat pointers in `rustc`.\n                 let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n                 state.write_usize(a);\n                 state.write_usize(b);\n@@ -706,6 +713,11 @@ mod impls {\n                 state.write_usize(*self as *const () as usize);\n             } else {\n                 // Fat pointer\n+                // SAFETY: we are accessing the memory occupied by `self`\n+                // which is guaranteed to be valid.\n+                // This assumes a fat pointer can be represented by a `(usize, usize)`,\n+                // which is safe to do in `std` because it is shipped and kept in sync\n+                // with the implementation of fat pointers in `rustc`.\n                 let (a, b) = unsafe { *(self as *const Self as *const (usize, usize)) };\n                 state.write_usize(a);\n                 state.write_usize(b);"}, {"sha": "ac058609f45ed34ef6b6006581104bf0e34a7a0d", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ff020e0dd73cd8a64711bf999f69970ec608718/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff020e0dd73cd8a64711bf999f69970ec608718/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=9ff020e0dd73cd8a64711bf999f69970ec608718", "patch": "@@ -1,7 +1,5 @@\n //! An implementation of SipHash.\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![allow(deprecated)] // the types in this module are deprecated\n \n use crate::cmp;\n@@ -265,6 +263,7 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;\n+            // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`\n             self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\n             if length < needed {\n                 self.ntail += length;\n@@ -279,10 +278,13 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n \n         // Buffered tail is now flushed, process new input.\n         let len = length - needed;\n-        let left = len & 0x7;\n+        let left = len & 0x7; // len % 8\n \n         let mut i = needed;\n         while i < len - left {\n+            // SAFETY: because `len - left` is the biggest multiple of 8 under\n+            // `len`, and because `i` starts at `needed` where `len` is `length - needed`,\n+            // `i + 8` is guaranteed to be less than or equal to `length`.\n             let mi = unsafe { load_int_le!(msg, i, u64) };\n \n             self.state.v3 ^= mi;\n@@ -292,6 +294,9 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n             i += 8;\n         }\n \n+        // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,\n+        // so `i + left` = `needed + len` = `length`, which is by\n+        // definition equal to `msg.len()`.\n         self.tail = unsafe { u8to64_le(msg, i, left) };\n         self.ntail = left;\n     }"}, {"sha": "63a5277100fa81be381c58a382f184d1e4e9d793", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ff020e0dd73cd8a64711bf999f69970ec608718/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff020e0dd73cd8a64711bf999f69970ec608718/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=9ff020e0dd73cd8a64711bf999f69970ec608718", "patch": "@@ -133,8 +133,6 @@\n //! [`Box<T>`]: ../../std/boxed/struct.Box.html\n //! [`i32`]: ../../std/primitive.i32.html\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n@@ -301,6 +299,8 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n+        // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n+        // which is pinned.\n         unsafe { Pin::get_ref(self).as_ref().map(|x| Pin::new_unchecked(x)) }\n     }\n \n@@ -310,6 +310,8 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n+        // SAFETY: `get_unchecked_mut` is never used to move the `Option` inside `self`.\n+        // `x` is guaranteed to be pinned because it comes from `self` which is pinned.\n         unsafe { Pin::get_unchecked_mut(self).as_mut().map(|x| Pin::new_unchecked(x)) }\n     }\n \n@@ -858,6 +860,8 @@ impl<T> Option<T> {\n \n         match *self {\n             Some(ref mut v) => v,\n+            // SAFETY: a `None` variant for `self` would have been replaced by a `Some`\n+            // variant in the code above.\n             None => unsafe { hint::unreachable_unchecked() },\n         }\n     }"}]}