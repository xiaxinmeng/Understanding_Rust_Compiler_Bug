{"sha": "09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YjQ0ZjVkMjU5MTFiNDBlNmM5MWZlMTYwYTg5MDA5YmE2ZGRmZTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-14T16:11:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-14T16:11:06Z"}, "message": "Reduce visibility", "tree": {"sha": "10f8bb8eb38ab5b13e6234c12522a724e470cb47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f8bb8eb38ab5b13e6234c12522a724e470cb47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "html_url": "https://github.com/rust-lang/rust/commit/09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29fafb44b1de93c4f5000064ab06bd756b8499f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/29fafb44b1de93c4f5000064ab06bd756b8499f9", "html_url": "https://github.com/rust-lang/rust/commit/29fafb44b1de93c4f5000064ab06bd756b8499f9"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "58f6eaf25ce8d34ca3ae44ac45b61d255109007f", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -1,5 +1,7 @@\n use crate::prelude::*;\n \n+pub(super) use EmptySinglePair::*;\n+\n #[derive(Copy, Clone, Debug)]\n pub enum PassMode {\n     NoPass,\n@@ -9,18 +11,18 @@ pub enum PassMode {\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub enum EmptySinglePair<T> {\n+pub(super) enum EmptySinglePair<T> {\n     Empty,\n     Single(T),\n     Pair(T, T),\n }\n \n impl<T> EmptySinglePair<T> {\n-    pub fn into_iter(self) -> EmptySinglePairIter<T> {\n+    pub(super) fn into_iter(self) -> EmptySinglePairIter<T> {\n         EmptySinglePairIter(self)\n     }\n \n-    pub fn map<U>(self, mut f: impl FnMut(T) -> U) -> EmptySinglePair<U> {\n+    pub(super) fn map<U>(self, mut f: impl FnMut(T) -> U) -> EmptySinglePair<U> {\n         match self {\n             Empty => Empty,\n             Single(v) => Single(f(v)),\n@@ -29,7 +31,7 @@ impl<T> EmptySinglePair<T> {\n     }\n }\n \n-pub struct EmptySinglePairIter<T>(EmptySinglePair<T>);\n+pub(super) struct EmptySinglePairIter<T>(EmptySinglePair<T>);\n \n impl<T> Iterator for EmptySinglePairIter<T> {\n     type Item = T;\n@@ -47,25 +49,23 @@ impl<T> Iterator for EmptySinglePairIter<T> {\n }\n \n impl<T: std::fmt::Debug> EmptySinglePair<T> {\n-    pub fn assert_single(self) -> T {\n+    pub(super) fn assert_single(self) -> T {\n         match self {\n             Single(v) => v,\n             _ => panic!(\"Called assert_single on {:?}\", self),\n         }\n     }\n \n-    pub fn assert_pair(self) -> (T, T) {\n+    pub(super) fn assert_pair(self) -> (T, T) {\n         match self {\n             Pair(a, b) => (a, b),\n             _ => panic!(\"Called assert_pair on {:?}\", self),\n         }\n     }\n }\n \n-pub use EmptySinglePair::*;\n-\n impl PassMode {\n-    pub fn get_param_ty(self, tcx: TyCtxt<'_>) -> EmptySinglePair<Type> {\n+    pub(super) fn get_param_ty(self, tcx: TyCtxt<'_>) -> EmptySinglePair<Type> {\n         match self {\n             PassMode::NoPass => Empty,\n             PassMode::ByVal(clif_type) => Single(clif_type),\n@@ -108,7 +108,7 @@ pub fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyLayout<'tcx>) -> PassMod\n     }\n }\n \n-pub fn adjust_arg_for_abi<'tcx>(\n+pub(super) fn adjust_arg_for_abi<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     arg: CValue<'tcx>,\n ) -> EmptySinglePair<Value> {\n@@ -123,7 +123,7 @@ pub fn adjust_arg_for_abi<'tcx>(\n     }\n }\n \n-pub fn cvalue_for_param<'tcx>(\n+pub(super) fn cvalue_for_param<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     start_ebb: Ebb,\n     local: Option<mir::Local>,"}, {"sha": "5228eb6031b3032a0c1b74b6529131559787d53f", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -13,7 +13,7 @@ pub fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyLayout<'tcx\n     }\n }\n \n-pub fn codegen_return_param(\n+pub(super) fn codegen_return_param(\n     fx: &mut FunctionCx<impl Backend>,\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n     start_ebb: Ebb,\n@@ -54,7 +54,7 @@ pub fn codegen_return_param(\n     );\n }\n \n-pub fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n+pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n     fx: &mut FunctionCx<'_, 'tcx, B>,\n     fn_sig: FnSig<'tcx>,\n     ret_place: Option<CPlace<'tcx>>,"}, {"sha": "df9e6aa196280f0ba90f50ff396e0b722f14888d", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -28,7 +28,7 @@ pub fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) ->\n     }\n }\n \n-pub fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n+fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n     let usize_ty = module.target_config().pointer_type();\n \n     for method in ALLOCATOR_METHODS {"}, {"sha": "dcf47f6657a5060bd56526c88585cc9ad4ae9641", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -34,7 +34,7 @@ pub fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n     }\n }\n \n-pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Type> {\n+fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Type> {\n     Some(match ty.kind {\n         ty::Bool => types::I8,\n         ty::Uint(size) => match size {"}, {"sha": "3152e4812f75839045039478a0afb36f487581be", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> DebugContext<'tcx> {\n }\n \n impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n-    pub(crate) fn create_debug_lines(\n+    pub(super) fn create_debug_lines(\n         &mut self,\n         context: &Context,\n         isa: &dyn cranelift_codegen::isa::TargetIsa,"}, {"sha": "70c9167c69e2bd3032622a951a2e0a50ab17aaf4", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -127,7 +127,7 @@ macro atomic_minmax($fx:expr, $cc:expr, <$T:ident> ($ptr:ident, $src:ident) -> $\n     $ret.write_cvalue($fx, ret_val);\n }\n \n-pub fn lane_type_and_count<'tcx>(\n+fn lane_type_and_count<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     layout: TyLayout<'tcx>,\n ) -> (TyLayout<'tcx>, u32) {"}, {"sha": "04e55d801871197355d648940e28424688ad0841", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -1,7 +1,7 @@\n use crate::prelude::*;\n use super::*;\n \n-pub fn codegen_simd_intrinsic_call<'tcx>(\n+pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],"}, {"sha": "4d2301c6f6c56920a021999b8291739d54b7ec6c", "filename": "src/optimize/code_layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Foptimize%2Fcode_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b44f5d25911b40e6c91fe160a89009ba6ddfe1/src%2Foptimize%2Fcode_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fcode_layout.rs?ref=09b44f5d25911b40e6c91fe160a89009ba6ddfe1", "patch": "@@ -10,7 +10,7 @@\n \n use crate::prelude::*;\n \n-pub fn optimize_function(ctx: &mut Context, cold_ebbs: &EntitySet<Ebb>) {\n+pub(super) fn optimize_function(ctx: &mut Context, cold_ebbs: &EntitySet<Ebb>) {\n     // FIXME Move the ebb in place instead of remove and append once\n     // bytecodealliance/cranelift#1339 is implemented.\n "}]}