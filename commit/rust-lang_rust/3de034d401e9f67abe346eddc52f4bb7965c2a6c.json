{"sha": "3de034d401e9f67abe346eddc52f4bb7965c2a6c", "node_id": "C_kwDOAAsO6NoAKDNkZTAzNGQ0MDFlOWY2N2FiZTM0NmVkZGM1MmY0YmI3OTY1YzJhNmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-18T03:10:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-18T03:10:50Z"}, "message": "Rollup merge of #100674 - PragmaTwice:mig-typeck-unused-crate-diag, r=davidtwco\n\nMigrate lint reports in typeck::check_unused to LintDiagnostic\n\nIn this PR, I migrate two lint reports in `typeck::check_unused` by `LintDiagnostic`, all of which is about extern crates.\n\n```@rustbot``` label +A-translation\nr? rust-lang/diagnostics", "tree": {"sha": "71b2ce1cbde918c54cb652f0287fc9d8f31ed931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71b2ce1cbde918c54cb652f0287fc9d8f31ed931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3de034d401e9f67abe346eddc52f4bb7965c2a6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/a26CRBK7hj4Ov3rIwAARn8IAKvYJqefyv8sj9Y7/GjZ3w2t\nKdOCCISFi+GHCnPd/LbtjyVgfM4+5tHrmIKuOSpaCuolNKEVzm2EuZfnxhrwlM9/\nkw0er2+FFp8JmumYKcGJ2pJOM2HUNsJItS9ZLfV9nP7yb/7KG+j/jFoYALYA1sli\nE7CAdlV0zo9ek8b3fw/+CA1V29lK9yRDTN0fOZYYrO+WqT81mjWNx6qxudSUBjK+\nSiPvrVi7cKspsc3JyW855ZEA2jtarxB5Oo368XfRkXopjZe4Or3TmTpsfzaH1n8g\nMX8tWRiVRLkqApRIEOWA05r6uRGc03uzz44UY9EK5Op+FvWTUDotCp+gLGTQKaI=\n=tal8\n-----END PGP SIGNATURE-----\n", "payload": "tree 71b2ce1cbde918c54cb652f0287fc9d8f31ed931\nparent 5548e585c11b35f04c9eab200c1304057e9267f6\nparent 9efe97951165a144c17ab08c8842f4f1cf23b4da\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660792250 +0200\ncommitter GitHub <noreply@github.com> 1660792250 +0200\n\nRollup merge of #100674 - PragmaTwice:mig-typeck-unused-crate-diag, r=davidtwco\n\nMigrate lint reports in typeck::check_unused to LintDiagnostic\n\nIn this PR, I migrate two lint reports in `typeck::check_unused` by `LintDiagnostic`, all of which is about extern crates.\n\n```@rustbot``` label +A-translation\nr? rust-lang/diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3de034d401e9f67abe346eddc52f4bb7965c2a6c", "html_url": "https://github.com/rust-lang/rust/commit/3de034d401e9f67abe346eddc52f4bb7965c2a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3de034d401e9f67abe346eddc52f4bb7965c2a6c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5548e585c11b35f04c9eab200c1304057e9267f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5548e585c11b35f04c9eab200c1304057e9267f6", "html_url": "https://github.com/rust-lang/rust/commit/5548e585c11b35f04c9eab200c1304057e9267f6"}, {"sha": "9efe97951165a144c17ab08c8842f4f1cf23b4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/9efe97951165a144c17ab08c8842f4f1cf23b4da", "html_url": "https://github.com/rust-lang/rust/commit/9efe97951165a144c17ab08c8842f4f1cf23b4da"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "0014da17c88e53692c5ad5ddeb95848d201212fa", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3de034d401e9f67abe346eddc52f4bb7965c2a6c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3de034d401e9f67abe346eddc52f4bb7965c2a6c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=3de034d401e9f67abe346eddc52f4bb7965c2a6c", "patch": "@@ -123,3 +123,11 @@ typeck_manual_implementation =\n     .help = add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n typeck_substs_on_overridden_impl = could not resolve substs on overridden impl\n+\n+typeck_unused_extern_crate =\n+    unused extern crate\n+    .suggestion = remove it\n+\n+typeck_extern_crate_not_idiomatic =\n+    `extern crate` is not idiomatic in the new edition\n+    .suggestion = convert it to a `{$msg_code}`"}, {"sha": "1d23ed9292180263f7be92f54688ad83f178f3e1", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3de034d401e9f67abe346eddc52f4bb7965c2a6c/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de034d401e9f67abe346eddc52f4bb7965c2a6c/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=3de034d401e9f67abe346eddc52f4bb7965c2a6c", "patch": "@@ -1,5 +1,5 @@\n+use crate::errors::{ExternCrateNotIdiomatic, UnusedExternCrate};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -108,25 +108,16 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         // We do this in any edition.\n         if extern_crate.warn_if_unused {\n             if let Some(&span) = unused_extern_crates.get(&def_id) {\n+                // Removal suggestion span needs to include attributes (Issue #54400)\n                 let id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                tcx.struct_span_lint_hir(lint, id, span, |lint| {\n-                    // Removal suggestion span needs to include attributes (Issue #54400)\n-                    let span_with_attrs = tcx\n-                        .hir()\n-                        .attrs(id)\n-                        .iter()\n-                        .map(|attr| attr.span)\n-                        .fold(span, |acc, attr_span| acc.to(attr_span));\n-\n-                    lint.build(\"unused extern crate\")\n-                        .span_suggestion_short(\n-                            span_with_attrs,\n-                            \"remove it\",\n-                            \"\",\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n+                let span_with_attrs = tcx\n+                    .hir()\n+                    .attrs(id)\n+                    .iter()\n+                    .map(|attr| attr.span)\n+                    .fold(span, |acc, attr_span| acc.to(attr_span));\n+\n+                tcx.emit_spanned_lint(lint, id, span, UnusedExternCrate { span: span_with_attrs });\n                 continue;\n             }\n         }\n@@ -158,23 +149,23 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         if !tcx.hir().attrs(id).is_empty() {\n             continue;\n         }\n-        tcx.struct_span_lint_hir(lint, id, extern_crate.span, |lint| {\n-            // Otherwise, we can convert it into a `use` of some kind.\n-            let base_replacement = match extern_crate.orig_name {\n-                Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n-                None => format!(\"use {};\", item.ident.name),\n-            };\n-            let vis = tcx.sess.source_map().span_to_snippet(item.vis_span).unwrap_or_default();\n-            let add_vis = |to| if vis.is_empty() { to } else { format!(\"{} {}\", vis, to) };\n-            lint.build(\"`extern crate` is not idiomatic in the new edition\")\n-                .span_suggestion_short(\n-                    extern_crate.span,\n-                    &format!(\"convert it to a `{}`\", add_vis(\"use\".to_string())),\n-                    add_vis(base_replacement),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n-        })\n+\n+        let base_replacement = match extern_crate.orig_name {\n+            Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n+            None => format!(\"use {};\", item.ident.name),\n+        };\n+        let vis = tcx.sess.source_map().span_to_snippet(item.vis_span).unwrap_or_default();\n+        let add_vis = |to| if vis.is_empty() { to } else { format!(\"{} {}\", vis, to) };\n+        tcx.emit_spanned_lint(\n+            lint,\n+            id,\n+            extern_crate.span,\n+            ExternCrateNotIdiomatic {\n+                span: extern_crate.span,\n+                msg_code: add_vis(\"use\".to_string()),\n+                suggestion_code: add_vis(base_replacement),\n+            },\n+        );\n     }\n }\n "}, {"sha": "76599721e586f77d60b4a513ecfd4d2940c79444", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3de034d401e9f67abe346eddc52f4bb7965c2a6c/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de034d401e9f67abe346eddc52f4bb7965c2a6c/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=3de034d401e9f67abe346eddc52f4bb7965c2a6c", "patch": "@@ -1,6 +1,6 @@\n //! Errors emitted by typeck.\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n@@ -324,3 +324,19 @@ pub struct SubstsOnOverriddenImpl {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[lint(typeck::unused_extern_crate)]\n+pub struct UnusedExternCrate {\n+    #[suggestion(applicability = \"machine-applicable\", code = \"\")]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[lint(typeck::extern_crate_not_idiomatic)]\n+pub struct ExternCrateNotIdiomatic {\n+    #[suggestion_short(applicability = \"machine-applicable\", code = \"{suggestion_code}\")]\n+    pub span: Span,\n+    pub msg_code: String,\n+    pub suggestion_code: String,\n+}"}]}