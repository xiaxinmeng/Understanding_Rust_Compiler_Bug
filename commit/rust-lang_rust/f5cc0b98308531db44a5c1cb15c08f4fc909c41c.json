{"sha": "f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Y2MwYjk4MzA4NTMxZGI0NGE1YzFjYjE1YzA4ZjRmYzkwOWM0MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-22T01:30:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-22T01:30:32Z"}, "message": "auto merge of #5075 : luqmana/rust/derec, r=catamorphism\n\nNow only `lib core/pipes.rs` has `#[allow(structural_records)]`. That can be removed after a snapshot.", "tree": {"sha": "d30f83d5e3f9b75fc55f0da930325cf48390b6e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d30f83d5e3f9b75fc55f0da930325cf48390b6e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "html_url": "https://github.com/rust-lang/rust/commit/f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab784b7de522c358e682e00c3a01d44d32c56943", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab784b7de522c358e682e00c3a01d44d32c56943", "html_url": "https://github.com/rust-lang/rust/commit/ab784b7de522c358e682e00c3a01d44d32c56943"}, {"sha": "48c1c3cfc076bf155c1e54afa41ec560b343f52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c1c3cfc076bf155c1e54afa41ec560b343f52d", "html_url": "https://github.com/rust-lang/rust/commit/48c1c3cfc076bf155c1e54afa41ec560b343f52d"}], "stats": {"total": 327, "additions": 131, "deletions": 196}, "files": [{"sha": "0facf9d63c340e3b04daf0061ea8a848120adc4f", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -21,7 +21,7 @@ pub enum mode {\n     mode_debug_info,\n }\n \n-pub type config = {\n+pub struct config {\n     // The library paths required for running the compiler\n     compile_lib_path: ~str,\n \n@@ -68,4 +68,4 @@ pub type config = {\n     // Explain what's going on\n     verbose: bool\n \n-};\n+}"}, {"sha": "6748edb9dbdf82daf0de05a5706d85f77d850a25", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -11,7 +11,6 @@\n #[crate_type = \"bin\"];\n \n #[no_core];\n-#[legacy_records];\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n@@ -77,26 +76,28 @@ pub fn parse_config(args: ~[~str]) -> config {\n         Path(getopts::opt_str(m, nm))\n     }\n \n-    return {compile_lib_path: getopts::opt_str(matches, ~\"compile-lib-path\"),\n-         run_lib_path: getopts::opt_str(matches, ~\"run-lib-path\"),\n-         rustc_path: opt_path(matches, ~\"rustc-path\"),\n-         src_base: opt_path(matches, ~\"src-base\"),\n-         build_base: opt_path(matches, ~\"build-base\"),\n-         aux_base: opt_path(matches, ~\"aux-base\"),\n-         stage_id: getopts::opt_str(matches, ~\"stage-id\"),\n-         mode: str_mode(getopts::opt_str(matches, ~\"mode\")),\n-         run_ignored: getopts::opt_present(matches, ~\"ignored\"),\n-         filter:\n+    config {\n+        compile_lib_path: getopts::opt_str(matches, ~\"compile-lib-path\"),\n+        run_lib_path: getopts::opt_str(matches, ~\"run-lib-path\"),\n+        rustc_path: opt_path(matches, ~\"rustc-path\"),\n+        src_base: opt_path(matches, ~\"src-base\"),\n+        build_base: opt_path(matches, ~\"build-base\"),\n+        aux_base: opt_path(matches, ~\"aux-base\"),\n+        stage_id: getopts::opt_str(matches, ~\"stage-id\"),\n+        mode: str_mode(getopts::opt_str(matches, ~\"mode\")),\n+        run_ignored: getopts::opt_present(matches, ~\"ignored\"),\n+        filter:\n              if vec::len(matches.free) > 0u {\n                  option::Some(matches.free[0])\n              } else { option::None },\n-         logfile: option::map(&getopts::opt_maybe_str(matches,\n+        logfile: option::map(&getopts::opt_maybe_str(matches,\n                                                      ~\"logfile\"),\n-                              |s| Path(*s)),\n-         runtool: getopts::opt_maybe_str(matches, ~\"runtool\"),\n-         rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n-         jit: getopts::opt_present(matches, ~\"jit\"),\n-         verbose: getopts::opt_present(matches, ~\"verbose\")};\n+                             |s| Path(*s)),\n+        runtool: getopts::opt_maybe_str(matches, ~\"runtool\"),\n+        rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n+        jit: getopts::opt_present(matches, ~\"jit\"),\n+        verbose: getopts::opt_present(matches, ~\"verbose\")\n+    }\n }\n \n pub fn log_config(config: config) {"}, {"sha": "4152a32fc3330cfc638b7d8b31a710c5e1b769cd", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -1278,13 +1278,13 @@ fn test_simplification() {\n     let item_in = ast::ii_item(quote_item!(\n         fn new_int_alist<B:Copy>() -> alist<int, B> {\n             fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-            return {eq_fn: eq_int, data: ~[]};\n+            return alist {eq_fn: eq_int, data: ~[]};\n         }\n     ).get());\n     let item_out = simplify_ast(item_in);\n     let item_exp = ast::ii_item(quote_item!(\n         fn new_int_alist<B:Copy>() -> alist<int, B> {\n-            return {eq_fn: eq_int, data: ~[]};\n+            return alist {eq_fn: eq_int, data: ~[]};\n         }\n     ).get());\n     match (item_out, item_exp) {"}, {"sha": "0a06808b6335609d8278fa080734ac417f72c6a7", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -706,23 +706,21 @@ fn check_item_deprecated_self(cx: ty::ctxt, item: @ast::item) {\n }\n \n fn check_item_structural_records(cx: ty::ctxt, it: @ast::item) {\n-    if !cx.legacy_records {\n-        let visit = item_stopping_visitor(\n-            visit::mk_simple_visitor(@visit::SimpleVisitor {\n-                visit_expr: |e: @ast::expr| {\n-                    match e.node {\n-                        ast::expr_rec(*) =>\n-                            cx.sess.span_lint(\n-                                structural_records, e.id, it.id,\n-                                e.span,\n-                                ~\"structural records are deprecated\"),\n-                        _ => ()\n-                    }\n-                },\n-                .. *visit::default_simple_visitor()\n-            }));\n-        visit::visit_item(it, (), visit);\n-    }\n+    let visit = item_stopping_visitor(\n+        visit::mk_simple_visitor(@visit::SimpleVisitor {\n+            visit_expr: |e: @ast::expr| {\n+                match e.node {\n+                    ast::expr_rec(*) =>\n+                        cx.sess.span_lint(\n+                            structural_records, e.id, it.id,\n+                            e.span,\n+                            ~\"structural records are deprecated\"),\n+                    _ => ()\n+                }\n+            },\n+            .. *visit::default_simple_visitor()\n+        }));\n+    visit::visit_item(it, (), visit);\n }\n \n fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {"}, {"sha": "2ed36ade7fd8d78004d88078e58043ad2e5c0d22", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -233,7 +233,6 @@ struct ctxt_ {\n     mut next_id: uint,\n     vecs_implicitly_copyable: bool,\n     legacy_modes: bool,\n-    legacy_records: bool,\n     cstore: @mut metadata::cstore::CStore,\n     sess: session::Session,\n     def_map: resolve::DefMap,\n@@ -789,16 +788,10 @@ pub fn mk_ctxt(s: session::Session,\n                crate: @ast::crate)\n             -> ctxt {\n     let mut legacy_modes = false;\n-    let mut legacy_records = false;\n     for crate.node.attrs.each |attribute| {\n         match attribute.node.value.node {\n             ast::meta_word(w) if *w == ~\"legacy_modes\" => {\n                 legacy_modes = true;\n-                if legacy_records { break; }\n-            }\n-            ast::meta_word(w) if *w == ~\"legacy_records\" => {\n-                legacy_records = true;\n-                if legacy_modes { break; }\n             }\n             _ => {}\n         }\n@@ -814,7 +807,6 @@ pub fn mk_ctxt(s: session::Session,\n         mut next_id: 0u,\n         vecs_implicitly_copyable: vecs_implicitly_copyable,\n         legacy_modes: legacy_modes,\n-        legacy_records: legacy_records,\n         cstore: s.cstore,\n         sess: s,\n         def_map: dm,"}, {"sha": "0fe533e3dd9f01e50056cd0d72edfaba9645c3a0", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -17,7 +17,6 @@\n \n #[crate_type = \"lib\"];\n \n-#[legacy_records];\n #[no_core];\n \n #[allow(vecs_implicitly_copyable,"}, {"sha": "7766602dd89bf48d66f997e5d621738c56f2722f", "filename": "src/librusti/wrapper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrusti%2Fwrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrusti%2Fwrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fwrapper.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -16,7 +16,6 @@\n #[allow(non_implicitly_copyable_typarams)];\n #[allow(owned_heap_memory)];\n #[allow(path_statement)];\n-#[allow(structural_records)];\n #[allow(unrecognized_lint)];\n #[allow(unused_imports)];\n #[allow(vecs_implicitly_copyable)];"}, {"sha": "78db7dccb86b64a480e0e291c26f69376a9735de", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -20,8 +20,6 @@\n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n \n-#[legacy_records];\n-\n extern mod core(vers = \"0.6\");\n extern mod std(vers = \"0.6\");\n extern mod rustc(vers = \"0.6\");"}, {"sha": "871ba5e840172617d4596097d8ff3bb431de13b0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -1926,7 +1926,7 @@ pub impl Parser {\n             fields.push(self.parse_field(token::COLON));\n         }\n         self.expect(token::RBRACE);\n-        //self.warn(~\"REC\");\n+        self.warn(~\"REC\");\n         return expr_rec(fields, base);\n     }\n "}, {"sha": "670e7644062236bf34e4ff2d8bf52c820d8f44d8", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -10,8 +10,6 @@\n \n // Compare bounded and unbounded protocol performance.\n \n-#[allow(structural_records)]; // Pipes\n-// Until a snapshot\n // xfail-pretty\n  \n extern mod std;"}, {"sha": "f5597859433b3b2ced6a0f47c305b79543adc559", "filename": "src/test/compile-fail/borrowck-assign-comp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type point = { x: int, y: int };\n+struct point {x: int, mut y: int }\n \n fn a() {\n-    let mut p = {x: 3, y: 4};\n+    let mut p = point {x: 3, y: 4};\n     let _q = &p; //~ NOTE loan of mutable local variable granted here\n \n     // This assignment is illegal because the field x is not\n@@ -21,29 +21,29 @@ fn a() {\n }\n \n fn b() {\n-    let mut p = {x: 3, mut y: 4};\n-    let _q = &p;\n-\n+    let mut p = point {x: 3, mut y: 4};\n     // This assignment is legal because `y` is inherently mutable (and\n     // hence &_q.y is &mut int).\n+    let _q = &p;\n+\n     p.y = 5;\n }\n \n fn c() {\n     // this is sort of the opposite.  We take a loan to the interior of `p`\n     // and then try to overwrite `p` as a whole.\n \n-    let mut p = {x: 3, mut y: 4};\n+    let mut p = point {x: 3, mut y: 4};\n     let _q = &p.y; //~ NOTE loan of mutable local variable granted here\n-    p = {x: 5, mut y: 7};//~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n+    p = point {x: 5, mut y: 7};//~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n     copy p;\n }\n \n fn d() {\n     // just for completeness's sake, the easy case, where we take the\n     // address of a subcomponent and then modify that subcomponent:\n \n-    let mut p = {x: 3, mut y: 4};\n+    let mut p = point {x: 3, mut y: 4};\n     let _q = &p.y; //~ NOTE loan of mutable field granted here\n     p.y = 5; //~ ERROR assigning to mutable field prohibited due to outstanding loan\n     copy p;"}, {"sha": "736e950cd82df896ae67e678449e6f48baa05ef8", "filename": "src/test/compile-fail/borrowck-assign-to-subfield.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -9,11 +9,23 @@\n // except according to those terms.\n \n fn main() {\n-    let mut p = {a: 1,\n-                 w: {a: 1},\n-                 x: @{a: 1},\n-                 y: @const {a: 1},\n-                 z: @mut{a: 1}};\n+    struct A {\n+        a: int,\n+        w: B,\n+        x: @B,\n+        y: @const B,\n+        z: @mut B\n+    }\n+    struct B {\n+        a: int\n+    }\n+    let mut p = A {\n+        a: 1,\n+        w: B {a: 1},\n+        x: @B {a: 1},\n+        y: @const B {a: 1},\n+        z: @mut B {a: 1}\n+    };\n \n     // even though `x` is not declared as a mutable field,\n     // `p` as a whole is mutable, so it can be modified."}, {"sha": "64baf3a9457664fe6419eaf7ab538dbea09b7180", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -12,8 +12,12 @@ fn each<T>(x: &[T], op: fn(elem: &T) -> bool) {\n     uint::range(0, x.len(), |i| op(&x[i]));\n }\n \n+struct A {\n+    mut a: int\n+}\n+\n fn main() {\n-    let x = [{mut a: 0}];\n+    let x = [A {mut a: 0}];\n     for each(x) |y| {\n         let z = &y.a; //~ ERROR illegal borrow unless pure\n         x[0].a = 10; //~ NOTE impure due to assigning to mutable field"}, {"sha": "a14fd18c7d554ace65973cfcf2fd663e213ac65d", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -13,7 +13,10 @@ fn each<T>(x: &[T], op: fn(elem: &T) -> bool) {\n }\n \n fn main() {\n-    let x = ~[{mut a: 0}];\n+    struct A {\n+        mut a: int\n+    }\n+    let x = ~[A {mut a: 0}];\n     for each(x) |y| {\n         let z = &y.a; //~ ERROR illegal borrow unless pure\n         x[0].a = 10; //~ NOTE impure due to assigning to mutable field"}, {"sha": "bd4428dc93064e409ef9a170b0561172b2531783", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type point = { x: int, y: int };\n+struct point { x: int, y: int }\n \n trait methods {\n     fn impurem();\n@@ -27,7 +27,7 @@ impl methods for point {\n }\n \n fn a() {\n-    let mut p = {x: 3, y: 4};\n+    let mut p = point {x: 3, y: 4};\n \n     // Here: it's ok to call even though receiver is mutable, because we\n     // can loan it out.\n@@ -41,7 +41,7 @@ fn a() {\n }\n \n fn b() {\n-    let mut p = {x: 3, y: 4};\n+    let mut p = point {x: 3, y: 4};\n \n     // Here I create an outstanding loan and check that we get conflicts:\n \n@@ -56,7 +56,7 @@ fn b() {\n \n fn c() {\n     // Loaning @mut as & is considered legal due to dynamic checks:\n-    let q = @mut {x: 3, y: 4};\n+    let q = @mut point {x: 3, y: 4};\n     q.purem();\n     q.impurem();\n }"}, {"sha": "e7cbab41079843528ccbf7d66d1807fb9bc9fbe8", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -8,12 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct node_ {\n+    mut a: ~cycle\n+}\n+\n enum cycle {\n-    node({mut a: ~cycle}),\n+    node(node_),\n     empty\n }\n fn main() {\n-    let x = ~node({mut a: ~empty});\n+    let x = ~node(node_ {mut a: ~empty});\n     // Create a cycle!\n     match *x { //~ NOTE loan of immutable local variable granted here\n       node(ref y) => {"}, {"sha": "ee96237a26c82ef9c4f052bcebe34afa97494ec0", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -16,12 +16,16 @@ fn local() {\n }\n \n fn local_rec() {\n-    let mut v = {f: ~3};\n+    struct F { f: ~int }\n+    let mut v = F {f: ~3};\n     borrow(v.f);\n }\n \n fn local_recs() {\n-    let mut v = {f: {g: {h: ~3}}};\n+    struct F { f: G }\n+    struct G { g: H }\n+    struct H { h: ~int }\n+    let mut v = F {f: G {g: H {h: ~3}}};\n     borrow(v.f.g.h);\n }\n "}, {"sha": "2be04929dc6a29a3a8d7ef0ac3f060d9c3c33b33", "filename": "src/test/compile-fail/issue-1896-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type boxedFn = { theFn: fn () -> uint };\n+struct boxedFn { theFn: fn~() -> uint }\n \n fn createClosure (closedUint: uint) -> boxedFn {\n-    { theFn: fn@ () -> uint { closedUint } } //~ ERROR mismatched types\n+    boxedFn {theFn: fn@ () -> uint { closedUint }} //~ ERROR mismatched types\n }\n \n fn main () {"}, {"sha": "1d54e03490175a74d6865e3516994a4fa238a894", "filename": "src/test/compile-fail/issue-3033.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab784b7de522c358e682e00c3a01d44d32c56943/src%2Ftest%2Fcompile-fail%2Fissue-3033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab784b7de522c358e682e00c3a01d44d32c56943/src%2Ftest%2Fcompile-fail%2Fissue-3033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3033.rs?ref=ab784b7de522c358e682e00c3a01d44d32c56943", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-type cat = {cat_name: ~str, cat_name: int};  //~ ERROR Duplicate field name cat_name\n-\n-fn main()\n-{\n-  io::println(int::str({x: 1, x: 2}.x)); //~ ERROR Duplicate field name x\n-}"}, {"sha": "f11703ecf02cd96de1af0867b456e59823d587e8", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -25,20 +25,23 @@ fn to_foo<T:Copy>(t: T) {\n     // the type of foo includes a region which will be resolved to\n     // the fn body itself.\n     let v = &3;\n-    let x = {f:t} as foo;\n+    struct F<T> { f: T }\n+    let x = F {f:t} as foo;\n     assert x.foo(v) == 3;\n }\n \n fn to_foo_2<T:Copy>(t: T) -> foo {\n     // Not OK---T may contain borrowed ptrs and it is going to escape\n     // as part of the returned foo value\n-    {f:t} as foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n+    struct F<T> { f: T }\n+    F {f:t} as foo //~ ERROR value may contain borrowed pointers; use `&static` bound\n }\n \n fn to_foo_3<T:Copy + &static>(t: T) -> foo {\n     // OK---T may escape as part of the returned foo value, but it is\n     // owned and hence does not contain borrowed ptrs\n-    {f:t} as foo\n+    struct F<T> { f: T }\n+    F {f:t} as foo\n }\n \n fn main() {"}, {"sha": "1bd42c1cd32a530adbe8ff96e5d3c8187828a4dd", "filename": "src/test/compile-fail/liveness-init-in-fru.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fru.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -10,10 +10,10 @@\n // except according to those terms.\n \n \n-type point = {x: int, y: int};\n+struct point {x: int, y: int}\n \n fn main() {\n     let mut origin: point;\n-    origin = {x: 10,.. origin}; //~ ERROR use of possibly uninitialized variable: `origin`\n+    origin = point {x: 10,.. origin}; //~ ERROR use of possibly uninitialized variable: `origin`\n     copy origin;\n }"}, {"sha": "f66d52499fed128643f7fd6a920e3b78e6cf0f41", "filename": "src/test/compile-fail/mutable-huh-field-assign.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab784b7de522c358e682e00c3a01d44d32c56943/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab784b7de522c358e682e00c3a01d44d32c56943/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs?ref=ab784b7de522c358e682e00c3a01d44d32c56943", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    fn f(&&v: {const field: int}) {\n-        // This shouldn't be possible\n-        v.field = 1 //~ ERROR assigning to const field\n-    }\n-\n-    let v = {field: 0};\n-\n-    f(v);\n-}"}, {"sha": "3b6522c308dd2dee2f11e36696244be15f41b165", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -41,8 +41,11 @@ fn r2(x:@mut int) -> r2 {\n }\n \n fn main() {\n-    foo({f: 3});\n-    foo({mut f: 3}); //~ ERROR does not fulfill `Const`\n+    struct A<T> { f: T }\n+    struct B<T> { mut f: T }\n+\n+    foo(A {f: 3});\n+    foo(B {mut f: 3}); //~ ERROR does not fulfill `Const`\n     foo(~[1]);\n     foo(~[mut 1]); //~ ERROR does not fulfill `Const`\n     foo(~1);\n@@ -51,5 +54,5 @@ fn main() {\n     foo(@mut 1); //~ ERROR does not fulfill `Const`\n     foo(r(1)); // this is okay now.\n     foo(r2(@mut 1)); //~ ERROR does not fulfill `Const`\n-    foo({f: {mut f: 1}}); //~ ERROR does not fulfill `Const`\n+    foo(A {f: B {mut f: 1}}); //~ ERROR does not fulfill `Const`\n }"}, {"sha": "cd3be9dc3d9d3bf2af6be383938b5ae6a1fd03f7", "filename": "src/test/compile-fail/obsolete-syntax.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -51,11 +51,6 @@ fn obsolete_with() {\n     //~^ ERROR obsolete syntax: with\n     let c = S { foo: (), with a };\n     //~^ ERROR obsolete syntax: with\n-    let a = { foo: (), bar: () };\n-    let b = { foo: () with a };\n-    //~^ ERROR obsolete syntax: with\n-    let c = { foo: (), with a };\n-    //~^ ERROR obsolete syntax: with\n }\n \n fn obsolete_moves() {"}, {"sha": "03ba317e7318bd0332cbdfbfcf777a104326ba9d", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -27,8 +27,9 @@ fn r(i: @mut int) -> r {\n fn main() {\n     let i = @mut 0;\n     {\n+        struct A { y: r }\n         // Can't do this copy\n-        let x = ~~~{y: r(i)};\n+        let x = ~~~A {y: r(i)};\n         let _z = copy x; //~ ERROR copying a value of non-copyable type\n         log(debug, x);\n     }"}, {"sha": "2a1db52d73312bbfcc315c91c0294ce49c70017b", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ab784b7de522c358e682e00c3a01d44d32c56943/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab784b7de522c358e682e00c3a01d44d32c56943/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=ab784b7de522c358e682e00c3a01d44d32c56943", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct my_resource {\n-  x: int,\n-}\n-\n-impl Drop for my_resource {\n-    fn finalize(&self) {\n-        log(error, self.x);\n-    }\n-}\n-\n-fn my_resource(x: int) -> my_resource {\n-    my_resource {\n-        x: x\n-    }\n-}\n-\n-fn main() {\n-    {\n-        let a = {x: 0, y: my_resource(20)};\n-        let b = {x: 2,.. copy a}; //~ ERROR copying a value of non-copyable type\n-        log(error, (a, b));\n-    }\n-}"}, {"sha": "4a78fdf97140a8d1e65a0abc613a78372f7bc214", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type ctxt = { v: uint };\n+struct ctxt { v: uint }\n \n trait get_ctxt {\n     // Here the `&` is bound in the method definition:\n     fn get_ctxt() -> &ctxt;\n }\n \n-type has_ctxt = { c: &ctxt };\n+struct has_ctxt { c: &ctxt }\n \n impl get_ctxt for has_ctxt {\n \n@@ -32,7 +32,7 @@ fn get_v(gc: get_ctxt) -> uint {\n }\n \n fn main() {\n-    let ctxt = { v: 22u };\n-    let hc = { c: &ctxt };\n+    let ctxt = ctxt { v: 22u };\n+    let hc = has_ctxt { c: &ctxt };\n     assert get_v(hc as get_ctxt) == 22u;\n }"}, {"sha": "2cb1f9deb496fbb3859a331085398b75f4e1d19a", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -8,21 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type ctxt = { v: uint };\n+struct ctxt { v: uint }\n \n trait get_ctxt {\n     fn get_ctxt() -> &self/ctxt;\n }\n \n-type has_ctxt = { c: &ctxt };\n+struct has_ctxt { c: &ctxt }\n \n impl get_ctxt for has_ctxt {\n     fn get_ctxt() -> &self/ctxt { self.c }\n }\n \n fn make_gc() -> get_ctxt  {\n-    let ctxt = { v: 22u };\n-    let hc = { c: &ctxt }; //~ ERROR illegal borrow\n+    let ctxt = ctxt { v: 22u };\n+    let hc = has_ctxt { c: &ctxt }; //~ ERROR illegal borrow\n     return hc as get_ctxt;\n }\n "}, {"sha": "ead155320b81c55b54a9f332572941ecbf76d483", "filename": "src/test/compile-fail/tps-invariant-enum.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -8,21 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum box_impl<T> = {\n+struct box<T> {\n     mut f: T\n-};\n+}\n+enum box_impl<T> = box<T>;\n \n fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n     b.f = v;\n }\n \n fn main() {\n-    let b = box_impl::<@int>({mut f: @3});\n+    let b = box_impl::<@int>(box::<@int> {mut f: @3});\n     set_box_impl(b, @mut 5);\n     //~^ ERROR values differ in mutability\n \n     // No error when type of parameter actually IS @const int\n     let x: @const int = @3; // only way I could find to upcast\n-    let b = box_impl::<@const int>({mut f: x});\n+    let b = box_impl::<@const int>(box::<@const int>{mut f: x});\n     set_box_impl(b, @mut 5);\n }"}, {"sha": "adf822328988760e9e11bd3685631b171b77a9a9", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -13,9 +13,11 @@ trait box_trait<T> {\n     fn set(t: T);\n }\n \n-enum box_impl<T> = {\n+struct box<T> {\n     mut f: T\n-};\n+}\n+\n+enum box_impl<T> = box<T>;\n \n impl<T:Copy> box_trait<T> for box_impl<T> {\n     fn get() -> T { return self.f; }\n@@ -31,7 +33,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n }\n \n fn main() {\n-    let b = box_impl::<@int>({mut f: @3});\n+    let b = box_impl::<@int>(box::<@int> {mut f: @3});\n     set_box_trait(b as box_trait::<@int>, @mut 5);\n     //~^ ERROR values differ in mutability\n     set_box_impl(b, @mut 5);"}, {"sha": "edf3930e6739d680f344197d93ea39a74272bbdd", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -14,8 +14,6 @@\n \n // xfail-win32\n \n-#[legacy_records];\n-\n extern mod std;\n use std::timer::sleep;\n use std::uv;"}, {"sha": "79ce20a06fd12a15019edf490f3870489840c93f", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -10,8 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_records];\n-\n extern mod std;\n use std::timer::sleep;\n use std::uv;"}, {"sha": "f08eaf973b26cc6d5e2f337791752f8e88d1bf3d", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -17,21 +17,20 @@\n \n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n-#[legacy_records];\n \n mod pingpong {\n     use core::pipes::*;\n     use core::ptr;\n \n-    pub type packets = {\n+    pub struct Packets {\n         ping: Packet<ping>,\n         pong: Packet<pong>,\n-    };\n+    }\n \n     pub fn init() -> (client::ping, server::ping) {\n         let buffer = ~Buffer {\n             header: BufferHeader(),\n-            data: {\n+            data: Packets {\n                 ping: mk_packet::<ping>(),\n                 pong: mk_packet::<pong>()\n             }\n@@ -59,16 +58,16 @@ mod pingpong {\n             }\n         }\n         pub type ping = pipes::SendPacketBuffered<::pingpong::ping,\n-                                                  ::pingpong::packets>;\n+                                                  ::pingpong::Packets>;\n         pub type pong = pipes::RecvPacketBuffered<::pingpong::pong,\n-                                                  ::pingpong::packets>;\n+                                                  ::pingpong::Packets>;\n     }\n     pub mod server {\n         use core::pipes::*;\n         use core::ptr;\n \n         pub type ping = pipes::RecvPacketBuffered<::pingpong::ping,\n-        ::pingpong::packets>;\n+        ::pingpong::Packets>;\n         pub fn pong(+pipe: pong) -> ping {\n             {\n                 let b = pipe.reuse_buffer();\n@@ -80,7 +79,7 @@ mod pingpong {\n             }\n         }\n         pub type pong = pipes::SendPacketBuffered<::pingpong::pong,\n-                                                  ::pingpong::packets>;\n+                                                  ::pingpong::Packets>;\n     }\n }\n "}, {"sha": "050ff76ef9b75bfc4120f057fde027c28b4aa724", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -12,8 +12,6 @@\n \n // An example to make sure the protocol parsing syntax extension works.\n \n-#[legacy_records];\n-\n use core::option;\n \n proto! pingpong ("}, {"sha": "49cda38f50046410d755249e18a49221a749a23a", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -15,8 +15,6 @@\n // Code is easier to write in emacs, and it's good to be sure all the\n // code samples compile (or not) as they should.\n \n-#[legacy_records];\n-\n use double_buffer::client::*;\n use double_buffer::give_buffer;\n "}, {"sha": "86fe90ff453e61bb2b760a6f9c2d2021366d9bb2", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -13,8 +13,6 @@\n // xfail-pretty\n // xfail-win32\n \n-#[legacy_records];\n-\n extern mod std;\n use std::timer::sleep;\n use std::uv;"}, {"sha": "a9fa43378f1c059d0133d8881b58e0b47b019e0f", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cc0b98308531db44a5c1cb15c08f4fc909c41c/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=f5cc0b98308531db44a5c1cb15c08f4fc909c41c", "patch": "@@ -10,8 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_records];\n-\n extern mod std;\n use std::timer::sleep;\n use std::uv;"}]}