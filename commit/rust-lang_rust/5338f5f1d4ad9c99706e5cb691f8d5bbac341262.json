{"sha": "5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "node_id": "C_kwDOAAsO6NoAKDUzMzhmNWYxZDRhZDljOTk3MDZlNWNiNjkxZjhkNWJiYWMzNDEyNjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T12:35:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T12:35:55Z"}, "message": "Auto merge of #101757 - Dylan-DPC:rollup-wkt6oe9, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #101602 (Streamline `AttrAnnotatedTokenStream`)\n - #101690 (Avoid `Iterator::last`)\n - #101700 (A `SubstitutionPart` is not considered a deletion if it replaces nothing with nothing)\n - #101745 (Fix typo in concat_bytes documentation)\n - #101748 (rustdoc: remove redundant CSS `#source-sidebar, #sidebar-toggle`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8dec5faa160a071b6e552792ad250c2127fd8e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dec5faa160a071b6e552792ad250c2127fd8e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "html_url": "https://github.com/rust-lang/rust/commit/5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7098c181f8447810fadb1776d3ffa3cdc93ce402", "url": "https://api.github.com/repos/rust-lang/rust/commits/7098c181f8447810fadb1776d3ffa3cdc93ce402", "html_url": "https://github.com/rust-lang/rust/commit/7098c181f8447810fadb1776d3ffa3cdc93ce402"}, {"sha": "1c74d5041f2542fac7048207eb83e5ee035d5a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c74d5041f2542fac7048207eb83e5ee035d5a75", "html_url": "https://github.com/rust-lang/rust/commit/1c74d5041f2542fac7048207eb83e5ee035d5a75"}], "stats": {"total": 789, "additions": 352, "deletions": 437}, "files": [{"sha": "5e4288c344be2a995168775b8f7ddc20fdc82666", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -24,7 +24,7 @@ pub use UnsafeSource::*;\n \n use crate::ptr::P;\n use crate::token::{self, CommentKind, Delimiter};\n-use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream};\n+use crate::tokenstream::{DelimSpan, LazyAttrTokenStream, TokenStream};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n@@ -91,7 +91,7 @@ pub struct Path {\n     /// The segments in the path: the things separated by `::`.\n     /// Global paths begin with `kw::PathRoot`.\n     pub segments: Vec<PathSegment>,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n impl PartialEq<Symbol> for Path {\n@@ -534,7 +534,7 @@ pub struct Block {\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`.\n     pub rules: BlockCheckMode,\n     pub span: Span,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n     /// The following *isn't* a parse error, but will cause multiple errors in following stages.\n     /// ```compile_fail\n     /// let x = {\n@@ -553,7 +553,7 @@ pub struct Pat {\n     pub id: NodeId,\n     pub kind: PatKind,\n     pub span: Span,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n impl Pat {\n@@ -937,8 +937,8 @@ impl Stmt {\n     /// a trailing semicolon.\n     ///\n     /// This only modifies the parsed AST struct, not the attached\n-    /// `LazyTokenStream`. The parser is responsible for calling\n-    /// `CreateTokenStream::add_trailing_semi` when there is actually\n+    /// `LazyAttrTokenStream`. The parser is responsible for calling\n+    /// `ToAttrTokenStream::add_trailing_semi` when there is actually\n     /// a semicolon in the tokenstream.\n     pub fn add_trailing_semicolon(mut self) -> Self {\n         self.kind = match self.kind {\n@@ -984,7 +984,7 @@ pub struct MacCallStmt {\n     pub mac: P<MacCall>,\n     pub style: MacStmtStyle,\n     pub attrs: AttrVec,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug)]\n@@ -1009,7 +1009,7 @@ pub struct Local {\n     pub kind: LocalKind,\n     pub span: Span,\n     pub attrs: AttrVec,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -1108,7 +1108,7 @@ pub struct Expr {\n     pub kind: ExprKind,\n     pub span: Span,\n     pub attrs: AttrVec,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n impl Expr {\n@@ -1967,7 +1967,7 @@ pub struct Ty {\n     pub id: NodeId,\n     pub kind: TyKind,\n     pub span: Span,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n impl Clone for Ty {\n@@ -2532,7 +2532,7 @@ impl<D: Decoder> Decodable<D> for AttrId {\n pub struct AttrItem {\n     pub path: Path,\n     pub args: MacArgs,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n /// A list of attributes.\n@@ -2552,7 +2552,7 @@ pub struct Attribute {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct NormalAttr {\n     pub item: AttrItem,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -2603,7 +2603,7 @@ impl PolyTraitRef {\n pub struct Visibility {\n     pub kind: VisibilityKind,\n     pub span: Span,\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -2689,7 +2689,7 @@ pub struct Item<K = ItemKind> {\n     ///\n     /// Note that the tokens here do not include the outer attributes, but will\n     /// include inner attributes.\n-    pub tokens: Option<LazyTokenStream>,\n+    pub tokens: Option<LazyAttrTokenStream>,\n }\n \n impl Item {"}, {"sha": "1b31be07f7ad1b1cc8cdb93b80fc463ab7d8e64b", "filename": "compiler/rustc_ast/src/ast_traits.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -4,7 +4,7 @@\n \n use crate::ptr::P;\n use crate::token::Nonterminal;\n-use crate::tokenstream::LazyTokenStream;\n+use crate::tokenstream::LazyAttrTokenStream;\n use crate::{Arm, Crate, ExprField, FieldDef, GenericParam, Param, PatField, Variant};\n use crate::{AssocItem, Expr, ForeignItem, Item, NodeId};\n use crate::{AttrItem, AttrKind, Block, Pat, Path, Ty, Visibility};\n@@ -124,18 +124,18 @@ impl HasSpan for AttrItem {\n \n /// A trait for AST nodes having (or not having) collected tokens.\n pub trait HasTokens {\n-    fn tokens(&self) -> Option<&LazyTokenStream>;\n-    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>>;\n+    fn tokens(&self) -> Option<&LazyAttrTokenStream>;\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>>;\n }\n \n macro_rules! impl_has_tokens {\n     ($($T:ty),+ $(,)?) => {\n         $(\n             impl HasTokens for $T {\n-                fn tokens(&self) -> Option<&LazyTokenStream> {\n+                fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n                     self.tokens.as_ref()\n                 }\n-                fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+                fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n                     Some(&mut self.tokens)\n                 }\n             }\n@@ -147,10 +147,10 @@ macro_rules! impl_has_tokens_none {\n     ($($T:ty),+ $(,)?) => {\n         $(\n             impl HasTokens for $T {\n-                fn tokens(&self) -> Option<&LazyTokenStream> {\n+                fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n                     None\n                 }\n-                fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+                fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n                     None\n                 }\n             }\n@@ -162,25 +162,25 @@ impl_has_tokens!(AssocItem, AttrItem, Block, Expr, ForeignItem, Item, Pat, Path,\n impl_has_tokens_none!(Arm, ExprField, FieldDef, GenericParam, Param, PatField, Variant);\n \n impl<T: AstDeref<Target: HasTokens>> HasTokens for T {\n-    fn tokens(&self) -> Option<&LazyTokenStream> {\n+    fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n         self.ast_deref().tokens()\n     }\n-    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n         self.ast_deref_mut().tokens_mut()\n     }\n }\n \n impl<T: HasTokens> HasTokens for Option<T> {\n-    fn tokens(&self) -> Option<&LazyTokenStream> {\n+    fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n         self.as_ref().and_then(|inner| inner.tokens())\n     }\n-    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n         self.as_mut().and_then(|inner| inner.tokens_mut())\n     }\n }\n \n impl HasTokens for StmtKind {\n-    fn tokens(&self) -> Option<&LazyTokenStream> {\n+    fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n         match self {\n             StmtKind::Local(local) => local.tokens.as_ref(),\n             StmtKind::Item(item) => item.tokens(),\n@@ -189,7 +189,7 @@ impl HasTokens for StmtKind {\n             StmtKind::MacCall(mac) => mac.tokens.as_ref(),\n         }\n     }\n-    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n         match self {\n             StmtKind::Local(local) => Some(&mut local.tokens),\n             StmtKind::Item(item) => item.tokens_mut(),\n@@ -201,24 +201,24 @@ impl HasTokens for StmtKind {\n }\n \n impl HasTokens for Stmt {\n-    fn tokens(&self) -> Option<&LazyTokenStream> {\n+    fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n         self.kind.tokens()\n     }\n-    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n         self.kind.tokens_mut()\n     }\n }\n \n impl HasTokens for Attribute {\n-    fn tokens(&self) -> Option<&LazyTokenStream> {\n+    fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n         match &self.kind {\n             AttrKind::Normal(normal) => normal.tokens.as_ref(),\n             kind @ AttrKind::DocComment(..) => {\n                 panic!(\"Called tokens on doc comment attr {:?}\", kind)\n             }\n         }\n     }\n-    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n         Some(match &mut self.kind {\n             AttrKind::Normal(normal) => &mut normal.tokens,\n             kind @ AttrKind::DocComment(..) => {\n@@ -229,7 +229,7 @@ impl HasTokens for Attribute {\n }\n \n impl HasTokens for Nonterminal {\n-    fn tokens(&self) -> Option<&LazyTokenStream> {\n+    fn tokens(&self) -> Option<&LazyAttrTokenStream> {\n         match self {\n             Nonterminal::NtItem(item) => item.tokens(),\n             Nonterminal::NtStmt(stmt) => stmt.tokens(),\n@@ -243,7 +243,7 @@ impl HasTokens for Nonterminal {\n             Nonterminal::NtIdent(..) | Nonterminal::NtLifetime(..) => None,\n         }\n     }\n-    fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n+    fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n         match self {\n             Nonterminal::NtItem(item) => item.tokens_mut(),\n             Nonterminal::NtStmt(stmt) => stmt.tokens_mut(),"}, {"sha": "a40508494cdc1d93f349eee8420ae02ddde2f306", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -7,9 +7,8 @@ use crate::ast::{MacArgs, MacArgsEq, MacDelimiter, MetaItem, MetaItemKind, Neste\n use crate::ast::{Path, PathSegment};\n use crate::ptr::P;\n use crate::token::{self, CommentKind, Delimiter, Token};\n-use crate::tokenstream::{AttrAnnotatedTokenStream, AttrAnnotatedTokenTree};\n use crate::tokenstream::{DelimSpan, Spacing, TokenTree};\n-use crate::tokenstream::{LazyTokenStream, TokenStream};\n+use crate::tokenstream::{LazyAttrTokenStream, TokenStream};\n use crate::util::comments;\n \n use rustc_index::bit_set::GrowableBitSet;\n@@ -296,20 +295,18 @@ impl Attribute {\n         }\n     }\n \n-    pub fn tokens(&self) -> AttrAnnotatedTokenStream {\n+    pub fn tokens(&self) -> TokenStream {\n         match self.kind {\n             AttrKind::Normal(ref normal) => normal\n                 .tokens\n                 .as_ref()\n                 .unwrap_or_else(|| panic!(\"attribute is missing tokens: {:?}\", self))\n-                .create_token_stream(),\n-            AttrKind::DocComment(comment_kind, data) => AttrAnnotatedTokenStream::from((\n-                AttrAnnotatedTokenTree::Token(Token::new(\n-                    token::DocComment(comment_kind, self.style, data),\n-                    self.span,\n-                )),\n+                .to_attr_token_stream()\n+                .to_tokenstream(),\n+            AttrKind::DocComment(comment_kind, data) => TokenStream::new(vec![TokenTree::Token(\n+                Token::new(token::DocComment(comment_kind, self.style, data), self.span),\n                 Spacing::Alone,\n-            )),\n+            )]),\n         }\n     }\n }\n@@ -356,7 +353,7 @@ pub fn mk_attr(style: AttrStyle, path: Path, args: MacArgs, span: Span) -> Attri\n \n pub fn mk_attr_from_item(\n     item: AttrItem,\n-    tokens: Option<LazyTokenStream>,\n+    tokens: Option<LazyAttrTokenStream>,\n     style: AttrStyle,\n     span: Span,\n ) -> Attribute {"}, {"sha": "4d3620ee8b0f0bfeb05dfb8f0577508ce5a20844", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -15,6 +15,7 @@\n #![feature(if_let_guard)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "ad68d6e755e0287d5eedda3eef87d57e9e72798f", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -642,17 +642,17 @@ pub fn noop_flat_map_param<T: MutVisitor>(mut param: Param, vis: &mut T) -> Smal\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_attr_annotated_tt<T: MutVisitor>(tt: &mut AttrAnnotatedTokenTree, vis: &mut T) {\n+pub fn visit_attr_tt<T: MutVisitor>(tt: &mut AttrTokenTree, vis: &mut T) {\n     match tt {\n-        AttrAnnotatedTokenTree::Token(token) => {\n+        AttrTokenTree::Token(token, _) => {\n             visit_token(token, vis);\n         }\n-        AttrAnnotatedTokenTree::Delimited(DelimSpan { open, close }, _delim, tts) => {\n+        AttrTokenTree::Delimited(DelimSpan { open, close }, _delim, tts) => {\n             vis.visit_span(open);\n             vis.visit_span(close);\n-            visit_attr_annotated_tts(tts, vis);\n+            visit_attr_tts(tts, vis);\n         }\n-        AttrAnnotatedTokenTree::Attributes(data) => {\n+        AttrTokenTree::Attributes(data) => {\n             for attr in &mut *data.attrs {\n                 match &mut attr.kind {\n                     AttrKind::Normal(normal) => {\n@@ -690,27 +690,27 @@ pub fn visit_tts<T: MutVisitor>(TokenStream(tts): &mut TokenStream, vis: &mut T)\n     }\n }\n \n-pub fn visit_attr_annotated_tts<T: MutVisitor>(\n-    AttrAnnotatedTokenStream(tts): &mut AttrAnnotatedTokenStream,\n-    vis: &mut T,\n-) {\n+pub fn visit_attr_tts<T: MutVisitor>(AttrTokenStream(tts): &mut AttrTokenStream, vis: &mut T) {\n     if T::VISIT_TOKENS && !tts.is_empty() {\n         let tts = Lrc::make_mut(tts);\n-        visit_vec(tts, |(tree, _is_joint)| visit_attr_annotated_tt(tree, vis));\n+        visit_vec(tts, |tree| visit_attr_tt(tree, vis));\n     }\n }\n \n-pub fn visit_lazy_tts_opt_mut<T: MutVisitor>(lazy_tts: Option<&mut LazyTokenStream>, vis: &mut T) {\n+pub fn visit_lazy_tts_opt_mut<T: MutVisitor>(\n+    lazy_tts: Option<&mut LazyAttrTokenStream>,\n+    vis: &mut T,\n+) {\n     if T::VISIT_TOKENS {\n         if let Some(lazy_tts) = lazy_tts {\n-            let mut tts = lazy_tts.create_token_stream();\n-            visit_attr_annotated_tts(&mut tts, vis);\n-            *lazy_tts = LazyTokenStream::new(tts);\n+            let mut tts = lazy_tts.to_attr_token_stream();\n+            visit_attr_tts(&mut tts, vis);\n+            *lazy_tts = LazyAttrTokenStream::new(tts);\n         }\n     }\n }\n \n-pub fn visit_lazy_tts<T: MutVisitor>(lazy_tts: &mut Option<LazyTokenStream>, vis: &mut T) {\n+pub fn visit_lazy_tts<T: MutVisitor>(lazy_tts: &mut Option<LazyAttrTokenStream>, vis: &mut T) {\n     visit_lazy_tts_opt_mut(lazy_tts.as_mut(), vis);\n }\n "}, {"sha": "875cd620dfc6ccb759f8394803651620168f382c", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 55, "deletions": 71, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -121,12 +121,12 @@ where\n     }\n }\n \n-pub trait CreateTokenStream: sync::Send + sync::Sync {\n-    fn create_token_stream(&self) -> AttrAnnotatedTokenStream;\n+pub trait ToAttrTokenStream: sync::Send + sync::Sync {\n+    fn to_attr_token_stream(&self) -> AttrTokenStream;\n }\n \n-impl CreateTokenStream for AttrAnnotatedTokenStream {\n-    fn create_token_stream(&self) -> AttrAnnotatedTokenStream {\n+impl ToAttrTokenStream for AttrTokenStream {\n+    fn to_attr_token_stream(&self) -> AttrTokenStream {\n         self.clone()\n     }\n }\n@@ -135,100 +135,96 @@ impl CreateTokenStream for AttrAnnotatedTokenStream {\n /// of an actual `TokenStream` until it is needed.\n /// `Box` is here only to reduce the structure size.\n #[derive(Clone)]\n-pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);\n+pub struct LazyAttrTokenStream(Lrc<Box<dyn ToAttrTokenStream>>);\n \n-impl LazyTokenStream {\n-    pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {\n-        LazyTokenStream(Lrc::new(Box::new(inner)))\n+impl LazyAttrTokenStream {\n+    pub fn new(inner: impl ToAttrTokenStream + 'static) -> LazyAttrTokenStream {\n+        LazyAttrTokenStream(Lrc::new(Box::new(inner)))\n     }\n \n-    pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {\n-        self.0.create_token_stream()\n+    pub fn to_attr_token_stream(&self) -> AttrTokenStream {\n+        self.0.to_attr_token_stream()\n     }\n }\n \n-impl fmt::Debug for LazyTokenStream {\n+impl fmt::Debug for LazyAttrTokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"LazyTokenStream({:?})\", self.create_token_stream())\n+        write!(f, \"LazyAttrTokenStream({:?})\", self.to_attr_token_stream())\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for LazyTokenStream {\n+impl<S: Encoder> Encodable<S> for LazyAttrTokenStream {\n     fn encode(&self, s: &mut S) {\n         // Used by AST json printing.\n-        Encodable::encode(&self.create_token_stream(), s);\n+        Encodable::encode(&self.to_attr_token_stream(), s);\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for LazyTokenStream {\n+impl<D: Decoder> Decodable<D> for LazyAttrTokenStream {\n     fn decode(_d: &mut D) -> Self {\n-        panic!(\"Attempted to decode LazyTokenStream\");\n+        panic!(\"Attempted to decode LazyAttrTokenStream\");\n     }\n }\n \n-impl<CTX> HashStable<CTX> for LazyTokenStream {\n+impl<CTX> HashStable<CTX> for LazyAttrTokenStream {\n     fn hash_stable(&self, _hcx: &mut CTX, _hasher: &mut StableHasher) {\n-        panic!(\"Attempted to compute stable hash for LazyTokenStream\");\n+        panic!(\"Attempted to compute stable hash for LazyAttrTokenStream\");\n     }\n }\n \n-/// A `AttrAnnotatedTokenStream` is similar to a `TokenStream`, but with extra\n+/// An `AttrTokenStream` is similar to a `TokenStream`, but with extra\n /// information about the tokens for attribute targets. This is used\n /// during expansion to perform early cfg-expansion, and to process attributes\n /// during proc-macro invocations.\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n-pub struct AttrAnnotatedTokenStream(pub Lrc<Vec<(AttrAnnotatedTokenTree, Spacing)>>);\n+pub struct AttrTokenStream(pub Lrc<Vec<AttrTokenTree>>);\n \n-/// Like `TokenTree`, but for `AttrAnnotatedTokenStream`\n+/// Like `TokenTree`, but for `AttrTokenStream`.\n #[derive(Clone, Debug, Encodable, Decodable)]\n-pub enum AttrAnnotatedTokenTree {\n-    Token(Token),\n-    Delimited(DelimSpan, Delimiter, AttrAnnotatedTokenStream),\n+pub enum AttrTokenTree {\n+    Token(Token, Spacing),\n+    Delimited(DelimSpan, Delimiter, AttrTokenStream),\n     /// Stores the attributes for an attribute target,\n     /// along with the tokens for that attribute target.\n     /// See `AttributesData` for more information\n     Attributes(AttributesData),\n }\n \n-impl AttrAnnotatedTokenStream {\n-    pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {\n-        AttrAnnotatedTokenStream(Lrc::new(tokens))\n+impl AttrTokenStream {\n+    pub fn new(tokens: Vec<AttrTokenTree>) -> AttrTokenStream {\n+        AttrTokenStream(Lrc::new(tokens))\n     }\n \n-    /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream\n-    /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'\n+    /// Converts this `AttrTokenStream` to a plain `TokenStream`.\n+    /// During conversion, `AttrTokenTree::Attributes` get 'flattened'\n     /// back to a `TokenStream` of the form `outer_attr attr_target`.\n     /// If there are inner attributes, they are inserted into the proper\n     /// place in the attribute target tokens.\n     pub fn to_tokenstream(&self) -> TokenStream {\n         let trees: Vec<_> = self\n             .0\n             .iter()\n-            .flat_map(|tree| match &tree.0 {\n-                AttrAnnotatedTokenTree::Token(inner) => {\n-                    smallvec![TokenTree::Token(inner.clone(), tree.1)].into_iter()\n+            .flat_map(|tree| match &tree {\n+                AttrTokenTree::Token(inner, spacing) => {\n+                    smallvec![TokenTree::Token(inner.clone(), *spacing)].into_iter()\n                 }\n-                AttrAnnotatedTokenTree::Delimited(span, delim, stream) => {\n+                AttrTokenTree::Delimited(span, delim, stream) => {\n                     smallvec![TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),]\n                         .into_iter()\n                 }\n-                AttrAnnotatedTokenTree::Attributes(data) => {\n+                AttrTokenTree::Attributes(data) => {\n                     let mut outer_attrs = Vec::new();\n                     let mut inner_attrs = Vec::new();\n                     for attr in &data.attrs {\n                         match attr.style {\n-                            crate::AttrStyle::Outer => {\n-                                outer_attrs.push(attr);\n-                            }\n-                            crate::AttrStyle::Inner => {\n-                                inner_attrs.push(attr);\n-                            }\n+                            crate::AttrStyle::Outer => outer_attrs.push(attr),\n+                            crate::AttrStyle::Inner => inner_attrs.push(attr),\n                         }\n                     }\n \n                     let mut target_tokens: Vec<_> = data\n                         .tokens\n-                        .create_token_stream()\n+                        .to_attr_token_stream()\n                         .to_tokenstream()\n                         .0\n                         .iter()\n@@ -239,9 +235,9 @@ impl AttrAnnotatedTokenStream {\n                         // Check the last two trees (to account for a trailing semi)\n                         for tree in target_tokens.iter_mut().rev().take(2) {\n                             if let TokenTree::Delimited(span, delim, delim_tokens) = tree {\n-                                // Inner attributes are only supported on extern blocks, functions, impls,\n-                                // and modules. All of these have their inner attributes placed at\n-                                // the beginning of the rightmost outermost braced group:\n+                                // Inner attributes are only supported on extern blocks, functions,\n+                                // impls, and modules. All of these have their inner attributes\n+                                // placed at the beginning of the rightmost outermost braced group:\n                                 // e.g. fn foo() { #![my_attr} }\n                                 //\n                                 // Therefore, we can insert them back into the right location\n@@ -255,7 +251,7 @@ impl AttrAnnotatedTokenStream {\n \n                                 let mut builder = TokenStreamBuilder::new();\n                                 for inner_attr in inner_attrs {\n-                                    builder.push(inner_attr.tokens().to_tokenstream());\n+                                    builder.push(inner_attr.tokens());\n                                 }\n                                 builder.push(delim_tokens.clone());\n                                 *tree = TokenTree::Delimited(*span, *delim, builder.build());\n@@ -273,7 +269,7 @@ impl AttrAnnotatedTokenStream {\n                     let mut flat: SmallVec<[_; 1]> = SmallVec::new();\n                     for attr in outer_attrs {\n                         // FIXME: Make this more efficient\n-                        flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());\n+                        flat.extend(attr.tokens().0.clone().iter().cloned());\n                     }\n                     flat.extend(target_tokens);\n                     flat.into_iter()\n@@ -300,7 +296,7 @@ pub struct AttributesData {\n     pub attrs: AttrVec,\n     /// The underlying tokens for the attribute target that `attrs`\n     /// are applied to\n-    pub tokens: LazyTokenStream,\n+    pub tokens: LazyAttrTokenStream,\n }\n \n /// A `TokenStream` is an abstract sequence of tokens, organized into [`TokenTree`]s.\n@@ -363,12 +359,6 @@ impl TokenStream {\n     }\n }\n \n-impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {\n-    fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {\n-        AttrAnnotatedTokenStream::new(vec![(tree, spacing)])\n-    }\n-}\n-\n impl iter::FromIterator<TokenTree> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {\n         TokenStream::new(iter.into_iter().collect::<Vec<TokenTree>>())\n@@ -420,22 +410,6 @@ impl TokenStream {\n         TokenStream(Lrc::new(self.0.iter().enumerate().map(|(i, tree)| f(i, tree)).collect()))\n     }\n \n-    fn opt_from_ast(node: &(impl HasAttrs + HasTokens)) -> Option<TokenStream> {\n-        let tokens = node.tokens()?;\n-        let attrs = node.attrs();\n-        let attr_annotated = if attrs.is_empty() {\n-            tokens.create_token_stream()\n-        } else {\n-            let attr_data =\n-                AttributesData { attrs: attrs.iter().cloned().collect(), tokens: tokens.clone() };\n-            AttrAnnotatedTokenStream::new(vec![(\n-                AttrAnnotatedTokenTree::Attributes(attr_data),\n-                Spacing::Alone,\n-            )])\n-        };\n-        Some(attr_annotated.to_tokenstream())\n-    }\n-\n     // Create a token stream containing a single token with alone spacing.\n     pub fn token_alone(kind: TokenKind, span: Span) -> TokenStream {\n         TokenStream::new(vec![TokenTree::token_alone(kind, span)])\n@@ -452,8 +426,18 @@ impl TokenStream {\n     }\n \n     pub fn from_ast(node: &(impl HasAttrs + HasSpan + HasTokens + fmt::Debug)) -> TokenStream {\n-        TokenStream::opt_from_ast(node)\n-            .unwrap_or_else(|| panic!(\"missing tokens for node at {:?}: {:?}\", node.span(), node))\n+        let Some(tokens) = node.tokens() else {\n+            panic!(\"missing tokens for node at {:?}: {:?}\", node.span(), node);\n+        };\n+        let attrs = node.attrs();\n+        let attr_stream = if attrs.is_empty() {\n+            tokens.to_attr_token_stream()\n+        } else {\n+            let attr_data =\n+                AttributesData { attrs: attrs.iter().cloned().collect(), tokens: tokens.clone() };\n+            AttrTokenStream::new(vec![AttrTokenTree::Attributes(attr_data)])\n+        };\n+        attr_stream.to_tokenstream()\n     }\n \n     pub fn from_nonterminal_ast(nt: &Nonterminal) -> TokenStream {"}, {"sha": "877944d3d70cb961195ac89e926ca12a39ef2467", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -86,8 +86,7 @@ impl LocationTable {\n         let (block, &first_index) = self\n             .statements_before_block\n             .iter_enumerated()\n-            .filter(|(_, first_index)| **first_index <= point_index)\n-            .last()\n+            .rfind(|&(_, &first_index)| first_index <= point_index)\n             .unwrap();\n \n         let statement_index = (point_index - first_index) / 2;"}, {"sha": "e673dff0dea8e438f33251c1b52cb6fc8f52debe", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -188,14 +188,14 @@ impl CfgEval<'_, '_> {\n         let orig_tokens = annotatable.to_tokens().flattened();\n \n         // Re-parse the tokens, setting the `capture_cfg` flag to save extra information\n-        // to the captured `AttrAnnotatedTokenStream` (specifically, we capture\n-        // `AttrAnnotatedTokenTree::AttributesData` for all occurrences of `#[cfg]` and `#[cfg_attr]`)\n+        // to the captured `AttrTokenStream` (specifically, we capture\n+        // `AttrTokenTree::AttributesData` for all occurrences of `#[cfg]` and `#[cfg_attr]`)\n         let mut parser =\n             rustc_parse::stream_to_parser(&self.cfg.sess.parse_sess, orig_tokens, None);\n         parser.capture_cfg = true;\n         annotatable = parse_annotatable_with(&mut parser);\n \n-        // Now that we have our re-parsed `AttrAnnotatedTokenStream`, recursively configuring\n+        // Now that we have our re-parsed `AttrTokenStream`, recursively configuring\n         // our attribute target will correctly the tokens as well.\n         flat_map_annotatable(self, annotatable)\n     }"}, {"sha": "66fbb8f1213e0a9b633a2eb4377bd640b731f627", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -1704,7 +1704,7 @@ impl EmitterWriter {\n         {\n             notice_capitalization |= only_capitalization;\n \n-            let has_deletion = parts.iter().any(|p| p.is_deletion());\n+            let has_deletion = parts.iter().any(|p| p.is_deletion(sm));\n             let is_multiline = complete.lines().count() > 1;\n \n             if let Some(span) = span.primary_span() {\n@@ -1880,16 +1880,23 @@ impl EmitterWriter {\n                     let span_start_pos = sm.lookup_char_pos(part.span.lo()).col_display;\n                     let span_end_pos = sm.lookup_char_pos(part.span.hi()).col_display;\n \n+                    // If this addition is _only_ whitespace, then don't trim it,\n+                    // or else we're just not rendering anything.\n+                    let is_whitespace_addition = part.snippet.trim().is_empty();\n+\n                     // Do not underline the leading...\n-                    let start = part.snippet.len().saturating_sub(part.snippet.trim_start().len());\n+                    let start = if is_whitespace_addition {\n+                        0\n+                    } else {\n+                        part.snippet.len().saturating_sub(part.snippet.trim_start().len())\n+                    };\n                     // ...or trailing spaces. Account for substitutions containing unicode\n                     // characters.\n-                    let sub_len: usize = part\n-                        .snippet\n-                        .trim()\n-                        .chars()\n-                        .map(|ch| unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n-                        .sum();\n+                    let sub_len: usize =\n+                        if is_whitespace_addition { &part.snippet } else { part.snippet.trim() }\n+                            .chars()\n+                            .map(|ch| unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n+                            .sum();\n \n                     let offset: isize = offsets\n                         .iter()\n@@ -2130,7 +2137,7 @@ impl EmitterWriter {\n     }\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n enum DisplaySuggestion {\n     Underline,\n     Diff,"}, {"sha": "888128f3f74e7e78e4060800b72ae16baac1bb9b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -150,21 +150,20 @@ pub struct SubstitutionHighlight {\n \n impl SubstitutionPart {\n     pub fn is_addition(&self, sm: &SourceMap) -> bool {\n-        !self.snippet.is_empty()\n-            && sm\n-                .span_to_snippet(self.span)\n-                .map_or(self.span.is_empty(), |snippet| snippet.trim().is_empty())\n+        !self.snippet.is_empty() && !self.replaces_meaningful_content(sm)\n     }\n \n-    pub fn is_deletion(&self) -> bool {\n-        self.snippet.trim().is_empty()\n+    pub fn is_deletion(&self, sm: &SourceMap) -> bool {\n+        self.snippet.trim().is_empty() && self.replaces_meaningful_content(sm)\n     }\n \n     pub fn is_replacement(&self, sm: &SourceMap) -> bool {\n-        !self.snippet.is_empty()\n-            && sm\n-                .span_to_snippet(self.span)\n-                .map_or(!self.span.is_empty(), |snippet| !snippet.trim().is_empty())\n+        !self.snippet.is_empty() && self.replaces_meaningful_content(sm)\n+    }\n+\n+    fn replaces_meaningful_content(&self, sm: &SourceMap) -> bool {\n+        sm.span_to_snippet(self.span)\n+            .map_or(!self.span.is_empty(), |snippet| !snippet.trim().is_empty())\n     }\n }\n "}, {"sha": "7d30596a936f9b70cf7d841ee19bd406270cecda", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -2,9 +2,9 @@\n \n use rustc_ast::ptr::P;\n use rustc_ast::token::{Delimiter, Token, TokenKind};\n-use rustc_ast::tokenstream::{AttrAnnotatedTokenStream, AttrAnnotatedTokenTree};\n+use rustc_ast::tokenstream::{AttrTokenStream, AttrTokenTree};\n use rustc_ast::tokenstream::{DelimSpan, Spacing};\n-use rustc_ast::tokenstream::{LazyTokenStream, TokenTree};\n+use rustc_ast::tokenstream::{LazyAttrTokenStream, TokenTree};\n use rustc_ast::NodeId;\n use rustc_ast::{self as ast, AttrStyle, Attribute, HasAttrs, HasTokens, MetaItem};\n use rustc_attr as attr;\n@@ -259,8 +259,8 @@ impl<'a> StripUnconfigured<'a> {\n     fn try_configure_tokens<T: HasTokens>(&self, node: &mut T) {\n         if self.config_tokens {\n             if let Some(Some(tokens)) = node.tokens_mut() {\n-                let attr_annotated_tokens = tokens.create_token_stream();\n-                *tokens = LazyTokenStream::new(self.configure_tokens(&attr_annotated_tokens));\n+                let attr_stream = tokens.to_attr_token_stream();\n+                *tokens = LazyAttrTokenStream::new(self.configure_tokens(&attr_stream));\n             }\n         }\n     }\n@@ -270,16 +270,16 @@ impl<'a> StripUnconfigured<'a> {\n         if self.in_cfg(&attrs) { Some(attrs) } else { None }\n     }\n \n-    /// Performs cfg-expansion on `stream`, producing a new `AttrAnnotatedTokenStream`.\n+    /// Performs cfg-expansion on `stream`, producing a new `AttrTokenStream`.\n     /// This is only used during the invocation of `derive` proc-macros,\n     /// which require that we cfg-expand their entire input.\n     /// Normal cfg-expansion operates on parsed AST nodes via the `configure` method\n-    fn configure_tokens(&self, stream: &AttrAnnotatedTokenStream) -> AttrAnnotatedTokenStream {\n-        fn can_skip(stream: &AttrAnnotatedTokenStream) -> bool {\n-            stream.0.iter().all(|(tree, _spacing)| match tree {\n-                AttrAnnotatedTokenTree::Attributes(_) => false,\n-                AttrAnnotatedTokenTree::Token(_) => true,\n-                AttrAnnotatedTokenTree::Delimited(_, _, inner) => can_skip(inner),\n+    fn configure_tokens(&self, stream: &AttrTokenStream) -> AttrTokenStream {\n+        fn can_skip(stream: &AttrTokenStream) -> bool {\n+            stream.0.iter().all(|tree| match tree {\n+                AttrTokenTree::Attributes(_) => false,\n+                AttrTokenTree::Token(..) => true,\n+                AttrTokenTree::Delimited(_, _, inner) => can_skip(inner),\n             })\n         }\n \n@@ -290,36 +290,36 @@ impl<'a> StripUnconfigured<'a> {\n         let trees: Vec<_> = stream\n             .0\n             .iter()\n-            .flat_map(|(tree, spacing)| match tree.clone() {\n-                AttrAnnotatedTokenTree::Attributes(mut data) => {\n+            .flat_map(|tree| match tree.clone() {\n+                AttrTokenTree::Attributes(mut data) => {\n                     data.attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n \n                     if self.in_cfg(&data.attrs) {\n-                        data.tokens = LazyTokenStream::new(\n-                            self.configure_tokens(&data.tokens.create_token_stream()),\n+                        data.tokens = LazyAttrTokenStream::new(\n+                            self.configure_tokens(&data.tokens.to_attr_token_stream()),\n                         );\n-                        Some((AttrAnnotatedTokenTree::Attributes(data), *spacing)).into_iter()\n+                        Some(AttrTokenTree::Attributes(data)).into_iter()\n                     } else {\n                         None.into_iter()\n                     }\n                 }\n-                AttrAnnotatedTokenTree::Delimited(sp, delim, mut inner) => {\n+                AttrTokenTree::Delimited(sp, delim, mut inner) => {\n                     inner = self.configure_tokens(&inner);\n-                    Some((AttrAnnotatedTokenTree::Delimited(sp, delim, inner), *spacing))\n+                    Some(AttrTokenTree::Delimited(sp, delim, inner))\n                         .into_iter()\n                 }\n-                AttrAnnotatedTokenTree::Token(ref token) if let TokenKind::Interpolated(ref nt) = token.kind => {\n+                AttrTokenTree::Token(ref token, _) if let TokenKind::Interpolated(ref nt) = token.kind => {\n                     panic!(\n                         \"Nonterminal should have been flattened at {:?}: {:?}\",\n                         token.span, nt\n                     );\n                 }\n-                AttrAnnotatedTokenTree::Token(token) => {\n-                    Some((AttrAnnotatedTokenTree::Token(token), *spacing)).into_iter()\n+                AttrTokenTree::Token(token, spacing) => {\n+                    Some(AttrTokenTree::Token(token, spacing)).into_iter()\n                 }\n             })\n             .collect();\n-        AttrAnnotatedTokenStream::new(trees)\n+        AttrTokenStream::new(trees)\n     }\n \n     /// Parse and expand all `cfg_attr` attributes into a list of attributes\n@@ -388,7 +388,7 @@ impl<'a> StripUnconfigured<'a> {\n         attr: &Attribute,\n         (item, item_span): (ast::AttrItem, Span),\n     ) -> Attribute {\n-        let orig_tokens = attr.tokens().to_tokenstream();\n+        let orig_tokens = attr.tokens();\n \n         // We are taking an attribute of the form `#[cfg_attr(pred, attr)]`\n         // and producing an attribute of the form `#[attr]`. We\n@@ -404,26 +404,26 @@ impl<'a> StripUnconfigured<'a> {\n         };\n         let pound_span = pound_token.span;\n \n-        let mut trees = vec![(AttrAnnotatedTokenTree::Token(pound_token), Spacing::Alone)];\n+        let mut trees = vec![AttrTokenTree::Token(pound_token, Spacing::Alone)];\n         if attr.style == AttrStyle::Inner {\n             // For inner attributes, we do the same thing for the `!` in `#![some_attr]`\n             let TokenTree::Token(bang_token @ Token { kind: TokenKind::Not, .. }, _) = orig_trees.next().unwrap() else {\n                 panic!(\"Bad tokens for attribute {:?}\", attr);\n             };\n-            trees.push((AttrAnnotatedTokenTree::Token(bang_token), Spacing::Alone));\n+            trees.push(AttrTokenTree::Token(bang_token, Spacing::Alone));\n         }\n         // We don't really have a good span to use for the synthesized `[]`\n         // in `#[attr]`, so just use the span of the `#` token.\n-        let bracket_group = AttrAnnotatedTokenTree::Delimited(\n+        let bracket_group = AttrTokenTree::Delimited(\n             DelimSpan::from_single(pound_span),\n             Delimiter::Bracket,\n             item.tokens\n                 .as_ref()\n                 .unwrap_or_else(|| panic!(\"Missing tokens for {:?}\", item))\n-                .create_token_stream(),\n+                .to_attr_token_stream(),\n         );\n-        trees.push((bracket_group, Spacing::Alone));\n-        let tokens = Some(LazyTokenStream::new(AttrAnnotatedTokenStream::new(trees)));\n+        trees.push(bracket_group);\n+        let tokens = Some(LazyAttrTokenStream::new(AttrTokenStream::new(trees)));\n         let attr = attr::mk_attr_from_item(item, tokens, attr.style, item_span);\n         if attr.has_name(sym::crate_type) {\n             self.sess.parse_sess.buffer_lint("}, {"sha": "1d62caef9b7a312cca3e7962680da0ece84bb87a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -576,8 +576,7 @@ impl<'hir> Generics<'hir> {\n         if self.has_where_clause_predicates {\n             self.predicates\n                 .iter()\n-                .filter(|p| p.in_where_clause())\n-                .last()\n+                .rfind(|&p| p.in_where_clause())\n                 .map_or(end, |p| p.span())\n                 .shrink_to_hi()\n                 .to(end)"}, {"sha": "4fb6d65a6e98f4f86db64f3975bc73a5809fe042", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -719,7 +719,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n     Some(match *ty.kind() {\n         ty::Adt(field_def, field_substs) => {\n             let inner_field_ty = {\n-                let first_non_zst_ty = field_def\n+                let mut first_non_zst_ty = field_def\n                     .variants()\n                     .iter()\n                     .filter_map(|v| transparent_newtype_field(cx.tcx, v));\n@@ -729,7 +729,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n                     \"Wrong number of fields for transparent type\"\n                 );\n                 first_non_zst_ty\n-                    .last()\n+                    .next_back()\n                     .expect(\"No non-zst fields in transparent type.\")\n                     .ty(tcx, field_substs)\n             };"}, {"sha": "a37f828eafb9b4241d411fe1325b07107aa2f42e", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -301,9 +301,9 @@ impl<'a> Parser<'a> {\n             if let Some(attr) = attr {\n                 let end_pos: u32 = self.token_cursor.num_next_calls.try_into().unwrap();\n                 // If we are currently capturing tokens, mark the location of this inner attribute.\n-                // If capturing ends up creating a `LazyTokenStream`, we will include\n+                // If capturing ends up creating a `LazyAttrTokenStream`, we will include\n                 // this replace range with it, removing the inner attribute from the final\n-                // `AttrAnnotatedTokenStream`. Inner attributes are stored in the parsed AST note.\n+                // `AttrTokenStream`. Inner attributes are stored in the parsed AST note.\n                 // During macro expansion, they are selectively inserted back into the\n                 // token stream (the first inner attribute is removed each time we invoke the\n                 // corresponding macro)."}, {"sha": "5fdafd187c660cab801a81ddb70768b36740d7cc", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -1,7 +1,7 @@\n use super::{Capturing, FlatToken, ForceCollect, Parser, ReplaceRange, TokenCursor, TrailingToken};\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n-use rustc_ast::tokenstream::{AttrAnnotatedTokenStream, AttributesData, CreateTokenStream};\n-use rustc_ast::tokenstream::{AttrAnnotatedTokenTree, DelimSpan, LazyTokenStream, Spacing};\n+use rustc_ast::tokenstream::{AttrTokenStream, AttributesData, ToAttrTokenStream};\n+use rustc_ast::tokenstream::{AttrTokenTree, DelimSpan, LazyAttrTokenStream, Spacing};\n use rustc_ast::{self as ast};\n use rustc_ast::{AttrVec, Attribute, HasAttrs, HasTokens};\n use rustc_errors::PResult;\n@@ -88,7 +88,7 @@ fn has_cfg_or_cfg_attr(attrs: &[Attribute]) -> bool {\n // This also makes `Parser` very cheap to clone, since\n // there is no intermediate collection buffer to clone.\n #[derive(Clone)]\n-struct LazyTokenStreamImpl {\n+struct LazyAttrTokenStreamImpl {\n     start_token: (Token, Spacing),\n     cursor_snapshot: TokenCursor,\n     num_calls: usize,\n@@ -97,10 +97,10 @@ struct LazyTokenStreamImpl {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(LazyTokenStreamImpl, 144);\n+rustc_data_structures::static_assert_size!(LazyAttrTokenStreamImpl, 144);\n \n-impl CreateTokenStream for LazyTokenStreamImpl {\n-    fn create_token_stream(&self) -> AttrAnnotatedTokenStream {\n+impl ToAttrTokenStream for LazyAttrTokenStreamImpl {\n+    fn to_attr_token_stream(&self) -> AttrTokenStream {\n         // The token produced by the final call to `{,inlined_}next` was not\n         // actually consumed by the callback. The combination of chaining the\n         // initial token and using `take` produces the desired result - we\n@@ -179,7 +179,7 @@ impl CreateTokenStream for LazyTokenStreamImpl {\n impl<'a> Parser<'a> {\n     /// Records all tokens consumed by the provided callback,\n     /// including the current token. These tokens are collected\n-    /// into a `LazyTokenStream`, and returned along with the result\n+    /// into a `LazyAttrTokenStream`, and returned along with the result\n     /// of the callback.\n     ///\n     /// Note: If your callback consumes an opening delimiter\n@@ -297,8 +297,8 @@ impl<'a> Parser<'a> {\n \n         // If we 'broke' the last token (e.g. breaking a '>>' token to two '>' tokens),\n         // then extend the range of captured tokens to include it, since the parser\n-        // was not actually bumped past it. When the `LazyTokenStream` gets converted\n-        // into an `AttrAnnotatedTokenStream`, we will create the proper token.\n+        // was not actually bumped past it. When the `LazyAttrTokenStream` gets converted\n+        // into an `AttrTokenStream`, we will create the proper token.\n         if self.token_cursor.break_last_token {\n             assert_eq!(\n                 trailing,\n@@ -316,8 +316,8 @@ impl<'a> Parser<'a> {\n             Box::new([])\n         } else {\n             // Grab any replace ranges that occur *inside* the current AST node.\n-            // We will perform the actual replacement when we convert the `LazyTokenStream`\n-            // to an `AttrAnnotatedTokenStream`\n+            // We will perform the actual replacement when we convert the `LazyAttrTokenStream`\n+            // to an `AttrTokenStream`.\n             let start_calls: u32 = cursor_snapshot_next_calls.try_into().unwrap();\n             self.capture_state.replace_ranges[replace_ranges_start..replace_ranges_end]\n                 .iter()\n@@ -329,7 +329,7 @@ impl<'a> Parser<'a> {\n                 .collect()\n         };\n \n-        let tokens = LazyTokenStream::new(LazyTokenStreamImpl {\n+        let tokens = LazyAttrTokenStream::new(LazyAttrTokenStreamImpl {\n             start_token,\n             num_calls,\n             cursor_snapshot,\n@@ -392,12 +392,12 @@ impl<'a> Parser<'a> {\n fn make_token_stream(\n     mut iter: impl Iterator<Item = (FlatToken, Spacing)>,\n     break_last_token: bool,\n-) -> AttrAnnotatedTokenStream {\n+) -> AttrTokenStream {\n     #[derive(Debug)]\n     struct FrameData {\n         // This is `None` for the first frame, `Some` for all others.\n         open_delim_sp: Option<(Delimiter, Span)>,\n-        inner: Vec<(AttrAnnotatedTokenTree, Spacing)>,\n+        inner: Vec<AttrTokenTree>,\n     }\n     let mut stack = vec![FrameData { open_delim_sp: None, inner: vec![] }];\n     let mut token_and_spacing = iter.next();\n@@ -418,48 +418,47 @@ fn make_token_stream(\n                     open_delim, span\n                 );\n                 let dspan = DelimSpan::from_pair(open_sp, span);\n-                let stream = AttrAnnotatedTokenStream::new(frame_data.inner);\n-                let delimited = AttrAnnotatedTokenTree::Delimited(dspan, delim, stream);\n+                let stream = AttrTokenStream::new(frame_data.inner);\n+                let delimited = AttrTokenTree::Delimited(dspan, delim, stream);\n                 stack\n                     .last_mut()\n                     .unwrap_or_else(|| {\n                         panic!(\"Bottom token frame is missing for token: {:?}\", token)\n                     })\n                     .inner\n-                    .push((delimited, Spacing::Alone));\n+                    .push(delimited);\n             }\n             FlatToken::Token(token) => stack\n                 .last_mut()\n                 .expect(\"Bottom token frame is missing!\")\n                 .inner\n-                .push((AttrAnnotatedTokenTree::Token(token), spacing)),\n+                .push(AttrTokenTree::Token(token, spacing)),\n             FlatToken::AttrTarget(data) => stack\n                 .last_mut()\n                 .expect(\"Bottom token frame is missing!\")\n                 .inner\n-                .push((AttrAnnotatedTokenTree::Attributes(data), spacing)),\n+                .push(AttrTokenTree::Attributes(data)),\n             FlatToken::Empty => {}\n         }\n         token_and_spacing = iter.next();\n     }\n     let mut final_buf = stack.pop().expect(\"Missing final buf!\");\n     if break_last_token {\n-        let (last_token, spacing) = final_buf.inner.pop().unwrap();\n-        if let AttrAnnotatedTokenTree::Token(last_token) = last_token {\n+        let last_token = final_buf.inner.pop().unwrap();\n+        if let AttrTokenTree::Token(last_token, spacing) = last_token {\n             let unglued_first = last_token.kind.break_two_token_op().unwrap().0;\n \n             // An 'unglued' token is always two ASCII characters\n             let mut first_span = last_token.span.shrink_to_lo();\n             first_span = first_span.with_hi(first_span.lo() + rustc_span::BytePos(1));\n \n-            final_buf.inner.push((\n-                AttrAnnotatedTokenTree::Token(Token::new(unglued_first, first_span)),\n-                spacing,\n-            ));\n+            final_buf\n+                .inner\n+                .push(AttrTokenTree::Token(Token::new(unglued_first, first_span), spacing));\n         } else {\n             panic!(\"Unexpected last token {:?}\", last_token)\n         }\n     }\n     assert!(stack.is_empty(), \"Stack should be empty: final_buf={:?} stack={:?}\", final_buf, stack);\n-    AttrAnnotatedTokenStream::new(final_buf.inner)\n+    AttrTokenStream::new(final_buf.inner)\n }"}, {"sha": "4cb198561e0adaf0c6d97d1e65ca4f096fc86d43", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -170,7 +170,7 @@ pub struct ClosureSpans {\n /// attribute, we parse a nested AST node that has `#[cfg]` or `#[cfg_attr]`\n /// In this case, we use a `ReplaceRange` to replace the entire inner AST node\n /// with `FlatToken::AttrTarget`, allowing us to perform eager cfg-expansion\n-/// on an `AttrAnnotatedTokenStream`\n+/// on an `AttrTokenStream`.\n ///\n /// 2. When we parse an inner attribute while collecting tokens. We\n /// remove inner attributes from the token stream entirely, and\n@@ -183,7 +183,7 @@ pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);\n \n /// Controls how we capture tokens. Capturing can be expensive,\n /// so we try to avoid performing capturing in cases where\n-/// we will never need an `AttrAnnotatedTokenStream`\n+/// we will never need an `AttrTokenStream`.\n #[derive(Copy, Clone)]\n pub enum Capturing {\n     /// We aren't performing any capturing - this is the default mode.\n@@ -237,7 +237,7 @@ struct TokenCursor {\n     // the trailing `>>` token. The `break_last_token`\n     // field is used to track this token - it gets\n     // appended to the captured stream when\n-    // we evaluate a `LazyTokenStream`\n+    // we evaluate a `LazyAttrTokenStream`.\n     break_last_token: bool,\n }\n \n@@ -1464,23 +1464,23 @@ pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &Pa\n     }\n }\n \n-/// A helper struct used when building an `AttrAnnotatedTokenStream` from\n-/// a `LazyTokenStream`. Both delimiter and non-delimited tokens\n+/// A helper struct used when building an `AttrTokenStream` from\n+/// a `LazyAttrTokenStream`. Both delimiter and non-delimited tokens\n /// are stored as `FlatToken::Token`. A vector of `FlatToken`s\n-/// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested\n-/// `AttrAnnotatedTokenTree::Delimited` tokens\n+/// is then 'parsed' to build up an `AttrTokenStream` with nested\n+/// `AttrTokenTree::Delimited` tokens.\n #[derive(Debug, Clone)]\n pub enum FlatToken {\n     /// A token - this holds both delimiter (e.g. '{' and '}')\n     /// and non-delimiter tokens\n     Token(Token),\n     /// Holds the `AttributesData` for an AST node. The\n     /// `AttributesData` is inserted directly into the\n-    /// constructed `AttrAnnotatedTokenStream` as\n-    /// an `AttrAnnotatedTokenTree::Attributes`\n+    /// constructed `AttrTokenStream` as\n+    /// an `AttrTokenTree::Attributes`.\n     AttrTarget(AttributesData),\n     /// A special 'empty' token that is ignored during the conversion\n-    /// to an `AttrAnnotatedTokenStream`. This is used to simplify the\n+    /// to an `AttrTokenStream`. This is used to simplify the\n     /// handling of replace ranges.\n     Empty,\n }"}, {"sha": "c3c9b0b5617824e4590262c54e20bd48889a2df9", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -617,9 +617,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .filter(|&sp| sp != base_error.span)\n                         .collect();\n \n-                    let start_span = bounds.iter().map(|bound| bound.span()).next().unwrap();\n+                    let start_span = bounds[0].span();\n                     // `end_span` is the end of the poly trait ref (Foo + 'baz + Bar><)\n-                    let end_span = bounds.iter().map(|bound| bound.span()).last().unwrap();\n+                    let end_span = bounds.last().unwrap().span();\n                     // `last_bound_span` is the last bound of the poly trait ref (Foo + >'baz< + Bar)\n                     let last_bound_span = spans.last().cloned().unwrap();\n                     let mut multi_span: MultiSpan = spans.clone().into();"}, {"sha": "9ed4faccdb852934340c6a567785879b0361f9d5", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -1309,10 +1309,8 @@ pub fn build_session(\n     let warnings_allow = sopts\n         .lint_opts\n         .iter()\n-        .filter(|&&(ref key, _)| *key == \"warnings\")\n-        .map(|&(_, ref level)| *level == lint::Allow)\n-        .last()\n-        .unwrap_or(false);\n+        .rfind(|&&(ref key, _)| *key == \"warnings\")\n+        .map_or(false, |&(_, level)| level == lint::Allow);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n "}, {"sha": "fd96e1ff77d53cb3211707427d587f49d0ca3e52", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -1016,7 +1016,7 @@ pub(crate) mod builtin {\n     /// Concatenates literals into a byte slice.\n     ///\n     /// This macro takes any number of comma-separated literals, and concatenates them all into\n-    /// one, yielding an expression of type `&[u8, _]`, which represents all of the literals\n+    /// one, yielding an expression of type `&[u8; _]`, which represents all of the literals\n     /// concatenated left-to-right. The literals passed can be any combination of:\n     ///\n     /// - byte literals (`b'r'`)"}, {"sha": "ec6b8c2469c59cb5d5073a7bcc132859c0f316f0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -587,7 +587,7 @@ fn generate_macro_def_id_path(\n             }\n         })\n         .collect();\n-    let relative = fqp.iter().map(|elem| elem.to_string());\n+    let mut relative = fqp.iter().map(|elem| elem.to_string());\n     let cstore = CStore::from_tcx(tcx);\n     // We need this to prevent a `panic` when this function is used from intra doc links...\n     if !cstore.has_crate_data(def_id.krate) {\n@@ -607,7 +607,7 @@ fn generate_macro_def_id_path(\n     let mut path = if is_macro_2 {\n         once(crate_name.clone()).chain(relative).collect()\n     } else {\n-        vec![crate_name.clone(), relative.last().unwrap()]\n+        vec![crate_name.clone(), relative.next_back().unwrap()]\n     };\n     if path.len() < 2 {\n         // The minimum we can have is the crate name followed by the macro name. If shorter, then"}, {"sha": "011c559b34bdf03c3a90796d41a29e532d928231", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -206,7 +206,6 @@ a.source,\n .item-left > a,\n .out-of-band,\n span.since,\n-#source-sidebar, #sidebar-toggle,\n details.rustdoc-toggle > summary::before,\n .content ul.crate a.crate,\n a.srclink,"}, {"sha": "e7db68693c068e5b99862db61b976dd42fc67f44", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -13,9 +13,8 @@ LL | #[deny(bare_trait_objects)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   |\n+LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   |                 +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n@@ -27,9 +26,8 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   |\n+LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   |                                   +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:17:14\n@@ -41,9 +39,8 @@ LL |     let _x: &SomeTrait = todo!();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     let _x: &SomeTrait = todo!();\n-LL +     let _x: &dyn SomeTrait = todo!();\n-   |\n+LL |     let _x: &dyn SomeTrait = todo!();\n+   |              +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:17\n@@ -55,9 +52,8 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   |\n+LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   |                 +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:17\n@@ -69,9 +65,8 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   |\n+LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   |                 +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n@@ -83,9 +78,8 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   |\n+LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   |                                   +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n@@ -97,9 +91,8 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   |\n+LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   |                                   +++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "08ee77116f0b8795541e9388a2e0236d1bf1148a", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -6,9 +6,8 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   |\n+LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   |                 +++\n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:35\n@@ -18,9 +17,8 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   |\n+LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   |                                   +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "261c2d5742f407f037aa7cfa576029628fff1132", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -13,9 +13,8 @@ LL | #![deny(bare_trait_objects)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -         <fmt::Debug>::fmt(self, f)\n-LL +         <dyn fmt::Debug>::fmt(self, f)\n-   |\n+LL |         <dyn fmt::Debug>::fmt(self, f)\n+   |          +++\n \n error: aborting due to previous error\n "}, {"sha": "8f40922732486bf4ecd74d4cf3248cb1fc32c3e8", "filename": "src/test/ui/impl-trait/generic-with-implicit-hrtb-without-dyn.edition2021.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fgeneric-with-implicit-hrtb-without-dyn.edition2021.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -6,9 +6,8 @@ LL | fn ice() -> impl AsRef<Fn(&())> {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - fn ice() -> impl AsRef<Fn(&())> {\n-LL + fn ice() -> impl AsRef<dyn Fn(&())> {\n-   |\n+LL | fn ice() -> impl AsRef<dyn Fn(&())> {\n+   |                        +++\n \n error[E0277]: the trait bound `(): AsRef<(dyn for<'r> Fn(&'r ()) + 'static)>` is not satisfied\n   --> $DIR/generic-with-implicit-hrtb-without-dyn.rs:6:13"}, {"sha": "b26c1834d84a3a44ce80eff0583bf4693ba6b825", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -25,9 +25,8 @@ LL |     eq::<dyn, Foo>\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     eq::<dyn, Foo>\n-LL +     eq::<dyn, dyn Foo>\n-   |\n+LL |     eq::<dyn, dyn Foo>\n+   |               +++\n \n error[E0107]: missing generics for trait `Foo`\n   --> $DIR/issue-86756.rs:5:15"}, {"sha": "94d81c3aa71b5ffc0fd6c9aa4b7cd6ea86aab295", "filename": "src/test/ui/lint/force-warn/allowed-group-warn-by-default-lint.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -9,9 +9,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n@@ -23,9 +22,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n@@ -37,9 +35,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: 3 warnings emitted\n "}, {"sha": "7f0fd8530e2cc27c352256f504a234a8394b7c07", "filename": "src/test/ui/lint/force-warn/cap-lints-allow.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -9,9 +9,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/cap-lints-allow.rs:8:25\n@@ -23,9 +22,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/cap-lints-allow.rs:8:25\n@@ -37,9 +35,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: 3 warnings emitted\n "}, {"sha": "eb2bca7b84d717e1eaa6c58720521e9a04b5de59", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -9,9 +9,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n@@ -23,9 +22,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n@@ -37,9 +35,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: 3 warnings emitted\n "}, {"sha": "ed01937a57b15ab5305b5003c28f381c6af44f8e", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-lint-group.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -9,9 +9,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-lint-group.rs:10:25\n@@ -23,9 +22,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-lint-group.rs:10:25\n@@ -37,9 +35,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: 3 warnings emitted\n "}, {"sha": "8db7c12757b03e341ff16894bac19dc3a10cd0f0", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-warn-by-default-lint.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -9,9 +9,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n@@ -23,9 +22,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n@@ -37,9 +35,8 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub fn function(_x: Box<SomeTrait>) {}\n-LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   |\n+LL | pub fn function(_x: Box<dyn SomeTrait>) {}\n+   |                         +++\n \n warning: 3 warnings emitted\n "}, {"sha": "ae55ae06714319e745a22c3eee947e62683b5a7b", "filename": "src/test/ui/parser/increment-notfixed.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -8,9 +8,8 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp = i; i += 1; tmp };\n    |     +++++++++++  ~~~~~~~~~~~~~~~\n-LL -     i++;\n-LL +     i += 1;\n-   |\n+LL |     i += 1;\n+   |       ~~~~\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:17:12\n@@ -24,9 +23,8 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp = i; i += 1; tmp } < 5 {\n    |           +++++++++++  ~~~~~~~~~~~~~~~\n-LL -     while i++ < 5 {\n-LL +     while i += 1 < 5 {\n-   |\n+LL |     while i += 1 < 5 {\n+   |             ~~~~\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:25:8\n@@ -38,9 +36,8 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp_ = tmp; tmp += 1; tmp_ };\n    |     ++++++++++++    ~~~~~~~~~~~~~~~~~~\n-LL -     tmp++;\n-LL +     tmp += 1;\n-   |\n+LL |     tmp += 1;\n+   |         ~~~~\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:31:14\n@@ -54,9 +51,8 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n    |           ++++++++++++    ~~~~~~~~~~~~~~~~~~\n-LL -     while tmp++ < 5 {\n-LL +     while tmp += 1 < 5 {\n-   |\n+LL |     while tmp += 1 < 5 {\n+   |               ~~~~\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:39:16\n@@ -68,9 +64,8 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp = foo.bar.qux; foo.bar.qux += 1; tmp };\n    |     +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n-LL -     foo.bar.qux++;\n-LL +     foo.bar.qux += 1;\n-   |\n+LL |     foo.bar.qux += 1;\n+   |                 ~~~~\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:49:10\n@@ -82,9 +77,8 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp = s.tmp; s.tmp += 1; tmp };\n    |     +++++++++++      ~~~~~~~~~~~~~~~~~~~\n-LL -     s.tmp++;\n-LL +     s.tmp += 1;\n-   |\n+LL |     s.tmp += 1;\n+   |           ~~~~\n \n error: Rust has no prefix increment operator\n   --> $DIR/increment-notfixed.rs:56:5"}, {"sha": "823f75bfac86f52b8441622a9b40f22b31b20bf3", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -27,9 +27,8 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n-LL +     let _: Box<dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n-   |\n+LL |     let _: Box<dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+   |                +++\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:8:35\n@@ -52,9 +51,8 @@ LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n-LL +     let _: Box<dyn ?Sized + (for<'a> Trait<'a>) + (Obj)>;\n-   |\n+LL |     let _: Box<dyn ?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                +++\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:13:47\n@@ -77,9 +75,8 @@ LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n-LL +     let _: Box<dyn for<'a> Trait<'a> + (Obj) + (?Sized)>;\n-   |\n+LL |     let _: Box<dyn for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                +++\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:18:36"}, {"sha": "c6bc082cf18db6cd87e4c683684986e7019162e0", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.stderr", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -13,9 +13,8 @@ LL | #![warn(rust_2021_prefixes_incompatible_syntax)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n-LL -     m2!(z\"hey\");\n-LL +     m2!(z \"hey\");\n-   |\n+LL |     m2!(z \"hey\");\n+   |          +\n \n warning: prefix `prefix` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:19:9\n@@ -27,9 +26,8 @@ LL |     m2!(prefix\"hey\");\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n-LL -     m2!(prefix\"hey\");\n-LL +     m2!(prefix \"hey\");\n-   |\n+LL |     m2!(prefix \"hey\");\n+   |               +\n \n warning: prefix `hey` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:22:9\n@@ -41,9 +39,8 @@ LL |     m3!(hey#123);\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n-LL -     m3!(hey#123);\n-LL +     m3!(hey #123);\n-   |\n+LL |     m3!(hey #123);\n+   |            +\n \n warning: prefix `hey` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:25:9\n@@ -55,9 +52,8 @@ LL |     m3!(hey#hey);\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n-LL -     m3!(hey#hey);\n-LL +     m3!(hey #hey);\n-   |\n+LL |     m3!(hey #hey);\n+   |            +\n \n warning: prefix `kind` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:35:14\n@@ -69,9 +65,8 @@ LL |     #name = #kind#value\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n-LL -     #name = #kind#value\n-LL +     #name = #kind #value\n-   |\n+LL |     #name = #kind #value\n+   |                  +\n \n warning: 5 warnings emitted\n "}, {"sha": "807d6d98bd3c3f82c1bdb282ce8c7ea9b81f3c97", "filename": "src/test/ui/rust-2021/reserved-prefixes.stderr", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -7,9 +7,8 @@ LL |     demo3!(foo#bar);\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo3!(foo#bar);\n-LL +     demo3!(foo #bar);\n-   |\n+LL |     demo3!(foo #bar);\n+   |               +\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:17:12\n@@ -20,9 +19,8 @@ LL |     demo2!(foo\"bar\");\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo2!(foo\"bar\");\n-LL +     demo2!(foo \"bar\");\n-   |\n+LL |     demo2!(foo \"bar\");\n+   |               +\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:18:12\n@@ -33,9 +31,8 @@ LL |     demo2!(foo'b');\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo2!(foo'b');\n-LL +     demo2!(foo 'b');\n-   |\n+LL |     demo2!(foo 'b');\n+   |               +\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:20:12\n@@ -46,9 +43,8 @@ LL |     demo2!(foo'b);\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo2!(foo'b);\n-LL +     demo2!(foo 'b);\n-   |\n+LL |     demo2!(foo 'b);\n+   |               +\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:21:12\n@@ -59,9 +55,8 @@ LL |     demo3!(foo# bar);\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo3!(foo# bar);\n-LL +     demo3!(foo # bar);\n-   |\n+LL |     demo3!(foo # bar);\n+   |               +\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:22:12\n@@ -72,9 +67,8 @@ LL |     demo4!(foo#! bar);\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo4!(foo#! bar);\n-LL +     demo4!(foo #! bar);\n-   |\n+LL |     demo4!(foo #! bar);\n+   |               +\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:23:12\n@@ -85,9 +79,8 @@ LL |     demo4!(foo## bar);\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo4!(foo## bar);\n-LL +     demo4!(foo ## bar);\n-   |\n+LL |     demo4!(foo ## bar);\n+   |               +\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:25:12\n@@ -98,9 +91,8 @@ LL |     demo4!(foo#bar#);\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo4!(foo#bar#);\n-LL +     demo4!(foo #bar#);\n-   |\n+LL |     demo4!(foo #bar#);\n+   |               +\n \n error: prefix `bar` is unknown\n   --> $DIR/reserved-prefixes.rs:25:16\n@@ -111,9 +103,8 @@ LL |     demo4!(foo#bar#);\n    = note: prefixed identifiers and literals are reserved since Rust 2021\n help: consider inserting whitespace here\n    |\n-LL -     demo4!(foo#bar#);\n-LL +     demo4!(foo#bar #);\n-   |\n+LL |     demo4!(foo#bar #);\n+   |                   +\n \n error: aborting due to 9 previous errors\n "}, {"sha": "a788cab6e4e8e0be742fe0a5cf3fd4a6ef8c61bf", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -13,9 +13,8 @@ LL | #![deny(bare_trait_objects)]\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     bar: Box<Bar>,\n-LL +     bar: Box<dyn Bar>,\n-   |\n+LL |     bar: Box<dyn Bar>,\n+   |              +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -27,9 +26,8 @@ LL | pub struct Foo {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub struct Foo {\n-LL + dyn pub struct Foo {\n-   |\n+LL | dyn pub struct Foo {\n+   | +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:28:14\n@@ -41,9 +39,8 @@ LL |     bar: Box<Bar>,\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     bar: Box<Bar>,\n-LL +     bar: Box<dyn Bar>,\n-   |\n+LL |     bar: Box<dyn Bar>,\n+   |              +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:28:14\n@@ -55,9 +52,8 @@ LL |     bar: Box<Bar>,\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL -     bar: Box<Bar>,\n-LL +     bar: Box<dyn Bar>,\n-   |\n+LL |     bar: Box<dyn Bar>,\n+   |              +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -69,9 +65,8 @@ LL | pub struct Foo {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub struct Foo {\n-LL + dyn pub struct Foo {\n-   |\n+LL | dyn pub struct Foo {\n+   | +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -83,9 +78,8 @@ LL | pub struct Foo {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub struct Foo {\n-LL + dyn pub struct Foo {\n-   |\n+LL | dyn pub struct Foo {\n+   | +++\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -97,9 +91,8 @@ LL | pub struct Foo {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - pub struct Foo {\n-LL + dyn pub struct Foo {\n-   |\n+LL | dyn pub struct Foo {\n+   | +++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "398caa98b84db8ac4467bdaa8894e18ba2349496", "filename": "src/test/ui/suggestions/suggest-blanket-impl-local-trait.stderr", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -6,9 +6,8 @@ LL | impl LocalTraitTwo for LocalTraitOne {}\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl LocalTraitTwo for LocalTraitOne {}\n-LL + impl LocalTraitTwo for dyn LocalTraitOne {}\n-   |\n+LL | impl LocalTraitTwo for dyn LocalTraitOne {}\n+   |                        +++\n help: alternatively use a blanket implementation to implement `LocalTraitTwo` for all types that also implement `LocalTraitOne`\n    |\n LL | impl<T: LocalTraitOne> LocalTraitTwo for T {}\n@@ -22,9 +21,8 @@ LL | impl fmt::Display for LocalTraitOne {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl fmt::Display for LocalTraitOne {\n-LL + impl fmt::Display for dyn LocalTraitOne {\n-   |\n+LL | impl fmt::Display for dyn LocalTraitOne {\n+   |                       +++\n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/suggest-blanket-impl-local-trait.rs:26:23\n@@ -34,9 +32,8 @@ LL | impl fmt::Display for LocalTraitTwo + Send {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl fmt::Display for LocalTraitTwo + Send {\n-LL + impl fmt::Display for dyn LocalTraitTwo + Send {\n-   |\n+LL | impl fmt::Display for dyn LocalTraitTwo + Send {\n+   |                       +++\n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/suggest-blanket-impl-local-trait.rs:34:24\n@@ -46,9 +43,8 @@ LL | impl LocalTraitOne for fmt::Display {}\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl LocalTraitOne for fmt::Display {}\n-LL + impl LocalTraitOne for dyn fmt::Display {}\n-   |\n+LL | impl LocalTraitOne for dyn fmt::Display {}\n+   |                        +++\n help: alternatively use a blanket implementation to implement `LocalTraitOne` for all types that also implement `fmt::Display`\n    |\n LL | impl<T: fmt::Display> LocalTraitOne for T {}\n@@ -62,9 +58,8 @@ LL | impl LocalTraitOne for fmt::Display + Send {}\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl LocalTraitOne for fmt::Display + Send {}\n-LL + impl LocalTraitOne for dyn fmt::Display + Send {}\n-   |\n+LL | impl LocalTraitOne for dyn fmt::Display + Send {}\n+   |                        +++\n help: alternatively use a blanket implementation to implement `LocalTraitOne` for all types that also implement `fmt::Display + Send`\n    |\n LL | impl<T: fmt::Display + Send> LocalTraitOne for T {}\n@@ -78,9 +73,8 @@ LL | impl<E> GenericTrait<E> for LocalTraitOne {}\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl<E> GenericTrait<E> for LocalTraitOne {}\n-LL + impl<E> GenericTrait<E> for dyn LocalTraitOne {}\n-   |\n+LL | impl<E> GenericTrait<E> for dyn LocalTraitOne {}\n+   |                             +++\n help: alternatively use a blanket implementation to implement `GenericTrait<E>` for all types that also implement `LocalTraitOne`\n    |\n LL | impl<E, T: LocalTraitOne> GenericTrait<E> for T {}\n@@ -94,9 +88,8 @@ LL | impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl<T, E> GenericTraitTwo<E> for GenericTrait<T> {}\n-LL + impl<T, E> GenericTraitTwo<E> for dyn GenericTrait<T> {}\n-   |\n+LL | impl<T, E> GenericTraitTwo<E> for dyn GenericTrait<T> {}\n+   |                                   +++\n help: alternatively use a blanket implementation to implement `GenericTraitTwo<E>` for all types that also implement `GenericTrait<T>`\n    |\n LL | impl<T, E, U: GenericTrait<T>> GenericTraitTwo<E> for U {}"}, {"sha": "87e7164362091f724aa68467856f6c507f0c2adf", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -39,9 +39,8 @@ LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n-LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n-   |\n+LL | impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   |                           +++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f716e6c17e22da4670b146faec60a626a3e5b8a6", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -42,9 +42,8 @@ LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n-LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n-   |\n+LL | impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   |                           +++\n \n error: aborting due to 3 previous errors; 1 warning emitted\n "}, {"sha": "1c52629daa4834649ed179ef70b5873edbd93c27", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -9,9 +9,8 @@ LL | fn foo(_x: Foo + Send) {\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n-LL - fn foo(_x: Foo + Send) {\n-LL + fn foo(_x: dyn Foo + Send) {\n-   |\n+LL | fn foo(_x: dyn Foo + Send) {\n+   |            +++\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n   --> $DIR/not-on-bare-trait.rs:7:8"}, {"sha": "e2afa5ef59020c409f6629fce8ac37caf7aa6466", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5338f5f1d4ad9c99706e5cb691f8d5bbac341262/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5338f5f1d4ad9c99706e5cb691f8d5bbac341262", "patch": "@@ -2594,7 +2594,7 @@ impl<'test> TestCx<'test> {\n                     }\n                     None\n                 } else {\n-                    let sline = line.split(\"///\").last().unwrap_or(\"\");\n+                    let sline = line.rsplit(\"///\").next().unwrap();\n                     let line = sline.trim_start();\n                     if line.starts_with(\"```\") {\n                         if ignore {"}]}