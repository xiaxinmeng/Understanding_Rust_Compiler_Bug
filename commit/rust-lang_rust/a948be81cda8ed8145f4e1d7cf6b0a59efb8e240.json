{"sha": "a948be81cda8ed8145f4e1d7cf6b0a59efb8e240", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NDhiZTgxY2RhOGVkODE0NWY0ZTFkN2NmNmIwYTU5ZWZiOGUyNDA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-25T10:25:41Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-02T13:36:47Z"}, "message": "incr.comp.: Determine red/green state of every new node.", "tree": {"sha": "8932dbb9b67105d18ac9ecbb7bec54979998a687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8932dbb9b67105d18ac9ecbb7bec54979998a687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240", "html_url": "https://github.com/rust-lang/rust/commit/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae6ed78acf9dc865e2300a7db556389eed9692d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae6ed78acf9dc865e2300a7db556389eed9692d", "html_url": "https://github.com/rust-lang/rust/commit/9ae6ed78acf9dc865e2300a7db556389eed9692d"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "f76f9279e5b59e8e7c853bc29cb8f5c05d0ab9af", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=a948be81cda8ed8145f4e1d7cf6b0a59efb8e240", "patch": "@@ -59,6 +59,13 @@ impl DepNodeIndex {\n     };\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum DepNodeColor {\n+    Red,\n+    Green,\n+    Gray\n+}\n+\n struct DepGraphData {\n     /// The old, initial encoding of the dependency graph. This will soon go\n     /// away.\n@@ -74,6 +81,8 @@ struct DepGraphData {\n     /// nodes and edges as well as all fingerprints of nodes that have them.\n     previous: PreviousDepGraph,\n \n+    colors: RefCell<FxHashMap<DepNode, DepNodeColor>>,\n+\n     /// When we load, there may be `.o` files, cached mir, or other such\n     /// things available to us. If we find that they are not dirty, we\n     /// load the path to the file storing those work-products here into\n@@ -97,6 +106,7 @@ impl DepGraph {\n                 dep_node_debug: RefCell::new(FxHashMap()),\n                 current: RefCell::new(CurrentDepGraph::new()),\n                 previous: prev_graph,\n+                colors: RefCell::new(FxHashMap()),\n             })),\n             fingerprints: Rc::new(RefCell::new(FxHashMap())),\n         }\n@@ -192,11 +202,23 @@ impl DepGraph {\n             let mut stable_hasher = StableHasher::new();\n             result.hash_stable(&mut hcx, &mut stable_hasher);\n \n+            let current_fingerprint = stable_hasher.finish();\n+\n             assert!(self.fingerprints\n                         .borrow_mut()\n-                        .insert(key, stable_hasher.finish())\n+                        .insert(key, current_fingerprint)\n                         .is_none());\n \n+            let prev_fingerprint = data.previous.fingerprint_of(&key);\n+\n+            let color = if Some(current_fingerprint) == prev_fingerprint {\n+                DepNodeColor::Green\n+            } else {\n+                DepNodeColor::Red\n+            };\n+\n+            assert!(data.colors.borrow_mut().insert(key, color).is_none());\n+\n             (result, DepNodeIndex {\n                 legacy: dep_node_index_legacy,\n                 new: dep_node_index_new,\n@@ -228,7 +250,16 @@ impl DepGraph {\n             data.current.borrow_mut().push_anon_task();\n             let result = op();\n             let dep_node_index_legacy = data.edges.borrow_mut().pop_anon_task(dep_kind);\n-            let dep_node_index_new = data.current.borrow_mut().pop_anon_task(dep_kind);\n+            let (new_dep_node, dep_node_index_new) = data.current\n+                                                         .borrow_mut()\n+                                                         .pop_anon_task(dep_kind);\n+            if let Some(new_dep_node) = new_dep_node {\n+                assert!(data.colors\n+                            .borrow_mut()\n+                            .insert(new_dep_node, DepNodeColor::Red)\n+                            .is_none());\n+            }\n+\n             (result, DepNodeIndex {\n                 legacy: dep_node_index_legacy,\n                 new: dep_node_index_new,\n@@ -275,10 +306,22 @@ impl DepGraph {\n         self.fingerprints.borrow()[dep_node]\n     }\n \n-    pub fn prev_fingerprint_of(&self, dep_node: &DepNode) -> Fingerprint {\n+    pub fn prev_fingerprint_of(&self, dep_node: &DepNode) -> Option<Fingerprint> {\n         self.data.as_ref().unwrap().previous.fingerprint_of(dep_node)\n     }\n \n+    pub fn node_color(&self, dep_node: &DepNode) -> DepNodeColor {\n+        match self.data.as_ref().unwrap().colors.borrow().get(dep_node) {\n+            Some(&color) => {\n+                debug_assert!(color != DepNodeColor::Gray);\n+                color\n+            }\n+            None => {\n+                DepNodeColor::Gray\n+            }\n+        }\n+    }\n+\n     /// Indicates that a previous work product exists for `v`. This is\n     /// invoked during initial start-up based on what nodes are clean\n     /// (and what files exist in the incr. directory).\n@@ -485,7 +528,7 @@ impl CurrentDepGraph {\n         });\n     }\n \n-    fn pop_anon_task(&mut self, kind: DepKind) -> DepNodeIndexNew {\n+    fn pop_anon_task(&mut self, kind: DepKind) -> (Option<DepNode>, DepNodeIndexNew) {\n         let popped_node = self.task_stack.pop().unwrap();\n \n         if let OpenTask::Anon {\n@@ -514,10 +557,10 @@ impl CurrentDepGraph {\n             };\n \n             if let Some(&index) = self.node_to_node_index.get(&target_dep_node) {\n-                return index;\n+                (None, index)\n+            } else {\n+                (Some(target_dep_node), self.alloc_node(target_dep_node, reads))\n             }\n-\n-            self.alloc_node(target_dep_node, reads)\n         } else {\n             bug!(\"pop_anon_task() - Expected anonymous task to be popped\")\n         }"}, {"sha": "0236f9c22925a0b78c51b6928481953d9bb62244", "filename": "src/librustc/dep_graph/prev.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fprev.rs?ref=a948be81cda8ed8145f4e1d7cf6b0a59efb8e240", "patch": "@@ -39,8 +39,9 @@ impl PreviousDepGraph {\n             .for_each(|&index| f(&self.data.nodes[index]));\n     }\n \n-    pub fn fingerprint_of(&self, dep_node: &DepNode) -> Fingerprint {\n-        let node_index = self.index[dep_node];\n-        self.data.nodes[node_index].1\n+    pub fn fingerprint_of(&self, dep_node: &DepNode) -> Option<Fingerprint> {\n+        self.index\n+            .get(dep_node)\n+            .map(|&node_index| self.data.nodes[node_index].1)\n     }\n }"}, {"sha": "33a9cb58c517f8afcc628ee58fdedc615304e604", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a948be81cda8ed8145f4e1d7cf6b0a59efb8e240/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=a948be81cda8ed8145f4e1d7cf6b0a59efb8e240", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n         let current_fingerprint = self.tcx.dep_graph.fingerprint_of(&dep_node);\n         let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n \n-        if current_fingerprint == prev_fingerprint {\n+        if Some(current_fingerprint) == prev_fingerprint {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx.sess.span_err(\n                 item_span,\n@@ -136,7 +136,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n         let current_fingerprint = self.tcx.dep_graph.fingerprint_of(&dep_node);\n         let prev_fingerprint = self.tcx.dep_graph.prev_fingerprint_of(&dep_node);\n \n-        if current_fingerprint != prev_fingerprint {\n+        if Some(current_fingerprint) != prev_fingerprint {\n             let dep_node_str = self.dep_node_str(&dep_node);\n             self.tcx.sess.span_err(\n                 item_span,"}]}