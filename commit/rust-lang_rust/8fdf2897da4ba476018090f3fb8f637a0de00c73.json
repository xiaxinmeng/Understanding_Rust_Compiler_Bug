{"sha": "8fdf2897da4ba476018090f3fb8f637a0de00c73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZGYyODk3ZGE0YmE0NzYwMTgwOTBmM2ZiOGY2MzdhMGRlMDBjNzM=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-21T22:25:10Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-06-25T09:17:00Z"}, "message": "Updated `cargo dev setup intellij` for cleaner user messages", "tree": {"sha": "db7c2a781b2cc15442a5dfeac445d63cdc67a400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db7c2a781b2cc15442a5dfeac445d63cdc67a400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fdf2897da4ba476018090f3fb8f637a0de00c73", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDVnwwACgkQHKDfKvWd\naKX/qg//Zd6yzVC+rVUnHcIeEB/k3f5keuA8s0GX5z/YE2jrCNDFHUGQoJV+vfCe\nNCj/NxiOQsx5C/4Jm/BvmfTA2TLcxcZKi8TI+zMA690Qb28iu/s+5yzcb0tIenyr\nhUQ2ZAmg6jQWIT4/+LJxl54VxZnDdNbTu19b5bcEmC1LeKBHhtYgoGPB06bM76C3\nzOxNCBKu4HuT4U/hLosldhR5q3XQqMY0OhWmBPU6STPgpvMh8glOxAgNTMRjJkBz\nIH6PrRruG94gVph2ECU1GY6IFV8mdgK4UWOqVDwFGfyfmmVuqOr6UBidPc/XTYpS\nCuMh4wX2+fHSKsxvfLWpIcO6UoANaoTlB4X4olr2KFPEwXhtCUoOEcfayOjdzkBa\n5QILS/qa081afgOywCUaPAAWJ1k3M7Uf4Z+GgToHFAnpVABvBWVqE8UDEDwQO7Ri\nEADi9g20CDfq7+5+KyA15YEG9Krc0t1EB+YMUcoS3kVyO9DIe6G0X83II0LMVvUL\nBrDaISe51o1nQ55ssGYchpzxVjWm7T0tEtmOexm2K4Be23qO/03EJsY0Ug0q+BvC\nacuJwLQSKwta9SPpsWNBCP8i8o8n9fRkm2jlFKgeB/kiBenJhF2uLtbTI/6dZKxU\nr9nQ1PEwqlBwrNEcomvbr73qrooTu/sCl++RucY8tbE7fnmNsbk=\n=e8k4\n-----END PGP SIGNATURE-----", "payload": "tree db7c2a781b2cc15442a5dfeac445d63cdc67a400\nparent b48f041befdca6ad14acfda2db68c280ee3fbc85\nauthor xFrednet <xFrednet@gmail.com> 1624314310 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1624612620 +0200\n\nUpdated `cargo dev setup intellij` for cleaner user messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdf2897da4ba476018090f3fb8f637a0de00c73", "html_url": "https://github.com/rust-lang/rust/commit/8fdf2897da4ba476018090f3fb8f637a0de00c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fdf2897da4ba476018090f3fb8f637a0de00c73/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b48f041befdca6ad14acfda2db68c280ee3fbc85", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48f041befdca6ad14acfda2db68c280ee3fbc85", "html_url": "https://github.com/rust-lang/rust/commit/b48f041befdca6ad14acfda2db68c280ee3fbc85"}], "stats": {"total": 153, "additions": 114, "deletions": 39}, "files": [{"sha": "8b5c499cd5e9707bf2743dea134ecbd7884031a4", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf2897da4ba476018090f3fb8f637a0de00c73/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf2897da4ba476018090f3fb8f637a0de00c73/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=8fdf2897da4ba476018090f3fb8f637a0de00c73", "patch": "@@ -37,7 +37,11 @@ fn main() {\n             stderr_length_check::check();\n         },\n         (\"setup\", Some(sub_command)) => match sub_command.subcommand() {\n-            (\"intellij\", Some(matches)) => setup::intellij::run(matches.value_of(\"rustc-repo-path\")),\n+            (\"intellij\", Some(matches)) => setup::intellij::setup_rustc_src(\n+                matches\n+                    .value_of(\"rustc-repo-path\")\n+                    .expect(\"this field is mandatory and therefore always valid\"),\n+            ),\n             (\"git-hook\", Some(matches)) => setup::git_hook::install_hook(matches.is_present(\"force-override\")),\n             _ => {},\n         },"}, {"sha": "3685e1b6def4967d5e896ef1962b662412bc2f21", "filename": "clippy_dev/src/setup/intellij.rs", "status": "modified", "additions": 109, "deletions": 38, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf2897da4ba476018090f3fb8f637a0de00c73/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf2897da4ba476018090f3fb8f637a0de00c73/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs?ref=8fdf2897da4ba476018090f3fb8f637a0de00c73", "patch": "@@ -8,42 +8,113 @@ use std::path::{Path, PathBuf};\n // This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n // code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n \n-/// # Panics\n-///\n-/// Panics if `rustc_path` does not lead to a rustc repo or the files could not be read\n-pub fn run(rustc_path: Option<&str>) {\n-    // we can unwrap here because the arg is required by clap\n-    let rustc_path = PathBuf::from(rustc_path.unwrap())\n-        .canonicalize()\n-        .expect(\"failed to get the absolute repo path\");\n-    assert!(rustc_path.is_dir(), \"path is not a directory\");\n-    let rustc_source_basedir = rustc_path.join(\"compiler\");\n-    assert!(\n-        rustc_source_basedir.is_dir(),\n-        \"are you sure the path leads to a rustc repo?\"\n-    );\n-\n-    let clippy_root_manifest = fs::read_to_string(\"Cargo.toml\").expect(\"failed to read ./Cargo.toml\");\n-    let clippy_root_lib_rs = fs::read_to_string(\"src/driver.rs\").expect(\"failed to read ./src/driver.rs\");\n-    inject_deps_into_manifest(\n-        &rustc_source_basedir,\n-        \"Cargo.toml\",\n-        &clippy_root_manifest,\n-        &clippy_root_lib_rs,\n-    )\n-    .expect(\"Failed to inject deps into ./Cargo.toml\");\n-\n-    let clippy_lints_manifest =\n-        fs::read_to_string(\"clippy_lints/Cargo.toml\").expect(\"failed to read ./clippy_lints/Cargo.toml\");\n-    let clippy_lints_lib_rs =\n-        fs::read_to_string(\"clippy_lints/src/lib.rs\").expect(\"failed to read ./clippy_lints/src/lib.rs\");\n-    inject_deps_into_manifest(\n-        &rustc_source_basedir,\n-        \"clippy_lints/Cargo.toml\",\n-        &clippy_lints_manifest,\n-        &clippy_lints_lib_rs,\n-    )\n-    .expect(\"Failed to inject deps into ./clippy_lints/Cargo.toml\");\n+const CLIPPY_PROJECTS: &[ClippyProjectInfo] = &[\n+    ClippyProjectInfo::new(\"root\", \"Cargo.toml\", \"src/driver.rs\"),\n+    ClippyProjectInfo::new(\"clippy_lints\", \"clippy_lints/Cargo.toml\", \"clippy_lints/src/lib.rs\"),\n+    ClippyProjectInfo::new(\"clippy_utils\", \"clippy_utils/Cargo.toml\", \"clippy_utils/src/lib.rs\"),\n+];\n+\n+/// Used to store clippy project information to later inject the dependency into.\n+struct ClippyProjectInfo {\n+    /// Only used to display information to the user\n+    name: &'static str,\n+    cargo_file: &'static str,\n+    lib_rs_file: &'static str,\n+}\n+\n+impl ClippyProjectInfo {\n+    const fn new(name: &'static str, cargo_file: &'static str, lib_rs_file: &'static str) -> Self {\n+        Self {\n+            name,\n+            cargo_file,\n+            lib_rs_file,\n+        }\n+    }\n+}\n+\n+pub fn setup_rustc_src(rustc_path: &str) {\n+    let rustc_source_dir = match check_and_get_rustc_dir(rustc_path) {\n+        Ok(path) => path,\n+        Err(_) => return,\n+    };\n+\n+    for project in CLIPPY_PROJECTS {\n+        if inject_deps_into_project(&rustc_source_dir, project).is_err() {\n+            return;\n+        }\n+    }\n+}\n+\n+fn check_and_get_rustc_dir(rustc_path: &str) -> Result<PathBuf, ()> {\n+    let mut path = PathBuf::from(rustc_path);\n+\n+    if path.is_relative() {\n+        match path.canonicalize() {\n+            Ok(absolute_path) => {\n+                println!(\"note: the rustc path was resolved to: `{}`\", absolute_path.display());\n+                path = absolute_path;\n+            },\n+            Err(err) => {\n+                println!(\"error: unable to get the absolute path of rustc ({})\", err);\n+                return Err(());\n+            },\n+        };\n+    }\n+\n+    let path = path.join(\"compiler\");\n+    println!(\"note: looking for compiler sources at: {}\", path.display());\n+\n+    if !path.exists() {\n+        println!(\"error: the given path does not exist\");\n+        return Err(());\n+    }\n+\n+    if !path.is_dir() {\n+        println!(\"error: the given path is a file and not a directory\");\n+        return Err(());\n+    }\n+\n+    Ok(path)\n+}\n+\n+fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo) -> Result<(), ()> {\n+    let cargo_content = read_project_file(project.cargo_file, \"Cargo.toml\", project.name)?;\n+    let lib_content = read_project_file(project.lib_rs_file, \"lib.rs\", project.name)?;\n+\n+    if inject_deps_into_manifest(rustc_source_dir, project.cargo_file, &cargo_content, &lib_content).is_err() {\n+        println!(\n+            \"error: unable to inject dependencies into {} with the Cargo file {}\",\n+            project.name, project.cargo_file\n+        );\n+        Err(())\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+/// `clippy_dev` expects to be executed in the root directory of Clippy. This function\n+/// loads the given file or returns an error. Having it in this extra function ensures\n+/// that the error message looks nice.\n+fn read_project_file(file_path: &str, file_name: &str, project: &str) -> Result<String, ()> {\n+    let path = Path::new(file_path);\n+    if !path.exists() {\n+        println!(\n+            \"error: unable to find the `{}` file for the project {}\",\n+            file_name, project\n+        );\n+        return Err(());\n+    }\n+\n+    match fs::read_to_string(path) {\n+        Ok(content) => Ok(content),\n+        Err(err) => {\n+            println!(\n+                \"error: the `{}` file for the project {} could not be read ({})\",\n+                file_name, project, err\n+            );\n+            Err(())\n+        },\n+    }\n }\n \n fn inject_deps_into_manifest(\n@@ -55,7 +126,7 @@ fn inject_deps_into_manifest(\n     // do not inject deps if we have aleady done so\n     if cargo_toml.contains(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\") {\n         eprintln!(\n-            \"cargo dev setup intellij: warning: deps already found inside {}, doing nothing.\",\n+            \"warn: dependencies are already setup inside {}, skipping file.\",\n             manifest_path\n         );\n         return Ok(());\n@@ -97,7 +168,7 @@ fn inject_deps_into_manifest(\n     let mut file = File::create(manifest_path)?;\n     file.write_all(new_manifest.as_bytes())?;\n \n-    println!(\"Dependency paths injected: {}\", manifest_path);\n+    println!(\"note: successfully setup dependencies inside {}\", manifest_path);\n \n     Ok(())\n }"}]}