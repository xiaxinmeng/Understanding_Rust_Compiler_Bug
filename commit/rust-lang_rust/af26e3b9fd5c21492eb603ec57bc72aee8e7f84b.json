{"sha": "af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "node_id": "C_kwDOAAsO6NoAKGFmMjZlM2I5ZmQ1YzIxNDkyZWI2MDNlYzU3YmM3MmFlZThlN2Y4NGI", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-12-21T23:29:29Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-12-31T22:28:14Z"}, "message": "Tear down and rewrite support for float testing", "tree": {"sha": "33e9fade8edb841330045e0953f441384a1e55b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e9fade8edb841330045e0953f441384a1e55b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "html_url": "https://github.com/rust-lang/rust/commit/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc00efee0f4bf950f6fa8ee00d88fefa73a8c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc00efee0f4bf950f6fa8ee00d88fefa73a8c0b", "html_url": "https://github.com/rust-lang/rust/commit/ecc00efee0f4bf950f6fa8ee00d88fefa73a8c0b"}], "stats": {"total": 107, "additions": 12, "deletions": 95}, "files": [{"sha": "d2ff5f3b1b195fbbf3a55683c173ac19b69f86f0", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "patch": "@@ -26,3 +26,6 @@ features = [\"alloc\"]\n \n [dev-dependencies.test_helpers]\n path = \"../test_helpers\"\n+\n+[dev-dependencies]\n+std_float = { path = \"../std_float/\", features = [\"as_crate\"] }"}, {"sha": "7b1e6840f6424f2f0f232f909c0eaf57e56c2223", "filename": "crates/core_simd/examples/nbody.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fnbody.rs?ref=af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "patch": "@@ -1,11 +1,13 @@\n-#![cfg_attr(feature = \"std\", feature(portable_simd))]\n+#![feature(portable_simd)]\n+extern crate std_float;\n \n /// Benchmarks game nbody code\n /// Taken from the `packed_simd` crate\n /// Run this benchmark with `cargo test --example nbody`\n-#[cfg(feature = \"std\")]\n mod nbody {\n-    use core_simd::*;\n+    use core_simd::simd::*;\n+    #[allow(unused)] // False positive?\n+    use std_float::StdFloat;\n \n     use std::f64::consts::PI;\n     const SOLAR_MASS: f64 = 4.0 * PI * PI;\n@@ -167,7 +169,6 @@ mod nbody {\n     }\n }\n \n-#[cfg(feature = \"std\")]\n #[cfg(test)]\n mod tests {\n     // Good enough for demonstration purposes, not going for strictness here.\n@@ -184,7 +185,6 @@ mod tests {\n }\n \n fn main() {\n-    #[cfg(feature = \"std\")]\n     {\n         let (energy_before, energy_after) = nbody::run(1000);\n         println!(\"Energy before: {}\", energy_before);"}, {"sha": "0bc241af1f1cdf5fd255abc94aa031c7ad993489", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "patch": "@@ -87,29 +87,3 @@ extern \"platform-intrinsic\" {\n     #[allow(unused)]\n     pub(crate) fn simd_select_bitmask<M, T>(m: M, a: T, b: T) -> T;\n }\n-\n-#[cfg(feature = \"std\")]\n-mod std {\n-    extern \"platform-intrinsic\" {\n-        // ceil\n-        pub(crate) fn simd_ceil<T>(x: T) -> T;\n-\n-        // floor\n-        pub(crate) fn simd_floor<T>(x: T) -> T;\n-\n-        // round\n-        pub(crate) fn simd_round<T>(x: T) -> T;\n-\n-        // trunc\n-        pub(crate) fn simd_trunc<T>(x: T) -> T;\n-\n-        // fsqrt\n-        pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n-\n-        // fma\n-        pub(crate) fn simd_fma<T>(x: T, y: T, z: T) -> T;\n-    }\n-}\n-\n-#[cfg(feature = \"std\")]\n-pub(crate) use crate::simd::intrinsics::std::*;"}, {"sha": "06ccab3ec494c6b0799bc43f29416b143318deab", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "patch": "@@ -5,47 +5,6 @@ macro_rules! implement {\n     {\n         $type:ty, $int_type:ty\n     } => {\n-        #[cfg(feature = \"std\")]\n-        impl<const LANES: usize> Simd<$type, LANES>\n-        where\n-            LaneCount<LANES>: SupportedLaneCount,\n-        {\n-            /// Returns the smallest integer greater than or equal to each lane.\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            #[inline]\n-            pub fn ceil(self) -> Self {\n-                unsafe { intrinsics::simd_ceil(self) }\n-            }\n-\n-            /// Returns the largest integer value less than or equal to each lane.\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            #[inline]\n-            pub fn floor(self) -> Self {\n-                unsafe { intrinsics::simd_floor(self) }\n-            }\n-\n-            /// Rounds to the nearest integer value. Ties round toward zero.\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            #[inline]\n-            pub fn round(self) -> Self {\n-                unsafe { intrinsics::simd_round(self) }\n-            }\n-\n-            /// Returns the floating point's integer value, with its fractional part removed.\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            #[inline]\n-            pub fn trunc(self) -> Self {\n-                unsafe { intrinsics::simd_trunc(self) }\n-            }\n-\n-            /// Returns the floating point's fractional value, with its integer part removed.\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            #[inline]\n-            pub fn fract(self) -> Self {\n-                self - self.trunc()\n-            }\n-        }\n-\n         impl<const LANES: usize> Simd<$type, LANES>\n         where\n             LaneCount<LANES>: SupportedLaneCount,"}, {"sha": "3528a420351cf6b32e8aaf7202bdbd1985d9d957", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "patch": "@@ -38,29 +38,6 @@ macro_rules! impl_float_vector {\n                 unsafe { intrinsics::simd_fabs(self) }\n             }\n \n-            /// Fused multiply-add.  Computes `(self * a) + b` with only one rounding error,\n-            /// yielding a more accurate result than an unfused multiply-add.\n-            ///\n-            /// Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n-            /// architecture has a dedicated `fma` CPU instruction.  However, this is not always\n-            /// true, and will be heavily dependent on designing algorithms with specific target\n-            /// hardware in mind.\n-            #[cfg(feature = \"std\")]\n-            #[inline]\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            pub fn mul_add(self, a: Self, b: Self) -> Self {\n-                unsafe { intrinsics::simd_fma(self, a, b) }\n-            }\n-\n-            /// Produces a vector where every lane has the square root value\n-            /// of the equivalently-indexed lane in `self`\n-            #[inline]\n-            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-            #[cfg(feature = \"std\")]\n-            pub fn sqrt(self) -> Self {\n-                unsafe { intrinsics::simd_fsqrt(self) }\n-            }\n-\n             /// Takes the reciprocal (inverse) of each lane, `1/x`.\n             #[inline]\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]"}, {"sha": "4fb9de198ee15f5678a18eedbed49fbb463f3336", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "patch": "@@ -546,6 +546,8 @@ macro_rules! impl_float_tests {\n \n             #[cfg(feature = \"std\")]\n             mod std {\n+                use std_float::StdFloat;\n+\n                 use super::*;\n                 test_helpers::test_lanes! {\n                     fn sqrt<const LANES: usize>() {"}, {"sha": "1a1bc9ebca76a15d0b5b1bb1b486801d20104168", "filename": "crates/core_simd/tests/round.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Ftests%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af26e3b9fd5c21492eb603ec57bc72aee8e7f84b/crates%2Fcore_simd%2Ftests%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fround.rs?ref=af26e3b9fd5c21492eb603ec57bc72aee8e7f84b", "patch": "@@ -3,6 +3,8 @@\n macro_rules! float_rounding_test {\n     { $scalar:tt, $int_scalar:tt } => {\n         mod $scalar {\n+            use std_float::StdFloat;\n+\n             type Vector<const LANES: usize> = core_simd::Simd<$scalar, LANES>;\n             type Scalar = $scalar;\n             type IntScalar = $int_scalar;"}]}