{"sha": "19cefa68640843956eedd86227ddc1d35dbc6754", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Y2VmYTY4NjQwODQzOTU2ZWVkZDg2MjI3ZGRjMWQzNWRiYzY3NTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T18:01:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-02T18:01:27Z"}, "message": "Auto merge of #74963 - JohnTitor:ptn-ice, r=petrochenkov\n\nFix ICEs with `@ ..` binding\n\nThis reverts #74557 and introduces an alternative fix while ensuring that #74954 is not broken.\nThe diagnostics are verbose though, it fixes three related issues.\ncc #74954, #74539, and #74702", "tree": {"sha": "a0c03637ed19dabc77b3add5f6a659fded369efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c03637ed19dabc77b3add5f6a659fded369efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19cefa68640843956eedd86227ddc1d35dbc6754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19cefa68640843956eedd86227ddc1d35dbc6754", "html_url": "https://github.com/rust-lang/rust/commit/19cefa68640843956eedd86227ddc1d35dbc6754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19cefa68640843956eedd86227ddc1d35dbc6754/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a99ae95c722d4dc8d1eef09aaa4e72d50d496e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75", "html_url": "https://github.com/rust-lang/rust/commit/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75"}, {"sha": "c2afce4058e65a23d115b90078427afb17702e44", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2afce4058e65a23d115b90078427afb17702e44", "html_url": "https://github.com/rust-lang/rust/commit/c2afce4058e65a23d115b90078427afb17702e44"}], "stats": {"total": 202, "additions": 146, "deletions": 56}, "files": [{"sha": "171856e7e637181fa2878216b484213d2cfbd999", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -112,7 +112,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // Found a sub-tuple pattern `$binding_mode $ident @ ..`.\n                 // This is not allowed as a sub-tuple pattern\n                 PatKind::Ident(ref _bm, ident, Some(ref sub)) if sub.is_rest() => {\n-                    rest = Some((idx, pat.span));\n                     let sp = pat.span;\n                     self.diagnostic()\n                         .struct_span_err(\n@@ -128,7 +127,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();\n-                    break;\n                 }\n                 _ => {}\n             }"}, {"sha": "44ff4209095418473d9f4a4d749cb9c7f3be9242", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -1510,30 +1510,18 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         pat_src: PatternSource,\n         bindings: &mut SmallVec<[(PatBoundCtx, FxHashSet<Ident>); 1]>,\n     ) {\n-        let is_tuple_struct_pat = matches!(pat.kind, PatKind::TupleStruct(_, _));\n-\n         // Visit all direct subpatterns of this pattern.\n         pat.walk(&mut |pat| {\n             debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.kind);\n             match pat.kind {\n                 PatKind::Ident(bmode, ident, ref sub) => {\n-                    if is_tuple_struct_pat && sub.as_ref().filter(|p| p.is_rest()).is_some() {\n-                        // In tuple struct patterns ignore the invalid `ident @ ...`.\n-                        // It will be handled as an error by the AST lowering.\n-                        self.r\n-                            .session\n-                            .delay_span_bug(ident.span, \"ident in tuple pattern is invalid\");\n-                    } else {\n-                        // First try to resolve the identifier as some existing entity,\n-                        // then fall back to a fresh binding.\n-                        let has_sub = sub.is_some();\n-                        let res = self\n-                            .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n-                            .unwrap_or_else(|| {\n-                                self.fresh_binding(ident, pat.id, pat_src, bindings)\n-                            });\n-                        self.r.record_partial_res(pat.id, PartialRes::new(res));\n-                    }\n+                    // First try to resolve the identifier as some existing entity,\n+                    // then fall back to a fresh binding.\n+                    let has_sub = sub.is_some();\n+                    let res = self\n+                        .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n+                        .unwrap_or_else(|| self.fresh_binding(ident, pat.id, pat_src, bindings));\n+                    self.r.record_partial_res(pat.id, PartialRes::new(res));\n                 }\n                 PatKind::TupleStruct(ref path, ..) => {\n                     self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct(pat.span));"}, {"sha": "1b80a21793a0aa42b8b89813a783e3069073a454", "filename": "src/test/ui/issues/issue-72574-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.rs?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -6,3 +6,5 @@ fn main() {\n     }\n }\n //~^^^^ ERROR `_x @` is not allowed in a tuple\n+//~| ERROR: `..` patterns are not allowed here\n+//~| ERROR: mismatched types"}, {"sha": "92ebb45e88d4b71b6e26215fe9c37b1ef51fa5b8", "filename": "src/test/ui/issues/issue-72574-1.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -10,5 +10,25 @@ help: if you don't need to use the contents of _x, discard the tuple's remaining\n LL |         (_a, ..) => {}\n    |              ^^\n \n-error: aborting due to previous error\n+error: `..` patterns are not allowed here\n+  --> $DIR/issue-72574-1.rs:4:19\n+   |\n+LL |         (_a, _x @ ..) => {}\n+   |                   ^^\n+   |\n+   = note: only allowed in tuple, tuple struct, and slice patterns\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-72574-1.rs:4:9\n+   |\n+LL |     match x {\n+   |           - this expression has type `({integer}, {integer}, {integer})`\n+LL |         (_a, _x @ ..) => {}\n+   |         ^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 2 elements\n+   |\n+   = note: expected tuple `({integer}, {integer}, {integer})`\n+              found tuple `(_, _)`\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0ad2db848b2811c46479f8eaa243cf93e77d677a", "filename": "src/test/ui/issues/issue-72574-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.rs?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -8,3 +8,5 @@ fn main() {\n     }\n }\n //~^^^^ ERROR `_x @` is not allowed in a tuple struct\n+//~| ERROR: `..` patterns are not allowed here\n+//~| ERROR: this pattern has 2 fields, but the corresponding tuple struct has 3 fields"}, {"sha": "0a9c868af7af8cdc63e553c2e4520b4ba023ce46", "filename": "src/test/ui/issues/issue-72574-2.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -10,5 +10,23 @@ help: if you don't need to use the contents of _x, discard the tuple's remaining\n LL |         Binder(_a, ..) => {}\n    |                    ^^\n \n-error: aborting due to previous error\n+error: `..` patterns are not allowed here\n+  --> $DIR/issue-72574-2.rs:6:25\n+   |\n+LL |         Binder(_a, _x @ ..) => {}\n+   |                         ^^\n+   |\n+   = note: only allowed in tuple, tuple struct, and slice patterns\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n+  --> $DIR/issue-72574-2.rs:6:9\n+   |\n+LL | struct Binder(i32, i32, i32);\n+   | ----------------------------- tuple struct defined here\n+...\n+LL |         Binder(_a, _x @ ..) => {}\n+   |         ^^^^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0023`."}, {"sha": "75632d11c1df0d65d00272b69db73c9d63442a20", "filename": "src/test/ui/issues/issue-74539.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs?ref=a99ae95c722d4dc8d1eef09aaa4e72d50d496e75", "patch": "@@ -1,12 +0,0 @@\n-enum E {\n-    A(u8, u8),\n-}\n-\n-fn main() {\n-    let e = E::A(2, 3);\n-    match e {\n-        E::A(x @ ..) => {  //~ ERROR `x @` is not allowed in a tuple\n-            x //~ ERROR cannot find value `x` in this scope\n-        }\n-    };\n-}"}, {"sha": "94526dcd7cb3971223bcfa3bd263b9fb1d09bb59", "filename": "src/test/ui/issues/issue-74539.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr?ref=a99ae95c722d4dc8d1eef09aaa4e72d50d496e75", "patch": "@@ -1,21 +0,0 @@\n-error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/issue-74539.rs:9:13\n-   |\n-LL |             x\n-   |             ^ help: a local variable with a similar name exists: `e`\n-\n-error: `x @` is not allowed in a tuple struct\n-  --> $DIR/issue-74539.rs:8:14\n-   |\n-LL |         E::A(x @ ..) => {\n-   |              ^^^^^^ this is only allowed in slice patterns\n-   |\n-   = help: remove this and bind each tuple field independently\n-help: if you don't need to use the contents of x, discard the tuple's remaining fields\n-   |\n-LL |         E::A(..) => {\n-   |              ^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0425`."}, {"sha": "0b25f87ec5340d6792fd7d4784ce8ceaf47f1b0a", "filename": "src/test/ui/pattern/issue-74539.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.rs?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -0,0 +1,15 @@\n+enum E {\n+    A(u8, u8),\n+}\n+\n+fn main() {\n+    let e = E::A(2, 3);\n+    match e {\n+        E::A(x @ ..) => {\n+            //~^ ERROR: `x @` is not allowed in a tuple struct\n+            //~| ERROR: `..` patterns are not allowed here\n+            //~| ERROR: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+            x\n+        }\n+    };\n+}"}, {"sha": "cbc90b5397d8b058f3fdc4abcf9a25fcd663f84f", "filename": "src/test/ui/pattern/issue-74539.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -0,0 +1,32 @@\n+error: `x @` is not allowed in a tuple struct\n+  --> $DIR/issue-74539.rs:8:14\n+   |\n+LL |         E::A(x @ ..) => {\n+   |              ^^^^^^ this is only allowed in slice patterns\n+   |\n+   = help: remove this and bind each tuple field independently\n+help: if you don't need to use the contents of x, discard the tuple's remaining fields\n+   |\n+LL |         E::A(..) => {\n+   |              ^^\n+\n+error: `..` patterns are not allowed here\n+  --> $DIR/issue-74539.rs:8:18\n+   |\n+LL |         E::A(x @ ..) => {\n+   |                  ^^\n+   |\n+   = note: only allowed in tuple, tuple struct, and slice patterns\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+  --> $DIR/issue-74539.rs:8:9\n+   |\n+LL |     A(u8, u8),\n+   |     --------- tuple variant defined here\n+...\n+LL |         E::A(x @ ..) => {\n+   |         ^^^^^^^^^^^^ expected 2 fields, found 1\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0023`."}, {"sha": "0aeb3b217a26ff8771c9fb67a4943eaf9a1b4ea1", "filename": "src/test/ui/pattern/issue-74702.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.rs?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let (foo @ ..,) = (0, 0);\n+    //~^ ERROR: `foo @` is not allowed in a tuple\n+    //~| ERROR: `..` patterns are not allowed here\n+    //~| ERROR: mismatched types\n+    dbg!(foo);\n+}"}, {"sha": "aca5c9aed96247a0d14c49100b608da6a1428b52", "filename": "src/test/ui/pattern/issue-74702.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -0,0 +1,34 @@\n+error: `foo @` is not allowed in a tuple\n+  --> $DIR/issue-74702.rs:2:10\n+   |\n+LL |     let (foo @ ..,) = (0, 0);\n+   |          ^^^^^^^^ this is only allowed in slice patterns\n+   |\n+   = help: remove this and bind each tuple field independently\n+help: if you don't need to use the contents of foo, discard the tuple's remaining fields\n+   |\n+LL |     let (..,) = (0, 0);\n+   |          ^^\n+\n+error: `..` patterns are not allowed here\n+  --> $DIR/issue-74702.rs:2:16\n+   |\n+LL |     let (foo @ ..,) = (0, 0);\n+   |                ^^\n+   |\n+   = note: only allowed in tuple, tuple struct, and slice patterns\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-74702.rs:2:9\n+   |\n+LL |     let (foo @ ..,) = (0, 0);\n+   |         ^^^^^^^^^^^   ------ this expression has type `({integer}, {integer})`\n+   |         |\n+   |         expected a tuple with 2 elements, found one with 1 element\n+   |\n+   = note: expected tuple `({integer}, {integer})`\n+              found tuple `(_,)`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "269ec3c7abe93c48e20c2d6ad33388749b1d355a", "filename": "src/test/ui/pattern/issue-74954.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cefa68640843956eedd86227ddc1d35dbc6754/src%2Ftest%2Fui%2Fpattern%2Fissue-74954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74954.rs?ref=19cefa68640843956eedd86227ddc1d35dbc6754", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+fn main() {\n+    if let Some([b'@', filename @ ..]) = Some(b\"@abc123\") {\n+        println!(\"filename {:?}\", filename);\n+    }\n+}"}]}