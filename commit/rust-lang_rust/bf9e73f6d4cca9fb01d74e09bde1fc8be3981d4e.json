{"sha": "bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e", "node_id": "C_kwDOAAsO6NoAKGJmOWU3M2Y2ZDRjY2E5ZmIwMWQ3NGUwOWJkZTFmYzhiZTM5ODFkNGU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T17:11:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T17:15:24Z"}, "message": "some things don't need to be mutable", "tree": {"sha": "d6e3db8437af001a5bae96bf1e12a21416456149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e3db8437af001a5bae96bf1e12a21416456149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e", "html_url": "https://github.com/rust-lang/rust/commit/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7225524744ba94e32baf7540f4e064db01252458", "url": "https://api.github.com/repos/rust-lang/rust/commits/7225524744ba94e32baf7540f4e064db01252458", "html_url": "https://github.com/rust-lang/rust/commit/7225524744ba94e32baf7540f4e064db01252458"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "9ea61ae56236e8b85dc03a8e79e6b47e2aebe300", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e", "patch": "@@ -488,7 +488,7 @@ impl<'tcx> Stack {\n         &mut self,\n         derived_from: ProvenanceExtra,\n         new: Item,\n-        global: &mut GlobalStateInner,\n+        global: &GlobalStateInner,\n         dcx: &mut DiagnosticCx<'_, '_, '_, '_, 'tcx>,\n         exposed_tags: &FxHashSet<SbTag>,\n     ) -> InterpResult<'tcx> {\n@@ -658,9 +658,9 @@ impl Stacks {\n             range.size.bytes()\n         );\n         let dcx = DiagnosticCxBuilder::read(&mut current_span, threads, tag, range);\n-        let mut state = state.borrow_mut();\n+        let state = state.borrow();\n         self.for_each(range, dcx, |stack, dcx, exposed_tags| {\n-            stack.access(AccessKind::Read, tag, &mut state, dcx, exposed_tags)\n+            stack.access(AccessKind::Read, tag, &state, dcx, exposed_tags)\n         })\n     }\n \n@@ -681,9 +681,9 @@ impl Stacks {\n             range.size.bytes()\n         );\n         let dcx = DiagnosticCxBuilder::write(&mut current_span, threads, tag, range);\n-        let mut state = state.borrow_mut();\n+        let state = state.borrow();\n         self.for_each(range, dcx, |stack, dcx, exposed_tags| {\n-            stack.access(AccessKind::Write, tag, &mut state, dcx, exposed_tags)\n+            stack.access(AccessKind::Write, tag, &state, dcx, exposed_tags)\n         })\n     }\n \n@@ -904,7 +904,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                         false\n                     };\n                     let item = Item::new(new_tag, perm, protected);\n-                    let mut global = this.machine.stacked_borrows.as_ref().unwrap().borrow_mut();\n+                    let global = this.machine.stacked_borrows.as_ref().unwrap().borrow();\n                     let dcx = DiagnosticCxBuilder::retag(\n                         &mut current_span, // FIXME avoid this `clone`\n                         &this.machine.threads,\n@@ -914,7 +914,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                         alloc_range(base_offset, size),\n                     );\n                     stacked_borrows.for_each(range, dcx, |stack, dcx, exposed_tags| {\n-                        stack.grant(orig_tag, item, &mut global, dcx, exposed_tags)\n+                        stack.grant(orig_tag, item, &global, dcx, exposed_tags)\n                     })\n                 })?;\n                 return Ok(Some(alloc_id));\n@@ -932,7 +932,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n             .borrow_mut();\n         let item = Item::new(new_tag, perm, protect.is_some());\n         let range = alloc_range(base_offset, size);\n-        let mut global = machine.stacked_borrows.as_ref().unwrap().borrow_mut();\n+        let global = machine.stacked_borrows.as_ref().unwrap().borrow();\n         // FIXME: can't share this with the current_span inside log_creation\n         let current_span = &mut machine.current_span();\n         let dcx = DiagnosticCxBuilder::retag(\n@@ -944,7 +944,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n             alloc_range(base_offset, size),\n         );\n         stacked_borrows.for_each(range, dcx, |stack, dcx, exposed_tags| {\n-            stack.grant(orig_tag, item, &mut global, dcx, exposed_tags)\n+            stack.grant(orig_tag, item, &global, dcx, exposed_tags)\n         })?;\n \n         Ok(Some(alloc_id))"}]}