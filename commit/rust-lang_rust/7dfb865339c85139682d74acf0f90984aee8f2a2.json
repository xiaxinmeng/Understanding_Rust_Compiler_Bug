{"sha": "7dfb865339c85139682d74acf0f90984aee8f2a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZmI4NjUzMzljODUxMzk2ODJkNzRhY2YwZjkwOTg0YWVlOGYyYTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-29T21:44:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-30T13:54:38Z"}, "message": "Remove local_imm/local_mem since all variables are now by reference", "tree": {"sha": "a81ec2c0a32cd90936363abb392120ae85217ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a81ec2c0a32cd90936363abb392120ae85217ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dfb865339c85139682d74acf0f90984aee8f2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfb865339c85139682d74acf0f90984aee8f2a2", "html_url": "https://github.com/rust-lang/rust/commit/7dfb865339c85139682d74acf0f90984aee8f2a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dfb865339c85139682d74acf0f90984aee8f2a2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2616581863ea71ecc23f1f126cb409e047139b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2616581863ea71ecc23f1f126cb409e047139b6c", "html_url": "https://github.com/rust-lang/rust/commit/2616581863ea71ecc23f1f126cb409e047139b6c"}], "stats": {"total": 79, "additions": 33, "deletions": 46}, "files": [{"sha": "f222cd724924c401a65cb55b72456e5866a2de0b", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=7dfb865339c85139682d74acf0f90984aee8f2a2", "patch": "@@ -140,6 +140,11 @@\n  * the various values we copied explicitly.  Note that guards and moves are\n  * just plain incompatible.\n  *\n+ * Some relevant helper functions that manage bindings:\n+ * - `create_bindings_map()`\n+ * - `store_non_ref_bindings()`\n+ * - `insert_lllocals()`\n+ *\n  */\n \n use core::prelude::*;\n@@ -1201,7 +1206,7 @@ fn insert_lllocals(bcx: block,\n         debug!(\"binding %? to %s\",\n                binding_info.id,\n                val_str(bcx.ccx().tn, llval));\n-        llmap.insert(binding_info.id, local_mem(llval));\n+        llmap.insert(binding_info.id, llval);\n     }\n     return bcx;\n }\n@@ -1673,7 +1678,7 @@ pub fn trans_match_inner(scope_cx: block,\n \n     let mut arm_datas = ~[], matches = ~[];\n     for vec::each(arms) |arm| {\n-        let body = scope_block(bcx, arm.body.info(), ~\"case_body\");\n+        let body = scope_block(bcx, arm.body.info(), \"case_body\");\n         let bindings_map = create_bindings_map(bcx, arm.pats[0]);\n         let arm_data = @ArmData {bodycx: body,\n                                  arm: arm,\n@@ -1765,22 +1770,20 @@ pub fn bind_irrefutable_pat(bcx: block,\n                 datum.copy_to_datum(bcx, INIT, scratch);\n                 match binding_mode {\n                     BindLocal => {\n-                        bcx.fcx.lllocals.insert(pat.id,\n-                                                local_mem(scratch.val));\n+                        bcx.fcx.lllocals.insert(pat.id, scratch.val);\n                     }\n                     BindArgument => {\n-                        bcx.fcx.llargs.insert(pat.id,\n-                                              local_mem(scratch.val));\n+                        bcx.fcx.llargs.insert(pat.id, scratch.val);\n                     }\n                 }\n                 add_clean(bcx, scratch.val, binding_ty);\n             } else {\n                 match binding_mode {\n                     BindLocal => {\n-                        bcx.fcx.lllocals.insert(pat.id, local_mem(val));\n+                        bcx.fcx.lllocals.insert(pat.id, val);\n                     }\n                     BindArgument => {\n-                        bcx.fcx.llargs.insert(pat.id, local_mem(val));\n+                        bcx.fcx.llargs.insert(pat.id, val);\n                     }\n                 }\n             }"}, {"sha": "dcd638d1a624df0536bc65357264f7250ea37a15", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7dfb865339c85139682d74acf0f90984aee8f2a2", "patch": "@@ -1105,8 +1105,8 @@ pub fn init_local(bcx: block, local: @ast::local) -> block {\n         }\n     }\n \n-    let llptr = match bcx.fcx.lllocals.find(&local.node.id) {\n-        Some(&local_mem(v)) => v,\n+    let llptr = match bcx.fcx.lllocals.find_copy(&local.node.id) {\n+        Some(v) => v,\n         _ => {\n             bcx.tcx().sess.span_bug(local.span,\n                                     \"init_local: Someone forgot to document why it's\\\n@@ -1432,7 +1432,7 @@ pub fn alloc_local(cx: block, local: @ast::local) -> block {\n             });\n         }\n     }\n-    cx.fcx.lllocals.insert(local.node.id, local_mem(val));\n+    cx.fcx.lllocals.insert(local.node.id, val);\n     cx\n }\n \n@@ -1768,7 +1768,7 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n                                           false,\n                                           _match::BindArgument);\n \n-        fcx.llargs.insert(arg_id, local_mem(llarg));\n+        fcx.llargs.insert(arg_id, llarg);\n \n         if fcx.ccx.sess.opts.extra_debuginfo && fcx_has_nonzero_span(fcx) {\n             debuginfo::create_arg(bcx, args[arg_n], args[arg_n].ty.span);\n@@ -2004,7 +2004,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n         // this function as an opaque blob due to the way that type_of()\n         // works. So we have to cast to the destination's view of the type.\n         let llarg = match fcx.llargs.find(&va.id) {\n-            Some(&local_mem(x)) => x,\n+            Some(&x) => x,\n             _ => fail!(\"trans_enum_variant: how do we know this works?\"),\n         };\n         let arg_ty = arg_tys[i];\n@@ -2074,12 +2074,7 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n                                              fcx.llretptr.get(),\n                                              0,\n                                              i);\n-        let llarg = match fcx.llargs.get_copy(&field.node.id) {\n-            local_mem(x) => x,\n-            _ => {\n-                ccx.tcx.sess.bug(\"trans_tuple_struct: llarg wasn't local_mem\")\n-            }\n-        };\n+        let llarg = fcx.llargs.get_copy(&field.node.id);\n         let arg_ty = arg_tys[i];\n         memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n     }"}, {"sha": "a2fa840ad79b92180b18098d6d9e7c1a2bb1d86b", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7dfb865339c85139682d74acf0f90984aee8f2a2", "patch": "@@ -240,8 +240,6 @@ pub struct ValSelfData {\n     is_owned: bool\n }\n \n-pub enum local_val { local_mem(ValueRef), local_imm(ValueRef), }\n-\n // Here `self_ty` is the real type of the self parameter to this method. It\n // will only be set in the case of default methods.\n pub struct param_substs {\n@@ -328,10 +326,10 @@ pub struct fn_ctxt_ {\n     has_immediate_return_value: bool,\n \n     // Maps arguments to allocas created for them in llallocas.\n-    llargs: @mut HashMap<ast::node_id, local_val>,\n+    llargs: @mut HashMap<ast::node_id, ValueRef>,\n     // Maps the def_ids for local variables to the allocas created for\n     // them in llallocas.\n-    lllocals: @mut HashMap<ast::node_id, local_val>,\n+    lllocals: @mut HashMap<ast::node_id, ValueRef>,\n     // Same as above, but for closure upvars\n     llupvars: @mut HashMap<ast::node_id, ValueRef>,\n "}, {"sha": "0f325c432f4264985d9e56d9ed84ac09c96e9afd", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=7dfb865339c85139682d74acf0f90984aee8f2a2", "patch": "@@ -105,7 +105,6 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n-use core::to_bytes;\n use core::uint;\n use syntax::ast;\n use syntax::codemap::span;"}, {"sha": "38740f69c3a1bb66aaf8619ae455e05ef7f5e020", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7dfb865339c85139682d74acf0f90984aee8f2a2", "patch": "@@ -864,17 +864,14 @@ pub fn create_local_var(bcx: block, local: @ast::local)\n     };\n     update_cache(cache, AutoVariableTag, local_var_metadata(mdval));\n \n-    let llptr = match bcx.fcx.lllocals.find(&local.node.id) {\n-      option::Some(&local_mem(v)) => v,\n-      option::Some(_) => {\n-        bcx.tcx().sess.span_bug(local.span, \"local is bound to something weird\");\n-      }\n-      option::None => {\n-        match bcx.fcx.lllocals.get_copy(&local.node.pat.id) {\n-          local_imm(v) => v,\n-          _ => bcx.tcx().sess.span_bug(local.span, \"local is bound to something weird\")\n+    // NDM Should use `pat_util::pat_bindings` for pats like (a, b) etc\n+    let llptr = match bcx.fcx.lllocals.find_copy(&local.node.pat.id) {\n+        Some(v) => v,\n+        None => {\n+            bcx.tcx().sess.span_bug(\n+                local.span,\n+                fmt!(\"No entry in lllocals table for %?\", local.node.id));\n         }\n-      }\n     };\n     let declargs = ~[llmdnode([llptr]), mdnode];\n     trans::build::Call(bcx, *cx.intrinsics.get(&~\"llvm.dbg.declare\"),\n@@ -922,9 +919,7 @@ pub fn create_arg(bcx: block, arg: ast::arg, sp: span)\n             };\n             update_cache(cache, tg, argument_metadata(mdval));\n \n-            let llptr = match fcx.llargs.get_copy(&arg.id) {\n-              local_mem(v) | local_imm(v) => v,\n-            };\n+            let llptr = fcx.llargs.get_copy(&arg.id);\n             let declargs = ~[llmdnode([llptr]), mdnode];\n             trans::build::Call(bcx,\n                                *cx.intrinsics.get(&~\"llvm.dbg.declare\"),"}, {"sha": "42ba06aad764eb9e67fb0f9e2f50f60ddf5c46b2", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfb865339c85139682d74acf0f90984aee8f2a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=7dfb865339c85139682d74acf0f90984aee8f2a2", "patch": "@@ -1058,25 +1058,22 @@ pub fn trans_local_var(bcx: block, def: ast::def) -> Datum {\n     };\n \n     fn take_local(bcx: block,\n-                  table: &HashMap<ast::node_id, local_val>,\n+                  table: &HashMap<ast::node_id, ValueRef>,\n                   nid: ast::node_id) -> Datum {\n-        let (v, mode) = match table.find(&nid) {\n-            Some(&local_mem(v)) => (v, ByRef(ZeroMem)),\n-            Some(&local_imm(v)) => (v, ByValue),\n+        let v = match table.find(&nid) {\n+            Some(&v) => v,\n             None => {\n                 bcx.sess().bug(fmt!(\n                     \"trans_local_var: no llval for local/arg %? found\", nid));\n             }\n         };\n         let ty = node_id_type(bcx, nid);\n-\n-        debug!(\"take_local(nid=%?, v=%s, mode=%?, ty=%s)\",\n-               nid, bcx.val_str(v), mode, bcx.ty_to_str(ty));\n-\n+        debug!(\"take_local(nid=%?, v=%s, ty=%s)\",\n+               nid, bcx.val_str(v), bcx.ty_to_str(ty));\n         Datum {\n             val: v,\n             ty: ty,\n-            mode: mode,\n+            mode: ByRef(ZeroMem)\n         }\n     }\n }"}]}