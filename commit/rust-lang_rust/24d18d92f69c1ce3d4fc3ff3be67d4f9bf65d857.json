{"sha": "24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZDE4ZDkyZjY5YzFjZTNkNGZjM2ZmM2JlNjdkNGY5YmY2NWQ4NTc=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-25T21:10:44Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-25T21:55:49Z"}, "message": "Simplify profiler impl (bubble up Option and shorten code", "tree": {"sha": "f7a285a5e083f7e953ee0a59be28fe611a378108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a285a5e083f7e953ee0a59be28fe611a378108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857", "html_url": "https://github.com/rust-lang/rust/commit/24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe99a29ad1226dd3f6801ea4bdb575506324be07", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe99a29ad1226dd3f6801ea4bdb575506324be07", "html_url": "https://github.com/rust-lang/rust/commit/fe99a29ad1226dd3f6801ea4bdb575506324be07"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "a3f5321fb3c1619ce66fee30155443d1017d96ca", "filename": "crates/ra_prof/src/hprof.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857/crates%2Fra_prof%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857/crates%2Fra_prof%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fhprof.rs?ref=24d18d92f69c1ce3d4fc3ff3be67d4f9bf65d857", "patch": "@@ -30,8 +30,9 @@ pub fn init_from(spec: &str) {\n pub type Label = &'static str;\n \n /// This function starts a profiling scope in the current execution stack with a given description.\n-/// It returns a Profile structure and measure elapsed time between this method invocation and Profile structure drop.\n-/// It supports nested profiling scopes in case when this function invoked multiple times at the execution stack. In this case the profiling information will be nested at the output.\n+/// It returns a `Profile` struct that measures elapsed time between this method invocation and `Profile` struct drop.\n+/// It supports nested profiling scopes in case when this function is invoked multiple times at the execution stack.\n+/// In this case the profiling information will be nested at the output.\n /// Profiling information is being printed in the stderr.\n ///\n /// # Example\n@@ -58,36 +59,35 @@ pub type Label = &'static str;\n /// ```\n pub fn profile(label: Label) -> Profiler {\n     assert!(!label.is_empty());\n-    let enabled = PROFILING_ENABLED.load(Ordering::Relaxed)\n-        && PROFILE_STACK.with(|stack| stack.borrow_mut().push(label));\n-    let label = if enabled { Some(label) } else { None };\n-    Profiler { label, detail: None }\n+\n+    if PROFILING_ENABLED.load(Ordering::Relaxed)\n+        && PROFILE_STACK.with(|stack| stack.borrow_mut().push(label))\n+    {\n+        Profiler(Some(ProfilerImpl { label, detail: None }))\n+    } else {\n+        Profiler(None)\n+    }\n }\n \n-pub struct Profiler {\n-    label: Option<Label>,\n+pub struct Profiler(Option<ProfilerImpl>);\n+\n+struct ProfilerImpl {\n+    label: Label,\n     detail: Option<String>,\n }\n \n impl Profiler {\n     pub fn detail(mut self, detail: impl FnOnce() -> String) -> Profiler {\n-        if self.label.is_some() {\n-            self.detail = Some(detail())\n+        if let Some(profiler) = &mut self.0 {\n+            profiler.detail = Some(detail())\n         }\n         self\n     }\n }\n \n-impl Drop for Profiler {\n+impl Drop for ProfilerImpl {\n     fn drop(&mut self) {\n-        match self {\n-            Profiler { label: Some(label), detail } => {\n-                PROFILE_STACK.with(|stack| {\n-                    stack.borrow_mut().pop(label, detail.take());\n-                });\n-            }\n-            Profiler { label: None, .. } => (),\n-        }\n+        PROFILE_STACK.with(|it| it.borrow_mut().pop(self.label, self.detail.take()));\n     }\n }\n \n@@ -179,21 +179,18 @@ impl ProfileStack {\n     pub fn pop(&mut self, label: Label, detail: Option<String>) {\n         let start = self.starts.pop().unwrap();\n         let duration = start.elapsed();\n-        let level = self.starts.len();\n         self.messages.finish(Message { duration, label, detail });\n-        if level == 0 {\n+        if self.starts.is_empty() {\n             let longer_than = self.filter.longer_than;\n             // Convert to millis for comparison to avoid problems with rounding\n             // (otherwise we could print `0ms` despite user's `>0` filter when\n             // `duration` is just a few nanos).\n             if duration.as_millis() > longer_than.as_millis() {\n-                let stderr = stderr();\n                 if let Some(root) = self.messages.root() {\n-                    print(&self.messages, root, 0, longer_than, &mut stderr.lock());\n+                    print(&self.messages, root, 0, longer_than, &mut stderr().lock());\n                 }\n             }\n             self.messages.clear();\n-            assert!(self.starts.is_empty())\n         }\n     }\n }"}]}