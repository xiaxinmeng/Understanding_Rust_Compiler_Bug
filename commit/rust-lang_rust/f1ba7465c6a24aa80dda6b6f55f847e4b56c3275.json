{"sha": "f1ba7465c6a24aa80dda6b6f55f847e4b56c3275", "node_id": "C_kwDOAAsO6NoAKGYxYmE3NDY1YzZhMjRhYTgwZGRhNmI2ZjU1Zjg0N2U0YjU2YzMyNzU", "commit": {"author": {"name": "Ole Strohm", "email": "strohm99@gmail.com", "date": "2022-02-23T18:08:18Z"}, "committer": {"name": "Ole Strohm", "email": "strohm99@gmail.com", "date": "2022-02-23T18:08:18Z"}, "message": "Ignore doc(hidden) for crate-local enums", "tree": {"sha": "8055318207ff1deb19fe556d603c5a5a456d487c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8055318207ff1deb19fe556d603c5a5a456d487c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ba7465c6a24aa80dda6b6f55f847e4b56c3275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ba7465c6a24aa80dda6b6f55f847e4b56c3275", "html_url": "https://github.com/rust-lang/rust/commit/f1ba7465c6a24aa80dda6b6f55f847e4b56c3275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ba7465c6a24aa80dda6b6f55f847e4b56c3275/comments", "author": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cdbfa5b7021a3b06bf7b1a887221ae3645aea57", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cdbfa5b7021a3b06bf7b1a887221ae3645aea57", "html_url": "https://github.com/rust-lang/rust/commit/5cdbfa5b7021a3b06bf7b1a887221ae3645aea57"}], "stats": {"total": 315, "additions": 176, "deletions": 139}, "files": [{"sha": "ec8fbb49745147cb6dc9a5e22f93f4ea7a4e71e7", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 176, "deletions": 139, "changes": 315, "blob_url": "https://github.com/rust-lang/rust/blob/f1ba7465c6a24aa80dda6b6f55f847e4b56c3275/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ba7465c6a24aa80dda6b6f55f847e4b56c3275/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=f1ba7465c6a24aa80dda6b6f55f847e4b56c3275", "patch": "@@ -1,7 +1,7 @@\n use std::iter::{self, Peekable};\n \n use either::Either;\n-use hir::{Adt, HasAttrs, HasSource, ModuleDef, Semantics};\n+use hir::{Adt, Crate, HasAttrs, HasSource, ModuleDef, Semantics};\n use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n@@ -74,7 +74,6 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         .collect();\n \n     let module = ctx.sema.scope(expr.syntax()).module()?;\n-\n     let (mut missing_pats, is_non_exhaustive): (\n         Peekable<Box<dyn Iterator<Item = (ast::Pat, bool)>>>,\n         bool,\n@@ -86,7 +85,10 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         let missing_pats = variants\n             .into_iter()\n             .filter_map(|variant| {\n-                Some((build_pat(ctx.db(), module, variant)?, variant.has_doc_hidden(ctx.db())))\n+                Some((\n+                    build_pat(ctx.db(), module, variant)?,\n+                    variant.should_be_hidden(ctx.db(), module.krate()),\n+                ))\n             })\n             .filter(|(variant_pat, _)| is_variant_missing(&top_lvl_pats, variant_pat));\n \n@@ -127,7 +129,9 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n             .multi_cartesian_product()\n             .inspect(|_| cov_mark::hit!(add_missing_match_arms_lazy_computation))\n             .map(|variants| {\n-                let is_hidden = variants.iter().any(|variant| variant.has_doc_hidden(ctx.db()));\n+                let is_hidden = variants\n+                    .iter()\n+                    .any(|variant| variant.should_be_hidden(ctx.db(), module.krate()));\n                 let patterns =\n                     variants.into_iter().filter_map(|variant| build_pat(ctx.db(), module, variant));\n \n@@ -282,9 +286,11 @@ enum ExtendedVariant {\n }\n \n impl ExtendedVariant {\n-    fn has_doc_hidden(self, db: &RootDatabase) -> bool {\n+    fn should_be_hidden(self, db: &RootDatabase, krate: Crate) -> bool {\n         match self {\n-            ExtendedVariant::Variant(var) => var.attrs(db).has_doc_hidden(),\n+            ExtendedVariant::Variant(var) => {\n+                var.attrs(db).has_doc_hidden() && var.module(db).krate() != krate\n+            }\n             _ => false,\n         }\n     }\n@@ -1337,29 +1343,22 @@ fn foo(t: bool) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-enum E {\n-    A,\n-    #[doc(hidden)]\n-    C,\n-}\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n     }\n-}\"#,\n-            r#\"\n-enum E {\n-    A,\n-    #[doc(hidden)]\n-    C,\n }\n-\n-fn foo(t: E) {\n+//- /e.rs crate:e\n+pub enum E { A, #[doc(hidden)] B, }\n+\"#,\n+            r#\"\n+fn foo(t: ::e::E) {\n     match t {\n-        $0E::A => todo!(),\n+        $0e::E::A => todo!(),\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1369,30 +1368,23 @@ fn foo(t: E) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-enum E {\n-    A,\n-    #[doc(hidden)]\n-    C,\n-}\n-\n-fn foo(t: (bool, E)) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: (bool, ::e::E)) {\n     match $0t {\n     }\n-}\"#,\n-            r#\"\n-enum E {\n-    A,\n-    #[doc(hidden)]\n-    C,\n }\n-\n-fn foo(t: (bool, E)) {\n+//- /e.rs crate:e\n+pub enum E { A, #[doc(hidden)] B, }\n+\"#,\n+            r#\"\n+fn foo(t: (bool, ::e::E)) {\n     match t {\n-        $0(true, E::A) => todo!(),\n-        (false, E::A) => todo!(),\n+        $0(true, e::E::A) => todo!(),\n+        (false, e::E::A) => todo!(),\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1402,26 +1394,21 @@ fn foo(t: (bool, E)) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-enum E {\n-    #[doc(hidden)]\n-    A,\n-}\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n     }\n-}\"#,\n-            r#\"\n-enum E {\n-    #[doc(hidden)]\n-    A,\n }\n-\n-fn foo(t: E) {\n+//- /e.rs crate:e\n+pub enum E { #[doc(hidden)] A, }\n+\"#,\n+            r#\"\n+fn foo(t: ::e::E) {\n     match t {\n         ${0:_} => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1430,16 +1417,15 @@ fn foo(t: E) {\n         check_assist_not_applicable(\n             add_missing_match_arms,\n             r#\"\n-enum E {\n-    #[doc(hidden)]\n-    A,\n-}\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n-        E::A => todo!(),\n+        e::E::A => todo!(),\n     }\n-}\"#,\n+}\n+//- /e.rs crate:e\n+pub enum E { #[doc(hidden)] A, }\n+\"#,\n         );\n     }\n \n@@ -1449,21 +1435,22 @@ fn foo(t: E) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-enum E { #[doc(hidden)] A, }\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+//- /e.rs crate:e\n+pub enum E { #[doc(hidden)] A, }\n+\"#,\n             r#\"\n-enum E { #[doc(hidden)] A, }\n-\n-fn foo(t: E) {\n+fn foo(t: ::e::E) {\n     match t {\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1473,24 +1460,24 @@ fn foo(t: E) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-#[non_exhaustive]\n-enum E { A, }\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n-        E::A => todo!(),\n+        e::E::A => todo!(),\n     }\n-}\"#,\n-            r#\"\n+}\n+//- /e.rs crate:e\n #[non_exhaustive]\n-enum E { A, }\n-\n-fn foo(t: E) {\n+pub enum E { A, }\n+\"#,\n+            r#\"\n+fn foo(t: ::e::E) {\n     match t {\n-        E::A => todo!(),\n+        e::E::A => todo!(),\n         ${0:_} => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1500,23 +1487,23 @@ fn foo(t: E) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-#[non_exhaustive]\n-enum E { A, }\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n     }\n-}\"#,\n-            r#\"\n+}\n+//- /e.rs crate:e\n #[non_exhaustive]\n-enum E { A, }\n-\n-fn foo(t: E) {\n+pub enum E { A, }\n+\"#,\n+            r#\"\n+fn foo(t: ::e::E) {\n     match t {\n-        $0E::A => todo!(),\n+        $0e::E::A => todo!(),\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1526,23 +1513,22 @@ fn foo(t: E) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-#[non_exhaustive]\n-enum E { A, #[doc(hidden)] B }\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n     }\n-}\"#,\n-            r#\"\n+}\n+//- /e.rs crate:e\n #[non_exhaustive]\n-enum E { A, #[doc(hidden)] B }\n-\n-fn foo(t: E) {\n+pub enum E { A, #[doc(hidden)] B }\"#,\n+            r#\"\n+fn foo(t: ::e::E) {\n     match t {\n-        $0E::A => todo!(),\n+        $0e::E::A => todo!(),\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1552,48 +1538,48 @@ fn foo(t: E) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-#[non_exhaustive]\n-enum E { #[doc(hidden)] A }\n-\n-fn foo(t: E) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n     match $0t {\n-        E::A => todo!(),\n+        e::E::A => todo!(),\n     }\n-}\"#,\n-            r#\"\n+}\n+//- /e.rs crate:e\n #[non_exhaustive]\n-enum E { #[doc(hidden)] A }\n-\n-fn foo(t: E) {\n+pub enum E { A, #[doc(hidden)] B }\"#,\n+            r#\"\n+fn foo(t: ::e::E) {\n     match t {\n-        E::A => todo!(),\n+        e::E::A => todo!(),\n         ${0:_} => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn fill_wildcard_with_partial_wildcard() {\n+        cov_mark::check!(added_wildcard_pattern);\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-enum E { #[doc(hidden)] A, }\n-\n-fn foo(t: E, b: bool) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E, b: bool) {\n     match $0t {\n         _ if b => todo!(),\n     }\n-}\"#,\n+}\n+//- /e.rs crate:e\n+pub enum E { #[doc(hidden)] A, }\"#,\n             r#\"\n-enum E { #[doc(hidden)] A, }\n-\n-fn foo(t: E, b: bool) {\n+fn foo(t: ::e::E, b: bool) {\n     match t {\n         _ if b => todo!(),\n         ${0:_} => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n@@ -1602,44 +1588,95 @@ fn foo(t: E, b: bool) {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n-enum E { #[doc(hidden)] A, }\n-\n-fn foo(t: E, b: bool) {\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E, b: bool) {\n     match $0t {\n         _ if b => todo!(),\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+//- /e.rs crate:e\n+pub enum E { #[doc(hidden)] A, }\"#,\n             r#\"\n-enum E { #[doc(hidden)] A, }\n-\n-fn foo(t: E, b: bool) {\n+fn foo(t: ::e::E, b: bool) {\n     match t {\n         _ if b => todo!(),\n         _ => todo!(),\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn non_exhaustive_doc_hidden_tuple_fills_wildcard() {\n+        cov_mark::check!(added_wildcard_pattern);\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n+//- /main.rs crate:main deps:e\n+fn foo(t: ::e::E) {\n+    match $0t {\n+    }\n+}\n+//- /e.rs crate:e\n+#[non_exhaustive]\n+pub enum E { A, #[doc(hidden)] B, }\"#,\n+            r#\"\n+fn foo(t: ::e::E) {\n+    match t {\n+        $0e::E::A => todo!(),\n+        _ => todo!(),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignores_doc_hidden_for_crate_local_enums() {\n+        check_assist(\n+            add_missing_match_arms,\n+            r#\"\n+enum E { A, #[doc(hidden)] B, }\n+\n+fn foo(t: E) {\n+    match $0t {\n+    }\n+}\"#,\n+            r#\"\n enum E { A, #[doc(hidden)] B, }\n \n-fn foo(t: E, b: bool) {\n-    match $0(t, b) {\n+fn foo(t: E) {\n+    match t {\n+        $0E::A => todo!(),\n+        E::B => todo!(),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignores_doc_hidden_for_crate_local_enums_but_not_non_exhaustive() {\n+        cov_mark::check!(added_wildcard_pattern);\n+        check_assist(\n+            add_missing_match_arms,\n+            r#\"\n+#[non_exhaustive]\n+enum E { A, #[doc(hidden)] B, }\n+\n+fn foo(t: E) {\n+    match $0t {\n     }\n }\"#,\n             r#\"\n+#[non_exhaustive]\n enum E { A, #[doc(hidden)] B, }\n \n-fn foo(t: E, b: bool) {\n-    match (t, b) {\n-        $0(E::A, true) => todo!(),\n-        (E::A, false) => todo!(),\n+fn foo(t: E) {\n+    match t {\n+        $0E::A => todo!(),\n+        E::B => todo!(),\n         _ => todo!(),\n     }\n }\"#,"}]}