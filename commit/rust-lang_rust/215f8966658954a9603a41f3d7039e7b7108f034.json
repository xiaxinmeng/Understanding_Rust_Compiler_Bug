{"sha": "215f8966658954a9603a41f3d7039e7b7108f034", "node_id": "C_kwDOAAsO6NoAKDIxNWY4OTY2NjU4OTU0YTk2MDNhNDFmM2Q3MDM5ZTdiNzEwOGYwMzQ", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-07T23:44:14Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:09Z"}, "message": "compiles, but doesn't work yet", "tree": {"sha": "2c410c2f60976891649348ce32f0ef4789faf9d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c410c2f60976891649348ce32f0ef4789faf9d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215f8966658954a9603a41f3d7039e7b7108f034", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0pkACgkQeO9fUvOM\nSb3VjQv/QNBw2rzP+mzTOnkcsUA8RIx1Fvn/pIkDvCn26EcnrARwkoNFZU15ZMJr\nWaQnBuWQgE/dhu+NKkYSUjyCV0KDH8rkidOpKbJt15UCKKNX2ESy6KWkeBH1id5i\n0tbW4sw+KfRfnSaI2hT6Yv2VXkw/r236tyz6I3gq2UJ2J7N0FX6TH2k4CEsTkQV5\nvdZpXs/jNQl0DXRyfreKOHEehrEx5zhaO7zeJ2VZgB38Y6G+P5oRYupYCHfTVR3L\nZjJhiEiZ4lsmBqYUTsJj0gIZCS+semdphlfIUZpxcMPrFPn+lHjnL69qcY40Y812\n3y6AL+vBw5WVtf8gqbDr1+3AV+OHhE5RDEN59h1X/worSMcFeOufZJK1okbvYGQo\nhDoZr43zgWNdDV/W53SIC/8AD5TxNYpXrOsRzciLpkJtKgsADy4s7syT9H2rnxGe\nkR/E4EEI0vMK0rvPymX9AevtX7+W+2j0iNZB/bA0TSwmhIu03XnvPMbj4VS0drxM\n97JO1mFM\n=3rEJ\n-----END PGP SIGNATURE-----", "payload": "tree 2c410c2f60976891649348ce32f0ef4789faf9d2\nparent b4c31481a554d0132003228ba319bd9476fe85ae\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641599054 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123929 +0000\n\ncompiles, but doesn't work yet\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215f8966658954a9603a41f3d7039e7b7108f034", "html_url": "https://github.com/rust-lang/rust/commit/215f8966658954a9603a41f3d7039e7b7108f034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215f8966658954a9603a41f3d7039e7b7108f034/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c31481a554d0132003228ba319bd9476fe85ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c31481a554d0132003228ba319bd9476fe85ae", "html_url": "https://github.com/rust-lang/rust/commit/b4c31481a554d0132003228ba319bd9476fe85ae"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "d7a084b49991d83a7e65557df2da60f47971ef49", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/215f8966658954a9603a41f3d7039e7b7108f034/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f8966658954a9603a41f3d7039e7b7108f034/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=215f8966658954a9603a41f3d7039e7b7108f034", "patch": "@@ -1,5 +1,7 @@\n use std::iter::successors;\n \n+use hir::{TypeInfo, HirDisplay};\n+use itertools::Itertools;\n use syntax::{\n     algo::neighbor,\n     ast::{self, AstNode},\n@@ -40,13 +42,33 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     }\n     let current_expr = current_arm.expr()?;\n     let current_text_range = current_arm.syntax().text_range();\n+    let current_arm_types = get_arm_types(&ctx, &current_arm);\n \n     // We check if the following match arms match this one. We could, but don't,\n     // compare to the previous match arm as well.\n     let arms_to_merge = successors(Some(current_arm), |it| neighbor(it, Direction::Next))\n         .take_while(|arm| match arm.expr() {\n-            Some(expr) if arm.guard().is_none() => {\n-                expr.syntax().text() == current_expr.syntax().text()\n+            Some(expr) if arm.guard().is_none() && arm.pat().is_some() => {\n+                let same_text = expr.syntax().text() == current_expr.syntax().text();\n+                if !same_text {\n+                    return false;\n+                }\n+\n+                let arm_types = get_arm_types(&ctx, &arm);\n+                for i in 0..arm_types.len() {\n+                    let other_arm_type = &arm_types[i].as_ref();\n+                    let current_arm_type = current_arm_types[i].as_ref();\n+                    if other_arm_type.is_some() && current_arm_type.is_some() {\n+                        let other_arm_type = other_arm_type.unwrap().original.clone().as_adt();\n+                        let current_arm_type = current_arm_type.unwrap().original.clone().as_adt();\n+                        println!(\"Same types!\");\n+                        println!(\"{:?}\", other_arm_type);\n+                        println!(\"{:?}\", current_arm_type);\n+                        return other_arm_type == current_arm_type;\n+                    }\n+                }\n+\n+                true\n             }\n             _ => false,\n         })\n@@ -88,6 +110,20 @@ fn contains_placeholder(a: &ast::MatchArm) -> bool {\n     matches!(a.pat(), Some(ast::Pat::WildcardPat(..)))\n }\n \n+fn get_arm_types(ctx: &AssistContext, arm: &ast::MatchArm) -> Vec<Option<TypeInfo>> {\n+    match arm.pat() {\n+        Some(ast::Pat::TupleStructPat(tp)) => tp\n+            .fields()\n+            .into_iter()\n+            .map(|field| {\n+                let pat_type = ctx.sema.type_of_pat(&field);\n+                pat_type\n+            })\n+            .collect_vec(),\n+        _ => Vec::new(),\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -241,7 +277,29 @@ fn main() {\n         X::C => { 2i32 }\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_different_type() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+fn func() {\n+    match Result::<i32, f32>::Ok(0) {\n+        Ok(x) => $0x.to_string(),\n+        Err(x) => x.to_string()\n+    };\n+}\n \"#,\n         );\n     }\n }\n+\n+// fn func() {\n+//     match Result::<i32, f32>::Ok(0) {\n+//         Ok(x) => x.to_string(),\n+//         Err(x) => x.to_string()\n+//     };\n+// }"}]}