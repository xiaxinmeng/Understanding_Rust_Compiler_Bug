{"sha": "7d475a28dfa5399600c9b4121193fa57786ab88b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDc1YTI4ZGZhNTM5OTYwMGM5YjQxMjExOTNmYTU3Nzg2YWI4OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-29T06:24:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-29T06:24:20Z"}, "message": "Auto merge of #45295 - Technius:docs/process, r=steveklabnik\n\nImprove std::process module docs\n\nAddresses part of #29370\n\nI've changed the first `cat` example to a \"Hello World\" example involving echo, and I've also added another example showing how to pipe output. I'm still working on the module-level description.\n\nFor now, I'd like feedback on the examples.\n\nr? @steveklabnik", "tree": {"sha": "7efc1fb0b1b612037830ec709cfb06828782f875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7efc1fb0b1b612037830ec709cfb06828782f875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d475a28dfa5399600c9b4121193fa57786ab88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d475a28dfa5399600c9b4121193fa57786ab88b", "html_url": "https://github.com/rust-lang/rust/commit/7d475a28dfa5399600c9b4121193fa57786ab88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d475a28dfa5399600c9b4121193fa57786ab88b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fdcf52df48c6a16dab57337f311275f0d8995da", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdcf52df48c6a16dab57337f311275f0d8995da", "html_url": "https://github.com/rust-lang/rust/commit/1fdcf52df48c6a16dab57337f311275f0d8995da"}, {"sha": "84ab6aec4380b0d1de2a46a9f57e172cc709fcb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ab6aec4380b0d1de2a46a9f57e172cc709fcb8", "html_url": "https://github.com/rust-lang/rust/commit/84ab6aec4380b0d1de2a46a9f57e172cc709fcb8"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "35c33f4025380a8495e6883bb156996e9d461b9b", "filename": "src/libstd/process.rs", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7d475a28dfa5399600c9b4121193fa57786ab88b/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d475a28dfa5399600c9b4121193fa57786ab88b/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=7d475a28dfa5399600c9b4121193fa57786ab88b", "patch": "@@ -10,25 +10,66 @@\n \n //! A module for working with processes.\n //!\n-//! # Examples\n+//! This module is mostly concerned with spawning and interacting with child\n+//! processes, but it also provides [`abort`] and [`exit`] for terminating the\n+//! current process.\n //!\n-//! Basic usage where we try to execute the `cat` shell command:\n+//! # Spawning a process\n //!\n-//! ```should_panic\n+//! The [`Command`] struct is used to configure and spawn processes:\n+//!\n+//! ```\n //! use std::process::Command;\n //!\n-//! let mut child = Command::new(\"/bin/cat\")\n-//!                         .arg(\"file.txt\")\n-//!                         .spawn()\n-//!                         .expect(\"failed to execute child\");\n+//! let output = Command::new(\"echo\")\n+//!                      .arg(\"Hello world\")\n+//!                      .output()\n+//!                      .expect(\"Failed to execute command\");\n+//!\n+//! assert_eq!(b\"Hello world\\n\", output.stdout.as_slice());\n+//! ```\n+//!\n+//! Several methods on [`Command`], such as [`spawn`] or [`output`], can be used\n+//! to spawn a process. In particular, [`output`] spawns the child process and\n+//! waits until the process terminates, while [`spawn`] will return a [`Child`]\n+//! that represents the spawned child process.\n+//!\n+//! # Handling I/O\n+//!\n+//! The [`stdout`], [`stdin`], and [`stderr`] of a child process can be\n+//! configured by passing an [`Stdio`] to the corresponding method on\n+//! [`Command`]. Once spawned, they can be accessed from the [`Child`]. For\n+//! example, piping output from one command into another command can be done\n+//! like so:\n+//!\n+//! ```no_run\n+//! use std::process::{Command, Stdio};\n //!\n-//! let ecode = child.wait()\n-//!                  .expect(\"failed to wait on child\");\n+//! // stdout must be configured with `Stdio::piped` in order to use\n+//! // `echo_child.stdout`\n+//! let echo_child = Command::new(\"echo\")\n+//!     .arg(\"Oh no, a tpyo!\")\n+//!     .stdout(Stdio::piped())\n+//!     .spawn()\n+//!     .expect(\"Failed to start echo process\");\n+//!\n+//! // Note that `echo_child` is moved here, but we won't be needing\n+//! // `echo_child` anymore\n+//! let echo_out = echo_child.stdout.expect(\"Failed to open echo stdout\");\n+//!\n+//! let mut sed_child = Command::new(\"sed\")\n+//!     .arg(\"s/tpyo/typo/\")\n+//!     .stdin(Stdio::from(echo_out))\n+//!     .stdout(Stdio::piped())\n+//!     .spawn()\n+//!     .expect(\"Failed to start sed process\");\n //!\n-//! assert!(ecode.success());\n+//! let output = sed_child.wait_with_output().expect(\"Failed to wait on sed\");\n+//! assert_eq!(b\"Oh no, a typo!\\n\", output.stdout.as_slice());\n //! ```\n //!\n-//! Calling a command with input and reading its output:\n+//! Note that [`ChildStderr`] and [`ChildStdout`] implement [`Write`] and\n+//! [`ChildStdin`] implements [`Read`]:\n //!\n //! ```no_run\n //! use std::process::{Command, Stdio};\n@@ -52,6 +93,26 @@\n //!\n //! assert_eq!(b\"test\", output.stdout.as_slice());\n //! ```\n+//!\n+//! [`abort`]: fn.abort.html\n+//! [`exit`]: fn.exit.html\n+//!\n+//! [`Command`]: struct.Command.html\n+//! [`spawn`]: struct.Command.html#method.spawn\n+//! [`output`]: struct.Command.html#method.output\n+//!\n+//! [`Child`]: struct.Child.html\n+//! [`ChildStdin`]: struct.ChildStdin.html\n+//! [`ChildStdout`]: struct.ChildStdout.html\n+//! [`ChildStderr`]: struct.ChildStderr.html\n+//! [`Stdio`]: struct.Stdio.html\n+//!\n+//! [`stdout`]: struct.Command.html#method.stdout\n+//! [`stdin`]: struct.Command.html#method.stdin\n+//! [`stderr`]: struct.Command.html#method.stderr\n+//!\n+//! [`Write`]: ../io/trait.Write.html\n+//! [`Read`]: ../io/trait.Read.html\n \n #![stable(feature = \"process\", since = \"1.0.0\")]\n "}]}