{"sha": "c67f729205f4472cb688bf947041ccc98568e5d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2N2Y3MjkyMDVmNDQ3MmNiNjg4YmY5NDcwNDFjY2M5ODU2OGU1ZDA=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-01T13:23:12Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-01T13:27:12Z"}, "message": "Refactoring", "tree": {"sha": "97c21103167be7e622db3988703527d46f7c0bfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c21103167be7e622db3988703527d46f7c0bfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c67f729205f4472cb688bf947041ccc98568e5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c67f729205f4472cb688bf947041ccc98568e5d0", "html_url": "https://github.com/rust-lang/rust/commit/c67f729205f4472cb688bf947041ccc98568e5d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c67f729205f4472cb688bf947041ccc98568e5d0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ab727e6fffc0e236932e4c55cd20f8f09f687b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab727e6fffc0e236932e4c55cd20f8f09f687b0", "html_url": "https://github.com/rust-lang/rust/commit/6ab727e6fffc0e236932e4c55cd20f8f09f687b0"}], "stats": {"total": 60, "additions": 23, "deletions": 37}, "files": [{"sha": "5fb0cd8e2cb91e4f944ca4219b4086f69c1f0087", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 37, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c67f729205f4472cb688bf947041ccc98568e5d0/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67f729205f4472cb688bf947041ccc98568e5d0/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c67f729205f4472cb688bf947041ccc98568e5d0", "patch": "@@ -26,8 +26,9 @@ use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, L\n             ListItem, ListTactic, Separator, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use types::join_bounds;\n-use utils::{colon_spaces, contains_skip, end_typaram, format_defaultness, format_mutability,\n-            format_unsafety, format_visibility, last_line_width, mk_sp, semicolon_for_expr,\n+use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_abi,\n+            format_constness, format_defaultness, format_mutability, format_unsafety,\n+            format_visibility, last_line_used_width, last_line_width, mk_sp, semicolon_for_expr,\n             stmt_expr, trim_newlines, trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -835,11 +836,7 @@ fn rewrite_trait_ref(\n     result_len: usize,\n ) -> Option<String> {\n     // 1 = space between generics and trait_ref\n-    let used_space = 1 + polarity_str.len() + if generics_str.contains('\\n') {\n-        last_line_width(&generics_str)\n-    } else {\n-        result_len + generics_str.len()\n-    };\n+    let used_space = 1 + polarity_str.len() + last_line_used_width(generics_str, result_len);\n     let shape = Shape::indented(offset + used_space, context.config);\n     if let Some(trait_ref_str) = trait_ref.rewrite(context, shape) {\n         if !(retry && trait_ref_str.contains('\\n')) {\n@@ -1229,11 +1226,7 @@ fn format_tuple_struct(\n \n     if fields.is_empty() {\n         // 3 = `();`\n-        let used_width = if result.contains('\\n') {\n-            last_line_width(&result) + 3\n-        } else {\n-            offset.width() + result.len() + 3\n-        };\n+        let used_width = last_line_used_width(&result, offset.width()) + 3;\n         if used_width > context.config.max_width() {\n             result.push('\\n');\n             result.push_str(&offset\n@@ -1790,24 +1783,13 @@ fn rewrite_fn_base(\n     let where_clause = &generics.where_clause;\n \n     let mut result = String::with_capacity(1024);\n-    // Vis unsafety abi.\n+    // Vis defaultness constness unsafety abi.\n     result.push_str(&*format_visibility(vis));\n-\n-    if let ast::Defaultness::Default = defaultness {\n-        result.push_str(\"default \");\n-    }\n-\n-    if let ast::Constness::Const = constness {\n-        result.push_str(\"const \");\n-    }\n-\n-    result.push_str(::utils::format_unsafety(unsafety));\n-\n+    result.push_str(format_defaultness(defaultness));\n+    result.push_str(format_constness(constness));\n+    result.push_str(format_unsafety(unsafety));\n     if abi != abi::Abi::Rust {\n-        result.push_str(&::utils::format_abi(\n-            abi,\n-            context.config.force_explicit_abi(),\n-        ));\n+        result.push_str(&format_abi(abi, context.config.force_explicit_abi()));\n     }\n \n     // fn foo\n@@ -1822,9 +1804,17 @@ fn rewrite_fn_base(\n         // 2 = `()`\n         2\n     };\n-    let shape = try_opt!(\n-        Shape::indented(indent + last_line_width(&result), context.config).sub_width(overhead)\n-    );\n+    let used_width = last_line_used_width(&result, indent.width());\n+    let one_line_budget = context\n+        .config\n+        .max_width()\n+        .checked_sub(used_width + overhead)\n+        .unwrap_or(0);\n+    let shape = Shape {\n+        width: one_line_budget,\n+        indent: indent,\n+        offset: used_width,\n+    };\n     let g_span = mk_sp(span.lo, fd.output.span().lo);\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n     result.push_str(&generics_str);\n@@ -2764,7 +2754,7 @@ fn format_generics(\n         let budget = context\n             .config\n             .max_width()\n-            .checked_sub(last_line_width(&result))\n+            .checked_sub(last_line_used_width(&result, offset.width()))\n             .unwrap_or(0);\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n@@ -2786,11 +2776,7 @@ fn format_generics(\n         force_same_line_brace || trimmed_last_line_width(&result) == 1 ||\n             brace_style != BraceStyle::AlwaysNextLine\n     };\n-    let total_used_width = if result.contains('\\n') {\n-        last_line_width(&result)\n-    } else {\n-        used_width + result.len()\n-    };\n+    let total_used_width = last_line_used_width(&result, used_width);\n     let remaining_budget = context\n         .config\n         .max_width()"}]}