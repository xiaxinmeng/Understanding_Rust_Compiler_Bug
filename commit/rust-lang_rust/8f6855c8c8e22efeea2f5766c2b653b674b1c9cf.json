{"sha": "8f6855c8c8e22efeea2f5766c2b653b674b1c9cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNjg1NWM4YzhlMjJlZmVlYTJmNTc2NmMyYjY1M2I2NzRiMWM5Y2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-07T02:21:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:34Z"}, "message": "rustdoc: Render methods/impls for bare traits\n\nThis renders a \"Methods\" and \"Trait Implementations\" section for each item\nimplemented for a bare trait itself.\n\nCloses #19055", "tree": {"sha": "ee3beb5349565755b09eb0a5f92da1a16b90e0da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee3beb5349565755b09eb0a5f92da1a16b90e0da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf", "html_url": "https://github.com/rust-lang/rust/commit/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba402312fed8134a9919bbb79bcd9978b92e4dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba402312fed8134a9919bbb79bcd9978b92e4dee", "html_url": "https://github.com/rust-lang/rust/commit/ba402312fed8134a9919bbb79bcd9978b92e4dee"}], "stats": {"total": 97, "additions": 65, "deletions": 32}, "files": [{"sha": "85f538e7dc34186217af0b85fff0e28eb66b33ae", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8f6855c8c8e22efeea2f5766c2b653b674b1c9cf", "patch": "@@ -920,9 +920,10 @@ impl DocFolder for Cache {\n                         let path = match self.paths.get(&did) {\n                             Some(&(_, ItemType::Trait)) =>\n                                 Some(&self.stack[..self.stack.len() - 1]),\n-                            // The current stack not necessarily has correlation for\n-                            // where the type was defined. On the other hand,\n-                            // `paths` always has the right information if present.\n+                            // The current stack not necessarily has correlation\n+                            // for where the type was defined. On the other\n+                            // hand, `paths` always has the right\n+                            // information if present.\n                             Some(&(ref fqp, ItemType::Struct)) |\n                             Some(&(ref fqp, ItemType::Enum)) =>\n                                 Some(&fqp[..fqp.len() - 1]),\n@@ -1861,6 +1862,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         try!(write!(w, \"</div>\"));\n     }\n \n+    // If there are methods directly on this trait object, render them here.\n+    try!(render_methods(w, it));\n+\n     let cache = cache();\n     try!(write!(w, \"\n         <h2 id='implementors'>Implementors</h2>\n@@ -2179,37 +2183,36 @@ enum MethodLink {\n }\n \n fn render_methods(w: &mut fmt::Formatter, it: &clean::Item) -> fmt::Result {\n-    match cache().impls.get(&it.def_id) {\n-        Some(v) => {\n-            let (non_trait, traits): (Vec<_>, _) = v.iter().cloned()\n-                .partition(|i| i.impl_.trait_.is_none());\n-            if non_trait.len() > 0 {\n-                try!(write!(w, \"<h2 id='methods'>Methods</h2>\"));\n-                for i in &non_trait {\n-                    try!(render_impl(w, i, MethodLink::Anchor));\n-                }\n-            }\n-            if traits.len() > 0 {\n-                try!(write!(w, \"<h2 id='implementations'>Trait \\\n-                                  Implementations</h2>\"));\n-                let (derived, manual): (Vec<_>, _) = traits.into_iter()\n-                    .partition(|i| i.impl_.derived);\n-                for i in &manual {\n-                    let did = i.trait_did().unwrap();\n-                    try!(render_impl(w, i, MethodLink::GotoSource(did)));\n-                }\n-                if derived.len() > 0 {\n-                    try!(write!(w, \"<h3 id='derived_implementations'>\\\n-                        Derived Implementations \\\n-                    </h3>\"));\n-                    for i in &derived {\n-                        let did = i.trait_did().unwrap();\n-                        try!(render_impl(w, i, MethodLink::GotoSource(did)));\n-                    }\n-                }\n+    let v = match cache().impls.get(&it.def_id) {\n+        Some(v) => v.clone(),\n+        None => return Ok(()),\n+    };\n+    let (non_trait, traits): (Vec<_>, _) = v.into_iter()\n+        .partition(|i| i.impl_.trait_.is_none());\n+    if non_trait.len() > 0 {\n+        try!(write!(w, \"<h2 id='methods'>Methods</h2>\"));\n+        for i in &non_trait {\n+            try!(render_impl(w, i, MethodLink::Anchor));\n+        }\n+    }\n+    if traits.len() > 0 {\n+        try!(write!(w, \"<h2 id='implementations'>Trait \\\n+                          Implementations</h2>\"));\n+        let (derived, manual): (Vec<_>, _) = traits.into_iter()\n+            .partition(|i| i.impl_.derived);\n+        for i in &manual {\n+            let did = i.trait_did().unwrap();\n+            try!(render_impl(w, i, MethodLink::GotoSource(did)));\n+        }\n+        if derived.len() > 0 {\n+            try!(write!(w, \"<h3 id='derived_implementations'>\\\n+                Derived Implementations \\\n+            </h3>\"));\n+            for i in &derived {\n+                let did = i.trait_did().unwrap();\n+                try!(render_impl(w, i, MethodLink::GotoSource(did)));\n             }\n         }\n-        None => {}\n     }\n     Ok(())\n }"}, {"sha": "609ae22be104b4eceacdaa3de816f35d730895af", "filename": "src/test/rustdoc/issue-19055.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6855c8c8e22efeea2f5766c2b653b674b1c9cf/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19055.rs?ref=8f6855c8c8e22efeea2f5766c2b653b674b1c9cf", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has issue_19055/trait.Any.html\n+pub trait Any {}\n+\n+impl<'any> Any + 'any {\n+    // @has - '//*[@id=\"method.is\"]' 'fn is'\n+    pub fn is<T: 'static>(&self) -> bool { loop {} }\n+\n+    // @has - '//*[@id=\"method.downcast_ref\"]' 'fn downcast_ref'\n+    pub fn downcast_ref<T: 'static>(&self) -> Option<&T> { loop {} }\n+\n+    // @has - '//*[@id=\"method.downcast_mut\"]' 'fn downcast_mut'\n+    pub fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> { loop {} }\n+}\n+\n+pub trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+// @has - '//*[@id=\"method.foo\"]' 'fn foo'\n+impl Foo for Any {}"}]}