{"sha": "3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNWE3Mjc2ZDJjYTRkM2M1MDgxZGI2YjEyMTE0YTkzYWViNWM4MjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-05T23:33:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:20Z"}, "message": "construct pick-constraints and give them to region inference", "tree": {"sha": "f9d0fd5b0bb9755acca165747643e3cbbc76c4b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d0fd5b0bb9755acca165747643e3cbbc76c4b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "html_url": "https://github.com/rust-lang/rust/commit/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9596692a54205059a29677490fce7fd32311df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9596692a54205059a29677490fce7fd32311df6", "html_url": "https://github.com/rust-lang/rust/commit/d9596692a54205059a29677490fce7fd32311df6"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "380bfb52e3ba3aa3375454ac6ef5c89a49747f42", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "patch": "@@ -130,6 +130,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         placeholder_index_to_region: _,\n         mut liveness_constraints,\n         outlives_constraints,\n+        pick_constraints,\n         closure_bounds_mapping,\n         type_tests,\n     } = constraints;\n@@ -151,6 +152,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         universal_region_relations,\n         body,\n         outlives_constraints,\n+        pick_constraints,\n         closure_bounds_mapping,\n         type_tests,\n         liveness_constraints,"}, {"sha": "b594a15b6d8862fb033ce169e78f1d024299b2a2", "filename": "src/librustc_mir/borrow_check/nll/pick_constraints.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fpick_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fpick_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fpick_constraints.rs?ref=3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "patch": "@@ -55,18 +55,20 @@ newtype_index! {\n     }\n }\n \n-impl<'tcx> PickConstraintSet<'tcx, ty::RegionVid> {\n-    crate fn new() -> Self {\n+impl Default for PickConstraintSet<'tcx, ty::RegionVid> {\n+    fn default() -> Self {\n         Self {\n             first_constraints: Default::default(),\n             constraints: Default::default(),\n             option_regions: Default::default(),\n         }\n     }\n+}\n \n+impl<'tcx> PickConstraintSet<'tcx, ty::RegionVid> {\n     crate fn push_constraint(\n         &mut self,\n-        p_c: PickConstraint<'tcx>,\n+        p_c: &PickConstraint<'tcx>,\n         mut to_region_vid: impl FnMut(ty::Region<'tcx>) -> ty::RegionVid,\n     ) {\n         let pick_region_vid: ty::RegionVid = to_region_vid(p_c.pick_region);"}, {"sha": "adee5bda425fed5ca2a1f12f0be7659095debf43", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "patch": "@@ -1,6 +1,7 @@\n use super::universal_regions::UniversalRegions;\n use crate::borrow_check::nll::constraints::graph::NormalConstraintGraph;\n use crate::borrow_check::nll::constraints::{ConstraintSccIndex, OutlivesConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::pick_constraints::PickConstraintSet;\n use crate::borrow_check::nll::region_infer::values::{\n     PlaceholderIndices, RegionElement, ToElementIndex\n };\n@@ -187,6 +188,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n         _body: &Body<'tcx>,\n         outlives_constraints: OutlivesConstraintSet,\n+        pick_constraints: PickConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<\n             Location,\n             FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n@@ -218,6 +220,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let scc_representatives = Self::compute_scc_representatives(&constraint_sccs, &definitions);\n \n+        let _pick_constraints_scc = pick_constraints.into_mapped( // TODO\n+            |r| constraint_sccs.scc(r),\n+        );\n+\n         let mut result = Self {\n             definitions,\n             liveness_constraints,"}, {"sha": "c3bd4f6edf4dc2c682457ff2b7a367b7a2f5b608", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "patch": "@@ -51,7 +51,22 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n     }\n \n     pub(super) fn convert_all(&mut self, query_constraints: &QueryRegionConstraints<'tcx>) {\n-        for query_constraint in &query_constraints.outlives {\n+        let QueryRegionConstraints { outlives, pick_constraints } = query_constraints;\n+\n+        // Annoying: to invoke `self.to_region_vid`, we need access to\n+        // `self.constraints`, but we also want to be mutating\n+        // `self.pick_constraints`. For now, just swap out the value\n+        // we want and replace at the end.\n+        let mut tmp = std::mem::replace(&mut self.constraints.pick_constraints, Default::default());\n+        for pick_constraint in pick_constraints {\n+            tmp.push_constraint(\n+                pick_constraint,\n+                |r| self.to_region_vid(r),\n+            );\n+        }\n+        self.constraints.pick_constraints = tmp;\n+\n+        for query_constraint in outlives {\n             self.convert(query_constraint);\n         }\n     }"}, {"sha": "ea7db3096446c0cc2011112969e596c81e0b4668", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5a7276d2ca4d3c5081db6b12114a93aeb5c822/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3b5a7276d2ca4d3c5081db6b12114a93aeb5c822", "patch": "@@ -5,6 +5,7 @@\n use crate::borrow_check::borrow_set::BorrowSet;\n use crate::borrow_check::location::LocationTable;\n use crate::borrow_check::nll::constraints::{OutlivesConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::pick_constraints::PickConstraintSet;\n use crate::borrow_check::nll::facts::AllFacts;\n use crate::borrow_check::nll::region_infer::values::LivenessValues;\n use crate::borrow_check::nll::region_infer::values::PlaceholderIndex;\n@@ -128,6 +129,7 @@ pub(crate) fn type_check<'tcx>(\n         placeholder_index_to_region: IndexVec::default(),\n         liveness_constraints: LivenessValues::new(elements.clone()),\n         outlives_constraints: OutlivesConstraintSet::default(),\n+        pick_constraints: PickConstraintSet::default(),\n         closure_bounds_mapping: Default::default(),\n         type_tests: Vec::default(),\n     };\n@@ -886,6 +888,8 @@ crate struct MirTypeckRegionConstraints<'tcx> {\n \n     crate outlives_constraints: OutlivesConstraintSet,\n \n+    crate pick_constraints: PickConstraintSet<'tcx, RegionVid>,\n+\n     crate closure_bounds_mapping:\n         FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n "}]}