{"sha": "d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTE1Y2NkOTc2YmM4YTRhNzljOTlmYmY2ODg5MmMyYmJkZmZmZWM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-18T10:49:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-21T12:47:33Z"}, "message": "rustc_typeck: move comment about inference variables to where it makes sense.", "tree": {"sha": "5114b3043d08495ae103a42c5cf8860a61b99170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5114b3043d08495ae103a42c5cf8860a61b99170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec", "html_url": "https://github.com/rust-lang/rust/commit/d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd397b096b360fb46076b757e82e79d6db328de", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd397b096b360fb46076b757e82e79d6db328de", "html_url": "https://github.com/rust-lang/rust/commit/3fd397b096b360fb46076b757e82e79d6db328de"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "a277220b1a20095dafd999a0c02753efddb457db", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=d9a15ccd976bc8a4a79c99fbf68892c2bbdfffec", "patch": "@@ -77,9 +77,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let generator_types =\n             check_fn(self, self.param_env, liberated_sig, decl, expr.hir_id, body, gen).1;\n \n-        // Create type variables (for now) to represent the transformed\n-        // types of upvars. These will be unified during the upvar\n-        // inference phase (`upvar.rs`).\n         let base_substs =\n             InternalSubsts::identity_for_item(self.tcx, self.tcx.closure_base_def_id(expr_def_id));\n         // HACK(eddyb) this hardcodes indices into substs but it should rely on\n@@ -93,6 +90,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             GenericParamDefKind::Type { .. } => if param.index as usize == tupled_upvars_idx {\n                 self.tcx.mk_tup(self.tcx.upvars(expr_def_id).iter().flat_map(|upvars| {\n                     upvars.iter().map(|(&var_hir_id, _)| {\n+                        // Create type variables (for now) to represent the transformed\n+                        // types of upvars. These will be unified during the upvar\n+                        // inference phase (`upvar.rs`).\n                         self.infcx.next_ty_var(TypeVariableOrigin {\n                             // FIXME(eddyb) distinguish upvar inference variables from the rest.\n                             kind: TypeVariableOriginKind::ClosureSynthetic,\n@@ -101,6 +101,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     })\n                 }))\n             } else {\n+                // Create type variables (for now) to represent the various\n+                // pieces of information kept in `{Closure,Generic}Substs`.\n+                // They will either be unified below, or later during the upvar\n+                // inference phase (`upvar.rs`)\n                 self.infcx.next_ty_var(TypeVariableOrigin {\n                     kind: TypeVariableOriginKind::ClosureSynthetic,\n                     span: expr.span,"}]}