{"sha": "04df75a4292a8bbf096fd316d0544a5a95b51e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZGY3NWE0MjkyYThiYmYwOTZmZDMxNmQwNTQ0YTVhOTViNTFlOWI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-18T15:57:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-18T15:57:40Z"}, "message": "Rollup merge of #82236 - matthiaskrgr:useless_conv, r=jyn514\n\navoid converting types into themselves (clippy::useless_conversion)", "tree": {"sha": "bed0af6811f1647f572f413f43e7f3757d2dec4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed0af6811f1647f572f413f43e7f3757d2dec4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04df75a4292a8bbf096fd316d0544a5a95b51e9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLo50CRBK7hj4Ov3rIwAAdHIIABwafQZ0dVDWkN/zbO++U6Rl\nfbZGIUctexgIQLH6/vdDoj44iFTXj8sfNzEFWgK9TJhUsfZ6yMc+3IiZS7yrz0qV\nC9GkrkP6zgmWyPfjdoMHDyerUxSOawpotd/Zvl+qlIoEwSBJF8TYigN/TFzIFeYt\n5UrSNfAfB+AvN9iOhfqookXC0VPslQUXi7eq2xnG0q1XoOCSp76RTIo6C3w/MuG9\nJgWpXjbjdz6zEr0cSwgpWTKR+0h2PcV0poEmfFZMpzO14yBduzwdhKr/4fJbTTmf\nXm9PL4w0tVNd3yOiO9wizh71c5n2khhJ0oOIwFVGSXRVWkzDgeg9WCl/Dyih/Oo=\n=YmJX\n-----END PGP SIGNATURE-----\n", "payload": "tree bed0af6811f1647f572f413f43e7f3757d2dec4e\nparent 01104b5c29fde36b7b55c8ba83c08c4dd97c4484\nparent ec50a2086a7263b24795f70cfefb3a83737599f7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613663860 +0100\ncommitter GitHub <noreply@github.com> 1613663860 +0100\n\nRollup merge of #82236 - matthiaskrgr:useless_conv, r=jyn514\n\navoid converting types into themselves (clippy::useless_conversion)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04df75a4292a8bbf096fd316d0544a5a95b51e9b", "html_url": "https://github.com/rust-lang/rust/commit/04df75a4292a8bbf096fd316d0544a5a95b51e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04df75a4292a8bbf096fd316d0544a5a95b51e9b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01104b5c29fde36b7b55c8ba83c08c4dd97c4484", "url": "https://api.github.com/repos/rust-lang/rust/commits/01104b5c29fde36b7b55c8ba83c08c4dd97c4484", "html_url": "https://github.com/rust-lang/rust/commit/01104b5c29fde36b7b55c8ba83c08c4dd97c4484"}, {"sha": "ec50a2086a7263b24795f70cfefb3a83737599f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec50a2086a7263b24795f70cfefb3a83737599f7", "html_url": "https://github.com/rust-lang/rust/commit/ec50a2086a7263b24795f70cfefb3a83737599f7"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "fa05df6805f51ee280573077614ce5366193f4bf", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04df75a4292a8bbf096fd316d0544a5a95b51e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04df75a4292a8bbf096fd316d0544a5a95b51e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=04df75a4292a8bbf096fd316d0544a5a95b51e9b", "patch": "@@ -513,7 +513,7 @@ impl<'a> Parser<'a> {\n             token::Ident(..) if this.is_mistaken_not_ident_negation() => {\n                 make_it!(this, attrs, |this, _| this.recover_not_expr(lo))\n             }\n-            _ => return this.parse_dot_or_call_expr(Some(attrs.into())),\n+            _ => return this.parse_dot_or_call_expr(Some(attrs)),\n         }\n     }\n "}, {"sha": "bb2c7e98861cdaa1cb295929173677449d0eac76", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04df75a4292a8bbf096fd316d0544a5a95b51e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04df75a4292a8bbf096fd316d0544a5a95b51e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=04df75a4292a8bbf096fd316d0544a5a95b51e9b", "patch": "@@ -97,7 +97,7 @@ impl<'a> Parser<'a> {\n             self.mk_stmt(lo, StmtKind::Empty)\n         } else if self.token != token::CloseDelim(token::Brace) {\n             // Remainder are line-expr stmts.\n-            let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n+            let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs))?;\n             self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n         } else {\n             self.error_outer_attrs(&attrs.take_for_recovery());\n@@ -131,7 +131,7 @@ impl<'a> Parser<'a> {\n             };\n \n             let expr = this.with_res(Restrictions::STMT_EXPR, |this| {\n-                let expr = this.parse_dot_or_call_expr_with(expr, lo, attrs.into())?;\n+                let expr = this.parse_dot_or_call_expr_with(expr, lo, attrs)?;\n                 this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr))\n             })?;\n             Ok((\n@@ -213,7 +213,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn recover_local_after_let(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {\n-        let local = self.parse_local(attrs.into())?;\n+        let local = self.parse_local(attrs)?;\n         Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Local(local)))\n     }\n "}, {"sha": "947363fc3ed081307a8787be77b6baf7211074f4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04df75a4292a8bbf096fd316d0544a5a95b51e9b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04df75a4292a8bbf096fd316d0544a5a95b51e9b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=04df75a4292a8bbf096fd316d0544a5a95b51e9b", "patch": "@@ -1468,7 +1468,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }),\n                     assoc_name,\n                 )\n-                .into_iter()\n             },\n             || param_name.to_string(),\n             assoc_name,"}, {"sha": "b427420d577959f9e80cec4e5dc3d119c8df24c3", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04df75a4292a8bbf096fd316d0544a5a95b51e9b/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04df75a4292a8bbf096fd316d0544a5a95b51e9b/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=04df75a4292a8bbf096fd316d0544a5a95b51e9b", "patch": "@@ -53,7 +53,7 @@ fn install_sh(\n }\n \n fn default_path(config: &Option<PathBuf>, default: &str) -> PathBuf {\n-    PathBuf::from(config.as_ref().cloned().unwrap_or_else(|| PathBuf::from(default)))\n+    config.as_ref().cloned().unwrap_or_else(|| PathBuf::from(default))\n }\n \n fn prepare_dir(mut path: PathBuf) -> String {"}, {"sha": "e20c84ba053f6efac8fdd74b2905d3cd4d96c85e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04df75a4292a8bbf096fd316d0544a5a95b51e9b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04df75a4292a8bbf096fd316d0544a5a95b51e9b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=04df75a4292a8bbf096fd316d0544a5a95b51e9b", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> DocContext<'tcx> {\n             }\n             Entry::Occupied(e) => e.into_mut(),\n         };\n-        *def_index = DefIndex::from(*def_index + 1);\n+        *def_index = *def_index + 1;\n \n         DefId { krate: crate_num, index: *def_index }\n     }"}, {"sha": "b248fcdefbe7f337c9ee8bf78f84e54e31a55565", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04df75a4292a8bbf096fd316d0544a5a95b51e9b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04df75a4292a8bbf096fd316d0544a5a95b51e9b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=04df75a4292a8bbf096fd316d0544a5a95b51e9b", "patch": "@@ -182,7 +182,7 @@ fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>) -> ItemEnum {\n             bounds: g.into_iter().map(Into::into).collect(),\n             default: t.map(Into::into),\n         },\n-        StrippedItem(inner) => from_clean_item_kind(*inner, tcx).into(),\n+        StrippedItem(inner) => from_clean_item_kind(*inner, tcx),\n         PrimitiveItem(_) | KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }"}]}