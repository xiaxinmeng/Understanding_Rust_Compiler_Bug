{"sha": "8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NDNkNWE0YTQzYzJjNDg0NzRjODA2MWI5ZWIyY2ZkNmQ4YzBmMjI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-10-20T16:14:05Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-15T17:22:32Z"}, "message": "introduce evaluate_obligation_conservatively and use it", "tree": {"sha": "4479536b529eebaa0e0a718c8d34fd05853834d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4479536b529eebaa0e0a718c8d34fd05853834d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "html_url": "https://github.com/rust-lang/rust/commit/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22/comments", "author": null, "committer": null, "parents": [{"sha": "9c6d35d03782259b0ac89976a182f2435a79e8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6d35d03782259b0ac89976a182f2435a79e8ec", "html_url": "https://github.com/rust-lang/rust/commit/9c6d35d03782259b0ac89976a182f2435a79e8ec"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "9d8138dc38ad5264ba211867ba553746cfc80f0a", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "patch": "@@ -340,6 +340,21 @@ pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n            ty,\n            bound);\n \n+    if !ty.has_infer_types() && !ty.has_closure_types() {\n+        let cause = ObligationCause::misc(span, ast::DUMMY_NODE_ID);\n+        let obligation =\n+            util::predicate_for_builtin_bound(infcx.tcx, cause, bound, 0, ty);\n+        let obligation = match obligation {\n+            Ok(o) => o,\n+            Err(..) => return false\n+        };\n+        let result = SelectionContext::new(infcx)\n+            .evaluate_obligation_conservatively(&obligation);\n+        debug!(\"type_known_to_meet_builtin_bound: ty={:?} bound={:?} => {:?}\",\n+               ty, bound, result);\n+        return result;\n+    }\n+\n     let mut fulfill_cx = FulfillmentContext::new(false);\n \n     // We can use a dummy node-id here because we won't pay any mind"}, {"sha": "befc74baacc73633fa9b423be9755d49831bb8b6", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=8943d5a4a43c2c48474c8061b9eb2cfd6d8c0f22", "patch": "@@ -407,6 +407,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         })\n     }\n \n+    /// Evaluates whether the obligation `obligation` can be satisfied,\n+    /// and returns `false` if not certain. However, this is not entirely\n+    /// accurate if inference variables are involved.\n+    pub fn evaluate_obligation_conservatively(&mut self,\n+                                              obligation: &PredicateObligation<'tcx>)\n+                               -> bool\n+    {\n+        debug!(\"evaluate_obligation_conservatively({:?})\",\n+               obligation);\n+\n+        self.infcx.probe(|_| {\n+            self.evaluate_predicate_recursively(TraitObligationStackList::empty(), obligation)\n+                == EvaluatedToOk\n+        })\n+    }\n+\n+\n     fn evaluate_predicates_recursively<'a,'o,I>(&mut self,\n                                                 stack: TraitObligationStackList<'o, 'tcx>,\n                                                 predicates: I)"}]}