{"sha": "37dbe868c92b16211ef2a670f9c9f457515f857b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZGJlODY4YzkyYjE2MjExZWYyYTY3MGY5YzlmNDU3NTE1Zjg1N2I=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-03T00:14:25Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-10T23:04:12Z"}, "message": "Split span_to_string into span_to_diagnostic/embeddable_string", "tree": {"sha": "4749c549697804ee5b7e55f5ee560f07dd8c2a6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4749c549697804ee5b7e55f5ee560f07dd8c2a6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37dbe868c92b16211ef2a670f9c9f457515f857b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCZvAcACgkQGBtJ+fOP\nM3R0XQv+JDi941TiQS2m8+g3AimvSxVevDpRHa/t5xK6oMN7yTjb/RvFs/cWCIAc\nxvvgaH5NEfkqsk2lxSLFQwVl9HTf+kBx7/RzUx7Omy3SCco3RST3DtD8jr0Vszyc\nvNN50KLKNMz5SHlbj7O2iIsoygJj5ztgaGqRLPTpqfZulVT6fCocPl7KgDwTPXZr\nPs/pDeKXmd2SOpU4ECoreuhPvDzi4K5wzP/0OQmpR70UtAzx314oxBkMgKk/n067\nhxtSlysAMecLjnL3rqCQ8RPBF8f2N5wwjmQtjrHDz11yyA/E4NeAs2X+/BxECqE3\nniw+xwSnViJybUfDZUhsWWfcupRhdFkTwbF4dH+ki0NoA0+zwGVUdmYJHTmkFl9L\nyh6BXJe9aoO9m/X6GghIi+OFSCz5/X5teDjz83f1/2uwkEVcuMDAUC2h513Epaut\nDiwRA/iqp0Gx9+eig1YWwN08w3Pt4nBdf+1ziLSxkAcBwxEE5VbX1EgLerkO2EUz\nIwBggIk3\n=FJtz\n-----END PGP SIGNATURE-----", "payload": "tree 4749c549697804ee5b7e55f5ee560f07dd8c2a6e\nparent 0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed\nauthor Andy Wang <cbeuw.andy@gmail.com> 1620000865 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620687852 +0100\n\nSplit span_to_string into span_to_diagnostic/embeddable_string\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37dbe868c92b16211ef2a670f9c9f457515f857b", "html_url": "https://github.com/rust-lang/rust/commit/37dbe868c92b16211ef2a670f9c9f457515f857b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37dbe868c92b16211ef2a670f9c9f457515f857b/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "html_url": "https://github.com/rust-lang/rust/commit/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed"}], "stats": {"total": 84, "additions": 60, "deletions": 24}, "files": [{"sha": "9eac61eb0e59edee1793b107a0514e74556d0695", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     span,\n                     \"inconsistent DepNode at `{:?}` for `{}`: \\\n                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?})\",\n-                    self.source_map.span_to_string(span),\n+                    self.source_map.span_to_diagnostic_string(span),\n                     node_str,\n                     self.definitions\n                         .def_path(self.current_dep_node_owner)"}, {"sha": "f83a40d802feeb9b3cae21e6b2befc6b1a855f48", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -2365,7 +2365,10 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                                 )\n                             } else {\n                                 let span = tcx.hir().span(hir_id);\n-                                format!(\"[closure@{}]\", tcx.sess.source_map().span_to_string(span))\n+                                format!(\n+                                    \"[closure@{}]\",\n+                                    tcx.sess.source_map().span_to_diagnostic_string(span)\n+                                )\n                             };\n                             let mut struct_fmt = fmt.debug_struct(&name);\n "}, {"sha": "5a49dced503b4d0191a682b0bfa457c0eba8c9df", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -667,7 +667,12 @@ pub trait PrettyPrinter<'tcx>:\n                     if let Some(did) = did.as_local() {\n                         let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n                         let span = self.tcx().hir().span(hir_id);\n-                        p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n+                        p!(write(\n+                            \"@{}\",\n+                            // This may end up in stderr diagnostics but it may also be emitted\n+                            // into MIR. Hence we use the remapped path if available\n+                            self.tcx().sess.source_map().span_to_embeddable_string(span)\n+                        ));\n                     } else {\n                         p!(write(\"@\"), print_def_path(did, substs));\n                     }\n@@ -702,7 +707,12 @@ pub trait PrettyPrinter<'tcx>:\n                             p!(\"@\", print_def_path(did.to_def_id(), substs));\n                         } else {\n                             let span = self.tcx().hir().span(hir_id);\n-                            p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n+                            p!(write(\n+                                \"@{}\",\n+                                // This may end up in stderr diagnostics but it may also be emitted\n+                                // into MIR. Hence we use the remapped path if available\n+                                self.tcx().sess.source_map().span_to_embeddable_string(span)\n+                            ));\n                         }\n                     } else {\n                         p!(write(\"@\"), print_def_path(did, substs));\n@@ -1407,7 +1417,13 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n                 if !self.empty_path {\n                     write!(self, \"::\")?;\n                 }\n-                write!(self, \"<impl at {}>\", self.tcx.sess.source_map().span_to_string(span))?;\n+                write!(\n+                    self,\n+                    \"<impl at {}>\",\n+                    // This may end up in stderr diagnostics but it may also be emitted\n+                    // into MIR. Hence we use the remapped path if available\n+                    self.tcx.sess.source_map().span_to_embeddable_string(span)\n+                )?;\n                 self.empty_path = false;\n \n                 return Ok(self);"}, {"sha": "5892ef37ebacb56df38b1306bfae5f16a7bc3eed", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -76,7 +76,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         for constraint in &constraints {\n             let OutlivesConstraint { sup, sub, locations, category } = constraint;\n             let (name, arg) = match locations {\n-                Locations::All(span) => (\"All\", tcx.sess.source_map().span_to_string(*span)),\n+                Locations::All(span) => {\n+                    (\"All\", tcx.sess.source_map().span_to_embeddable_string(*span))\n+                }\n                 Locations::Single(loc) => (\"Single\", format!(\"{:?}\", loc)),\n             };\n             with_msg(&format!(\"{:?}: {:?} due to {:?} at {}({})\", sup, sub, category, name, arg))?;"}, {"sha": "483ceab14423349310c75fe6424cae3995e08cdc", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -148,8 +148,8 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         debug!(\n             \"instrumenting {:?}, fn sig span: {}, body span: {}\",\n             def_id,\n-            source_map.span_to_string(fn_sig_span),\n-            source_map.span_to_string(body_span)\n+            source_map.span_to_diagnostic_string(fn_sig_span),\n+            source_map.span_to_diagnostic_string(body_span)\n         );\n \n         let mut graphviz_data = debug::GraphvizData::new();\n@@ -311,8 +311,8 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                 \"Calling make_code_region(file_name={}, source_file={:?}, span={}, body_span={})\",\n                 file_name,\n                 self.source_file,\n-                source_map.span_to_string(span),\n-                source_map.span_to_string(body_span)\n+                source_map.span_to_diagnostic_string(span),\n+                source_map.span_to_diagnostic_string(body_span)\n             );\n \n             inject_statement("}, {"sha": "955e85c944a5d4594e955844c3f0198a410f8df5", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -445,7 +445,10 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n             ty::Tuple(tys) if tys.is_empty() => {}\n             _ => {\n                 self.push(\"mir::Constant\");\n-                self.push(&format!(\"+ span: {}\", self.tcx.sess.source_map().span_to_string(*span)));\n+                self.push(&format!(\n+                    \"+ span: {}\",\n+                    self.tcx.sess.source_map().span_to_embeddable_string(*span)\n+                ));\n                 if let Some(user_ty) = user_ty {\n                     self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n                 }\n@@ -516,7 +519,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n }\n \n fn comment(tcx: TyCtxt<'_>, SourceInfo { span, scope }: SourceInfo) -> String {\n-    format!(\"scope {} at {}\", scope.index(), tcx.sess.source_map().span_to_string(span))\n+    format!(\"scope {} at {}\", scope.index(), tcx.sess.source_map().span_to_embeddable_string(span))\n }\n \n /// Prints local variables in a scope tree.\n@@ -617,7 +620,7 @@ fn write_scope_tree(\n                 \"{0:1$} // at {2}\",\n                 indented_header,\n                 ALIGN,\n-                tcx.sess.source_map().span_to_string(span),\n+                tcx.sess.source_map().span_to_embeddable_string(span),\n             )?;\n         } else {\n             writeln!(w, \"{}\", indented_header)?;\n@@ -1004,7 +1007,7 @@ fn write_user_type_annotations(\n             \"| {:?}: {:?} at {}\",\n             index.index(),\n             annotation.user_ty,\n-            tcx.sess.source_map().span_to_string(annotation.span)\n+            tcx.sess.source_map().span_to_embeddable_string(annotation.span)\n         )?;\n     }\n     if !body.user_type_annotations.is_empty() {"}, {"sha": "2103f2f093407b3e49290d1eb39d4cc835e47163", "filename": "compiler/rustc_mir/src/util/spanview.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -628,7 +628,7 @@ fn tooltip<'tcx>(\n ) -> String {\n     let source_map = tcx.sess.source_map();\n     let mut text = Vec::new();\n-    text.push(format!(\"{}: {}:\", spanview_id, &source_map.span_to_string(span)));\n+    text.push(format!(\"{}: {}:\", spanview_id, &source_map.span_to_embeddable_string(span)));\n     for statement in statements {\n         let source_range = source_range_no_file(tcx, &statement.source_info.span);\n         text.push(format!("}, {"sha": "4ceefa17bcf3d01ca84a39feac2fe722d330fb9d", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -132,9 +132,9 @@ enum LiveNodeKind {\n fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n     let sm = tcx.sess.source_map();\n     match lnk {\n-        UpvarNode(s) => format!(\"Upvar node [{}]\", sm.span_to_string(s)),\n-        ExprNode(s) => format!(\"Expr node [{}]\", sm.span_to_string(s)),\n-        VarDefNode(s) => format!(\"Var def node [{}]\", sm.span_to_string(s)),\n+        UpvarNode(s) => format!(\"Upvar node [{}]\", sm.span_to_diagnostic_string(s)),\n+        ExprNode(s) => format!(\"Expr node [{}]\", sm.span_to_diagnostic_string(s)),\n+        VarDefNode(s) => format!(\"Var def node [{}]\", sm.span_to_diagnostic_string(s)),\n         ClosureNode => \"Closure node\".to_owned(),\n         ExitNode => \"Exit node\".to_owned(),\n     }"}, {"sha": "c133f1a041719b73d0fbb8d29f5d31d967132ef5", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -717,7 +717,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n         debug!(\n             \"visit_body(id={:?}, span={:?}, body.id={:?}, cx.parent={:?})\",\n             owner_id,\n-            self.tcx.sess.source_map().span_to_string(body.value.span),\n+            self.tcx.sess.source_map().span_to_diagnostic_string(body.value.span),\n             body_id,\n             self.cx.parent\n         );"}, {"sha": "5919a856ddf14b5980773145928d6c83d75fbff9", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -3347,7 +3347,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n         debug!(\n             node = ?self.tcx.hir().node_to_string(lifetime_ref.hir_id),\n-            span = ?self.tcx.sess.source_map().span_to_string(lifetime_ref.span)\n+            span = ?self.tcx.sess.source_map().span_to_diagnostic_string(lifetime_ref.span)\n         );\n         self.map.defs.insert(lifetime_ref.hir_id, def);\n "}, {"sha": "0a49e3a43067786976cdeb981c33a1f86897f046", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -872,7 +872,7 @@ pub fn debug_with_source_map(\n     f: &mut fmt::Formatter<'_>,\n     source_map: &SourceMap,\n ) -> fmt::Result {\n-    write!(f, \"{} ({:?})\", source_map.span_to_string(span), span.ctxt())\n+    write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(span), span.ctxt())\n }\n \n pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "c7ed465df96689e8586fde5c2529c75b55e0a441", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -406,7 +406,7 @@ impl SourceMap {\n         }\n     }\n \n-    pub fn span_to_string(&self, sp: Span) -> String {\n+    fn span_to_string(&self, sp: Span, prefer_local: bool) -> String {\n         if self.files.borrow().source_files.is_empty() && sp.is_dummy() {\n             return \"no-location\".to_string();\n         }\n@@ -415,14 +415,26 @@ impl SourceMap {\n         let hi = self.lookup_char_pos(sp.hi());\n         format!(\n             \"{}:{}:{}: {}:{}\",\n-            lo.file.name.prefer_remapped(),\n+            if prefer_local { lo.file.name.prefer_local() } else { lo.file.name.prefer_remapped() },\n             lo.line,\n             lo.col.to_usize() + 1,\n             hi.line,\n             hi.col.to_usize() + 1,\n         )\n     }\n \n+    /// Format the span location suitable for embedding in build artifacts\n+    pub fn span_to_embeddable_string(&self, sp: Span) -> String {\n+        self.span_to_string(sp, false)\n+    }\n+\n+    /// Format the span location to be printed in diagnostics. Must not be emitted\n+    /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string\n+    /// for string suitable for embedding.\n+    pub fn span_to_diagnostic_string(&self, sp: Span) -> String {\n+        self.span_to_string(sp, true)\n+    }\n+\n     pub fn span_to_filename(&self, sp: Span) -> FileName {\n         self.lookup_char_pos(sp.lo()).file.name.clone()\n     }"}, {"sha": "f13979941abee7ded0399227f2ee1222a8591227", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37dbe868c92b16211ef2a670f9c9f457515f857b/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=37dbe868c92b16211ef2a670f9c9f457515f857b", "patch": "@@ -193,7 +193,7 @@ fn t8() {\n fn t9() {\n     let sm = init_source_map();\n     let span = Span::with_root_ctxt(BytePos(12), BytePos(23));\n-    let sstr = sm.span_to_string(span);\n+    let sstr = sm.span_to_diagnostic_string(span);\n \n     assert_eq!(sstr, \"blork.rs:2:1: 2:12\");\n }"}]}