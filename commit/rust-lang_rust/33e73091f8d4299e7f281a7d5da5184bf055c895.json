{"sha": "33e73091f8d4299e7f281a7d5da5184bf055c895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZTczMDkxZjhkNDI5OWU3ZjI4MWE3ZDVkYTUxODRiZjA1NWM4OTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-01T15:47:35Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-01T15:47:35Z"}, "message": "Don't mark unwind ebbs as cold\n\nThis fixes the code_layout optimization, as it would previously try to\nmove non-existing ebbs.\n\nFixes #877", "tree": {"sha": "f60c0a09ea82e26cd1ec7d85d541774654f37cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60c0a09ea82e26cd1ec7d85d541774654f37cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33e73091f8d4299e7f281a7d5da5184bf055c895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33e73091f8d4299e7f281a7d5da5184bf055c895", "html_url": "https://github.com/rust-lang/rust/commit/33e73091f8d4299e7f281a7d5da5184bf055c895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33e73091f8d4299e7f281a7d5da5184bf055c895/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d183ead624d43c293d12708a9eb3574e8cd17f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d183ead624d43c293d12708a9eb3574e8cd17f", "html_url": "https://github.com/rust-lang/rust/commit/52d183ead624d43c293d12708a9eb3574e8cd17f"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "5860e3121b47ac0f8fd25e51d6d8171395e0281a", "filename": "src/base.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33e73091f8d4299e7f281a7d5da5184bf055c895/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e73091f8d4299e7f281a7d5da5184bf055c895/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=33e73091f8d4299e7f281a7d5da5184bf055c895", "patch": "@@ -32,12 +32,6 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     // Predefine ebb's\n     let start_ebb = bcx.create_ebb();\n     let ebb_map: IndexVec<BasicBlock, Ebb> = (0..mir.basic_blocks().len()).map(|_| bcx.create_ebb()).collect();\n-    let mut cold_ebbs = EntitySet::new();\n-    for (bb, &ebb) in ebb_map.iter_enumerated() {\n-        if mir.basic_blocks()[bb].is_cleanup {\n-            cold_ebbs.insert(ebb);\n-        }\n-    }\n \n     // Make FunctionCx\n     let pointer_type = cx.module.target_config().pointer_type();\n@@ -55,7 +49,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n         ebb_map,\n         local_map: HashMap::new(),\n         caller_location: None, // set by `codegen_fn_prelude`\n-        cold_ebbs,\n+        cold_ebbs: EntitySet::new(),\n \n         clif_comments,\n         constants_cx: &mut cx.constants_cx,\n@@ -148,13 +142,17 @@ pub fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func\n \n fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n+        let ebb = fx.get_ebb(bb);\n+        fx.bcx.switch_to_block(ebb);\n+\n         if bb_data.is_cleanup {\n             // Unwinding after panicking is not supported\n             continue;\n-        }\n \n-        let ebb = fx.get_ebb(bb);\n-        fx.bcx.switch_to_block(ebb);\n+            // FIXME once unwinding is supported uncomment next lines\n+            // // Unwinding is unlikely to happen, so mark cleanup ebb's as cold.\n+            // fx.cold_ebbs.insert(ebb);\n+        }\n \n         fx.bcx.ins().nop();\n         for stmt in &bb_data.statements {"}, {"sha": "4d2301c6f6c56920a021999b8291739d54b7ec6c", "filename": "src/optimize/code_layout.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33e73091f8d4299e7f281a7d5da5184bf055c895/src%2Foptimize%2Fcode_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e73091f8d4299e7f281a7d5da5184bf055c895/src%2Foptimize%2Fcode_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fcode_layout.rs?ref=33e73091f8d4299e7f281a7d5da5184bf055c895", "patch": "@@ -11,8 +11,6 @@\n use crate::prelude::*;\n \n pub(super) fn optimize_function(ctx: &mut Context, cold_ebbs: &EntitySet<Ebb>) {\n-    return; // FIXME add ebb arguments back\n-\n     // FIXME Move the ebb in place instead of remove and append once\n     // bytecodealliance/cranelift#1339 is implemented.\n "}]}