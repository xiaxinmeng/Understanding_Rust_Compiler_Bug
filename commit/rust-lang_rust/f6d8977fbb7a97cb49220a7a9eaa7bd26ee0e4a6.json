{"sha": "f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZDg5NzdmYmI3YTk3Y2I0OTIyMGE3YTllYWE3YmQyNmVlMGU0YTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T22:09:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-02T22:09:12Z"}, "message": "Rollup merge of #63212 - Centril:param-attrs-pretty, r=davidtwco\n\nPretty print attributes in `print_arg`\n\nFixes https://github.com/rust-lang/rust/issues/63210.\ncc https://github.com/rust-lang/rust/issues/60406\n\nr? @petrochenkov", "tree": {"sha": "b5be94d7733634174c7080b778da84e216392c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5be94d7733634174c7080b778da84e216392c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRLSICRBK7hj4Ov3rIwAAdHIIAGlxh8UG/B7+Bkx8hmtzqChz\nBgO6y8H+gJ6o9rhrCGUefeTUo1GYghvjM5ALJPPH7T4jWmZYBnuf8NuuBWOuqSCp\niX+qa0hfpUwyD402rUJHUqTvYdpd1ZzBCVNyE5gUpv6kgUcd2hNApMyTkPlxCgK8\nsUZgpIj2HSfwVFQ87bpLQMn0HeaFEgPqgZSti1N5yC2BPBZzMRzTVFnf/tL8Fbx7\nwu4BB0tFdXsY90xWCVOZrhx0h1bQBGl+HWYESoRFIslWBWu6T7dcntpbSMUBcFiN\naNrdetNht8kVesrgjiMJ0G+uIiVOhMK1qEHMPyg17VgnW4Gq0qcuQNC96fFWTDs=\n=U8QH\n-----END PGP SIGNATURE-----\n", "payload": "tree b5be94d7733634174c7080b778da84e216392c11\nparent 109b21f7b7ecd08f26449e384cf3d3e957f98f22\nparent d1c89d64bcc21e4f25ef89889048fe231dd7eabe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564783752 +0200\ncommitter GitHub <noreply@github.com> 1564783752 +0200\n\nRollup merge of #63212 - Centril:param-attrs-pretty, r=davidtwco\n\nPretty print attributes in `print_arg`\n\nFixes https://github.com/rust-lang/rust/issues/63210.\ncc https://github.com/rust-lang/rust/issues/60406\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "html_url": "https://github.com/rust-lang/rust/commit/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109b21f7b7ecd08f26449e384cf3d3e957f98f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/109b21f7b7ecd08f26449e384cf3d3e957f98f22", "html_url": "https://github.com/rust-lang/rust/commit/109b21f7b7ecd08f26449e384cf3d3e957f98f22"}, {"sha": "d1c89d64bcc21e4f25ef89889048fe231dd7eabe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c89d64bcc21e4f25ef89889048fe231dd7eabe", "html_url": "https://github.com/rust-lang/rust/commit/d1c89d64bcc21e4f25ef89889048fe231dd7eabe"}], "stats": {"total": 109, "additions": 99, "deletions": 10}, "files": [{"sha": "07b1aef337fdccff8d8b887cfdab9526f6b24d1b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "patch": "@@ -2622,27 +2622,23 @@ impl<'a> State<'a> {\n         self.s.word(\"<\");\n \n         self.commasep(Inconsistent, &generic_params, |s, param| {\n+            s.print_outer_attributes_inline(&param.attrs);\n+\n             match param.kind {\n                 ast::GenericParamKind::Lifetime => {\n-                    s.print_outer_attributes_inline(&param.attrs);\n                     let lt = ast::Lifetime { id: param.id, ident: param.ident };\n                     s.print_lifetime_bounds(lt, &param.bounds)\n                 }\n                 ast::GenericParamKind::Type { ref default } => {\n-                    s.print_outer_attributes_inline(&param.attrs);\n                     s.print_ident(param.ident);\n                     s.print_type_bounds(\":\", &param.bounds);\n-                    match default {\n-                        Some(ref default) => {\n-                            s.s.space();\n-                            s.word_space(\"=\");\n-                            s.print_type(default)\n-                        }\n-                        _ => {}\n+                    if let Some(ref default) = default {\n+                        s.s.space();\n+                        s.word_space(\"=\");\n+                        s.print_type(default)\n                     }\n                 }\n                 ast::GenericParamKind::Const { ref ty } => {\n-                    s.print_outer_attributes_inline(&param.attrs);\n                     s.word_space(\"const\");\n                     s.print_ident(param.ident);\n                     s.s.space();\n@@ -2743,6 +2739,9 @@ impl<'a> State<'a> {\n \n     crate fn print_arg(&mut self, input: &ast::Arg, is_closure: bool) {\n         self.ibox(INDENT_UNIT);\n+\n+        self.print_outer_attributes_inline(&input.attrs);\n+\n         match input.ty.node {\n             ast::TyKind::Infer if is_closure => self.print_pat(&input.pat),\n             _ => {"}, {"sha": "71815e3c08974f3c9b5d2f1205443aa4af91458c", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "patch": "@@ -0,0 +1,34 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+macro_rules! checker {\n+    ($attr_name:ident, $expected:literal) => {\n+        #[proc_macro_attribute]\n+        pub fn $attr_name(attr: TokenStream, input: TokenStream) -> TokenStream {\n+            assert!(attr.to_string().is_empty());\n+            assert_eq!(input.to_string(), $expected);\n+            TokenStream::new()\n+        }\n+    }\n+}\n+\n+checker!(attr_extern, r#\"extern \"C\" {\n+    fn ffi(#[a1] arg1: i32, #[a2] ...);\n+}\"#);\n+checker!(attr_extern_cvar, r#\"unsafe extern \"C\" fn cvar(arg1: i32, #[a1] mut args: ...) { }\"#);\n+checker!(attr_alias, \"type Alias = fn(#[a1] u8, #[a2] ...);\");\n+checker!(attr_free, \"fn free(#[a1] arg1: u8) { let lam = |#[a2] W(x), #[a3] y| (); }\");\n+checker!(attr_inherent_1, \"fn inherent1(#[a1] self, #[a2] arg1: u8) { }\");\n+checker!(attr_inherent_2, \"fn inherent2(#[a1] &self, #[a2] arg1: u8) { }\");\n+checker!(attr_inherent_3, \"fn inherent3<'a>(#[a1] &'a mut self, #[a2] arg1: u8) { }\");\n+checker!(attr_inherent_4, \"fn inherent4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8) { }\");\n+checker!(attr_trait_1, \"fn trait1(#[a1] self, #[a2] arg1: u8);\");\n+checker!(attr_trait_2, \"fn trait2(#[a1] &self, #[a2] arg1: u8);\");\n+checker!(attr_trait_3, \"fn trait3<'a>(#[a1] &'a mut self, #[a2] arg1: u8);\");\n+checker!(attr_trait_4, \"fn trait4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8, #[a3] Vec<u8>);\");"}, {"sha": "1a7e9481745066659b8e233fe7b612c586ba709e", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-pretty.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs?ref=f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "patch": "@@ -0,0 +1,56 @@\n+// aux-build:param-attrs.rs\n+\n+// check-pass\n+\n+#![feature(param_attrs)]\n+#![feature(c_variadic)]\n+\n+extern crate param_attrs;\n+\n+use param_attrs::*;\n+\n+struct W(u8);\n+\n+#[attr_extern]\n+extern \"C\" { fn ffi(#[a1] arg1: i32, #[a2] ...); }\n+\n+#[attr_extern_cvar]\n+unsafe extern \"C\" fn cvar(arg1: i32, #[a1] mut args: ...) {}\n+\n+#[attr_alias]\n+type Alias = fn(#[a1] u8, #[a2] ...);\n+\n+#[attr_free]\n+fn free(#[a1] arg1: u8) {\n+    let lam = |#[a2] W(x), #[a3] y| ();\n+}\n+\n+impl W {\n+    #[attr_inherent_1]\n+    fn inherent1(#[a1] self, #[a2] arg1: u8) {}\n+\n+    #[attr_inherent_2]\n+    fn inherent2(#[a1] &self, #[a2] arg1: u8) {}\n+\n+    #[attr_inherent_3]\n+    fn inherent3<'a>(#[a1] &'a mut self, #[a2] arg1: u8) {}\n+\n+    #[attr_inherent_4]\n+    fn inherent4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8) {}\n+}\n+\n+trait A {\n+    #[attr_trait_1]\n+    fn trait1(#[a1] self, #[a2] arg1: u8);\n+\n+    #[attr_trait_2]\n+    fn trait2(#[a1] &self, #[a2] arg1: u8);\n+\n+    #[attr_trait_3]\n+    fn trait3<'a>(#[a1] &'a mut self, #[a2] arg1: u8);\n+\n+    #[attr_trait_4]\n+    fn trait4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8, #[a3] Vec<u8>);\n+}\n+\n+fn main() {}"}]}