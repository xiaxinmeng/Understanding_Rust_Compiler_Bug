{"sha": "a72dd4a5b973a3d94876ebea66e428fabaff00b0", "node_id": "C_kwDOAAsO6NoAKGE3MmRkNGE1Yjk3M2EzZDk0ODc2ZWJlYTY2ZTQyOGZhYmFmZjAwYjA", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-10-18T16:31:23Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-10-19T14:00:18Z"}, "message": "Explain why `Self` is invalid in generic parameters", "tree": {"sha": "c62059ef97025d1c745900bf3c6db0c610183e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c62059ef97025d1c745900bf3c6db0c610183e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a72dd4a5b973a3d94876ebea66e428fabaff00b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a72dd4a5b973a3d94876ebea66e428fabaff00b0", "html_url": "https://github.com/rust-lang/rust/commit/a72dd4a5b973a3d94876ebea66e428fabaff00b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a72dd4a5b973a3d94876ebea66e428fabaff00b0/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45ed7502ad225739270a368528725930f54b7b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45ed7502ad225739270a368528725930f54b7b6", "html_url": "https://github.com/rust-lang/rust/commit/d45ed7502ad225739270a368528725930f54b7b6"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "ec7e376656618a3fbaaef8acbd216217c2c59fde", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a72dd4a5b973a3d94876ebea66e428fabaff00b0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72dd4a5b973a3d94876ebea66e428fabaff00b0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=a72dd4a5b973a3d94876ebea66e428fabaff00b0", "patch": "@@ -89,6 +89,19 @@ impl<'a> Parser<'a> {\n             let attrs = self.parse_outer_attributes()?;\n             let param =\n                 self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n+                    if this.eat_keyword_noexpect(kw::SelfUpper) {\n+                        // `Self` as a generic param is invalid. Here we emit the diagnostic and continue parsing\n+                        // as if `Self` never existed.\n+                        this.struct_span_err(\n+                            this.prev_token.span,\n+                            \"unexpected keyword `Self` in generic parameters\",\n+                        )\n+                        .note(\"you cannot use `Self` as a generic parameter because it is reserved for associated items\")\n+                        .emit();\n+\n+                        this.eat(&token::Comma);\n+                    }\n+\n                     let param = if this.check_lifetime() {\n                         let lifetime = this.expect_lifetime();\n                         // Parse lifetime parameter."}, {"sha": "55c7ac128ffdecaa49b1d9f5d5b4b5843ab43008", "filename": "src/test/ui/keyword/keyword-self-as-type-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a72dd4a5b973a3d94876ebea66e428fabaff00b0/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72dd4a5b973a3d94876ebea66e428fabaff00b0/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs?ref=a72dd4a5b973a3d94876ebea66e428fabaff00b0", "patch": "@@ -1,10 +1,10 @@\n // Regression test of #36638.\n \n struct Foo<Self>(Self);\n-//~^ ERROR expected identifier, found keyword `Self`\n-//~^^ ERROR E0392\n+//~^ ERROR unexpected keyword `Self` in generic parameters\n+//~| ERROR recursive type `Foo` has infinite size\n \n trait Bar<Self> {}\n-//~^ ERROR expected identifier, found keyword `Self`\n+//~^ ERROR unexpected keyword `Self` in generic parameters\n \n fn main() {}"}, {"sha": "fd101b32b4c9c0c2e30c12fea48376c30de10de4", "filename": "src/test/ui/keyword/keyword-self-as-type-param.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a72dd4a5b973a3d94876ebea66e428fabaff00b0/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a72dd4a5b973a3d94876ebea66e428fabaff00b0/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr?ref=a72dd4a5b973a3d94876ebea66e428fabaff00b0", "patch": "@@ -1,24 +1,33 @@\n-error: expected identifier, found keyword `Self`\n+error: unexpected keyword `Self` in generic parameters\n   --> $DIR/keyword-self-as-type-param.rs:3:12\n    |\n LL | struct Foo<Self>(Self);\n-   |            ^^^^ expected identifier, found keyword\n+   |            ^^^^\n+   |\n+   = note: you cannot use `Self` as a generic parameter because it is reserved for associated items\n \n-error: expected identifier, found keyword `Self`\n+error: unexpected keyword `Self` in generic parameters\n   --> $DIR/keyword-self-as-type-param.rs:7:11\n    |\n LL | trait Bar<Self> {}\n-   |           ^^^^ expected identifier, found keyword\n+   |           ^^^^\n+   |\n+   = note: you cannot use `Self` as a generic parameter because it is reserved for associated items\n \n-error[E0392]: parameter `Self` is never used\n-  --> $DIR/keyword-self-as-type-param.rs:3:12\n+error[E0072]: recursive type `Foo` has infinite size\n+  --> $DIR/keyword-self-as-type-param.rs:3:1\n    |\n LL | struct Foo<Self>(Self);\n-   |            ^^^^ unused parameter\n+   | ^^^^^^^^^^^^^^^^^----^^\n+   | |                |\n+   | |                recursive without indirection\n+   | recursive type has infinite size\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n-   = help: consider removing `Self`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `Self` to be a const parameter, use `const Self: usize` instead\n+LL | struct Foo<Self>(Box<Self>);\n+   |                  ++++    +\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0072`."}]}