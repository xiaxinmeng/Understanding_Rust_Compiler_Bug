{"sha": "f9a322a6fdd1e12fbe30441feaa4402e23efe303", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YTMyMmE2ZmRkMWUxMmZiZTMwNDQxZmVhYTQ0MDJlMjNlZmUzMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T22:34:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T22:34:09Z"}, "message": "Auto merge of #76678 - jonas-schievink:rollup-vzl9yhx, r=jonas-schievink\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #75559 (unions: test move behavior of non-Copy fields)\n - #76441 (Note that parallel-compiler = true causes tests to fail)\n - #76527 (Remove internal and unstable MaybeUninit::UNINIT.)\n - #76629 (Simplify iter zip struct doc)\n - #76640 (Simplify SyncOnceCell's `take` and `drop`.)\n - #76646 (Add mailmap entry)\n - #76651 (Remove Windows details from Unix and VmWorks symlink() docstrings)\n - #76663 (Simplify iter chain struct doc)\n - #76665 (slice::from_raw_parts: explicitly mention that data must be initialized)\n - #76667 (Fix CI LLVM to work on NixOS out of the box)\n - #76668 (Add visualization of rustc span in doc)\n - #76677 (note that test_stable_pointers does not reflect a stable guarantee)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "a81dee2e5024531545a22108aabc1d7415776f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a81dee2e5024531545a22108aabc1d7415776f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9a322a6fdd1e12fbe30441feaa4402e23efe303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a322a6fdd1e12fbe30441feaa4402e23efe303", "html_url": "https://github.com/rust-lang/rust/commit/f9a322a6fdd1e12fbe30441feaa4402e23efe303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9a322a6fdd1e12fbe30441feaa4402e23efe303/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7402a394471a6738a40fea7d4f1891666e5a80c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7402a394471a6738a40fea7d4f1891666e5a80c5", "html_url": "https://github.com/rust-lang/rust/commit/7402a394471a6738a40fea7d4f1891666e5a80c5"}, {"sha": "fe716d0447208825de8ddb815b31905d905950c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe716d0447208825de8ddb815b31905d905950c7", "html_url": "https://github.com/rust-lang/rust/commit/fe716d0447208825de8ddb815b31905d905950c7"}], "stats": {"total": 217, "additions": 148, "deletions": 69}, "files": [{"sha": "fa0728bd794612d969cc8a913225c69df7b7a087", "filename": ".mailmap", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -55,6 +55,9 @@ Chris C Cerami <chrisccerami@users.noreply.github.com> Chris C Cerami <chrisccer\n Chris Pressey <cpressey@gmail.com>\n Chris Thorn <chris@thorn.co> Chris Thorn <thorn@thoughtbot.com>\n Chris Vittal <christopher.vittal@gmail.com> Christopher Vittal <christopher.vittal@gmail.com>\n+Christiaan Dirkx <christiaan@dirkx.email> <christiaan@dirkx.com>\n+Christiaan Dirkx <christiaan@dirkx.email> CDirkx <christiaan@dirkx.com>\n+Christiaan Dirkx <christiaan@dirkx.email> CDirkx <christiaan@dirkx.email>\n Christian Poveda <git@christianpoveda.xyz> <christianpoveda@protonmail.com>\n Christian Poveda <git@christianpoveda.xyz> <cn.poveda.ruiz@gmail.com>\n Christian Poveda <git@christianpoveda.xyz> <z1mvader@protonmail.com>"}, {"sha": "e38cd516b91ac16edb12e91cd9791d6bda347f6a", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -544,6 +544,12 @@ impl Span {\n     }\n \n     /// Returns a `Span` that would enclose both `self` and `end`.\n+    ///\n+    /// ```text\n+    ///     ____             ___\n+    ///     self lorem ipsum end\n+    ///     ^^^^^^^^^^^^^^^^^^^^\n+    /// ```\n     pub fn to(self, end: Span) -> Span {\n         let span_data = self.data();\n         let end_data = end.data();\n@@ -567,6 +573,12 @@ impl Span {\n     }\n \n     /// Returns a `Span` between the end of `self` to the beginning of `end`.\n+    ///\n+    /// ```text\n+    ///     ____             ___\n+    ///     self lorem ipsum end\n+    ///         ^^^^^^^^^^^^^\n+    /// ```\n     pub fn between(self, end: Span) -> Span {\n         let span = self.data();\n         let end = end.data();\n@@ -577,7 +589,13 @@ impl Span {\n         )\n     }\n \n-    /// Returns a `Span` between the beginning of `self` to the beginning of `end`.\n+    /// Returns a `Span` from the beginning of `self` until the beginning of `end`.\n+    ///\n+    /// ```text\n+    ///     ____             ___\n+    ///     self lorem ipsum end\n+    ///     ^^^^^^^^^^^^^^^^^\n+    /// ```\n     pub fn until(self, end: Span) -> Span {\n         let span = self.data();\n         let end = end.data();"}, {"sha": "9135843045a2b465aa8f13300e7c95981da826f0", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -393,6 +393,7 @@\n #incremental = false\n \n # Build a multi-threaded rustc\n+# FIXME(#75760): Some UI tests fail when this option is enabled.\n #parallel-compiler = false\n \n # The default linker that will be hard-coded into the generated compiler for"}, {"sha": "6c343b17264404fb80a94cdbab26085adfe98794", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -78,8 +78,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: [MaybeUninit::UNINIT; CAPACITY],\n-            vals: [MaybeUninit::UNINIT; CAPACITY],\n+            keys: MaybeUninit::uninit_array(),\n+            vals: MaybeUninit::uninit_array(),\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninit(),\n             len: 0,\n@@ -111,7 +111,7 @@ impl<K, V> InternalNode<K, V> {\n     /// `len` of 0), there must be one initialized and valid edge. This function does not set up\n     /// such an edge.\n     unsafe fn new() -> Self {\n-        InternalNode { data: unsafe { LeafNode::new() }, edges: [MaybeUninit::UNINIT; 2 * B] }\n+        InternalNode { data: unsafe { LeafNode::new() }, edges: MaybeUninit::uninit_array() }\n     }\n }\n "}, {"sha": "5774ebb9b195ab5c0c66c91da96d458f007051e2", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -100,7 +100,6 @@\n #![feature(fn_traits)]\n #![feature(fundamental)]\n #![feature(inplace_iteration)]\n-#![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(libc)]\n@@ -135,7 +134,7 @@\n #![feature(unsized_locals)]\n #![feature(allocator_internals)]\n #![feature(slice_partition_dedup)]\n-#![feature(maybe_uninit_extra, maybe_uninit_slice)]\n+#![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait)]"}, {"sha": "5f7a9399453eaef1ca04aa3c4a94f09264450ea8", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -1511,6 +1511,9 @@ fn test_stable_pointers() {\n     // Test that, if we reserved enough space, adding and removing elements does not\n     // invalidate references into the vector (such as `v0`).  This test also\n     // runs in Miri, which would detect such problems.\n+    // Note that this test does *not* constitute a stable guarantee that all these functions do not\n+    // reallocate! Only what is explicitly documented at\n+    // <https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#guarantees> is stably guaranteed.\n     let mut v = Vec::with_capacity(128);\n     v.push(13);\n "}, {"sha": "13c6a75d58b5c101512308fac928784d7fa4cad9", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -4,11 +4,8 @@ use crate::usize;\n \n /// An iterator that links two iterators together, in a chain.\n ///\n-/// This `struct` is created by the [`chain`] method on [`Iterator`]. See its\n-/// documentation for more.\n-///\n-/// [`chain`]: trait.Iterator.html#method.chain\n-/// [`Iterator`]: trait.Iterator.html\n+/// This `struct` is created by [`Iterator::chain`]. See its documentation\n+/// for more.\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a854f70dcd0bac5a5371f16857058e943587b043", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -8,11 +8,8 @@ use super::super::{\n \n /// An iterator that iterates two other iterators simultaneously.\n ///\n-/// This `struct` is created by the [`zip`] method on [`Iterator`]. See its\n-/// documentation for more.\n-///\n-/// [`zip`]: trait.Iterator.html#method.zip\n-/// [`Iterator`]: trait.Iterator.html\n+/// This `struct` is created by [`Iterator::zip`]. See its documentation\n+/// for more.\n #[derive(Clone)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "e629d28eae163c018a99f44bee0960ff0e9644f6", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -306,14 +306,6 @@ impl<T> MaybeUninit<T> {\n         unsafe { MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init() }\n     }\n \n-    /// A promotable constant, equivalent to `uninit()`.\n-    #[unstable(\n-        feature = \"internal_uninit_const\",\n-        issue = \"none\",\n-        reason = \"hack to work around promotability\"\n-    )]\n-    pub const UNINIT: Self = Self::uninit();\n-\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,"}, {"sha": "3ff33fab431c4e6953a086787bf8910706e4910b", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -6680,6 +6680,8 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n ///       them from other data. You can obtain a pointer that is usable as `data`\n ///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * `data` must point to `len` consecutive properly initialized values of type `T`.\n+///\n /// * The memory referenced by the returned slice must not be mutated for the duration\n ///   of lifetime `'a`, except inside an `UnsafeCell`.\n ///\n@@ -6767,6 +6769,8 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///       them from other data. You can obtain a pointer that is usable as `data`\n ///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * `data` must point to `len` consecutive properly initialized values of type `T`.\n+///\n /// * The memory referenced by the returned slice must not be accessed through any other pointer\n ///   (not derived from the return value) for the duration of lifetime `'a`.\n ///   Both read and write accesses are forbidden."}, {"sha": "e0095e64faf312502398333fc434f609b437ef8e", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     cell::{Cell, UnsafeCell},\n     fmt,\n     marker::PhantomData,\n-    mem::{self, MaybeUninit},\n+    mem::MaybeUninit,\n     ops::{Deref, Drop},\n     panic::{RefUnwindSafe, UnwindSafe},\n     sync::Once,\n@@ -316,13 +316,7 @@ impl<T> SyncOnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn into_inner(mut self) -> Option<T> {\n-        // SAFETY: Safe because we immediately free `self` without dropping\n-        let inner = unsafe { self.take_inner() };\n-\n-        // Don't drop this `SyncOnceCell`. We just moved out one of the fields, but didn't set\n-        // the state to uninitialized.\n-        mem::forget(self);\n-        inner\n+        self.take()\n     }\n \n     /// Takes the value out of this `SyncOnceCell`, moving it back to an uninitialized state.\n@@ -348,22 +342,12 @@ impl<T> SyncOnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn take(&mut self) -> Option<T> {\n-        mem::take(self).into_inner()\n-    }\n-\n-    /// Takes the wrapped value out of a `SyncOnceCell`.\n-    /// Afterwards the cell is no longer initialized.\n-    ///\n-    /// Safety: The cell must now be free'd WITHOUT dropping. No other usages of the cell\n-    /// are valid. Only used by `into_inner` and `drop`.\n-    unsafe fn take_inner(&mut self) -> Option<T> {\n-        // The mutable reference guarantees there are no other threads that can observe us\n-        // taking out the wrapped value.\n-        // Right after this function `self` is supposed to be freed, so it makes little sense\n-        // to atomically set the state to uninitialized.\n         if self.is_initialized() {\n-            let value = mem::replace(&mut self.value, UnsafeCell::new(MaybeUninit::uninit()));\n-            Some(value.into_inner().assume_init())\n+            self.once = Once::new();\n+            // SAFETY: `self.value` is initialized and contains a valid `T`.\n+            // `self.once` is reset, so `is_initialized()` will be false again\n+            // which prevents the value from being read twice.\n+            unsafe { Some((&mut *self.value.get()).assume_init_read()) }\n         } else {\n             None\n         }\n@@ -416,9 +400,12 @@ impl<T> SyncOnceCell<T> {\n \n unsafe impl<#[may_dangle] T> Drop for SyncOnceCell<T> {\n     fn drop(&mut self) {\n-        // SAFETY: The cell is being dropped, so it can't be accessed again.\n-        // We also don't touch the `T`, which validates our usage of #[may_dangle].\n-        unsafe { self.take_inner() };\n+        if self.is_initialized() {\n+            // Safety: The cell is initialized and being dropped, so it can't\n+            // be accessed again. We also don't touch the `T` other than\n+            // dropping it, which validates our usage of #[may_dangle].\n+            unsafe { (&mut *self.value.get()).assume_init_drop() };\n+        }\n     }\n }\n "}, {"sha": "29ae338cb2ec74bab242190b78187c63d1388e87", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -191,6 +191,7 @@ struct WaiterQueue<'a> {\n \n impl Once {\n     /// Creates a new `Once` value.\n+    #[inline]\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n     #[rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\")]\n     pub const fn new() -> Once {"}, {"sha": "4b9f4ceb29c490f857eccb729d26289eb8dbb69d", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -836,15 +836,6 @@ impl DirEntryExt for fs::DirEntry {\n ///\n /// The `dst` path will be a symbolic link pointing to the `src` path.\n ///\n-/// # Note\n-///\n-/// On Windows, you must specify whether a symbolic link points to a file\n-/// or directory. Use `os::windows::fs::symlink_file` to create a\n-/// symbolic link to a file, or `os::windows::fs::symlink_dir` to create a\n-/// symbolic link to a directory. Additionally, the process must have\n-/// `SeCreateSymbolicLinkPrivilege` in order to be able to create a\n-/// symbolic link.\n-///\n /// # Examples\n ///\n /// ```no_run"}, {"sha": "68dc21b806c0fd70cb0be6555939bf9dc8b3a3bb", "filename": "library/std/src/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -774,15 +774,6 @@ impl DirEntryExt for fs::DirEntry {\n ///\n /// The `dst` path will be a symbolic link pointing to the `src` path.\n ///\n-/// # Note\n-///\n-/// On Windows, you must specify whether a symbolic link points to a file\n-/// or directory.  Use `os::windows::fs::symlink_file` to create a\n-/// symbolic link to a file, or `os::windows::fs::symlink_dir` to create a\n-/// symbolic link to a directory.  Additionally, the process must have\n-/// `SeCreateSymbolicLinkPrivilege` in order to be able to create a\n-/// symbolic link.\n-///\n /// # Examples\n ///\n /// ```no_run"}, {"sha": "5f78031e1c7cb29fbae6e44e874ab384afabde49", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -429,6 +429,8 @@ def download_stage0(self):\n             llvm_assertions = self.get_toml('assertions', 'llvm') == 'true'\n             if self.program_out_of_date(self.llvm_stamp(), llvm_sha + str(llvm_assertions)):\n                 self._download_ci_llvm(llvm_sha, llvm_assertions)\n+                for binary in [\"llvm-config\", \"FileCheck\"]:\n+                    self.fix_bin_or_dylib(\"{}/bin/{}\".format(self.llvm_root(), binary))\n                 with output(self.llvm_stamp()) as llvm_stamp:\n                     llvm_stamp.write(self.date + llvm_sha + str(llvm_assertions))\n "}, {"sha": "4df3ed502827ea80695b4d89fe4784abd8a5ca45", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -48,6 +48,11 @@ fn main() {\n         {\n             let y = Y { a: S };\n         }\n-        assert_eq!(CHECK, 2); // 2, dtor of Y is called\n+        assert_eq!(CHECK, 2); // 2, Y has no dtor\n+        {\n+            let u2 = U { a: 1 };\n+            std::mem::forget(u2);\n+        }\n+        assert_eq!(CHECK, 2); // 2, dtor of U *not* called for u2\n     }\n }"}, {"sha": "a0a2d0d659837a60bbe6e4b6a04ea34796938cfd", "filename": "src/test/ui/union/union-move.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.rs?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -0,0 +1,53 @@\n+//! Test the behavior of moving out of non-`Copy` union fields.\n+//! Avoid types that `Drop`, we want to focus on moving.\n+#![feature(untagged_unions)]\n+\n+use std::cell::RefCell;\n+\n+fn move_out<T>(x: T) {}\n+\n+union U1 {\n+    f1_nocopy: RefCell<i32>,\n+    f2_nocopy: RefCell<i32>,\n+    f3_copy: i32,\n+}\n+\n+union U2 {\n+    f1_nocopy: RefCell<i32>,\n+}\n+impl Drop for U2 {\n+    fn drop(&mut self) {}\n+}\n+\n+fn test1(x: U1) {\n+    // Moving out of a nocopy field prevents accessing other nocopy field.\n+    unsafe {\n+        move_out(x.f1_nocopy);\n+        move_out(x.f2_nocopy); //~ ERROR use of moved value: `x`\n+    }\n+}\n+\n+fn test2(x: U1) {\n+    // \"Moving\" out of copy field doesn't prevent later field accesses.\n+    unsafe {\n+        move_out(x.f3_copy);\n+        move_out(x.f2_nocopy); // no error\n+    }\n+}\n+\n+fn test3(x: U1) {\n+    // Moving out of a nocopy field prevents accessing other copy field.\n+    unsafe {\n+        move_out(x.f2_nocopy);\n+        move_out(x.f3_copy); //~ ERROR use of moved value: `x`\n+    }\n+}\n+\n+fn test4(x: U2) {\n+    // Cannot move out of union that implements `Drop`.\n+    unsafe {\n+        move_out(x.f1_nocopy); //~ ERROR cannot move out of type `U2`, which implements the `Drop`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5679192b64194fd9e5ca5350c7f342eb12201ebb", "filename": "src/test/ui/union/union-move.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Ftest%2Fui%2Funion%2Funion-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9a322a6fdd1e12fbe30441feaa4402e23efe303/src%2Ftest%2Fui%2Funion%2Funion-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.stderr?ref=f9a322a6fdd1e12fbe30441feaa4402e23efe303", "patch": "@@ -0,0 +1,35 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/union-move.rs:26:18\n+   |\n+LL | fn test1(x: U1) {\n+   |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n+...\n+LL |         move_out(x.f1_nocopy);\n+   |                  ----------- value moved here\n+LL |         move_out(x.f2_nocopy);\n+   |                  ^^^^^^^^^^^ value used here after move\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/union-move.rs:42:18\n+   |\n+LL | fn test3(x: U1) {\n+   |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n+...\n+LL |         move_out(x.f2_nocopy);\n+   |                  ----------- value moved here\n+LL |         move_out(x.f3_copy);\n+   |                  ^^^^^^^^^ value used here after move\n+\n+error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n+  --> $DIR/union-move.rs:49:18\n+   |\n+LL |         move_out(x.f1_nocopy);\n+   |                  ^^^^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  move occurs because `x.f1_nocopy` has type `RefCell<i32>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0382, E0509.\n+For more information about an error, try `rustc --explain E0382`."}]}