{"sha": "6fa9bf64d73d90ec35f30dcbb7d77f7418fff071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTliZjY0ZDczZDkwZWMzNWYzMGRjYmI3ZDc3Zjc0MThmZmYwNzE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-13T16:17:19Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-13T16:27:49Z"}, "message": "Use span_suggestion in ENTRY lint", "tree": {"sha": "ddc12e1eee5411de15b7d2ba3536a4fefe38fb6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc12e1eee5411de15b7d2ba3536a4fefe38fb6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071", "html_url": "https://github.com/rust-lang/rust/commit/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63329761fe66395acb17ccd89a6202c2b5dadab", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63329761fe66395acb17ccd89a6202c2b5dadab", "html_url": "https://github.com/rust-lang/rust/commit/f63329761fe66395acb17ccd89a6202c2b5dadab"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "d9fb7269be6b8f80f19094424745f729c24cb1bf", "filename": "src/entry.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071/src%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071/src%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fentry.rs?ref=6fa9bf64d73d90ec35f30dcbb7d77f7418fff071", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::codemap::Span;\n-use utils::{get_item_name, is_exp_equal, match_type, snippet, span_help_and_lint, walk_ptrs_ty};\n+use utils::{get_item_name, is_exp_equal, match_type, snippet, span_lint_and_then, walk_ptrs_ty};\n use utils::{BTREEMAP_PATH, HASHMAP_PATH};\n \n /// **What it does:** This lint checks for uses of `contains_key` + `insert` on `HashMap` or\n@@ -92,20 +92,21 @@ fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, key: &Expr, expr:\n             is_exp_equal(cx, key, &params[1])\n         ], {\n             let help = if sole_expr {\n-                format!(\"Consider using `{}.entry({}).or_insert({})`\",\n+                format!(\"{}.entry({}).or_insert({})\",\n                         snippet(cx, map.span, \"..\"),\n                         snippet(cx, params[1].span, \"..\"),\n                         snippet(cx, params[2].span, \"..\"))\n             }\n             else {\n-                format!(\"Consider using `{}.entry({})`\",\n+                format!(\"{}.entry({})\",\n                         snippet(cx, map.span, \"..\"),\n                         snippet(cx, params[1].span, \"..\"))\n             };\n \n-            span_help_and_lint(cx, MAP_ENTRY, span,\n-                               &format!(\"usage of `contains_key` followed by `insert` on `{}`\", kind),\n-                               &help);\n+            span_lint_and_then(cx, MAP_ENTRY, span,\n+                               &format!(\"usage of `contains_key` followed by `insert` on `{}`\", kind), |db| {\n+                db.span_suggestion(span, \"Consider using\", help.clone());\n+            });\n         }\n     }\n }"}, {"sha": "a746028200775828f882916507f2fd3c9eef6a0f", "filename": "tests/compile-fail/entry.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071/tests%2Fcompile-fail%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa9bf64d73d90ec35f30dcbb7d77f7418fff071/tests%2Fcompile-fail%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fentry.rs?ref=6fa9bf64d73d90ec35f30dcbb7d77f7418fff071", "patch": "@@ -11,32 +11,37 @@ fn foo() {}\n \n fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { m.insert(k, v); }\n-    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n-    //~^^HELP: Consider using `m.entry(k).or_insert(v)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n+    //~| HELP Consider\n+    //~| SUGGESTION m.entry(k).or_insert(v)\n }\n \n fn insert_if_absent1<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v); }\n-    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n-    //~^^HELP: Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n+    //~| HELP Consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { m.insert(k, v) } else { None };\n-    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n-    //~^^HELP: Consider using `m.entry(k).or_insert(v)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n+    //~| HELP Consider\n+    //~| SUGGESTION m.entry(k).or_insert(v)\n }\n \n fn insert_if_absent3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n-    //~^ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n-    //~^^HELP: Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on `HashMap`\n+    //~| HELP Consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n-    //~^ERROR: usage of `contains_key` followed by `insert` on `BTreeMap`\n-    //~^^HELP: Consider using `m.entry(k)`\n+    //~^ ERROR usage of `contains_key` followed by `insert` on `BTreeMap`\n+    //~| HELP Consider\n+    //~| SUGGESTION m.entry(k)\n }\n \n fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {"}]}