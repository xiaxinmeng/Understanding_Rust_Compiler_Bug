{"sha": "a658bb21e4b8742f227b07bfc3c26a0a34381285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NThiYjIxZTRiODc0MmYyMjdiMDdiZmMzYzI2YTBhMzQzODEyODU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-05-26T16:21:03Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-12T11:04:33Z"}, "message": "Paired source_info with extent; thread both through to pts where EndRegion will need construction.", "tree": {"sha": "fb9dd41eefbd95b14c4d1b5fb6d68dc9766d6346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9dd41eefbd95b14c4d1b5fb6d68dc9766d6346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a658bb21e4b8742f227b07bfc3c26a0a34381285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a658bb21e4b8742f227b07bfc3c26a0a34381285", "html_url": "https://github.com/rust-lang/rust/commit/a658bb21e4b8742f227b07bfc3c26a0a34381285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a658bb21e4b8742f227b07bfc3c26a0a34381285/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbed41a174aad44e069bec09bf1e502591c132ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbed41a174aad44e069bec09bf1e502591c132ae", "html_url": "https://github.com/rust-lang/rust/commit/cbed41a174aad44e069bec09bf1e502591c132ae"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "f3f366bb79238807907f2e515c28e587aa2ad6c0", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -23,8 +23,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                      -> BlockAnd<()> {\n         let Block { extent, opt_destruction_extent, span, stmts, expr, targeted_by_break } =\n             self.hir.mirror(ast_block);\n-        self.in_opt_scope(opt_destruction_extent, block, move |this| {\n-            this.in_scope(extent, block, move |this| {\n+        self.in_opt_scope(opt_destruction_extent.map(|de|(de, source_info)), block, move |this| {\n+            this.in_scope((extent, source_info), block, move |this| {\n                 if targeted_by_break {\n                     // This is a `break`-able block (currently only `catch { ... }`)\n                     let exit_block = this.cfg.start_new_block();\n@@ -69,16 +69,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // First we build all the statements in the block.\n         let mut let_extent_stack = Vec::with_capacity(8);\n         let outer_visibility_scope = this.visibility_scope;\n+        let source_info = this.source_info(span);\n         for stmt in stmts {\n             let Stmt { span: _, kind, opt_destruction_extent } = this.hir.mirror(stmt);\n             match kind {\n                 StmtKind::Expr { scope, expr } => {\n-                    unpack!(block = this.in_opt_scope(opt_destruction_extent, block, |this| {\n-                        this.in_scope(scope, block, |this| {\n-                            let expr = this.hir.mirror(expr);\n-                            this.stmt_expr(block, expr)\n-                        })\n-                    }));\n+                    unpack!(block = this.in_opt_scope(\n+                        opt_destruction_extent.map(|de|(de, source_info)), block, |this| {\n+                            this.in_scope((scope, source_info), block, |this| {\n+                                let expr = this.hir.mirror(expr);\n+                                this.stmt_expr(block, expr)\n+                            })\n+                        }));\n                 }\n                 StmtKind::Let { remainder_scope, init_scope, pattern, initializer } => {\n                     let tcx = this.hir.tcx();\n@@ -95,9 +97,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     // Evaluate the initializer, if present.\n                     if let Some(init) = initializer {\n                         unpack!(block = this.in_opt_scope(\n-                            opt_destruction_extent, block, move |this| {\n-                                this.in_scope(init_scope, block, move |this| {\n-                                    // FIXME #30046              ^~~~\n+                            opt_destruction_extent.map(|de|(de, source_info)), block, move |this| {\n+                                this.in_scope((init_scope, source_info), block, move |this| {\n+                                    // FIXME #30046                             ^~~~\n                                     this.expr_into_pattern(block, pattern, init)\n                                 })\n                             }));\n@@ -126,7 +128,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // Finally, we pop all the let scopes before exiting out from the scope of block\n         // itself.\n         for extent in let_extent_stack.into_iter().rev() {\n-            unpack!(block = this.pop_scope(extent, block));\n+            unpack!(block = this.pop_scope((extent, source_info), block));\n         }\n         // Restore the original visibility scope.\n         this.visibility_scope = outer_visibility_scope;"}, {"sha": "04c23215463dd9360cc0574c43d30f39a7c4e0f3", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = this.source_info(expr_span);\n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n-                this.in_scope(extent, block, |this| this.as_lvalue(block, value))\n+                this.in_scope((extent, source_info), block, |this| this.as_lvalue(block, value))\n             }\n             ExprKind::Field { lhs, name } => {\n                 let lvalue = unpack!(block = this.as_lvalue(block, lhs));"}, {"sha": "4679e0bb0a5c31fde0e632057a444e9a4e5ccf4f", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -56,6 +56,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let this = self;\n \n         if let ExprKind::Scope { extent, value } = expr.kind {\n+            let source_info = this.source_info(expr.span);\n+            let extent = (extent, source_info);\n             return this.in_scope(extent, block, |this| {\n                 this.as_operand(block, scope, value)\n             });"}, {"sha": "2512291f1a44f373a7c470d79004908baf7481ad", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -59,6 +59,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n+                let extent = (extent, source_info);\n                 this.in_scope(extent, block, |this| this.as_rvalue(block, scope, value))\n             }\n             ExprKind::Repeat { value, count } => {\n@@ -99,7 +100,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // to start, malloc some memory of suitable type (thus far, uninitialized):\n                 let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n                 this.cfg.push_assign(block, source_info, &result, box_);\n-                this.in_scope(value_extents, block, |this| {\n+                this.in_scope((value_extents, source_info), block, |this| {\n                     // schedule a shallow free of that memory, lest we unwind:\n                     this.schedule_box_free(expr_span, value_extents, &result, value.ty);\n                     // initialize the box contents:"}, {"sha": "faaa46a4a8fd9e697850f5ec96a3665a4b93e521", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -39,14 +39,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                block, temp_lifetime, expr);\n         let this = self;\n \n+        let expr_span = expr.span;\n+        let source_info = this.source_info(expr_span);\n         if let ExprKind::Scope { extent, value } = expr.kind {\n-            return this.in_scope(extent, block, |this| {\n+            return this.in_scope((extent, source_info), block, |this| {\n                 this.as_temp(block, temp_lifetime, value)\n             });\n         }\n \n         let expr_ty = expr.ty.clone();\n-        let expr_span = expr.span;\n         let temp = this.temp(expr_ty.clone(), expr_span);\n         let source_info = this.source_info(expr_span);\n "}, {"sha": "97d63ac6d1901c5a5555aa349a95e38767b81e3f", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -39,6 +39,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n+                let extent = (extent, source_info);\n                 this.in_scope(extent, block, |this| this.into(destination, block, value))\n             }\n             ExprKind::Block { body: ast_block } => {"}, {"sha": "3120ac21908246e1a7cd78b99f0e47f59565dbff", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -24,7 +24,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n                 let value = this.hir.mirror(value);\n-                this.in_scope(extent, block, |this| this.stmt_expr(block, value))\n+                this.in_scope((extent, source_info), block, |this| this.stmt_expr(block, value))\n             }\n             ExprKind::Assign { lhs, rhs } => {\n                 let lhs = this.hir.mirror(lhs);\n@@ -81,7 +81,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     *this.find_breakable_scope(expr_span, label);\n                 let continue_block = continue_block.expect(\n                     \"Attempted to continue in non-continuable breakable block\");\n-                this.exit_scope(expr_span, extent, block, continue_block);\n+                this.exit_scope(expr_span, (extent, source_info), block, continue_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Break { label, value } => {\n@@ -99,7 +99,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 } else {\n                     this.cfg.push_assign_unit(block, source_info, &destination)\n                 }\n-                this.exit_scope(expr_span, extent, block, break_block);\n+                this.exit_scope(expr_span, (extent, source_info), block, break_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Return { value } => {\n@@ -116,7 +116,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 };\n                 let extent = this.extent_of_return_scope();\n                 let return_block = this.return_block();\n-                this.exit_scope(expr_span, extent, block, return_block);\n+                this.exit_scope(expr_span, (extent, source_info), block, return_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::InlineAsm { asm, outputs, inputs } => {"}, {"sha": "eb1414d42e179668aef98940a483ff9e637f33ec", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -339,8 +339,9 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let call_site_extent = CodeExtent::CallSiteScope(body.id());\n     let arg_extent = CodeExtent::ParameterScope(body.id());\n     let mut block = START_BLOCK;\n-    unpack!(block = builder.in_scope(call_site_extent, block, |builder| {\n-        unpack!(block = builder.in_scope(arg_extent, block, |builder| {\n+    let source_info = builder.source_info(span);\n+    unpack!(block = builder.in_scope((call_site_extent, source_info), block, |builder| {\n+        unpack!(block = builder.in_scope((arg_extent, source_info), block, |builder| {\n             builder.args_and_body(block, &arguments, arg_extent, &body.value)\n         }));\n         // Attribute epilogue to function's closing brace"}, {"sha": "84b69bbf610f5a2ed8fcae2895a1ca8cf688c680", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a658bb21e4b8742f227b07bfc3c26a0a34381285/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=a658bb21e4b8742f227b07bfc3c26a0a34381285", "patch": "@@ -270,14 +270,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn in_opt_scope<F, R>(&mut self,\n-                              opt_extent: Option<CodeExtent>,\n+                              opt_extent: Option<(CodeExtent, SourceInfo)>,\n                               mut block: BasicBlock,\n                               f: F)\n                               -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_opt_scope(opt_extent={:?}, block={:?})\", opt_extent, block);\n-        if let Some(extent) = opt_extent { self.push_scope(extent); }\n+        if let Some(extent) = opt_extent { self.push_scope(extent.0); }\n         let rv = unpack!(block = f(self));\n         if let Some(extent) = opt_extent {\n             unpack!(block = self.pop_scope(extent, block));\n@@ -289,14 +289,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Convenience wrapper that pushes a scope and then executes `f`\n     /// to build its contents, popping the scope afterwards.\n     pub fn in_scope<F, R>(&mut self,\n-                          extent: CodeExtent,\n+                          extent: (CodeExtent, SourceInfo),\n                           mut block: BasicBlock,\n                           f: F)\n                           -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(extent={:?}, block={:?})\", extent, block);\n-        self.push_scope(extent);\n+        self.push_scope(extent.0);\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(extent, block));\n         debug!(\"in_scope: exiting extent={:?} block={:?}\", extent, block);\n@@ -324,15 +324,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// drops onto the end of `block` that are needed.  This must\n     /// match 1-to-1 with `push_scope`.\n     pub fn pop_scope(&mut self,\n-                     extent: CodeExtent,\n+                     extent: (CodeExtent, SourceInfo),\n                      mut block: BasicBlock)\n                      -> BlockAnd<()> {\n         debug!(\"pop_scope({:?}, {:?})\", extent, block);\n         // We need to have `cached_block`s available for all the drops, so we call diverge_cleanup\n         // to make sure all the `cached_block`s are filled in.\n         self.diverge_cleanup();\n         let scope = self.scopes.pop().unwrap();\n-        assert_eq!(scope.extent, extent);\n+        assert_eq!(scope.extent, extent.0);\n         unpack!(block = build_scope_drops(&mut self.cfg,\n                                           &scope,\n                                           &self.scopes,\n@@ -348,11 +348,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// module comment for details.\n     pub fn exit_scope(&mut self,\n                       span: Span,\n-                      extent: CodeExtent,\n+                      extent: (CodeExtent, SourceInfo),\n                       mut block: BasicBlock,\n                       target: BasicBlock) {\n         debug!(\"exit_scope(extent={:?}, block={:?}, target={:?})\", extent, block, target);\n-        let scope_count = 1 + self.scopes.iter().rev().position(|scope| scope.extent == extent)\n+        let scope_count = 1 + self.scopes.iter().rev().position(|scope| scope.extent == extent.0)\n                                                       .unwrap_or_else(||{\n             span_bug!(span, \"extent {:?} does not enclose\", extent)\n         });\n@@ -363,15 +363,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let mut rest = &mut self.scopes[(len - scope_count)..];\n         while let Some((scope, rest_)) = {rest}.split_last_mut() {\n             rest = rest_;\n-            block = if let Some(&e) = scope.cached_exits.get(&(target, extent)) {\n+            block = if let Some(&e) = scope.cached_exits.get(&(target, extent.0)) {\n                 self.cfg.terminate(block, scope.source_info(span),\n                                    TerminatorKind::Goto { target: e });\n                 return;\n             } else {\n                 let b = self.cfg.start_new_block();\n                 self.cfg.terminate(block, scope.source_info(span),\n                                    TerminatorKind::Goto { target: b });\n-                scope.cached_exits.insert((target, extent), b);\n+                scope.cached_exits.insert((target, extent.0), b);\n                 b\n             };\n             unpack!(block = build_scope_drops(&mut self.cfg,"}]}