{"sha": "669f2d4550602bdb41d569fc867b18680b3a495f", "node_id": "C_kwDOAAsO6NoAKDY2OWYyZDQ1NTA2MDJiZGI0MWQ1NjlmYzg2N2IxODY4MGIzYTQ5NWY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-14T20:14:36Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-09-14T20:26:37Z"}, "message": "Revert \"Rollup merge of #101496 - spastorino:lower_lifetime_binder_api_changes, r=oli-obk\"\n\nThis reverts commit 953a6b3da7016d41816951ad0930922f558c16d0, reversing\nchanges made to b5ffbd32d4838a460a73ce9aa106a4e1856e52c0.", "tree": {"sha": "287332cf380ca404781ebe9e197f443219f3deea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287332cf380ca404781ebe9e197f443219f3deea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669f2d4550602bdb41d569fc867b18680b3a495f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmMiOP4ACgkQgTGiTgx5\n769laRAAoeXiTYzleOV7LbpKV7GghrexxJUNaCl+QBqHzaL+5G+pEKeY/WYH5qmR\n9GhHTb+9SkYK0MTcXZS09296tFFztyrWMfvM+ckhUFPq5GoHfM1Hberz0CoFm4FN\nx6bv+LVyqsXW2oEK80KaS1IPbdYjZovjsKI/yw5xcHI2LenEcCTRQ8NioO6ETCmF\nMOKKgZZahNiTpj7nhZi37iqc1OW76cxKdOSJHois1gKzEvqXbRoRxn6Rhbv+2hXm\nwAcbEViByW9fup2zJF+ryWsvfOy8KDT7plBJE/bZZA2MITGYO7ydDaR/3nTSKZ5o\nM9npnLbYXNeDMuBgdnX2ybwv/p2/s5i6L4GXTGlQuOWQNUSH37Z3aCTbFhUSiAv0\nxLHo3MRBJcJMxyjSK8uqioSUp2jYgJT++sX8oLh8Os+/aPwYBWXLj1/BwWUQ6WoJ\nV8EUXoKp8KyTK2/2zPOExqStI6h1Uf3CgycvSdTltA+rSM/xVVMqxEn9/qA3nHzX\ngoaKxAYLVRpHmlsumUcCrEfIORDPmWDDBng/5jj9Y5tbutqzAtRvVg70qI4PmDpS\nTrbEYH9fUXuqo8cK4BrEyII3VnWL9ygj7wHr5u6MsxK14X2cS/Hq2v1v8Z4G9Hgq\nuiXLAiW7wwzkWDdBmn0pHl2RY/biMfbQXP6K58J40AT/5N6f1fk=\n=idIn\n-----END PGP SIGNATURE-----", "payload": "tree 287332cf380ca404781ebe9e197f443219f3deea\nparent a92669638461836f41f54f95e396f9082bb91391\nauthor Santiago Pastorino <spastorino@gmail.com> 1663186476 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1663187197 -0300\n\nRevert \"Rollup merge of #101496 - spastorino:lower_lifetime_binder_api_changes, r=oli-obk\"\n\nThis reverts commit 953a6b3da7016d41816951ad0930922f558c16d0, reversing\nchanges made to b5ffbd32d4838a460a73ce9aa106a4e1856e52c0.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669f2d4550602bdb41d569fc867b18680b3a495f", "html_url": "https://github.com/rust-lang/rust/commit/669f2d4550602bdb41d569fc867b18680b3a495f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669f2d4550602bdb41d569fc867b18680b3a495f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92669638461836f41f54f95e396f9082bb91391", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92669638461836f41f54f95e396f9082bb91391", "html_url": "https://github.com/rust-lang/rust/commit/a92669638461836f41f54f95e396f9082bb91391"}], "stats": {"total": 117, "additions": 51, "deletions": 66}, "files": [{"sha": "2993f1939ea809c4d9880ca9b9eb5f98b31d7e37", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/669f2d4550602bdb41d569fc867b18680b3a495f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669f2d4550602bdb41d569fc867b18680b3a495f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=669f2d4550602bdb41d569fc867b18680b3a495f", "patch": "@@ -855,22 +855,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             (body_id, generator_option)\n         });\n \n-        self.lower_lifetime_binder(closure_id, generic_params, |lctx, bound_generic_params| {\n-            // Lower outside new scope to preserve `is_in_loop_condition`.\n-            let fn_decl = lctx.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n-\n-            let c = lctx.arena.alloc(hir::Closure {\n-                binder: binder_clause,\n-                capture_clause,\n-                bound_generic_params,\n-                fn_decl,\n-                body: body_id,\n-                fn_decl_span: lctx.lower_span(fn_decl_span),\n-                movability: generator_option,\n-            });\n+        let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n+        // Lower outside new scope to preserve `is_in_loop_condition`.\n+        let fn_decl = self.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n+\n+        let c = self.arena.alloc(hir::Closure {\n+            binder: binder_clause,\n+            capture_clause,\n+            bound_generic_params,\n+            fn_decl,\n+            body: body_id,\n+            fn_decl_span: self.lower_span(fn_decl_span),\n+            movability: generator_option,\n+        });\n \n-            hir::ExprKind::Closure(c)\n-        })\n+        hir::ExprKind::Closure(c)\n     }\n \n     fn generator_movability_for_fn(\n@@ -957,24 +956,23 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             body_id\n         });\n \n-        self.lower_lifetime_binder(closure_id, generic_params, |lctx, bound_generic_params| {\n-            // We need to lower the declaration outside the new scope, because we\n-            // have to conserve the state of being inside a loop condition for the\n-            // closure argument types.\n-            let fn_decl =\n-                lctx.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n-\n-            let c = lctx.arena.alloc(hir::Closure {\n-                binder: binder_clause,\n-                capture_clause,\n-                bound_generic_params,\n-                fn_decl,\n-                body,\n-                fn_decl_span: lctx.lower_span(fn_decl_span),\n-                movability: None,\n-            });\n-            hir::ExprKind::Closure(c)\n-        })\n+        let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n+        // We need to lower the declaration outside the new scope, because we\n+        // have to conserve the state of being inside a loop condition for the\n+        // closure argument types.\n+        let fn_decl =\n+            self.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n+\n+        let c = self.arena.alloc(hir::Closure {\n+            binder: binder_clause,\n+            capture_clause,\n+            bound_generic_params,\n+            fn_decl,\n+            body,\n+            fn_decl_span: self.lower_span(fn_decl_span),\n+            movability: None,\n+        });\n+        hir::ExprKind::Closure(c)\n     }\n \n     /// Destructure the LHS of complex assignments."}, {"sha": "c96e419566da1737076fc1ecb5d63edfc3abedeb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/669f2d4550602bdb41d569fc867b18680b3a495f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669f2d4550602bdb41d569fc867b18680b3a495f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=669f2d4550602bdb41d569fc867b18680b3a495f", "patch": "@@ -839,31 +839,23 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// name resolver owing to lifetime elision; this also populates the resolver's node-id->def-id\n     /// map, so that later calls to `opt_node_id_to_def_id` that refer to these extra lifetime\n     /// parameters will be successful.\n-    #[instrument(level = \"debug\", skip(self, in_binder))]\n+    #[instrument(level = \"debug\", skip(self))]\n     #[inline]\n-    fn lower_lifetime_binder<R>(\n+    fn lower_lifetime_binder(\n         &mut self,\n         binder: NodeId,\n         generic_params: &[GenericParam],\n-        in_binder: impl FnOnce(&mut Self, &'hir [hir::GenericParam<'hir>]) -> R,\n-    ) -> R {\n+    ) -> &'hir [hir::GenericParam<'hir>] {\n+        let mut generic_params: Vec<_> = self.lower_generic_params_mut(generic_params).collect();\n         let extra_lifetimes = self.resolver.take_extra_lifetime_params(binder);\n         debug!(?extra_lifetimes);\n-        let extra_lifetimes: Vec<_> = extra_lifetimes\n-            .into_iter()\n-            .filter_map(|(ident, node_id, res)| {\n-                self.lifetime_res_to_generic_param(ident, node_id, res)\n-            })\n-            .collect();\n-\n-        let generic_params: Vec<_> = self\n-            .lower_generic_params_mut(generic_params)\n-            .chain(extra_lifetimes.into_iter())\n-            .collect();\n+        generic_params.extend(extra_lifetimes.into_iter().filter_map(|(ident, node_id, res)| {\n+            self.lifetime_res_to_generic_param(ident, node_id, res)\n+        }));\n         let generic_params = self.arena.alloc_from_iter(generic_params);\n         debug!(?generic_params);\n \n-        in_binder(self, generic_params)\n+        generic_params\n     }\n \n     fn with_dyn_type_scope<T>(&mut self, in_scope: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n@@ -1268,15 +1260,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(ref f) => {\n-                self.lower_lifetime_binder(t.id, &f.generic_params, |lctx, generic_params| {\n-                    hir::TyKind::BareFn(lctx.arena.alloc(hir::BareFnTy {\n-                        generic_params,\n-                        unsafety: lctx.lower_unsafety(f.unsafety),\n-                        abi: lctx.lower_extern(f.ext),\n-                        decl: lctx.lower_fn_decl(&f.decl, None, t.span, FnDeclKind::Pointer, None),\n-                        param_names: lctx.lower_fn_params_to_names(&f.decl),\n-                    }))\n-                })\n+                let generic_params = self.lower_lifetime_binder(t.id, &f.generic_params);\n+                hir::TyKind::BareFn(self.arena.alloc(hir::BareFnTy {\n+                    generic_params,\n+                    unsafety: self.lower_unsafety(f.unsafety),\n+                    abi: self.lower_extern(f.ext),\n+                    decl: self.lower_fn_decl(&f.decl, None, t.span, FnDeclKind::Pointer, None),\n+                    param_names: self.lower_fn_params_to_names(&f.decl),\n+                }))\n             }\n             TyKind::Never => hir::TyKind::Never,\n             TyKind::Tup(ref tys) => hir::TyKind::Tup(\n@@ -2246,14 +2237,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &PolyTraitRef,\n         itctx: &mut ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n-        self.lower_lifetime_binder(\n-            p.trait_ref.ref_id,\n-            &p.bound_generic_params,\n-            |lctx, bound_generic_params| {\n-                let trait_ref = lctx.lower_trait_ref(&p.trait_ref, itctx);\n-                hir::PolyTraitRef { bound_generic_params, trait_ref, span: lctx.lower_span(p.span) }\n-            },\n-        )\n+        let bound_generic_params =\n+            self.lower_lifetime_binder(p.trait_ref.ref_id, &p.bound_generic_params);\n+        let trait_ref = self.lower_trait_ref(&p.trait_ref, itctx);\n+        hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n     }\n \n     fn lower_mt(&mut self, mt: &MutTy, itctx: &mut ImplTraitContext) -> hir::MutTy<'hir> {"}]}