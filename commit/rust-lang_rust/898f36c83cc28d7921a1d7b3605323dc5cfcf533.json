{"sha": "898f36c83cc28d7921a1d7b3605323dc5cfcf533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OGYzNmM4M2NjMjhkNzkyMWExZDdiMzYwNTMyM2RjNWNmY2Y1MzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-10T19:40:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-10T19:40:48Z"}, "message": "Auto merge of #65153 - da-x:issue-58017, r=petrochenkov\n\nImprove message when attempting to instantiate tuple structs with private fields\n\nFixes #58017, fixes #39703.\n\n```\nerror[E0603]: tuple struct `Error` is private\n  --> main.rs:22:16\n   |\n2  |     pub struct Error(usize, pub usize, usize);\n   |                      -----             ----- field is private\n   |                      |\n   |                      field is private\n...\n22 |     let x = a::Error(3, 1, 2);\n   |                ^^^^^\n   |\n   = note: a tuple struct constructor is private if any of its fields is private\n```", "tree": {"sha": "a961ad741aa7a3be0c83f31ee8693234fcab6fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a961ad741aa7a3be0c83f31ee8693234fcab6fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898f36c83cc28d7921a1d7b3605323dc5cfcf533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898f36c83cc28d7921a1d7b3605323dc5cfcf533", "html_url": "https://github.com/rust-lang/rust/commit/898f36c83cc28d7921a1d7b3605323dc5cfcf533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898f36c83cc28d7921a1d7b3605323dc5cfcf533/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58b54911fabcd1b328fab78014b6833a4e8cfaa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/58b54911fabcd1b328fab78014b6833a4e8cfaa3", "html_url": "https://github.com/rust-lang/rust/commit/58b54911fabcd1b328fab78014b6833a4e8cfaa3"}, {"sha": "48f8beddd8e28a5bbdf1334f2c1de402196fa7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f8beddd8e28a5bbdf1334f2c1de402196fa7f1", "html_url": "https://github.com/rust-lang/rust/commit/48f8beddd8e28a5bbdf1334f2c1de402196fa7f1"}], "stats": {"total": 342, "additions": 222, "deletions": 120}, "files": [{"sha": "6dab9a404b74adbd23695ffe08b2e8cf3ba570a9", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -33,6 +33,7 @@ use syntax::source_map;\n use syntax::edition::Edition;\n use syntax::parse::source_file_to_stream;\n use syntax::parse::parser::emit_unclosed_delims;\n+use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, FileName};\n use rustc_index::bit_set::BitSet;\n@@ -424,8 +425,8 @@ impl cstore::CStore {\n         self.get_crate_data(cnum).root.edition\n     }\n \n-    pub fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name> {\n-        self.get_crate_data(def.krate).get_struct_field_names(def.index)\n+    pub fn struct_field_names_untracked(&self, def: DefId, sess: &Session) -> Vec<Spanned<Symbol>> {\n+        self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }\n \n     pub fn ctor_kind_untracked(&self, def: DefId) -> def::CtorKind {"}, {"sha": "3b655023d28e412c3856ef534b7c8f62c96975fa", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -29,7 +29,7 @@ use std::u32;\n use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n-use syntax::source_map;\n+use syntax::source_map::{self, respan, Spanned};\n use syntax::symbol::{Symbol, sym};\n use syntax::ext::base::{MacroKind, SyntaxExtensionKind, SyntaxExtension};\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, symbol::{InternedString}};\n@@ -1021,11 +1021,11 @@ impl<'a, 'tcx> CrateMetadata {\n         Lrc::from(self.get_attributes(&item, sess))\n     }\n \n-    pub fn get_struct_field_names(&self, id: DefIndex) -> Vec<ast::Name> {\n+    pub fn get_struct_field_names(&self, id: DefIndex, sess: &Session) -> Vec<Spanned<ast::Name>> {\n         self.entry(id)\n             .children\n             .decode(self)\n-            .map(|index| self.item_name(index))\n+            .map(|index| respan(self.get_span(index, sess), self.item_name(index)))\n             .collect()\n     }\n "}, {"sha": "030f9b97eb8b975a575757a214fb63aa2a1d8328", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -38,6 +38,7 @@ use syntax::ext::hygiene::ExpnId;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::{span_err, struct_span_err};\n+use syntax::source_map::{respan, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n \n@@ -301,7 +302,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n-    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Name>) {\n+    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Name>>) {\n         if !field_names.is_empty() {\n             self.r.field_names.insert(def_id, field_names);\n         }\n@@ -752,12 +753,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 }\n \n                 // Record field names for error reporting.\n-                let field_names = struct_def.fields().iter().filter_map(|field| {\n+                let field_names = struct_def.fields().iter().map(|field| {\n                     let field_vis = self.resolve_visibility(&field.vis);\n                     if ctor_vis.is_at_least(field_vis, &*self.r) {\n                         ctor_vis = field_vis;\n                     }\n-                    field.ident.map(|ident| ident.name)\n+                    respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n                 }).collect();\n                 let item_def_id = self.r.definitions.local_def_id(item.id);\n                 self.insert_field_names(item_def_id, field_names);\n@@ -779,9 +780,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n                 // Record field names for error reporting.\n-                let field_names = vdata.fields().iter().filter_map(|field| {\n+                let field_names = vdata.fields().iter().map(|field| {\n                     self.resolve_visibility(&field.vis);\n-                    field.ident.map(|ident| ident.name)\n+                    respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n                 }).collect();\n                 let item_def_id = self.r.definitions.local_def_id(item.id);\n                 self.insert_field_names(item_def_id, field_names);\n@@ -895,7 +896,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // Record some extra data for better diagnostics.\n         match res {\n             Res::Def(DefKind::Struct, def_id) | Res::Def(DefKind::Union, def_id) => {\n-                let field_names = self.r.cstore.struct_field_names_untracked(def_id);\n+                let field_names =\n+                    self.r.cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n             Res::Def(DefKind::Method, def_id) => {"}, {"sha": "ace9903a835fdc9ecd1d1bd73b4f256eddafba97", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -497,7 +497,8 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                         Res::Def(DefKind::Struct, did) | Res::Def(DefKind::Union, did)\n                                 if resolution.unresolved_segments() == 0 => {\n                             if let Some(field_names) = self.r.field_names.get(&did) {\n-                                if field_names.iter().any(|&field_name| ident.name == field_name) {\n+                                if field_names.iter()\n+                                        .any(|&field_name| ident.name == field_name.node) {\n                                     return Some(AssocSuggestion::Field);\n                                 }\n                             }"}, {"sha": "ce4126b511df6135e3c72c3c18350b3f85f1e2e2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -29,7 +29,7 @@ use rustc::hir::def::{self, DefKind, PartialRes, CtorKind, CtorOf, NonMacroAttrK\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::{TraitMap, GlobMap};\n-use rustc::ty;\n+use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n use rustc::span_bug;\n \n@@ -46,6 +46,7 @@ use syntax::attr;\n use syntax::ast::{CRATE_NODE_ID, Crate};\n use syntax::ast::{ItemKind, Path};\n use syntax::{struct_span_err, unwrap_or};\n+use syntax::source_map::Spanned;\n \n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Applicability, DiagnosticBuilder};\n@@ -829,7 +830,7 @@ pub struct Resolver<'a> {\n \n     /// Names of fields of an item `DefId` accessible with dot syntax.\n     /// Used for hints during error reporting.\n-    field_names: FxHashMap<DefId, Vec<Name>>,\n+    field_names: FxHashMap<DefId, Vec<Spanned<Name>>>,\n \n     /// All imports known to succeed or fail.\n     determined_imports: Vec<&'a ImportDirective<'a>>,\n@@ -994,7 +995,7 @@ impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {\n     fn as_mut(&mut self) -> &mut Resolver<'a> { self }\n }\n \n-impl<'a, 'b> ty::DefIdTree for &'a Resolver<'b> {\n+impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n@@ -2386,23 +2387,17 @@ impl<'a> Resolver<'a> {\n                     binding.res().descr(),\n                     ident.name,\n                 );\n-                // FIXME: use the ctor's `def_id` to check wether any of the fields is not visible\n-                match binding.kind {\n-                    NameBindingKind::Res(Res::Def(DefKind::Ctor(\n-                        CtorOf::Struct,\n-                        CtorKind::Fn,\n-                    ), _def_id), _) => {\n-                        err.note(\"a tuple struct constructor is private if any of its fields \\\n-                                  is private\");\n-                    }\n-                    NameBindingKind::Res(Res::Def(DefKind::Ctor(\n-                        CtorOf::Variant,\n-                        CtorKind::Fn,\n-                    ), _def_id), _) => {\n-                        err.note(\"a tuple variant constructor is private if any of its fields \\\n-                                  is private\");\n+                if let NameBindingKind::Res(\n+                    Res::Def(DefKind::Ctor(CtorOf::Struct, CtorKind::Fn), ctor_def_id), _\n+                ) = binding.kind {\n+                    let def_id = (&*self).parent(ctor_def_id).expect(\"no parent for a constructor\");\n+                    if let Some(fields) = self.field_names.get(&def_id) {\n+                        let first_field = fields.first().expect(\"empty field list in the map\");\n+                        err.span_label(\n+                            fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)),\n+                            \"a tuple struct constructor is private if any of its fields is private\",\n+                        );\n                     }\n-                    _ => {}\n                 }\n                 err.emit();\n             }"}, {"sha": "c1b90d7c6bf23ec8a5239f039cb9a411fecdce8d", "filename": "src/test/ui/privacy/privacy5.stderr", "status": "modified", "additions": 168, "deletions": 72, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -1,386 +1,482 @@\n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:51:16\n    |\n+LL |     pub struct A(());\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a = a::A(());\n    |                ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:52:16\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let b = a::B(2);\n    |                ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:53:16\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let c = a::C(2, 3);\n    |                ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:56:12\n    |\n+LL |     pub struct A(());\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::A(()) = a;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:57:12\n    |\n+LL |     pub struct A(());\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::A(_) = a;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:58:18\n    |\n+LL |     pub struct A(());\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match a { a::A(()) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:59:18\n    |\n+LL |     pub struct A(());\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match a { a::A(_) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:61:12\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::B(_) = b;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:62:12\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::B(_b) = b;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:63:18\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match b { a::B(_) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:64:18\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match b { a::B(_b) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:65:18\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:65:32\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n    |                                ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:68:12\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::C(_, _) = c;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:69:12\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::C(_a, _) = c;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:70:12\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::C(_, _b) = c;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:71:12\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a::C(_a, _b) = c;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:72:18\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match c { a::C(_, _) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:73:18\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match c { a::C(_a, _) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:74:18\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match c { a::C(_, _b) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:75:18\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     match c { a::C(_a, _b) => {} }\n    |                  ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:83:17\n    |\n+LL |     pub struct A(());\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let a2 = a::A;\n    |                 ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:84:17\n    |\n+LL |     pub struct B(isize);\n+   |                  ----- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let b2 = a::B;\n    |                 ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:85:17\n    |\n+LL |     pub struct C(pub isize, isize);\n+   |                  ---------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let c2 = a::C;\n    |                 ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:90:20\n    |\n LL |     let a = other::A(());\n    |                    ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct A(());\n+   |              -- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:91:20\n    |\n LL |     let b = other::B(2);\n    |                    ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:92:20\n    |\n LL |     let c = other::C(2, 3);\n    |                    ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:95:16\n    |\n LL |     let other::A(()) = a;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct A(());\n+   |              -- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:96:16\n    |\n LL |     let other::A(_) = a;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct A(());\n+   |              -- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:97:22\n    |\n LL |     match a { other::A(()) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct A(());\n+   |              -- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:98:22\n    |\n LL |     match a { other::A(_) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct A(());\n+   |              -- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:100:16\n    |\n LL |     let other::B(_) = b;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:101:16\n    |\n LL |     let other::B(_b) = b;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:102:22\n    |\n LL |     match b { other::B(_) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:103:22\n    |\n LL |     match b { other::B(_b) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:104:22\n    |\n LL |     match b { other::B(1) => {} other::B(_) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:104:40\n    |\n LL |     match b { other::B(1) => {} other::B(_) => {} }\n    |                                        ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:107:16\n    |\n LL |     let other::C(_, _) = c;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:108:16\n    |\n LL |     let other::C(_a, _) = c;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:109:16\n    |\n LL |     let other::C(_, _b) = c;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:110:16\n    |\n LL |     let other::C(_a, _b) = c;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:111:22\n    |\n LL |     match c { other::C(_, _) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:112:22\n    |\n LL |     match c { other::C(_a, _) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:113:22\n    |\n LL |     match c { other::C(_, _b) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:114:22\n    |\n LL |     match c { other::C(_a, _b) => {} }\n    |                      ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `A` is private\n   --> $DIR/privacy5.rs:122:21\n    |\n LL |     let a2 = other::A;\n    |                     ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct A(());\n+   |              -- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `B` is private\n   --> $DIR/privacy5.rs:123:21\n    |\n LL |     let b2 = other::B;\n    |                     ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct B(isize);\n+   |              ----- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `C` is private\n   --> $DIR/privacy5.rs:124:21\n    |\n LL |     let c2 = other::C;\n    |                     ^\n+   | \n+  ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct C(pub isize, isize);\n+   |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n error: aborting due to 48 previous errors\n "}, {"sha": "d5311fde2e79e8123e48275117f104bc9a6c97f5", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -37,50 +37,60 @@ LL | use m::S;\n error[E0603]: tuple struct `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:18:12\n    |\n+LL |         pub(in m) struct Z(pub(in m::n) u8);\n+   |                            --------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |         n::Z;\n    |            ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `S` is private\n   --> $DIR/privacy-struct-ctor.rs:29:8\n    |\n+LL |     pub struct S(u8);\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     m::S;\n    |        ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `S` is private\n   --> $DIR/privacy-struct-ctor.rs:31:19\n    |\n+LL |     pub struct S(u8);\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     let _: S = m::S(2);\n    |                   ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:35:11\n    |\n+LL |         pub(in m) struct Z(pub(in m::n) u8);\n+   |                            --------------- a tuple struct constructor is private if any of its fields is private\n+...\n LL |     m::n::Z;\n    |           ^\n-   |\n-   = note: a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `S` is private\n   --> $DIR/privacy-struct-ctor.rs:41:16\n    |\n LL |     xcrate::m::S;\n    |                ^\n+   | \n+  ::: $DIR/auxiliary/privacy-struct-ctor.rs:2:18\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL |     pub struct S(u8);\n+   |                  -- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: tuple struct `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:45:19\n    |\n LL |     xcrate::m::n::Z;\n    |                   ^\n+   | \n+  ::: $DIR/auxiliary/privacy-struct-ctor.rs:5:28\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL |         pub(in m) struct Z(pub(in m::n) u8);\n+   |                            --------------- a tuple struct constructor is private if any of its fields is private\n \n error: aborting due to 10 previous errors\n "}, {"sha": "15f97f7e1d6f886962dc46f0827fa1036dc9a1e9", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -15,8 +15,11 @@ error[E0603]: tuple struct `TupleStruct` is private\n    |\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n    |                                ^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/structs.rs:13:24\n    |\n-   = note: a tuple struct constructor is private if any of its fields is private\n+LL | pub struct TupleStruct(pub u16, pub u16);\n+   |                        ---------------- a tuple struct constructor is private if any of its fields is private\n \n error[E0603]: unit struct `UnitStruct` is private\n   --> $DIR/struct.rs:32:32"}, {"sha": "d9d6ea21b8bd4dccce0e8365873285e99ed9e6b6", "filename": "src/test/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/898f36c83cc28d7921a1d7b3605323dc5cfcf533/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=898f36c83cc28d7921a1d7b3605323dc5cfcf533", "patch": "@@ -3,8 +3,6 @@ error[E0603]: tuple variant `Tuple` is private\n    |\n LL |     let variant_tuple = NonExhaustiveVariants::Tuple(640);\n    |                                                ^^^^^\n-   |\n-   = note: a tuple variant constructor is private if any of its fields is private\n \n error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:14:47\n@@ -23,16 +21,12 @@ error[E0603]: tuple variant `Tuple` is private\n    |\n LL |         NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n    |                                ^^^^^\n-   |\n-   = note: a tuple variant constructor is private if any of its fields is private\n \n error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:26:35\n    |\n LL |     if let NonExhaustiveVariants::Tuple(fe_tpl) = variant_struct {\n    |                                   ^^^^^\n-   |\n-   = note: a tuple variant constructor is private if any of its fields is private\n \n error[E0639]: cannot create non-exhaustive variant using struct expression\n   --> $DIR/variant.rs:8:26"}]}