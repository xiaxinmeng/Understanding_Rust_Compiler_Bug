{"sha": "8b731db6ba15babda5f70cb2f93a18504f8a772d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNzMxZGI2YmExNWJhYmRhNWY3MGNiMmY5M2ExODUwNGY4YTc3MmQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-12T04:45:12Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-12T04:45:12Z"}, "message": "Output xml header and footer only once", "tree": {"sha": "c68d81185e3812b19bdb9401d4c971f05c9b1ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68d81185e3812b19bdb9401d4c971f05c9b1ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b731db6ba15babda5f70cb2f93a18504f8a772d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b731db6ba15babda5f70cb2f93a18504f8a772d", "html_url": "https://github.com/rust-lang/rust/commit/8b731db6ba15babda5f70cb2f93a18504f8a772d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b731db6ba15babda5f70cb2f93a18504f8a772d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a2f01483bec380a9af33601d176aae9d74103b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2f01483bec380a9af33601d176aae9d74103b1", "html_url": "https://github.com/rust-lang/rust/commit/0a2f01483bec380a9af33601d176aae9d74103b1"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "330bec55588ff22e7bda300be0c21df25022d9ba", "filename": "src/bin/main.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b731db6ba15babda5f70cb2f93a18504f8a772d/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b731db6ba15babda5f70cb2f93a18504f8a772d/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=8b731db6ba15babda5f70cb2f93a18504f8a772d", "patch": "@@ -22,13 +22,16 @@ use std::{env, error};\n \n use getopts::{Matches, Options};\n \n+use rustfmt::checkstyle;\n use rustfmt::config::file_lines::FileLines;\n use rustfmt::config::{get_toml_path, Color, Config, WriteMode};\n use rustfmt::{run, FileName, Input, Summary};\n \n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n \n+const WRITE_MODE_LIST: &str = \"[replace|overwrite|display|plain|diff|coverage|checkstyle]\";\n+\n /// Rustfmt operations.\n enum Operation {\n     /// Format files and their child modules.\n@@ -87,8 +90,8 @@ impl CliOptions {\n                 options.write_mode = Some(write_mode);\n             } else {\n                 return Err(FmtError::from(format!(\n-                    \"Invalid write-mode: {}\",\n-                    write_mode\n+                    \"Invalid write-mode: {}, expected one of {}\",\n+                    write_mode, WRITE_MODE_LIST\n                 )));\n             }\n         }\n@@ -206,7 +209,7 @@ fn make_opts() -> Options {\n         \"\",\n         \"write-mode\",\n         \"How to write output (not usable when piping from stdin)\",\n-        \"[replace|overwrite|display|plain|diff|coverage|checkstyle]\",\n+        WRITE_MODE_LIST,\n     );\n \n     opts\n@@ -260,7 +263,10 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             let mut error_summary = Summary::default();\n             if config.version_meets_requirement(&mut error_summary) {\n+                let mut out = &mut stdout();\n+                checkstyle::output_header(&mut out, config.write_mode())?;\n                 error_summary.add(run(Input::Text(input), &config));\n+                checkstyle::output_footer(&mut out, config.write_mode())?;\n             }\n \n             Ok(error_summary)\n@@ -294,6 +300,8 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                 }\n             }\n \n+            let mut out = &mut stdout();\n+            checkstyle::output_header(&mut out, config.write_mode())?;\n             let mut error_summary = Summary::default();\n             for file in files {\n                 if !file.exists() {\n@@ -327,6 +335,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                     error_summary.add(run(Input::File(file), &config));\n                 }\n             }\n+            checkstyle::output_footer(&mut out, config.write_mode())?;\n \n             // If we were given a path via dump-minimal-config, output any options\n             // that were used during formatting as TOML."}, {"sha": "c14737a8ebfef64979360d885964373a455d8360", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b731db6ba15babda5f70cb2f93a18504f8a772d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b731db6ba15babda5f70cb2f93a18504f8a772d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8b731db6ba15babda5f70cb2f93a18504f8a772d", "patch": "@@ -46,7 +46,6 @@ use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n \n-use checkstyle::{output_footer, output_header};\n use comment::{CharClasses, FullCodeCharKind, LineClasses};\n use issues::{BadIssueSeeker, Issue};\n use shape::Indent;\n@@ -61,7 +60,7 @@ mod utils;\n \n mod attr;\n mod chains;\n-mod checkstyle;\n+pub mod checkstyle;\n mod closures;\n pub mod codemap;\n mod comment;\n@@ -883,11 +882,8 @@ pub enum Input {\n \n pub fn run(input: Input, config: &Config) -> Summary {\n     let out = &mut stdout();\n-    output_header(out, config.write_mode()).ok();\n     match format_input(input, config, Some(out)) {\n         Ok((summary, _, report)) => {\n-            output_footer(out, config.write_mode()).ok();\n-\n             if report.has_warnings() {\n                 match term::stderr() {\n                     Some(ref t)"}]}