{"sha": "ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjNhMTg1MDBkZDRhZDA0MmMyMzQwYjNlNmE1YWFlY2RjOGUxZGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T21:58:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` `Rib::bindings`", "tree": {"sha": "6fefbfeec2b96001e00471931e4e87655205f29c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fefbfeec2b96001e00471931e4e87655205f29c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "html_url": "https://github.com/rust-lang/rust/commit/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be67aceaeb849233daf6a3ee765be67f5e797e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/be67aceaeb849233daf6a3ee765be67f5e797e30", "html_url": "https://github.com/rust-lang/rust/commit/be67aceaeb849233daf6a3ee765be67f5e797e30"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "c2058a172ed0de4f754e97a88e26076753a60297", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "patch": "@@ -494,6 +494,7 @@ pub fn get_symbol(data: &[u8], id: ast::NodeId) -> ~str {\n }\n \n // Something that a name can resolve to.\n+#[deriving(Clone)]\n pub enum DefLike {\n     DlDef(ast::Def),\n     DlImpl(ast::DefId),"}, {"sha": "f0c9ccf59734879a066984f0140f2b318287c4b7", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ea63a18500dd4ad042c2340b3e6a5aaecdc8e1df", "patch": "@@ -284,15 +284,15 @@ enum DuplicateCheckingMode {\n \n /// One local scope.\n struct Rib {\n-    bindings: @mut HashMap<Name, DefLike>,\n+    bindings: RefCell<HashMap<Name, DefLike>>,\n     self_binding: @mut Option<DefLike>,\n     kind: RibKind,\n }\n \n impl Rib {\n     fn new(kind: RibKind) -> Rib {\n         Rib {\n-            bindings: @mut HashMap::new(),\n+            bindings: RefCell::new(HashMap::new()),\n             self_binding: @mut None,\n             kind: kind\n         }\n@@ -3494,8 +3494,12 @@ impl Resolver {\n         let mut i = ribs.len();\n         while i != 0 {\n             i -= 1;\n-            match ribs[i].bindings.find(&name) {\n-                Some(&def_like) => {\n+            let binding_opt = {\n+                let bindings = ribs[i].bindings.borrow();\n+                bindings.get().find_copy(&name)\n+            };\n+            match binding_opt {\n+                Some(def_like) => {\n                     return self.upvarify(ribs, i, def_like, span,\n                                          allow_capturing_self);\n                 }\n@@ -3572,8 +3576,10 @@ impl Resolver {\n                 self.type_ribs.push(self_type_rib);\n                 // plain insert (no renaming)\n                 let name = self.type_self_ident.name;\n-                self_type_rib.bindings.insert(name,\n-                                              DlDef(DefSelfTy(item.id)));\n+                {\n+                    let mut bindings = self_type_rib.bindings.borrow_mut();\n+                    bindings.get().insert(name, DlDef(DefSelfTy(item.id)));\n+                }\n \n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_type_parameter_rib(HasTypeParameters(generics,\n@@ -3710,7 +3716,9 @@ impl Resolver {\n                     self.record_def(type_parameter.id,\n                                     (DefTyParamBinder(node_id), AllPublic));\n                     // plain insert (no renaming)\n-                    function_type_rib.bindings.insert(ident.name, def_like);\n+                    let mut bindings = function_type_rib.bindings\n+                                                        .borrow_mut();\n+                    bindings.get().insert(ident.name, def_like);\n                 }\n             }\n \n@@ -4333,8 +4341,12 @@ impl Resolver {\n                                     let this = &mut *self;\n                                     let last_rib = this.value_ribs[\n                                             this.value_ribs.len() - 1];\n-                                    last_rib.bindings.insert(renamed,\n-                                                             DlDef(def));\n+                                    {\n+                                        let mut bindings =\n+                                            last_rib.bindings.borrow_mut();\n+                                        bindings.get().insert(renamed,\n+                                                              DlDef(def));\n+                                    }\n                                     bindings_list.insert(renamed, pat_id);\n                                 }\n                                 Some(b) => {\n@@ -4354,8 +4366,12 @@ impl Resolver {\n                                     let this = &mut *self;\n                                     let last_rib = this.value_ribs[\n                                             this.value_ribs.len() - 1];\n-                                    last_rib.bindings.insert(renamed,\n-                                                             DlDef(def));\n+                                    {\n+                                        let mut bindings =\n+                                            last_rib.bindings.borrow_mut();\n+                                        bindings.get().insert(renamed,\n+                                                              DlDef(def));\n+                                    }\n                                 }\n                             }\n                         }\n@@ -4911,7 +4927,8 @@ impl Resolver {\n         let mut j = this.value_ribs.len();\n         while j != 0 {\n             j -= 1;\n-            for (&k, _) in this.value_ribs[j].bindings.iter() {\n+            let bindings = this.value_ribs[j].bindings.borrow();\n+            for (&k, _) in bindings.get().iter() {\n                 maybes.push(interner_get(k));\n                 values.push(uint::max_value);\n             }\n@@ -5060,7 +5077,10 @@ impl Resolver {\n                     let def_like = DlDef(DefLabel(expr.id));\n                     let rib = this.label_ribs[this.label_ribs.len() - 1];\n                     // plain insert (no renaming)\n-                    rib.bindings.insert(label.name, def_like);\n+                    {\n+                        let mut bindings = rib.bindings.borrow_mut();\n+                        bindings.get().insert(label.name, def_like);\n+                    }\n \n                     visit::walk_expr(this, expr, ());\n                 })"}]}