{"sha": "120989195f0a20e871bf3a9fd91f8fc93ca76d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMDk4OTE5NWYwYTIwZTg3MWJmM2E5ZmQ5MWY4ZmM5M2NhNzZkNTY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-23T20:05:39Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-05T14:54:49Z"}, "message": "Convert unknown_features lint into an error", "tree": {"sha": "dbe02b656df9c98315deec6d43dc085c498589b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbe02b656df9c98315deec6d43dc085c498589b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120989195f0a20e871bf3a9fd91f8fc93ca76d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120989195f0a20e871bf3a9fd91f8fc93ca76d56", "html_url": "https://github.com/rust-lang/rust/commit/120989195f0a20e871bf3a9fd91f8fc93ca76d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120989195f0a20e871bf3a9fd91f8fc93ca76d56/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47619c0dc7f2048dbd5287a57182da50de0f4f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/47619c0dc7f2048dbd5287a57182da50de0f4f1a", "html_url": "https://github.com/rust-lang/rust/commit/47619c0dc7f2048dbd5287a57182da50de0f4f1a"}], "stats": {"total": 822, "additions": 247, "deletions": 575}, "files": [{"sha": "a3c0688dcc8edcaad3955249d64f03ba0cd7ab8c", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -1918,6 +1918,17 @@ fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n ```\n \"##,\n \n+E0635: r##\"\n+The `#![feature]` attribute specified an unknown feature.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0635\n+#![feature(nonexistent_rust_feature)] // error: unknown feature\n+```\n+\n+\"##,\n+\n E0636: r##\"\n A `#![feature]` attribute was declared multiple times.\n "}, {"sha": "590b59568c4aa398a5f9f0371e4f7597efc45db8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -105,12 +105,6 @@ declare_lint! {\n     \"unused features found in crate-level #[feature] directives\"\n }\n \n-declare_lint! {\n-    pub UNKNOWN_FEATURES,\n-    Deny,\n-    \"unknown features found in crate-level #[feature] directives\"\n-}\n-\n declare_lint! {\n     pub STABLE_FEATURES,\n     Warn,\n@@ -368,7 +362,6 @@ impl LintPass for HardwiredLints {\n             UNUSED_MACROS,\n             WARNINGS,\n             UNUSED_FEATURES,\n-            UNKNOWN_FEATURES,\n             STABLE_FEATURES,\n             UNKNOWN_CRATE_TYPES,\n             TRIVIAL_CASTS,"}, {"sha": "34b253ff9c610b20016eaaf2d45f046197eb08f4", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -840,6 +840,10 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // FIXME(varkor): we don't properly handle lib features behind `cfg` attributes yet,\n     // but it happens just to affect `libc`, so we're just going to hard-code it for now.\n     remaining_lib_features.remove(&Symbol::intern(\"libc\"));\n+    // FIXME(varkor): we have a problem gathering features on macros right now, so we're\n+    // going to hard-code some features here for now.\n+    remaining_lib_features.remove(&Symbol::intern(\"await_macro\"));\n+    remaining_lib_features.remove(&Symbol::intern(\"unstable_macros\"));\n \n     for (feature, stable) in tcx.lib_features().iter() {\n         if let Some(since) = stable {\n@@ -852,10 +856,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n \n     for (feature, span) in remaining_lib_features {\n-        tcx.lint_node(lint::builtin::UNKNOWN_FEATURES,\n-                      ast::CRATE_NODE_ID,\n-                      span,\n-                      &format!(\"unknown feature `{}`\", feature));\n+        struct_span_err!(tcx.sess, span, E0635, \"unknown feature `{}`\", feature).emit();\n     }\n \n     // FIXME(#44232): the `used_features` table no longer exists, so we"}, {"sha": "75d16232a37e099cdf0bb505556d708ae9dba945", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -188,7 +188,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_DOC_COMMENTS,\n                     UNUSED_EXTERN_CRATES,\n                     UNUSED_FEATURES,\n-                    UNKNOWN_FEATURES,\n                     UNUSED_LABELS,\n                     UNUSED_PARENS);\n \n@@ -343,6 +342,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_renamed(\"bare_trait_object\", \"bare_trait_objects\");\n     store.register_renamed(\"unstable_name_collision\", \"unstable_name_collisions\");\n     store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n+    store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n     store.register_removed(\"raw_pointer_derive\", \"using derive with raw pointers is ok\");"}, {"sha": "8534969c623bc5c906c0c40625b6a7435b33d7c2", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -374,18 +374,6 @@ and likely to change in the future.\n \n \"##,\n \n-E0635: r##\"\n-The `#![feature]` attribute specified an unknown feature.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0635\n-#![feature(nonexistent_rust_feature)] // error: unknown feature\n-```\n-\n-\"##,\n-\n-\n }\n \n register_diagnostics! {"}, {"sha": "4aafe8bba58c1a7b0d7c79b7bc055bfcc48cb8da", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -140,7 +140,6 @@ declare_features! (\n     (active, linkage, \"1.0.0\", Some(29603), None),\n     (active, quote, \"1.0.0\", Some(29601), None),\n \n-\n     // rustc internal\n     (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n     (active, rustc_const_unstable, \"1.0.0\", None, None),"}, {"sha": "f6b94e89826329a5dfd9067788ec1b9ae6fb6217", "filename": "src/test/compile-fail/lint-renamed-allow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fcompile-fail%2Flint-renamed-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fcompile-fail%2Flint-renamed-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renamed-allow.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -13,6 +13,6 @@\n \n #![allow(renamed_and_removed_lints)]\n \n-#[deny(unknown_features)]\n+#[deny(single_use_lifetime)]\n #[deny(unused)]\n fn main() { let unused = (); } //~ ERROR unused"}, {"sha": "5a0568f05e6e154fd28fabed515b688736a41ac4", "filename": "src/test/compile-fail/lint-unknown-feature-default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,9 @@\n \n // Tests the default for the unused_features lint\n \n+#![allow(stable_features)]\n // FIXME(#44232) we should warn that this isn't used.\n-#![feature(this_is_not_a_feature)]\n+#![feature(rust1)]\n \n #![feature(rustc_attrs)]\n "}, {"sha": "81f99f9949284b0823069c292d1b819da44a926a", "filename": "src/test/compile-fail/lint-unknown-feature.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,9 @@\n \n #![warn(unused_features)]\n \n+#![allow(stable_features)]\n // FIXME(#44232) we should warn that this isn't used.\n-#![feature(this_is_not_a_feature)]\n+#![feature(rust1)]\n \n #![feature(rustc_attrs)]\n "}, {"sha": "3eca89fbed3310ab6f16b54c3953cbfe3b6dfe4d", "filename": "src/test/run-fail/args-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-panic.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,7 +11,6 @@\n \n // error-pattern:meep\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(_a: isize, _b: isize, _c: Box<isize>) {"}, {"sha": "c8f851be556d7ddfa953006df6f907e210631502", "filename": "src/test/run-fail/panic-macro-any.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:panicked at 'Box<Any>'\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn main() {"}, {"sha": "4c5b3259902eb39a7479bbd09baeeae8d9393ed3", "filename": "src/test/run-pass-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n "}, {"sha": "360e8c9cc4f4fb4bc7754545228586d5afd713e6", "filename": "src/test/run-pass-valgrind/coerce-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "c1f75d5ee74ea828e208e081d6432dace8bfab6b", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct pair<A,B> {"}, {"sha": "de83e4edd8527d475fae6b629fc917ab6039b7e9", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {"}, {"sha": "0ac37485d3dc81df976de0d747b979be4c3e0592", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,9 +10,6 @@\n \n // edition:2018\n \n-// FIXME(varkor): `await_macro` isn't visible.\n-#![allow(unknown_features)]\n-\n #![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n \n use std::boxed::PinBox;"}, {"sha": "73f1041082825f453ccfd95fc0c650e7071715f9", "filename": "src/test/run-pass/attr-shebang.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-shebang.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unknown_features)]\n-#![feature(bogus)]\n+#![allow(stable_features)]\n+#![feature(rust1)]\n pub fn main() { }\n // ignore-license"}, {"sha": "f6ff9a31fa13c85c5eabd9dcb63c2a837cf1775d", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "234af92610abe3ae0b3d45c091c76fa42fb64a1f", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "5890fe44166616213ad0348f690d4d28596eed2d", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "2598ec17d2aea9240a6bd3c2143e446939cc7f54", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "7c83b9c982fbd13d8b2d31101de62718663cf9b8", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "4096d45d8df8dfc2f18a97287520e87200b7852e", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "91de734ec3a678b13cd1380cfed5483540e9a28a", "filename": "src/test/run-pass/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcci_nested_lib.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::RefCell;"}, {"sha": "b3e0f06148593999ca861beba973a2fdc764f5e9", "filename": "src/test/run-pass/auxiliary/issue-2380.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-2380.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,7 +11,6 @@\n #![crate_name=\"a\"]\n #![crate_type = \"lib\"]\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub trait i<T>"}, {"sha": "785a8b05664315e0092d2a8305eebaafc6c9351c", "filename": "src/test/run-pass/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg1.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n #![crate_type = \"lib\"]\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: u64 = 1;"}, {"sha": "3761d58087e0d06a9513ca48c4e4b1359a6d5d9a", "filename": "src/test/run-pass/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n #![crate_type = \"lib\"]\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: u64 = 1;"}, {"sha": "1d7230510df2baf65290a1e95189aff3e9b016f2", "filename": "src/test/run-pass/borrowck/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn borrow<F>(x: &isize, f: F) where F: FnOnce(&isize) {"}, {"sha": "a465c9cf811aa4b83241c2ba5121d257708de56a", "filename": "src/test/run-pass/borrowck/borrowck-field-sensitivity.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "c3645867117d262fc31d92430fd45504a0f5e9dc", "filename": "src/test/run-pass/borrowck/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "ec868bc5c85ef8ea26ddf782a6b04e2b876883bf", "filename": "src/test/run-pass/borrowck/borrowck-mut-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::mem::swap;"}, {"sha": "8c94df6dbf454ee205545be4f4f83d4afa5f5d5e", "filename": "src/test/run-pass/borrowck/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "ac309216250553f60bddbc77d12467c7cba6d58f", "filename": "src/test/run-pass/cancel-clean-via-immediate-rvalue-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &mut Box<u8>) {"}, {"sha": "1535ddfb4de0e47d0e9cefd1ec9c81eac1a12ccd", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_borrow_lib.rs\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n extern crate cci_borrow_lib;"}, {"sha": "04c4b2cb37765842bd55d6a20a713dd5e2ab2ed8", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_class_cast.rs\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n extern crate cci_class_cast;"}, {"sha": "343d414758cc0eef926bca878245cd0aff32f101", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::fmt;"}, {"sha": "dd900c56b40b1109c006934a7b9637bc32c67734", "filename": "src/test/run-pass/cleanup-arm-conditional.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -13,7 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax, os)]\n \n use std::os;"}, {"sha": "b117f4abd9572ed91b53bc93f6111d1b0882591c", "filename": "src/test/run-pass/cleanup-rvalue-during-if-and-while.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // This test verifies that temporaries created for `while`'s and `if`\n // conditions are dropped after the condition is evaluated.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Temporary;"}, {"sha": "ae455d916b6f9fe984cee5af9e64ac1e6c1a4cfc", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -26,7 +26,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "6ac7acd2a6b6821951b901f5bcf718f9fdec8816", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "ba700e4e326515c55afc4f7afb5bc20f4ffa7998", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,6 @@\n // storing closure data (as we used to do), the u64 would\n // overwrite the u16.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Pair<A,B> {"}, {"sha": "5a1953b563aa4cf04ce58967696f0e74f8b70b49", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::RefCell;"}, {"sha": "c0bc97b1f659dc90ce1f94ac15d6c79af20509c4", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // This is a regression test that the metadata for the"}, {"sha": "0e65e5b43b732c60c57199e22c914741c578ca76", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::Cell;"}, {"sha": "0e6b3d87d345b43bc5a8b9dffaf024e1d72001d0", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "70ac284cd30c9c0c804e484395ee3f65d9074b4b", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::default::Default;"}, {"sha": "8dea648508d6deedc1efa62d705f5a6a6ebdaac9", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum t { foo(Box<isize>), }"}, {"sha": "17603e11dddd99b501e0fe7f8270ea99c88a4487", "filename": "src/test/run-pass/drop-struct-as-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,8 +11,6 @@\n // Test that destructor on a struct runs successfully after the struct\n // is boxed and converted to an object.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut value: usize = 0;"}, {"sha": "a6027615adb5a8ea04d4af4b50543825054896cd", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "40ca847278722a222cef5beea9016db44f79aebe", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {"}, {"sha": "a412306b96645dcba42b1615a3e31a14d184029f", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {"}, {"sha": "7c2125d00f9bab499670a992e7246ed55fe69484", "filename": "src/test/run-pass/dst-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdst-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fdst-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-tuple.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(unsized_tuple_coercion)]\n "}, {"sha": "b5db8d913204af4d8e09263db0dac616940d7f3b", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n /*!"}, {"sha": "d2274ced55610f282a5be7d7c64384d43a3a077f", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Copy, Clone)]"}, {"sha": "bb7e612a9f2a788fbbfe2a2685abb1d63a523be4", "filename": "src/test/run-pass/explicit-self-objects-uniq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "11711e6ab74be939f30de60f60c26c340e0ea2d3", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static tau: f64 = 2.0*3.14159265358979323;"}, {"sha": "304f1c7a2eacd72db6bc51982a2bc3e940a43478", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: Box<T>, eq: F) where T: Clone, F: FnOnce(Box<T>, Box<T>) -> bool {"}, {"sha": "af3f5547867a1294e154260c3e536c31d7e6f7d8", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> bool {"}, {"sha": "2426ee5966c9f5961bd96648c70d11b294cb9efb", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() { let x: Box<_> = { box 100 }; assert_eq!(*x, 100); }"}, {"sha": "a8547536603adecaac28b186f6629488f09f50a1", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-\n // Tests for if as expressions returning boxed types\n fn test_box() {\n     let rs: Box<_> = if true { box 100 } else { box 101 };"}, {"sha": "3fce798c285c0ad1627c70d0d86f544c10ff336f", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {"}, {"sha": "5500edcf239f50ee319a5d22270a87d9dc51c4e6", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {"}, {"sha": "e66f09c63ea4bcd0cf4a936c18fc475888ad6598", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Tests for match as expressions resulting in boxed types"}, {"sha": "efd7f66e93b837d92e73ccc3aaca2c7542ebf625", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,8 +11,6 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax, core)]\n \n struct ncint { v: isize }"}, {"sha": "7d9501879d0a9be06a6ab6c690144e89b699f6e4", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,8 +11,6 @@\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Foo {"}, {"sha": "5214f2d02f51d9398d9f78b989a358d82dfde96e", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -14,8 +14,6 @@\n // boxes. Make sure that we don't free the box as we match the\n // pattern.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "c4fd31196153158d80682e34c9a8996bc322f580", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn id<T:Send>(t: T) -> T { return t; }"}, {"sha": "64091d2926c97714c33a09d30d5bfd54b1f955c3", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Recbox<T> {x: Box<T>}"}, {"sha": "3585cd2e0797d7954af2dc2d18ec326221a41ecc", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f<T>(x: Box<T>) -> Box<T> { return x; }"}, {"sha": "7e737fe00afd4fa77accae075d3e0a5f4bfcaf8d", "filename": "src/test/run-pass/generic-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-object.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo<T> {"}, {"sha": "ca2bf0ac224594bfdaefbc09eb61a1b47e0f36ca", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum list<T> { cons(Box<T>, Box<list<T>>), nil, }"}, {"sha": "a79465c8cd86034f2da4ba2a7af53b2bf9d4b08b", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variables)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum option<T> { some(Box<T>), none, }"}, {"sha": "1b1355ea336a6d196c9666a4f642293b4dc88d8d", "filename": "src/test/run-pass/generic-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Triple<T> { x: T, y: T, z: T }"}, {"sha": "2e98e0fe5ca3d24a3b5547ad89bff219576b5427", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten No support for threads\n \n-#![allow(unknown_features)]\n-\n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n "}, {"sha": "511d32348576e2c98769e25bc3e6f4cc9766845b", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n-\n // Test that `Fn(isize) -> isize + 'static` parses as `(Fn(isize) -> isize) +\n // 'static` and not `Fn(isize) -> (isize + 'static)`. The latter would\n // cause a compilation error. Issue #18772."}, {"sha": "4b11158e8c3d1c8926cc3faf9c3502c85f2c9277", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(intrinsics)]\n "}, {"sha": "67b73bdadbb62b86aa0404835b5c3108eb566025", "filename": "src/test/run-pass/issue-10682.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-10682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-10682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10682.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -13,7 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn work(_: Box<isize>) {}"}, {"sha": "2184aa00fa409ef03206ef7a8d858cdc62c113fa", "filename": "src/test/run-pass/issue-10767.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10767.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "1e700d4e18b270c79eac8d7a7a8fc915bc17fcaf", "filename": "src/test/run-pass/issue-10802.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10802.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct DroppableStruct;"}, {"sha": "aa980e48c5ee74be0c1ca4f08d800dacdac85b5a", "filename": "src/test/run-pass/issue-11552.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11552.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "de72d7152f8ec8bebb1cf4d007a0d10f11a9c4b3", "filename": "src/test/run-pass/issue-13323.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-13323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-13323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13323.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct StrWrap {"}, {"sha": "d5c67bea099f54af25f9f40c9a84225789e0a299", "filename": "src/test/run-pass/issue-14399.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14399.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -15,7 +15,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "35915a62102d389828354c4a987b30f3ff3bfb73", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn match_on_local() {"}, {"sha": "e1176d470636c6c24fb2c7b88ae1f2c90e86d6c4", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(PartialEq, Debug)]"}, {"sha": "7944e80a42860fbe6a7b238c1634236b5fba276b", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-\n struct Parser<'a, I, O> {\n     parse: Box<FnMut(I) -> Result<O, String> + 'a>\n }"}, {"sha": "2bdedfebe3e99f6857fb669dd2dab9527e71c401", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(unboxed_closures, fn_traits)]\n "}, {"sha": "1309d2ffab8e05abca5c478f1e27073d2aaac193", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n "}, {"sha": "47dfe878c26dcc73d0ac4535ef6b1f79ff305433", "filename": "src/test/run-pass/issue-17322.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17322.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax, io)]\n \n use std::io::{self, Write};"}, {"sha": "b8353ea4413669857ff9769e17c2d548a3ae95e4", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait clam<A> {"}, {"sha": "b955947c4101bc00569aa9274f6ffa0ec6f5e36d", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n "}, {"sha": "cf565b9f901975ea8e2afe37e8357dd26f775b06", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Font {"}, {"sha": "916e3dd689fcf84ac589db22a52cd6a8386d0ec3", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait hax {"}, {"sha": "af8eef557f821b4e43fb7adb592927b0fcb285b3", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait hax {"}, {"sha": "b2ea183e9f8787f212d2ab2678040b4e29a23c2c", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n //type t = { a: isize };"}, {"sha": "a0bdcf18ec520f56c557353bdbefef30cd509867", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Copy, Clone)]"}, {"sha": "6c775e15fb56ec8e2adbc82077e56b0b53b0843e", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "1558d94bae79914af08c8dae1a30045a76165238", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::RefCell;"}, {"sha": "badb833ee800bca94c2420c3dbf2b66e97d3fe29", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait T {"}, {"sha": "e0e11b4fd865019e18835f5c6ec4a662595ca0e4", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,7 +11,6 @@\n // pretty-expanded FIXME #23616\n \n #![allow(path_statements)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "7788a8f3ec2332c76719924040af56460dd62ad7", "filename": "src/test/run-pass/issue-4759.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-4759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-4759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4759.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct T { a: Box<isize> }"}, {"sha": "0758ace42da9055e9a441b5cbddd51a73887baec", "filename": "src/test/run-pass/issue-5192.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5192.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub trait EventLoop {"}, {"sha": "eba83227f449b4c829fdd1d2faf6ea497557044e", "filename": "src/test/run-pass/issue-5666.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5666.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Dog {"}, {"sha": "0bc9a07cb002379f86ea24e4c544b5d7e07b4bed", "filename": "src/test/run-pass/issue-5718.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5718.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Element;"}, {"sha": "c3247876c7ab9f6a148a68b43fecaa62d3e9016f", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub struct Foo {"}, {"sha": "69c7ec4cf1f8ade1e448c8ae264339f4353ff185", "filename": "src/test/run-pass/issue-6318.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6318.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub enum Thing {"}, {"sha": "109383b343bf8977cbf3d0c327177e0cf8103390", "filename": "src/test/run-pass/issue-6557.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6557.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "f5acebf3a66fae69323e1ec0e37bb3304f6ccbd9", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -16,7 +16,6 @@\n \n */\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {}"}, {"sha": "485f10357b3f329b187a54ba16e85f9514fa8082", "filename": "src/test/run-pass/issue-9129.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9129.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-pretty unreported\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub trait bomb { fn boom(&self, _: Ident); }"}, {"sha": "7538e55fd95df6af2eab19af5d1d10dc9880324d", "filename": "src/test/run-pass/issue-9382.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9382.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,7 +11,6 @@\n // except according to those terms.\n \n #![allow(unnecessary_allocation)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Tests for a previous bug that occurred due to an interaction"}, {"sha": "9b56666fd464cd68eae2ee49394589053e88a38b", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait repeat<A> { fn get(&self) -> A; }"}, {"sha": "cb2a2061406a243d9928d439c9fccb92d1ec6a98", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // Make sure #1399 stays fixed\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: Box<isize> }"}, {"sha": "d89888927e1bdef212b0f04fa925e7388e4aa3b9", "filename": "src/test/run-pass/leak-unique-as-tydesc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn leaky<T>(_t: T) { }"}, {"sha": "69b0eab99f71f5c5cf15d861d7d55302b59e1c12", "filename": "src/test/run-pass/let-assignability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f() {"}, {"sha": "37612415555099880cca736a9bdb71aa99168693", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum list { cons(isize, Box<list>), nil, }"}, {"sha": "9afcd51aa85af16f7efe818ce47a5bae38749aa7", "filename": "src/test/run-pass/macro-stability.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-stability.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,9 +10,6 @@\n \n // aux-build:unstable-macros.rs\n \n-// FIXME(varkor): `unstable_macros` isn't visible.\n-#![allow(unknown_features)]\n-\n #![feature(unstable_macros)]\n \n #[macro_use] extern crate unstable_macros;"}, {"sha": "10de6eeabddaaf278d0e100855e2e18d9774b378", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Pair { a: Box<isize>, b: Box<isize> }"}, {"sha": "ca864c05cfdc8f6ce1b08cb89984bfa833df06dc", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "ab56a8cfc9392e781fff1f993869eb9ef2891430", "filename": "src/test/run-pass/match-value-binding-in-guard-3291.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: Option<Box<isize>>, b: bool) -> isize {"}, {"sha": "2572baf68fd12e35e3015384e9cfb1ba975a4fe1", "filename": "src/test/run-pass/method-self-arg-aux1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument (cross-crate)\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // aux-build:method_self_arg1.rs"}, {"sha": "51de69ff01f0fb422dc38e55f4b58a942b5f9ef8", "filename": "src/test/run-pass/method-self-arg-aux2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument (cross-crate)\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // aux-build:method_self_arg2.rs"}, {"sha": "34e849bd0d2d85965018eca62e2f971184347c80", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: u64 = 1;"}, {"sha": "b7fb2fa138da902a65585013b17f81ec0f24ea66", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: usize = 1;"}, {"sha": "f403f5260395038ec4c888cbc62e105e894c4783", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -19,8 +19,6 @@\n // codegen the call as `Foo::foo(&x)` and let the specific impl get\n // chosen later.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "5c8dd41c6466383a6263a8cf4c7657a37644ac29", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "0b67e54e234580726bf1a5dec34ca17e95fd9305", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X { x: isize, y: isize, z: isize }"}, {"sha": "0fbc2de91e6cd3f66144a43b8501136c8bae381f", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X { x: isize, y: isize, z: isize }"}, {"sha": "36ad3a40b3f56b881e722f59f7a6def4b0a15429", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "266e34c98a40d767c52b2d985608a910983513b6", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Triple {a: isize, b: isize, c: isize}"}, {"sha": "481068869e34d48d4d976731743130c0f0352c9a", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Triple { a: isize, b: isize, c: isize }"}, {"sha": "b6e225cc8b73e8f683562e4d912db6ac57c5e6e9", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>> ) { assert_eq!((*foo)[0], 10); }"}, {"sha": "78774854c9f1606ea67a0540c100e27db1e0997f", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>>) { assert_eq!((*foo)[0], 10); }"}, {"sha": "bf4d4ea921aa58209eb468925589bad3e7f08199", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(mut y: Box<isize>) {"}, {"sha": "d6881ea90afb6fbe3f4003b2589b298e6a3caaf5", "filename": "src/test/run-pass/new-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(x: Box<isize>) {"}, {"sha": "d33102a38f96e4b3b5024c756d91d65080be2f17", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,"}, {"sha": "284beccdb29566d54dabebfca93b37ce38aa17a3", "filename": "src/test/run-pass/object-one-type-two-traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,7 +11,6 @@\n // Testing creating two vtables with the same self type, but different\n // traits.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::any::Any;"}, {"sha": "c27bc62ada803e19e7949f8abe16ec902b64bab7", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,8 +12,6 @@\n // closed over do not contain managed values, and thus the boxes do\n // not have headers.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n "}, {"sha": "5d9658dc15d63aed48680e7094b591fc8d9f4776", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,8 +12,6 @@\n // closed over contain managed values. This implies that the boxes\n // will have headers that must be skipped over.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait FooTrait {"}, {"sha": "2171b8c481d1fd7c24b7f4f882437ba67534bf1f", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variables)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: isize, b: isize }"}, {"sha": "759e2aace6104b3be5f38777195270b00c72084e", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax, core)]\n \n use std::cell::RefCell;"}, {"sha": "9988599d59dcc8392407c98051d68f1f736e1c1c", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // Test overloaded indexing combined with autoderef.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax, core)]\n \n use std::ops::{Index, IndexMut};"}, {"sha": "3313196a5eced2a8bb17bcf124adc5b11be4a2b4", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn sums_to(v: Vec<isize> , sum: isize) -> bool {"}, {"sha": "bc869113fe90000e5be3114e827c9693ad823c74", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait get {"}, {"sha": "abebb670e65d2cd76c19c005840a95ca38223daf", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &usize) -> usize {"}, {"sha": "48b09b338511810c93d210db24630a26eb2ccde6", "filename": "src/test/run-pass/regions-borrow-uniq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &usize) -> usize {"}, {"sha": "4a24e201b3538bc3c97b39d8dc82289fd156cf75", "filename": "src/test/run-pass/regions-close-over-type-parameter-successfully.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,8 +11,6 @@\n // A test where we (successfully) close over a reference into\n // an object.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait SomeTrait { fn get(&self) -> isize; }"}, {"sha": "c8b39bbe74994bf0cd475248fbcc92ea686a7024", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,8 +11,6 @@\n // Test lifetimes are linked properly when we create dependent region pointers.\n // Issue #3148.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "75c209a09207018e9556f481e1c444b82415e517", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,8 +11,6 @@\n // Tests that you can use an early-bound lifetime parameter as\n // on of the generic parameters in a trait.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Trait<'a> {"}, {"sha": "7cb719cccced81e7a5620c33e16e4c30592d252c", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &usize) -> &usize { x }"}, {"sha": "f762b4f41ed40076e9a4f1506af339a814eb6ddb", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -14,7 +14,6 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variables)]\n-#![allow(unknown_features)]\n \n // Should pass region checking.\n fn ok(f: Box<FnMut(&usize)>) {"}, {"sha": "a40ba8382fc2b3af300151dd766e0f4e5a8ffbf1", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn borrow<T>(x: &T) -> &T {x}"}, {"sha": "72208272df75ab8d9091b96047e0346a7fd8aa51", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Point {x: isize, y: isize}"}, {"sha": "2a20cd2b773c3acfa13a541af28068afd1828abc", "filename": "src/test/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -24,7 +24,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "3322fc36fd3a40655cb200bc52ab4060b0b4a0b2", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -17,8 +17,6 @@\n // changes were caught. However, those uses in the compiler could\n // easily get changed or refactored away in the future.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Ctxt<'tcx> {"}, {"sha": "fcd233c361b8398ab34fa6282105071c3b75c53f", "filename": "src/test/run-pass/self-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-impl.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Foo;"}, {"sha": "905a23f22a6f8abc1bed08058e60c3df55b61d0d", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X {"}, {"sha": "05295aa3309d4237b79d7da55d46e0e3ca83cd6e", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -11,8 +11,6 @@\n // Ensure assigning an owned or managed variable to itself works. In particular,\n // that we do not glue_drop before we glue_take (#3290).\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::rc::Rc;"}, {"sha": "ecd0bfb1440764d5df1be7ff2ab9ce7b6feb5fa3", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "94b69a1c3e477298fd7e8a6b189c286f25750302", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "7b57d66ef21fdff401cbe4f3e94648dc1986e011", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,7 @@\n // and shared between threads as long as all types fulfill Send.\n \n // ignore-emscripten no threads support\n-#![allow(unknown_features)]\n+\n #![feature(box_syntax)]\n \n use std::sync::Arc;"}, {"sha": "4b14ac2f76f6b5697b15a3babff1d9b996d742e2", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // test for #8664\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::marker;"}, {"sha": "53457d85e016fd28ba81995270ad49ae205a6da5", "filename": "src/test/run-pass/traits-conditional-dispatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,8 +12,6 @@\n // blanket impl for T:Copy coexists with an impl for Box<T>, because\n // Box does not impl Copy.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Get {"}, {"sha": "1a3bdcca7a1e522878fe1ff9811d1195225fae4e", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn p_foo<T>(_pinned: T) { }"}, {"sha": "d386f27d8c23b3a16b9f0a49c69ebea11d56f4c7", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Example from lkuper's intern talk, August 2012 -- now with static"}, {"sha": "8e8fd9bf648431c31b2a69894efb6ba32ad1285a", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Example from lkuper's intern talk, August 2012."}, {"sha": "b3cbd2c4eb37b6bc7612ab9a31739bde54a576f1", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Copy, Clone)]"}, {"sha": "72d5a1dc0433ea5f081e1c581367b9278411afa8", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::ops::FnMut;"}, {"sha": "f4453f1bb8ab3195459d34ed4df4dc55b44340f2", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,8 +10,6 @@\n \n // Test that the call operator autoderefs when calling to an object type.\n \n-#![allow(unknown_features)]\n-\n use std::ops::FnMut;\n \n fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {"}, {"sha": "2fdb9e9b346c4023a36cb92c844aa17f697e73e1", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-\n use std::ops::FnMut;\n \n fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {"}, {"sha": "a4f953ceaf5c3ea3e4cb03dab496204e0ec76118", "filename": "src/test/run-pass/uniq-self-in-mut-slot.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X {"}, {"sha": "1e36f5287a77d9ebb8fe8fef617b5ecf8b6afb6c", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "1227c14ec02f33393ec48a8698de0adb29c6c1fa", "filename": "src/test/run-pass/unique-assign-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n \n #![allow(dead_assignment)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "1abc8203305cfc356c78a02fddb00550cf8eda27", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-\n fn f<T>(t: T) -> T {\n     let t1 = t;\n     t1"}, {"sha": "66b78d27c59f3e7f5dc85804acd5a6eb988bb2a5", "filename": "src/test/run-pass/unique-assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "4ad465abc48fe643cc20c178802af2fe454d9a11", "filename": "src/test/run-pass/unique-autoderef-field.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct J { j: isize }"}, {"sha": "b0abcfab78ef28294e753f12920f37091e6ca590", "filename": "src/test/run-pass/unique-autoderef-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "e949215396c66874c1c761d474e207e16f74607b", "filename": "src/test/run-pass/unique-cmp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-cmp.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "94f523eb3960154ee2a4693ba3780fc388f0b62f", "filename": "src/test/run-pass/unique-containing-tag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "5ebabf0c29a52ed33ad136d117107e599f340886", "filename": "src/test/run-pass/unique-create.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-create.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "71197b9d02fbd17c39c75e67d8735185a8b6efa7", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "2501caddb46320c7e4e0bf565639f61f38094dcb", "filename": "src/test/run-pass/unique-decl-init.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "fc6421e2e0889580665ac0eb2aaf60b1f2735d0d", "filename": "src/test/run-pass/unique-decl-move.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "8c008683ef347e718fc0e6d58a4f4d3aa0235327", "filename": "src/test/run-pass/unique-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-deref.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "70b4af1886fc19e4386e624891ec221c5b7c0b8c", "filename": "src/test/run-pass/unique-destructure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-destructure.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "bcfb65769da654afa8d46a1ef6ac8dd0d05fc49a", "filename": "src/test/run-pass/unique-drop-complex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "45cc530659f978f0eb8463246c88ac03545622b0", "filename": "src/test/run-pass/unique-fn-arg-move.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(i: Box<isize>) {"}, {"sha": "77c4fa29558e3304d04f129fdc233124beac3e6a", "filename": "src/test/run-pass/unique-fn-arg-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(i: &mut Box<isize>) {"}, {"sha": "20a0008ef56ae7a0ff541e03e09395f322867a2d", "filename": "src/test/run-pass/unique-fn-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(i: Box<isize>) {"}, {"sha": "7d88176828e3be80ce6532f3cff848bb0fe650d8", "filename": "src/test/run-pass/unique-fn-ret.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-fn-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-ret.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f() -> Box<isize> {"}, {"sha": "517cdd0253564a33d724e087519c36989309e0a1", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test1() {"}, {"sha": "a460aa6ec10259d0a68165fb2ff25c66b262fd09", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "a7edc9cc7104a76307eb20d6b5ee69ee338b8c1e", "filename": "src/test/run-pass/unique-in-vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "768614b1e3c921a7b1ba945ce969fa97c07acb57", "filename": "src/test/run-pass/unique-init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-init.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "80364114bce43183b38efe15a88064b91bf9acd8", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cmp::PartialEq;"}, {"sha": "0c17acb3d8984bedb38e8ddb19e407e6f7599f88", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "ba865abc3718a4f26e228e106238d6191d060378", "filename": "src/test/run-pass/unique-move-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-drop.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n \n #![allow(unused_variables)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "8c1178b9a7e0ece6cecbb3166447ca879abf8763", "filename": "src/test/run-pass/unique-move-temp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-temp.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "e731ca818fe79a1b82074ad322d36bfc5662f895", "filename": "src/test/run-pass/unique-move.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "480060103003ecddf6f2a3ff33b29a3e7da362a3", "filename": "src/test/run-pass/unique-mutable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-mutable.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "d93df4e96f99c5811921caa920f458a3e0f5fe8b", "filename": "src/test/run-pass/unique-object-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-object-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-object-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-object-move.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -12,7 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub trait EventLoop { fn foo(&self) {} }"}, {"sha": "12e81a202e9f80729e6c3df060690c641eb8ce69", "filename": "src/test/run-pass/unique-pat-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "9f361d460e0ed934b02e7e05ed87575e74e48be9", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum bar { u(Box<isize>), w(isize), }"}, {"sha": "8af160b1f56c00988538eb813f3abb26ce687ffd", "filename": "src/test/run-pass/unique-pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "aa3fc8f5bb569a6e5af4466431be901dc614754f", "filename": "src/test/run-pass/unique-rec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-rec.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X { x: isize }"}, {"sha": "7a0e585e8b0aec194723b43aeb8418d1f6afbb6f", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::sync::mpsc::{channel, Sender};"}, {"sha": "7644da08e4afa7cf144dbbb3a5b0142f687ac5c7", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::sync::mpsc::channel;"}, {"sha": "6e6fe4e420b2524cdb9375fef91420ad8f009ed4", "filename": "src/test/run-pass/unique-swap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::mem::swap;"}, {"sha": "90b99f98533dee439dc64c93d06f8f7af5d80a35", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Test sized-ness checking in substitution."}, {"sha": "e5a77d1cdbd9de0cffa3893252f630201283b5c6", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "9a0ea181d996df3646066a5507679396b8e78274", "filename": "src/test/run-pass/unused-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funused-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funused-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -15,7 +15,6 @@\n // pretty-expanded FIXME #23616\n \n #![allow(path_statements)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main()"}, {"sha": "321e819881703211e768fcebb66d44397ca55c82", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "cf4222b405e80651dcd93763f16ad0c2bf9cc178", "filename": "src/test/run-pass/vec-dst.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-dst.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "09e70cf03cada5a057f9efa216b8f8ad6ab3067d", "filename": "src/test/run-pass/vector-no-ann-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() { let _quux: Box<Vec<usize>> = box Vec::new(); }"}, {"sha": "dd235cb9c3aa99aca11448d031af4be7e1cd09f6", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -43,6 +43,7 @@\n #![feature(rustc_attrs)] // For `rustc_error`; see note below.\n #![warn(unused_attributes, unknown_lints)]\n #![allow(dead_code)]\n+#![allow(stable_features)]\n \n // UNGATED WHITE-LISTED BUILT-IN ATTRIBUTES\n \n@@ -100,7 +101,7 @@\n // For #![crate_id], see issue #43142. (I cannot bear to enshrine current behavior in a test)\n \n // FIXME(#44232) we should warn that this isn't used.\n-#![feature                    ( x0600)]\n+#![feature                    ( rust1)]\n \n // For #![no_start], see issue #43144. (I cannot bear to enshrine current behavior in a test)\n "}, {"sha": "fd38fb6f9764196d3fce28abd8c451c55edbf24e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 214, "deletions": 214, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -1,5 +1,5 @@\n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:33\n    |\n LL | #![warn                        (x5400)] //~ WARN unknown lint: `x5400`\n    |                                 ^^^^^\n@@ -11,183 +11,183 @@ LL | #![warn(unused_attributes, unknown_lints)]\n    |                            ^^^^^^^^^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:51:33\n    |\n LL | #![allow                       (x5300)] //~ WARN unknown lint: `x5300`\n    |                                 ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:51:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:33\n    |\n LL | #![forbid                      (x5200)] //~ WARN unknown lint: `x5200`\n    |                                 ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:33\n    |\n LL | #![deny                        (x5100)] //~ WARN unknown lint: `x5100`\n    |                                 ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:115:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:117:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:118:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:121:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:124:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:127:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:130:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:134:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:136:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:137:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:140:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:143:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:146:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:149:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:153:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:155:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:156:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:159:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:162:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:165:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:168:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:172:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:174:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:175:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:177:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:178:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:180:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:181:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:183:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:184:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:186:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:187:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:501:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:504:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: consider an outer attribute, #[macro_use] mod ...\n \n warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:17\n    |\n LL |     mod inner { #![repr=\"3900\"] }\n    |                 ^^^^^^^^^^^^^^^ needs a hint\n@@ -197,7 +197,7 @@ LL |     mod inner { #![repr=\"3900\"] }\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:320:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:321:5\n    |\n LL |     #[repr = \"3900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^ needs a hint\n@@ -206,7 +206,7 @@ LL |     #[repr = \"3900\"] fn f() { }\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:326:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:327:5\n    |\n LL |     #[repr = \"3900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^ needs a hint\n@@ -215,7 +215,7 @@ LL |     #[repr = \"3900\"] type T = S;\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:331:5\n    |\n LL |     #[repr = \"3900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^ needs a hint\n@@ -224,7 +224,7 @@ LL |     #[repr = \"3900\"] impl S { }\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:312:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:313:1\n    |\n LL | #[repr = \"3900\"]\n    | ^^^^^^^^^^^^^^^^ needs a hint\n@@ -233,7 +233,7 @@ LL | #[repr = \"3900\"]\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:63:1\n    |\n LL | #![repr                       = \"3900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs a hint\n@@ -242,7 +242,7 @@ LL | #![repr                       = \"3900\"]\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:195:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n@@ -254,277 +254,277 @@ LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:198:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:201:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:203:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:204:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:210:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:211:17\n    |\n LL |     mod inner { #![macro_export=\"4800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:214:5\n    |\n LL |     #[macro_export = \"4800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:217:5\n    |\n LL |     #[macro_export = \"4800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:220:5\n    |\n LL |     #[macro_export = \"4800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:222:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:223:5\n    |\n LL |     #[macro_export = \"4800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:208:1\n    |\n LL | #[macro_export = \"4800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:229:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:230:17\n    |\n LL |     mod inner { #![plugin_registrar=\"4700\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:234:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:235:5\n    |\n LL |     #[plugin_registrar = \"4700\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:237:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:238:5\n    |\n LL |     #[plugin_registrar = \"4700\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:240:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n    |\n LL |     #[plugin_registrar = \"4700\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:226:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:1\n    |\n LL | #[plugin_registrar = \"4700\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:247:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:248:17\n    |\n LL |     mod inner { #![main=\"4300\"] }\n    |                 ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:252:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:253:5\n    |\n LL |     #[main = \"4400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:255:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:256:5\n    |\n LL |     #[main = \"4400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:258:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:259:5\n    |\n LL |     #[main = \"4400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:244:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:245:1\n    |\n LL | #[main = \"4400\"]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:265:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:266:17\n    |\n LL |     mod inner { #![start=\"4300\"] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:270:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:271:5\n    |\n LL |     #[start = \"4300\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:273:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:274:5\n    |\n LL |     #[start = \"4300\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:276:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:277:5\n    |\n LL |     #[start = \"4300\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:262:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:263:1\n    |\n LL | #[start = \"4300\"]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:17\n    |\n LL |     mod inner { #![repr=\"3900\"] }\n    |                 ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:320:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:321:5\n    |\n LL |     #[repr = \"3900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:326:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:327:5\n    |\n LL |     #[repr = \"3900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:331:5\n    |\n LL |     #[repr = \"3900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:312:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:313:1\n    |\n LL | #[repr = \"3900\"]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:339:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:340:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:343:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:346:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:348:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:349:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:356:17\n    |\n LL |     mod inner { #![abi=\"3700\"] }\n    |                 ^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:358:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:359:5\n    |\n LL |     #[abi = \"3700\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:362:5\n    |\n LL |     #[abi = \"3700\"] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:365:5\n    |\n LL |     #[abi = \"3700\"] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:368:5\n    |\n LL |     #[abi = \"3700\"] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:352:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:353:1\n    |\n LL | #[abi = \"3700\"]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:375:17\n    |\n LL |     mod inner { #![automatically_derived=\"3600\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:377:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:378:5\n    |\n LL |     #[automatically_derived = \"3600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:381:5\n    |\n LL |     #[automatically_derived = \"3600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:384:5\n    |\n LL |     #[automatically_derived = \"3600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:387:5\n    |\n LL |     #[automatically_derived = \"3600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:371:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:372:1\n    |\n LL | #[automatically_derived = \"3600\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:394:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:27\n    |\n LL |     #[no_mangle = \"3500\"] fn f() { }\n    |                           -^^^^^^^^^\n@@ -534,787 +534,787 @@ LL |     #[no_mangle = \"3500\"] fn f() { }\n    = note: #[warn(private_no_mangle_fns)] on by default\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:407:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:17\n    |\n LL |     mod inner { #![no_link=\"3400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:410:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n    |\n LL |     #[no_link = \"3400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:413:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n    |\n LL |     #[no_link = \"3400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n    |\n LL |     #[no_link = \"3400\"]type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:420:5\n    |\n LL |     #[no_link = \"3400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:1\n    |\n LL | #[no_link = \"3400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:17\n    |\n LL |     mod inner { #![should_panic=\"3200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:429:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n    |\n LL |     #[should_panic = \"3200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:432:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n    |\n LL |     #[should_panic = \"3200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:435:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n    |\n LL |     #[should_panic = \"3200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:439:5\n    |\n LL |     #[should_panic = \"3200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:1\n    |\n LL | #[should_panic = \"3200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:445:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:17\n    |\n LL |     mod inner { #![ignore=\"3100\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:448:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n    |\n LL |     #[ignore = \"3100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:451:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n    |\n LL |     #[ignore = \"3100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:5\n    |\n LL |     #[ignore = \"3100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:5\n    |\n LL |     #[ignore = \"3100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:1\n    |\n LL | #[ignore = \"3100\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:464:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:465:17\n    |\n LL |     mod inner { #![no_implicit_prelude=\"3000\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:467:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:468:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:471:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:473:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:477:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:1\n    |\n LL | #[no_implicit_prelude = \"3000\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:490:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:481:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:506:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:507:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:509:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:510:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:512:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:513:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:516:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:524:17\n    |\n LL |     mod inner { #![no_std=\"2600\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:524:17\n    |\n LL |     mod inner { #![no_std=\"2600\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:528:5\n    |\n LL |     #[no_std = \"2600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:528:5\n    |\n LL |     #[no_std = \"2600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:531:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:5\n    |\n LL |     #[no_std = \"2600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:531:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:5\n    |\n LL |     #[no_std = \"2600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:536:5\n    |\n LL |     #[no_std = \"2600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:536:5\n    |\n LL |     #[no_std = \"2600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:539:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:540:5\n    |\n LL |     #[no_std = \"2600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:539:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:540:5\n    |\n LL |     #[no_std = \"2600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:520:1\n    |\n LL | #[no_std = \"2600\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:520:1\n    |\n LL | #[no_std = \"2600\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:686:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:686:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:767:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:767:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:771:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:771:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:797:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:797:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:800:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:800:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:804:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:805:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:804:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:805:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:808:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:809:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:808:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:809:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:54:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n    |\n LL | #![macro_export               = \"4800\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n    |\n LL | #![plugin_registrar           = \"4700\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n    |\n LL | #![main                      = \"x4400\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n    |\n LL | #![start                     = \"x4300\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:63:1\n    |\n LL | #![repr                       = \"3900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:66:1\n    |\n LL | #![path                       = \"3800\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:66:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n    |\n LL | #![abi                        = \"3700\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:68:1\n    |\n LL | #![automatically_derived      = \"3600\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:70:1\n    |\n LL | #![no_link                    = \"3400\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:71:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:72:1\n    |\n LL | #![should_panic               = \"3200\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:72:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:73:1\n    |\n LL | #![ignore                     = \"3100\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:78:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:79:1\n    |\n LL | #![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: compilation successful\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:844:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:845:1\n    |\n LL | / fn main() { //~ ERROR compilation successful\n LL | |     println!(\"Hello World\");"}, {"sha": "da1b257f6341b666a1ce4e315992de96da993d75", "filename": "src/test/ui/feature-gate/unknown-feature.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Funknown-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Funknown-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funknown-feature.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unknown_features)]\n-\n #![feature(unknown_rust_feature)] //~ ERROR unknown feature\n \n fn main() {}"}, {"sha": "f44aaeec032b300dda570e316c69f03a76b60b05", "filename": "src/test/ui/feature-gate/unknown-feature.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Funknown-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Ffeature-gate%2Funknown-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funknown-feature.stderr?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -1,14 +1,9 @@\n-error: unknown feature `unknown_rust_feature`\n-  --> $DIR/unknown-feature.rs:13:12\n+error[E0635]: unknown feature `unknown_rust_feature`\n+  --> $DIR/unknown-feature.rs:11:12\n    |\n LL | #![feature(unknown_rust_feature)] //~ ERROR unknown feature\n    |            ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/unknown-feature.rs:11:9\n-   |\n-LL | #![deny(unknown_features)]\n-   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "e87ddde7413d2a45fb81c0c1868eace7ea320a47", "filename": "src/test/ui/lint-output-format-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-output-format-2.rs?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -10,9 +10,6 @@\n \n // aux-build:lint_output_format.rs\n \n-// FIXME(#44232) we should warn that this isn't used.\n-#![feature(foo)]\n-\n #![feature(unstable_test_feature)]\n #![feature(rustc_attrs)]\n "}, {"sha": "8c6247688e80cc5ff1b1bcdf4cc78810d8e956d1", "filename": "src/test/ui/lint-output-format-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Flint-output-format-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120989195f0a20e871bf3a9fd91f8fc93ca76d56/src%2Ftest%2Fui%2Flint-output-format-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-output-format-2.stderr?ref=120989195f0a20e871bf3a9fd91f8fc93ca76d56", "patch": "@@ -1,19 +1,19 @@\n warning: use of deprecated item 'lint_output_format::foo': text\n-  --> $DIR/lint-output-format-2.rs:20:26\n+  --> $DIR/lint-output-format-2.rs:17:26\n    |\n LL | use lint_output_format::{foo, bar};\n    |                          ^^^\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: use of deprecated item 'lint_output_format::foo': text\n-  --> $DIR/lint-output-format-2.rs:25:14\n+  --> $DIR/lint-output-format-2.rs:22:14\n    |\n LL |     let _x = foo();\n    |              ^^^\n \n error: compilation successful\n-  --> $DIR/lint-output-format-2.rs:24:1\n+  --> $DIR/lint-output-format-2.rs:21:1\n    |\n LL | / fn main() { //~ ERROR: compilation successful\n LL | |     let _x = foo();"}]}