{"sha": "c99a603b87a4f333541d54ad119eaafe35ae9a61", "node_id": "C_kwDOAAsO6NoAKGM5OWE2MDNiODdhNGYzMzM1NDFkNTRhZDExOWVhYWZlMzVhZTlhNjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-22T12:55:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-22T12:55:52Z"}, "message": "Rollup merge of #102036 - Patiga:remove-io-errorkind-other-use-in-std, r=Mark-Simulacrum\n\nRemove use of `io::ErrorKind::Other` in std\n\nThe documentation states that this `ErrorKind` is not used by the standard library. Instead, `io::ErrorKind::Uncategorized` should be used.\n\nThe two instances are in the unstable API [linux_pidfd](https://github.com/rust-lang/rust/issues/82971).", "tree": {"sha": "e9e48cc7aca3ca2560c4c7e1be35d86843d8af8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e48cc7aca3ca2560c4c7e1be35d86843d8af8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c99a603b87a4f333541d54ad119eaafe35ae9a61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjLFtYCRBK7hj4Ov3rIwAAtgoIAI67r8uCUmeey/32LR4vJlo1\nrdQKaqL19Ph/ewR38JQ4bqLdY4P5ZSx4skfjkqv7u6uF72o67ozDZJXqMUE6ylSS\nArxSIsc/mLqcGDYPf1b1OIAHLjK5tdxIAMvELtnyF+HR7c6q65oBpQTxFgxZfYXv\nditn53qIVYza8M7mncYu9+Boc8JpkXAHOjjOgBHrMU6Q66akGeZE5BhVXsjM4DqK\nCM60YAbeE7VR7lViFSTKRykL5l598Nof5CWFa+LbZP3uyczIOFZnJMRobjh84vf7\nMjfcvJ5L3I+7HKROQXnsVaBExuLws1UKFagQcv1KBarhngm6pSnqUy74DyWecnU=\n=eTp8\n-----END PGP SIGNATURE-----\n", "payload": "tree e9e48cc7aca3ca2560c4c7e1be35d86843d8af8f\nparent b36a10af7e31333f907b70237336ae4e690c4c1e\nparent 04c108711e5be450b87ec2bf9cd628033972cd69\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663851352 +0530\ncommitter GitHub <noreply@github.com> 1663851352 +0530\n\nRollup merge of #102036 - Patiga:remove-io-errorkind-other-use-in-std, r=Mark-Simulacrum\n\nRemove use of `io::ErrorKind::Other` in std\n\nThe documentation states that this `ErrorKind` is not used by the standard library. Instead, `io::ErrorKind::Uncategorized` should be used.\n\nThe two instances are in the unstable API [linux_pidfd](https://github.com/rust-lang/rust/issues/82971).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c99a603b87a4f333541d54ad119eaafe35ae9a61", "html_url": "https://github.com/rust-lang/rust/commit/c99a603b87a4f333541d54ad119eaafe35ae9a61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c99a603b87a4f333541d54ad119eaafe35ae9a61/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36a10af7e31333f907b70237336ae4e690c4c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36a10af7e31333f907b70237336ae4e690c4c1e", "html_url": "https://github.com/rust-lang/rust/commit/b36a10af7e31333f907b70237336ae4e690c4c1e"}, {"sha": "04c108711e5be450b87ec2bf9cd628033972cd69", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c108711e5be450b87ec2bf9cd628033972cd69", "html_url": "https://github.com/rust-lang/rust/commit/04c108711e5be450b87ec2bf9cd628033972cd69"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "2ff8e600f7c52fc3d987ca06fcb0bb3eca127224", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c99a603b87a4f333541d54ad119eaafe35ae9a61/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99a603b87a4f333541d54ad119eaafe35ae9a61/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=c99a603b87a4f333541d54ad119eaafe35ae9a61", "patch": "@@ -822,14 +822,14 @@ impl crate::os::linux::process::ChildExt for crate::process::Child {\n         self.handle\n             .pidfd\n             .as_ref()\n-            .ok_or_else(|| Error::new(ErrorKind::Other, \"No pidfd was created.\"))\n+            .ok_or_else(|| Error::new(ErrorKind::Uncategorized, \"No pidfd was created.\"))\n     }\n \n     fn take_pidfd(&mut self) -> io::Result<PidFd> {\n         self.handle\n             .pidfd\n             .take()\n-            .ok_or_else(|| Error::new(ErrorKind::Other, \"No pidfd was created.\"))\n+            .ok_or_else(|| Error::new(ErrorKind::Uncategorized, \"No pidfd was created.\"))\n     }\n }\n "}]}