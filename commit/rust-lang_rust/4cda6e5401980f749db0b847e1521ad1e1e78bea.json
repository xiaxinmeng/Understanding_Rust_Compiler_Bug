{"sha": "4cda6e5401980f749db0b847e1521ad1e1e78bea", "node_id": "C_kwDOAAsO6NoAKDRjZGE2ZTU0MDE5ODBmNzQ5ZGIwYjg0N2UxNTIxYWQxZTFlNzhiZWE", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-09-27T14:42:51Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:18Z"}, "message": "Update test results", "tree": {"sha": "82bcf76acfd3ffc05e83304e7dfff89af151a939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82bcf76acfd3ffc05e83304e7dfff89af151a939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cda6e5401980f749db0b847e1521ad1e1e78bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cda6e5401980f749db0b847e1521ad1e1e78bea", "html_url": "https://github.com/rust-lang/rust/commit/4cda6e5401980f749db0b847e1521ad1e1e78bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cda6e5401980f749db0b847e1521ad1e1e78bea/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686861711df9e2a70df709c92577a95881baca76", "url": "https://api.github.com/repos/rust-lang/rust/commits/686861711df9e2a70df709c92577a95881baca76", "html_url": "https://github.com/rust-lang/rust/commit/686861711df9e2a70df709c92577a95881baca76"}], "stats": {"total": 322, "additions": 122, "deletions": 200}, "files": [{"sha": "00eb9d0e2006a0844942ec12be242b07eb14be6f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.32bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -18,17 +18,15 @@\n           _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n           StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n           _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n--         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n -         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = Lt(const 2_usize, _4);      // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n           _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2"}, {"sha": "00eb9d0e2006a0844942ec12be242b07eb14be6f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/array_index.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Farray_index.main.DataflowConstProp.64bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -18,17 +18,15 @@\n           _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n           StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n           _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n--         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n -         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = Lt(const 2_usize, _4);      // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n           _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2"}, {"sha": "1744b7b976afdbbc698dfb3545a4502c559b0970", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_div_by_zero.main.DataflowConstProp.diff", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_div_by_zero.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -24,9 +24,10 @@\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n -         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n +         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-          assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n@@ -37,11 +38,12 @@\n +         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n-          _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _2 = Div(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n           _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +3:2\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2"}, {"sha": "59bd12670155d464d1c512a00b10bd7d0273e45e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_mod_by_zero.main.DataflowConstProp.diff", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_mod_by_zero.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -22,28 +22,20 @@\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n-+         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+          _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n--         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n           nop;                             // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2"}, {"sha": "65cd7946367665aaac5a08558eb1ec73713fd656", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -38,10 +38,8 @@\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {"}, {"sha": "65cd7946367665aaac5a08558eb1ec73713fd656", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -38,10 +38,8 @@\n           StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {"}, {"sha": "307324d5768d8584f66f95b22e1dc5024759df58", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boolean_identities.test.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboolean_identities.test.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -14,17 +14,14 @@\n           StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n           StorageLive(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n           _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n--         _3 = BitOr(move _4, const true); // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-+         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+          _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n           StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:14: +1:15\n           StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n           StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n           _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n--         _5 = BitAnd(move _6, const false); // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-+         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n+          _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n           StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n--         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n-+         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n+          _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n           StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n           StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n           return;                          // scope 0 at $DIR/boolean_identities.rs:+2:2: +2:2"}, {"sha": "501108a7abcf860fe0e32f5f12cebe9592960021", "filename": "src/test/mir-opt/dataflow-const-prop/previous/boxes.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fboxes.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -22,10 +22,8 @@\n           StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n           StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n--         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n--         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-+         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-+         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+          _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+          _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n           _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n                                            // mir::Constant\n                                            // + span: $DIR/boxes.rs:13:14: 13:22"}, {"sha": "5371e049664c37412830dbacd9857f690447fa6c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/checked_add.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fchecked_add.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -11,9 +11,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n--         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+          _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n -         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n-+         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n +         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n       }\n   "}, {"sha": "e2e42e72c281dc64373dd18f22d3de3282d26950", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control_flow_simplification.hello.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -2,16 +2,14 @@\n + // MIR for `hello` after DataflowConstProp\n   \n   fn hello() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n+      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:15: +0:15\n       let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n       let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n--         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n--         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-+         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-+         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+          _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+          switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n       }\n   \n       bb1: {"}, {"sha": "442ae80776172f7e84c7ff6b54946b92e469a54d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control_flow_simplification.hello.PreCodegen.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -1,7 +1,7 @@\n // MIR for `hello` before PreCodegen\n \n fn hello() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:15: +0:15\n \n     bb0: {\n         return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2"}, {"sha": "f98270b3ff04d3cc635e3e8873df35a6300e2326", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.32bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -20,10 +20,8 @@\n           Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n           ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n           discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n--         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {"}, {"sha": "f98270b3ff04d3cc635e3e8873df35a6300e2326", "filename": "src/test/mir-opt/dataflow-const-prop/previous/discriminant.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fdiscriminant.main.DataflowConstProp.64bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -20,10 +20,8 @@\n           Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n           ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n           discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44\n--         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n+          switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31\n       }\n   \n       bb1: {"}, {"sha": "461ed4d8922b842c0d93ff712a5dfe7150ffdd34", "filename": "src/test/mir-opt/dataflow-const-prop/previous/indirect.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Findirect.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -17,8 +17,8 @@\n -         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n -         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n +         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n-+         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         _3 = CheckedAdd(const 2_u8, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n       }\n   \n       bb1: {"}, {"sha": "9cf6c1f989cd896d0e50ade6ce711058f0d5a01c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/invalid_constant.main.DataflowConstProp.diff", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Finvalid_constant.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -36,24 +36,21 @@\n           StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n           Deinit(_2);                      // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n           (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n--         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n-+         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n+          _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n           StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n           StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n           StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n           StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n           Deinit(_5);                      // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n           (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n--         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n--         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n-+         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:28:34: 28:57\n-+                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n-+         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:28:24: 28:60\n-+                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n+          _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n+                                           // mir::Constant\n+                                           // + span: $DIR/invalid_constant.rs:32:34: 32:57\n+                                           // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n+          _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n+                                           // mir::Constant\n+                                           // + span: $DIR/invalid_constant.rs:32:24: 32:60\n+                                           // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n           StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n           StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n           StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n@@ -66,12 +63,12 @@\n           StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n           StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n           StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n-          nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n-          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +25:2\n+          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+25:1: +25:2\n+          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+25:1: +25:2\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+25:1: +25:2\n+          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+25:1: +25:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:+25:2: +25:2\n       }\n   }\n   "}, {"sha": "ddbbb11397229970777d8581d91582c6b84c3b10", "filename": "src/test/mir-opt/dataflow-const-prop/previous/issue_67019.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fissue_67019.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -15,8 +15,7 @@\n           (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n           (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:+1:11: +1:17\n           Deinit(_2);                      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n--         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n-+         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n+          (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:+1:10: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:+1:18: +1:19\n           _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:+1:5: +1:20\n                                            // mir::Constant"}, {"sha": "487b2b74371d83bdbe2597a55813188fd248a6ca", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.32bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -19,10 +19,8 @@\n           StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n           _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       }\n   \n       bb1: {"}, {"sha": "487b2b74371d83bdbe2597a55813188fd248a6ca", "filename": "src/test/mir-opt/dataflow-const-prop/previous/large_array_index.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Flarge_array_index.main.DataflowConstProp.64bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -19,10 +19,8 @@\n           StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n           _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n--         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       }\n   \n       bb1: {"}, {"sha": "540cccb3b375f0c44f0a46e5c86888ee522d54f8", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mult_by_zero.test.DataflowConstProp.diff", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmult_by_zero.test.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -3,15 +3,14 @@\n   \n   fn test(_1: i32) -> i32 {\n       debug x => _1;                       // in scope 0 at $DIR/mult_by_zero.rs:+0:9: +0:10\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/mult_by_zero.rs:+0:21: +0:24\n-      let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/mult_by_zero.rs:+0:20: +0:23\n+      let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n-          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n--         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n-+         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n-          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n+          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n+          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:6\n+          _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:5: +1:10\n+          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:9: +1:10\n           return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "03556e85088e80673b344567eb394d4db3ddc20f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -17,8 +17,7 @@\n           _1 = const 42_i32;               // scope 0 at $DIR/mutable_variable.rs:+1:17: +1:19\n           _1 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+2:5: +2:11\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n+          _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n           nop;                             // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2"}, {"sha": "7b5be873ee82144606194445e31628099cb0de14", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -19,8 +19,7 @@\n           (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+          _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n           nop;                             // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2"}, {"sha": "fb396e7a121adc1489c537ce2f9ff46543ca910e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_aggregate_partial_read.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -24,8 +24,7 @@\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n           (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n--         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n+          _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n           nop;                             // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2"}, {"sha": "2f6aeca20763e970ec25cbcf05bd85825d05e80f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/mutable_variable_unprop_assign.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fmutable_variable_unprop_assign.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -41,8 +41,7 @@\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n           _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n           StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n           nop;                             // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n           StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2"}, {"sha": "3b77cb6e543c2bf35b16dd924fca9190c2476491", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.32bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -9,7 +9,7 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -24,40 +24,33 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n--         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-+         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-+         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n           StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n           StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n           _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n           StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n           _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n           _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n--         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n--         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-+         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       }\n   \n       bb2: {\n--         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-+         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:39\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:39: +3:40\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "3b77cb6e543c2bf35b16dd924fca9190c2476491", "filename": "src/test/mir-opt/dataflow-const-prop/previous/optimizes_into_variable.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Foptimizes_into_variable.main.DataflowConstProp.64bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -9,7 +9,7 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -24,40 +24,33 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n--         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-+         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n-+         _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n           StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n           StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n           _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n           StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n           _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n           _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n--         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n--         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-+         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       }\n   \n       bb2: {\n--         _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-+         _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          _3 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-+         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:37\n+          _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:39\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:39: +3:40\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "dd3dc9b9e4dbd374b71d06a118384ff3feaa1926", "filename": "src/test/mir-opt/dataflow-const-prop/previous/read_immutable_static.main.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fread_immutable_static.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -20,18 +20,15 @@\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:8:13: 8:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n--         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n-+         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n+          _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:8:19: 8:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n--         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n--         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n-+         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n-+         _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n+          _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n+          _1 = const 4_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n           StorageDead(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n           StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n           StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23"}, {"sha": "74c53808e1596d252a09d0a1aacd811cd174f7d4", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -16,8 +16,7 @@\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n--         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-+         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n           nop;                             // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2"}, {"sha": "f7e60a5a351d8d1a02a85fd39635c8d772754a9d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.32bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -21,17 +21,13 @@\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33"}, {"sha": "f7e60a5a351d8d1a02a85fd39635c8d772754a9d", "filename": "src/test/mir-opt/dataflow-const-prop/previous/repeat.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Frepeat.main.DataflowConstProp.64bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -21,17 +21,13 @@\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n--         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n-+         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33"}, {"sha": "f7a3227f39de86934c61f2f1d328a704e24245a4", "filename": "src/test/mir-opt/dataflow-const-prop/previous/return_place.add.DataflowConstProp.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Freturn_place.add.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -6,15 +6,12 @@\n       let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n   \n       bb0: {\n--         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n--         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+          _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+          assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n       }\n   \n       bb1: {\n--         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n-+         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+          _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n           return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "97609293c9a563355c66b902b5959fef259dc353", "filename": "src/test/mir-opt/dataflow-const-prop/previous/scalar_literal_propagation.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fscalar_literal_propagation.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -15,10 +15,8 @@\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n           StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-+         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n-+         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+          _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+          _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }"}, {"sha": "7af3a3881df2cfad038d0b58e6f2bde68b964812", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -33,15 +33,12 @@\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n           StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n           StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34"}, {"sha": "7af3a3881df2cfad038d0b58e6f2bde68b964812", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -33,15 +33,12 @@\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n           StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n           StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34"}, {"sha": "b2f98061d22943749ef5ce07e6530ed7cdec46a6", "filename": "src/test/mir-opt/dataflow-const-prop/previous/switch_int.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fswitch_int.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -8,8 +8,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n           _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n--         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n-+         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+          switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n       }\n   \n       bb1: {"}, {"sha": "7fcde2be17149aad651f605909e98ca7ff181818", "filename": "src/test/mir-opt/dataflow-const-prop/previous/tuple_literal_propagation.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4cda6e5401980f749db0b847e1521ad1e1e78bea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Ftuple_literal_propagation.main.DataflowConstProp.diff?ref=4cda6e5401980f749db0b847e1521ad1e1e78bea", "patch": "@@ -17,8 +17,7 @@\n           (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n           StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n--         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n-+         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+          _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n           _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12"}]}