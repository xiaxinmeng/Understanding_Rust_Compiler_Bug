{"sha": "e4b298bc4f5a7e86eb78404e25de08f179091e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YjI5OGJjNGY1YTdlODZlYjc4NDA0ZTI1ZGUwOGYxNzkwOTFlMDM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-17T09:12:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-17T09:12:12Z"}, "message": "Merge pull request #776 from RalfJung/intrinsics\n\n implement unchecked_{add,sub,mul} intrinsics", "tree": {"sha": "aafeba71ae013e2dd1b56b037cd8121d2d1e5bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aafeba71ae013e2dd1b56b037cd8121d2d1e5bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4b298bc4f5a7e86eb78404e25de08f179091e03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdB1lsCRBK7hj4Ov3rIwAAdHIIAHRBo8UqIC5SnPflLFapasyh\nygzpM5i/JtaSCzhzUeNidKnblHc4Zb9O02XZ9unM+DD6oBgGItCN5hNz5ejPG+3f\nefkZsJB2FydS1NEKUkK1qhQdy3McPJgiGh+QfxxTYFsuaEKjSjmb8LGGxspCYRhr\nRVHQL4OoDOORWwkbEVwzb1f1kln0aQKPxzQJXOnDXtZxlRq3wrUxvcpgZazc9ohT\nIeKQtLFgP2qBsrBMdF0I5nPiLks/6gbXrdPXaGojgjzIU9VrkfQZVGWuR77L1vZ2\naUfVqZ8P+xBG6FEPy5TQ4QBXWamBTVahx3C4Bd7QNeFIA2USRK+rybGMWkRv2v4=\n=q4I1\n-----END PGP SIGNATURE-----\n", "payload": "tree aafeba71ae013e2dd1b56b037cd8121d2d1e5bb7\nparent 14c41925c643a10f53169f5faa61fc7a6cc74ae5\nparent 7ce36226e6156e7aaf6da77833fd80cd83d8d623\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1560762732 +0200\ncommitter GitHub <noreply@github.com> 1560762732 +0200\n\nMerge pull request #776 from RalfJung/intrinsics\n\n implement unchecked_{add,sub,mul} intrinsics "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b298bc4f5a7e86eb78404e25de08f179091e03", "html_url": "https://github.com/rust-lang/rust/commit/e4b298bc4f5a7e86eb78404e25de08f179091e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4b298bc4f5a7e86eb78404e25de08f179091e03/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c41925c643a10f53169f5faa61fc7a6cc74ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c41925c643a10f53169f5faa61fc7a6cc74ae5", "html_url": "https://github.com/rust-lang/rust/commit/14c41925c643a10f53169f5faa61fc7a6cc74ae5"}, {"sha": "7ce36226e6156e7aaf6da77833fd80cd83d8d623", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce36226e6156e7aaf6da77833fd80cd83d8d623", "html_url": "https://github.com/rust-lang/rust/commit/7ce36226e6156e7aaf6da77833fd80cd83d8d623"}], "stats": {"total": 125, "additions": 110, "deletions": 15}, "files": [{"sha": "0ecccd02d7e1b6a6c92f26c531b8d665dfd03ba9", "filename": "src/intrinsic.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -272,7 +272,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let b = this.read_immediate(args[1])?;\n                 // check x % y != 0\n                 if this.binary_op(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n-                    return err!(ValidationFailure(format!(\"exact_div: {:?} cannot be divided by {:?}\", a, b)));\n+                    // Check if `b` is -1, which is the \"min_value / -1\" case.\n+                    let minus1 = Scalar::from_int(-1, dest.layout.size);\n+                    return if b.to_scalar().unwrap() == minus1 {\n+                        err!(Intrinsic(format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")))\n+                    } else {\n+                        err!(Intrinsic(format!(\"exact_div: {:?} cannot be divided by {:?} without remainder\", *a, *b)))\n+                    };\n                 }\n                 this.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;\n             },\n@@ -459,6 +465,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 )?;\n             }\n \n+            \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" => {\n+                let l = this.read_immediate(args[0])?;\n+                let r = this.read_immediate(args[1])?;\n+                let op = match intrinsic_name.get() {\n+                    \"unchecked_add\" => mir::BinOp::Add,\n+                    \"unchecked_sub\" => mir::BinOp::Sub,\n+                    \"unchecked_mul\" => mir::BinOp::Mul,\n+                    _ => bug!(),\n+                };\n+                let (res, overflowed) = this.binary_op(op, l, r)?;\n+                if overflowed {\n+                    return err!(Intrinsic(format!(\"Overflowing arithmetic in {}\", intrinsic_name.get())));\n+                }\n+                this.write_scalar(res, dest)?;\n+            }\n+\n             \"uninit\" => {\n                 // Check fast path: we don't want to force an allocation in case the destination is a simple value,\n                 // but we also do not want to create a new allocation with 0s and then copy that over."}, {"sha": "3200504ddb6e1d45ce85daf15d1345f995f49294", "filename": "tests/compile-fail/div-by-zero-3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fdiv-by-zero-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fdiv-by-zero-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-3.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,11 @@\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+//error-pattern: Division by 0 in unchecked_rem\n+\n+fn main() {\n+    unsafe {\n+        let _n = unchecked_rem(3u32, 0);\n+    }\n+}"}, {"sha": "171bedeadc672bb03e1e8f981f7e62b8082d6a5e", "filename": "tests/compile-fail/exact_div1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div1.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // divison by 0\n+    unsafe { std::intrinsics::exact_div(2, 0); } //~ ERROR divisor of zero\n+}"}, {"sha": "22bcf027dd05f854aa1556825e3e2ae4091c30e7", "filename": "tests/compile-fail/exact_div2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div2.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // divison with a remainder\n+    unsafe { std::intrinsics::exact_div(2u16, 3); } //~ ERROR Scalar(0x0002) cannot be divided by Scalar(0x0003) without remainder\n+}"}, {"sha": "2db62e0092d51ebaf08160cc14756450899d7dd6", "filename": "tests/compile-fail/exact_div3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div3.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // signed divison with a remainder\n+    unsafe { std::intrinsics::exact_div(-19i8, 2); } //~ ERROR Scalar(0xed) cannot be divided by Scalar(0x02) without remainder\n+}"}, {"sha": "736d4f2516d2ddb6a958870354084091c75a52a9", "filename": "tests/compile-fail/exact_div4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Fexact_div4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div4.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // divison of min_value by -1\n+    unsafe { std::intrinsics::exact_div(i64::min_value(), -1); } //~ ERROR result of dividing MIN by -1 cannot be represented\n+}"}, {"sha": "2447c8ba4a818cb68f3d5a1084d3dd9bb5061ebe", "filename": "tests/compile-fail/unchecked_add1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_add1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_add1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_add1.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_add(40000u16, 30000); } //~ ERROR Overflowing arithmetic in unchecked_add\n+}"}, {"sha": "e292cdf6d961e07f3858a9cf02d9edc350188c80", "filename": "tests/compile-fail/unchecked_add2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_add2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_add2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_add2.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_add(-30000i16, -8000); } //~ ERROR Overflowing arithmetic in unchecked_add\n+}"}, {"sha": "57bfaf124c2417c593db226fdf2cb9f3fd78f9bc", "filename": "tests/compile-fail/unchecked_mul1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_mul1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_mul1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_mul1.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_mul(300u16, 250u16); } //~ ERROR Overflowing arithmetic in unchecked_mul\n+}"}, {"sha": "690f2dc76284ccc4cb4dfaa8779bee7ebd167dd8", "filename": "tests/compile-fail/unchecked_mul2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_mul2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_mul2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_mul2.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_mul(1_000_000_000i32, -4); } //~ ERROR Overflowing arithmetic in unchecked_mul\n+}"}, {"sha": "0be8afa2c34cc8010ccb52c405660f700cd1e5af", "filename": "tests/compile-fail/unchecked_sub1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_sub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_sub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_sub1.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MIN overflow\n+    unsafe { std::intrinsics::unchecked_sub(14u32, 22); } //~ ERROR Overflowing arithmetic in unchecked_sub\n+}"}, {"sha": "bc23fa37c36764368b6081aec2446bac3fbdc353", "filename": "tests/compile-fail/unchecked_sub2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_sub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Fcompile-fail%2Funchecked_sub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_sub2.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -0,0 +1,5 @@\n+#![feature(core_intrinsics)]\n+fn main() {\n+    // MAX overflow\n+    unsafe { std::intrinsics::unchecked_sub(30000i16, -7000); } //~ ERROR Overflowing arithmetic in unchecked_sub\n+}"}, {"sha": "af3517af6f7a021582e172280607fa1e8a585ace", "filename": "tests/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b298bc4f5a7e86eb78404e25de08f179091e03/tests%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-integer.rs?ref=e4b298bc4f5a7e86eb78404e25de08f179091e03", "patch": "@@ -8,23 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(intrinsics)]\n-\n-mod rusti {\n-    extern \"rust-intrinsic\" {\n-        pub fn ctpop<T>(x: T) -> T;\n-        pub fn ctlz<T>(x: T) -> T;\n-        pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn cttz<T>(x: T) -> T;\n-        pub fn cttz_nonzero<T>(x: T) -> T;\n-        pub fn bswap<T>(x: T) -> T;\n-    }\n-}\n+#![feature(core_intrinsics)]\n+use std::intrinsics::*;\n \n pub fn main() {\n     unsafe {\n-        use crate::rusti::*;\n-\n         assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n         assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n         assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n@@ -138,5 +126,29 @@ pub fn main() {\n         assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n         assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n         assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+\n+        assert_eq!(exact_div(9*9u32, 3), 27);\n+        assert_eq!(exact_div(-9*9i32, 3), -27);\n+        assert_eq!(exact_div(9*9i8, -3), -27);\n+        assert_eq!(exact_div(-9*9i64, -3), 27);\n+\n+        assert_eq!(unchecked_div(9*9u32, 2), 40);\n+        assert_eq!(unchecked_div(-9*9i32, 2), -40);\n+        assert_eq!(unchecked_div(9*9i8, -2), -40);\n+        assert_eq!(unchecked_div(-9*9i64, -2), 40);\n+\n+        assert_eq!(unchecked_rem(9*9u32, 2), 1);\n+        assert_eq!(unchecked_rem(-9*9i32, 2), -1);\n+        assert_eq!(unchecked_rem(9*9i8, -2), 1);\n+        assert_eq!(unchecked_rem(-9*9i64, -2), -1);\n+\n+        assert_eq!(unchecked_add(23u8, 19), 42);\n+        assert_eq!(unchecked_add(5, -10), -5);\n+\n+        assert_eq!(unchecked_sub(23u8, 19), 4);\n+        assert_eq!(unchecked_sub(-17, -27), 10);\n+\n+        assert_eq!(unchecked_mul(6u8, 7), 42);\n+        assert_eq!(unchecked_mul(13, -5), -65);\n     }\n }"}]}