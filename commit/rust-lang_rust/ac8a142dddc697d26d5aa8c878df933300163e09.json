{"sha": "ac8a142dddc697d26d5aa8c878df933300163e09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGExNDJkZGRjNjk3ZDI2ZDVhYThjODc4ZGY5MzMzMDAxNjNlMDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T20:28:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T20:32:04Z"}, "message": "Refactor inlay hints", "tree": {"sha": "5216d5c287a7cf761cf30c959f5500548c65836c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5216d5c287a7cf761cf30c959f5500548c65836c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8a142dddc697d26d5aa8c878df933300163e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8a142dddc697d26d5aa8c878df933300163e09", "html_url": "https://github.com/rust-lang/rust/commit/ac8a142dddc697d26d5aa8c878df933300163e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8a142dddc697d26d5aa8c878df933300163e09/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efbbc903e68aaf32ee1fba5537769070cd2d01e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/efbbc903e68aaf32ee1fba5537769070cd2d01e8", "html_url": "https://github.com/rust-lang/rust/commit/efbbc903e68aaf32ee1fba5537769070cd2d01e8"}], "stats": {"total": 170, "additions": 67, "deletions": 103}, "files": [{"sha": "aae9de69c2e9f2ed8b4e67c9050e927cab5afa33", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 67, "deletions": 103, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/ac8a142dddc697d26d5aa8c878df933300163e09/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ac8a142dddc697d26d5aa8c878df933300163e09/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=ac8a142dddc697d26d5aa8c878df933300163e09", "patch": "@@ -1,39 +1,29 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import { Server } from './server';\n+\n import { Ctx } from './ctx';\n \n export function activateInlayHints(ctx: Ctx) {\n-    const hintsUpdater = new HintsUpdater();\n-    hintsUpdater.refreshHintsForVisibleEditors().then(() => {\n-        // vscode may ignore top level hintsUpdater.refreshHintsForVisibleEditors()\n-        // so update the hints once when the focus changes to guarantee their presence\n-        let editorChangeDisposable: vscode.Disposable | null = null;\n-        editorChangeDisposable = vscode.window.onDidChangeActiveTextEditor(\n-            _ => {\n-                if (editorChangeDisposable !== null) {\n-                    editorChangeDisposable.dispose();\n-                }\n-                return hintsUpdater.refreshHintsForVisibleEditors();\n-            },\n-        );\n+    const hintsUpdater = new HintsUpdater(ctx);\n+    console.log('activateInlayHints');\n \n-        ctx.pushCleanup(\n-            vscode.window.onDidChangeVisibleTextEditors(_ =>\n-                hintsUpdater.refreshHintsForVisibleEditors(),\n-            ),\n-        );\n-        ctx.pushCleanup(\n-            vscode.workspace.onDidChangeTextDocument(e =>\n-                hintsUpdater.refreshHintsForVisibleEditors(e),\n-            ),\n-        );\n-        ctx.pushCleanup(\n-            vscode.workspace.onDidChangeConfiguration(_ =>\n-                hintsUpdater.toggleHintsDisplay(ctx.config.displayInlayHints),\n-            ),\n-        );\n-    });\n+    vscode.window.onDidChangeVisibleTextEditors(async _ => {\n+        await hintsUpdater.refresh();\n+    }, ctx.subscriptions);\n+\n+    vscode.workspace.onDidChangeTextDocument(async e => {\n+        if (e.contentChanges.length === 0) return;\n+        if (e.document.languageId !== 'rust') return;\n+        await hintsUpdater.refresh();\n+    }, ctx.subscriptions);\n+\n+    vscode.workspace.onDidChangeConfiguration(_ => {\n+        hintsUpdater.setEnabled(ctx.config.displayInlayHints);\n+    }, ctx.subscriptions);\n+\n+    // XXX: don't await here;\n+    // Who knows what happens if an exception is thrown here...\n+    hintsUpdater.refresh();\n }\n \n interface InlayHintsParams {\n@@ -53,95 +43,69 @@ const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n });\n \n class HintsUpdater {\n-    private displayHints = true;\n-\n-    public async toggleHintsDisplay(displayHints: boolean): Promise<void> {\n-        if (this.displayHints !== displayHints) {\n-            this.displayHints = displayHints;\n-            return this.refreshVisibleEditorsHints(\n-                displayHints ? undefined : [],\n-            );\n-        }\n-    }\n+    private ctx: Ctx;\n+    private enabled = true;\n \n-    public async refreshHintsForVisibleEditors(\n-        cause?: vscode.TextDocumentChangeEvent,\n-    ): Promise<void> {\n-        if (!this.displayHints) return;\n-\n-        if (\n-            cause !== undefined &&\n-            (cause.contentChanges.length === 0 ||\n-                !this.isRustDocument(cause.document))\n-        ) {\n-            return;\n-        }\n-        return this.refreshVisibleEditorsHints();\n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx;\n     }\n \n-    private async refreshVisibleEditorsHints(\n-        newDecorations?: vscode.DecorationOptions[],\n-    ) {\n-        const promises: Array<Promise<void>> = [];\n-\n-        for (const rustEditor of vscode.window.visibleTextEditors.filter(\n-            editor => this.isRustDocument(editor.document),\n-        )) {\n-            if (newDecorations !== undefined) {\n-                promises.push(\n-                    Promise.resolve(\n-                        rustEditor.setDecorations(\n-                            typeHintDecorationType,\n-                            newDecorations,\n-                        ),\n-                    ),\n-                );\n-            } else {\n-                promises.push(this.updateDecorationsFromServer(rustEditor));\n-            }\n-        }\n+    async setEnabled(enabled: boolean) {\n+        if (this.enabled == enabled) return;\n+        this.enabled = enabled;\n \n-        for (const promise of promises) {\n-            await promise;\n+        if (this.enabled) {\n+            await this.refresh();\n+        } else {\n+            this.allEditors.forEach(it => this.setDecorations(it, []));\n         }\n     }\n \n-    private isRustDocument(document: vscode.TextDocument): boolean {\n-        return document && document.languageId === 'rust';\n+    async refresh() {\n+        if (!this.enabled) return;\n+        const promises = this.allEditors.map(it => this.refreshEditor(it));\n+        await Promise.all(promises);\n     }\n \n-    private async updateDecorationsFromServer(\n-        editor: vscode.TextEditor,\n-    ): Promise<void> {\n+    private async refreshEditor(editor: vscode.TextEditor): Promise<void> {\n         const newHints = await this.queryHints(editor.document.uri.toString());\n-        if (newHints !== null) {\n-            const newDecorations = newHints.map(hint => ({\n-                range: hint.range,\n-                renderOptions: {\n-                    after: {\n-                        contentText: `: ${hint.label}`,\n-                    },\n+\n+        const newDecorations = (newHints ? newHints : []).map(hint => ({\n+            range: hint.range,\n+            renderOptions: {\n+                after: {\n+                    contentText: `: ${hint.label}`,\n                 },\n-            }));\n-            return editor.setDecorations(\n-                typeHintDecorationType,\n-                newDecorations,\n-            );\n-        }\n+            },\n+        }));\n+        this.setDecorations(editor, newDecorations);\n+    }\n+\n+    private get allEditors(): vscode.TextEditor[] {\n+        return vscode.window.visibleTextEditors.filter(\n+            editor => editor.document.languageId === 'rust',\n+        );\n+    }\n+\n+    private setDecorations(\n+        editor: vscode.TextEditor,\n+        decorations: vscode.DecorationOptions[],\n+    ) {\n+        editor.setDecorations(\n+            typeHintDecorationType,\n+            this.enabled ? decorations : [],\n+        );\n     }\n \n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         const request: InlayHintsParams = {\n             textDocument: { uri: documentUri },\n         };\n-        const client = Server.client;\n-        return client\n-            .onReady()\n-            .then(() =>\n-                client.sendRequest<InlayHint[] | null>(\n-                    'rust-analyzer/inlayHints',\n-                    request,\n-                ),\n-            );\n+        await this.ctx.client.onReady();\n+\n+        return this.ctx.client.sendRequest<InlayHint[] | null>(\n+            'rust-analyzer/inlayHints',\n+            request,\n+        );\n     }\n }"}]}