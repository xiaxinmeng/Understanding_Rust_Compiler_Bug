{"sha": "0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMGZlNjkxZDYyMTFiNmE1ZjA2YTkzMDJmOWM5YzViYjRhMWQ1MDM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2017-10-26T03:44:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-26T03:44:20Z"}, "message": "Merge pull request #2175 from lukasstevens/master\n\nCheck for arrays with size > 32", "tree": {"sha": "daa991791144466f33eb33c7f5eb5c5462a62b48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa991791144466f33eb33c7f5eb5c5462a62b48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503", "html_url": "https://github.com/rust-lang/rust/commit/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9682ca563ad9ec6bc2da520ad92970d30d5c1e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9682ca563ad9ec6bc2da520ad92970d30d5c1e0", "html_url": "https://github.com/rust-lang/rust/commit/f9682ca563ad9ec6bc2da520ad92970d30d5c1e0"}, {"sha": "0ae2ece91e0bb9dd2dc5ce151d6fc280183f0792", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae2ece91e0bb9dd2dc5ce151d6fc280183f0792", "html_url": "https://github.com/rust-lang/rust/commit/0ae2ece91e0bb9dd2dc5ce151d6fc280183f0792"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "2e6835b7f68dc90d5f6ded324756e5701a09abc1", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0b0fe691d6211b6a5f06a9302f9c9c5bb4a1d503", "patch": "@@ -2,7 +2,7 @@ use itertools::Itertools;\n use reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n-use rustc::hir::def_id; \n+use rustc::hir::def_id;\n use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::map::Node::{NodeBlock, NodeExpr, NodeStmt};\n use rustc::lint::*;\n@@ -363,7 +363,7 @@ impl LintPass for Pass {\n             EMPTY_LOOP,\n             WHILE_LET_ON_ITERATOR,\n             FOR_KV_MAP,\n-            NEVER_LOOP, \n+            NEVER_LOOP,\n             MUT_RANGE_BOUND\n         )\n     }\n@@ -1128,7 +1128,12 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                 let fn_arg_tys = method_type.fn_sig(cx.tcx).inputs();\n                 assert_eq!(fn_arg_tys.skip_binder().len(), 1);\n                 if fn_arg_tys.skip_binder()[0].is_region_ptr() {\n-                    lint_iter_method(cx, args, arg, method_name);\n+                    match cx.tables.expr_ty(&args[0]).sty {\n+                        // If the length is greater than 32 no traits are implemented for array and\n+                        // therefore we cannot use `&`.\n+                        ty::TypeVariants::TyArray(_, size) if const_to_u64(size) > 32 => (),\n+                        _ => lint_iter_method(cx, args, arg, method_name)\n+                    };\n                 } else {\n                     let object = snippet(cx, args[0].span, \"_\");\n                     span_lint_and_sugg(\n@@ -1319,7 +1324,7 @@ struct MutateDelegate {\n impl<'tcx> Delegate<'tcx> for MutateDelegate {\n     fn consume(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: ConsumeMode) {\n     }\n-  \n+\n     fn matched_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: MatchMode) {\n     }\n \n@@ -1500,13 +1505,13 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     walk_expr(&mut used_visitor, idx);\n                     used_visitor.used\n                 };\n-    \n+\n                 if index_used {\n                     let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n                     match def {\n                         Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n                             let hir_id = self.cx.tcx.hir.node_to_hir_id(node_id);\n-    \n+\n                             let parent_id = self.cx.tcx.hir.get_parent(expr.id);\n                             let parent_def_id = self.cx.tcx.hir.local_def_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);"}]}