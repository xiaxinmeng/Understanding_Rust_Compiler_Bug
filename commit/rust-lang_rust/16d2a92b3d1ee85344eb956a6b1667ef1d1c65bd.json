{"sha": "16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZDJhOTJiM2QxZWU4NTM0NGViOTU2YTZiMTY2N2VmMWQxYzY1YmQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-26T16:30:19Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:44:15Z"}, "message": "Improve the diagnostic message", "tree": {"sha": "0a746117a6b6a60450980f37bbe83ee2a678588c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a746117a6b6a60450980f37bbe83ee2a678588c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "html_url": "https://github.com/rust-lang/rust/commit/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8937faa83795ccd55b19a5cb1869ce3b1097fe43", "url": "https://api.github.com/repos/rust-lang/rust/commits/8937faa83795ccd55b19a5cb1869ce3b1097fe43", "html_url": "https://github.com/rust-lang/rust/commit/8937faa83795ccd55b19a5cb1869ce3b1097fe43"}], "stats": {"total": 133, "additions": 61, "deletions": 72}, "files": [{"sha": "faecb7013b492513087941f9271dc4d2d44cf0f9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -153,7 +153,9 @@ pub struct Mir<'tcx> {\n     /// `||` expression into `&` or `|` respectively. This is problematic because if we ever stop\n     /// this conversion from happening and use short circuiting, we will cause the following code\n     /// to change the value of `x`: `let mut x = 42; false && { x = 55; true };`\n-    pub control_flow_destroyed: bool,\n+    ///\n+    /// List of places where control flow was destroyed. Used for error reporting.\n+    pub control_flow_destroyed: Vec<(Span, String)>,\n \n     /// A span representing this MIR, for error reporting\n     pub span: Span,\n@@ -173,7 +175,7 @@ impl<'tcx> Mir<'tcx> {\n         arg_count: usize,\n         upvar_decls: Vec<UpvarDecl>,\n         span: Span,\n-        control_flow_destroyed: bool,\n+        control_flow_destroyed: Vec<(Span, String)>,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place\n         assert!("}, {"sha": "1d28c4fa114ef2fbc8d29b839d41f80d8317df10", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -35,6 +35,7 @@ CloneTypeFoldableAndLiftImpls! {\n     usize,\n     ::ty::layout::VariantIdx,\n     u64,\n+    String,\n     ::middle::region::Scope,\n     ::syntax::ast::FloatTy,\n     ::syntax::ast::NodeId,"}, {"sha": "81cccd9fd530b578eb114e86d75d8ee3dab18154", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -23,7 +23,6 @@ use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n use rustc::mir::{BorrowKind};\n use syntax_pos::Span;\n-use syntax::errors::Applicability;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n@@ -373,37 +372,21 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     // FIXME(eddyb) use logical ops in constants when\n                     // they can handle that kind of control-flow.\n                     (hir::BinOpKind::And, hir::Constness::Const) => {\n-                        cx.control_flow_destroyed = true;\n-                        cx.tcx.sess.struct_span_warn(\n+                        cx.control_flow_destroyed.push((\n                             op.span,\n-                            \"boolean short circuiting operators in constants do \\\n-                             not actually short circuit. Thus new const eval features \\\n-                             are not accessible in constants.\"\n-                        ).span_suggestion_with_applicability(\n-                            op.span,\n-                            \"use a bit operator instead\",\n-                            \"&\".into(),\n-                            Applicability::MachineApplicable,\n-                        ).emit();\n+                            \"`&&` operator\".into(),\n+                        ));\n                         ExprKind::Binary {\n                             op: BinOp::BitAnd,\n                             lhs: lhs.to_ref(),\n                             rhs: rhs.to_ref(),\n                         }\n                     }\n                     (hir::BinOpKind::Or, hir::Constness::Const) => {\n-                        cx.control_flow_destroyed = true;\n-                        cx.tcx.sess.struct_span_warn(\n-                            op.span,\n-                            \"boolean short circuiting operators in constants do \\\n-                             not actually short circuit. Thus new const eval features \\\n-                             are not accessible in constants.\"\n-                        ).span_suggestion_with_applicability(\n+                        cx.control_flow_destroyed.push((\n                             op.span,\n-                            \"use a bit operator instead\",\n-                            \"|\".into(),\n-                            Applicability::MachineApplicable,\n-                        ).emit();\n+                            \"`||` operator\".into(),\n+                        ));\n                         ExprKind::Binary {\n                             op: BinOp::BitOr,\n                             lhs: lhs.to_ref(),"}, {"sha": "a7924b7b738760cff100606699f6ca728c13748f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -58,7 +58,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     check_overflow: bool,\n \n     /// See field with the same name on `Mir`\n-    control_flow_destroyed: bool,\n+    control_flow_destroyed: Vec<(Span, String)>,\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n@@ -99,11 +99,11 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             constness,\n             body_owner_kind,\n             check_overflow,\n-            control_flow_destroyed: false,\n+            control_flow_destroyed: Vec::new(),\n         }\n     }\n \n-    pub fn control_flow_destroyed(&self) -> bool {\n+    pub fn control_flow_destroyed(self) -> Vec<(Span, String)> {\n         self.control_flow_destroyed\n     }\n }"}, {"sha": "9d90dc2931afa539ddabb5f3e03fa4bd30f20dc6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -220,7 +220,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         sig.inputs().len(),\n         vec![],\n         span,\n-        true,\n+        vec![],\n     );\n \n     if let Some(..) = ty {\n@@ -389,7 +389,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             self.sig.inputs().len(),\n             vec![],\n             self.span,\n-            true,\n+            vec![],\n         )\n     }\n \n@@ -838,7 +838,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         sig.inputs().len(),\n         vec![],\n         span,\n-        true,\n+        vec![],\n     );\n     if let Abi::RustCall = sig.abi {\n         mir.spread_arg = Some(Local::new(sig.inputs().len()));\n@@ -916,6 +916,6 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         sig.inputs().len(),\n         vec![],\n         span,\n-        true,\n+        vec![],\n     )\n }"}, {"sha": "15a82fcadc1f20f67f51ce79de33b23cfb335cef", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -413,7 +413,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                 0,\n                 vec![],\n                 mir.span,\n-                false,\n+                vec![],\n             ),\n             tcx,\n             source: mir,"}, {"sha": "e49134409f0c6ec8cca2603b312a4ea38915c83b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -1335,17 +1335,32 @@ impl MirPass for QualifyAndPromoteConstants {\n             // Do the actual promotion, now that we know what's viable.\n             promote_consts::promote_candidates(mir, tcx, temps, candidates);\n         } else {\n-            if mir.control_flow_destroyed {\n-                for local in mir.vars_iter() {\n+            if !mir.control_flow_destroyed.is_empty() {\n+                let mut locals = mir.vars_iter();\n+                if let Some(local) = locals.next() {\n                     let span = mir.local_decls[local].source_info.span;\n-                    tcx.sess.span_err(\n+                    let mut error = tcx.sess.struct_span_err(\n                         span,\n                         &format!(\n-                            \"short circuiting operators do not actually short circuit in {}. \\\n-                             Thus new features like let bindings are not permitted\",\n+                            \"new features like let bindings are not permitted in {} \\\n+                            which also use short circuiting operators\",\n                             mode,\n                         ),\n                     );\n+                    for (span, kind) in mir.control_flow_destroyed.iter() {\n+                        error.span_note(\n+                            *span,\n+                            &format!(\"use of {} here\", kind),\n+                        );\n+                    }\n+                    for local in locals {\n+                        let span = mir.local_decls[local].source_info.span;\n+                        error.span_note(\n+                            span,\n+                            \"more locals defined here\",\n+                        );\n+                    }\n+                    error.emit();\n                 }\n             }\n             let promoted_temps = if mode == Mode::Const {"}, {"sha": "54e0e83efed3a4d1b9817e19aee8ffffdfaecab1", "filename": "src/test/run-pass/ctfe/issue-37550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -12,7 +12,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(const_fn)]\n+#![feature(const_fn, const_let)]\n \n const fn x() {\n     let t = true;"}, {"sha": "cc49e4696e58fd9d803cabfede462415844ca35a", "filename": "src/test/ui/consts/const_short_circuit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.rs?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -1,15 +1,15 @@\n #![feature(underscore_const_names, const_let)]\n \n-const _: bool = false && false; //~ WARN boolean short circuiting operators in constants\n-const _: bool = true && false; //~ WARN boolean short circuiting operators in constants\n+const _: bool = false && false;\n+const _: bool = true && false;\n const _: bool = {\n-    let mut x = true && false; //~ WARN boolean short circuiting operators in constants\n-    //~^ ERROR short circuiting operators do not actually short circuit in constant\n+    let mut x = true && false;\n+    //~^ ERROR new features like let bindings are not permitted\n     x\n };\n const _: bool = {\n-    let x = true && false; //~ WARN boolean short circuiting operators in constants\n-    //~^ ERROR short circuiting operators do not actually short circuit in constant\n+    let x = true && false;\n+    //~^ ERROR new features like let bindings are not permitted\n     x\n };\n "}, {"sha": "6f8fca60c8098ca2ca6d286c59ddb83f69db5826", "filename": "src/test/ui/consts/const_short_circuit.stderr", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr?ref=16d2a92b3d1ee85344eb956a6b1667ef1d1c65bd", "patch": "@@ -1,38 +1,26 @@\n-warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n-  --> $DIR/const_short_circuit.rs:3:23\n-   |\n-LL | const _: bool = false && false; //~ WARN boolean short circuiting operators in constants\n-   |                       ^^ help: use a bit operator instead: `&`\n-\n-warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n-  --> $DIR/const_short_circuit.rs:4:22\n-   |\n-LL | const _: bool = true && false; //~ WARN boolean short circuiting operators in constants\n-   |                      ^^ help: use a bit operator instead: `&`\n-\n-warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n-  --> $DIR/const_short_circuit.rs:6:22\n-   |\n-LL |     let mut x = true && false; //~ WARN boolean short circuiting operators in constants\n-   |                      ^^ help: use a bit operator instead: `&`\n-\n-error: short circuiting operators do not actually short circuit in constant. Thus new features like let bindings are not permitted\n+error: new features like let bindings are not permitted in constant which also use short circuiting operators\n   --> $DIR/const_short_circuit.rs:6:9\n    |\n-LL |     let mut x = true && false; //~ WARN boolean short circuiting operators in constants\n+LL |     let mut x = true && false;\n    |         ^^^^^\n-\n-warning: boolean short circuiting operators in constants do not actually short circuit. Thus new const eval features are not accessible in constants.\n-  --> $DIR/const_short_circuit.rs:11:18\n    |\n-LL |     let x = true && false; //~ WARN boolean short circuiting operators in constants\n-   |                  ^^ help: use a bit operator instead: `&`\n+note: use of `&&` operator here\n+  --> $DIR/const_short_circuit.rs:6:22\n+   |\n+LL |     let mut x = true && false;\n+   |                      ^^\n \n-error: short circuiting operators do not actually short circuit in constant. Thus new features like let bindings are not permitted\n+error: new features like let bindings are not permitted in constant which also use short circuiting operators\n   --> $DIR/const_short_circuit.rs:11:9\n    |\n-LL |     let x = true && false; //~ WARN boolean short circuiting operators in constants\n+LL |     let x = true && false;\n    |         ^\n+   |\n+note: use of `&&` operator here\n+  --> $DIR/const_short_circuit.rs:11:18\n+   |\n+LL |     let x = true && false;\n+   |                  ^^\n \n error: aborting due to 2 previous errors\n "}]}