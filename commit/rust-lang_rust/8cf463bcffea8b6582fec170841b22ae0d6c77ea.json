{"sha": "8cf463bcffea8b6582fec170841b22ae0d6c77ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjQ2M2JjZmZlYThiNjU4MmZlYzE3MDg0MWIyMmFlMGQ2Yzc3ZWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-03-20T14:41:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-30T04:15:19Z"}, "message": "proc_macro: move the rustc server to syntax_ext.", "tree": {"sha": "6a1c3b20b52dff3924c0ac48f5f5ad5a49ed56a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a1c3b20b52dff3924c0ac48f5f5ad5a49ed56a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf463bcffea8b6582fec170841b22ae0d6c77ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf463bcffea8b6582fec170841b22ae0d6c77ea", "html_url": "https://github.com/rust-lang/rust/commit/8cf463bcffea8b6582fec170841b22ae0d6c77ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf463bcffea8b6582fec170841b22ae0d6c77ea/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38fee305dac49529f5a469a231efb99b97fa3beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/38fee305dac49529f5a469a231efb99b97fa3beb", "html_url": "https://github.com/rust-lang/rust/commit/38fee305dac49529f5a469a231efb99b97fa3beb"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "d750f017172ddeb14331bdbbaa25934971aa098f", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463bcffea8b6582fec170841b22ae0d6c77ea/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463bcffea8b6582fec170841b22ae0d6c77ea/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8cf463bcffea8b6582fec170841b22ae0d6c77ea", "patch": "@@ -1599,12 +1599,6 @@ dependencies = [\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n-dependencies = [\n- \"rustc_data_structures 0.0.0\",\n- \"rustc_errors 0.0.0\",\n- \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n-]\n \n [[package]]\n name = \"profiler_builtins\""}, {"sha": "29e1c03cee1702e6727bc0eb8af7856a0d87d8e0", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=8cf463bcffea8b6582fec170841b22ae0d6c77ea", "patch": "@@ -7,8 +7,3 @@ version = \"0.0.0\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n-[dependencies]\n-syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "32c81302931f36865b659062c0ce9bb4c860a86b", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=8cf463bcffea8b6582fec170841b22ae0d6c77ea", "patch": "@@ -28,7 +28,6 @@\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n #![feature(nll)]\n-#![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(const_fn)]\n #![feature(extern_types)]\n@@ -39,19 +38,10 @@\n \n #![recursion_limit=\"256\"]\n \n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_errors;\n-extern crate rustc_data_structures;\n-\n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n #[doc(hidden)]\n pub mod bridge;\n \n-#[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n-#[doc(hidden)]\n-pub mod rustc;\n-\n mod diagnostic;\n \n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]"}, {"sha": "5c82d1911383ee3bee9761e90feac47e4d321a48", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=8cf463bcffea8b6582fec170841b22ae0d6c77ea", "patch": "@@ -78,7 +78,7 @@ impl MultiItemModifier for ProcMacroDerive {\n         let token = Token::interpolated(token::NtItem(item));\n         let input = tokenstream::TokenTree::Token(DUMMY_SP, token).into();\n \n-        let server = ::proc_macro::rustc::Rustc::new(ecx);\n+        let server = ::proc_macro_server::Rustc::new(ecx);\n         let stream = match self.client.run(&EXEC_STRATEGY, server, input) {\n             Ok(stream) => stream,\n             Err(e) => {"}, {"sha": "1d814a67876b8baed1b5ae765164273f0cab52f0", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=8cf463bcffea8b6582fec170841b22ae0d6c77ea", "patch": "@@ -14,7 +14,10 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(in_band_lifetimes)]\n+#![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n+#![feature(proc_macro_span)]\n #![feature(decl_macro)]\n #![feature(nll)]\n #![feature(str_escape)]\n@@ -57,6 +60,7 @@ mod test_case;\n \n pub mod proc_macro_decls;\n pub mod proc_macro_impl;\n+mod proc_macro_server;\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast;"}, {"sha": "43ef31a00baa59c4aa5c32b9c8ef0f8aad287184", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=8cf463bcffea8b6582fec170841b22ae0d6c77ea", "patch": "@@ -32,7 +32,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n                    annotation: TokenStream,\n                    annotated: TokenStream)\n                    -> TokenStream {\n-        let server = ::proc_macro::rustc::Rustc::new(ecx);\n+        let server = ::proc_macro_server::Rustc::new(ecx);\n         match self.client.run(&EXEC_STRATEGY, server, annotation, annotated) {\n             Ok(stream) => stream,\n             Err(e) => {\n@@ -61,7 +61,7 @@ impl base::ProcMacro for BangProcMacro {\n                    span: Span,\n                    input: TokenStream)\n                    -> TokenStream {\n-        let server = ::proc_macro::rustc::Rustc::new(ecx);\n+        let server = ::proc_macro_server::Rustc::new(ecx);\n         match self.client.run(&EXEC_STRATEGY, server, input) {\n             Ok(stream) => stream,\n             Err(e) => {"}, {"sha": "56bd58b28a66e6553f4faf95dfe10153daf4247e", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "renamed", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf463bcffea8b6582fec170841b22ae0d6c77ea/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=8cf463bcffea8b6582fec170841b22ae0d6c77ea", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use bridge::{server, TokenTree};\n-use {Delimiter, Level, LineColumn, Spacing};\n+use errors::{self, Diagnostic, DiagnosticBuilder};\n+use std::panic;\n+\n+use proc_macro::bridge::{server, TokenTree};\n+use proc_macro::{Delimiter, Level, LineColumn, Spacing};\n \n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{self as errors, Diagnostic, DiagnosticBuilder};\n use std::ascii;\n use std::ops::Bound;\n use syntax::ast;\n@@ -24,7 +26,15 @@ use syntax_pos::hygiene::{SyntaxContext, Transparency};\n use syntax_pos::symbol::{keywords, Symbol};\n use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n \n-impl Delimiter {\n+trait FromInternal<T> {\n+    fn from_internal(x: T) -> Self;\n+}\n+\n+trait ToInternal<T> {\n+    fn to_internal(self) -> T;\n+}\n+\n+impl FromInternal<token::DelimToken> for Delimiter {\n     fn from_internal(delim: token::DelimToken) -> Delimiter {\n         match delim {\n             token::Paren => Delimiter::Parenthesis,\n@@ -33,7 +43,9 @@ impl Delimiter {\n             token::NoDelim => Delimiter::None,\n         }\n     }\n+}\n \n+impl ToInternal<token::DelimToken> for Delimiter {\n     fn to_internal(self) -> token::DelimToken {\n         match self {\n             Delimiter::Parenthesis => token::Paren,\n@@ -44,8 +56,10 @@ impl Delimiter {\n     }\n }\n \n-impl TokenTree<Group, Punct, Ident, Literal> {\n-    fn from_internal(stream: TokenStream, sess: &ParseSess, stack: &mut Vec<Self>) -> Self {\n+impl FromInternal<(TokenStream, &'_ ParseSess, &'_ mut Vec<Self>)>\n+    for TokenTree<Group, Punct, Ident, Literal>\n+{\n+    fn from_internal((stream, sess, stack): (TokenStream, &ParseSess, &mut Vec<Self>)) -> Self {\n         use syntax::parse::token::*;\n \n         let (tree, joint) = stream.as_tree();\n@@ -204,7 +218,9 @@ impl TokenTree<Group, Punct, Ident, Literal> {\n             Whitespace | Comment | Shebang(..) | Eof => unreachable!(),\n         }\n     }\n+}\n \n+impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n     fn to_internal(self) -> TokenStream {\n         use syntax::parse::token::*;\n \n@@ -292,13 +308,14 @@ impl TokenTree<Group, Punct, Ident, Literal> {\n     }\n }\n \n-impl Level {\n+impl ToInternal<errors::Level> for Level {\n     fn to_internal(self) -> errors::Level {\n         match self {\n             Level::Error => errors::Level::Error,\n             Level::Warning => errors::Level::Warning,\n             Level::Note => errors::Level::Note,\n             Level::Help => errors::Level::Help,\n+            _ => unreachable!(\"unknown proc_macro::Level variant: {:?}\", self),\n         }\n     }\n }\n@@ -339,7 +356,7 @@ pub struct Literal {\n     span: Span,\n }\n \n-pub struct Rustc<'a> {\n+pub(crate) struct Rustc<'a> {\n     sess: &'a ParseSess,\n     def_site: Span,\n     call_site: Span,\n@@ -429,7 +446,7 @@ impl server::TokenStreamIter for Rustc<'_> {\n         loop {\n             let tree = iter.stack.pop().or_else(|| {\n                 let next = iter.cursor.next_as_stream()?;\n-                Some(TokenTree::from_internal(next, self.sess, &mut iter.stack))\n+                Some(TokenTree::from_internal((next, self.sess, &mut iter.stack)))\n             })?;\n             // HACK: The condition \"dummy span + group with empty delimiter\" represents an AST\n             // fragment approximately converted into a token stream. This may happen, for", "previous_filename": "src/libproc_macro/rustc.rs"}]}