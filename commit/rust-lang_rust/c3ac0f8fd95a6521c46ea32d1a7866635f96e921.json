{"sha": "c3ac0f8fd95a6521c46ea32d1a7866635f96e921", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWMwZjhmZDk1YTY1MjFjNDZlYTMyZDFhNzg2NjYzNWY5NmU5MjE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-30T23:27:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-30T23:27:31Z"}, "message": "Fix auto_serialize test.", "tree": {"sha": "d98e6249b165716b5ce504616bec3b88c4a306e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98e6249b165716b5ce504616bec3b88c4a306e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ac0f8fd95a6521c46ea32d1a7866635f96e921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ac0f8fd95a6521c46ea32d1a7866635f96e921", "html_url": "https://github.com/rust-lang/rust/commit/c3ac0f8fd95a6521c46ea32d1a7866635f96e921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ac0f8fd95a6521c46ea32d1a7866635f96e921/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11871b8baa3c866cb9a58fba83d6f78a05a13c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/11871b8baa3c866cb9a58fba83d6f78a05a13c10", "html_url": "https://github.com/rust-lang/rust/commit/11871b8baa3c866cb9a58fba83d6f78a05a13c10"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "e417b3a290ed63f951f759906844bebbd4348f7a", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c3ac0f8fd95a6521c46ea32d1a7866635f96e921/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ac0f8fd95a6521c46ea32d1a7866635f96e921/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=c3ac0f8fd95a6521c46ea32d1a7866635f96e921", "patch": "@@ -42,6 +42,41 @@ enum expr {\n     minus(@expr, @expr)\n }\n \n+impl an_enum : cmp::Eq {\n+    pure fn eq(&&other: an_enum) -> bool {\n+        self.v == other.v\n+    }\n+}\n+\n+impl point : cmp::Eq {\n+    pure fn eq(&&other: point) -> bool {\n+        self.x == other.x &&\n+            self.y == other.y\n+    }\n+}\n+\n+impl<T:cmp::Eq> quark<T> : cmp::Eq {\n+    pure fn eq(&&other: quark<T>) -> bool {\n+        match self {\n+          top(ref q) => match other {\n+            top(ref r) => q == r,\n+            bottom(_) => false\n+          },\n+          bottom(ref q) => match other {\n+            top(_) => false,\n+            bottom(ref r) => q == r\n+          }\n+        }\n+    }\n+}\n+\n+\n+impl c_like : cmp::Eq {\n+    pure fn eq(&&other: c_like) -> bool {\n+        self as int == other as int\n+    }\n+}\n+\n impl expr : cmp::Eq {\n     pure fn eq(&&other: expr) -> bool {\n         match self {"}]}