{"sha": "15d8f0c466d901a60ec321c55c6b45180506cdf9", "node_id": "C_kwDOAAsO6NoAKDE1ZDhmMGM0NjZkOTAxYTYwZWMzMjFjNTVjNmI0NTE4MDUwNmNkZjk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-27T15:59:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-27T15:59:18Z"}, "message": "Merge #11354\n\n11354: fix: More correct `$crate` handling in eager macros r=jonas-schievink a=jonas-schievink\n\nFixes a few of the additional bugs in https://github.com/rust-analyzer/rust-analyzer/issues/10300, but not yet that issue itself.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "e292303c9b320b6c868c5c6f91f6eda0854a5173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e292303c9b320b6c868c5c6f91f6eda0854a5173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d8f0c466d901a60ec321c55c6b45180506cdf9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8sFWCRBK7hj4Ov3rIwAAyTYIAAs2pvsF/g22dz9jpDQwGCKL\nY6UE72cJP/2isLQSqz1B+WVX4phVZo5WJ4u0JWwlxlywvHSEpP1lvkMDQohAjp2p\nnQXvPdiP9ZNYf9e8Qu8BYN+FsYZfbiwwY27qi6/3X2muv2go1cPkTUXanyG/7Q6e\ncabuPmeoodE+BUKTU8xHjeowBdkDw1tAaxOpN6xK2FFW/zg5mFGe4gOxx87SiwM6\nqfe73t3nlx1RvPpBufiKdt1J9drNNr3PG41/WX4JuPbUelqJ8YUhQmI6TOE1lteg\nLPjK8RLo2QqxmUJs1zACMMbjG6NuNFlcwXFCafgIbkAoPKDEFoqLqC7Ro1Z5qOM=\n=TJNN\n-----END PGP SIGNATURE-----\n", "payload": "tree e292303c9b320b6c868c5c6f91f6eda0854a5173\nparent e149a15edd354dd0f995532d16a3e8dc21367e06\nparent 6c0fcb5b5d0b43604bb9d3b4ea79d5eaa3453977\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643299158 +0000\ncommitter GitHub <noreply@github.com> 1643299158 +0000\n\nMerge #11354\n\n11354: fix: More correct `$crate` handling in eager macros r=jonas-schievink a=jonas-schievink\n\nFixes a few of the additional bugs in https://github.com/rust-analyzer/rust-analyzer/issues/10300, but not yet that issue itself.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d8f0c466d901a60ec321c55c6b45180506cdf9", "html_url": "https://github.com/rust-lang/rust/commit/15d8f0c466d901a60ec321c55c6b45180506cdf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d8f0c466d901a60ec321c55c6b45180506cdf9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e149a15edd354dd0f995532d16a3e8dc21367e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/e149a15edd354dd0f995532d16a3e8dc21367e06", "html_url": "https://github.com/rust-lang/rust/commit/e149a15edd354dd0f995532d16a3e8dc21367e06"}, {"sha": "6c0fcb5b5d0b43604bb9d3b4ea79d5eaa3453977", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0fcb5b5d0b43604bb9d3b4ea79d5eaa3453977", "html_url": "https://github.com/rust-lang/rust/commit/6c0fcb5b5d0b43604bb9d3b4ea79d5eaa3453977"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "813c16c20841f0c473ada2a2134a7a38c15da88b", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/15d8f0c466d901a60ec321c55c6b45180506cdf9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d8f0c466d901a60ec321c55c6b45180506cdf9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=15d8f0c466d901a60ec321c55c6b45180506cdf9", "patch": "@@ -1086,6 +1086,7 @@ struct B;\n \n #[test]\n fn eager_macro_correctly_resolves_dollar_crate() {\n+    // MBE -> eager -> $crate::mbe\n     check(\n         r#\"\n //- /lib.rs\n@@ -1108,9 +1109,37 @@ struct A;\n \"#,\n         expect![[r#\"\n             crate\n+            A: t v\n             inner: m\n         \"#]],\n     );\n+    // eager -> MBE -> $crate::mbe\n+    check(\n+        r#\"\n+//- /lib.rs\n+#[rustc_builtin_macro]\n+macro_rules! include { () => {} }\n+\n+#[macro_export]\n+macro_rules! inner {\n+    () => { \"inc.rs\" };\n+}\n \n-    // FIXME: This currently fails. The result should contain `A: t v`.\n+macro_rules! n {\n+    () => {\n+        $crate::inner!()\n+    };\n+}\n+\n+include!(n!());\n+\n+//- /inc.rs\n+struct A;\n+\"#,\n+        expect![[r#\"\n+            crate\n+            A: t v\n+            inner: m\n+        \"#]],\n+    );\n }"}, {"sha": "66f7d8e3bc14596b1c158cf4c6138bdac87a74ba", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15d8f0c466d901a60ec321c55c6b45180506cdf9/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d8f0c466d901a60ec321c55c6b45180506cdf9/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=15d8f0c466d901a60ec321c55c6b45180506cdf9", "patch": "@@ -104,6 +104,7 @@ pub fn expand_eager_macro(\n     resolver: &dyn Fn(ModPath) -> Option<MacroDefId>,\n     diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<Result<MacroCallId, ErrorEmitted>, UnresolvedMacro> {\n+    let hygiene = Hygiene::new(db, macro_call.file_id);\n     let parsed_args = macro_call\n         .value\n         .token_tree()\n@@ -131,6 +132,7 @@ pub fn expand_eager_macro(\n     let parsed_args = mbe::token_tree_to_syntax_node(&parsed_args, mbe::TopEntryPoint::Expr).0;\n     let result = match eager_macro_recur(\n         db,\n+        &hygiene,\n         InFile::new(arg_id.as_file(), parsed_args.syntax_node()),\n         krate,\n         resolver,\n@@ -193,12 +195,12 @@ fn lazy_expand(\n \n fn eager_macro_recur(\n     db: &dyn AstDatabase,\n+    hygiene: &Hygiene,\n     curr: InFile<SyntaxNode>,\n     krate: CrateId,\n     macro_resolver: &dyn Fn(ModPath) -> Option<MacroDefId>,\n     mut diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<Result<SyntaxNode, ErrorEmitted>, UnresolvedMacro> {\n-    let hygiene = Hygiene::new(db, curr.file_id);\n     let original = curr.value.clone_for_update();\n \n     let children = original.descendants().filter_map(ast::MacroCall::cast);\n@@ -243,7 +245,8 @@ fn eager_macro_recur(\n                 };\n \n                 // replace macro inside\n-                match eager_macro_recur(db, val, krate, macro_resolver, diagnostic_sink) {\n+                let hygiene = Hygiene::new(db, val.file_id);\n+                match eager_macro_recur(db, &hygiene, val, krate, macro_resolver, diagnostic_sink) {\n                     Ok(Ok(it)) => it,\n                     Ok(Err(err)) => return Ok(Err(err)),\n                     Err(err) => return Err(err),"}, {"sha": "a5bfb302d5ebce2284783a3d2130ad924f375972", "filename": "crates/ide_diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/15d8f0c466d901a60ec321c55c6b45180506cdf9/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d8f0c466d901a60ec321c55c6b45180506cdf9/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=15d8f0c466d901a60ec321c55c6b45180506cdf9", "patch": "@@ -38,6 +38,45 @@ macro_rules! compile_error { () => {} }\n         );\n     }\n \n+    #[test]\n+    fn eager_macro_concat() {\n+        // FIXME: this is incorrectly handling `$crate`, resulting in a wrong diagnostic.\n+        // See: https://github.com/rust-analyzer/rust-analyzer/issues/10300\n+\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs crate:lib deps:core\n+use core::{panic, concat};\n+\n+mod private {\n+    pub use core::concat;\n+}\n+\n+macro_rules! m {\n+    () => {\n+        panic!(concat!($crate::private::concat!(\"\")));\n+    };\n+}\n+\n+fn f() {\n+    m!();\n+  //^^^^ error: unresolved macro `$crate::private::concat!`\n+}\n+\n+//- /core.rs crate:core\n+#[macro_export]\n+#[rustc_builtin_macro]\n+macro_rules! concat { () => {} }\n+\n+pub macro panic {\n+    ($msg:expr) => (\n+        $crate::panicking::panic_str($msg)\n+    ),\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn include_macro_should_allow_empty_content() {\n         let mut config = DiagnosticsConfig::default();"}]}