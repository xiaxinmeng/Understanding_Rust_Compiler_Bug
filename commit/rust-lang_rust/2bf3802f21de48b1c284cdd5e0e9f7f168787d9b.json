{"sha": "2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZjM4MDJmMjFkZTQ4YjFjMjg0Y2RkNWUwZTlmN2YxNjg3ODdkOWI=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-11T18:55:22Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-15T16:01:52Z"}, "message": "7709: Added the assist to generate is_empty function\n\nthe assist will be shown when the len function is implemented.\nis_empty internally uses len function.", "tree": {"sha": "3469e855a5df8e98d565955ab35d41d21315029b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3469e855a5df8e98d565955ab35d41d21315029b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "html_url": "https://github.com/rust-lang/rust/commit/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eec64ec01b0553aca855df8146965ed6c6746e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eec64ec01b0553aca855df8146965ed6c6746e7d", "html_url": "https://github.com/rust-lang/rust/commit/eec64ec01b0553aca855df8146965ed6c6746e7d"}], "stats": {"total": 252, "additions": 252, "deletions": 0}, "files": [{"sha": "bd29dddb3b16c53da4313223b5bd979cb2f9db71", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "patch": "@@ -0,0 +1,225 @@\n+use hir::{AssocItem, HasSource, Impl};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    AstNode, TextRange,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: generate_is_empty_from_len\n+//\n+// Generates is_empty implementation from the len method.\n+//\n+// ```\n+// impl MyStruct {\n+//     p$0ub fn len(&self) -> usize {\n+//         self.data.len()\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// impl MyStruct {\n+//     pub fn len(&self) -> usize {\n+//         self.data.len()\n+//     }\n+//\n+//     pub fn is_empty(&self) -> bool {\n+//         self.len() == 0\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_is_empty_from_len(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let fn_node = ctx.find_node_at_offset::<ast::Fn>()?;\n+    let fn_name = fn_node.name()?;\n+\n+    if fn_name.text() != \"len\" {\n+        cov_mark::hit!(len_function_not_present);\n+        return None;\n+    }\n+\n+    if fn_node.param_list()?.params().next().is_some() {\n+        cov_mark::hit!(len_function_with_parameters);\n+        return None;\n+    }\n+\n+    let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n+    let impl_def = ctx.sema.to_def(&impl_)?;\n+    if is_empty_implemented(ctx, &impl_def) {\n+        cov_mark::hit!(is_empty_already_implemented);\n+        return None;\n+    }\n+\n+    let range = get_text_range_of_len_function(ctx, &impl_def)?;\n+\n+    acc.add(\n+        AssistId(\"generate_is_empty_from_len\", AssistKind::Generate),\n+        \"Generate a is_empty impl from a len function\",\n+        range,\n+        |builder| {\n+            let code = get_is_empty_code();\n+            builder.insert(range.end(), code)\n+        },\n+    )\n+}\n+\n+fn get_function_from_impl(ctx: &AssistContext, impl_def: &Impl, name: &str) -> Option<AssocItem> {\n+    let db = ctx.sema.db;\n+    impl_def.items(db).into_iter().filter(|item| matches!(item, AssocItem::Function(_value))).find(\n+        |func| match func.name(db) {\n+            Some(fn_name) => fn_name.to_string() == name,\n+            None => false,\n+        },\n+    )\n+}\n+\n+fn is_empty_implemented(ctx: &AssistContext, impl_def: &Impl) -> bool {\n+    get_function_from_impl(ctx, impl_def, \"is_empty\").is_some()\n+}\n+\n+fn get_text_range_of_len_function(ctx: &AssistContext, impl_def: &Impl) -> Option<TextRange> {\n+    let db = ctx.sema.db;\n+    let len_fn = get_function_from_impl(ctx, impl_def, \"len\")?;\n+\n+    let mut range = None;\n+    if let AssocItem::Function(node) = len_fn {\n+        let node = node.source(db)?;\n+        range = Some(node.syntax().value.text_range());\n+    }\n+\n+    range\n+}\n+\n+fn get_is_empty_code() -> String {\n+    r#\"\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\"#\n+    .to_string()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn len_function_not_present() {\n+        cov_mark::check!(len_function_not_present);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+impl MyStruct {\n+    p$0ub fn test(&self) -> usize {\n+            self.data.len()\n+        }\n+    }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn len_function_with_parameters() {\n+        cov_mark::check!(len_function_with_parameters);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+impl MyStruct {\n+    p$0ub fn len(&self, _i: bool) -> usize {\n+        self.data.len()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn is_empty_already_implemented() {\n+        cov_mark::check!(is_empty_already_implemented);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn generate_is_empty() {\n+        check_assist(\n+            generate_is_empty_from_len,\n+            r#\"\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+}\n+\"#,\n+            r#\"\n+impl MyStruct {\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multiple_functions_in_impl() {\n+        check_assist(\n+            generate_is_empty_from_len,\n+            r#\"\n+impl MyStruct {\n+    pub fn new() -> Self {\n+        Self { data: 0 }\n+    }\n+\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn work(&self) -> Option<usize> {\n+        // do some work\n+    }\n+}\n+\"#,\n+            r#\"\n+impl MyStruct {\n+    pub fn new() -> Self {\n+        Self { data: 0 }\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+\n+    pub fn work(&self) -> Option<usize> {\n+        // do some work\n+    }\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "8c068a6c0efd87ad20e7418c9b57ecf9f443152e", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "patch": "@@ -129,6 +129,7 @@ mod handlers {\n     mod flip_trait_bound;\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n+    mod generate_is_empty_from_len;\n     mod generate_derive;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -193,6 +194,7 @@ mod handlers {\n             flip_trait_bound::flip_trait_bound,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n+            generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,"}, {"sha": "66fbcc968943cbdfd58148092c9d2d9577a20479", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf3802f21de48b1c284cdd5e0e9f7f168787d9b/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=2bf3802f21de48b1c284cdd5e0e9f7f168787d9b", "patch": "@@ -721,6 +721,31 @@ impl<T: Clone> Ctx<T> {\n     )\n }\n \n+#[test]\n+fn doctest_generate_is_empty_from_len() {\n+    check_doc_test(\n+        \"generate_is_empty_from_len\",\n+        r#####\"\n+impl MyStruct {\n+    p$0ub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+}\n+\"#####,\n+        r#####\"\n+impl MyStruct {\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_new() {\n     check_doc_test("}]}