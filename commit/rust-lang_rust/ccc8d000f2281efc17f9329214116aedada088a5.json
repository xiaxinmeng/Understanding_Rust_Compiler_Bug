{"sha": "ccc8d000f2281efc17f9329214116aedada088a5", "node_id": "C_kwDOAAsO6NoAKGNjYzhkMDAwZjIyODFlZmMxN2Y5MzI5MjE0MTE2YWVkYWRhMDg4YTU", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-12T04:31:50Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-25T17:08:36Z"}, "message": "Move some more code from rustc_middle to rustc_query_system", "tree": {"sha": "55733f84b5589ff87ff13c7c16536baef3307293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55733f84b5589ff87ff13c7c16536baef3307293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccc8d000f2281efc17f9329214116aedada088a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc8d000f2281efc17f9329214116aedada088a5", "html_url": "https://github.com/rust-lang/rust/commit/ccc8d000f2281efc17f9329214116aedada088a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccc8d000f2281efc17f9329214116aedada088a5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3f91bb51477084cdff194d8908053844fc6d9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f91bb51477084cdff194d8908053844fc6d9ea", "html_url": "https://github.com/rust-lang/rust/commit/f3f91bb51477084cdff194d8908053844fc6d9ea"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "40b9d73db94cfa841f64aac0ae05b1bbbe7d641a", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ccc8d000f2281efc17f9329214116aedada088a5/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc8d000f2281efc17f9329214116aedada088a5/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=ccc8d000f2281efc17f9329214116aedada088a5", "patch": "@@ -86,7 +86,7 @@ macro_rules! define_dep_nodes {\n             $( $( #[$attr] )* $variant),*\n         }\n \n-        fn dep_kind_from_label_string(label: &str) -> Result<DepKind, ()> {\n+        pub(super) fn dep_kind_from_label_string(label: &str) -> Result<DepKind, ()> {\n             match label {\n                 $(stringify!($variant) => Ok(DepKind::$variant),)*\n                 _ => Err(()),\n@@ -141,11 +141,6 @@ static_assert_size!(DepNode, 18);\n static_assert_size!(DepNode, 24);\n \n pub trait DepNodeExt: Sized {\n-    /// Construct a DepNode from the given DepKind and DefPathHash. This\n-    /// method will assert that the given DepKind actually requires a\n-    /// single DefId/DefPathHash parameter.\n-    fn from_def_path_hash(tcx: TyCtxt<'_>, def_path_hash: DefPathHash, kind: DepKind) -> Self;\n-\n     /// Extracts the DefId corresponding to this DepNode. This will work\n     /// if two conditions are met:\n     ///\n@@ -170,14 +165,6 @@ pub trait DepNodeExt: Sized {\n }\n \n impl DepNodeExt for DepNode {\n-    /// Construct a DepNode from the given DepKind and DefPathHash. This\n-    /// method will assert that the given DepKind actually requires a\n-    /// single DefId/DefPathHash parameter.\n-    fn from_def_path_hash(tcx: TyCtxt<'_>, def_path_hash: DefPathHash, kind: DepKind) -> DepNode {\n-        debug_assert!(tcx.fingerprint_style(kind) == FingerprintStyle::DefPathHash);\n-        DepNode { kind, hash: def_path_hash.0.into() }\n-    }\n-\n     /// Extracts the DefId corresponding to this DepNode. This will work\n     /// if two conditions are met:\n     ///"}, {"sha": "5c6ce0556eb8a4b22b744dbfd5592fbc1cb6e6a6", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccc8d000f2281efc17f9329214116aedada088a5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc8d000f2281efc17f9329214116aedada088a5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=ccc8d000f2281efc17f9329214116aedada088a5", "patch": "@@ -47,6 +47,7 @@ use crate::ich::StableHashingContext;\n \n use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir::definitions::DefPathHash;\n use std::fmt;\n use std::hash::Hash;\n \n@@ -88,6 +89,17 @@ impl<K: DepKind> DepNode<K> {\n \n         dep_node\n     }\n+\n+    /// Construct a DepNode from the given DepKind and DefPathHash. This\n+    /// method will assert that the given DepKind actually requires a\n+    /// single DefId/DefPathHash parameter.\n+    pub fn from_def_path_hash<Ctxt>(tcx: Ctxt, def_path_hash: DefPathHash, kind: K) -> Self\n+    where\n+        Ctxt: super::DepContext<DepKind = K>,\n+    {\n+        debug_assert!(tcx.fingerprint_style(kind) == FingerprintStyle::DefPathHash);\n+        DepNode { kind, hash: def_path_hash.0.into() }\n+    }\n }\n \n impl<K: DepKind> fmt::Debug for DepNode<K> {"}]}