{"sha": "be681fefed254c06139ab055b07cfd6f8b30bacf", "node_id": "C_kwDOAAsO6NoAKGJlNjgxZmVmZWQyNTRjMDYxMzlhYjA1NWIwN2NmZDZmOGIzMGJhY2Y", "commit": {"author": {"name": "Jules Bertholet", "email": "jules.bertholet@gmail.com", "date": "2022-03-25T06:44:16Z"}, "committer": {"name": "Jules Bertholet", "email": "julesbertholet@quoi.xyz", "date": "2022-12-11T06:20:17Z"}, "message": "Add `round_ties_even` to `f32` and `f64`", "tree": {"sha": "b0d913a5c11a472075da00e42463e81ab7ba090a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d913a5c11a472075da00e42463e81ab7ba090a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be681fefed254c06139ab055b07cfd6f8b30bacf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMF9QrRtpLpRzqgMeMgNNr8OMG/wFAmOVdqEACgkQMgNNr8OM\nG/zPeBAAjiqps0vAtSBiBdkIYhnrzR9YhawFNzxEOwVFjAEKAWOwSVpFy67QhpIu\niX28dFbsWhqRCboXFgcEqeJ6dmPKusYFXDaaBy/Jk2T4RG8AOcSLhUl0dlHl7Ln4\n4ozrXWpbdOgFh+SUXEkjmHEXm2lxNnTQpdcnwCPML3/0DDjDPNW+WakY18yvpY2T\n1iCDCOrmvBu22sCGhuqqsI5BemN3PBRpBHV246HwJ8jH8DhmUVX4uCe0PepncOik\nAQSWe+RfpJZDBiMviYQdKgw0sWDmME8ubr7+0tEt9UKSR5PJLkx/1LJx2wLfJMfr\nEfjzMsmfhFUQh0T9ZSLdfss/TGav8MTp7y+QWzTeNpQcn2hJ30Z5IBy16ZcmShds\nQklz7y0Zm6B0sIruvzcBK4mJZZZw53oX5jFTXddmW89bisdm1Qp1eVMHktPtl35e\nAvz9Uj10LN6OF3zdViRWj9oAHGlMKwBLnQX8Yz9Q5na7wdcyHn0eXFR8vdseJ+YX\nAfuJkcX9IEf5IjNAwOHOigqvPOw7K6kWOoBRL0Ou7rrLSYjY/EMU2wj3yAgwJiyo\nO6vuog3X3RbhcPlhwgcuwnrLa42tAPg4Re0k0WvlSHgRCpo1z6fBz+Rv63UJ+RFl\nMB+kBfR22Z/ZKVOvX5sJ0WVFwgzI3r8rEH0tlN7Q0Z1hhhNtwxM=\n=/Jlx\n-----END PGP SIGNATURE-----", "payload": "tree b0d913a5c11a472075da00e42463e81ab7ba090a\nparent e1c91213ff80af5b87a197b784b40bcbc8cf3add\nauthor Jules Bertholet <jules.bertholet@gmail.com> 1648190656 -0400\ncommitter Jules Bertholet <julesbertholet@quoi.xyz> 1670739617 -0500\n\nAdd `round_ties_even` to `f32` and `f64`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be681fefed254c06139ab055b07cfd6f8b30bacf", "html_url": "https://github.com/rust-lang/rust/commit/be681fefed254c06139ab055b07cfd6f8b30bacf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be681fefed254c06139ab055b07cfd6f8b30bacf/comments", "author": {"login": "Jules-Bertholet", "id": 79955405, "node_id": "MDQ6VXNlcjc5OTU1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/79955405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jules-Bertholet", "html_url": "https://github.com/Jules-Bertholet", "followers_url": "https://api.github.com/users/Jules-Bertholet/followers", "following_url": "https://api.github.com/users/Jules-Bertholet/following{/other_user}", "gists_url": "https://api.github.com/users/Jules-Bertholet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jules-Bertholet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jules-Bertholet/subscriptions", "organizations_url": "https://api.github.com/users/Jules-Bertholet/orgs", "repos_url": "https://api.github.com/users/Jules-Bertholet/repos", "events_url": "https://api.github.com/users/Jules-Bertholet/events{/privacy}", "received_events_url": "https://api.github.com/users/Jules-Bertholet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jules-Bertholet", "id": 79955405, "node_id": "MDQ6VXNlcjc5OTU1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/79955405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jules-Bertholet", "html_url": "https://github.com/Jules-Bertholet", "followers_url": "https://api.github.com/users/Jules-Bertholet/followers", "following_url": "https://api.github.com/users/Jules-Bertholet/following{/other_user}", "gists_url": "https://api.github.com/users/Jules-Bertholet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jules-Bertholet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jules-Bertholet/subscriptions", "organizations_url": "https://api.github.com/users/Jules-Bertholet/orgs", "repos_url": "https://api.github.com/users/Jules-Bertholet/repos", "events_url": "https://api.github.com/users/Jules-Bertholet/events{/privacy}", "received_events_url": "https://api.github.com/users/Jules-Bertholet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c91213ff80af5b87a197b784b40bcbc8cf3add", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c91213ff80af5b87a197b784b40bcbc8cf3add", "html_url": "https://github.com/rust-lang/rust/commit/e1c91213ff80af5b87a197b784b40bcbc8cf3add"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "4851c3fdcb7a784ac0ef9ec79d4c1d70b1ea00b8", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -297,6 +297,8 @@ fn codegen_float_intrinsic_call<'tcx>(\n         sym::truncf64 => (\"trunc\", 1, fx.tcx.types.f64),\n         sym::roundf32 => (\"roundf\", 1, fx.tcx.types.f32),\n         sym::roundf64 => (\"round\", 1, fx.tcx.types.f64),\n+        sym::roundevenf32 => (\"roundevenf\", 1, fx.tcx.types.f32),\n+        sym::roundevenf64 => (\"roundeven\", 1, fx.tcx.types.f64),\n         sym::sinf32 => (\"sinf\", 1, fx.tcx.types.f32),\n         sym::sinf64 => (\"sin\", 1, fx.tcx.types.f64),\n         sym::cosf32 => (\"cosf\", 1, fx.tcx.types.f32),"}, {"sha": "35e650c65a0811a511e9d3cc515b7c3ae15dc808", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -68,6 +68,8 @@ fn get_simple_intrinsic<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, name: Symbol) ->\n         sym::nearbyintf64 => \"nearbyint\",\n         sym::roundf32 => \"roundf\",\n         sym::roundf64 => \"round\",\n+        sym::roundevenf32 => \"roundevenf\",\n+        sym::roundevenf64 => \"roundeven\",\n         sym::abort => \"abort\",\n         _ => return None,\n     };"}, {"sha": "697f5b7b644775649a8bb7dd55d33a12cec69129", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -745,9 +745,13 @@ impl<'ll> CodegenCx<'ll, '_> {\n \n         ifn!(\"llvm.copysign.f32\", fn(t_f32, t_f32) -> t_f32);\n         ifn!(\"llvm.copysign.f64\", fn(t_f64, t_f64) -> t_f64);\n+\n         ifn!(\"llvm.round.f32\", fn(t_f32) -> t_f32);\n         ifn!(\"llvm.round.f64\", fn(t_f64) -> t_f64);\n \n+        ifn!(\"llvm.roundeven.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.roundeven.f64\", fn(t_f64) -> t_f64);\n+\n         ifn!(\"llvm.rint.f32\", fn(t_f32) -> t_f32);\n         ifn!(\"llvm.rint.f64\", fn(t_f64) -> t_f64);\n         ifn!(\"llvm.nearbyint.f32\", fn(t_f32) -> t_f32);"}, {"sha": "4c0b0cde3f09fe313fb5941e69396db9f1f80d20", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -72,6 +72,8 @@ fn get_simple_intrinsic<'ll>(\n         sym::roundf32 => \"llvm.round.f32\",\n         sym::roundf64 => \"llvm.round.f64\",\n         sym::ptr_mask => \"llvm.ptrmask\",\n+        sym::roundevenf32 => \"llvm.roundeven.f32\",\n+        sym::roundevenf64 => \"llvm.roundeven.f64\",\n         _ => return None,\n     };\n     Some(cx.get_intrinsic(llvm_name))"}, {"sha": "afbcc517751b7a302bb9d05396b2e3adbb04fe1d", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -300,6 +300,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::nearbyintf64 => (0, vec![tcx.types.f64], tcx.types.f64),\n             sym::roundf32 => (0, vec![tcx.types.f32], tcx.types.f32),\n             sym::roundf64 => (0, vec![tcx.types.f64], tcx.types.f64),\n+            sym::roundevenf32 => (0, vec![tcx.types.f32], tcx.types.f32),\n+            sym::roundevenf64 => (0, vec![tcx.types.f64], tcx.types.f64),\n \n             sym::volatile_load | sym::unaligned_volatile_load => {\n                 (1, vec![tcx.mk_imm_ptr(param(0))], param(0))"}, {"sha": "6f983f07fc1cfa445d09e16c24aa65bbca3b7f9f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -1179,6 +1179,8 @@ symbols! {\n         rlib,\n         rotate_left,\n         rotate_right,\n+        roundevenf32,\n+        roundevenf64,\n         roundf32,\n         roundf64,\n         rt,"}, {"sha": "e331dfff6fd60f7769f2ca9c5f26cfc9ee5fd3f0", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -1613,6 +1613,22 @@ extern \"rust-intrinsic\" {\n     /// [`f64::round`](../../std/primitive.f64.html#method.round)\n     pub fn roundf64(x: f64) -> f64;\n \n+    /// Returns the nearest integer to an `f32`. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`f32::round_ties_even`](../../std/primitive.f32.html#method.round_ties_even)\n+    #[cfg(not(bootstrap))]\n+    pub fn roundevenf32(x: f32) -> f32;\n+\n+    /// Returns the nearest integer to an `f64`. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`f64::round_ties_even`](../../std/primitive.f64.html#method.round_ties_even)\n+    #[cfg(not(bootstrap))]\n+    pub fn roundevenf64(x: f64) -> f64;\n+\n     /// Float addition that allows optimizations based on algebraic rules.\n     /// May assume inputs are finite.\n     ///"}, {"sha": "a2c65e02577688993062e4ad534fd7be64639918", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -78,10 +78,14 @@ impl f32 {\n     /// let f = 3.3_f32;\n     /// let g = -3.3_f32;\n     /// let h = -3.7_f32;\n+    /// let i = 3.5_f32;\n+    /// let j = 4.5_f32;\n     ///\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// assert_eq!(h.round(), -4.0);\n+    /// assert_eq!(i.round(), 4.0);\n+    /// assert_eq!(j.round(), 5.0);\n     /// ```\n     #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n@@ -91,6 +95,33 @@ impl f32 {\n         unsafe { intrinsics::roundf32(self) }\n     }\n \n+    /// Returns the nearest integer to a number. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(round_ties_even)]\n+    ///\n+    /// let f = 3.3_f32;\n+    /// let g = -3.3_f32;\n+    /// let h = 3.5_f32;\n+    /// let i = 4.5_f32;\n+    ///\n+    /// assert_eq!(f.round_ties_even(), 3.0);\n+    /// assert_eq!(g.round_ties_even(), -3.0);\n+    /// assert_eq!(h.round_ties_even(), 4.0);\n+    /// assert_eq!(i.round_ties_even(), 4.0);\n+    /// ```\n+    #[cfg(not(bootstrap))]\n+    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[unstable(feature = \"round_ties_even\", issue = \"none\")]\n+    #[inline]\n+    pub fn round_ties_even(self) -> f32 {\n+        unsafe { intrinsics::roundevenf32(self) }\n+    }\n+\n     /// Returns the integer part of `self`.\n     /// This means that non-integer numbers are always truncated towards zero.\n     ///"}, {"sha": "d4671243f4734dee87e92a8592d074a5d04f1f45", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -209,6 +209,7 @@ fn test_ceil() {\n \n #[test]\n fn test_round() {\n+    assert_approx_eq!(2.5f32.round(), 3.0f32);\n     assert_approx_eq!(1.0f32.round(), 1.0f32);\n     assert_approx_eq!(1.3f32.round(), 1.0f32);\n     assert_approx_eq!(1.5f32.round(), 2.0f32);\n@@ -221,6 +222,22 @@ fn test_round() {\n     assert_approx_eq!((-1.7f32).round(), -2.0f32);\n }\n \n+#[cfg(not(bootstrap))]\n+#[test]\n+fn test_round_ties_even() {\n+    assert_approx_eq!(2.5f32.round_ties_even(), 2.0f32);\n+    assert_approx_eq!(1.0f32.round_ties_even(), 1.0f32);\n+    assert_approx_eq!(1.3f32.round_ties_even(), 1.0f32);\n+    assert_approx_eq!(1.5f32.round_ties_even(), 2.0f32);\n+    assert_approx_eq!(1.7f32.round_ties_even(), 2.0f32);\n+    assert_approx_eq!(0.0f32.round_ties_even(), 0.0f32);\n+    assert_approx_eq!((-0.0f32).round_ties_even(), -0.0f32);\n+    assert_approx_eq!((-1.0f32).round_ties_even(), -1.0f32);\n+    assert_approx_eq!((-1.3f32).round_ties_even(), -1.0f32);\n+    assert_approx_eq!((-1.5f32).round_ties_even(), -2.0f32);\n+    assert_approx_eq!((-1.7f32).round_ties_even(), -2.0f32);\n+}\n+\n #[test]\n fn test_trunc() {\n     assert_approx_eq!(1.0f32.trunc(), 1.0f32);"}, {"sha": "85dfb102c7d322e1e3d6f9252941c7c5e87730b4", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -78,10 +78,14 @@ impl f64 {\n     /// let f = 3.3_f64;\n     /// let g = -3.3_f64;\n     /// let h = -3.7_f64;\n+    /// let i = 3.5_f64;\n+    /// let j = 4.5_f64;\n     ///\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// assert_eq!(h.round(), -4.0);\n+    /// assert_eq!(i.round(), 4.0);\n+    /// assert_eq!(j.round(), 5.0);\n     /// ```\n     #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n@@ -91,6 +95,33 @@ impl f64 {\n         unsafe { intrinsics::roundf64(self) }\n     }\n \n+    /// Returns the nearest integer to a number. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(round_ties_even)]\n+    ///\n+    /// let f = 3.3_f64;\n+    /// let g = -3.3_f64;\n+    /// let h = 3.5_f64;\n+    /// let i = 4.5_f64;\n+    ///\n+    /// assert_eq!(f.round_ties_even(), 3.0);\n+    /// assert_eq!(g.round_ties_even(), -3.0);\n+    /// assert_eq!(h.round_ties_even(), 4.0);\n+    /// assert_eq!(i.round_ties_even(), 4.0);\n+    /// ```\n+    #[cfg(not(bootstrap))]\n+    #[cfg_attr(not(bootstrap), rustc_allow_incoherent_impl)]\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[unstable(feature = \"round_ties_even\", issue = \"none\")]\n+    #[inline]\n+    pub fn round_ties_even(self) -> f64 {\n+        unsafe { intrinsics::roundevenf64(self) }\n+    }\n+\n     /// Returns the integer part of `self`.\n     /// This means that non-integer numbers are always truncated towards zero.\n     ///"}, {"sha": "2f84ff910f5ed726b1f37aae4d851850e06c9eb3", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -199,6 +199,7 @@ fn test_ceil() {\n \n #[test]\n fn test_round() {\n+    assert_approx_eq!(2.5f64.round(), 3.0f64);\n     assert_approx_eq!(1.0f64.round(), 1.0f64);\n     assert_approx_eq!(1.3f64.round(), 1.0f64);\n     assert_approx_eq!(1.5f64.round(), 2.0f64);\n@@ -211,6 +212,22 @@ fn test_round() {\n     assert_approx_eq!((-1.7f64).round(), -2.0f64);\n }\n \n+#[cfg(not(bootstrap))]\n+#[test]\n+fn test_round_ties_even() {\n+    assert_approx_eq!(2.5f64.round_ties_even(), 2.0f64);\n+    assert_approx_eq!(1.0f64.round_ties_even(), 1.0f64);\n+    assert_approx_eq!(1.3f64.round_ties_even(), 1.0f64);\n+    assert_approx_eq!(1.5f64.round_ties_even(), 2.0f64);\n+    assert_approx_eq!(1.7f64.round_ties_even(), 2.0f64);\n+    assert_approx_eq!(0.0f64.round_ties_even(), 0.0f64);\n+    assert_approx_eq!((-0.0f64).round_ties_even(), -0.0f64);\n+    assert_approx_eq!((-1.0f64).round_ties_even(), -1.0f64);\n+    assert_approx_eq!((-1.3f64).round_ties_even(), -1.0f64);\n+    assert_approx_eq!((-1.5f64).round_ties_even(), -2.0f64);\n+    assert_approx_eq!((-1.7f64).round_ties_even(), -2.0f64);\n+}\n+\n #[test]\n fn test_trunc() {\n     assert_approx_eq!(1.0f64.trunc(), 1.0f64);"}, {"sha": "02814d42dd3b83cb325119cbfb06ffcbe14d346e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be681fefed254c06139ab055b07cfd6f8b30bacf/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=be681fefed254c06139ab055b07cfd6f8b30bacf", "patch": "@@ -307,6 +307,7 @@\n #![feature(provide_any)]\n #![feature(ptr_as_uninit)]\n #![feature(raw_os_nonzero)]\n+#![cfg_attr(not(bootstrap), feature(round_ties_even))]\n #![feature(slice_internals)]\n #![feature(slice_ptr_get)]\n #![feature(std_internals)]"}]}