{"sha": "6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDViMGFkMmZjMTM5OGQ3ZDRmNzU3Y2M5NmViNzgzZWU4ZmMxYWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-25T15:41:20Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-28T09:01:35Z"}, "message": "Move the Lrc outside the error type and name the fields", "tree": {"sha": "45f4bf8312f7df7bf3e4a872322079bec2287130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45f4bf8312f7df7bf3e4a872322079bec2287130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "html_url": "https://github.com/rust-lang/rust/commit/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5951c7343cc1addecffb7de97b89c15a7030dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5951c7343cc1addecffb7de97b89c15a7030dd", "html_url": "https://github.com/rust-lang/rust/commit/6e5951c7343cc1addecffb7de97b89c15a7030dd"}], "stats": {"total": 79, "additions": 46, "deletions": 33}, "files": [{"sha": "a8e1c04207d3da1f3838523e225e85ce04843dc2", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -505,7 +505,8 @@ impl_stable_hash_for!(struct ty::Const<'tcx> {\n \n impl_stable_hash_for!(struct ::middle::const_val::ConstEvalErr<'tcx> {\n     span,\n-    data\n+    stacktrace,\n+    error\n });\n \n impl_stable_hash_for!(struct ::middle::const_val::FrameInfo {"}, {"sha": "9177b70d1a4aadbce800987871a7bafcdbc2a70b", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -20,7 +20,7 @@ use syntax::ast;\n \n use rustc_data_structures::sync::Lrc;\n \n-pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ConstEvalErr<'tcx>>;\n+pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>;\n \n #[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n pub enum ConstVal<'tcx> {\n@@ -31,7 +31,8 @@ pub enum ConstVal<'tcx> {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub data: Lrc<(::mir::interpret::EvalError<'tcx>, Vec<FrameInfo>)>,\n+    pub error: ::mir::interpret::EvalError<'tcx>,\n+    pub stacktrace: Vec<FrameInfo>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n@@ -81,7 +82,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         message: &str,\n         lint_root: Option<ast::NodeId>,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n-        match self.data.0.kind {\n+        match self.error.kind {\n             ::mir::interpret::EvalErrorKind::TypeckError |\n             ::mir::interpret::EvalErrorKind::TooGeneric |\n             ::mir::interpret::EvalErrorKind::CheckMatchError |\n@@ -93,7 +94,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         }\n         trace!(\"reporting const eval failure at {:?}\", self.span);\n         let mut err = if let Some(lint_root) = lint_root {\n-            let node_id = self.data.1\n+            let node_id = self.stacktrace\n                 .iter()\n                 .rev()\n                 .filter_map(|frame| frame.lint_root)\n@@ -108,8 +109,8 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         } else {\n             struct_error(tcx, message)\n         };\n-        err.span_label(self.span, self.data.0.to_string());\n-        for FrameInfo { span, location, .. } in &self.data.1 {\n+        err.span_label(self.span, self.error.to_string());\n+        for FrameInfo { span, location, .. } in &self.stacktrace {\n             err.span_label(*span, format!(\"inside call to `{}`\", location));\n         }\n         Some(err)"}, {"sha": "b018b2c0391ea720d0029c8148835c0be55fff57", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -4,6 +4,7 @@ use mir;\n use middle::const_val::ConstEvalErr;\n use ty::{FnSig, Ty, layout};\n use ty::layout::{Size, Align};\n+use rustc_data_structures::sync::Lrc;\n \n use super::{\n     Pointer, Lock, AccessKind\n@@ -155,7 +156,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     CheckMatchError,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n-    ReferencedConstant(ConstEvalErr<'tcx>),\n+    ReferencedConstant(Lrc<ConstEvalErr<'tcx>>),\n     GeneratorResumedAfterReturn,\n     GeneratorResumedAfterPanic,\n }"}, {"sha": "398c99ffaf92fab4c272d7f4d001094a2521b244", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -499,12 +499,12 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                                             CodeSelectionError(ConstEvalFailure(err)))\n                                     }\n                                 } else {\n-                                    let err = EvalErrorKind::TooGeneric.into();\n                                     ProcessResult::Error(\n                                         CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n                                             span: obligation.cause.span,\n-                                            data: (err, vec![]).into(),\n-                                        }))\n+                                            error: EvalErrorKind::TooGeneric.into(),\n+                                            stacktrace: vec![],\n+                                        }.into()))\n                                     )\n                                 }\n                             },"}, {"sha": "88236aa8b67eced23e28733935d924e725ae598d", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -381,7 +381,7 @@ pub enum SelectionError<'tcx> {\n                                 ty::PolyTraitRef<'tcx>,\n                                 ty::error::TypeError<'tcx>),\n     TraitNotObjectSafe(DefId),\n-    ConstEvalFailure(ConstEvalErr<'tcx>),\n+    ConstEvalFailure(Lrc<ConstEvalErr<'tcx>>),\n     Overflow,\n }\n "}, {"sha": "39e358803cbe84f7a148de58137875b746ba8af8", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -172,7 +172,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n                 })\n             }\n             super::TraitNotObjectSafe(def_id) => Some(super::TraitNotObjectSafe(def_id)),\n-            super::ConstEvalFailure(ref err) => tcx.lift(err).map(super::ConstEvalFailure),\n+            super::ConstEvalFailure(ref err) => tcx.lift(&**err).map(|err| super::ConstEvalFailure(\n+                err.into(),\n+            )),\n             super::Overflow => bug!(), // FIXME: ape ConstEvalFailure?\n         }\n     }"}, {"sha": "f00ec8be195eaaf102dc97036f13f865d1cd6003", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -18,7 +18,6 @@ use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use rustc_data_structures::sync::Lrc;\n use mir::interpret;\n \n use std::rc::Rc;\n@@ -462,10 +461,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n     type Lifted = ConstEvalErr<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.data.0).map(|data| {\n+        tcx.lift(&self.error).map(|error| {\n             ConstEvalErr {\n                 span: self.span,\n-                data: Lrc::new((data, self.data.1.clone())),\n+                stacktrace: self.stacktrace.clone(),\n+                error,\n             }\n         })\n     }\n@@ -579,7 +579,7 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             TypeckError => TypeckError,\n             TooGeneric => TooGeneric,\n             CheckMatchError => CheckMatchError,\n-            ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(err)?),\n+            ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(&**err)?.into()),\n             OverflowNeg => OverflowNeg,\n             Overflow(op) => Overflow(op),\n             DivisionByZero => DivisionByZero,"}, {"sha": "fc219df9b04b26237041ae87bfe1051b268736d8", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -14,6 +14,7 @@ use rustc_mir::interpret::{read_target_uint, const_val_field};\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::sync::Lrc;\n use rustc::mir::interpret::{GlobalId, Pointer, Scalar, Allocation, ConstValue, AllocType};\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, HasDataLayout, LayoutOf, Size};\n@@ -117,7 +118,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx, alloc: &Allocation) -> ValueRef {\n pub fn codegen_static_initializer<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     def_id: DefId)\n-    -> Result<ValueRef, ConstEvalErr<'tcx>>\n+    -> Result<ValueRef, Lrc<ConstEvalErr<'tcx>>>\n {\n     let instance = ty::Instance::mono(cx.tcx, def_id);\n     let cid = GlobalId {\n@@ -139,7 +140,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         &mut self,\n         bx: &Builder<'a, 'tcx>,\n         constant: &'tcx ty::Const<'tcx>,\n-    ) -> Result<ConstValue<'tcx>, ConstEvalErr<'tcx>> {\n+    ) -> Result<ConstValue<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n         match constant.val {\n             ConstVal::Unevaluated(def_id, ref substs) => {\n                 let tcx = bx.tcx();\n@@ -160,7 +161,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         &mut self,\n         bx: &Builder<'a, 'tcx>,\n         constant: &mir::Constant<'tcx>,\n-    ) -> Result<ConstValue<'tcx>, ConstEvalErr<'tcx>> {\n+    ) -> Result<ConstValue<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n         match constant.literal {\n             mir::Literal::Promoted { index } => {\n                 let param_env = ty::ParamEnv::reveal_all();\n@@ -189,7 +190,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     ty::TyArray(_, n) => n.unwrap_usize(bx.tcx()),\n                     ref other => bug!(\"invalid simd shuffle type: {}\", other),\n                 };\n-                let values: Result<Vec<ValueRef>, _> = (0..fields).map(|field| {\n+                let values: Result<Vec<ValueRef>, Lrc<_>> = (0..fields).map(|field| {\n                     let field = const_val_field(\n                         bx.tcx(),\n                         ty::ParamEnv::reveal_all(),"}, {"sha": "0381a5e2987067efd687ff08d28925cd88f4df86", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -15,6 +15,7 @@ use rustc::mir::interpret::ConstValue;\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::sync::Lrc;\n \n use base;\n use common::{self, CodegenCx, C_null, C_undef, C_usize};\n@@ -97,7 +98,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n     pub fn from_const(bx: &Builder<'a, 'tcx>,\n                       val: ConstValue<'tcx>,\n                       ty: ty::Ty<'tcx>)\n-                      -> Result<OperandRef<'tcx>, ConstEvalErr<'tcx>> {\n+                      -> Result<OperandRef<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n         let layout = bx.cx.layout_of(ty);\n \n         if layout.is_zst() {"}, {"sha": "52edd22f02765bfbf2c65c30db570916c88893ec", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -104,7 +104,8 @@ pub fn value_to_const_value<'tcx>(\n             let (frames, span) = ecx.generate_stacktrace(None);\n             let err = ConstEvalErr {\n                 span,\n-                data: (err, frames).into(),\n+                error: err,\n+                stacktrace: frames,\n             };\n             err.report_as_error(\n                 ecx.tcx,\n@@ -466,9 +467,10 @@ pub fn const_val_field<'a, 'tcx>(\n     result.map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n         ConstEvalErr {\n-            data: (err, trace).into(),\n+            error: err,\n+            stacktrace: trace,\n             span,\n-        }\n+        }.into()\n     })\n }\n \n@@ -537,9 +539,10 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n             return Err(ConstEvalErr {\n-                data: (EvalErrorKind::CheckMatchError.into(), Vec::new()).into(),\n+                error: EvalErrorKind::CheckMatchError.into(),\n+                stacktrace: vec![],\n                 span,\n-            });\n+            }.into());\n         }\n \n         if let hir::BodyOwnerKind::Const = tcx.hir.body_owner_kind(id) {\n@@ -549,9 +552,10 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do not continue into miri if typeck errors occurred; it will fail horribly\n         if tables.tainted_by_errors {\n             return Err(ConstEvalErr {\n-                data: (EvalErrorKind::TypeckError.into(), Vec::new()).into(),\n+                error: EvalErrorKind::CheckMatchError.into(),\n+                stacktrace: vec![],\n                 span,\n-            });\n+            }.into());\n         }\n     };\n \n@@ -564,13 +568,14 @@ pub fn const_eval_provider<'a, 'tcx>(\n     }).map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n         let err = ConstEvalErr {\n-            data: (err, trace).into(),\n+            error: err,\n+            stacktrace: trace,\n             span,\n         };\n         if tcx.is_static(def_id).is_some() {\n             err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n         }\n-        err\n+        err.into()\n     })\n }\n "}, {"sha": "2d364f24b6b94b3825f793a42822d7605ec5d641", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -1210,7 +1210,7 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Ok(val) => collect_const(tcx, val, instance.substs, output),\n             Err(err) => {\n                 use rustc::mir::interpret::EvalErrorKind;\n-                if let EvalErrorKind::ReferencedConstant(_) = err.data.0.kind {\n+                if let EvalErrorKind::ReferencedConstant(_) = err.error.kind {\n                     err.report_as_error(\n                         tcx.at(mir.promoted[i].span),\n                         \"erroneous constant used\","}, {"sha": "2233c5c7980263f59c2c1b92ab18a125e62ddedd", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -145,7 +145,8 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 let (frames, span) = self.ecx.generate_stacktrace(None);\n                 let err = ConstEvalErr {\n                     span,\n-                    data: (err, frames).into(),\n+                    error: err,\n+                    stacktrace: frames,\n                 };\n                 err.report_as_lint(\n                     self.ecx.tcx,"}]}