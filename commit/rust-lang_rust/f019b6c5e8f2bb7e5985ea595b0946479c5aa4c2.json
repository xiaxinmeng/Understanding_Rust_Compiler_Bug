{"sha": "f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "node_id": "C_kwDOAAsO6NoAKGYwMTliNmM1ZThmMmJiN2U1OTg1ZWE1OTViMDk0NjQ3OWM1YWE0YzI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-22T11:28:01Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-22T11:28:01Z"}, "message": "Overhaul 100222 test; wf always remap to nonconst", "tree": {"sha": "1c9cce6d9a8dabc30ae8a1fa4169310661d20188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9cce6d9a8dabc30ae8a1fa4169310661d20188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "html_url": "https://github.com/rust-lang/rust/commit/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460daf34346e621ad31ad68832a2c573aa723906", "url": "https://api.github.com/repos/rust-lang/rust/commits/460daf34346e621ad31ad68832a2c573aa723906", "html_url": "https://github.com/rust-lang/rust/commit/460daf34346e621ad31ad68832a2c573aa723906"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "9e39abe9aa55b73a57b13f7c8ee5eb58ab882a9a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "patch": "@@ -66,15 +66,11 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n         span: Span,\n         loc: Option<WellFormedLoc>,\n         arg: ty::GenericArg<'tcx>,\n-        override_constness: Option<hir::Constness>,\n     ) {\n         let cause =\n             traits::ObligationCause::new(span, self.body_id, ObligationCauseCode::WellFormed(loc));\n-        let param_env = if let Some(constness) = override_constness {\n-            self.param_env.with_constness(constness)\n-        } else {\n-            self.param_env\n-        };\n+        // for a type to be WF, we do not need to check if const trait predicates satisfy.\n+        let param_env = self.param_env.without_const();\n         self.ocx.register_obligation(traits::Obligation::new(\n             cause,\n             param_env,\n@@ -991,7 +987,7 @@ fn check_associated_item(\n             ty::AssocKind::Const => {\n                 let ty = tcx.type_of(item.def_id);\n                 let ty = wfcx.normalize(span, Some(WellFormedLoc::Ty(item_id)), ty);\n-                wfcx.register_wf_obligation(span, loc, ty.into(), None);\n+                wfcx.register_wf_obligation(span, loc, ty.into());\n             }\n             ty::AssocKind::Fn => {\n                 let sig = tcx.fn_sig(item.def_id);\n@@ -1012,7 +1008,7 @@ fn check_associated_item(\n                 if item.defaultness(tcx).has_value() {\n                     let ty = tcx.type_of(item.def_id);\n                     let ty = wfcx.normalize(span, Some(WellFormedLoc::Ty(item_id)), ty);\n-                    wfcx.register_wf_obligation(span, loc, ty.into(), None);\n+                    wfcx.register_wf_obligation(span, loc, ty.into());\n                 }\n             }\n         }\n@@ -1048,7 +1044,6 @@ fn check_type_defn<'tcx, F>(\n                     field.span,\n                     Some(WellFormedLoc::Ty(field.def_id)),\n                     field.ty.into(),\n-                    None,\n                 )\n             }\n \n@@ -1202,7 +1197,6 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n             ty_span,\n             Some(WellFormedLoc::Ty(item_id)),\n             item_ty.into(),\n-            None,\n         );\n         if forbid_unsized {\n             wfcx.register_bound(\n@@ -1272,7 +1266,6 @@ fn check_impl<'tcx>(\n                     ast_self_ty.span,\n                     Some(WellFormedLoc::Ty(item.hir_id().expect_owner())),\n                     self_ty.into(),\n-                    None,\n                 );\n             }\n         }\n@@ -1317,7 +1310,6 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                             tcx.def_span(param.def_id),\n                             None,\n                             ty.into(),\n-                            None,\n                         );\n                     }\n                 }\n@@ -1334,7 +1326,6 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                             tcx.def_span(param.def_id),\n                             None,\n                             default_ct.into(),\n-                            None,\n                         );\n                     }\n                 }\n@@ -1463,7 +1454,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n     assert_eq!(predicates.predicates.len(), predicates.spans.len());\n     let wf_obligations =\n         iter::zip(&predicates.predicates, &predicates.spans).flat_map(|(&p, &sp)| {\n-            traits::wf::predicate_obligations(infcx, wfcx.param_env, wfcx.body_id, p, sp)\n+            traits::wf::predicate_obligations(infcx, wfcx.param_env.without_const(), wfcx.body_id, p, sp)\n         });\n \n     let obligations: Vec<_> = wf_obligations.chain(default_obligations).collect();\n@@ -1515,15 +1506,13 @@ fn check_fn_or_method<'tcx>(\n             ty.span,\n             Some(WellFormedLoc::Param { function: def_id, param_idx: i.try_into().unwrap() }),\n             input_ty.into(),\n-            None,\n         );\n     }\n \n     wfcx.register_wf_obligation(\n         hir_decl.output.span(),\n         None,\n         sig.output().into(),\n-        Some(hir::Constness::NotConst),\n     );\n \n     check_where_clauses(wfcx, span, def_id);"}, {"sha": "2db5595a5aed2c5d990a0b446923675a6cfb09e3", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-100222.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs?ref=f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "patch": "@@ -1,14 +1,27 @@\n+// revisions: nn ny yn yy\n // check-pass\n-#![feature(const_trait_impl)]\n+#![feature(const_trait_impl, associated_type_defaults, const_mut_refs)]\n \n-#[const_trait]\n+#[cfg_attr(any(yn, yy), const_trait)]\n pub trait Index {\n     type Output;\n }\n \n-#[const_trait]\n+#[cfg_attr(any(ny, yy), const_trait)]\n pub trait IndexMut where Self: Index {\n-    fn foo(&mut self) -> <Self as Index>::Output;\n+    const C: <Self as Index>::Output;\n+    type Assoc = <Self as Index>::Output;\n+    fn foo(&mut self, x: <Self as Index>::Output) -> <Self as Index>::Output;\n }\n \n+impl Index for () { type Output = (); }\n+\n+impl const IndexMut for <() as Index>::Output {\n+    const C: <Self as Index>::Output = ();\n+    type Assoc = <Self as Index>::Output;\n+    fn foo(&mut self, x: <Self as Index>::Output) -> <Self as Index>::Output where <Self as Index>::Output: {}\n+}\n+\n+const C: <() as Index>::Output = ();\n+\n fn main() {}"}]}