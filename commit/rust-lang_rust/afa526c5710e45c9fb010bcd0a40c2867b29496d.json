{"sha": "afa526c5710e45c9fb010bcd0a40c2867b29496d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTUyNmM1NzEwZTQ1YzlmYjAxMGJjZDBhNDBjMjg2N2IyOTQ5NmQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-01-31T18:16:31Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-01-31T18:16:31Z"}, "message": "Update tests for overflowing literals\n\nChanged in 64ca751", "tree": {"sha": "08fcfb064529ddc50fc7053af74a189c213e81cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08fcfb064529ddc50fc7053af74a189c213e81cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa526c5710e45c9fb010bcd0a40c2867b29496d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa526c5710e45c9fb010bcd0a40c2867b29496d", "html_url": "https://github.com/rust-lang/rust/commit/afa526c5710e45c9fb010bcd0a40c2867b29496d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa526c5710e45c9fb010bcd0a40c2867b29496d/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ca751eb000c498374435da666ddd1c878c03ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ca751eb000c498374435da666ddd1c878c03ad", "html_url": "https://github.com/rust-lang/rust/commit/64ca751eb000c498374435da666ddd1c878c03ad"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "95d892010e726b03aaa906bf1e987156ef66dbac", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afa526c5710e45c9fb010bcd0a40c2867b29496d/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa526c5710e45c9fb010bcd0a40c2867b29496d/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=afa526c5710e45c9fb010bcd0a40c2867b29496d", "patch": "@@ -26,7 +26,7 @@ fn bar() -> i8 {\n \n fn baz() -> bool {\n     128 > bar() //~ ERROR comparison is useless due to type limits\n-                //~^ WARNING literal out of range for its type\n+                //~^ WARNING literal out of range for i8\n }\n \n fn bleh() {\n@@ -44,7 +44,7 @@ fn bleh() {\n fn qux() {\n     let mut i = 1i8;\n     while 200 != i { //~ ERROR comparison is useless due to type limits\n-                     //~^ WARNING literal out of range for its type\n+                     //~^ WARNING literal out of range for i8\n         i += 1;\n     }\n }"}, {"sha": "ed6a0bd37eb284d689b451a32d0f186c6f514d53", "filename": "src/test/compile-fail/lint-type-overflow.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/afa526c5710e45c9fb010bcd0a40c2867b29496d/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa526c5710e45c9fb010bcd0a40c2867b29496d/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs?ref=afa526c5710e45c9fb010bcd0a40c2867b29496d", "patch": "@@ -18,42 +18,43 @@ fn test(x: i8) {\n #[allow(unused_variables)]\n fn main() {\n     let x1: u8 = 255; // should be OK\n-    let x1: u8 = 256; //~ error: literal out of range for its type\n+    let x1: u8 = 256; //~ error: literal out of range for u8\n \n     let x1 = 255_u8; // should be OK\n-    let x1 = 256_u8; //~ error: literal out of range for its type\n+    let x1 = 256_u8; //~ error: literal out of range for u8\n \n     let x2: i8 = -128; // should be OK\n-    let x1: i8 = 128; //~ error: literal out of range for its type\n-    let x2: i8 = --128; //~ error: literal out of range for its type\n+    let x1: i8 = 128; //~ error: literal out of range for i8\n+    let x2: i8 = --128; //~ error: literal out of range for i8\n \n-    let x3: i8 = -129; //~ error: literal out of range for its type\n-    let x3: i8 = -(129); //~ error: literal out of range for its type\n-    let x3: i8 = -{129}; //~ error: literal out of range for its type\n+    let x3: i8 = -129; //~ error: literal out of range for i8\n+    let x3: i8 = -(129); //~ error: literal out of range for i8\n+    let x3: i8 = -{129}; //~ error: literal out of range for i8\n \n-    test(1000); //~ error: literal out of range for its type\n+    test(1000); //~ error: literal out of range for i8\n \n-    let x = 128_i8; //~ error: literal out of range for its type\n+    let x = 128_i8; //~ error: literal out of range for i8\n     let x = 127_i8;\n     let x = -128_i8;\n     let x = -(128_i8);\n-    let x = -129_i8; //~ error: literal out of range for its type\n+    let x = -129_i8; //~ error: literal out of range for i8\n \n     let x: i32 = 2147483647; // should be OK\n     let x = 2147483647_i32; // should be OK\n-    let x: i32 = 2147483648; //~ error: literal out of range for its type\n-    let x = 2147483648_i32; //~ error: literal out of range for its type\n+    let x: i32 = 2147483648; //~ error: literal out of range for i32\n+    let x = 2147483648_i32; //~ error: literal out of range for i32\n     let x: i32 = -2147483648; // should be OK\n     let x = -2147483648_i32; // should be OK\n-    let x: i32 = -2147483649; //~ error: literal out of range for its type\n-    let x = -2147483649_i32; //~ error: literal out of range for its type\n+    let x: i32 = -2147483649; //~ error: literal out of range for i32\n+    let x = -2147483649_i32; //~ error: literal out of range for i32\n+    let x = 2147483648; //~ error: literal out of range for i32\n \n-    let x = 9223372036854775808_i64; //~ error: literal out of range for its type\n+    let x = 9223372036854775808_i64; //~ error: literal out of range for i64\n     let x = -9223372036854775808_i64; // should be OK\n-    let x = 18446744073709551615_i64; //~ error: literal out of range for its type\n+    let x = 18446744073709551615_i64; //~ error: literal out of range for i64\n \n-    let x = -3.40282348e+38_f32; //~ error: literal out of range for its type\n-    let x =  3.40282348e+38_f32; //~ error: literal out of range for its type\n-    let x = -1.7976931348623159e+308_f64; //~ error: literal out of range for its type\n-    let x =  1.7976931348623159e+308_f64; //~ error: literal out of range for its type\n+    let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n+    let x =  3.40282348e+38_f32; //~ error: literal out of range for f32\n+    let x = -1.7976931348623159e+308_f64; //~ error: literal out of range for f64\n+    let x =  1.7976931348623159e+308_f64; //~ error: literal out of range for f64\n }"}]}