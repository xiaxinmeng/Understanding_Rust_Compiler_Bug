{"sha": "74437e477ece022604f755881fd01193147368c9", "node_id": "C_kwDOAAsO6NoAKDc0NDM3ZTQ3N2VjZTAyMjYwNGY3NTU4ODFmZDAxMTkzMTQ3MzY4Yzk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-12-04T18:05:30Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-12-04T18:05:30Z"}, "message": "Do not add `;` to expected tokens list when it's wrong\n\nThere's a few spots where semicolons are checked for to do error recovery,\nand should not be suggested (or checked for other stuff).\n\nFixes #87647", "tree": {"sha": "faa63bcb2ccac85a911b0a47ede2437b096512cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa63bcb2ccac85a911b0a47ede2437b096512cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74437e477ece022604f755881fd01193147368c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74437e477ece022604f755881fd01193147368c9", "html_url": "https://github.com/rust-lang/rust/commit/74437e477ece022604f755881fd01193147368c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74437e477ece022604f755881fd01193147368c9/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "html_url": "https://github.com/rust-lang/rust/commit/532d2b14c05f9bc20b2d27cbb5f4550d28343a36"}], "stats": {"total": 141, "additions": 90, "deletions": 51}, "files": [{"sha": "ca92d6b7fd04df4aa5a30b3b0541d7df1e4e1a7c", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -1,4 +1,4 @@\n-use super::{AttrWrapper, Capturing, ForceCollect, Parser, PathStyle};\n+use super::{AttrWrapper, Capturing, FnParseMode, ForceCollect, Parser, PathStyle};\n use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Nonterminal};\n@@ -177,7 +177,7 @@ impl<'a> Parser<'a> {\n             AttrWrapper::empty(),\n             true,\n             false,\n-            |_| true,\n+            FnParseMode { req_name: |_| true, req_body: true },\n             ForceCollect::No,\n         ) {\n             Ok(Some(item)) => {"}, {"sha": "8e2e6eaee58ef298e324ce9f3e3b20acf0dfd2ed", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -1129,7 +1129,8 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n-        if self.eat(&token::Semi) {\n+        if self.token.kind == TokenKind::Semi {\n+            self.bump();\n             let mut err = self.struct_span_err(self.prev_token.span, \"expected item, found `;`\");\n             err.span_suggestion_short(\n                 self.prev_token.span,"}, {"sha": "b678f1d5e489675a17ddb1ac83c49565a70353c8", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -78,24 +78,25 @@ pub(super) type ItemInfo = (Ident, ItemKind);\n \n impl<'a> Parser<'a> {\n     pub fn parse_item(&mut self, force_collect: ForceCollect) -> PResult<'a, Option<P<Item>>> {\n-        self.parse_item_(|_| true, force_collect).map(|i| i.map(P))\n+        let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n+        self.parse_item_(fn_parse_mode, force_collect).map(|i| i.map(P))\n     }\n \n     fn parse_item_(\n         &mut self,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Item>> {\n         let attrs = self.parse_outer_attributes()?;\n-        self.parse_item_common(attrs, true, false, req_name, force_collect)\n+        self.parse_item_common(attrs, true, false, fn_parse_mode, force_collect)\n     }\n \n     pub(super) fn parse_item_common(\n         &mut self,\n         attrs: AttrWrapper,\n         mac_allowed: bool,\n         attrs_allowed: bool,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Item>> {\n         // Don't use `maybe_whole` so that we have precise control\n@@ -113,7 +114,8 @@ impl<'a> Parser<'a> {\n         let mut unclosed_delims = vec![];\n         let item =\n             self.collect_tokens_trailing_token(attrs, force_collect, |this: &mut Self, attrs| {\n-                let item = this.parse_item_common_(attrs, mac_allowed, attrs_allowed, req_name);\n+                let item =\n+                    this.parse_item_common_(attrs, mac_allowed, attrs_allowed, fn_parse_mode);\n                 unclosed_delims.append(&mut this.unclosed_delims);\n                 Ok((item?, TrailingToken::None))\n             })?;\n@@ -127,12 +129,13 @@ impl<'a> Parser<'a> {\n         mut attrs: Vec<Attribute>,\n         mac_allowed: bool,\n         attrs_allowed: bool,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n     ) -> PResult<'a, Option<Item>> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let mut def = self.parse_defaultness();\n-        let kind = self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, req_name)?;\n+        let kind =\n+            self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, fn_parse_mode)?;\n         if let Some((ident, kind)) = kind {\n             self.error_on_unconsumed_default(def, &kind);\n             let span = lo.to(self.prev_token.span);\n@@ -192,7 +195,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         vis: &Visibility,\n         def: &mut Defaultness,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n     ) -> PResult<'a, Option<ItemInfo>> {\n         let def_final = def == &Defaultness::Final;\n         let mut def = || mem::replace(def, Defaultness::Final);\n@@ -219,7 +222,7 @@ impl<'a> Parser<'a> {\n             (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo)?;\n             (ident, ItemKind::Fn(Box::new(Fn { defaultness: def(), sig, generics, body })))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -733,23 +736,26 @@ impl<'a> Parser<'a> {\n         &mut self,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        self.parse_assoc_item(|_| true, force_collect)\n+        let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n+        self.parse_assoc_item(fn_parse_mode, force_collect)\n     }\n \n     pub fn parse_trait_item(\n         &mut self,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        self.parse_assoc_item(|edition| edition >= Edition::Edition2018, force_collect)\n+        let fn_parse_mode =\n+            FnParseMode { req_name: |edition| edition >= Edition::Edition2018, req_body: false };\n+        self.parse_assoc_item(fn_parse_mode, force_collect)\n     }\n \n     /// Parses associated items.\n     fn parse_assoc_item(\n         &mut self,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        Ok(self.parse_item_(req_name, force_collect)?.map(\n+        Ok(self.parse_item_(fn_parse_mode, force_collect)?.map(\n             |Item { attrs, id, span, vis, ident, kind, tokens }| {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n@@ -944,7 +950,8 @@ impl<'a> Parser<'a> {\n         &mut self,\n         force_collect: ForceCollect,\n     ) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n-        Ok(self.parse_item_(|_| true, force_collect)?.map(\n+        let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n+        Ok(self.parse_item_(fn_parse_mode, force_collect)?.map(\n             |Item { attrs, id, span, vis, ident, kind, tokens }| {\n                 let kind = match ForeignItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n@@ -1484,7 +1491,8 @@ impl<'a> Parser<'a> {\n         if !is_raw && ident.is_reserved() {\n             let err = if self.check_fn_front_matter(false) {\n                 // We use `parse_fn` to get a span for the function\n-                if let Err(mut db) = self.parse_fn(&mut Vec::new(), |_| true, lo) {\n+                let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n+                if let Err(mut db) = self.parse_fn(&mut Vec::new(), fn_parse_mode, lo) {\n                     db.delay_as_bug();\n                 }\n                 let mut err = self.struct_span_err(\n@@ -1700,23 +1708,33 @@ impl<'a> Parser<'a> {\n /// The function decides if, per-parameter `p`, `p` must have a pattern or just a type.\n type ReqName = fn(Edition) -> bool;\n \n+/// Parsing configuration for functions.\n+/// This include the edition-specific name requirements, plus information on whether the\n+/// function is allowed to go without a body.\n+#[derive(Clone, Copy)]\n+pub(crate) struct FnParseMode {\n+    pub req_name: ReqName,\n+    pub req_body: bool,\n+}\n+\n /// Parsing of functions and methods.\n impl<'a> Parser<'a> {\n     /// Parse a function starting from the front matter (`const ...`) to the body `{ ... }` or `;`.\n     fn parse_fn(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        req_name: ReqName,\n+        fn_parse_mode: FnParseMode,\n         sig_lo: Span,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n         let header = self.parse_fn_front_matter()?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n-        let decl = self.parse_fn_decl(req_name, AllowPlus::Yes, RecoverReturnSign::Yes)?; // `(p: u8, ...)`\n+        let decl =\n+            self.parse_fn_decl(fn_parse_mode.req_name, AllowPlus::Yes, RecoverReturnSign::Yes)?; // `(p: u8, ...)`\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n \n         let mut sig_hi = self.prev_token.span;\n-        let body = self.parse_fn_body(attrs, &ident, &mut sig_hi)?; // `;` or `{ ... }`.\n+        let body = self.parse_fn_body(attrs, &ident, &mut sig_hi, fn_parse_mode.req_body)?; // `;` or `{ ... }`.\n         let fn_sig_span = sig_lo.to(sig_hi);\n         Ok((ident, FnSig { header, decl, span: fn_sig_span }, generics, body))\n     }\n@@ -1729,9 +1747,17 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         ident: &Ident,\n         sig_hi: &mut Span,\n+        req_body: bool,\n     ) -> PResult<'a, Option<P<Block>>> {\n-        let (inner_attrs, body) = if self.eat(&token::Semi) {\n+        let has_semi = if req_body {\n+            self.token.kind == TokenKind::Semi\n+        } else {\n+            // Only include `;` in list of expected tokens if body is not required\n+            self.check(&TokenKind::Semi)\n+        };\n+        let (inner_attrs, body) = if has_semi {\n             // Include the trailing semicolon in the span of the signature\n+            self.expect_semi()?;\n             *sig_hi = self.prev_token.span;\n             (Vec::new(), None)\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n@@ -1752,9 +1778,12 @@ impl<'a> Parser<'a> {\n                 .emit();\n             (Vec::new(), Some(self.mk_block_err(span)))\n         } else {\n-            if let Err(mut err) =\n-                self.expected_one_of_not_found(&[], &[token::Semi, token::OpenDelim(token::Brace)])\n-            {\n+            let expected = if req_body {\n+                &[token::OpenDelim(token::Brace)][..]\n+            } else {\n+                &[token::Semi, token::OpenDelim(token::Brace)]\n+            };\n+            if let Err(mut err) = self.expected_one_of_not_found(&[], &expected) {\n                 if self.token.kind == token::CloseDelim(token::Brace) {\n                     // The enclosing `mod`, `trait` or `impl` is being closed, so keep the `fn` in\n                     // the AST for typechecking."}, {"sha": "6d534bece463e7461402de3762afa9be2ea8df4a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -14,6 +14,7 @@ use crate::lexer::UnmatchedBrace;\n pub use attr_wrapper::AttrWrapper;\n pub use diagnostics::AttemptLocalParseRecovery;\n use diagnostics::Error;\n+pub(crate) use item::FnParseMode;\n pub use pat::{RecoverColon, RecoverComma};\n pub use path::PathStyle;\n "}, {"sha": "d3e7d1690ccf6bcd8de52d420b97e9b1faf8e360", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -4,7 +4,9 @@ use super::expr::LhsExpr;\n use super::pat::RecoverComma;\n use super::path::PathStyle;\n use super::TrailingToken;\n-use super::{AttrWrapper, BlockMode, ForceCollect, Parser, Restrictions, SemiColonMode};\n+use super::{\n+    AttrWrapper, BlockMode, FnParseMode, ForceCollect, Parser, Restrictions, SemiColonMode,\n+};\n use crate::maybe_whole;\n \n use rustc_ast as ast;\n@@ -79,9 +81,13 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.parse_stmt_path_start(lo, attrs)\n             }?\n-        } else if let Some(item) =\n-            self.parse_item_common(attrs.clone(), false, true, |_| true, force_collect)?\n-        {\n+        } else if let Some(item) = self.parse_item_common(\n+            attrs.clone(),\n+            false,\n+            true,\n+            FnParseMode { req_name: |_| true, req_body: true },\n+            force_collect,\n+        )? {\n             // FIXME: Bad copy of attrs\n             self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n         } else if self.eat(&token::Semi) {"}, {"sha": "31f56565c49a6ce8b3f79c2aed4f991dbf8590bf", "filename": "src/test/ui/fn/fn-recover-return-sign2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -3,6 +3,6 @@\n \n fn foo() => impl Fn() => bool {\n     //~^ ERROR return types are denoted using `->`\n-    //~| ERROR expected one of `+`, `->`, `::`, `;`, `where`, or `{`, found `=>`\n+    //~| ERROR expected one of `+`, `->`, `::`, `where`, or `{`, found `=>`\n     unimplemented!()\n }"}, {"sha": "25ee8dd0c5dcdb556582459d220ed2c5be7c44b8", "filename": "src/test/ui/fn/fn-recover-return-sign2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -4,11 +4,11 @@ error: return types are denoted using `->`\n LL | fn foo() => impl Fn() => bool {\n    |          ^^ help: use `->` instead\n \n-error: expected one of `+`, `->`, `::`, `;`, `where`, or `{`, found `=>`\n+error: expected one of `+`, `->`, `::`, `where`, or `{`, found `=>`\n   --> $DIR/fn-recover-return-sign2.rs:4:23\n    |\n LL | fn foo() => impl Fn() => bool {\n-   |                       ^^ expected one of `+`, `->`, `::`, `;`, `where`, or `{`\n+   |                       ^^ expected one of `+`, `->`, `::`, `where`, or `{`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "017521f570c8201065d941f582b405fefaf539e9", "filename": "src/test/ui/parser/issues/issue-24780.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -2,7 +2,7 @@\n // to happen in #24780. For example, following should be an error:\n // expected one of ..., `>`, ... found `>`.\n \n-fn foo() -> Vec<usize>> { //~ ERROR expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n+fn foo() -> Vec<usize>> { //~ ERROR expected one of `!`, `+`, `::`, `where`, or `{`, found `>`\n     Vec::new()\n }\n "}, {"sha": "d9470191b25a46c2aa062ee09fbe08276cb83708", "filename": "src/test/ui/parser/issues/issue-24780.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-24780.stderr?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `!`, `+`, `::`, `;`, `where`, or `{`, found `>`\n+error: expected one of `!`, `+`, `::`, `where`, or `{`, found `>`\n   --> $DIR/issue-24780.rs:5:23\n    |\n LL | fn foo() -> Vec<usize>> {\n-   |                       ^ expected one of `!`, `+`, `::`, `;`, `where`, or `{`\n+   |                       ^ expected one of `!`, `+`, `::`, `where`, or `{`\n \n error: aborting due to previous error\n "}, {"sha": "ea80eb8714f966c242688a576702c1743ab93be8", "filename": "src/test/ui/parser/issues/issue-58856-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -2,7 +2,7 @@ impl A {\n     //~^ ERROR cannot find type `A` in this scope\n     fn b(self>\n     //~^ ERROR expected one of `)`, `,`, or `:`, found `>`\n-    //~| ERROR expected one of `->`, `;`, `where`, or `{`, found `>`\n+    //~| ERROR expected one of `->`, `where`, or `{`, found `>`\n }\n \n fn main() {}"}, {"sha": "96151f3fe07fd8ae3012e6ded78b9df39d03ae07", "filename": "src/test/ui/parser/issues/issue-58856-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-58856-1.stderr?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -6,14 +6,14 @@ LL |     fn b(self>\n    |         |\n    |         unclosed delimiter\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `>`\n+error: expected one of `->`, `where`, or `{`, found `>`\n   --> $DIR/issue-58856-1.rs:3:14\n    |\n LL | impl A {\n    |        - while parsing this item list starting here\n LL |\n LL |     fn b(self>\n-   |              ^ expected one of `->`, `;`, `where`, or `{`\n+   |              ^ expected one of `->`, `where`, or `{`\n ...\n LL | }\n    | - the item list ends here"}, {"sha": "77f0896e9c155d54462a4c5e416b14eb99b1c304", "filename": "src/test/ui/parser/issues/issue-84148-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -13,11 +13,11 @@ LL | fn f(t:for<>t?)\n    |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n    |              help: missing `,`\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/issue-84148-1.rs:1:15\n    |\n LL | fn f(t:for<>t?)\n-   |               ^ expected one of `->`, `;`, `where`, or `{`\n+   |               ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "396208316df677e32a085508eba833fd14217089", "filename": "src/test/ui/parser/issues/issue-84148-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -21,11 +21,11 @@ LL | fn f(t:for<>t?\n    |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n    |              help: missing `,`\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/issue-84148-2.rs:4:16\n    |\n LL | fn f(t:for<>t?\n-   |                ^ expected one of `->`, `;`, `where`, or `{`\n+   |                ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f70a87fb0e8fbaad3f9b7cff2eb1e3b1ca78bb4e", "filename": "src/test/ui/parser/issues/issue-87635.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.rs?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -2,8 +2,8 @@ struct Foo {}\n \n impl Foo {\n     pub fn bar()\n-    //~^ ERROR: expected `;`, found `}`\n-    //~| ERROR: associated function in `impl` without body\n+    //~^ ERROR: associated function in `impl` without body\n }\n+//~^ERROR expected one of `->`, `where`, or `{`, found `}`\n \n fn main() {}"}, {"sha": "0a52d0687b22beb97b2c1164ebed2c521b0910cf", "filename": "src/test/ui/parser/issues/issue-87635.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87635.stderr?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -1,11 +1,13 @@\n-error: expected `;`, found `}`\n-  --> $DIR/issue-87635.rs:4:17\n+error: expected one of `->`, `where`, or `{`, found `}`\n+  --> $DIR/issue-87635.rs:6:1\n    |\n LL |     pub fn bar()\n-   |                 ^ help: add `;` here\n-...\n+   |            ---  - expected one of `->`, `where`, or `{`\n+   |            |\n+   |            while parsing this `fn`\n+LL |\n LL | }\n-   | - unexpected token\n+   | ^ unexpected token\n \n error: associated function in `impl` without body\n   --> $DIR/issue-87635.rs:4:5"}, {"sha": "3fe0d0f4273decd5b3a6137c08cd8571dfecff96", "filename": "src/test/ui/parser/missing_right_paren.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74437e477ece022604f755881fd01193147368c9/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr?ref=74437e477ece022604f755881fd01193147368c9", "patch": "@@ -22,11 +22,11 @@ error: expected one of `:` or `|`, found `)`\n LL | fn main((\u063c\n    |           ^ expected one of `:` or `|`\n \n-error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/missing_right_paren.rs:3:11\n    |\n LL | fn main((\u063c\n-   |           ^ expected one of `->`, `;`, `where`, or `{`\n+   |           ^ expected one of `->`, `where`, or `{`\n \n error: aborting due to 4 previous errors\n "}]}