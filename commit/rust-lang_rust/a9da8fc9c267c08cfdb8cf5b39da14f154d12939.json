{"sha": "a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZGE4ZmM5YzI2N2MwOGNmZGI4Y2Y1YjM5ZGExNGYxNTRkMTI5Mzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-04T04:46:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-04T04:46:38Z"}, "message": "Auto merge of #58380 - estebank:missing-match-pats, r=zackmdavis\n\nPoint at enum definition when match patterns are not exhaustive\n\n```\nerror[E0004]: non-exhaustive patterns: type `X` is non-empty\n --> file.rs:9:11\n  |\n1 | / enum X {\n2 | |     A,\n  | |     - variant not covered\n3 | |     B,\n  | |     - variant not covered\n4 | |     C,\n  | |     - variant not covered\n5 | | }\n  | |_- `X` defined here\n...\n9 |       match x {\n  |             ^\n  |\n  = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n\nerror[E0004]: non-exhaustive patterns: `B` and `C` not covered\n  --> file.rs:11:11\n   |\n1  | / enum X {\n2  | |     A,\n3  | |     B,\n4  | |     C,\n   | |     - not covered\n5  | | }\n   | |_- `X` defined here\n...\n11 |       match x {\n   |             ^ patterns `C` not covered\n```\n\nWhen a match expression doesn't have patterns covering every variant,\npoint at the enum's definition span. On a best effort basis, point at the\nvariant(s) that are missing. This does not handle the case when the missing\npattern is due to a field's enum variants:\n\n```\nenum E1 {\n    A,\n    B,\n    C,\n}\nenum E2 {\n    A(E1),\n    B,\n}\nfn foo() {\n    match E2::A(E1::A) {\n        E2::A(E1::B) => {}\n        E2::B => {}\n    }\n    //~^ ERROR `E2::A(E1::A)` and `E2::A(E1::C)` not handled\n}\n```\n\nUnify look between match with no arms and match with some missing patterns.\n\nFix #37518.", "tree": {"sha": "8e5a6e1e431b183ba25def13a0a2c0a08593685b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5a6e1e431b183ba25def13a0a2c0a08593685b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "html_url": "https://github.com/rust-lang/rust/commit/a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9261088a73f4d78c1788e3a0de279d9330c472e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9261088a73f4d78c1788e3a0de279d9330c472e1", "html_url": "https://github.com/rust-lang/rust/commit/9261088a73f4d78c1788e3a0de279d9330c472e1"}, {"sha": "d651281a71b7d31947e33383dcb2a5647827e0fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d651281a71b7d31947e33383dcb2a5647827e0fb", "html_url": "https://github.com/rust-lang/rust/commit/d651281a71b7d31947e33383dcb2a5647827e0fb"}], "stats": {"total": 497, "additions": 401, "deletions": 96}, "files": [{"sha": "60eb30e075339bb9ad18a85db40ccbc6c8678202", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -539,7 +539,6 @@ impl<'tcx> Witness<'tcx> {\n         self.apply_constructor(cx, ctor, ty)\n     }\n \n-\n     /// Constructs a partial witness for a pattern given a list of\n     /// patterns expanded by the specialization step.\n     ///"}, {"sha": "9af513a90905e32db0e0db9e2d40e9d1bef65ffd", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 116, "deletions": 28, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::region;\n use rustc::session::Session;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, TyKind};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::lint;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -203,25 +203,51 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             // is uninhabited.\n             let pat_ty = self.tables.node_type(scrut.hir_id);\n             let module = self.tcx.hir().get_module_parent_by_hir_id(scrut.hir_id);\n+            let mut def_span = None;\n+            let mut missing_variants = vec![];\n             if inlined_arms.is_empty() {\n                 let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n                     match pat_ty.sty {\n                         ty::Never => true,\n-                        ty::Adt(def, _) => def.variants.is_empty(),\n+                        ty::Adt(def, _) => {\n+                            def_span = self.tcx.hir().span_if_local(def.did);\n+                            if def.variants.len() < 4 && !def.variants.is_empty() {\n+                                // keep around to point at the definition of non-covered variants\n+                                missing_variants = def.variants.iter()\n+                                    .map(|variant| variant.ident)\n+                                    .collect();\n+                            }\n+                            def.variants.is_empty()\n+                        },\n                         _ => false\n                     }\n                 };\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n-                    let mut err = create_e0004(self.tcx.sess, scrut.span,\n-                                               format!(\"non-exhaustive patterns: type `{}` \\\n-                                                        is non-empty\",\n-                                                       pat_ty));\n-                    span_help!(&mut err, scrut.span,\n-                               \"ensure that all possible cases are being handled, \\\n-                                possibly by adding wildcards or more match arms\");\n+                    let mut err = create_e0004(\n+                        self.tcx.sess,\n+                        scrut.span,\n+                        format!(\"non-exhaustive patterns: {}\", match missing_variants.len() {\n+                            0 => format!(\"type `{}` is non-empty\", pat_ty),\n+                            1 => format!(\n+                                \"pattern `{}` of type `{}` is not handled\",\n+                                missing_variants[0].name,\n+                                pat_ty,\n+                            ),\n+                            _ => format!(\"multiple patterns of type `{}` are not handled\", pat_ty),\n+                        }),\n+                    );\n+                    err.help(\"ensure that all possible cases are being handled, \\\n+                              possibly by adding wildcards or more match arms\");\n+                    if let Some(sp) = def_span {\n+                        err.span_label(sp, format!(\"`{}` defined here\", pat_ty));\n+                    }\n+                    // point at the definition of non-covered enum variants\n+                    for variant in &missing_variants {\n+                        err.span_label(variant.span, \"variant not covered\");\n+                    }\n                     err.emit();\n                 }\n                 // If the type *is* uninhabited, it's vacuously exhaustive\n@@ -263,7 +289,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             };\n \n             let pattern_string = witness[0].single_pattern().to_string();\n-            let mut diag = struct_span_err!(\n+            let mut err = struct_span_err!(\n                 self.tcx.sess, pat.span, E0005,\n                 \"refutable pattern in {}: `{}` not covered\",\n                 origin, pattern_string\n@@ -276,8 +302,13 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 }\n                 _ => format!(\"pattern `{}` not covered\", pattern_string),\n             };\n-            diag.span_label(pat.span, label_msg);\n-            diag.emit();\n+            err.span_label(pat.span, label_msg);\n+            if let ty::Adt(def, _) = pattern_ty.sty {\n+                if let Some(sp) = self.tcx.hir().span_if_local(def.did){\n+                    err.span_label(sp, format!(\"`{}` defined here\", pattern_ty));\n+                }\n+            }\n+            err.emit();\n         });\n     }\n }\n@@ -331,10 +362,11 @@ fn pat_is_catchall(pat: &Pat) -> bool {\n }\n \n // Check for unreachable patterns\n-fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-                        arms: &[(Vec<(&'a Pattern<'tcx>, &hir::Pat)>, Option<&hir::Expr>)],\n-                        source: hir::MatchSource)\n-{\n+fn check_arms<'a, 'tcx>(\n+    cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+    arms: &[(Vec<(&'a Pattern<'tcx>, &hir::Pat)>, Option<&hir::Expr>)],\n+    source: hir::MatchSource,\n+) {\n     let mut seen = Matrix::empty();\n     let mut catchall = None;\n     for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n@@ -410,10 +442,12 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     }\n }\n \n-fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-                              scrut_ty: Ty<'tcx>,\n-                              sp: Span,\n-                              matrix: &Matrix<'p, 'tcx>) {\n+fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(\n+    cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+    scrut_ty: Ty<'tcx>,\n+    sp: Span,\n+    matrix: &Matrix<'p, 'tcx>,\n+) {\n     let wild_pattern = Pattern {\n         ty: scrut_ty,\n         span: DUMMY_SP,\n@@ -447,11 +481,26 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 1 => format!(\"pattern {} not covered\", joined_patterns),\n                 _ => format!(\"patterns {} not covered\", joined_patterns),\n             };\n-            create_e0004(cx.tcx.sess, sp,\n-                            format!(\"non-exhaustive patterns: {} not covered\",\n-                                    joined_patterns))\n-                .span_label(sp, label_text)\n-                .emit();\n+            let mut err = create_e0004(cx.tcx.sess, sp, format!(\n+                \"non-exhaustive patterns: {} not covered\",\n+                joined_patterns,\n+            ));\n+            err.span_label(sp, label_text);\n+            // point at the definition of non-covered enum variants\n+            if let ty::Adt(def, _) = scrut_ty.sty {\n+                if let Some(sp) = cx.tcx.hir().span_if_local(def.did){\n+                    err.span_label(sp, format!(\"`{}` defined here\", scrut_ty));\n+                }\n+            }\n+            let patterns = witnesses.iter().map(|p| (**p).clone()).collect::<Vec<Pattern<'_>>>();\n+            if patterns.len() < 4 {\n+                for sp in maybe_point_at_variant(cx, &scrut_ty.sty, patterns.as_slice()) {\n+                    err.span_label(sp, \"not covered\");\n+                }\n+            }\n+            err.help(\"ensure that all possible cases are being handled, \\\n+                      possibly by adding wildcards or more match arms\");\n+            err.emit();\n         }\n         NotUseful => {\n             // This is good, wildcard pattern isn't reachable\n@@ -460,10 +509,49 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     }\n }\n \n+fn maybe_point_at_variant(\n+    cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+    sty: &TyKind<'tcx>,\n+    patterns: &[Pattern<'_>],\n+) -> Vec<Span> {\n+    let mut covered = vec![];\n+    if let ty::Adt(def, _) = sty {\n+        // Don't point at variants that have already been covered due to other patterns to avoid\n+        // visual clutter\n+        for pattern in patterns {\n+            let pk: &PatternKind<'_> = &pattern.kind;\n+            if let PatternKind::Variant { adt_def, variant_index, subpatterns, .. } = pk {\n+                if adt_def.did == def.did {\n+                    let sp = def.variants[*variant_index].ident.span;\n+                    if covered.contains(&sp) {\n+                        continue;\n+                    }\n+                    covered.push(sp);\n+                    let subpatterns = subpatterns.iter()\n+                        .map(|field_pattern| field_pattern.pattern.clone())\n+                        .collect::<Vec<_>>();\n+                    covered.extend(\n+                        maybe_point_at_variant(cx, sty, subpatterns.as_slice()),\n+                    );\n+                }\n+            }\n+            if let PatternKind::Leaf { subpatterns } = pk {\n+                let subpatterns = subpatterns.iter()\n+                    .map(|field_pattern| field_pattern.pattern.clone())\n+                    .collect::<Vec<_>>();\n+                covered.extend(maybe_point_at_variant(cx, sty, subpatterns.as_slice()));\n+            }\n+        }\n+    }\n+    covered\n+}\n+\n // Legality of move bindings checking\n-fn check_legality_of_move_bindings(cx: &MatchVisitor<'_, '_>,\n-                                   has_guard: bool,\n-                                   pats: &[P<Pat>]) {\n+fn check_legality_of_move_bindings(\n+    cx: &MatchVisitor<'_, '_>,\n+    has_guard: bool,\n+    pats: &[P<Pat>],\n+) {\n     let mut by_ref_span = None;\n     for pat in pats {\n         pat.each_binding(|_, hir_id, span, _path| {"}, {"sha": "792ab6f59a43966382f1b7c3d73610f2b19e2ddf", "filename": "src/test/ui/always-inhabited-union-ref.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falways-inhabited-union-ref.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -4,23 +4,15 @@ error[E0004]: non-exhaustive patterns: type `&'static !` is non-empty\n LL |     match uninhab_ref() {\n    |           ^^^^^^^^^^^^^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/always-inhabited-union-ref.rs:23:11\n-   |\n-LL |     match uninhab_ref() {\n-   |           ^^^^^^^^^^^^^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:27:11\n    |\n LL |     match uninhab_union() {\n    |           ^^^^^^^^^^^^^^^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/always-inhabited-union-ref.rs:27:11\n-   |\n-LL |     match uninhab_union() {\n-   |           ^^^^^^^^^^^^^^^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "54e5c988f8ccc76c1d175b29e6074d8964029fce", "filename": "src/test/ui/check_match/issue-35609.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,48 +3,70 @@ error[E0004]: non-exhaustive patterns: `(B, _)`, `(C, _)`, `(D, _)` and 2 more n\n    |\n LL |     match (A, ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:14:11\n    |\n LL |     match (A, A) { //~ ERROR non-exhaustive\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:18:11\n    |\n LL |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:22:11\n    |\n LL |     match ((A, ()), A) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:26:11\n    |\n LL |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:31:11\n    |\n+LL | struct S(Enum, ());\n+   | ------------------- `S` defined here\n+...\n LL |     match S(A, ()) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n   --> $DIR/issue-35609.rs:35:11\n    |\n+LL | struct Sd { x: Enum, y: () }\n+   | ---------------------------- `Sd` defined here\n+...\n LL |     match (Sd { x: A, y: () }) { //~ ERROR non-exhaustive\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:39:11\n    |\n LL |     match Some(A) { //~ ERROR non-exhaustive\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 8 previous errors\n "}, {"sha": "d9840231695975002985fc1daab6e338aabadcaf", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `&S` not covered\n    |\n LL |     match C { //~ ERROR non-exhaustive\n    |           ^ pattern `&S` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "f1be4a6edec5f51a714e9756586625d59c920769", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,15 @@\n error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n   --> $DIR/empty-never-array.rs:10:9\n    |\n-LL |     let Helper::U(u) = Helper::T(t, []);\n-   |         ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n+LL | / enum Helper<T, U> {\n+LL | |     T(T, [!; 0]),\n+LL | |     #[allow(dead_code)]\n+LL | |     U(U),\n+LL | | }\n+   | |_- `Helper<T, U>` defined here\n+...\n+LL |       let Helper::U(u) = Helper::T(t, []);\n+   |           ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n \n error: aborting due to previous error\n "}, {"sha": "c8732852a71ee06e64e9711b20b639fbc4d06628", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,14 +1,10 @@\n-error[E0004]: non-exhaustive patterns: type `std::option::Option<i32>` is non-empty\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `std::option::Option<i32>` are not handled\n   --> $DIR/E0004-2.rs:4:11\n    |\n LL |     match x { } //~ ERROR E0004\n    |           ^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/E0004-2.rs:4:11\n-   |\n-LL |     match x { } //~ ERROR E0004\n-   |           ^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "123f4b2f1b71d630b3869ee30ec7422f01121473", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,17 @@\n error[E0004]: non-exhaustive patterns: `HastaLaVistaBaby` not covered\n   --> $DIR/E0004.rs:9:11\n    |\n-LL |     match x { //~ ERROR E0004\n-   |           ^ pattern `HastaLaVistaBaby` not covered\n+LL | / enum Terminator {\n+LL | |     HastaLaVistaBaby,\n+   | |     ---------------- not covered\n+LL | |     TalkToMyHand,\n+LL | | }\n+   | |_- `Terminator` defined here\n+...\n+LL |       match x { //~ ERROR E0004\n+   |             ^ pattern `HastaLaVistaBaby` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "d9513710d4463ec688b9d2a80c7931d8659e6b93", "filename": "src/test/ui/exhaustive_integer_patterns.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -15,12 +15,16 @@ error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ pattern `128u8..=255u8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n   --> $DIR/exhaustive_integer_patterns.rs:33:11\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ patterns `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: unreachable pattern\n   --> $DIR/exhaustive_integer_patterns.rs:44:9\n@@ -33,54 +37,72 @@ error[E0004]: non-exhaustive patterns: `-128i8..=-8i8`, `-6i8`, `121i8..=124i8`\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ patterns `-128i8..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `-128i8` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:82:11\n    |\n LL |     match 0i8 { //~ ERROR non-exhaustive patterns\n    |           ^^^ pattern `-128i8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0i16` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:90:11\n    |\n LL |     match 0i16 { //~ ERROR non-exhaustive patterns\n    |           ^^^^ pattern `0i16` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:108:11\n    |\n LL |     match 0u8 { //~ ERROR non-exhaustive patterns\n    |           ^^^ pattern `128u8..=255u8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:120:11\n    |\n LL |     match (0u8, Some(())) { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(126u8..=127u8, false)` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:125:11\n    |\n LL |     match (0u8, true) { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^^^^^^ pattern `(126u8..=127u8, false)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211455u128` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:145:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `340282366920938463463374607431768211455u128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `5u128..=340282366920938463463374607431768211455u128` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:149:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `5u128..=340282366920938463463374607431768211455u128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0u128..=3u128` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:153:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `0u128..=3u128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 13 previous errors\n "}, {"sha": "fd1e5392e69e49ff1f45a776af115e39a308cbd0", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,12 +3,16 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n    |\n LL |     match 0usize { //~ERROR non-exhaustive patterns: `_` not covered\n    |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n    |\n LL |     match 0isize { //~ERROR non-exhaustive patterns: `_` not covered\n    |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b93fa14db0387b8568ec70acffab4d8e08ce36eb", "filename": "src/test/ui/issues/issue-15129.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15129.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `(T1(()), V2(_))` not covered\n    |\n LL |     match (T::T1(()), V::V2(true)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `(T1(()), V2(_))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "90fdb48ea625d3dbacf51c22843dcdcab34193db", "filename": "src/test/ui/issues/issue-2111.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-2111.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-2111.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2111.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `(None, None)` not covered\n    |\n LL |   match (a,b) {\n    |         ^^^^^ pattern `(None, None)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "bc538abf3bdf012db517b77377745b43d09de6b3", "filename": "src/test/ui/issues/issue-30240.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-30240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-30240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30240.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,12 +3,16 @@ error[E0004]: non-exhaustive patterns: `&_` not covered\n    |\n LL |     match \"world\" { //~ ERROR non-exhaustive patterns: `&_`\n    |           ^^^^^^^ pattern `&_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&_` not covered\n   --> $DIR/issue-30240.rs:6:11\n    |\n LL |     match \"world\" { //~ ERROR non-exhaustive patterns: `&_`\n    |           ^^^^^^^ pattern `&_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fee58474031e993174659af3d4000d8d1299a6bc", "filename": "src/test/ui/issues/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -4,11 +4,7 @@ error[E0004]: non-exhaustive patterns: type `()` is non-empty\n LL |     match () { } //~ ERROR non-exhaustive\n    |           ^^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/issue-3096-1.rs:2:11\n-   |\n-LL |     match () { } //~ ERROR non-exhaustive\n-   |           ^^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "93119d377441f7061ad045a2df91cac946f2adc7", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -4,11 +4,7 @@ error[E0004]: non-exhaustive patterns: type `*const Bottom` is non-empty\n LL |     match x { } //~ ERROR non-exhaustive patterns\n    |           ^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/issue-3096-2.rs:5:11\n-   |\n-LL |     match x { } //~ ERROR non-exhaustive patterns\n-   |           ^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "246137aeee05c5ba137edb35a12619723ebe3662", "filename": "src/test/ui/issues/issue-31561.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-31561.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-31561.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31561.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,15 @@\n error[E0005]: refutable pattern in local binding: `Bar` not covered\n   --> $DIR/issue-31561.rs:8:9\n    |\n-LL |     let Thing::Foo(y) = Thing::Foo(1);\n-   |         ^^^^^^^^^^^^^ pattern `Bar` not covered\n+LL | / enum Thing {\n+LL | |     Foo(u8),\n+LL | |     Bar,\n+LL | |     Baz\n+LL | | }\n+   | |_- `Thing` defined here\n+...\n+LL |       let Thing::Foo(y) = Thing::Foo(1);\n+   |           ^^^^^^^^^^^^^ pattern `Bar` not covered\n \n error: aborting due to previous error\n "}, {"sha": "85b534434342b6f45e308b575eafd778a84b232d", "filename": "src/test/ui/issues/issue-3601.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3601.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n    |\n LL |         box NodeKind::Element(ed) => match ed.kind { //~ ERROR non-exhaustive patterns\n    |                                            ^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "55cd14a5c1e0899d80f8ee104750aa32d28ea81e", "filename": "src/test/ui/issues/issue-39362.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-39362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-39362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39362.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,15 @@\n error[E0004]: non-exhaustive patterns: `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n   --> $DIR/issue-39362.rs:10:11\n    |\n-LL |     match f {\n-   |           ^ patterns `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n+LL | / enum Foo {\n+LL | |     Bar { bar: Bar, id: usize }\n+LL | | }\n+   | |_- `Foo` defined here\n+...\n+LL |       match f {\n+   |             ^ patterns `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "731e63fbb2b049fbdad60904f8fc7d383258490a", "filename": "src/test/ui/issues/issue-4321.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-4321.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fissues%2Fissue-4321.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4321.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `(true, false)` not covered\n    |\n LL |     println!(\"foo {:}\", match tup { //~ ERROR non-exhaustive patterns: `(true, false)` not covered\n    |                               ^^^ pattern `(true, false)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "8c54e030823af0298d9b141f64606d95e62fdb48", "filename": "src/test/ui/match/match-argm-statics-2.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-argm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-argm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-argm-statics-2.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,18 +3,30 @@ error[E0004]: non-exhaustive patterns: `(true, false)` not covered\n    |\n LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n   --> $DIR/match-argm-statics-2.rs:29:11\n    |\n LL |     match Some(Some(North)) {\n    |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(West))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n   --> $DIR/match-argm-statics-2.rs:48:11\n    |\n-LL |     match (Foo { bar: Some(North), baz: NewBool(true) }) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n+LL | / struct Foo {\n+LL | |     bar: Option<Direction>,\n+LL | |     baz: NewBool\n+LL | | }\n+   | |_- `Foo` defined here\n+...\n+LL |       match (Foo { bar: Some(North), baz: NewBool(true) }) {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 3 previous errors\n "}, {"sha": "83dbecfcac6574bacc0a68eae11b9a7ebe8b584e", "filename": "src/test/ui/match/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-byte-array-patterns-2.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,12 +3,16 @@ error[E0004]: non-exhaustive patterns: `&[_, _, _, _]` not covered\n    |\n LL |     match buf { //~ ERROR non-exhaustive\n    |           ^^^ pattern `&[_, _, _, _]` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[]`, `&[_]`, `&[_, _]` and 3 more not covered\n   --> $DIR/match-byte-array-patterns-2.rs:10:11\n    |\n LL |     match buf { //~ ERROR non-exhaustive\n    |           ^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 3 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9921e4f63b641d1ea248f0de0838cdf17ddfed2b", "filename": "src/test/ui/match/match-non-exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,12 +3,16 @@ error[E0004]: non-exhaustive patterns: `-2147483648i32..=0i32` and `2i32..=21474\n    |\n LL |     match 0 { 1 => () } //~ ERROR non-exhaustive patterns\n    |           ^ patterns `-2147483648i32..=0i32` and `2i32..=2147483647i32` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-non-exhaustive.rs:3:11\n    |\n LL |     match 0 { 0 if false => () } //~ ERROR non-exhaustive patterns\n    |           ^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f79d180a1b8b5c0f82765f868c761e1ff6950d62", "filename": "src/test/ui/match/match-privately-empty.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-privately-empty.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `Some(Private { misc: true, .. })` not co\n    |\n LL |     match private::DATA {\n    |           ^^^^^^^^^^^^^ pattern `Some(Private { misc: true, .. })` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "24769db34c9322f252d1917967674717fc3448bb", "filename": "src/test/ui/match/match-slice-patterns.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmatch%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-slice-patterns.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `&[_, Some(_), None, _]` not covered\n    |\n LL |     match list {\n    |           ^^^^ pattern `&[_, Some(_), None, _]` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "9e4ce7c81b70eefc858c4ea342d1985d8e6efa85", "filename": "src/test/ui/missing/missing-items/issue-40221.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fissue-40221.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,16 @@\n error[E0004]: non-exhaustive patterns: `C(QA)` not covered\n   --> $DIR/issue-40221.rs:11:11\n    |\n-LL |     match proto { //~ ERROR non-exhaustive patterns\n-   |           ^^^^^ pattern `C(QA)` not covered\n+LL | / enum P {\n+LL | |     C(PC),\n+   | |     - not covered\n+LL | | }\n+   | |_- `P` defined here\n+...\n+LL |       match proto { //~ ERROR non-exhaustive patterns\n+   |             ^^^^^ pattern `C(QA)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "03215f72ebcd47a1aadb14894d25497be4f665e1", "filename": "src/test/ui/non-exhaustive/non-exhaustive-float-range-match.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-float-range-match.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n    |\n LL |     match 0.0 { //~ ERROR non-exhaustive patterns\n    |           ^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "d5beac4b716338c0c902362f047f3e4911c7d547", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match-nested.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,12 +3,22 @@ error[E0004]: non-exhaustive patterns: `(Some(&[]), Err(_))` not covered\n    |\n LL |     match (l1, l2) { //~ ERROR non-exhaustive patterns: `(Some(&[]), Err(_))` not covered\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `A(C)` not covered\n   --> $DIR/non-exhaustive-match-nested.rs:17:11\n    |\n+LL | enum T { A(U), B }\n+   | ------------------\n+   | |        |\n+   | |        not covered\n+   | `T` defined here\n+...\n LL |     match x { //~ ERROR non-exhaustive patterns: `A(C)` not covered\n    |           ^ pattern `A(C)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "112e18432b440dafd0b73f688cee4ac9fce2b975", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,50 +1,78 @@\n error[E0004]: non-exhaustive patterns: `A` not covered\n   --> $DIR/non-exhaustive-match.rs:8:11\n    |\n+LL | enum T { A, B }\n+   | ---------------\n+   | |        |\n+   | |        not covered\n+   | `T` defined here\n+...\n LL |     match x { T::B => { } } //~ ERROR non-exhaustive patterns: `A` not covered\n    |           ^ pattern `A` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n   --> $DIR/non-exhaustive-match.rs:9:11\n    |\n LL |     match true { //~ ERROR non-exhaustive patterns: `false` not covered\n    |           ^^^^ pattern `false` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n   --> $DIR/non-exhaustive-match.rs:12:11\n    |\n LL |     match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n    |           ^^^^^^^^ pattern `Some(_)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n   --> $DIR/non-exhaustive-match.rs:15:11\n    |\n LL |     match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)`\n    |           ^^^^^^^^^ patterns `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(A, A)` not covered\n   --> $DIR/non-exhaustive-match.rs:19:11\n    |\n LL |     match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` not covered\n    |           ^^^^^^^^^^^^ pattern `(A, A)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/non-exhaustive-match.rs:23:11\n    |\n+LL | enum T { A, B }\n+   | ---------------\n+   | |           |\n+   | |           not covered\n+   | `T` defined here\n+...\n LL |     match T::A { //~ ERROR non-exhaustive patterns: `B` not covered\n    |           ^^^^ pattern `B` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n   --> $DIR/non-exhaustive-match.rs:34:11\n    |\n LL |     match *vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n    |           ^^^^ pattern `[]` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _]` not covered\n   --> $DIR/non-exhaustive-match.rs:47:11\n    |\n LL |     match *vec { //~ ERROR non-exhaustive patterns: `[_, _, _, _]` not covered\n    |           ^^^^ pattern `[_, _, _, _]` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 8 previous errors\n "}, {"sha": "a0b497dd4c0ba12da984e3e19d19eddccbbf011b", "filename": "src/test/ui/non-exhaustive/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-pattern-witness.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,44 +1,94 @@\n error[E0004]: non-exhaustive patterns: `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:9:11\n    |\n-LL |     match (Foo { first: true, second: None }) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n+LL | / struct Foo {\n+LL | |     first: bool,\n+LL | |     second: Option<[usize; 4]>\n+LL | | }\n+   | |_- `Foo` defined here\n+...\n+LL |       match (Foo { first: true, second: None }) {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Red` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:25:11\n    |\n-LL |     match Color::Red {\n-   |           ^^^^^^^^^^ pattern `Red` not covered\n+LL | / enum Color {\n+LL | |     Red,\n+   | |     --- not covered\n+LL | |     Green,\n+LL | |     CustomRGBA { a: bool, r: u8, g: u8, b: u8 }\n+LL | | }\n+   | |_- `Color` defined here\n+...\n+LL |       match Color::Red {\n+   |             ^^^^^^^^^^ pattern `Red` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:37:11\n    |\n-LL |     match Direction::North {\n-   |           ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered\n+LL | / enum Direction {\n+LL | |     North, East, South, West\n+   | |            ----  -----  ---- not covered\n+   | |            |     |\n+   | |            |     not covered\n+   | |            not covered\n+LL | | }\n+   | |_- `Direction` defined here\n+...\n+LL |       match Direction::North {\n+   |             ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:48:11\n    |\n-LL |     match ExcessiveEnum::First {\n-   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered\n+LL | / enum ExcessiveEnum {\n+LL | |     First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth, Ninth, Tenth, Eleventh, Twelfth\n+LL | | }\n+   | |_- `ExcessiveEnum` defined here\n+...\n+LL |       match ExcessiveEnum::First {\n+   |             ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:56:11\n    |\n-LL |     match Color::Red {\n-   |           ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered\n+LL | / enum Color {\n+LL | |     Red,\n+LL | |     Green,\n+LL | |     CustomRGBA { a: bool, r: u8, g: u8, b: u8 }\n+   | |     ---------- not covered\n+LL | | }\n+   | |_- `Color` defined here\n+...\n+LL |       match Color::Red {\n+   |             ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:72:11\n    |\n LL |     match *x {\n    |           ^^ pattern `[Second(true), Second(false)]` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((), false)` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:85:11\n    |\n LL |     match ((), false) {\n    |           ^^^^^^^^^^^ pattern `((), false)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 7 previous errors\n "}, {"sha": "a8906a43003ae64bc86458dd009700ed1d566e50", "filename": "src/test/ui/precise_pointer_size_matching.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,12 +3,16 @@ error[E0004]: non-exhaustive patterns: `$ISIZE_MIN..=-6isize` and `21isize..=$IS\n    |\n LL |     match 0isize { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^ patterns `$ISIZE_MIN..=-6isize` and `21isize..=$ISIZE_MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0usize` and `21usize..=$USIZE_MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:29:11\n    |\n LL |     match 0usize { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^ patterns `0usize` and `21usize..=$USIZE_MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e24c8f155590176057fc321cc9b19e8fab653664", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `&[]` not covered\n    |\n LL |     match sl { //~ ERROR non-exhaustive patterns\n    |           ^^ pattern `&[]` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "b5c1a4ebba4ac4981360f537ac96eed4b18d75f6", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,6 +3,8 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n    |\n LL |     match enum_unit {\n    |           ^^^^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "0aa85eb7253e8e0b43f0874669f2f65fbc6f270e", "filename": "src/test/ui/structs/struct-like-enum-nonexhaustive.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fstructs%2Fstruct-like-enum-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Fstructs%2Fstruct-like-enum-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-like-enum-nonexhaustive.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,17 @@\n error[E0004]: non-exhaustive patterns: `B { x: Some(_) }` not covered\n   --> $DIR/struct-like-enum-nonexhaustive.rs:8:11\n    |\n-LL |     match x {   //~ ERROR non-exhaustive patterns\n-   |           ^ pattern `B { x: Some(_) }` not covered\n+LL | / enum A {\n+LL | |     B { x: Option<isize> },\n+   | |     - not covered\n+LL | |     C\n+LL | | }\n+   | |_- `A` defined here\n+...\n+LL |       match x {   //~ ERROR non-exhaustive patterns\n+   |             ^ pattern `B { x: Some(_) }` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "58d0862be6d2195471c5c48e769069b7f3d9d142", "filename": "src/test/ui/tuple/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-nonexhaustive.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,13 @@\n error[E0004]: non-exhaustive patterns: `Foo(_, _)` not covered\n   --> $DIR/tuple-struct-nonexhaustive.rs:5:11\n    |\n+LL | struct Foo(isize, isize);\n+   | ------------------------- `Foo` defined here\n+...\n LL |     match x {   //~ ERROR non-exhaustive\n    |           ^ pattern `Foo(_, _)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to previous error\n "}, {"sha": "2424252af2ad3209714fc1644601ed60642e5681", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -1,8 +1,16 @@\n error[E0005]: refutable pattern in local binding: `A(_)` not covered\n   --> $DIR/uninhabited-irrefutable.rs:27:9\n    |\n-LL |     let Foo::D(_y) = x; //~ ERROR refutable pattern in local binding: `A(_)` not covered\n-   |         ^^^^^^^^^^ pattern `A(_)` not covered\n+LL | / enum Foo {\n+LL | |     A(foo::SecretlyEmpty),\n+LL | |     B(foo::NotSoSecretlyEmpty),\n+LL | |     C(NotSoSecretlyEmpty),\n+LL | |     D(u32),\n+LL | | }\n+   | |_- `Foo` defined here\n+...\n+LL |       let Foo::D(_y) = x; //~ ERROR refutable pattern in local binding: `A(_)` not covered\n+   |           ^^^^^^^^^^ pattern `A(_)` not covered\n \n error: aborting due to previous error\n "}, {"sha": "fec95ca149431c5ecb34b002fd55ae4a969b0524", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9da8fc9c267c08cfdb8cf5b39da14f154d12939/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "patch": "@@ -3,54 +3,48 @@ error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n    |\n LL |     let _ = match x {   //~ ERROR non-exhaustive\n    |                   ^ pattern `Err(_)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:10:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/uninhabited-matches-feature-gated.rs:10:19\n-   |\n-LL |     let _ = match x {}; //~ ERROR non-exhaustive\n-   |                   ^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:13:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/uninhabited-matches-feature-gated.rs:13:19\n-   |\n-LL |     let _ = match x {}; //~ ERROR non-exhaustive\n-   |                   ^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:16:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-  --> $DIR/uninhabited-matches-feature-gated.rs:16:19\n-   |\n-LL |     let _ = match x {}; //~ ERROR non-exhaustive\n-   |                   ^\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_]` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:19:19\n    |\n LL |     let _ = match x {   //~ ERROR non-exhaustive\n    |                   ^ pattern `&[_]` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:27:19\n    |\n LL |     let _ = match x {   //~ ERROR non-exhaustive\n    |                   ^ pattern `Err(_)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:32:9"}]}