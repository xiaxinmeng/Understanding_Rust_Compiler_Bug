{"sha": "f3dc0463628a492d74b2987bd4f0fbd224d24567", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZGMwNDYzNjI4YTQ5MmQ3NGIyOTg3YmQ0ZjBmYmQyMjRkMjQ1Njc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-13T02:33:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-13T02:33:51Z"}, "message": "Rollup merge of #59124 - sntdevco:master, r=Centril\n\nReplace assert with assert_eq\n\nUse `assert_eq!` instead of `assert!` for the tests", "tree": {"sha": "e7499087180d48ef21f1b1938b481eb1f6ea4eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7499087180d48ef21f1b1938b481eb1f6ea4eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3dc0463628a492d74b2987bd4f0fbd224d24567", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJciGwQCRBK7hj4Ov3rIwAAdHIIADNlL4YggWMzMxmqq5+0QsqF\naUuoJ9B+nE5MfBkg4YbKVygbBJtScxCmIRs+uXwu9Eh5jrnPIwXyzD+wY+l2GICy\nzv+hz7opJtfDYrSqQlyHDWHgWI1/WVc530wKo1zfjeVbSe1p+/yzDuefYoqp8jLl\nBA00QsXdLz1aYP34s1VHPEfWaceaNlkDyAh56kNMTAwFqUZI/7Jhxc3kSMhllUD7\nBaisDUOwgcr4y1r8a9WLVKn45LHCtgbhn34cajZ/MRMuGdWZom1zo1ei+PPilXSx\noFijnZLVMC1sxUNO0TmMSJA0KSN6wM69PJL5fOZz8FIWAOR3RglRB4wMCFa10bU=\n=3qOr\n-----END PGP SIGNATURE-----\n", "payload": "tree e7499087180d48ef21f1b1938b481eb1f6ea4eb3\nparent 106159dd06247150ebd068eaaa27f72bc73878f4\nparent 365d918b31421c13fcbdd19b387b592b404e1282\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552444431 +0100\ncommitter GitHub <noreply@github.com> 1552444431 +0100\n\nRollup merge of #59124 - sntdevco:master, r=Centril\n\nReplace assert with assert_eq\n\nUse `assert_eq!` instead of `assert!` for the tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dc0463628a492d74b2987bd4f0fbd224d24567", "html_url": "https://github.com/rust-lang/rust/commit/f3dc0463628a492d74b2987bd4f0fbd224d24567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3dc0463628a492d74b2987bd4f0fbd224d24567/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "106159dd06247150ebd068eaaa27f72bc73878f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/106159dd06247150ebd068eaaa27f72bc73878f4", "html_url": "https://github.com/rust-lang/rust/commit/106159dd06247150ebd068eaaa27f72bc73878f4"}, {"sha": "365d918b31421c13fcbdd19b387b592b404e1282", "url": "https://api.github.com/repos/rust-lang/rust/commits/365d918b31421c13fcbdd19b387b592b404e1282", "html_url": "https://github.com/rust-lang/rust/commit/365d918b31421c13fcbdd19b387b592b404e1282"}], "stats": {"total": 236, "additions": 118, "deletions": 118}, "files": [{"sha": "10fcf8b76ccb4bd7c8e47a8d842bcd03feecc678", "filename": "src/libcore/tests/fmt/num.rs", "status": "modified", "additions": 118, "deletions": 118, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/f3dc0463628a492d74b2987bd4f0fbd224d24567/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dc0463628a492d74b2987bd4f0fbd224d24567/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=f3dc0463628a492d74b2987bd4f0fbd224d24567", "patch": "@@ -3,146 +3,146 @@ fn test_format_int() {\n     // Formatting integers should select the right implementation based off\n     // the type of the argument. Also, hex/octal/binary should be defined\n     // for integers, but they shouldn't emit the negative sign.\n-    assert!(format!(\"{}\", 1isize) == \"1\");\n-    assert!(format!(\"{}\", 1i8) == \"1\");\n-    assert!(format!(\"{}\", 1i16) == \"1\");\n-    assert!(format!(\"{}\", 1i32) == \"1\");\n-    assert!(format!(\"{}\", 1i64) == \"1\");\n-    assert!(format!(\"{}\", -1isize) == \"-1\");\n-    assert!(format!(\"{}\", -1i8) == \"-1\");\n-    assert!(format!(\"{}\", -1i16) == \"-1\");\n-    assert!(format!(\"{}\", -1i32) == \"-1\");\n-    assert!(format!(\"{}\", -1i64) == \"-1\");\n-    assert!(format!(\"{:?}\", 1isize) == \"1\");\n-    assert!(format!(\"{:?}\", 1i8) == \"1\");\n-    assert!(format!(\"{:?}\", 1i16) == \"1\");\n-    assert!(format!(\"{:?}\", 1i32) == \"1\");\n-    assert!(format!(\"{:?}\", 1i64) == \"1\");\n-    assert!(format!(\"{:b}\", 1isize) == \"1\");\n-    assert!(format!(\"{:b}\", 1i8) == \"1\");\n-    assert!(format!(\"{:b}\", 1i16) == \"1\");\n-    assert!(format!(\"{:b}\", 1i32) == \"1\");\n-    assert!(format!(\"{:b}\", 1i64) == \"1\");\n-    assert!(format!(\"{:x}\", 1isize) == \"1\");\n-    assert!(format!(\"{:x}\", 1i8) == \"1\");\n-    assert!(format!(\"{:x}\", 1i16) == \"1\");\n-    assert!(format!(\"{:x}\", 1i32) == \"1\");\n-    assert!(format!(\"{:x}\", 1i64) == \"1\");\n-    assert!(format!(\"{:X}\", 1isize) == \"1\");\n-    assert!(format!(\"{:X}\", 1i8) == \"1\");\n-    assert!(format!(\"{:X}\", 1i16) == \"1\");\n-    assert!(format!(\"{:X}\", 1i32) == \"1\");\n-    assert!(format!(\"{:X}\", 1i64) == \"1\");\n-    assert!(format!(\"{:o}\", 1isize) == \"1\");\n-    assert!(format!(\"{:o}\", 1i8) == \"1\");\n-    assert!(format!(\"{:o}\", 1i16) == \"1\");\n-    assert!(format!(\"{:o}\", 1i32) == \"1\");\n-    assert!(format!(\"{:o}\", 1i64) == \"1\");\n+    assert_eq!(format!(\"{}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{}\", -1isize), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i8), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i16), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i32), \"-1\");\n+    assert_eq!(format!(\"{}\", -1i64), \"-1\");\n+    assert_eq!(format!(\"{:?}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1isize), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i8), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i16), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i32), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1i64), \"1\");\n \n-    assert!(format!(\"{}\", 1usize) == \"1\");\n-    assert!(format!(\"{}\", 1u8) == \"1\");\n-    assert!(format!(\"{}\", 1u16) == \"1\");\n-    assert!(format!(\"{}\", 1u32) == \"1\");\n-    assert!(format!(\"{}\", 1u64) == \"1\");\n-    assert!(format!(\"{:?}\", 1usize) == \"1\");\n-    assert!(format!(\"{:?}\", 1u8) == \"1\");\n-    assert!(format!(\"{:?}\", 1u16) == \"1\");\n-    assert!(format!(\"{:?}\", 1u32) == \"1\");\n-    assert!(format!(\"{:?}\", 1u64) == \"1\");\n-    assert!(format!(\"{:b}\", 1usize) == \"1\");\n-    assert!(format!(\"{:b}\", 1u8) == \"1\");\n-    assert!(format!(\"{:b}\", 1u16) == \"1\");\n-    assert!(format!(\"{:b}\", 1u32) == \"1\");\n-    assert!(format!(\"{:b}\", 1u64) == \"1\");\n-    assert!(format!(\"{:x}\", 1usize) == \"1\");\n-    assert!(format!(\"{:x}\", 1u8) == \"1\");\n-    assert!(format!(\"{:x}\", 1u16) == \"1\");\n-    assert!(format!(\"{:x}\", 1u32) == \"1\");\n-    assert!(format!(\"{:x}\", 1u64) == \"1\");\n-    assert!(format!(\"{:X}\", 1usize) == \"1\");\n-    assert!(format!(\"{:X}\", 1u8) == \"1\");\n-    assert!(format!(\"{:X}\", 1u16) == \"1\");\n-    assert!(format!(\"{:X}\", 1u32) == \"1\");\n-    assert!(format!(\"{:X}\", 1u64) == \"1\");\n-    assert!(format!(\"{:o}\", 1usize) == \"1\");\n-    assert!(format!(\"{:o}\", 1u8) == \"1\");\n-    assert!(format!(\"{:o}\", 1u16) == \"1\");\n-    assert!(format!(\"{:o}\", 1u32) == \"1\");\n-    assert!(format!(\"{:o}\", 1u64) == \"1\");\n+    assert_eq!(format!(\"{}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:?}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:b}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:x}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:X}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1usize), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u8), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u16), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u32), \"1\");\n+    assert_eq!(format!(\"{:o}\", 1u64), \"1\");\n \n     // Test a larger number\n-    assert!(format!(\"{:b}\", 55) == \"110111\");\n-    assert!(format!(\"{:o}\", 55) == \"67\");\n-    assert!(format!(\"{}\", 55) == \"55\");\n-    assert!(format!(\"{:x}\", 55) == \"37\");\n-    assert!(format!(\"{:X}\", 55) == \"37\");\n+    assert_eq!(format!(\"{:b}\", 55), \"110111\");\n+    assert_eq!(format!(\"{:o}\", 55), \"67\");\n+    assert_eq!(format!(\"{}\", 55), \"55\");\n+    assert_eq!(format!(\"{:x}\", 55), \"37\");\n+    assert_eq!(format!(\"{:X}\", 55), \"37\");\n }\n \n #[test]\n fn test_format_int_zero() {\n-    assert!(format!(\"{}\", 0) == \"0\");\n-    assert!(format!(\"{:?}\", 0) == \"0\");\n-    assert!(format!(\"{:b}\", 0) == \"0\");\n-    assert!(format!(\"{:o}\", 0) == \"0\");\n-    assert!(format!(\"{:x}\", 0) == \"0\");\n-    assert!(format!(\"{:X}\", 0) == \"0\");\n+    assert_eq!(format!(\"{}\", 0), \"0\");\n+    assert_eq!(format!(\"{:?}\", 0), \"0\");\n+    assert_eq!(format!(\"{:b}\", 0), \"0\");\n+    assert_eq!(format!(\"{:o}\", 0), \"0\");\n+    assert_eq!(format!(\"{:x}\", 0), \"0\");\n+    assert_eq!(format!(\"{:X}\", 0), \"0\");\n \n-    assert!(format!(\"{}\", 0u32) == \"0\");\n-    assert!(format!(\"{:?}\", 0u32) == \"0\");\n-    assert!(format!(\"{:b}\", 0u32) == \"0\");\n-    assert!(format!(\"{:o}\", 0u32) == \"0\");\n-    assert!(format!(\"{:x}\", 0u32) == \"0\");\n-    assert!(format!(\"{:X}\", 0u32) == \"0\");\n+    assert_eq!(format!(\"{}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:?}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:b}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:o}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:x}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:X}\", 0u32), \"0\");\n }\n \n #[test]\n fn test_format_int_flags() {\n-    assert!(format!(\"{:3}\", 1) == \"  1\");\n-    assert!(format!(\"{:>3}\", 1) == \"  1\");\n-    assert!(format!(\"{:>+3}\", 1) == \" +1\");\n-    assert!(format!(\"{:<3}\", 1) == \"1  \");\n-    assert!(format!(\"{:#}\", 1) == \"1\");\n-    assert!(format!(\"{:#x}\", 10) == \"0xa\");\n-    assert!(format!(\"{:#X}\", 10) == \"0xA\");\n-    assert!(format!(\"{:#5x}\", 10) == \"  0xa\");\n-    assert!(format!(\"{:#o}\", 10) == \"0o12\");\n-    assert!(format!(\"{:08x}\", 10) == \"0000000a\");\n-    assert!(format!(\"{:8x}\", 10) == \"       a\");\n-    assert!(format!(\"{:<8x}\", 10) == \"a       \");\n-    assert!(format!(\"{:>8x}\", 10) == \"       a\");\n-    assert!(format!(\"{:#08x}\", 10) == \"0x00000a\");\n-    assert!(format!(\"{:08}\", -10) == \"-0000010\");\n-    assert!(format!(\"{:x}\", !0u8) == \"ff\");\n-    assert!(format!(\"{:X}\", !0u8) == \"FF\");\n-    assert!(format!(\"{:b}\", !0u8) == \"11111111\");\n-    assert!(format!(\"{:o}\", !0u8) == \"377\");\n-    assert!(format!(\"{:#x}\", !0u8) == \"0xff\");\n-    assert!(format!(\"{:#X}\", !0u8) == \"0xFF\");\n-    assert!(format!(\"{:#b}\", !0u8) == \"0b11111111\");\n-    assert!(format!(\"{:#o}\", !0u8) == \"0o377\");\n+    assert_eq!(format!(\"{:3}\", 1), \"  1\");\n+    assert_eq!(format!(\"{:>3}\", 1), \"  1\");\n+    assert_eq!(format!(\"{:>+3}\", 1), \" +1\");\n+    assert_eq!(format!(\"{:<3}\", 1), \"1  \");\n+    assert_eq!(format!(\"{:#}\", 1), \"1\");\n+    assert_eq!(format!(\"{:#x}\", 10), \"0xa\");\n+    assert_eq!(format!(\"{:#X}\", 10), \"0xA\");\n+    assert_eq!(format!(\"{:#5x}\", 10), \"  0xa\");\n+    assert_eq!(format!(\"{:#o}\", 10), \"0o12\");\n+    assert_eq!(format!(\"{:08x}\", 10), \"0000000a\");\n+    assert_eq!(format!(\"{:8x}\", 10), \"       a\");\n+    assert_eq!(format!(\"{:<8x}\", 10), \"a       \");\n+    assert_eq!(format!(\"{:>8x}\", 10), \"       a\");\n+    assert_eq!(format!(\"{:#08x}\", 10), \"0x00000a\");\n+    assert_eq!(format!(\"{:08}\", -10), \"-0000010\");\n+    assert_eq!(format!(\"{:x}\", !0u8), \"ff\");\n+    assert_eq!(format!(\"{:X}\", !0u8), \"FF\");\n+    assert_eq!(format!(\"{:b}\", !0u8), \"11111111\");\n+    assert_eq!(format!(\"{:o}\", !0u8), \"377\");\n+    assert_eq!(format!(\"{:#x}\", !0u8), \"0xff\");\n+    assert_eq!(format!(\"{:#X}\", !0u8), \"0xFF\");\n+    assert_eq!(format!(\"{:#b}\", !0u8), \"0b11111111\");\n+    assert_eq!(format!(\"{:#o}\", !0u8), \"0o377\");\n }\n \n #[test]\n fn test_format_int_sign_padding() {\n-    assert!(format!(\"{:+5}\", 1) == \"   +1\");\n-    assert!(format!(\"{:+5}\", -1) == \"   -1\");\n-    assert!(format!(\"{:05}\", 1) == \"00001\");\n-    assert!(format!(\"{:05}\", -1) == \"-0001\");\n-    assert!(format!(\"{:+05}\", 1) == \"+0001\");\n-    assert!(format!(\"{:+05}\", -1) == \"-0001\");\n+    assert_eq!(format!(\"{:+5}\", 1), \"   +1\");\n+    assert_eq!(format!(\"{:+5}\", -1), \"   -1\");\n+    assert_eq!(format!(\"{:05}\", 1), \"00001\");\n+    assert_eq!(format!(\"{:05}\", -1), \"-0001\");\n+    assert_eq!(format!(\"{:+05}\", 1), \"+0001\");\n+    assert_eq!(format!(\"{:+05}\", -1), \"-0001\");\n }\n \n #[test]\n fn test_format_int_twos_complement() {\n-    use core::{i8, i16, i32, i64};\n-    assert!(format!(\"{}\", i8::MIN) == \"-128\");\n-    assert!(format!(\"{}\", i16::MIN) == \"-32768\");\n-    assert!(format!(\"{}\", i32::MIN) == \"-2147483648\");\n-    assert!(format!(\"{}\", i64::MIN) == \"-9223372036854775808\");\n+    use core::{i16, i32, i64, i8};\n+    assert_eq!(format!(\"{}\", i8::MIN), \"-128\");\n+    assert_eq!(format!(\"{}\", i16::MIN), \"-32768\");\n+    assert_eq!(format!(\"{}\", i32::MIN), \"-2147483648\");\n+    assert_eq!(format!(\"{}\", i64::MIN), \"-9223372036854775808\");\n }\n \n #[test]\n fn test_format_debug_hex() {\n-    assert!(format!(\"{:02x?}\", b\"Foo\\0\") == \"[46, 6f, 6f, 00]\");\n-    assert!(format!(\"{:02X?}\", b\"Foo\\0\") == \"[46, 6F, 6F, 00]\");\n+    assert_eq!(format!(\"{:02x?}\", b\"Foo\\0\"), \"[46, 6f, 6f, 00]\");\n+    assert_eq!(format!(\"{:02X?}\", b\"Foo\\0\"), \"[46, 6F, 6F, 00]\");\n }"}]}