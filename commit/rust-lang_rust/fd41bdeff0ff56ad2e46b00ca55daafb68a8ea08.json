{"sha": "fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNDFiZGVmZjBmZjU2YWQyZTQ2YjAwY2E1NWRhYWZiNjhhOGVhMDg=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-09T13:53:33Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-09T13:53:33Z"}, "message": "instance: only polymorphize upvar substs\n\nThis commit restricts the substitution polymorphization added in #75255\nto only apply to the tupled upvar substitution, rather than all\nsubstitutions, fixing a bunch of regressions when polymorphization is\nenabled.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "52d247f9a12cccdb995f4fcd4ea20d77ae79617b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52d247f9a12cccdb995f4fcd4ea20d77ae79617b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8wABYACgkQJZLnbIc4\nH9kS+g/+MJiODD4kyAZjBbW4KACOHI0BZBY64x88MrwIjz40/FVmKypMFOVJtdaE\noHqn0EW5OxsScdcdxinoxi4o+sS4h3g6FfQBtK3uRnCCdxoCvpA5M03WIuKsIaiU\n1P/mgm3HaxIEXzIkbwMHLug7S3CksWbaJ3bfR5kL6YJS/AqZkL1ha8xrSp5AVIgA\nGfHI80omutsiatPKG9zCXW3kiKR5ROFFLwHlhiY0m7p/+NiIAigNWJzoryLuhZf7\nz+Vtn+cjgBMwTpvM1zGrrfuE8qOGEbHNcqVKoPpJKJDZQqSbr/DlhLeme1dDDz1c\n6N8WBtMj6g/8DItwFVviw+RfVQ+UUvKWatkYeIkuDMIIyMl0Wp/bpipDzeqnyx6U\nOjgAQYOz1Lc2AfXECFdtjmocvHSG35i2Dyz3gFTLba1XZEEHY98oGbp55hCF/FHl\nD49Cr7Ypmsf2ZUvG0Zyw6tVpqM9Zvusv9gv9C+k5cck9dmcmUv5zApuJttajb2k+\nMEW5ZI6JXzRhz40Iz14pWZ3x9cF0JknZaR3Pu9RvWkcs+urSLoosiwBPTCI5HpTp\n/B21XW0KiPqt951zKRP04AEm4pcP1CvpoIwi8V/dJPov94WiAfbSIOWQ3cvqvFQc\nRPQ2coPD0YrL5bFkDtHt75VWf3GgDMf7S89CySahBURNj1lEnQM=\n=OT9n\n-----END PGP SIGNATURE-----", "payload": "tree 52d247f9a12cccdb995f4fcd4ea20d77ae79617b\nparent 8e738539be23a62120059b5b4443f6c235f932b4\nauthor David Wood <david@davidtw.co> 1596981213 +0100\ncommitter David Wood <david@davidtw.co> 1596981213 +0100\n\ninstance: only polymorphize upvar substs\n\nThis commit restricts the substitution polymorphization added in #75255\nto only apply to the tupled upvar substitution, rather than all\nsubstitutions, fixing a bunch of regressions when polymorphization is\nenabled.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "html_url": "https://github.com/rust-lang/rust/commit/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e738539be23a62120059b5b4443f6c235f932b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e738539be23a62120059b5b4443f6c235f932b4", "html_url": "https://github.com/rust-lang/rust/commit/8e738539be23a62120059b5b4443f6c235f932b4"}], "stats": {"total": 121, "additions": 33, "deletions": 88}, "files": [{"sha": "27f50c240db67e61233673ff82d45584b0cbe9e3", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "patch": "@@ -85,8 +85,6 @@ impl FlagComputation {\n             }\n \n             &ty::Generator(_, ref substs, _) => {\n-                self.add_flags(TypeFlags::MAY_POLYMORPHIZE);\n-\n                 let substs = substs.as_generator();\n                 let should_remove_further_specializable =\n                     !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n@@ -109,8 +107,6 @@ impl FlagComputation {\n             }\n \n             &ty::Closure(_, substs) => {\n-                self.add_flags(TypeFlags::MAY_POLYMORPHIZE);\n-\n                 let substs = substs.as_closure();\n                 let should_remove_further_specializable =\n                     !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n@@ -196,8 +192,6 @@ impl FlagComputation {\n             }\n \n             &ty::FnDef(_, substs) => {\n-                self.add_flags(TypeFlags::MAY_POLYMORPHIZE);\n-\n                 self.add_substs(substs);\n             }\n "}, {"sha": "492f8ce9ef1a9d1afd832535d5a91b7a7edf1b35", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "patch": "@@ -150,12 +150,6 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)\n     }\n \n-    /// Does this value contain closures, generators or functions such that it may require\n-    /// polymorphization?\n-    fn may_polymorphize(&self) -> bool {\n-        self.has_type_flags(TypeFlags::MAY_POLYMORPHIZE)\n-    }\n-\n     /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n     fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> bool) -> bool {\n         pub struct Visitor<F>(F);"}, {"sha": "2def000da648086d7acdaf216c7d9fcffd050c00", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "patch": "@@ -492,6 +492,20 @@ fn polymorphize<'tcx>(\n     let unused = tcx.unused_generic_params(def_id);\n     debug!(\"polymorphize: unused={:?}\", unused);\n \n+    // If this is a closure or generator then we need to handle the case where another closure\n+    // from the function is captured as an upvar and hasn't been polymorphized. In this case,\n+    // the unpolymorphized upvar closure would result in a polymorphized closure producing\n+    // multiple mono items (and eventually symbol clashes).\n+    let upvars_ty = if tcx.is_closure(def_id) {\n+        Some(substs.as_closure().tupled_upvars_ty())\n+    } else if tcx.type_of(def_id).is_generator() {\n+        Some(substs.as_generator().tupled_upvars_ty())\n+    } else {\n+        None\n+    };\n+    let has_upvars = upvars_ty.map(|ty| ty.tuple_fields().count() > 0).unwrap_or(false);\n+    debug!(\"polymorphize: upvars_ty={:?} has_upvars={:?}\", upvars_ty, has_upvars);\n+\n     struct PolymorphizationFolder<'tcx> {\n         tcx: TyCtxt<'tcx>,\n     };\n@@ -512,14 +526,6 @@ fn polymorphize<'tcx>(\n                         self.tcx.mk_closure(def_id, polymorphized_substs)\n                     }\n                 }\n-                ty::FnDef(def_id, substs) => {\n-                    let polymorphized_substs = polymorphize(self.tcx, def_id, substs);\n-                    if substs == polymorphized_substs {\n-                        ty\n-                    } else {\n-                        self.tcx.mk_fn_def(def_id, polymorphized_substs)\n-                    }\n-                }\n                 ty::Generator(def_id, substs, movability) => {\n                     let polymorphized_substs = polymorphize(self.tcx, def_id, substs);\n                     if substs == polymorphized_substs {\n@@ -537,24 +543,31 @@ fn polymorphize<'tcx>(\n         let is_unused = unused.contains(param.index).unwrap_or(false);\n         debug!(\"polymorphize: param={:?} is_unused={:?}\", param, is_unused);\n         match param.kind {\n-            // If parameter is a const or type parameter..\n+            // Upvar case: If parameter is a type parameter..\n+            ty::GenericParamDefKind::Type { .. } if\n+                // ..and has upvars..\n+                has_upvars &&\n+                // ..and this param has the same type as the tupled upvars..\n+                upvars_ty == Some(substs[param.index as usize].expect_ty()) => {\n+                    // ..then double-check that polymorphization marked it used..\n+                    debug_assert!(!is_unused);\n+                    // ..and polymorphize any closures/generators captured as upvars.\n+                    let upvars_ty = upvars_ty.unwrap();\n+                    let polymorphized_upvars_ty = upvars_ty.fold_with(\n+                        &mut PolymorphizationFolder { tcx });\n+                    debug!(\"polymorphize: polymorphized_upvars_ty={:?}\", polymorphized_upvars_ty);\n+                    ty::GenericArg::from(polymorphized_upvars_ty)\n+                },\n+\n+            // Simple case: If parameter is a const or type parameter..\n             ty::GenericParamDefKind::Const | ty::GenericParamDefKind::Type { .. } if\n                 // ..and is within range and unused..\n                 unused.contains(param.index).unwrap_or(false) =>\n                     // ..then use the identity for this parameter.\n                     tcx.mk_param_from_def(param),\n \n-            // If the parameter does not contain any closures or generators, then use the\n-            // substitution directly.\n-            _ if !substs.may_polymorphize() => substs[param.index as usize],\n-\n-            // Otherwise, use the substitution after polymorphizing.\n-            _ => {\n-                let arg = substs[param.index as usize];\n-                let polymorphized_arg = arg.fold_with(&mut PolymorphizationFolder { tcx });\n-                debug!(\"polymorphize: arg={:?} polymorphized_arg={:?}\", arg, polymorphized_arg);\n-                ty::GenericArg::from(polymorphized_arg)\n-            }\n+            // Otherwise, use the parameter as before.\n+            _ => substs[param.index as usize],\n         }\n     })\n }"}, {"sha": "6798addb8aaa3a0c35d653f9347356132be259b6", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=fd41bdeff0ff56ad2e46b00ca55daafb68a8ea08", "patch": "@@ -575,10 +575,6 @@ bitflags! {\n         /// Does this value have parameters/placeholders/inference variables which could be\n         /// replaced later, in a way that would change the results of `impl` specialization?\n         const STILL_FURTHER_SPECIALIZABLE = 1 << 17;\n-\n-        /// Does this value contain closures, generators or functions such that it may require\n-        /// polymorphization?\n-        const MAY_POLYMORPHIZE = 1 << 18;\n     }\n }\n "}, {"sha": "af47b440640afdf36530efd9d64c361cdb9c8088", "filename": "src/test/codegen-units/polymorphization/pr-75255.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8e738539be23a62120059b5b4443f6c235f932b4/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Fpr-75255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e738539be23a62120059b5b4443f6c235f932b4/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Fpr-75255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Fpr-75255.rs?ref=8e738539be23a62120059b5b4443f6c235f932b4", "patch": "@@ -1,52 +0,0 @@\n-// compile-flags:-Zpolymorphize=on -Zprint-mono-items=lazy -Copt-level=1\n-// ignore-tidy-linelength\n-\n-#![crate_type = \"rlib\"]\n-\n-// Test that only one copy of `Iter::map` and `iter::repeat` are generated.\n-\n-fn unused<T>() -> u64 {\n-    42\n-}\n-\n-fn foo<T>() {\n-    let x = [1, 2, 3, std::mem::size_of::<T>()];\n-    x.iter().map(|_| ());\n-}\n-\n-//~ MONO_ITEM fn core::iter[0]::adapters[0]::{{impl}}[29]::new[0]<core::slice[0]::Iter[0]<usize>, pr_75255::foo[0]::{{closure}}[0]<T>> @@ pr_75255-cgu.0[External]\n-//~ MONO_ITEM fn core::iter[0]::traits[0]::iterator[0]::Iterator[0]::map[0]<core::slice[0]::Iter[0]<usize>, (), pr_75255::foo[0]::{{closure}}[0]<T>> @@ pr_75255-cgu.1[Internal]\n-\n-fn bar<T>() {\n-    std::iter::repeat(unused::<T>);\n-}\n-\n-//~ MONO_ITEM fn core::iter[0]::sources[0]::repeat[0]<fn() -> u64> @@ pr_75255-cgu.1[Internal]\n-\n-pub fn dispatch() {\n-    foo::<String>();\n-    foo::<Vec<String>>();\n-\n-    bar::<String>();\n-    bar::<Vec<String>>();\n-}\n-\n-// These are all the items that aren't relevant to the test.\n-//~ MONO_ITEM fn core::mem[0]::size_of[0]<alloc::string[0]::String[0]> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::mem[0]::size_of[0]<alloc::vec[0]::Vec[0]<alloc::string[0]::String[0]>> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::mem[0]::size_of[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::add[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::is_null[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::offset[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::wrapping_add[0]<u8> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::wrapping_offset[0]<u8> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::ptr[0]::non_null[0]::{{impl}}[3]::new_unchecked[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::ptr[0]::null[0]<u8> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::slice[0]::{{impl}}[0]::as_ptr[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::slice[0]::{{impl}}[0]::iter[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn core::slice[0]::{{impl}}[0]::len[0]<usize> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn pr_75255::dispatch[0] @@ pr_75255-cgu.1[External]\n-//~ MONO_ITEM fn pr_75255::foo[0]<alloc::string[0]::String[0]> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn pr_75255::foo[0]<alloc::vec[0]::Vec[0]<alloc::string[0]::String[0]>> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn pr_75255::bar[0]<alloc::string[0]::String[0]> @@ pr_75255-cgu.1[Internal]\n-//~ MONO_ITEM fn pr_75255::bar[0]<alloc::vec[0]::Vec[0]<alloc::string[0]::String[0]>> @@ pr_75255-cgu.1[Internal]"}]}