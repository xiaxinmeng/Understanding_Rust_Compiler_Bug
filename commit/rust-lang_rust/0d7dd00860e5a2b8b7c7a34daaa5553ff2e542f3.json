{"sha": "0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkN2RkMDA4NjBlNWEyYjhiN2M3YTM0ZGFhYTU1NTNmZjJlNTQyZjM=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-10T14:54:11Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-02T09:37:30Z"}, "message": "Move useless_transmute to its own module", "tree": {"sha": "6d2df1c5329276fc4ae72f57966dcf943c9141bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d2df1c5329276fc4ae72f57966dcf943c9141bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmA+B1oACgkQHKDfKvWd\naKVbGQ//cSpiRBY6QsmlZb9bod0w2anyjqV+0WMyj3g8mZuSGdqK1/QGynucD386\njRKMuDom9vzO+tS1E6Xx+eVd7AIs/R+45dT8JiCjImHzhEZJUkKbbITkI8sJ79A6\naiRWHVSxhtvcRPRjRfk67bo069Pcg/Y0ZkSAGQeiFthB1w6xiwW82IkB3rhzCBPI\nLO8744C18hges8+n5GL/e9qDcy1G5gsySY1FIJb6rgYk6JZwWtywG8RRSYvjGgRM\nN85DkbgVGPaxuCZMswMDcgRXfbPdXEAUlZkj/Oxd0Fc50xIQLpPytbB4mDB6UdI0\nG+3AeX03uXbrzUfzuG1KdAwNf/rl+xZavdd3K0NwIOuUmtMagj4JLUFpTReUqRVv\ndOmUPx4aWOeREizCaJ9Gi0tMEXjfBiZhnhCRH9ubC+XXQ5QeINGNKzgV9Ti3GXj0\noU73jrr8AsIhpE2J64hEOP0IW+6hJH2HqBaRNC7AJ0NBpVemX5lAzJsx5TSRggvU\nDHQjUV7TVRcjTinckzPIN9wFyrnGfkZ/8Q0G94OAsg6d5fHhU0jCzIXRLGvPOxMf\n9sh9PRrpaWKBuKjqbhXyYuGTFeLasSoRUTMiU6ixbM9ztm7vwjM0e1ZupYHqunyi\n/8DWc48lkIBEcy1UXQ94j1JUt5oRDoZ8kPkJ20kDLwWbBKTrzR8=\n=tcmx\n-----END PGP SIGNATURE-----", "payload": "tree 6d2df1c5329276fc4ae72f57966dcf943c9141bc\nparent 4ac438bfed36c1de307cac0f86d8d4938157ac50\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1612968851 +0900\ncommitter flip1995 <philipp.krones@embecosm.com> 1614677850 +0100\n\nMove useless_transmute to its own module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3", "html_url": "https://github.com/rust-lang/rust/commit/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac438bfed36c1de307cac0f86d8d4938157ac50", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac438bfed36c1de307cac0f86d8d4938157ac50", "html_url": "https://github.com/rust-lang/rust/commit/4ac438bfed36c1de307cac0f86d8d4938157ac50"}], "stats": {"total": 125, "additions": 81, "deletions": 44}, "files": [{"sha": "4897934376f1c53383737c7040c45ffd55c89e36", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 7, "deletions": 44, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3", "patch": "@@ -1,4 +1,6 @@\n+mod useless_transmute;\n mod utils;\n+\n use utils::*;\n \n use crate::utils::{\n@@ -344,51 +346,12 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let from_ty = cx.typeck_results().expr_ty(&args[0]);\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n-                match (&from_ty.kind(), &to_ty.kind()) {\n-                    _ if from_ty == to_ty => span_lint(\n-                        cx,\n-                        USELESS_TRANSMUTE,\n-                        e.span,\n-                        &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n-                    ),\n-                    (ty::Ref(_, rty, rty_mutbl), ty::RawPtr(ptr_ty)) => span_lint_and_then(\n-                        cx,\n-                        USELESS_TRANSMUTE,\n-                        e.span,\n-                        \"transmute from a reference to a pointer\",\n-                        |diag| {\n-                            if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                let rty_and_mut = ty::TypeAndMut {\n-                                    ty: rty,\n-                                    mutbl: *rty_mutbl,\n-                                };\n-\n-                                let sugg = if *ptr_ty == rty_and_mut {\n-                                    arg.as_ty(to_ty)\n-                                } else {\n-                                    arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n-                                };\n+                let triggered = useless_transmute::check(cx, e, from_ty, to_ty, args);\n+                if triggered {\n+                    return;\n+                }\n \n-                                diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n-                            }\n-                        },\n-                    ),\n-                    (ty::Int(_) | ty::Uint(_), ty::RawPtr(_)) => span_lint_and_then(\n-                        cx,\n-                        USELESS_TRANSMUTE,\n-                        e.span,\n-                        \"transmute from an integer to a pointer\",\n-                        |diag| {\n-                            if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                diag.span_suggestion(\n-                                    e.span,\n-                                    \"try\",\n-                                    arg.as_ty(&to_ty.to_string()).to_string(),\n-                                    Applicability::Unspecified,\n-                                );\n-                            }\n-                        },\n-                    ),\n+                match (&from_ty.kind(), &to_ty.kind()) {\n                     (ty::Float(_) | ty::Char, ty::Ref(..) | ty::RawPtr(_)) => span_lint(\n                         cx,\n                         WRONG_TRANSMUTE,"}, {"sha": "86d75fd2ee0b00757b8ec141e8320c5a9c4cf5cc", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=0d7dd00860e5a2b8b7c7a34daaa5553ff2e542f3", "patch": "@@ -0,0 +1,74 @@\n+use super::USELESS_TRANSMUTE;\n+use crate::utils::{span_lint, span_lint_and_then, sugg};\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_middle::ty::Ty;\n+\n+/// Checks for `useless_transmute` lint.\n+/// Returns `true` if it's triggered, otherwise returns `false`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+    args: &'tcx [Expr<'_>],\n+) -> bool {\n+    match (&from_ty.kind(), &to_ty.kind()) {\n+        _ if from_ty == to_ty => {\n+            span_lint(\n+                cx,\n+                USELESS_TRANSMUTE,\n+                e.span,\n+                &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n+            );\n+            true\n+        },\n+        (ty::Ref(_, rty, rty_mutbl), ty::RawPtr(ptr_ty)) => {\n+            span_lint_and_then(\n+                cx,\n+                USELESS_TRANSMUTE,\n+                e.span,\n+                \"transmute from a reference to a pointer\",\n+                |diag| {\n+                    if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                        let rty_and_mut = ty::TypeAndMut {\n+                            ty: rty,\n+                            mutbl: *rty_mutbl,\n+                        };\n+\n+                        let sugg = if *ptr_ty == rty_and_mut {\n+                            arg.as_ty(to_ty)\n+                        } else {\n+                            arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n+                        };\n+\n+                        diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                    }\n+                },\n+            );\n+            true\n+        },\n+        (ty::Int(_) | ty::Uint(_), ty::RawPtr(_)) => {\n+            span_lint_and_then(\n+                cx,\n+                USELESS_TRANSMUTE,\n+                e.span,\n+                \"transmute from an integer to a pointer\",\n+                |diag| {\n+                    if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                        diag.span_suggestion(\n+                            e.span,\n+                            \"try\",\n+                            arg.as_ty(&to_ty.to_string()).to_string(),\n+                            Applicability::Unspecified,\n+                        );\n+                    }\n+                },\n+            );\n+            true\n+        },\n+        _ => false,\n+    }\n+}"}]}