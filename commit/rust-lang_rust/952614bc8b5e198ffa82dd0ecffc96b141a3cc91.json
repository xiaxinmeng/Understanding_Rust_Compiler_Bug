{"sha": "952614bc8b5e198ffa82dd0ecffc96b141a3cc91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjYxNGJjOGI1ZTE5OGZmYTgyZGQwZWNmZmM5NmIxNDFhM2NjOTE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-14T04:49:46Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-14T10:05:52Z"}, "message": "save-analysis: update the smoke test", "tree": {"sha": "7b3ab6aeacfc256cb506f1a41c4ef2bcdc10b066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b3ab6aeacfc256cb506f1a41c4ef2bcdc10b066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952614bc8b5e198ffa82dd0ecffc96b141a3cc91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952614bc8b5e198ffa82dd0ecffc96b141a3cc91", "html_url": "https://github.com/rust-lang/rust/commit/952614bc8b5e198ffa82dd0ecffc96b141a3cc91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952614bc8b5e198ffa82dd0ecffc96b141a3cc91/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c6a12a54f6f9690cb4e1776483d108f653d24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c6a12a54f6f9690cb4e1776483d108f653d24a", "html_url": "https://github.com/rust-lang/rust/commit/83c6a12a54f6f9690cb4e1776483d108f653d24a"}], "stats": {"total": 127, "additions": 84, "deletions": 43}, "files": [{"sha": "701bdee1109ed323fc9f9e69fb8dbb5cf466a33d", "filename": "src/test/run-make/save-analysis/Makefile", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/952614bc8b5e198ffa82dd0ecffc96b141a3cc91/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/952614bc8b5e198ffa82dd0ecffc96b141a3cc91/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile?ref=952614bc8b5e198ffa82dd0ecffc96b141a3cc91", "patch": "@@ -1,3 +1,6 @@\n -include ../tools.mk\n-all:\n+all: code\n+krate2: krate2.rs\n+\t$(RUSTC) $< \n+code: foo.rs krate2\n \t$(RUSTC) foo.rs -Zsave-analysis"}, {"sha": "baf6999b10a69c02a844afc1d8294b053b624c6e", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 62, "deletions": 42, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/952614bc8b5e198ffa82dd0ecffc96b141a3cc91/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952614bc8b5e198ffa82dd0ecffc96b141a3cc91/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=952614bc8b5e198ffa82dd0ecffc96b141a3cc91", "patch": "@@ -9,43 +9,52 @@\n // except according to those terms.\n \n #![ crate_name = \"test\" ]\n-#![allow(unstable)]\n-#![feature(box_syntax, rustc_private, core, zero_one)]\n+#![feature(box_syntax)]\n+#![feature(rustc_private)]\n+\n \n extern crate graphviz;\n // A simple rust project\n \n+extern crate krate2;\n+extern crate krate2 as krate3;\n extern crate flate as myflate;\n \n+use graphviz::RenderOption;\n use std::collections::{HashMap,HashSet};\n use std::cell::RefCell;\n+use std::io::Write;\n \n \n use sub::sub2 as msalias;\n use sub::sub2;\n use sub::sub2::nested_struct as sub_struct;\n-use std::num::One;\n \n use std::mem::size_of;\n \n+use std::char::from_u32;\n+\n static uni: &'static str = \"Les Mis\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9rables\";\n static yy: usize = 25;\n \n-static bob: Option<&'static [isize]> = None;\n+static bob: Option<graphviz::RenderOption> = None;\n \n // buglink test - see issue #1337.\n \n fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n-    let s = sub_struct{ field2: 45, };\n+    let s = sub_struct{ field2: 45u32, };\n \n     // import tests\n-    fn foo(x: &One) {}\n+    fn foo(x: &Write) {}\n+    let _: Option<_> = from_u32(45);\n \n-    let x = 42;\n+    let x = 42usize;\n \n+    krate2::hello();\n+    krate3::hello();\n     myflate::deflate_bytes(&[]);\n \n-    let x = (3, 4);\n+    let x = (3isize, 4usize);\n     let y = x.1;\n }\n \n@@ -55,15 +64,21 @@ fn test_tup_struct(x: TupStruct) -> isize {\n     x.1\n }\n \n+fn println(s: &str) {\n+    std::io::stdout().write_all(s.as_bytes());\n+}\n+\n mod sub {\n     pub mod sub2 {\n+        use std::io::Write;\n         pub mod sub3 {\n+            use std::io::Write;\n             pub fn hello() {\n-                println!(\"hello from module 3\");\n+                ::println(\"hello from module 3\");\n             }\n         }\n         pub fn hello() {\n-            println!(\"hello from a module\");\n+            ::println(\"hello from a module\");\n         }\n \n         pub struct nested_struct {\n@@ -93,14 +108,14 @@ struct some_fields {\n type SF = some_fields;\n \n trait SuperTrait {\n-    fn dummy(&self) { }\n+    fn qux(&self) { panic!(); }\n }\n \n trait SomeTrait: SuperTrait {\n     fn Method(&self, x: u32) -> u32;\n \n     fn prov(&self, x: u32) -> u32 {\n-        println!(\"{}\", &x.to_string());\n+        println(&x.to_string());\n         42\n     }\n     fn provided_method(&self) -> u32 {\n@@ -116,7 +131,7 @@ trait SubTrait: SomeTrait {\n \n impl SomeTrait for some_fields {\n     fn Method(&self, x: u32) -> u32 {\n-        println!(\"{}\", &x.to_string());\n+        println(&x.to_string());\n         self.field1\n     }\n }\n@@ -128,14 +143,15 @@ impl SubTrait for some_fields {}\n \n impl some_fields {\n     fn stat(x: u32) -> u32 {\n-        println!(\"{}\", &x.to_string());\n+        println(&x.to_string());\n         42\n     }\n     fn stat2(x: &some_fields) -> u32 {\n         42\n     }\n \n     fn align_to<T>(&mut self) {\n+\n     }\n \n     fn test(&mut self) {\n@@ -188,61 +204,58 @@ enum SomeStructEnum {\n \n fn matchSomeEnum(val: SomeEnum) {\n     match val {\n-        SomeEnum::Ints(int1, int2) => { println!(\"{}\", &(int1+int2).to_string()); }\n-        SomeEnum::Floats(float1, float2) => { println!(\"{}\", &(float2*float1).to_string()); }\n-        SomeEnum::Strings(_, _, s3) => { println!(\"{}\", s3); }\n-        SomeEnum::MyTypes(mt1, mt2) => {\n-            println!(\"{}\", &(mt1.field1 - mt2.field1).to_string());\n-        }\n+        SomeEnum::Ints(int1, int2) => { println(&(int1+int2).to_string()); }\n+        SomeEnum::Floats(float1, float2) => { println(&(float2*float1).to_string()); }\n+        SomeEnum::Strings(_, _, s3) => { println(s3); }\n+        SomeEnum::MyTypes(mt1, mt2) => { println(&(mt1.field1 - mt2.field1).to_string()); }\n     }\n }\n \n fn matchSomeStructEnum(se: SomeStructEnum) {\n     match se {\n-        SomeStructEnum::EnumStruct{a:a, ..} => println!(\"{}\", &a.to_string()),\n-        SomeStructEnum::EnumStruct2{f1:f1, f2:f_2} => println!(\"{}\", &f_2.field1.to_string()),\n-        SomeStructEnum::EnumStruct3{f1, ..} => println!(\"{}\", &f1.field1.to_string()),\n+        SomeStructEnum::EnumStruct{a:a, ..} => println(&a.to_string()),\n+        SomeStructEnum::EnumStruct2{f1:f1, f2:f_2} => println(&f_2.field1.to_string()),\n+        SomeStructEnum::EnumStruct3{f1, ..} => println(&f1.field1.to_string()),\n     }\n }\n \n \n fn matchSomeStructEnum2(se: SomeStructEnum) {\n     use SomeStructEnum::*;\n     match se {\n-        EnumStruct{a: ref aaa, ..} => println!(\"{}\", &aaa.to_string()),\n-        EnumStruct2{f1, f2: f2} => println!(\"{}\", &f1.field1.to_string()),\n-        EnumStruct3{f1, f3: SomeEnum::Ints(_, _), f2} => println!(\"{}\", &f1.field1.to_string()),\n+        EnumStruct{a: ref aaa, ..} => println(&aaa.to_string()),\n+        EnumStruct2{f1, f2: f2} => println(&f1.field1.to_string()),\n+        EnumStruct3{f1, f3: SomeEnum::Ints(_, _), f2} => println(&f1.field1.to_string()),\n         _ => {},\n     }\n }\n \n fn matchSomeOtherEnum(val: SomeOtherEnum) {\n     use SomeOtherEnum::{SomeConst2, SomeConst3};\n     match val {\n-        SomeOtherEnum::SomeConst1 => { println!(\"I'm const1.\"); }\n-        SomeConst2 | SomeConst3 => { println!(\"I'm const2 or const3.\"); }\n+        SomeOtherEnum::SomeConst1 => { println(\"I'm const1.\"); }\n+        SomeConst2 | SomeConst3 => { println(\"I'm const2 or const3.\"); }\n     }\n }\n \n fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n     SameDir2::hello(43);\n \n-    println!(\"{}\", &yy.to_string());\n+    println(&yy.to_string());\n     let (x, y): (u32, u32) = (5, 3);\n-    println!(\"{}\", &x.to_string());\n-    println!(\"{}\", &z.to_string());\n+    println(&x.to_string());\n+    println(&z.to_string());\n     let x: u32 = x;\n-    println!(\"{}\", &x.to_string());\n+    println(&x.to_string());\n     let x = \"hello\";\n-    println!(\"{}\", x);\n+    println(x);\n \n     let x = 32.0f32;\n     let _ = (x + ((x * x) + 1.0).sqrt()).ln();\n \n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    let s: Box<SomeTrait> = Box::new(some_fields {field1: 43});\n+    let s: Box<SomeTrait> = box some_fields {field1: 43};\n     let s2: Box<some_fields> =  box some_fields {field1: 43};\n-    let s3: Box<_> = box nofields;\n+    let s3 = box nofields;\n \n     s.Method(43);\n     s3.Method(43);\n@@ -253,8 +266,6 @@ fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n     let y: u32 = 56;\n     // static method on struct\n     let r = some_fields::stat(y);\n-    // trait static method, calls override\n-    let r = SubTrait::stat2(&*s2);\n     // trait static method, calls default\n     let r = SubTrait::stat2(&*s3);\n \n@@ -277,7 +288,7 @@ pub struct blah {\n }\n \n fn main() { // foo\n-    let s: Box<_> = box some_fields {field1: 43};\n+    let s = box some_fields {field1: 43};\n     hello((43, \"a\".to_string()), *s);\n     sub::sub2::hello();\n     sub2::sub3::hello();\n@@ -306,7 +317,7 @@ fn main() { // foo\n     let s3: some_fields = some_fields{ field1: 55};\n     let s4: msalias::nested_struct = sub::sub2::nested_struct{ field2: 55};\n     let s4: msalias::nested_struct = sub2::nested_struct{ field2: 55};\n-    println!(\"{}\", &s2.field1.to_string());\n+    println(&s2.field1.to_string());\n     let s5: MyType = box some_fields{ field1: 55};\n     let s = SameDir::SameStruct{name: \"Bob\".to_string()};\n     let s = SubDir::SubStruct{name:\"Bob\".to_string()};\n@@ -316,9 +327,18 @@ fn main() { // foo\n     matchSomeEnum(s7);\n     let s8: SomeOtherEnum = SomeOtherEnum::SomeConst2;\n     matchSomeOtherEnum(s8);\n-    let s9: SomeStructEnum =\n-        SomeStructEnum::EnumStruct2{f1: box some_fields{field1:10}, f2: box s2};\n+    let s9: SomeStructEnum = SomeStructEnum::EnumStruct2{ f1: box some_fields{ field1:10 },\n+                                                          f2: box s2 };\n     matchSomeStructEnum(s9);\n+\n+    for x in &vec![1, 2, 3] {\n+        let _y = x;\n+    }\n+\n+    let s7: SomeEnum = SomeEnum::Strings(\"one\", \"two\", \"three\");\n+    if let SomeEnum::Strings(..) = s7 {\n+        println!(\"hello!\");\n+    }\n }\n \n impl Iterator for nofields {"}, {"sha": "2c6f517ff3882a3cdddf99c13e7d5dc7037b5720", "filename": "src/test/run-make/save-analysis/krate2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/952614bc8b5e198ffa82dd0ecffc96b141a3cc91/src%2Ftest%2Frun-make%2Fsave-analysis%2Fkrate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952614bc8b5e198ffa82dd0ecffc96b141a3cc91/src%2Ftest%2Frun-make%2Fsave-analysis%2Fkrate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Fkrate2.rs?ref=952614bc8b5e198ffa82dd0ecffc96b141a3cc91", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![ crate_name = \"krate2\" ]\n+#![ crate_type = \"lib\" ]\n+\n+use std::io::Write;\n+\n+pub fn hello() {\n+    std::io::stdout().write_all(b\"hello world!\\n\");\n+}"}]}