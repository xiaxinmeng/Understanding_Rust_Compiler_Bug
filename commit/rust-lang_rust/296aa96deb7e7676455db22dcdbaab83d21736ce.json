{"sha": "296aa96deb7e7676455db22dcdbaab83d21736ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NmFhOTZkZWI3ZTc2NzY0NTVkYjIyZGNkYmFhYjgzZDIxNzM2Y2U=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2017-11-20T16:47:29Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2017-11-20T16:47:29Z"}, "message": "[rustllvm] Use report_fatal_error over llvm_unreachable\n\nThis makes it more robust when assertions are disabled,\ncrashing instead of causing UB.\n\nAlso introduces a tidy check to enforce this rule,\nwhich in turn necessitated making tidy run on src/rustllvm.\n\nFixes #44020", "tree": {"sha": "cedbe77b8edd7432d92a5f13ec8b760ed0be33aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cedbe77b8edd7432d92a5f13ec8b760ed0be33aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296aa96deb7e7676455db22dcdbaab83d21736ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296aa96deb7e7676455db22dcdbaab83d21736ce", "html_url": "https://github.com/rust-lang/rust/commit/296aa96deb7e7676455db22dcdbaab83d21736ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296aa96deb7e7676455db22dcdbaab83d21736ce/comments", "author": null, "committer": null, "parents": [{"sha": "26e881d00fee7f28bdb7f0562dbcb7f24db43d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e881d00fee7f28bdb7f0562dbcb7f24db43d1a", "html_url": "https://github.com/rust-lang/rust/commit/26e881d00fee7f28bdb7f0562dbcb7f24db43d1a"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "591ebdc9ddb255938d89d5dc70895a23ee7ab351", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=296aa96deb7e7676455db22dcdbaab83d21736ce", "patch": "@@ -66,7 +66,7 @@ static Archive::Kind fromRust(LLVMRustArchiveKind Kind) {\n   case LLVMRustArchiveKind::COFF:\n     return Archive::K_COFF;\n   default:\n-    llvm_unreachable(\"Bad ArchiveKind.\");\n+    report_fatal_error(\"Bad ArchiveKind.\");\n   }\n }\n "}, {"sha": "4a359fb3ad306426bdd8233509afee815ba83305", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=296aa96deb7e7676455db22dcdbaab83d21736ce", "patch": "@@ -235,7 +235,7 @@ static CodeModel::Model fromRust(LLVMRustCodeModel Model) {\n   case LLVMRustCodeModel::Large:\n     return CodeModel::Large;\n   default:\n-    llvm_unreachable(\"Bad CodeModel.\");\n+    report_fatal_error(\"Bad CodeModel.\");\n   }\n }\n \n@@ -258,7 +258,7 @@ static CodeGenOpt::Level fromRust(LLVMRustCodeGenOptLevel Level) {\n   case LLVMRustCodeGenOptLevel::Aggressive:\n     return CodeGenOpt::Aggressive;\n   default:\n-    llvm_unreachable(\"Bad CodeGenOptLevel.\");\n+    report_fatal_error(\"Bad CodeGenOptLevel.\");\n   }\n }\n \n@@ -302,7 +302,7 @@ static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n     break;\n #endif\n   }\n-  llvm_unreachable(\"Bad RelocModel.\");\n+  report_fatal_error(\"Bad RelocModel.\");\n }\n \n #if LLVM_RUSTLLVM\n@@ -511,7 +511,7 @@ static TargetMachine::CodeGenFileType fromRust(LLVMRustFileType Type) {\n   case LLVMRustFileType::ObjectFile:\n     return TargetMachine::CGFT_ObjectFile;\n   default:\n-    llvm_unreachable(\"Bad FileType.\");\n+    report_fatal_error(\"Bad FileType.\");\n   }\n }\n \n@@ -1197,7 +1197,7 @@ extern \"C\" bool\n LLVMRustWriteThinBitcodeToFile(LLVMPassManagerRef PMR,\n                                LLVMModuleRef M,\n                                const char *BcFile) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n struct LLVMRustThinLTOData {\n@@ -1211,62 +1211,62 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                           int num_modules,\n                           const char **preserved_symbols,\n                           int num_symbols) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTORename(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTOResolveWeak(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTOInternalize(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" bool\n LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" void\n LLVMRustFreeThinLTOData(LLVMRustThinLTOData *Data) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n struct LLVMRustThinLTOBuffer {\n };\n \n extern \"C\" LLVMRustThinLTOBuffer*\n LLVMRustThinLTOBufferCreate(LLVMModuleRef M) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" void\n LLVMRustThinLTOBufferFree(LLVMRustThinLTOBuffer *Buffer) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" const void*\n LLVMRustThinLTOBufferPtr(const LLVMRustThinLTOBuffer *Buffer) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" size_t\n LLVMRustThinLTOBufferLen(const LLVMRustThinLTOBuffer *Buffer) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n \n extern \"C\" LLVMModuleRef\n LLVMRustParseBitcodeForThinLTO(LLVMContextRef Context,\n                                const char *data,\n                                size_t len,\n                                const char *identifier) {\n-  llvm_unreachable(\"ThinLTO not available\");\n+  report_fatal_error(\"ThinLTO not available\");\n }\n #endif // LLVM_VERSION_GE(4, 0)"}, {"sha": "424b226bcf778d98a8b4b45e9cf42db5387c8a12", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=296aa96deb7e7676455db22dcdbaab83d21736ce", "patch": "@@ -54,7 +54,7 @@ static AtomicOrdering fromRust(LLVMAtomicOrdering Ordering) {\n     return AtomicOrdering::SequentiallyConsistent;\n   }\n \n-  llvm_unreachable(\"Invalid LLVMAtomicOrdering value!\");\n+  report_fatal_error(\"Invalid LLVMAtomicOrdering value!\");\n }\n \n static LLVM_THREAD_LOCAL char *LastError;\n@@ -161,7 +161,7 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n   case SanitizeMemory:\n     return Attribute::SanitizeMemory;\n   }\n-  llvm_unreachable(\"bad AttributeKind\");\n+  report_fatal_error(\"bad AttributeKind\");\n }\n \n extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n@@ -356,7 +356,7 @@ static SyncScope::ID fromRust(LLVMRustSynchronizationScope Scope) {\n   case LLVMRustSynchronizationScope::CrossThread:\n     return SyncScope::System;\n   default:\n-    llvm_unreachable(\"bad SynchronizationScope.\");\n+    report_fatal_error(\"bad SynchronizationScope.\");\n   }\n }\n #else\n@@ -367,7 +367,7 @@ static SynchronizationScope fromRust(LLVMRustSynchronizationScope Scope) {\n   case LLVMRustSynchronizationScope::CrossThread:\n     return CrossThread;\n   default:\n-    llvm_unreachable(\"bad SynchronizationScope.\");\n+    report_fatal_error(\"bad SynchronizationScope.\");\n   }\n }\n #endif\n@@ -397,7 +397,7 @@ static InlineAsm::AsmDialect fromRust(LLVMRustAsmDialect Dialect) {\n   case LLVMRustAsmDialect::Intel:\n     return InlineAsm::AD_Intel;\n   default:\n-    llvm_unreachable(\"bad AsmDialect.\");\n+    report_fatal_error(\"bad AsmDialect.\");\n   }\n }\n \n@@ -748,7 +748,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n         unwrapDI<DIType>(Ty), AlwaysPreserve, fromRust(Flags)\n #if LLVM_VERSION_GE(4, 0)\n         ,\n-\tAlignInBits\n+  AlignInBits\n #endif\n         ));\n   } else {\n@@ -1149,7 +1149,7 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMTokenTypeKind;\n #endif\n   }\n-  llvm_unreachable(\"Unhandled TypeID.\");\n+  report_fatal_error(\"Unhandled TypeID.\");\n }\n \n extern \"C\" void LLVMRustWriteDebugLocToString(LLVMContextRef C,\n@@ -1370,7 +1370,7 @@ static LLVMRustLinkage toRust(LLVMLinkage Linkage) {\n   case LLVMCommonLinkage:\n     return LLVMRustLinkage::CommonLinkage;\n   default:\n-    llvm_unreachable(\"Invalid LLVMRustLinkage value!\");\n+    report_fatal_error(\"Invalid LLVMRustLinkage value!\");\n   }\n }\n \n@@ -1399,7 +1399,7 @@ static LLVMLinkage fromRust(LLVMRustLinkage Linkage) {\n   case LLVMRustLinkage::CommonLinkage:\n     return LLVMCommonLinkage;\n   }\n-  llvm_unreachable(\"Invalid LLVMRustLinkage value!\");\n+  report_fatal_error(\"Invalid LLVMRustLinkage value!\");\n }\n \n extern \"C\" LLVMRustLinkage LLVMRustGetLinkage(LLVMValueRef V) {\n@@ -1447,7 +1447,7 @@ static LLVMRustVisibility toRust(LLVMVisibility Vis) {\n   case LLVMProtectedVisibility:\n     return LLVMRustVisibility::Protected;\n   }\n-  llvm_unreachable(\"Invalid LLVMRustVisibility value!\");\n+  report_fatal_error(\"Invalid LLVMRustVisibility value!\");\n }\n \n static LLVMVisibility fromRust(LLVMRustVisibility Vis) {\n@@ -1459,7 +1459,7 @@ static LLVMVisibility fromRust(LLVMRustVisibility Vis) {\n   case LLVMRustVisibility::Protected:\n     return LLVMProtectedVisibility;\n   }\n-  llvm_unreachable(\"Invalid LLVMRustVisibility value!\");\n+  report_fatal_error(\"Invalid LLVMRustVisibility value!\");\n }\n \n extern \"C\" LLVMRustVisibility LLVMRustGetVisibility(LLVMValueRef V) {"}, {"sha": "bd49f288eb2eb57cc2385511e94315d9f79ce952", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=296aa96deb7e7676455db22dcdbaab83d21736ce", "patch": "@@ -57,7 +57,6 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/libbacktrace\",\n         \"src/libcompiler_builtins\",\n         \"src/compiler-rt\",\n-        \"src/rustllvm\",\n         \"src/liblibc\",\n         \"src/vendor\",\n         \"src/rt/hoedown\","}, {"sha": "40d84b98d3a7de685a7bcb37ba4b4b101fc9b4db", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296aa96deb7e7676455db22dcdbaab83d21736ce/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=296aa96deb7e7676455db22dcdbaab83d21736ce", "patch": "@@ -50,6 +50,11 @@ const UNEXPLAINED_IGNORE_DOCTEST_INFO: &str = r#\"unexplained \"```ignore\" doctest\n \n \"#;\n \n+const LLVM_UNREACHABLE_INFO: &str = r\"\\\n+C++ code used llvm_unreachable, which triggers undefined behavior\n+when executed when assertions are disabled.\n+Use llvm::report_fatal_error for increased robustness.\";\n+\n /// Parser states for line_is_url.\n #[derive(PartialEq)]\n #[allow(non_camel_case_types)]\n@@ -108,7 +113,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     let mut contents = String::new();\n     super::walk(path, &mut super::filter_dirs, &mut |file| {\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".h\"];\n+        let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\"];\n         if extensions.iter().all(|e| !filename.ends_with(e)) ||\n            filename.starts_with(\".#\") {\n             return\n@@ -153,6 +158,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n             if line.ends_with(\"```ignore\") || line.ends_with(\"```rust,ignore\") {\n                 err(UNEXPLAINED_IGNORE_DOCTEST_INFO);\n             }\n+            if filename.ends_with(\".cpp\") && line.contains(\"llvm_unreachable\") {\n+                err(LLVM_UNREACHABLE_INFO);\n+            }\n         }\n         if !licenseck(file, &contents) {\n             tidy_error!(bad, \"{}: incorrect license\", file.display());"}]}