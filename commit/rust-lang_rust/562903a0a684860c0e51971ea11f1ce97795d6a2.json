{"sha": "562903a0a684860c0e51971ea11f1ce97795d6a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjkwM2EwYTY4NDg2MGMwZTUxOTcxZWExMWYxY2U5Nzc5NWQ2YTI=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2019-09-13T08:20:17Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2019-09-13T08:20:17Z"}, "message": "use `sign` variable in abs and wrapping_abs methods\n\nThis also makes the code easier to understand by hinting at the\nsignificance of `self >> ($BITS - 1)` and by including an explanation\nin the comments.\n\nAlso, now overflowing_abs simply uses wrapping_abs, which is clearer\nand avoids a potential performance regression in the LLVM IR.", "tree": {"sha": "8d753ef30a535b381862b316e9909e8ee2c3003d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d753ef30a535b381862b316e9909e8ee2c3003d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/562903a0a684860c0e51971ea11f1ce97795d6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/562903a0a684860c0e51971ea11f1ce97795d6a2", "html_url": "https://github.com/rust-lang/rust/commit/562903a0a684860c0e51971ea11f1ce97795d6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/562903a0a684860c0e51971ea11f1ce97795d6a2/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe6d05a8b32f5c66c427ca524dbcce5a7145f87e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6d05a8b32f5c66c427ca524dbcce5a7145f87e", "html_url": "https://github.com/rust-lang/rust/commit/fe6d05a8b32f5c66c427ca524dbcce5a7145f87e"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "98609284277549f7d41e79c03f84d95eeb34f7f2", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/562903a0a684860c0e51971ea11f1ce97795d6a2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562903a0a684860c0e51971ea11f1ce97795d6a2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=562903a0a684860c0e51971ea11f1ce97795d6a2", "patch": "@@ -1402,7 +1402,16 @@ $EndFeature, \"\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n-                (self ^ (self >> ($BITS - 1))).wrapping_sub(self >> ($BITS - 1))\n+                // sign is -1 (all ones) for negative numbers, 0 otherwise.\n+                let sign = self >> ($BITS - 1);\n+                // For positive self, sign == 0 so the expression is simply\n+                // (self ^ 0).wrapping_sub(0) == self == abs(self).\n+                //\n+                // For negative self, self ^ sign == self ^ all_ones.\n+                // But all_ones ^ self == all_ones - self == -1 - self.\n+                // So for negative numbers, (self ^ sign).wrapping_sub(sign) is\n+                // (-1 - self).wrapping_sub(-1) == -self == abs(self).\n+                (self ^ sign).wrapping_sub(sign)\n             }\n         }\n \n@@ -1761,7 +1770,7 @@ $EndFeature, \"\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n             pub const fn overflowing_abs(self) -> (Self, bool) {\n-                (self ^ (self >> ($BITS - 1))).overflowing_sub(self >> ($BITS - 1))\n+                (self.wrapping_abs(), self == Self::min_value())\n             }\n         }\n \n@@ -1969,7 +1978,21 @@ $EndFeature, \"\n                 // Note that the #[inline] above means that the overflow\n                 // semantics of the subtraction depend on the crate we're being\n                 // inlined into.\n-                (self ^ (self >> ($BITS - 1))) - (self >> ($BITS - 1))\n+\n+                // sign is -1 (all ones) for negative numbers, 0 otherwise.\n+                let sign = self >> ($BITS - 1);\n+                // For positive self, sign == 0 so the expression is simply\n+                // (self ^ 0) - 0 == self == abs(self).\n+                //\n+                // For negative self, self ^ sign == self ^ all_ones.\n+                // But all_ones ^ self == all_ones - self == -1 - self.\n+                // So for negative numbers, (self ^ sign) - sign is\n+                // (-1 - self) - -1 == -self == abs(self).\n+                //\n+                // The subtraction overflows when self is min_value(), because\n+                // (-1 - min_value()) - -1 is max_value() - -1 which overflows.\n+                // This is exactly when we want self.abs() to overflow.\n+                (self ^ sign) - sign\n             }\n         }\n "}]}