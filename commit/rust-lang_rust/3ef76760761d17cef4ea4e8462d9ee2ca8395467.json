{"sha": "3ef76760761d17cef4ea4e8462d9ee2ca8395467", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZjc2NzYwNzYxZDE3Y2VmNGVhNGU4NDYyZDllZTJjYTgzOTU0Njc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-02T10:37:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-02T13:32:14Z"}, "message": "Implement StatusBar", "tree": {"sha": "dbcb0bf2cc2f43533360a4a16f3994ddb88515df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbcb0bf2cc2f43533360a4a16f3994ddb88515df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ef76760761d17cef4ea4e8462d9ee2ca8395467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef76760761d17cef4ea4e8462d9ee2ca8395467", "html_url": "https://github.com/rust-lang/rust/commit/3ef76760761d17cef4ea4e8462d9ee2ca8395467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ef76760761d17cef4ea4e8462d9ee2ca8395467/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a03cfa49268d3938b55ceff046d04a75de8972b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a03cfa49268d3938b55ceff046d04a75de8972b9", "html_url": "https://github.com/rust-lang/rust/commit/a03cfa49268d3938b55ceff046d04a75de8972b9"}], "stats": {"total": 98, "additions": 93, "deletions": 5}, "files": [{"sha": "21acfe6445e2dc80118a1456b14146f860bf9510", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -130,6 +130,7 @@ pub struct ClientCapsConfig {\n     pub code_action_group: bool,\n     pub resolve_code_action: bool,\n     pub hover_actions: bool,\n+    pub status_notification: bool,\n }\n \n impl Config {\n@@ -365,6 +366,7 @@ impl Config {\n             self.client_caps.code_action_group = get_bool(\"codeActionGroup\");\n             self.client_caps.resolve_code_action = get_bool(\"resolveCodeAction\");\n             self.client_caps.hover_actions = get_bool(\"hoverActions\");\n+            self.client_caps.status_notification = get_bool(\"statusNotification\");\n         }\n     }\n }"}, {"sha": "5e9cae3f842282aa7db386bb78f574948d197bb2", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -31,6 +31,7 @@ use crate::{\n pub(crate) enum Status {\n     Loading,\n     Ready,\n+    Invalid,\n }\n \n impl Default for Status {"}, {"sha": "d225ad5ff3bfc673413a7c182e14b6c89e9aa217", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -3,7 +3,7 @@\n use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n-use lsp_types::{Position, Range, TextDocumentIdentifier};\n+use lsp_types::{notification::Notification, Position, Range, TextDocumentIdentifier};\n use serde::{Deserialize, Serialize};\n \n pub enum AnalyzerStatus {}\n@@ -208,6 +208,22 @@ pub struct SsrParams {\n     pub parse_only: bool,\n }\n \n+pub enum StatusNotification {}\n+\n+#[serde(rename_all = \"camelCase\")]\n+#[derive(Serialize, Deserialize)]\n+pub enum Status {\n+    Loading,\n+    Ready,\n+    NeedsReload,\n+    Invalid,\n+}\n+\n+impl Notification for StatusNotification {\n+    type Params = Status;\n+    const METHOD: &'static str = \"rust-analyzer/status\";\n+}\n+\n pub enum CodeActionRequest {}\n \n impl Request for CodeActionRequest {"}, {"sha": "a5a8c17a070e337ce4da1e52acbe4aa6c575fb8f", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -169,16 +169,16 @@ impl GlobalState {\n                 }\n                 vfs::loader::Message::Progress { n_total, n_done } => {\n                     if n_total == 0 {\n-                        self.status = Status::Ready;\n+                        self.transition(Status::Invalid);\n                     } else {\n                         let state = if n_done == 0 {\n-                            self.status = Status::Loading;\n+                            self.transition(Status::Loading);\n                             Progress::Begin\n                         } else if n_done < n_total {\n                             Progress::Report\n                         } else {\n                             assert_eq!(n_done, n_total);\n-                            self.status = Status::Ready;\n+                            self.transition(Status::Ready);\n                             Progress::End\n                         };\n                         self.report_progress(\n@@ -274,6 +274,18 @@ impl GlobalState {\n         Ok(())\n     }\n \n+    fn transition(&mut self, new_status: Status) {\n+        self.status = Status::Ready;\n+        if self.config.client_caps.status_notification {\n+            let lsp_status = match new_status {\n+                Status::Loading => lsp_ext::Status::Loading,\n+                Status::Ready => lsp_ext::Status::Ready,\n+                Status::Invalid => lsp_ext::Status::Invalid,\n+            };\n+            self.send_notification::<lsp_ext::StatusNotification>(lsp_status);\n+        }\n+    }\n+\n     fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n         self.register_request(&req, request_received);\n "}, {"sha": "6d6bbac7ca1d959e54098917110f7c8132a031fc", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -399,6 +399,18 @@ Returns internal status message, mostly for debugging purposes.\n \n Reloads project information (that is, re-executes `cargo metadata`).\n \n+## Status Notification\n+\n+**Client Capability:** `{ \"statusNotification\": boolean }`\n+\n+**Method:** `rust-analyzer/status`\n+\n+**Notification:** `\"loading\" | \"ready\" | \"invalid\" | \"needsReload\"`\n+\n+This notification is sent from server to client.\n+The client can use it to display persistent status to the user (in modline).\n+For `needsReload` state, the client can provide a context-menu action to run `rust-analyzer/reloadWorkspace` request.\n+\n ## Syntax Tree\n \n **Method:** `rust-analyzer/syntaxTree`"}, {"sha": "3e5915c28d4bd059a1d97680ecff6401187de5f4", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -161,6 +161,7 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         caps.codeActionGroup = true;\n         caps.resolveCodeAction = true;\n         caps.hoverActions = true;\n+        caps.statusNotification = true;\n         capabilities.experimental = caps;\n     }\n     initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {"}, {"sha": "6e767babf449ea20cc6595e91b4606a7b895d34b", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -1,16 +1,19 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as ra from './lsp_ext';\n \n import { Config } from './config';\n import { createClient } from './client';\n import { isRustEditor, RustEditor } from './util';\n+import { Status } from './lsp_ext';\n \n export class Ctx {\n     private constructor(\n         readonly config: Config,\n         private readonly extCtx: vscode.ExtensionContext,\n         readonly client: lc.LanguageClient,\n         readonly serverPath: string,\n+        readonly statusBar: vscode.StatusBarItem,\n     ) {\n \n     }\n@@ -22,9 +25,18 @@ export class Ctx {\n         cwd: string,\n     ): Promise<Ctx> {\n         const client = createClient(serverPath, cwd);\n-        const res = new Ctx(config, extCtx, client, serverPath);\n+\n+        const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n+        extCtx.subscriptions.push(statusBar);\n+        statusBar.text = \"rust-analyzer\";\n+        statusBar.tooltip = \"ready\";\n+        statusBar.show();\n+\n+        const res = new Ctx(config, extCtx, client, serverPath, statusBar);\n+\n         res.pushCleanup(client.start());\n         await client.onReady();\n+        client.onNotification(ra.status, (status) => res.setStatus(status));\n         return res;\n     }\n \n@@ -54,6 +66,35 @@ export class Ctx {\n         return this.extCtx.subscriptions;\n     }\n \n+    setStatus(status: Status) {\n+        switch (status) {\n+            case \"loading\":\n+                this.statusBar.text = \"$(sync~spin) rust-analyzer\";\n+                this.statusBar.tooltip = \"Loading the project\";\n+                this.statusBar.command = undefined;\n+                this.statusBar.color = undefined;\n+                break;\n+            case \"ready\":\n+                this.statusBar.text = \"rust-analyzer\";\n+                this.statusBar.tooltip = \"Ready\";\n+                this.statusBar.command = undefined;\n+                this.statusBar.color = undefined;\n+                break;\n+            case \"invalid\":\n+                this.statusBar.text = \"$(error) rust-analyzer\";\n+                this.statusBar.tooltip = \"Failed to load the project\";\n+                this.statusBar.command = undefined;\n+                this.statusBar.color = new vscode.ThemeColor(\"notificationsErrorIcon.foreground\");\n+                break;\n+            case \"needsReload\":\n+                this.statusBar.text = \"$(warning) rust-analyzer\";\n+                this.statusBar.tooltip = \"Click to reload\";\n+                this.statusBar.command = \"rust-analyzer.reloadWorkspace\";\n+                this.statusBar.color = new vscode.ThemeColor(\"notificationsWarningIcon.foreground\");\n+                break;\n+        }\n+    }\n+\n     pushCleanup(d: Disposable) {\n         this.extCtx.subscriptions.push(d);\n     }"}, {"sha": "bf4703239d1e21a4f7d7783cdf00eb9d6969b777", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ef76760761d17cef4ea4e8462d9ee2ca8395467/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3ef76760761d17cef4ea4e8462d9ee2ca8395467/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=3ef76760761d17cef4ea4e8462d9ee2ca8395467", "patch": "@@ -6,6 +6,9 @@ import * as lc from \"vscode-languageclient\";\n \n export const analyzerStatus = new lc.RequestType<null, string, void>(\"rust-analyzer/analyzerStatus\");\n \n+export type Status = \"loading\" | \"ready\" | \"invalid\" | \"needsReload\";\n+export const status = new lc.NotificationType<Status>(\"rust-analyzer/status\");\n+\n export const reloadWorkspace = new lc.RequestType<null, null, void>(\"rust-analyzer/reloadWorkspace\");\n \n export interface SyntaxTreeParams {"}]}