{"sha": "6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "node_id": "C_kwDOAAsO6NoAKDZmMThmMGE5ZDQ1NDhiYzg3YWZmZjFlNGMwZmU5MDgxYzM1MDAyYzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-04T10:21:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-04T10:21:40Z"}, "message": "Auto merge of #99953 - cjgillot:in-path-always, r=petrochenkov\n\nAlways create elided lifetimes, even if inferred.\n\n`PathSource` gives the context in which a path is encountered.  The same `PathSource` is used for the full path and the `QSelf` part.\n\nTherefore, we can only rely on `PathSource` to know whether typechecking will be able to infer the lifetimes, not whether we need to insert them at all.\n\nFixes https://github.com/rust-lang/rust/issues/99949", "tree": {"sha": "8663684051908c2006289035b5c910ffddab9540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8663684051908c2006289035b5c910ffddab9540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "html_url": "https://github.com/rust-lang/rust/commit/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f2243c9b6686d2314515561a80898e746015231", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2243c9b6686d2314515561a80898e746015231", "html_url": "https://github.com/rust-lang/rust/commit/2f2243c9b6686d2314515561a80898e746015231"}, {"sha": "ec3f3074a1d2f0c3f8a4fd245c79a774cf19a7ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3f3074a1d2f0c3f8a4fd245c79a774cf19a7ca", "html_url": "https://github.com/rust-lang/rust/commit/ec3f3074a1d2f0c3f8a4fd245c79a774cf19a7ca"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "dea3eaecda6e7c696c5c598c3e8e6647f957dcf6", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "patch": "@@ -1644,14 +1644,30 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 continue;\n             }\n \n-            let missing = match source {\n-                PathSource::Trait(..) | PathSource::TraitItem(..) | PathSource::Type => true,\n+            let node_ids = self.r.next_node_ids(expected_lifetimes);\n+            self.record_lifetime_res(\n+                segment_id,\n+                LifetimeRes::ElidedAnchor { start: node_ids.start, end: node_ids.end },\n+                LifetimeElisionCandidate::Ignore,\n+            );\n+\n+            let inferred = match source {\n+                PathSource::Trait(..) | PathSource::TraitItem(..) | PathSource::Type => false,\n                 PathSource::Expr(..)\n                 | PathSource::Pat\n                 | PathSource::Struct\n-                | PathSource::TupleStruct(..) => false,\n+                | PathSource::TupleStruct(..) => true,\n             };\n-            if !missing && !segment.has_generic_args {\n+            if inferred {\n+                // Do not create a parameter for patterns and expressions: type checking can infer\n+                // the appropriate lifetime for us.\n+                for id in node_ids {\n+                    self.record_lifetime_res(\n+                        id,\n+                        LifetimeRes::Infer,\n+                        LifetimeElisionCandidate::Named,\n+                    );\n+                }\n                 continue;\n             }\n \n@@ -1666,25 +1682,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             };\n             let ident = Ident::new(kw::UnderscoreLifetime, elided_lifetime_span);\n \n-            let node_ids = self.r.next_node_ids(expected_lifetimes);\n-            self.record_lifetime_res(\n-                segment_id,\n-                LifetimeRes::ElidedAnchor { start: node_ids.start, end: node_ids.end },\n-                LifetimeElisionCandidate::Ignore,\n-            );\n-\n-            if !missing {\n-                // Do not create a parameter for patterns and expressions.\n-                for id in node_ids {\n-                    self.record_lifetime_res(\n-                        id,\n-                        LifetimeRes::Infer,\n-                        LifetimeElisionCandidate::Named,\n-                    );\n-                }\n-                continue;\n-            }\n-\n             let missing_lifetime = MissingLifetime {\n                 id: node_ids.start,\n                 span: elided_lifetime_span,"}, {"sha": "b9d2711fd9cbb25c0ef4663368d2e0fc4be33120", "filename": "src/test/ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-type-relative-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f18f0a9d4548bc87afff1e4c0fe9081c35002c2/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-type-relative-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-type-relative-expression.rs?ref=6f18f0a9d4548bc87afff1e4c0fe9081c35002c2", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+struct Sqlite {}\n+\n+trait HasArguments<'q> {\n+    type Arguments;\n+}\n+\n+impl<'q> HasArguments<'q> for Sqlite {\n+    type Arguments = std::marker::PhantomData<&'q ()>;\n+}\n+\n+fn foo() {\n+    let _ = <Sqlite as HasArguments>::Arguments::default();\n+}\n+\n+fn main() {}"}]}