{"sha": "dab864098a814830dfed4b9ed6887cd2139d4bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjg2NDA5OGE4MTQ4MzBkZmVkNGI5ZWQ2ODg3Y2QyMTM5ZDRiYWQ=", "commit": {"author": {"name": "OGINO Masanori", "email": "masanori.ogino@gmail.com", "date": "2014-01-31T23:00:02Z"}, "committer": {"name": "OGINO Masanori", "email": "masanori.ogino@gmail.com", "date": "2014-01-31T23:03:15Z"}, "message": "Update the zsh completion file for rustc.\n\nSigned-off-by: OGINO Masanori <masanori.ogino@gmail.com>", "tree": {"sha": "84d4ba1bbe1b2e8722e3828d70f168ccbef48e12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d4ba1bbe1b2e8722e3828d70f168ccbef48e12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab864098a814830dfed4b9ed6887cd2139d4bad", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab864098a814830dfed4b9ed6887cd2139d4bad", "html_url": "https://github.com/rust-lang/rust/commit/dab864098a814830dfed4b9ed6887cd2139d4bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab864098a814830dfed4b9ed6887cd2139d4bad/comments", "author": {"login": "omasanori", "id": 167209, "node_id": "MDQ6VXNlcjE2NzIwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/167209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omasanori", "html_url": "https://github.com/omasanori", "followers_url": "https://api.github.com/users/omasanori/followers", "following_url": "https://api.github.com/users/omasanori/following{/other_user}", "gists_url": "https://api.github.com/users/omasanori/gists{/gist_id}", "starred_url": "https://api.github.com/users/omasanori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omasanori/subscriptions", "organizations_url": "https://api.github.com/users/omasanori/orgs", "repos_url": "https://api.github.com/users/omasanori/repos", "events_url": "https://api.github.com/users/omasanori/events{/privacy}", "received_events_url": "https://api.github.com/users/omasanori/received_events", "type": "User", "site_admin": false}, "committer": {"login": "omasanori", "id": 167209, "node_id": "MDQ6VXNlcjE2NzIwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/167209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omasanori", "html_url": "https://github.com/omasanori", "followers_url": "https://api.github.com/users/omasanori/followers", "following_url": "https://api.github.com/users/omasanori/following{/other_user}", "gists_url": "https://api.github.com/users/omasanori/gists{/gist_id}", "starred_url": "https://api.github.com/users/omasanori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omasanori/subscriptions", "organizations_url": "https://api.github.com/users/omasanori/orgs", "repos_url": "https://api.github.com/users/omasanori/repos", "events_url": "https://api.github.com/users/omasanori/events{/privacy}", "received_events_url": "https://api.github.com/users/omasanori/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a618129b842f875dac5531ce7b8385fe4fcda6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a618129b842f875dac5531ce7b8385fe4fcda6c", "html_url": "https://github.com/rust-lang/rust/commit/5a618129b842f875dac5531ce7b8385fe4fcda6c"}], "stats": {"total": 110, "additions": 70, "deletions": 40}, "files": [{"sha": "03a8712283cd79e501b074298089dbf2f038b0ac", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 70, "deletions": 40, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/dab864098a814830dfed4b9ed6887cd2139d4bad/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/dab864098a814830dfed4b9ed6887cd2139d4bad/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=dab864098a814830dfed4b9ed6887cd2139d4bad", "patch": "@@ -5,80 +5,110 @@ local -a _rustc_opts_switches _rustc_opts_lint _rustc_opts_debug\n typeset -A opt_args\n \n _rustc_opts_switches=(\n+    --android-cross-path'[The path to the Android NDK]'\n+    --ar'[Program to use for managing archives instead of the default.]'\n     --bin'[Compile an executable crate (default)]'\n     -c'[Compile and assemble, but do not link]'\n     --cfg'[Configure the compilation environment]'\n+    --crate-id'[Output the crate id and exit]'\n+    --crate-file-name'[Output the file(s) that would be written if compilation continued and exit]'\n+    --crate-name'[Output the crate name and exit]'\n+    --dep-info'[Output dependency info to <filename> after compiling]'\n+    --dylib'[Compile a dynamic library crate]'\n     --emit-llvm'[Produce an LLVM bitcode file]'\n     {-h,--help}'[Display this message]'\n     -L'[Add a directory to the library search path]'\n     --lib'[Compile a library crate]'\n     --linker'[Program to use for linking instead of the default.]'\n     --link-args'[FLAGS is a space-separated list of flags passed to the linker]'\n+    --llvm-args'[A list of arguments to pass to llvm, comma separated]'\n     --ls'[List the symbols defined by a library crate]'\n+    --no-analysis'[Parse and expand the output, but run no analysis or produce output]'\n+    --no-rpath'[Disables setting the rpath in libs/exes]'\n     --no-trans'[Run all passes except translation; no output]'\n     -O'[Equivalent to --opt-level=2]'\n     -o'[Write output to <filename>]'\n     --opt-level'[Optimize with possible levels 0-3]'\n     --out-dir'[Write output to compiler-chosen filename in <dir>]'\n     --parse-only'[Parse only; do not compile, assemble, or link]'\n+    --passes'[Comma or space separated list of pass names to use]'\n     --pretty'[Pretty-print the input instead of compiling]'\n+    --rlib'[Compile a rust library crate as an rlib file]'\n     -S'[Compile only; do not assemble or link]'\n     --save-temps'[Write intermediate files (.bc, .opt.bc, .o) in addition to normal output]'\n+    --staticlib'[Compile a static library crate]'\n     --sysroot'[Override the system root]'\n     --test'[Build a test harness]'\n     --target'[Target triple cpu-manufacturer-kernel\\[-os\\] to compile]'\n     --target-cpu'[Select target processor (llc -mcpu=help for details)]'\n     --target-feature'[Target specific attributes (llc -mattr=help for details)]'\n-    --android-cross-path'[The path to the Android NDK]'\n     {-v,--version}'[Print version info and exit]'\n )\n _rustc_opts_lint=(\n-    'path-statement[path statements with no effect]'\n-    'missing-trait-doc[detects missing documentation for traits]'\n-    'missing-struct-doc[detects missing documentation for structs]'\n+    'attribute-usage[detects bad use of attributes]'\n     'ctypes[proper use of std::libc types in foreign modules]'\n-    \"unused-mut[detect mut variables which don't need to be mutable]\"\n-    'unused-imports[imports that are never used]'\n-    'heap-memory[use of any (~ type or @ type) heap memory]'\n-    'default-methods[allow default methods]'\n-    'unused-variable[detect variables which are not used in any way]'\n     'dead-assignment[detect assignments that will never be read]'\n-    'unrecognized-lint[unrecognized lint attribute]'\n-    'type-limits[comparisons made useless by limits of the types involved]'\n-    'unused-unsafe[unnecessary use of an `unsafe` block]'\n-    'while-true[suggest using loop { } instead of while(true) { }]'\n-    'non-camel-case-types[types, variants and traits should have camel case names]'\n+    'dead-code[detect piece of code that will never be used]'\n+    'default-type-param-usage[prevents explicitly setting a type parameter with a default]'\n+    'deprecated[detects use of #\\[deprecated\\] items]'\n+    'experimental[detects use of #\\[experimental\\] items]'\n+    'heap-memory[use of any (~ type or @ type) heap memory]'\n     'managed-heap-memory[use of managed (@ type) heap memory]'\n-    'unnecessary-allocation[detects unnecessary allocations that can be eliminated]'\n+    'missing-doc[detects missing documentation for public members]'\n+    'non-camel-case-types[types, variants and traits should have camel case names]'\n+    'non-uppercase-pattern-statics[static constants in match patterns should be all caps]'\n+    'non-uppercase-statics[static constants should have uppercase identifiers]'\n     'owned-heap-memory[use of owned (~ type) heap memory]'\n+    'path-statement[path statements with no effect]'\n+    'type-limits[comparisons made useless by limits of the types involved]'\n+    'type-overflow[literal out of range for its type]'\n+    'unknown-crate-type[unknown crate type found in #\\[crate_type\\] directive]'\n+    'unknown-features[unknown features found in crate-level #\\[feature\\] directives]'\n+    'unnecessary-allocation[detects unnecessary allocations that can be eliminated]'\n+    'unnecessary-parens[`if`, `match`, `while` and `return` do not need parentheses]'\n+    'unnecessary-qualification[detects unnecessarily qualified names]'\n+    'unnecessary-typecast[detects unnecessary type casts, that can be removed]'\n+    'unreachable-code[detects unreachable code]'\n+    'unrecognized-lint[unrecognized lint attribute]'\n+    'unsafe-block[usage of an `unsafe` block]'\n+    'unstable[detects use of #\\[unstable\\] items (incl. items with no stability attribute)]'\n+    'unused-imports[imports that are never used]'\n+    'unused-must-use[unused result of an type flagged as #\\[must_use\\]]'\n+    \"unused-mut[detect mut variables which don't need to be mutable]\"\n+    'unused-result[unused result of an expression in a statement]'\n+    'unused-unsafe[unnecessary use of an `unsafe` block]'\n+    'unused-variable[detect variables which are not used in any way]'\n+    'warnings[mass-change the level for lints which produce warnings]'\n+    'while-true[suggest using `loop { }` instead of `while true { }`]'\n )\n \n _rustc_opts_debug=(\n-    'verbose:in general, enable more debug printouts'\n-    'time-passes:measure time of each rustc pass'\n-    'count-llvm-insns:count where LLVM instrs originate'\n-    'time-llvm-passes:measure time of each LLVM pass'\n-    'trans-stats:gather trans statistics'\n-    'asm-comments:generate comments into the assembly (may change behavior)'\n-    'no-verify:skip LLVM verification'\n-    'trace:emit trace logs'\n-    'coherence:perform coherence checking'\n-    'borrowck-stats:gather borrowck statistics'\n-    \"borrowck-note-pure:note where purity is req'd\"\n-    \"borrowck-note-loan:note where loans are req'd\"\n-    'no-landing-pads:omit landing pads for unwinding'\n-    'debug-llvm:enable debug output from LLVM'\n-    'count-type-sizes:count the sizes of aggregate types'\n-    'meta-stats:gather metadata statistics'\n-    'no-opt:do not optimize, even if -O is passed'\n-    'print-link-args:Print the arguments passed to the linker'\n-    'gc:Garbage collect shared data (experimental)'\n-    'jit:Execute using JIT (experimental)'\n-    'extra-debug-info:Extra debugging info (experimental)'\n-    'debug-info:Produce debug info (experimental)'\n-    'static:Use or produce static libraries or binaries (experimental)'\n-    'no-debug-borrows:do not show where borrow checks fail'\n-    'lint-llvm:Run the LLVM lint pass on the pre-optimization IR'\n+    'asm-comments[generate comments into the assembly (may change behavior)]'\n+    'borrowck-stats[gather borrowck statistics]'\n+    'count-llvm-insns[count where LLVM instrs originate]'\n+    'count-type-sizes[count the sizes of aggregate types]'\n+    'debug-info[Produce debug info (experimental)]'\n+    'debug-llvm[enable debug output from LLVM]'\n+    'extra-debug-info[Extra debugging info (experimental)]'\n+    'gc[Garbage collect shared data (experimental)]'\n+    'gen-crate-map[Force generation of a toplevel crate map]'\n+    'lto[Perform LLVM link-time optimizations]'\n+    'meta-stats[gather metadata statistics]'\n+    \"no-integrated-as[Use external assembler rather than LLVM's integrated one]\"\n+    'no-landing-pads[omit landing pads for unwinding]'\n+    'no-opt[do not optimize, even if -O is passed]'\n+    \"no-prepopulate-passes[Don't pre-populate the pass managers with a list of passes, only use the passes from --passes]\"\n+    \"no-vectorize-loops[Don't run the loop vectorization optimization passes]\"\n+    \"no-vectorize-slp[Don't run LLVM's SLP vectorization passes]\"\n+    'no-verify[skip LLVM verification]'\n+    'prefer-dynamic[Prefer dynamic linking to static linking]'\n+    'print-link-args[Print the arguments passed to the linker]'\n+    'print-llvm-passes[Prints the llvm optimization passes being run]'\n+    'soft-float[Generate software floating point library calls]'\n+    'time-llvm-passes[measure time of each LLVM pass]'\n+    'time-passes[measure time of each rustc pass]'\n+    'trans-stats[gather trans statistics]'\n+    'verbose[in general, enable more debug printouts]'\n )\n \n _rustc_opts_fun_lint(){"}]}