{"sha": "eb8d67196ca91205fd98f498485c6679f7a26324", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOGQ2NzE5NmNhOTEyMDVmZDk4ZjQ5ODQ4NWM2Njc5ZjdhMjYzMjQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "uchida@os.ecc.u-tokyo.ac.jp", "date": "2017-05-23T03:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-23T03:44:47Z"}, "message": "Merge pull request #1565 from topecongiro/issue-1563\n\nImplement vec![expr; expr] and avoid unnecessary indent in chain", "tree": {"sha": "92a4f3976da41fcc48f044f96502d2226594cd5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a4f3976da41fcc48f044f96502d2226594cd5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb8d67196ca91205fd98f498485c6679f7a26324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8d67196ca91205fd98f498485c6679f7a26324", "html_url": "https://github.com/rust-lang/rust/commit/eb8d67196ca91205fd98f498485c6679f7a26324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb8d67196ca91205fd98f498485c6679f7a26324/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068b8b3b5c92c20d5347a30a221e53d9f63a8704", "url": "https://api.github.com/repos/rust-lang/rust/commits/068b8b3b5c92c20d5347a30a221e53d9f63a8704", "html_url": "https://github.com/rust-lang/rust/commit/068b8b3b5c92c20d5347a30a221e53d9f63a8704"}, {"sha": "dc8d3aa23a19e662c5a680f0be06561f5db3a714", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8d3aa23a19e662c5a680f0be06561f5db3a714", "html_url": "https://github.com/rust-lang/rust/commit/dc8d3aa23a19e662c5a680f0be06561f5db3a714"}], "stats": {"total": 303, "additions": 219, "deletions": 84}, "files": [{"sha": "aca96774d0660d4f0272c6efcaf6ec4e736659de", "filename": "build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -16,11 +16,11 @@ fn main() {\n     writeln!(f,\n              \"const COMMIT_HASH: Option<&'static str> = {:?};\",\n              git_head_sha1())\n-            .unwrap();\n+        .unwrap();\n     writeln!(f,\n              \"const WORKTREE_CLEAN: Option<bool> = {:?};\",\n              git_tree_is_clean())\n-            .unwrap();\n+        .unwrap();\n \n     // cargo:rerun-if-changed requires one entry per individual file.\n     for entry in WalkDir::new(\"src\") {"}, {"sha": "fbc42a5d84e88ebd54f74ac8c99bffb553b6e4d5", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -126,9 +126,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         // brace.\n         (parent_shape, false)\n     } else if parent_rewrite_contains_newline {\n-        (chain_indent(context,\n-                      parent_shape.block_indent(context.config.tab_spaces())),\n-         false)\n+        (chain_indent(context, parent_shape), false)\n     } else {\n         (shape.block_indent(context.config.tab_spaces()), false)\n     };\n@@ -142,17 +140,11 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         ..nested_shape\n     };\n     let first_child_shape = if extend {\n-        let mut shape = try_opt!(parent_shape.offset_left(last_line_width(&parent_rewrite)));\n+        let first_child_shape = try_opt!(parent_shape\n+                                             .offset_left(last_line_width(&parent_rewrite)));\n         match context.config.chain_indent() {\n-            IndentStyle::Visual => shape,\n-            IndentStyle::Block => {\n-                shape.offset = shape\n-                    .offset\n-                    .checked_sub(context.config.tab_spaces())\n-                    .unwrap_or(0);\n-                shape.indent.block_indent += context.config.tab_spaces();\n-                shape\n-            }\n+            IndentStyle::Visual => first_child_shape,\n+            IndentStyle::Block => first_child_shape.block(),\n         }\n     } else {\n         other_child_shape\n@@ -181,7 +173,6 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         if rewrites.len() > 1 {\n             true\n         } else if rewrites.len() == 1 {\n-            let one_line_len = parent_rewrite.len() + first_line_width(&rewrites[0]);\n             one_line_len > shape.width\n         } else {\n             false"}, {"sha": "9c4f48bbb7e63d4d83fbc59edc1894e5e4c25f30", "filename": "src/expr.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -120,7 +120,7 @@ fn format_expr(expr: &ast::Expr,\n                                 expr_type == ExprType::SubExpression,\n                                 false,\n                                 expr.span)\n-                    .rewrite(context, shape)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::IfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n             ControlFlow::new_if(cond,\n@@ -130,7 +130,7 @@ fn format_expr(expr: &ast::Expr,\n                                 expr_type == ExprType::SubExpression,\n                                 false,\n                                 expr.span)\n-                    .rewrite(context, shape)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::Match(ref cond, ref arms) => {\n             rewrite_match(context, cond, arms, shape, expr.span)\n@@ -286,7 +286,7 @@ pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n \n                 let remaining_width = shape\n                     .width\n-                    .checked_sub(last_line_width(&result))\n+                    .checked_sub(last_line_width(&result) + suffix.len())\n                     .unwrap_or(0);\n \n                 if rhs_result.len() <= remaining_width {\n@@ -372,7 +372,7 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                              |item| item.rewrite(context, nested_shape),\n                              span.lo,\n                              span.hi)\n-            .collect::<Vec<_>>();\n+        .collect::<Vec<_>>();\n \n     if items.is_empty() {\n         if context.config.spaces_within_square_brackets() {\n@@ -716,7 +716,7 @@ impl Rewrite for ast::Stmt {\n                             },\n                             context,\n                             try_opt!(shape.sub_width(suffix.len())))\n-                        .map(|s| s + suffix)\n+                    .map(|s| s + suffix)\n             }\n             ast::StmtKind::Mac(..) |\n             ast::StmtKind::Item(..) => None,\n@@ -1012,7 +1012,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                                         false,\n                                         true,\n                                         mk_sp(else_block.span.lo, self.span.hi))\n-                            .rewrite(context, shape)\n+                        .rewrite(context, shape)\n                 }\n                 ast::ExprKind::If(ref cond, ref if_block, ref next_else_block) => {\n                     ControlFlow::new_if(cond,\n@@ -1022,7 +1022,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                                         false,\n                                         true,\n                                         mk_sp(else_block.span.lo, self.span.hi))\n-                            .rewrite(context, shape)\n+                        .rewrite(context, shape)\n                 }\n                 _ => {\n                     last_in_chain = true;\n@@ -1065,7 +1065,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                                 .as_ref()\n                                 .map_or(between_sep, |s| &**s),\n                             after_else_comment.as_ref().map_or(after_sep, |s| &**s))\n-                             .ok());\n+                         .ok());\n             result.push_str(&try_opt!(rewrite));\n         }\n \n@@ -2080,11 +2080,18 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n                               0\n                           };\n     // 1 = space between operator and rhs.\n-    let max_width = try_opt!(shape.width.checked_sub(last_line_width + 1));\n-    let rhs = ex.rewrite(context,\n-                         Shape::offset(max_width,\n-                                       shape.indent,\n-                                       shape.indent.alignment + last_line_width + 1));\n+    let orig_shape = try_opt!(shape.block_indent(0).offset_left(last_line_width + 1));\n+    let rhs = match ex.node {\n+        ast::ExprKind::Mac(ref mac) => {\n+            match rewrite_macro(mac, None, context, orig_shape, MacroPosition::Expression) {\n+                None if !context.snippet(ex.span).contains(\"\\n\") => {\n+                    context.snippet(ex.span).rewrite(context, orig_shape)\n+                }\n+                rhs @ _ => rhs,\n+            }\n+        }\n+        _ => ex.rewrite(context, orig_shape),\n+    };\n \n     fn count_line_breaks(src: &str) -> usize {\n         src.chars().filter(|&x| x == '\\n').count()\n@@ -2099,10 +2106,7 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n             // Expression did not fit on the same line as the identifier or is\n             // at least three lines big. Try splitting the line and see\n             // if that works better.\n-            let new_offset = shape.indent.block_indent(context.config);\n-            let max_width = try_opt!((shape.width + shape.indent.width())\n-                                         .checked_sub(new_offset.width()));\n-            let new_shape = Shape::legacy(max_width, new_offset);\n+            let new_shape = try_opt!(shape.block_left(context.config.tab_spaces()));\n             let new_rhs = ex.rewrite(context, new_shape);\n \n             // FIXME: DRY!\n@@ -2111,11 +2115,11 @@ pub fn rewrite_assign_rhs<S: Into<String>>(context: &RewriteContext,\n                     if count_line_breaks(orig_rhs) > count_line_breaks(replacement_rhs) + 1 ||\n                        (orig_rhs.rewrite(context, shape).is_none() &&\n                         replacement_rhs.rewrite(context, new_shape).is_some()) => {\n-                    result.push_str(&format!(\"\\n{}\", new_offset.to_string(context.config)));\n+                    result.push_str(&format!(\"\\n{}\", new_shape.indent.to_string(context.config)));\n                     result.push_str(replacement_rhs);\n                 }\n                 (None, Some(ref final_rhs)) => {\n-                    result.push_str(&format!(\"\\n{}\", new_offset.to_string(context.config)));\n+                    result.push_str(&format!(\"\\n{}\", new_shape.indent.to_string(context.config)));\n                     result.push_str(final_rhs);\n                 }\n                 (None, None) => return None,"}, {"sha": "f98cf9507e1c72151e16b03dc81a93c2d480f9fa", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -332,7 +332,7 @@ impl<'a> FmtVisitor<'a> {\n                             let suffix = if semicolon_for_expr(e) { \";\" } else { \"\" };\n \n                             e.rewrite(&self.get_context(),\n-                                         Shape::indented(self.block_indent, self.config))\n+                                      Shape::indented(self.block_indent, self.config))\n                                 .map(|s| s + suffix)\n                                 .or_else(|| Some(self.snippet(e.span)))\n                         }\n@@ -376,7 +376,7 @@ impl<'a> FmtVisitor<'a> {\n                                            enum_def.variants.is_empty(),\n                                            self.block_indent,\n                                            mk_sp(span.lo, body_start))\n-                .unwrap();\n+            .unwrap();\n         self.buffer.push_str(&generics_str);\n \n         self.last_pos = body_start;\n@@ -941,7 +941,7 @@ fn format_struct_struct(context: &RewriteContext,\n                      |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n                      context.codemap.span_after(span, \"{\"),\n                      span.hi)\n-                .collect::<Vec<_>>();\n+            .collect::<Vec<_>>();\n     // 1 = ,\n     let budget = context.config.max_width() - offset.width() + context.config.tab_spaces() - 1;\n \n@@ -1295,7 +1295,7 @@ pub fn rewrite_static(prefix: &str,\n                            lhs,\n                            expr,\n                            Shape::legacy(remaining_width, offset.block_only()))\n-                .map(|s| s + \";\")\n+            .map(|s| s + \";\")\n     } else {\n         let lhs = format!(\"{}{};\", prefix, ty_str);\n         Some(lhs)"}, {"sha": "3448f8a446a2390c0ed80918163bb723d7406401", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -266,7 +266,8 @@ pub fn write_list<I, T>(items: I, formatting: &ListFormatting) -> Option<String>\n         // Post-comments\n         if tactic != DefinitiveListTactic::Vertical && item.post_comment.is_some() {\n             let comment = item.post_comment.as_ref().unwrap();\n-            let formatted_comment = try_opt!(rewrite_comment(comment,\n+            let formatted_comment =\n+                try_opt!(rewrite_comment(comment,\n                                          true,\n                                          Shape::legacy(formatting.shape.width, Indent::empty()),\n                                          formatting.config));"}, {"sha": "a5ead34c9ec7a6459e1197d7e4ddc20793616c0d", "filename": "src/macros.rs", "status": "modified", "additions": 54, "deletions": 13, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -29,7 +29,7 @@ use syntax::util::ThinVec;\n use Shape;\n use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n-use expr::{rewrite_call, rewrite_array};\n+use expr::{rewrite_call, rewrite_array, rewrite_pair};\n use comment::{FindUncommented, contains_comment};\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n@@ -105,6 +105,7 @@ pub fn rewrite_macro(mac: &ast::Mac,\n \n     let mut parser = tts_to_parser(context.parse_session, mac.node.tts.clone());\n     let mut expr_vec = Vec::new();\n+    let mut vec_with_semi = false;\n \n     if MacroStyle::Braces != style {\n         loop {\n@@ -128,6 +129,29 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             match parser.token {\n                 Token::Eof => break,\n                 Token::Comma => (),\n+                Token::Semi => {\n+                    // Try to parse `vec![expr; expr]`\n+                    if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) {\n+                        parser.bump();\n+                        if parser.token != Token::Eof {\n+                            match parser.parse_expr() {\n+                                Ok(expr) => {\n+                                    if context.parse_session.span_diagnostic.has_errors() {\n+                                        return None;\n+                                    }\n+                                    expr_vec.push(expr);\n+                                    parser.bump();\n+                                    if parser.token == Token::Eof && expr_vec.len() == 2 {\n+                                        vec_with_semi = true;\n+                                        break;\n+                                    }\n+                                }\n+                                Err(mut e) => e.cancel(),\n+                            }\n+                        }\n+                    }\n+                    return None;\n+                }\n                 _ => return None,\n             }\n \n@@ -156,18 +180,35 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             })\n         }\n         MacroStyle::Brackets => {\n-            // Format macro invocation as array literal.\n-            let extra_offset = macro_name.len();\n-            let shape = try_opt!(shape.shrink_left(extra_offset));\n-            let rewrite =\n-                try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n-                                       mk_sp(context.codemap.span_after(mac.span,\n-                                                                        original_style.opener()),\n-                                             mac.span.hi - BytePos(1)),\n-                                       context,\n-                                       shape));\n-\n-            Some(format!(\"{}{}\", macro_name, rewrite))\n+            let mac_shape = try_opt!(shape.shrink_left(macro_name.len()));\n+            // Handle special case: `vec![expr; expr]`\n+            if vec_with_semi {\n+                let (lbr, rbr) = if context.config.spaces_within_square_brackets() {\n+                    (\"[ \", \" ]\")\n+                } else {\n+                    (\"[\", \"]\")\n+                };\n+                rewrite_pair(&*expr_vec[0],\n+                             &*expr_vec[1],\n+                             lbr,\n+                             \"; \",\n+                             rbr,\n+                             context,\n+                             mac_shape)\n+                    .map(|s| format!(\"{}{}\", macro_name, s))\n+            } else {\n+                // Format macro invocation as array literal.\n+                let rewrite =\n+                    try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n+                                           mk_sp(context.codemap.span_after(mac.span,\n+                                                                            original_style\n+                                                                                .opener()),\n+                                                 mac.span.hi - BytePos(1)),\n+                                           context,\n+                                           mac_shape));\n+\n+                Some(format!(\"{}{}\", macro_name, rewrite))\n+            }\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now."}, {"sha": "d6157cd6a29add6b7a792dd2e30b3a6c5f96cd53", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -163,7 +163,7 @@ impl<'a> FmtVisitor<'a> {\n                                                           Shape::legacy(comment_width,\n                                                                         self.block_indent),\n                                                           self.config)\n-                                                 .unwrap());\n+                                             .unwrap());\n \n                     last_wspace = None;\n                     line_start = offset + subslice.len();"}, {"sha": "afea0ddb2992425cfa06a48cc7ef2b82eeed57fe", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -293,7 +293,7 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n                                          |item| item.rewrite(context, nested_shape),\n                                          context.codemap.span_after(span, \"(\"),\n                                          span.hi - BytePos(1))\n-            .collect();\n+        .collect();\n \n     // Condense wildcard string suffix into a single ..\n     let wildcard_suffix_len = count_wildcard_suffix_len(&items);"}, {"sha": "570755d4441e9380e9846783a897bde7e151094c", "filename": "src/types.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -364,7 +364,9 @@ impl Rewrite for ast::WherePredicate {\n                 let colon = type_bound_colon(context);\n \n                 if !bound_lifetimes.is_empty() {\n-                    let lifetime_str: String = try_opt!(bound_lifetimes.iter()\n+                    let lifetime_str: String =\n+                        try_opt!(bound_lifetimes\n+                                     .iter()\n                                      .map(|lt| lt.rewrite(context, shape))\n                                      .intersperse(Some(\", \".to_string()))\n                                      .collect());\n@@ -376,14 +378,17 @@ impl Rewrite for ast::WherePredicate {\n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(bounds.iter()\n-                                                    .map(|ty_bound| {\n-                                                        ty_bound.rewrite(context,\n-                                                                         Shape::legacy(budget,\n-                                                                         shape.indent + used_width))\n-                                                    })\n-                                                    .intersperse(Some(joiner.to_string()))\n-                                                    .collect());\n+                    let bounds_str: String =\n+                        try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| {\n+                                              ty_bound.rewrite(context,\n+                                                               Shape::legacy(budget,\n+                                                                             shape.indent +\n+                                                                             used_width))\n+                                          })\n+                                     .intersperse(Some(joiner.to_string()))\n+                                     .collect());\n \n                     if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n                         format!(\"for< {} > {}{}{}\",\n@@ -401,14 +406,17 @@ impl Rewrite for ast::WherePredicate {\n                     };\n                     let used_width = type_str.len() + colon.len();\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(bounds.iter()\n-                                                    .map(|ty_bound| {\n-                                                        ty_bound.rewrite(context,\n-                                                                         Shape::legacy(budget,\n-                                                                         shape.indent + used_width))\n-                                                    })\n-                                                    .intersperse(Some(joiner.to_string()))\n-                                                    .collect());\n+                    let bounds_str: String =\n+                        try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| {\n+                                              ty_bound.rewrite(context,\n+                                                               Shape::legacy(budget,\n+                                                                             shape.indent +\n+                                                                             used_width))\n+                                          })\n+                                     .intersperse(Some(joiner.to_string()))\n+                                     .collect());\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }"}, {"sha": "96327ef96a75db02ad0563218d7da00af7a064eb", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -282,10 +282,10 @@ impl<'a> FmtVisitor<'a> {\n                                            item.span,\n                                            indent,\n                                            None)\n-                            .map(|s| match *def {\n-                                     ast::VariantData::Tuple(..) => s + \";\",\n-                                     _ => s,\n-                                 })\n+                        .map(|s| match *def {\n+                                 ast::VariantData::Tuple(..) => s + \";\",\n+                                 _ => s,\n+                             })\n                 };\n                 self.push_rewrite(item.span, rewrite);\n             }"}, {"sha": "35030189b8bf359379b840b39261b95df899b5e1", "filename": "tests/source/configs-fn_call_style-block.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_call_style-block.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -15,3 +15,33 @@ impl Foo {\n         }\n     }\n }\n+\n+fn issue1420() {\n+    given(\n+        r#\"\n+        # Getting started\n+        ...\n+    \"#,\n+    )\n+        .running(waltz)\n+}\n+\n+// #1563\n+fn query(conn: &Connection) -> Result<()> {\n+    conn.query_row(\n+        r#\"\n+            SELECT title, date\n+            FROM posts,\n+            WHERE DATE(date) = $1\n+        \"#,\n+        &[],\n+        |row| {\n+            Post {\n+                title: row.get(0),\n+                date: row.get(1),\n+            }\n+        },\n+    )?;\n+\n+    Ok(())\n+}"}, {"sha": "b83f74c47d536a348bb8848d9c3cf349af07c1b7", "filename": "tests/source/macros.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -34,6 +34,19 @@ fn main() {\n     a,   \n     ];\n     \n+    vec![a; b];\n+    vec!(a; b);\n+    vec!{a; b};\n+\n+    vec![a, b; c];\n+    vec![a; b, c];\n+\n+    vec![a; (|x| { let y = x + 1; let z = y + 1; z })(2)];\n+    vec![a; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx];\n+    vec![a; unsafe {\n+        x + 1\n+    }];\n+\n     unknown_bracket_macro__comma_should_not_be_stripped![\n     a,\n     ];"}, {"sha": "d7f65635379e0aaaa950b530e9a6838dfb973193", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -28,3 +28,33 @@ impl Foo {\n         }\n     }\n }\n+\n+fn issue1420() {\n+    given(\n+        r#\"\n+        # Getting started\n+        ...\n+    \"#\n+    )\n+        .running(waltz)\n+}\n+\n+// #1563\n+fn query(conn: &Connection) -> Result<()> {\n+    conn.query_row(\n+        r#\"\n+            SELECT title, date\n+            FROM posts,\n+            WHERE DATE(date) = $1\n+        \"#,\n+        &[],\n+        |row| {\n+            Post {\n+                title: row.get(0),\n+                date: row.get(1),\n+            }\n+        },\n+    )?;\n+\n+    Ok(())\n+}"}, {"sha": "c19bb242ca3b803cbe3eb7a7122c96a33e054a5b", "filename": "tests/target/macros.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -38,6 +38,23 @@ fn main() {\n     // Trailing spaces after a comma\n     vec![a];\n \n+    vec![a; b];\n+    vec![a; b];\n+    vec![a; b];\n+\n+    vec![a, b; c];\n+    vec![a; b, c];\n+\n+    vec![a;\n+         (|x| {\n+              let y = x + 1;\n+              let z = y + 1;\n+              z\n+          })(2)];\n+    vec![a;\n+         xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx];\n+    vec![a; unsafe { x + 1 }];\n+\n     unknown_bracket_macro__comma_should_not_be_stripped![\n     a,\n     ];"}, {"sha": "09df7ebd55fdf7e997e5008bca1cc464ed4db5b5", "filename": "tests/target/match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8d67196ca91205fd98f498485c6679f7a26324/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=eb8d67196ca91205fd98f498485c6679f7a26324", "patch": "@@ -158,19 +158,19 @@ fn issue355() {\n     match mac {\n         a => println!(\"a\", b),\n         b => vec![1, 2],\n-        c => vec!(3; 4),\n+        c => vec![3; 4],\n         d => println!(\"a\", b),\n         e => vec![1, 2],\n-        f => vec!(3; 4),\n+        f => vec![3; 4],\n         h => println!(\"a\", b), // h comment\n         i => vec![1, 2], // i comment\n-        j => vec!(3; 4), // j comment\n+        j => vec![3; 4], // j comment\n         // k comment\n         k => println!(\"a\", b),\n         // l comment\n         l => vec![1, 2],\n         // m comment\n-        m => vec!(3; 4),\n+        m => vec![3; 4],\n         // Rewrite splits macro\n         nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => {\n             println!(\"a\", b)\n@@ -182,7 +182,7 @@ fn issue355() {\n         // Macro support fails to recognise this macro as splitable\n         // We push the whole expr to a new line, TODO split this macro as well\n         pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp => {\n-            vec!(3; 4)\n+            vec![3; 4]\n         }\n         // q, r and s: Rewrite splits match arm\n         qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq => {\n@@ -192,19 +192,19 @@ fn issue355() {\n             vec![1, 2]\n         }\n         ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss => {\n-            vec!(3; 4)\n+            vec![3; 4]\n         }\n         // Funky bracketing styles\n         t => println!{\"a\", b},\n         u => vec![1, 2],\n-        v => vec!{3; 4},\n+        v => vec![3; 4],\n         w => println![\"a\", b],\n         x => vec![1, 2],\n         y => vec![3; 4],\n         // Brackets with comments\n         tc => println!{\"a\", b}, // comment\n         uc => vec![1, 2], // comment\n-        vc => vec!{3; 4}, // comment\n+        vc => vec![3; 4], // comment\n         wc => println![\"a\", b], // comment\n         xc => vec![1, 2], // comment\n         yc => vec![3; 4], // comment"}]}