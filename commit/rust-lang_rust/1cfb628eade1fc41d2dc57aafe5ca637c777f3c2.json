{"sha": "1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZmI2MjhlYWRlMWZjNDFkMmRjNTdhYWZlNWNhNjM3Yzc3N2YzYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-19T06:51:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-19T06:51:18Z"}, "message": "Auto merge of #51383 - Zoxc:parallel-stuff, r=nikomatsakis\n\nRun some stuff in parallel\n\nRequires https://github.com/rust-lang/rust/pull/50699 to actually work correctly.\n\nr? @nikomatsakis", "tree": {"sha": "e097eb4c9992dc64a71097f4a331e3f5279403a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e097eb4c9992dc64a71097f4a331e3f5279403a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "html_url": "https://github.com/rust-lang/rust/commit/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed39523406fea9d4c82f87f4ac9ad92388084123", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed39523406fea9d4c82f87f4ac9ad92388084123", "html_url": "https://github.com/rust-lang/rust/commit/ed39523406fea9d4c82f87f4ac9ad92388084123"}, {"sha": "fe1cb88c08737a73e98f94d077bb23064de18106", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1cb88c08737a73e98f94d077bb23064de18106", "html_url": "https://github.com/rust-lang/rust/commit/fe1cb88c08737a73e98f94d077bb23064de18106"}], "stats": {"total": 146, "additions": 103, "deletions": 43}, "files": [{"sha": "4f5f0c9d740cc8c0429b43d1861af779f5a1ec5d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -44,7 +44,7 @@ use std::cmp::{self, Ordering};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{self, Lrc, ParallelIterator, par_iter};\n use std::slice;\n use std::vec::IntoIter;\n use std::mem;\n@@ -2436,6 +2436,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 .map(move |&body_id| self.hir.body_owner_def_id(body_id))\n     }\n \n+    pub fn par_body_owners<F: Fn(DefId) + sync::Sync + sync::Send>(self, f: F) {\n+        par_iter(&self.hir.krate().body_ids).for_each(|&body_id| {\n+            f(self.hir.body_owner_def_id(body_id))\n+        });\n+    }\n+\n     pub fn expr_span(self, id: NodeId) -> Span {\n         match self.hir.find(id) {\n             Some(hir_map::NodeExpr(e)) => {"}, {"sha": "684fd10c8c652df33fa0f9069c59e05249d52027", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -67,9 +67,9 @@ pub struct LoanDataFlowOperator;\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for body_owner_def_id in tcx.body_owners() {\n+    tcx.par_body_owners(|body_owner_def_id| {\n         tcx.borrowck(body_owner_def_id);\n-    }\n+    });\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "a5a20af0e4e4ae880558ce2a5bbd653984987c65", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -17,6 +17,8 @@\n #![feature(from_ref)]\n #![feature(quote)]\n \n+#![recursion_limit=\"256\"]\n+\n #[macro_use] extern crate log;\n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "b82fe3ec60c3b6fcc09bb7c72129072dfcafc413", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -26,6 +26,8 @@\n //!\n //! `MTLock` is a mutex which disappears if cfg!(parallel_queries) is false.\n //!\n+//! `MTRef` is a immutable refernce if cfg!(parallel_queries), and an mutable reference otherwise.\n+//!\n //! `rustc_erase_owner!` erases a OwningRef owner into Erased or Erased + Send + Sync\n //! depending on the value of cfg!(parallel_queries).\n \n@@ -126,6 +128,8 @@ cfg_if! {\n             }\n         }\n \n+        pub type MTRef<'a, T> = &'a mut T;\n+\n         #[derive(Debug)]\n         pub struct MTLock<T>(T);\n \n@@ -151,13 +155,8 @@ cfg_if! {\n             }\n \n             #[inline(always)]\n-            pub fn borrow(&self) -> &T {\n-                &self.0\n-            }\n-\n-            #[inline(always)]\n-            pub fn borrow_mut(&self) -> &T {\n-                &self.0\n+            pub fn lock_mut(&mut self) -> &mut T {\n+                &mut self.0\n             }\n         }\n \n@@ -221,7 +220,37 @@ cfg_if! {\n         pub use std::sync::Arc as Lrc;\n         pub use std::sync::Weak as Weak;\n \n-        pub use self::Lock as MTLock;\n+        pub type MTRef<'a, T> = &'a T;\n+\n+        #[derive(Debug)]\n+        pub struct MTLock<T>(Lock<T>);\n+\n+        impl<T> MTLock<T> {\n+            #[inline(always)]\n+            pub fn new(inner: T) -> Self {\n+                MTLock(Lock::new(inner))\n+            }\n+\n+            #[inline(always)]\n+            pub fn into_inner(self) -> T {\n+                self.0.into_inner()\n+            }\n+\n+            #[inline(always)]\n+            pub fn get_mut(&mut self) -> &mut T {\n+                self.0.get_mut()\n+            }\n+\n+            #[inline(always)]\n+            pub fn lock(&self) -> LockGuard<T> {\n+                self.0.lock()\n+            }\n+\n+            #[inline(always)]\n+            pub fn lock_mut(&self) -> LockGuard<T> {\n+                self.lock()\n+            }\n+        }\n \n         use parking_lot::Mutex as InnerLock;\n         use parking_lot::RwLock as InnerRwLock;"}, {"sha": "c18a089268659e06668c04083748f609239539f9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -1272,11 +1272,9 @@ where\n \n             time(sess, \"borrow checking\", || borrowck::check_crate(tcx));\n \n-            time(sess, \"MIR borrow checking\", || {\n-                for def_id in tcx.body_owners() {\n-                    tcx.mir_borrowck(def_id);\n-                }\n-            });\n+            time(sess,\n+                 \"MIR borrow checking\",\n+                 || tcx.par_body_owners(|def_id| { tcx.mir_borrowck(def_id); }));\n \n             time(sess, \"dumping chalk-like clauses\", || {\n                 rustc_traits::lowering::dump_program_clauses(tcx);"}, {"sha": "3839c133a6eb22692d99b1bd8b4597257299c184", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -17,6 +17,8 @@\n #![feature(fs_read_write)]\n #![feature(specialization)]\n \n+#![recursion_limit=\"256\"]\n+\n extern crate graphviz;\n #[macro_use] extern crate rustc;\n extern crate rustc_data_structures;"}, {"sha": "dcef0c662c3a1164ca53bbf87b24fa9f07d68400", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -13,6 +13,7 @@ use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::util::common::time;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::join;\n use rustc_serialize::Encodable as RustcEncodable;\n use rustc_serialize::opaque::Encoder;\n use std::io::{self, Cursor};\n@@ -33,23 +34,28 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n             return;\n         }\n \n-        time(sess, \"persist query result cache\", || {\n-            save_in(sess,\n-                    query_cache_path(sess),\n-                    |e| encode_query_cache(tcx, e));\n-        });\n+        let query_cache_path = query_cache_path(sess);\n+        let dep_graph_path = dep_graph_path(sess);\n \n-        if tcx.sess.opts.debugging_opts.incremental_queries {\n+        join(move || {\n+            if tcx.sess.opts.debugging_opts.incremental_queries {\n+                time(sess, \"persist query result cache\", || {\n+                    save_in(sess,\n+                            query_cache_path,\n+                            |e| encode_query_cache(tcx, e));\n+                });\n+            }\n+        }, || {\n             time(sess, \"persist dep-graph\", || {\n                 save_in(sess,\n-                        dep_graph_path(sess),\n+                        dep_graph_path,\n                         |e| {\n                             time(sess, \"encode dep-graph\", || {\n                                 encode_dep_graph(tcx, e)\n                             })\n                         });\n             });\n-        }\n+        });\n \n         dirty_clean::check_dirty_clean_annotations(tcx);\n     })"}, {"sha": "dc0d0b244633f28de71e578dbd136b23c9a3d5f5", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -34,7 +34,10 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(specialization)]\n #![feature(try_trait)]\n \n+#![recursion_limit=\"256\"]\n+\n extern crate arena;\n+\n #[macro_use]\n extern crate bitflags;\n #[macro_use] extern crate log;"}, {"sha": "96aeb969d89f96eb20f367b49609748498373db2", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -207,10 +207,12 @@ use rustc::mir::interpret::{Scalar, GlobalId, AllocType};\n \n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n+use rustc::util::common::time;\n \n use monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n+use rustc_data_structures::sync::{MTRef, MTLock, ParallelIterator, par_iter};\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum MonoItemCollectionMode {\n@@ -298,22 +300,32 @@ pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                           mode: MonoItemCollectionMode)\n                                           -> (FxHashSet<MonoItem<'tcx>>,\n                                                      InliningMap<'tcx>) {\n-    let roots = collect_roots(tcx, mode);\n+    let roots = time(tcx.sess, \"collecting roots\", || {\n+        collect_roots(tcx, mode)\n+    });\n \n     debug!(\"Building mono item graph, beginning at roots\");\n-    let mut visited = FxHashSet();\n-    let mut recursion_depths = DefIdMap();\n-    let mut inlining_map = InliningMap::new();\n-\n-    for root in roots {\n-        collect_items_rec(tcx,\n-                          root,\n-                          &mut visited,\n-                          &mut recursion_depths,\n-                          &mut inlining_map);\n+\n+    let mut visited = MTLock::new(FxHashSet());\n+    let mut inlining_map = MTLock::new(InliningMap::new());\n+\n+    {\n+        let visited: MTRef<'_, _> = &mut visited;\n+        let inlining_map: MTRef<'_, _> = &mut inlining_map;\n+\n+        time(tcx.sess, \"collecting mono items\", || {\n+            par_iter(roots).for_each(|root| {\n+                let mut recursion_depths = DefIdMap();\n+                collect_items_rec(tcx,\n+                                root,\n+                                visited,\n+                                &mut recursion_depths,\n+                                inlining_map);\n+            });\n+        });\n     }\n \n-    (visited, inlining_map)\n+    (visited.into_inner(), inlining_map.into_inner())\n }\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n@@ -354,10 +366,10 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n // Collect all monomorphized items reachable from `starting_point`\n fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    starting_point: MonoItem<'tcx>,\n-                                   visited: &mut FxHashSet<MonoItem<'tcx>>,\n+                                   visited: MTRef<'_, MTLock<FxHashSet<MonoItem<'tcx>>>>,\n                                    recursion_depths: &mut DefIdMap<usize>,\n-                                   inlining_map: &mut InliningMap<'tcx>) {\n-    if !visited.insert(starting_point.clone()) {\n+                                   inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>) {\n+    if !visited.lock_mut().insert(starting_point.clone()) {\n         // We've been here already, no need to search again.\n         return;\n     }\n@@ -428,7 +440,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              caller: MonoItem<'tcx>,\n                              callees: &[MonoItem<'tcx>],\n-                             inlining_map: &mut InliningMap<'tcx>) {\n+                             inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>) {\n     let is_inlining_candidate = |mono_item: &MonoItem<'tcx>| {\n         mono_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n     };\n@@ -438,7 +450,7 @@ fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              (*mono_item, is_inlining_candidate(mono_item))\n                           });\n \n-    inlining_map.record_accesses(caller, accesses);\n+    inlining_map.lock_mut().record_accesses(caller, accesses);\n }\n \n fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "b70b61d191594f0baa9c8e2c6b4ee983a5b7de33", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -702,9 +702,9 @@ fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum\n {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     Ok(tcx.sess.track_errors(|| {\n-        for body_owner_def_id in tcx.body_owners() {\n+        tcx.par_body_owners(|body_owner_def_id| {\n             ty::query::queries::typeck_tables_of::ensure(tcx, body_owner_def_id);\n-        }\n+        });\n     })?)\n }\n "}, {"sha": "80f57adf580bfc6b5743025a4a812c2c14effd55", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfb628eade1fc41d2dc57aafe5ca637c777f3c2/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=1cfb628eade1fc41d2dc57aafe5ca637c777f3c2", "patch": "@@ -83,6 +83,8 @@ This API is completely unstable and subject to change.\n #![feature(slice_sort_by_cached_key)]\n #![feature(never_type)]\n \n+#![recursion_limit=\"256\"]\n+\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n extern crate syntax_pos;"}]}