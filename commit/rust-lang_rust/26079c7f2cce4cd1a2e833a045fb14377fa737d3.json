{"sha": "26079c7f2cce4cd1a2e833a045fb14377fa737d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MDc5YzdmMmNjZTRjZDFhMmU4MzNhMDQ1ZmIxNDM3N2ZhNzM3ZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-01T18:57:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-01T18:57:55Z"}, "message": "Merge #4167\n\n4167: Filter out code actions if unsupported by the client and advertise our capabilities r=matklad a=kjeremy\n\nThis PR does three things:\r\n1. If the client does not support `CodeActionKind` this will filter the results and only send `Command[]` back.\r\n2. Correctly advertises to the client that the server supports `CodeActionKind`. This may cause clients to not request code actions if they are checking for the provider to be `true` (or implement LSP < 3.8) in the caps but I will fix that in a followup PR.\r\n3. Marks most CodeActions as <strike>\"refactor\" so that they show up in the menu in vscode.</strike>`\"\"`.\r\n\r\nPart of #144\r\n#4147 \r\n#2833  \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "07da881c1daeb65ea8e8683c367acc56e23cf322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07da881c1daeb65ea8e8683c367acc56e23cf322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26079c7f2cce4cd1a2e833a045fb14377fa737d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerHEzCRBK7hj4Ov3rIwAAdHIIALAokEYuEsmKWcVFeUI58wKJ\nPedmMtBuRmi/zjREeB7z0urvI1Nd4q5W9NFJ0hmckLjlLmDC8Wsyk7DU+MoAt8hv\nCKVBfOB7qJoumyvLD88zS7jCH4uLC8+oJSyz2aX+VpjaThBDQ35+mcZeqtX6+dt2\nLIkrCoCZ/1l7L47o5khv+x9D59RSCZZlHBNuXDNDqcu8nID22QfEt8ftTVZ9OSC7\n5nLguaqWkkUhCDkSOxtx6EVatiFOizA0VR+TxU5BqSp4VpcCNdKL7JDFGkxSCMsc\naVNsqydcpcvEZVtsoi28hr7dpt50AdfJNgOjCRmiLdqqC7yAaNxjSzskgkB62Hc=\n=9Ny2\n-----END PGP SIGNATURE-----\n", "payload": "tree 07da881c1daeb65ea8e8683c367acc56e23cf322\nparent 4d33cdcfb2e06088c8bccc57565224f8a377d899\nparent 99826dab153feffc8fe0d80600d9e812824d67b2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588359475 +0000\ncommitter GitHub <noreply@github.com> 1588359475 +0000\n\nMerge #4167\n\n4167: Filter out code actions if unsupported by the client and advertise our capabilities r=matklad a=kjeremy\n\nThis PR does three things:\r\n1. If the client does not support `CodeActionKind` this will filter the results and only send `Command[]` back.\r\n2. Correctly advertises to the client that the server supports `CodeActionKind`. This may cause clients to not request code actions if they are checking for the provider to be `true` (or implement LSP < 3.8) in the caps but I will fix that in a followup PR.\r\n3. Marks most CodeActions as <strike>\"refactor\" so that they show up in the menu in vscode.</strike>`\"\"`.\r\n\r\nPart of #144\r\n#4147 \r\n#2833  \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26079c7f2cce4cd1a2e833a045fb14377fa737d3", "html_url": "https://github.com/rust-lang/rust/commit/26079c7f2cce4cd1a2e833a045fb14377fa737d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26079c7f2cce4cd1a2e833a045fb14377fa737d3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d33cdcfb2e06088c8bccc57565224f8a377d899", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d33cdcfb2e06088c8bccc57565224f8a377d899", "html_url": "https://github.com/rust-lang/rust/commit/4d33cdcfb2e06088c8bccc57565224f8a377d899"}, {"sha": "99826dab153feffc8fe0d80600d9e812824d67b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/99826dab153feffc8fe0d80600d9e812824d67b2", "html_url": "https://github.com/rust-lang/rust/commit/99826dab153feffc8fe0d80600d9e812824d67b2"}], "stats": {"total": 69, "additions": 51, "deletions": 18}, "files": [{"sha": "c0d3209262c9951a0025f8d69113184469b2cf39", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=26079c7f2cce4cd1a2e833a045fb14377fa737d3", "patch": "@@ -3,13 +3,13 @@\n use crate::semantic_tokens;\n \n use lsp_types::{\n-    CallHierarchyServerCapability, CodeActionProviderCapability, CodeLensOptions,\n-    CompletionOptions, DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n-    ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n-    SelectionRangeProviderCapability, SemanticTokensDocumentProvider, SemanticTokensLegend,\n-    SemanticTokensOptions, ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability,\n-    TextDocumentSyncKind, TextDocumentSyncOptions, TypeDefinitionProviderCapability,\n-    WorkDoneProgressOptions,\n+    CallHierarchyServerCapability, CodeActionOptions, CodeActionProviderCapability,\n+    CodeLensOptions, CompletionOptions, DocumentOnTypeFormattingOptions,\n+    FoldingRangeProviderCapability, ImplementationProviderCapability, RenameOptions,\n+    RenameProviderCapability, SaveOptions, SelectionRangeProviderCapability,\n+    SemanticTokensDocumentProvider, SemanticTokensLegend, SemanticTokensOptions,\n+    ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n+    TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -40,7 +40,20 @@ pub fn server_capabilities() -> ServerCapabilities {\n         document_highlight_provider: Some(true),\n         document_symbol_provider: Some(true),\n         workspace_symbol_provider: Some(true),\n-        code_action_provider: Some(CodeActionProviderCapability::Simple(true)),\n+        code_action_provider: Some(CodeActionProviderCapability::Options(CodeActionOptions {\n+            // Advertise support for all built-in CodeActionKinds\n+            code_action_kinds: Some(vec![\n+                String::new(),\n+                lsp_types::code_action_kind::QUICKFIX.to_string(),\n+                lsp_types::code_action_kind::REFACTOR.to_string(),\n+                lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n+                lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n+                lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n+                lsp_types::code_action_kind::SOURCE.to_string(),\n+                lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n+            ]),\n+            work_done_progress_options: Default::default(),\n+        })),\n         code_lens_provider: Some(CodeLensOptions { resolve_provider: Some(true) }),\n         document_formatting_provider: Some(true),\n         document_range_formatting_provider: None,"}, {"sha": "177da94cc9b6e5870e187761196d8d7a0aa3ca23", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=26079c7f2cce4cd1a2e833a045fb14377fa737d3", "patch": "@@ -70,6 +70,7 @@ pub struct ClientCapsConfig {\n     pub location_link: bool,\n     pub line_folding_only: bool,\n     pub hierarchical_symbols: bool,\n+    pub code_action_literals: bool,\n }\n \n impl Default for Config {\n@@ -221,6 +222,11 @@ impl Config {\n         {\n             self.client_caps.hierarchical_symbols = value\n         }\n+        if let Some(value) =\n+            caps.code_action.as_ref().and_then(|it| Some(it.code_action_literal_support.is_some()))\n+        {\n+            self.client_caps.code_action_literals = value;\n+        }\n         self.completion.allow_snippets(false);\n         if let Some(completion) = &caps.completion {\n             if let Some(completion_item) = &completion.completion_item {"}, {"sha": "0f623949ecb84432808ec69d7e16fe7426273fdd", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=26079c7f2cce4cd1a2e833a045fb14377fa737d3", "patch": "@@ -19,8 +19,7 @@ use lsp_types::{\n     TextEdit, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    Assist, AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n-    SearchScope,\n+    Assist, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextSize};\n@@ -702,15 +701,9 @@ fn create_single_code_action(assist: Assist, world: &WorldSnapshot) -> Result<Co\n         arguments: Some(vec![arg]),\n     };\n \n-    let kind = match assist.id {\n-        AssistId(\"introduce_variable\") => Some(\"refactor.extract.variable\".to_string()),\n-        AssistId(\"add_custom_impl\") => Some(\"refactor.rewrite.add_custom_impl\".to_string()),\n-        _ => None,\n-    };\n-\n     Ok(CodeAction {\n         title,\n-        kind,\n+        kind: Some(String::new()),\n         diagnostics: None,\n         edit: None,\n         command: Some(command),\n@@ -812,6 +805,23 @@ pub fn handle_code_action(\n         }\n     }\n \n+    // If the client only supports commands then filter the list\n+    // and remove and actions that depend on edits.\n+    if !world.config.client_caps.code_action_literals {\n+        // FIXME: use drain_filter once it hits stable.\n+        res = res\n+            .into_iter()\n+            .filter_map(|it| match it {\n+                cmd @ lsp_types::CodeActionOrCommand::Command(_) => Some(cmd),\n+                lsp_types::CodeActionOrCommand::CodeAction(action) => match action.command {\n+                    Some(cmd) if action.edit.is_none() => {\n+                        Some(lsp_types::CodeActionOrCommand::Command(cmd))\n+                    }\n+                    _ => None,\n+                },\n+            })\n+            .collect();\n+    }\n     Ok(Some(res))\n }\n "}, {"sha": "8d47ee4f64c48b90e645c94c01ec8475db466464", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26079c7f2cce4cd1a2e833a045fb14377fa737d3/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=26079c7f2cce4cd1a2e833a045fb14377fa737d3", "patch": "@@ -77,7 +77,11 @@ impl<'a> Project<'a> {\n         let roots = self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect();\n \n         let mut config = Config {\n-            client_caps: ClientCapsConfig { location_link: true, ..Default::default() },\n+            client_caps: ClientCapsConfig {\n+                location_link: true,\n+                code_action_literals: true,\n+                ..Default::default()\n+            },\n             with_sysroot: self.with_sysroot,\n             ..Config::default()\n         };"}]}