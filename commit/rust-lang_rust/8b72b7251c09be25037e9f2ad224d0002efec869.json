{"sha": "8b72b7251c09be25037e9f2ad224d0002efec869", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNzJiNzI1MWMwOWJlMjUwMzdlOWYyYWQyMjRkMDAwMmVmZWM4Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T16:24:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T16:24:41Z"}, "message": "Auto merge of #4994 - bradsherman:new_lint_gen, r=flip1995\n\nAutogenerate new lints\n\nAdd option in clippy_dev to automatically generate boilerplate code for adding new lints\n\nexample:\n\n`./util/dev new_lint --name=iter_nth_zero --type=late`\n\nFixes #4942\n\nchangelog: none", "tree": {"sha": "991e7d792dd0b21409652a46792988d4753d9451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991e7d792dd0b21409652a46792988d4753d9451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b72b7251c09be25037e9f2ad224d0002efec869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b72b7251c09be25037e9f2ad224d0002efec869", "html_url": "https://github.com/rust-lang/rust/commit/8b72b7251c09be25037e9f2ad224d0002efec869", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b72b7251c09be25037e9f2ad224d0002efec869/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d90f6a57925d204efb21b3f6d9726d6674f9bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d90f6a57925d204efb21b3f6d9726d6674f9bd", "html_url": "https://github.com/rust-lang/rust/commit/a8d90f6a57925d204efb21b3f6d9726d6674f9bd"}, {"sha": "32337a9b58599a48d7492ff68c63c918b57de78a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32337a9b58599a48d7492ff68c63c918b57de78a", "html_url": "https://github.com/rust-lang/rust/commit/32337a9b58599a48d7492ff68c63c918b57de78a"}], "stats": {"total": 413, "additions": 381, "deletions": 32}, "files": [{"sha": "58b4f87e87275564cf39643ac46b36081192e210", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=8b72b7251c09be25037e9f2ad224d0002efec869", "patch": "@@ -4,6 +4,7 @@ use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n \n mod fmt;\n+mod new_lint;\n mod stderr_length_check;\n \n #[derive(PartialEq)]\n@@ -51,6 +52,47 @@ fn main() {\n                         .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n                 ),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"new_lint\")\n+                .about(\"Create new lint and run util/dev update_lints\")\n+                .arg(\n+                    Arg::with_name(\"pass\")\n+                        .short(\"p\")\n+                        .long(\"pass\")\n+                        .help(\"Specify whether the lint runs during the early or late pass\")\n+                        .takes_value(true)\n+                        .possible_values(&[\"early\", \"late\"])\n+                        .required(true),\n+                )\n+                .arg(\n+                    Arg::with_name(\"name\")\n+                        .short(\"n\")\n+                        .long(\"name\")\n+                        .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n+                        .takes_value(true)\n+                        .required(true),\n+                )\n+                .arg(\n+                    Arg::with_name(\"category\")\n+                        .short(\"c\")\n+                        .long(\"category\")\n+                        .help(\"What category the lint belongs to\")\n+                        .default_value(\"nursery\")\n+                        .possible_values(&[\n+                            \"style\",\n+                            \"correctness\",\n+                            \"complexity\",\n+                            \"perf\",\n+                            \"pedantic\",\n+                            \"restriction\",\n+                            \"cargo\",\n+                            \"nursery\",\n+                            \"internal\",\n+                            \"internal_warn\",\n+                        ])\n+                        .takes_value(true),\n+                ),\n+        )\n         .arg(\n             Arg::with_name(\"limit-stderr-length\")\n                 .long(\"limit-stderr-length\")\n@@ -75,6 +117,16 @@ fn main() {\n                 update_lints(&UpdateMode::Change);\n             }\n         },\n+        (\"new_lint\", Some(matches)) => {\n+            match new_lint::create(\n+                matches.value_of(\"pass\"),\n+                matches.value_of(\"name\"),\n+                matches.value_of(\"category\"),\n+            ) {\n+                Ok(_) => update_lints(&UpdateMode::Change),\n+                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n+            }\n+        },\n         _ => {},\n     }\n }"}, {"sha": "c5733be45ebab757f65aa05e4c972fce5ebfea00", "filename": "clippy_dev/src/new_lint.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=8b72b7251c09be25037e9f2ad224d0002efec869", "patch": "@@ -0,0 +1,182 @@\n+use std::fs::{File, OpenOptions};\n+use std::io;\n+use std::io::prelude::*;\n+use std::io::ErrorKind;\n+use std::path::{Path, PathBuf};\n+\n+pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> Result<(), io::Error> {\n+    let pass = pass.expect(\"`pass` argument is validated by clap\");\n+    let lint_name = lint_name.expect(\"`name` argument is validated by clap\");\n+    let category = category.expect(\"`category` argument is validated by clap\");\n+\n+    match open_files(lint_name) {\n+        Ok((mut test_file, mut lint_file)) => {\n+            let (pass_type, pass_import, context_import) = match pass {\n+                \"early\" => (\"EarlyLintPass\", \"use syntax::ast::*;\", \"EarlyContext\"),\n+                \"late\" => (\"LateLintPass\", \"use rustc_hir::*;\", \"LateContext\"),\n+                _ => {\n+                    unreachable!(\"`pass_type` should only ever be `early` or `late`!\");\n+                },\n+            };\n+\n+            let camel_case_name = to_camel_case(lint_name);\n+\n+            if let Err(e) = test_file.write_all(get_test_file_contents(lint_name).as_bytes()) {\n+                return Err(io::Error::new(\n+                    ErrorKind::Other,\n+                    format!(\"Could not write to test file: {}\", e),\n+                ));\n+            };\n+\n+            if let Err(e) = lint_file.write_all(\n+                get_lint_file_contents(\n+                    pass_type,\n+                    lint_name,\n+                    &camel_case_name,\n+                    category,\n+                    pass_import,\n+                    context_import,\n+                )\n+                .as_bytes(),\n+            ) {\n+                return Err(io::Error::new(\n+                    ErrorKind::Other,\n+                    format!(\"Could not write to lint file: {}\", e),\n+                ));\n+            }\n+            Ok(())\n+        },\n+        Err(e) => Err(io::Error::new(\n+            ErrorKind::Other,\n+            format!(\"Unable to create lint: {}\", e),\n+        )),\n+    }\n+}\n+\n+fn open_files(lint_name: &str) -> Result<(File, File), io::Error> {\n+    let project_root = project_root()?;\n+\n+    let test_file_path = project_root.join(\"tests\").join(\"ui\").join(format!(\"{}.rs\", lint_name));\n+    let lint_file_path = project_root\n+        .join(\"clippy_lints\")\n+        .join(\"src\")\n+        .join(format!(\"{}.rs\", lint_name));\n+\n+    if Path::new(&test_file_path).exists() {\n+        return Err(io::Error::new(\n+            ErrorKind::AlreadyExists,\n+            format!(\"test file {:?} already exists\", test_file_path),\n+        ));\n+    }\n+    if Path::new(&lint_file_path).exists() {\n+        return Err(io::Error::new(\n+            ErrorKind::AlreadyExists,\n+            format!(\"lint file {:?} already exists\", lint_file_path),\n+        ));\n+    }\n+\n+    let test_file = OpenOptions::new().write(true).create_new(true).open(test_file_path)?;\n+    let lint_file = OpenOptions::new().write(true).create_new(true).open(lint_file_path)?;\n+\n+    Ok((test_file, lint_file))\n+}\n+\n+fn project_root() -> Result<PathBuf, io::Error> {\n+    let current_dir = std::env::current_dir()?;\n+    for path in current_dir.ancestors() {\n+        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n+        if let Err(err) = &result {\n+            if err.kind() == io::ErrorKind::NotFound {\n+                continue;\n+            }\n+        }\n+\n+        let content = result?;\n+        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n+            return Ok(path.to_path_buf());\n+        }\n+    }\n+    Err(io::Error::new(ErrorKind::Other, \"Unable to find project root\"))\n+}\n+\n+fn to_camel_case(name: &str) -> String {\n+    name.split('_')\n+        .map(|s| {\n+            if s.is_empty() {\n+                String::from(\"\")\n+            } else {\n+                [&s[0..1].to_uppercase(), &s[1..]].concat()\n+            }\n+        })\n+        .collect()\n+}\n+\n+fn get_test_file_contents(lint_name: &str) -> String {\n+    format!(\n+        \"#![warn(clippy::{})]\n+\n+fn main() {{\n+    // test code goes here\n+}}\n+\",\n+        lint_name\n+    )\n+}\n+\n+fn get_lint_file_contents(\n+    pass_type: &str,\n+    lint_name: &str,\n+    camel_case_name: &str,\n+    category: &str,\n+    pass_import: &str,\n+    context_import: &str,\n+) -> String {\n+    format!(\n+        \"use rustc::lint::{{LintArray, LintPass, {type}, {context_import}}};\n+use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+{pass_import}\n+\n+declare_clippy_lint! {{\n+    /// **What it does:**\n+    ///\n+    /// **Why is this bad?**\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code\n+    /// ```\n+    pub {name_upper},\n+    {category},\n+    \\\"default lint description\\\"\n+}}\n+\n+declare_lint_pass!({name_camel} => [{name_upper}]);\n+\n+impl {type} for {name_camel} {{}}\n+\",\n+        type=pass_type,\n+        name_upper=lint_name.to_uppercase(),\n+        name_camel=camel_case_name,\n+        category=category,\n+        pass_import=pass_import,\n+        context_import=context_import\n+    )\n+}\n+\n+#[test]\n+fn test_camel_case() {\n+    let s = \"a_lint\";\n+    let s2 = to_camel_case(s);\n+    assert_eq!(s2, \"ALint\");\n+\n+    let name = \"a_really_long_new_lint\";\n+    let name2 = to_camel_case(name);\n+    assert_eq!(name2, \"AReallyLongNewLint\");\n+\n+    let name3 = \"lint__name\";\n+    let name4 = to_camel_case(name3);\n+    assert_eq!(name4, \"LintName\");\n+}"}, {"sha": "c1fe51fbf8af20a6e99bb8a92ec49077f632365c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8b72b7251c09be25037e9f2ad224d0002efec869", "patch": "@@ -1090,6 +1090,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n         LintId::of(&utils::internal_lints::PRODUCE_ICE),\n+        LintId::of(&utils::internal_lints::DEFAULT_LINT),\n     ]);\n \n     store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "dcedaedc27f2f34f30f39b71e773ef41a596faba", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b72b7251c09be25037e9f2ad224d0002efec869/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=8b72b7251c09be25037e9f2ad224d0002efec869", "patch": "@@ -13,10 +13,10 @@ use rustc_hir::*;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_session::declare_tool_lint;\n use rustc_session::{declare_lint_pass, impl_lint_pass};\n-use rustc_span::source_map::Span;\n+use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::SymbolStr;\n use syntax::ast;\n-use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n+use syntax::ast::{Crate as AstCrate, ItemKind, LitKind, Name};\n use syntax::visit::FnKind;\n \n declare_clippy_lint! {\n@@ -121,6 +121,29 @@ declare_clippy_lint! {\n     \"this message should not appear anywhere as we ICE before and don't emit the lint\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for cases of an auto-generated lint without an updated description,\n+    /// i.e. `default lint description`.\n+    ///\n+    /// **Why is this bad?** Indicates that the lint is not finished.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// declare_lint! { pub COOL_LINT, nursery, \"default lint description\" }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// declare_lint! { pub COOL_LINT, nursery, \"a great new lint\" }\n+    /// ```\n+    pub DEFAULT_LINT,\n+    internal,\n+    \"found 'default lint description' in a lint declaration\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -163,12 +186,34 @@ pub struct LintWithoutLintPass {\n     registered_lints: FxHashSet<Name>,\n }\n \n-impl_lint_pass!(LintWithoutLintPass => [LINT_WITHOUT_LINT_PASS]);\n+impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n-        if let hir::ItemKind::Static(ref ty, Mutability::Not, _) = item.kind {\n+        if let hir::ItemKind::Static(ref ty, Mutability::Not, body_id) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n+                let expr = &cx.tcx.hir().body(body_id).value;\n+                if_chain! {\n+                    if let ExprKind::AddrOf(_, _, ref inner_exp) = expr.kind;\n+                    if let ExprKind::Struct(_, ref fields, _) = inner_exp.kind;\n+                    let field = fields.iter()\n+                                      .find(|f| f.ident.as_str() == \"desc\")\n+                                      .expect(\"lints must have a description field\");\n+                    if let ExprKind::Lit(Spanned {\n+                        node: LitKind::Str(ref sym, _),\n+                        ..\n+                    }) = field.expr.kind;\n+                    if sym.as_str() == \"default lint description\";\n+\n+                    then {\n+                        span_lint(\n+                            cx,\n+                            DEFAULT_LINT,\n+                            item.span,\n+                            &format!(\"the lint `{}` has the default lint description\", item.ident.name),\n+                        );\n+                    }\n+                }\n                 self.declared_lints.insert(item.ident.name, item.span);\n             }\n         } else if is_expn_of(item.span, \"impl_lint_pass\").is_some()"}, {"sha": "6fd052893bfce9c8c56430f4b63120a4c5b401f5", "filename": "doc/adding_lints.md", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8b72b7251c09be25037e9f2ad224d0002efec869/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b72b7251c09be25037e9f2ad224d0002efec869/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=8b72b7251c09be25037e9f2ad224d0002efec869", "patch": "@@ -9,6 +9,7 @@ because that's clearly a non-descriptive name.\n \n - [Adding a new lint](#adding-a-new-lint)\n   - [Setup](#setup)\n+  - [Getting Started](#getting-started)\n   - [Testing](#testing)\n   - [Rustfix tests](#rustfix-tests)\n   - [Edition 2018 tests](#edition-2018-tests)\n@@ -31,6 +32,19 @@ which can change rapidly. Make sure you're working near rust-clippy's master,\n and use the `setup-toolchain.sh` script to configure the appropriate toolchain\n for the Clippy directory.\n \n+### Getting Started\n+\n+There is a bit of boilerplate code that needs to be set up when creating a new\n+lint. Fortunately, you can use the clippy dev tools to handle this for you. We\n+are naming our new lint `foo_functions` (lints are generally written in snake\n+case), and we don't need type information so it will have an early pass type\n+(more on this later on). To get started on this lint you can run\n+`./util/dev new_lint --name=foo_functions --pass=early --category=pedantic`\n+(category will default to nursery if not provided). This command will create\n+two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n+as well as run `./util/dev update_lints` to register the new lint. Next, we'll\n+open up these files and add our lint!\n+\n ### Testing\n \n Let's write some tests first that we can execute while we iterate on our lint.\n@@ -41,11 +55,9 @@ we want to check. The output of Clippy is compared against a `.stderr` file.\n Note that you don't have to create this file yourself, we'll get to\n generating the `.stderr` files further down.\n \n-We start by creating the test file at `tests/ui/foo_functions.rs`. It doesn't\n-really matter what the file is called, but it's a good convention to name it\n-after the lint it is testing, so `foo_functions.rs` it is.\n+We start by opening the test file created at `tests/ui/foo_functions.rs`. \n \n-Inside the file we put some examples to get started:\n+Update the file with some examples to get started:\n \n ```rust\n #![warn(clippy::foo_functions)]\n@@ -90,8 +102,8 @@ Once we are satisfied with the output, we need to run\n `tests/ui/update-all-references.sh` to update the `.stderr` file for our lint.\n Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n every time before running `tests/ui/update-all-references.sh`.\n-Running `TESTNAME=foo_functions cargo uitest` should pass then. When we\n-commit our lint, we need to commit the generated `.stderr` files, too.\n+Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit \n+our lint, we need to commit the generated `.stderr` files, too.\n \n ### Rustfix tests\n \n@@ -121,26 +133,42 @@ With tests in place, let's have a look at implementing our lint now.\n \n ### Lint declaration\n \n-We start by creating a new file in the `clippy_lints` crate. That's the crate\n-where all the lint code is. We are going to call the file\n-`clippy_lints/src/foo_functions.rs` and import some initial things we need:\n+Let's start by opening the new file created in the `clippy_lints` crate \n+at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n+lint code is. This file has already imported some initial things we will need:\n \n ```rust\n-use rustc::lint::{LintArray, LintPass, EarlyLintPass};\n+use rustc::lint::{LintArray, LintPass, EarlyLintPass, EarlyContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use syntax::ast::*;\n ```\n \n-The next step is to provide a lint declaration. Lints are declared using the\n-[`declare_clippy_lint!`][declare_clippy_lint] macro:\n+The next step is to update the lint declaration. Lints are declared using the\n+[`declare_clippy_lint!`][declare_clippy_lint] macro, and we just need to update\n+the auto-generated lint declaration to have a real description, something like this:\n \n ```rust\n declare_clippy_lint! {\n+    /// **What it does:**\n+    ///\n+    /// **Why is this bad?**\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code\n+    /// ```\n     pub FOO_FUNCTIONS,\n     pedantic,\n     \"function named `foo`, which is not a descriptive name\"\n }\n ```\n \n+* The section of lines prefixed with `///` constitutes the lint documentation\n+section. This is the default documentation style and will be displayed at\n+https://rust-lang.github.io/rust-clippy/master/index.html.\n * `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n guidelines][lint_naming] here when naming your lint. In short, the name should\n state the thing that is being checked for and read well when used with\n@@ -150,8 +178,8 @@ state the thing that is being checked for and read well when used with\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-With our lint declaration done, we will now make sure that it is assigned to a\n-lint pass:\n+The rest of this file contains an empty implementation for our lint pass, \n+which in this case is `EarlyLintPass` and should look like this:\n \n ```rust\n // clippy_lints/src/foo_functions.rs\n@@ -166,12 +194,9 @@ impl EarlyLintPass for FooFunctions {}\n Don't worry about the `name` method here. As long as it includes the name of the\n lint pass it should be fine.\n \n-Next we need to run `util/dev update_lints` to register the lint in various\n-places, mainly in `clippy_lints/src/lib.rs`.\n-\n-While `update_lints` automates some things, it doesn't automate everything. We\n-will have to register our lint pass manually in the `register_plugins` function\n-in `clippy_lints/src/lib.rs`:\n+The new lint automation runs `update_lints`, which automates some things, but it \n+doesn't automate everything. We will have to register our lint pass manually in\n+the `register_plugins` function in `clippy_lints/src/lib.rs`:\n \n ```rust\n reg.register_early_lint_pass(box foo_functions::FooFunctions);\n@@ -195,14 +220,9 @@ In short, the `LateLintPass` has access to type information while the\n `EarlyLintPass`. The `EarlyLintPass` is also faster. However linting speed\n hasn't really been a concern with Clippy so far.\n \n-Since we don't need type information for checking the function name, we are\n-going to use the `EarlyLintPass`. It has to be imported as well, changing our\n-imports to:\n-\n-```rust\n-use rustc::lint::{LintArray, LintPass, EarlyLintPass, EarlyContext};\n-use rustc::{declare_tool_lint, lint_array};\n-```\n+Since we don't need type information for checking the function name, we used\n+`--pass=early` when running the new lint automation and all the imports were\n+added accordingly.\n \n ### Emitting a lint\n "}, {"sha": "988a7b866dea2219d04a1d7f1813f7e1bc6de787", "filename": "tests/ui/default_lint.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b72b7251c09be25037e9f2ad224d0002efec869/tests%2Fui%2Fdefault_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b72b7251c09be25037e9f2ad224d0002efec869/tests%2Fui%2Fdefault_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_lint.rs?ref=8b72b7251c09be25037e9f2ad224d0002efec869", "patch": "@@ -0,0 +1,28 @@\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+#[macro_use]\n+extern crate rustc;\n+#[macro_use]\n+extern crate rustc_session;\n+extern crate rustc_lint;\n+use rustc_lint::{LintArray, LintPass};\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n+}\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT_DEFAULT,\n+    Warn,\n+    \"default lint description\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+declare_lint_pass!(Pass2 => [TEST_LINT_DEFAULT]);\n+\n+fn main() {}"}, {"sha": "21fd86ec6aadf4d5fcfbbdedcf091559e5592f74", "filename": "tests/ui/default_lint.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b72b7251c09be25037e9f2ad224d0002efec869/tests%2Fui%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b72b7251c09be25037e9f2ad224d0002efec869/tests%2Fui%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_lint.stderr?ref=8b72b7251c09be25037e9f2ad224d0002efec869", "patch": "@@ -0,0 +1,21 @@\n+error: the lint `TEST_LINT_DEFAULT` has the default lint description\n+  --> $DIR/default_lint.rs:18:1\n+   |\n+LL | / declare_tool_lint! {\n+LL | |     pub clippy::TEST_LINT_DEFAULT,\n+LL | |     Warn,\n+LL | |     \"default lint description\",\n+LL | |     report_in_external_macro: true\n+LL | | }\n+   | |_^\n+   |\n+note: lint level defined here\n+  --> $DIR/default_lint.rs:1:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::default_lint)]` implied by `#[deny(clippy::internal)]`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}