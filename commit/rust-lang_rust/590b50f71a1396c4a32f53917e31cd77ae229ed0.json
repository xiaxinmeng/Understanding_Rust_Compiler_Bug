{"sha": "590b50f71a1396c4a32f53917e31cd77ae229ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MGI1MGY3MWExMzk2YzRhMzJmNTM5MTdlMzFjZDc3YWUyMjllZDA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-10-19T05:00:08Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-10-19T05:03:14Z"}, "message": "Fix struct field visibility and add enum field doc\n\nStruct fields with inherited visibility were previously stripped.\n\nCloses #9899", "tree": {"sha": "42ef1eadb3c41aae94ba0206cf853e42fdcf6631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ef1eadb3c41aae94ba0206cf853e42fdcf6631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/590b50f71a1396c4a32f53917e31cd77ae229ed0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/590b50f71a1396c4a32f53917e31cd77ae229ed0", "html_url": "https://github.com/rust-lang/rust/commit/590b50f71a1396c4a32f53917e31cd77ae229ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/590b50f71a1396c4a32f53917e31cd77ae229ed0/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7337ff17fda6480f55a0613c68b75c14b475ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7337ff17fda6480f55a0613c68b75c14b475ca", "html_url": "https://github.com/rust-lang/rust/commit/3a7337ff17fda6480f55a0613c68b75c14b475ca"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "53c3cf3a10c795d3d1e53ec0b1f4b772a5ee5bdc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/590b50f71a1396c4a32f53917e31cd77ae229ed0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590b50f71a1396c4a32f53917e31cd77ae229ed0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=590b50f71a1396c4a32f53917e31cd77ae229ed0", "patch": "@@ -1344,6 +1344,26 @@ fn item_enum(w: &mut io::Writer, it: &clean::Item, e: &clean::Enum) {\n             write!(w, \"<tr><td id='variant.{name}'><code>{name}</code></td><td>\",\n                    name = variant.name.get_ref().as_slice());\n             document(w, variant);\n+            match variant.inner {\n+                clean::VariantItem(ref var) => {\n+                    match var.kind {\n+                        clean::StructVariant(ref s) => {\n+                            write!(w, \"<h3 class='fields'>Fields</h3>\\n<table>\");\n+                            for field in s.fields.iter() {\n+                                write!(w, \"<tr><td id='variant.{v}.field.{f}'>\\\n+                                           <code>{f}</code></td><td>\",\n+                                       v = variant.name.get_ref().as_slice(),\n+                                       f = field.name.get_ref().as_slice());\n+                                document(w, field);\n+                                write!(w, \"</td></tr>\");\n+                            }\n+                            write!(w, \"</table>\");\n+                        }\n+                        _ => ()\n+                    }\n+                }\n+                _ => ()\n+            }\n             write!(w, \"</td></tr>\");\n         }\n         write!(w, \"</table>\");"}, {"sha": "e11552cb08faf4ab677ec84f8e5ef4674a307424", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/590b50f71a1396c4a32f53917e31cd77ae229ed0/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590b50f71a1396c4a32f53917e31cd77ae229ed0/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=590b50f71a1396c4a32f53917e31cd77ae229ed0", "patch": "@@ -135,8 +135,14 @@ impl<'self> fold::DocFolder for Stripper<'self> {\n                 }\n             }\n \n-            clean::ViewItemItem(*) | clean::StructFieldItem(*) => {\n+            clean::ViewItemItem(*) => {\n                 if i.visibility != Some(ast::public) {\n+                    return None\n+                }\n+            }\n+\n+            clean::StructFieldItem(*) => {\n+                if i.visibility == Some(ast::private) {\n                     return None;\n                 }\n             }"}]}