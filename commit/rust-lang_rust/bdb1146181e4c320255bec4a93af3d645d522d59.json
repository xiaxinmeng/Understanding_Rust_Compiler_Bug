{"sha": "bdb1146181e4c320255bec4a93af3d645d522d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYjExNDYxODFlNGMzMjAyNTViZWM0YTkzYWYzZDY0NWQ1MjJkNTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:34:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:25Z"}, "message": "rollup merge of #19831: luqmana/deriving-where\n\nFixes #19358.", "tree": {"sha": "243aa0f52b4ace1723d15a84da9deda982ee3bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/243aa0f52b4ace1723d15a84da9deda982ee3bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb1146181e4c320255bec4a93af3d645d522d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb1146181e4c320255bec4a93af3d645d522d59", "html_url": "https://github.com/rust-lang/rust/commit/bdb1146181e4c320255bec4a93af3d645d522d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb1146181e4c320255bec4a93af3d645d522d59/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823cd7a8d54166dab4c93ab9181071be8f45323e", "url": "https://api.github.com/repos/rust-lang/rust/commits/823cd7a8d54166dab4c93ab9181071be8f45323e", "html_url": "https://github.com/rust-lang/rust/commit/823cd7a8d54166dab4c93ab9181071be8f45323e"}, {"sha": "ab1bdde536668e752aaf4e9dbfa0acf058d0240b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1bdde536668e752aaf4e9dbfa0acf058d0240b", "html_url": "https://github.com/rust-lang/rust/commit/ab1bdde536668e752aaf4e9dbfa0acf058d0240b"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "b31758e2d2a127cd5d81117fc6fa3f677ea0aabd", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bdb1146181e4c320255bec4a93af3d645d522d59/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb1146181e4c320255bec4a93af3d645d522d59/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=bdb1146181e4c320255bec4a93af3d645d522d59", "patch": "@@ -388,7 +388,7 @@ impl<'a> TraitDef<'a> {\n                            methods: Vec<P<ast::Method>>) -> P<ast::Item> {\n         let trait_path = self.path.to_path(cx, self.span, type_ident, generics);\n \n-        let Generics { mut lifetimes, ty_params, where_clause: _ } =\n+        let Generics { mut lifetimes, ty_params, mut where_clause } =\n             self.generics.to_generics(cx, self.span, type_ident, generics);\n         let mut ty_params = ty_params.into_vec();\n \n@@ -420,13 +420,33 @@ impl<'a> TraitDef<'a> {\n                        ty_param.unbound.clone(),\n                        None)\n         }));\n+\n+        // and similarly for where clauses\n+        where_clause.predicates.extend(generics.where_clause.predicates.iter().map(|clause| {\n+            match *clause {\n+                ast::WherePredicate::BoundPredicate(ref wb) => {\n+                    ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n+                        id: ast::DUMMY_NODE_ID,\n+                        span: self.span,\n+                        ident: wb.ident,\n+                        bounds: OwnedSlice::from_vec(wb.bounds.iter().map(|b| b.clone()).collect())\n+                    })\n+                }\n+                ast::WherePredicate::EqPredicate(ref we) => {\n+                    ast::WherePredicate::EqPredicate(ast::WhereEqPredicate {\n+                        id: ast::DUMMY_NODE_ID,\n+                        span: self.span,\n+                        path: we.path.clone(),\n+                        ty: we.ty.clone()\n+                    })\n+                }\n+            }\n+        }));\n+\n         let trait_generics = Generics {\n             lifetimes: lifetimes,\n             ty_params: OwnedSlice::from_vec(ty_params),\n-            where_clause: ast::WhereClause {\n-                id: ast::DUMMY_NODE_ID,\n-                predicates: Vec::new(),\n-            },\n+            where_clause: where_clause\n         };\n \n         // Create the reference to the trait."}, {"sha": "18793525e82e60bb7c212399e748d2b2b048bce8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdb1146181e4c320255bec4a93af3d645d522d59/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb1146181e4c320255bec4a93af3d645d522d59/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bdb1146181e4c320255bec4a93af3d645d522d59", "patch": "@@ -1062,6 +1062,7 @@ impl<'a> State<'a> {\n                         span: codemap::Span) -> IoResult<()> {\n         try!(self.print_ident(ident));\n         try!(self.print_generics(generics));\n+        try!(self.print_where_clause(generics));\n         if ast_util::struct_def_is_tuple_like(struct_def) {\n             if !struct_def.fields.is_empty() {\n                 try!(self.popen());"}, {"sha": "e4c190f41169edfc51e607bb35d2dc803668d9d0", "filename": "src/test/run-pass/issue-19358.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bdb1146181e4c320255bec4a93af3d645d522d59/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb1146181e4c320255bec4a93af3d645d522d59/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19358.rs?ref=bdb1146181e4c320255bec4a93af3d645d522d59", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {}\n+\n+#[deriving(Show)]\n+struct Foo<T: Trait> {\n+    foo: T,\n+}\n+\n+#[deriving(Show)]\n+struct Bar<T> where T: Trait {\n+    bar: T,\n+}\n+\n+impl Trait for int {}\n+\n+fn main() {\n+    let a = Foo { foo: 12i };\n+    let b = Bar { bar: 12i };\n+    println!(\"{} {}\", a, b);\n+}"}]}