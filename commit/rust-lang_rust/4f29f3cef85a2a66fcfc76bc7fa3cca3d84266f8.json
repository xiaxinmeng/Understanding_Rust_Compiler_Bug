{"sha": "4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8", "node_id": "C_kwDOAAsO6NoAKDRmMjlmM2NlZjg1YTJhNjZmY2ZjNzZiYzdmYTNjY2EzZDg0MjY2Zjg", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-24T08:07:38Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-24T08:31:47Z"}, "message": "Add impl polarity to fields", "tree": {"sha": "33243b5d332725fa4c533eb9f4a5e4f2d9be80ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33243b5d332725fa4c533eb9f4a5e4f2d9be80ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmGd+HMACgkQAn35M4hi\nrd04NQ//Xyay63SITyGUEB6L+8mBGeMKf57m6Ce6jlZJ9q3ImhPlLUZYX4vzWmw+\n0vNXs8BCaSnOgSb6J/WKFn//TuB28gISSWgTT8I3OpvVzvZy1YJJuOVQru0aDNWS\nalZYS5/WizrmdnNQgPY4dHke94AUPms1uaz53WtuIfKcxrwi2xgWZanIWs8wKlKs\nW4MoGWFNDhOAka5ZyvvqSzFDt12kQDtbV+97EkU4qfU/lKNaNcak4RDD7cYrduMN\nnkjcF6gg4/GacMHPkGmvdnPuZVgapD9i9maKCoMs+YlcisvjbEE7n+BO58/X/nnL\njByvbPeZ9tRm+V900CCQ9+DsYG7n6LDY1QPNJIgOh86ansjsUPx9KucOyppRiuod\ncE/u/d/zQtauFec7tLNhy+M+sxj5WbXQm3+L6+8ZdPRqxfwK6tzBlAyEhkCQ+GrQ\nW1mi9iSvn6Lu8Xni6E2egPTaypsA/+1y/ltc9qnCrfRJcHO8rPAm+jVKAoxaolRu\nzBHPn4FQfNJ8AkQFG7GfHnFw2VYOV5ztHNeT2+/ODIWcrtFIFi6LjU3/0Q4xKEgG\nIlyjAZlOfrjmkFHMoEt/Gfe06LkTgc6D0JLwOxyDLKn8zJ88FXn1qfPqN2IS2D4e\nL5HlwNg+us4mX6AqVvxYOPvafqowYg8J6ezpP9orYBov4lEYYOo=\n=IGOK\n-----END PGP SIGNATURE-----", "payload": "tree 33243b5d332725fa4c533eb9f4a5e4f2d9be80ed\nparent b2005117bc475700f117ab01cf72fb46f1fe2d69\nauthor Deadbeef <ent3rm4n@gmail.com> 1637741258 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1637742707 +0800\n\nAdd impl polarity to fields\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8", "html_url": "https://github.com/rust-lang/rust/commit/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2005117bc475700f117ab01cf72fb46f1fe2d69", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2005117bc475700f117ab01cf72fb46f1fe2d69", "html_url": "https://github.com/rust-lang/rust/commit/b2005117bc475700f117ab01cf72fb46f1fe2d69"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "0ff3611f8f80d61ef1ef25ed69906bc6d2e0fb83", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=4f29f3cef85a2a66fcfc76bc7fa3cca3d84266f8", "patch": "@@ -284,32 +284,32 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // structs and enums.\n                 self.assemble_candidates_from_impls(obligation, &mut candidates);\n \n-                            // For other types, we'll use the builtin rules.\n-            let copy_conditions = self.copy_clone_conditions(obligation);\n-            self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);\n-        } else if lang_items.discriminant_kind_trait() == Some(def_id) {\n-            // `DiscriminantKind` is automatically implemented for every type.\n-            candidates.vec.push(DiscriminantKindCandidate);\n-        } else if lang_items.pointee_trait() == Some(def_id) {\n-            // `Pointee` is automatically implemented for every type.\n-            candidates.vec.push(PointeeCandidate);\n-        } else if lang_items.sized_trait() == Some(def_id) {\n-            // Sized is never implementable by end-users, it is\n-            // always automatically computed.\n-            let sized_conditions = self.sized_conditions(obligation);\n-            self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);\n-        } else if lang_items.unsize_trait() == Some(def_id) {\n-            self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n-        } else if lang_items.drop_trait() == Some(def_id)\n-            && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n-        {\n-            if self.is_in_const_context {\n-                self.assemble_const_drop_candidates(obligation, stack, &mut candidates)?;\n-            } else {\n-                debug!(\"passing ~const Drop bound; in non-const context\");\n-                // `~const Drop` when we are not in a const context has no effect.\n-                candidates.vec.push(ConstDropCandidate)\n-            }\n+                // For other types, we'll use the builtin rules.\n+                let copy_conditions = self.copy_clone_conditions(obligation);\n+                self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);\n+            } else if lang_items.discriminant_kind_trait() == Some(def_id) {\n+                // `DiscriminantKind` is automatically implemented for every type.\n+                candidates.vec.push(DiscriminantKindCandidate);\n+            } else if lang_items.pointee_trait() == Some(def_id) {\n+                // `Pointee` is automatically implemented for every type.\n+                candidates.vec.push(PointeeCandidate);\n+            } else if lang_items.sized_trait() == Some(def_id) {\n+                // Sized is never implementable by end-users, it is\n+                // always automatically computed.\n+                let sized_conditions = self.sized_conditions(obligation);\n+                self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);\n+            } else if lang_items.unsize_trait() == Some(def_id) {\n+                self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n+            } else if lang_items.drop_trait() == Some(def_id)\n+                && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+            {\n+                if self.is_in_const_context {\n+                    self.assemble_const_drop_candidates(obligation, stack, &mut candidates)?;\n+                } else {\n+                    debug!(\"passing ~const Drop bound; in non-const context\");\n+                    // `~const Drop` when we are not in a const context has no effect.\n+                    candidates.vec.push(ConstDropCandidate)\n+                }\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {\n                     // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -947,6 +947,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         substs: self.tcx().mk_substs_trait(ty, &[]),\n                     },\n                     constness: ty::BoundConstness::ConstIfConst,\n+                    polarity: ty::ImplPolarity::Positive,\n                 }));\n \n             let const_drop_stack = self.push_stack(obligation_stack.list(), &const_drop_obligation);"}]}