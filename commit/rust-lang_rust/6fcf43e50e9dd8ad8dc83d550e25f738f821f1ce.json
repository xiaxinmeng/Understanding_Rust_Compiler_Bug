{"sha": "6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2Y0M2U1MGU5ZGQ4YWQ4ZGM4M2Q1NTBlMjVmNzM4ZjgyMWYxY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T00:31:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T00:31:54Z"}, "message": "auto merge of #13511 : Meyermagic/rust/enum_typeid, r=alexcrichton\n\nFixes #13507.\r\n\r\nI haven't familiarized myself with this part of the rust compiler, so hopefully there are no mistakes (despite the simplicity of the commit). It is also 5am.", "tree": {"sha": "cce31157f9d9fa19d057c1e67dd4e7353f605aab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce31157f9d9fa19d057c1e67dd4e7353f605aab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "html_url": "https://github.com/rust-lang/rust/commit/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f94e3fe5859fe7fc001cf26f4fa401d9a2ee2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f94e3fe5859fe7fc001cf26f4fa401d9a2ee2e", "html_url": "https://github.com/rust-lang/rust/commit/10f94e3fe5859fe7fc001cf26f4fa401d9a2ee2e"}, {"sha": "b9f7ac591c798c5f4c694ac5db6928059b21ddd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f7ac591c798c5f4c694ac5db6928059b21ddd0", "html_url": "https://github.com/rust-lang/rust/commit/b9f7ac591c798c5f4c694ac5db6928059b21ddd0"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "9c0c2d484a0aca29de66fac0122e74e16204c530", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "patch": "@@ -4565,7 +4565,7 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n             }\n             ty_enum(d, _) => {\n                 byte!(8);\n-                hash!(d)\n+                did(&mut state, d);\n             }\n             ty_box(_) => {\n                 byte!(9);"}, {"sha": "be066187be52b50ec1a79b5a89b9bcb581610736", "filename": "src/test/auxiliary/issue13507.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod testtypes {\n+    use std::intrinsics::TypeId;\n+\n+    pub fn type_ids() -> Vec<TypeId> {\n+        let mut ids = vec!();\n+        ids.push(TypeId::of::<FooNil>());\n+        ids.push(TypeId::of::<FooBool>());\n+        ids.push(TypeId::of::<FooInt>());\n+        ids.push(TypeId::of::<FooUint>());\n+        ids.push(TypeId::of::<FooFloat>());\n+        ids.push(TypeId::of::<FooEnum>());\n+        ids.push(TypeId::of::<FooUniq>());\n+        ids.push(TypeId::of::<FooPtr>());\n+        ids.push(TypeId::of::<FooClosure>());\n+        ids.push(TypeId::of::<&'static FooTrait>());\n+        ids.push(TypeId::of::<FooStruct>());\n+        ids.push(TypeId::of::<FooTuple>());\n+        ids\n+    }\n+\n+    // Tests ty_nil\n+    pub type FooNil = ();\n+\n+    // Skipping ty_bot\n+\n+    // Tests ty_bool\n+    pub type FooBool = bool;\n+\n+    // Tests ty_char\n+    pub type FooChar = char;\n+\n+    // Tests ty_int (does not test all variants of IntTy)\n+    pub type FooInt = int;\n+\n+    // Tests ty_uint (does not test all variants of UintTy)\n+    pub type FooUint = uint;\n+\n+    // Tests ty_float (does not test all variants of FloatTy)\n+    pub type FooFloat = f64;\n+\n+    // For ty_str, what kind of string should I use? &'static str? ~str? Raw str?\n+\n+    // Tests ty_enum\n+    pub enum FooEnum {\n+        VarA(uint),\n+        VarB(uint, uint)\n+    }\n+\n+    // Skipping ty_box\n+\n+    // Tests ty_uniq (of u8)\n+    pub type FooUniq = ~u8;\n+\n+    // As with ty_str, what type should be used for ty_vec?\n+\n+    // Tests ty_ptr\n+    pub type FooPtr = *u8;\n+\n+    // Skipping ty_rptr\n+\n+    // Skipping ty_bare_fn (how do you get a bare function type, rather than proc or closure?)\n+\n+    // Tests ty_closure (does not test all types of closures)\n+    pub type FooClosure = |arg: u8|: 'static -> u8;\n+\n+    // Tests ty_trait\n+    pub trait FooTrait {\n+        fn foo_method(&self) -> uint;\n+        fn foo_static_method() -> uint;\n+    }\n+\n+    // Tests ty_struct\n+    pub struct FooStruct {\n+        pub pub_foo_field: uint,\n+        foo_field: uint\n+    }\n+\n+    // Tests ty_tup\n+    pub type FooTuple = (u8, i8, bool);\n+\n+    // Skipping ty_param\n+\n+    // Skipping ty_self\n+\n+    // Skipping ty_self\n+\n+    // Skipping ty_infer\n+\n+    // Skipping ty_err\n+}"}, {"sha": "626381c334dd73f168911bdb78ef534baf1a24a4", "filename": "src/test/run-pass/issue-13507-2.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs?ref=6fcf43e50e9dd8ad8dc83d550e25f738f821f1ce", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue13507.rs\n+extern crate issue13507;\n+use issue13507::testtypes;\n+\n+use std::intrinsics::TypeId;\n+\n+pub fn type_ids() -> Vec<TypeId> {\n+    let mut ids = vec!();\n+    ids.push(TypeId::of::<testtypes::FooNil>());\n+    ids.push(TypeId::of::<testtypes::FooBool>());\n+    ids.push(TypeId::of::<testtypes::FooInt>());\n+    ids.push(TypeId::of::<testtypes::FooUint>());\n+    ids.push(TypeId::of::<testtypes::FooFloat>());\n+    ids.push(TypeId::of::<testtypes::FooEnum>());\n+    ids.push(TypeId::of::<testtypes::FooUniq>());\n+    ids.push(TypeId::of::<testtypes::FooPtr>());\n+    ids.push(TypeId::of::<testtypes::FooClosure>());\n+    ids.push(TypeId::of::<&'static testtypes::FooTrait>());\n+    ids.push(TypeId::of::<testtypes::FooStruct>());\n+    ids.push(TypeId::of::<testtypes::FooTuple>());\n+    ids\n+}\n+\n+pub fn main() {\n+    let othercrate = testtypes::type_ids();\n+    let thiscrate = type_ids();\n+    assert_eq!(thiscrate, othercrate);\n+}"}]}