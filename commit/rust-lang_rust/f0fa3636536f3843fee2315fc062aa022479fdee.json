{"sha": "f0fa3636536f3843fee2315fc062aa022479fdee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZmEzNjM2NTM2ZjM4NDNmZWUyMzE1ZmMwNjJhYTAyMjQ3OWZkZWU=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-22T18:13:05Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-06-25T09:17:00Z"}, "message": "Added `cargo dev remove intellij`", "tree": {"sha": "7aa4bd2edb55f63665b31d8a8700e3e8b4e8325d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aa4bd2edb55f63665b31d8a8700e3e8b4e8325d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fa3636536f3843fee2315fc062aa022479fdee", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDVnwwACgkQHKDfKvWd\naKVjrxAA2cmXue72N7S81pBMh9hdurPWqI78t+L0bZZySZtWkQnF8CC2PfU9AvnZ\nFMTqJc3iBfam9ag9uny40WOD756yfEO4sVmI8wWdZw+MhDbAipmg+R5T5/6CsgBs\n9gfyF9ngI7ChDF1W5a5/VJidLgiy0BGwd6bOe7h+P8XGTfV6lCnP5GW97cT3DwVn\nTrJql3azSebuRIsP0x7jx/2fEBYiiew3h3WfOu7E1accg9gWEvcDOopU69Ar8UDY\n1fZga/oo5wj/83ODSo9BW1ZY9x7eFRtiJoFsDUHMV6d+wQImbqyX+RMBoD49JuJa\nbLQE9S+Vaa5dTvlEWd/7z5Nw1Ss9ufgP3T5+zKB1+JioDLyaUW97xmmYyKIKIjLH\nANOxU+1fmGnSm+9o+kBk6MT9Uf8jEJRGs7UmQXJQoFsJ71u176D6Jwhxh5UXs8IQ\nN2+dEBxil3viZIw/jL3FV0tVfLC33OFJZWdUbCS7L+hYt/8+bK0qaqrKKDJEBOT7\nYx+7DuVHwu6uuHmuloyondwCdgaK9MSo7bmkKZWaeFOS2F9WvCrfaIu3RGrPk06z\nXHdb19yodL6+xLCQPzfR/AEYH9IufaWJfeAl08h1AItc7yivMvqJX7Qe9tRp1YaY\nIEBPuErjwJbrKFGzoXDsrLVdEzAxG/0iL88+Nz/T8mdmi8Hwh04=\n=xYyJ\n-----END PGP SIGNATURE-----", "payload": "tree 7aa4bd2edb55f63665b31d8a8700e3e8b4e8325d\nparent 8fdf2897da4ba476018090f3fb8f637a0de00c73\nauthor xFrednet <xFrednet@gmail.com> 1624385585 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1624612620 +0200\n\nAdded `cargo dev remove intellij`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fa3636536f3843fee2315fc062aa022479fdee", "html_url": "https://github.com/rust-lang/rust/commit/f0fa3636536f3843fee2315fc062aa022479fdee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fa3636536f3843fee2315fc062aa022479fdee/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fdf2897da4ba476018090f3fb8f637a0de00c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdf2897da4ba476018090f3fb8f637a0de00c73", "html_url": "https://github.com/rust-lang/rust/commit/8fdf2897da4ba476018090f3fb8f637a0de00c73"}], "stats": {"total": 94, "additions": 76, "deletions": 18}, "files": [{"sha": "f5bd08657ea8407a49d6c4206ec798e838c9de58", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0fa3636536f3843fee2315fc062aa022479fdee/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fa3636536f3843fee2315fc062aa022479fdee/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=f0fa3636536f3843fee2315fc062aa022479fdee", "patch": "@@ -45,10 +45,10 @@ fn main() {\n             (\"git-hook\", Some(matches)) => setup::git_hook::install_hook(matches.is_present(\"force-override\")),\n             _ => {},\n         },\n-        (\"remove\", Some(sub_command)) => {\n-            if let (\"git-hook\", Some(_)) = sub_command.subcommand() {\n-                setup::git_hook::remove_hook();\n-            }\n+        (\"remove\", Some(sub_command)) => match sub_command.subcommand() {\n+            (\"git-hook\", Some(_)) => setup::git_hook::remove_hook(),\n+            (\"intellij\", Some(_)) => setup::intellij::remove_rustc_src(),\n+            _ => {},\n         },\n         (\"serve\", Some(matches)) => {\n             let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n@@ -186,7 +186,11 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n             SubCommand::with_name(\"remove\")\n                 .about(\"Support for undoing changes done by the setup command\")\n                 .setting(AppSettings::ArgRequiredElseHelp)\n-                .subcommand(SubCommand::with_name(\"git-hook\").about(\"Remove any existing pre-commit git hook\")),\n+                .subcommand(SubCommand::with_name(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n+                .subcommand(\n+                    SubCommand::with_name(\"intellij\")\n+                        .about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n+                ),\n         )\n         .subcommand(\n             SubCommand::with_name(\"serve\")"}, {"sha": "249804240dfd8b9308ac89071685f1ce16daab4a", "filename": "clippy_dev/src/setup/intellij.rs", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f0fa3636536f3843fee2315fc062aa022479fdee/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fa3636536f3843fee2315fc062aa022479fdee/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs?ref=f0fa3636536f3843fee2315fc062aa022479fdee", "patch": "@@ -8,6 +8,9 @@ use std::path::{Path, PathBuf};\n // This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n // code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n \n+const RUSTC_PATH_SECTION: &str = \"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\";\n+const DEPENDENCIES_SECTION: &str = \"[dependencies]\";\n+\n const CLIPPY_PROJECTS: &[ClippyProjectInfo] = &[\n     ClippyProjectInfo::new(\"root\", \"Cargo.toml\", \"src/driver.rs\"),\n     ClippyProjectInfo::new(\"clippy_lints\", \"clippy_lints/Cargo.toml\", \"clippy_lints/src/lib.rs\"),\n@@ -43,6 +46,8 @@ pub fn setup_rustc_src(rustc_path: &str) {\n             return;\n         }\n     }\n+\n+    println!(\"info: the source paths can be removed again with `cargo dev remove intellij`\");\n }\n \n fn check_and_get_rustc_dir(rustc_path: &str) -> Result<PathBuf, ()> {\n@@ -51,26 +56,26 @@ fn check_and_get_rustc_dir(rustc_path: &str) -> Result<PathBuf, ()> {\n     if path.is_relative() {\n         match path.canonicalize() {\n             Ok(absolute_path) => {\n-                println!(\"note: the rustc path was resolved to: `{}`\", absolute_path.display());\n+                println!(\"info: the rustc path was resolved to: `{}`\", absolute_path.display());\n                 path = absolute_path;\n             },\n             Err(err) => {\n-                println!(\"error: unable to get the absolute path of rustc ({})\", err);\n+                eprintln!(\"error: unable to get the absolute path of rustc ({})\", err);\n                 return Err(());\n             },\n         };\n     }\n \n     let path = path.join(\"compiler\");\n-    println!(\"note: looking for compiler sources at: {}\", path.display());\n+    println!(\"info: looking for compiler sources at: {}\", path.display());\n \n     if !path.exists() {\n-        println!(\"error: the given path does not exist\");\n+        eprintln!(\"error: the given path does not exist\");\n         return Err(());\n     }\n \n     if !path.is_dir() {\n-        println!(\"error: the given path is a file and not a directory\");\n+        eprintln!(\"error: the given path is a file and not a directory\");\n         return Err(());\n     }\n \n@@ -82,7 +87,7 @@ fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo\n     let lib_content = read_project_file(project.lib_rs_file, \"lib.rs\", project.name)?;\n \n     if inject_deps_into_manifest(rustc_source_dir, project.cargo_file, &cargo_content, &lib_content).is_err() {\n-        println!(\n+        eprintln!(\n             \"error: unable to inject dependencies into {} with the Cargo file {}\",\n             project.name, project.cargo_file\n         );\n@@ -98,7 +103,7 @@ fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo\n fn read_project_file(file_path: &str, file_name: &str, project: &str) -> Result<String, ()> {\n     let path = Path::new(file_path);\n     if !path.exists() {\n-        println!(\n+        eprintln!(\n             \"error: unable to find the `{}` file for the project {}\",\n             file_name, project\n         );\n@@ -123,19 +128,19 @@ fn inject_deps_into_manifest(\n     cargo_toml: &str,\n     lib_rs: &str,\n ) -> std::io::Result<()> {\n-    // do not inject deps if we have aleady done so\n-    if cargo_toml.contains(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\") {\n+    // do not inject deps if we have already done so\n+    if cargo_toml.contains(RUSTC_PATH_SECTION) {\n         eprintln!(\n-            \"warn: dependencies are already setup inside {}, skipping file.\",\n+            \"warn: dependencies are already setup inside {}, skipping file\",\n             manifest_path\n         );\n         return Ok(());\n     }\n \n     let extern_crates = lib_rs\n         .lines()\n-        // get the deps\n-        .filter(|line| line.starts_with(\"extern crate\"))\n+        // only take dependencies starting with `rustc_`\n+        .filter(|line| line.starts_with(\"extern crate rustc_\"))\n         // we have something like \"extern crate foo;\", we only care about the \"foo\"\n         //              \u2193          \u2193\n         // extern crate rustc_middle;\n@@ -168,7 +173,56 @@ fn inject_deps_into_manifest(\n     let mut file = File::create(manifest_path)?;\n     file.write_all(new_manifest.as_bytes())?;\n \n-    println!(\"note: successfully setup dependencies inside {}\", manifest_path);\n+    println!(\"info: successfully setup dependencies inside {}\", manifest_path);\n \n     Ok(())\n }\n+\n+pub fn remove_rustc_src() {\n+    for project in CLIPPY_PROJECTS {\n+        // We don't care about the result here as we want to go through all\n+        // dependencies either way. Any info and error message will be issued by\n+        // the removal code itself.\n+        let _ = remove_rustc_src_from_project(project);\n+    }\n+}\n+\n+fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> Result<(), ()> {\n+    let mut cargo_content = read_project_file(project.cargo_file, \"Cargo.toml\", project.name)?;\n+    let section_start = if let Some(section_start) = cargo_content.find(RUSTC_PATH_SECTION) {\n+        section_start\n+    } else {\n+        println!(\n+            \"info: dependencies could not be found in `{}` for {}, skipping file\",\n+            project.cargo_file, project.name\n+        );\n+        return Ok(());\n+    };\n+\n+    let end_point = if let Some(end_point) = cargo_content.find(DEPENDENCIES_SECTION) {\n+        end_point\n+    } else {\n+        eprintln!(\n+            \"error: the end of the rustc dependencies section could not be found in `{}`\",\n+            project.cargo_file\n+        );\n+        return Err(());\n+    };\n+\n+    cargo_content.replace_range(section_start..end_point, \"\");\n+\n+    match File::create(project.cargo_file) {\n+        Ok(mut file) => {\n+            file.write_all(cargo_content.as_bytes()).unwrap();\n+            println!(\"info: successfully removed dependencies inside {}\", project.cargo_file);\n+            Ok(())\n+        },\n+        Err(err) => {\n+            eprintln!(\n+                \"error: unable to open file `{}` to remove rustc dependencies for {} ({})\",\n+                project.cargo_file, project.name, err\n+            );\n+            Err(())\n+        },\n+    }\n+}"}]}