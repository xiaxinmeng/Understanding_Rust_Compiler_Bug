{"sha": "749eeef3e75a3acc993fdd454ebadaa7e319509a", "node_id": "C_kwDOAAsO6NoAKDc0OWVlZWYzZTc1YTNhY2M5OTNmZGQ0NTRlYmFkYWE3ZTMxOTUwOWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-13T15:25:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-13T15:35:32Z"}, "message": "fix: insert whitespaces into assoc items for assist when macro generated", "tree": {"sha": "01eb373ebd1fd8476f3e919fa441817351f4ed62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01eb373ebd1fd8476f3e919fa441817351f4ed62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/749eeef3e75a3acc993fdd454ebadaa7e319509a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/749eeef3e75a3acc993fdd454ebadaa7e319509a", "html_url": "https://github.com/rust-lang/rust/commit/749eeef3e75a3acc993fdd454ebadaa7e319509a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/749eeef3e75a3acc993fdd454ebadaa7e319509a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "328419534d0ed425023db68ebab2eebb28f873cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/328419534d0ed425023db68ebab2eebb28f873cf", "html_url": "https://github.com/rust-lang/rust/commit/328419534d0ed425023db68ebab2eebb28f873cf"}], "stats": {"total": 110, "additions": 84, "deletions": 26}, "files": [{"sha": "75f6b025779587ec935b97b721005d16a043ba8f", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -1163,10 +1163,6 @@ impl<'a> SemanticsScope<'a> {\n         Some(Crate { id: self.resolver.krate()? })\n     }\n \n-    pub fn in_macro_file(&self) -> bool {\n-        self.file_id.is_macro()\n-    }\n-\n     /// Note: `FxHashSet<TraitId>` should be treated as an opaque type, passed into `Type\n     pub fn visible_traits(&self) -> FxHashSet<TraitId> {\n         let resolver = &self.resolver;"}, {"sha": "949744c01b2ae73a79c342bea85f5cb9834776b5", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -1,6 +1,6 @@\n use hir::Semantics;\n use ide_db::{\n-    helpers::{pick_best_token, render_macro_node::render_with_ws_inserted},\n+    helpers::{insert_whitespace_into_node::insert_ws_into, pick_best_token},\n     RootDatabase,\n };\n use itertools::Itertools;\n@@ -50,7 +50,7 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n             let expansions = sema.expand_derive_macro(&attr)?;\n             Some(ExpandedMacro {\n                 name: tt,\n-                expansion: expansions.into_iter().map(render_with_ws_inserted).join(\"\"),\n+                expansion: expansions.into_iter().map(insert_ws_into).join(\"\"),\n             })\n         } else {\n             None\n@@ -83,7 +83,7 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     // FIXME:\n     // macro expansion may lose all white space information\n     // But we hope someday we can use ra_fmt for that\n-    let expansion = render_with_ws_inserted(expanded?).to_string();\n+    let expansion = insert_ws_into(expanded?).to_string();\n     Some(ExpandedMacro { name: name.unwrap_or_else(|| \"???\".to_owned()), expansion })\n }\n "}, {"sha": "a10eca10d11946c1b350b0e1189b56c2d91d2de1", "filename": "crates/ide_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -1,5 +1,5 @@\n use hir::HasSource;\n-use ide_db::traits::resolve_target_trait;\n+use ide_db::{helpers::insert_whitespace_into_node::insert_ws_into, traits::resolve_target_trait};\n use syntax::ast::{self, make, AstNode};\n \n use crate::{\n@@ -105,7 +105,7 @@ fn add_missing_impl_members_inner(\n     let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;\n \n     let missing_items = filter_assoc_items(\n-        ctx.db(),\n+        &ctx.sema,\n         &ide_db::traits::get_missing_assoc_items(&ctx.sema, &impl_def),\n         mode,\n     );\n@@ -117,16 +117,24 @@ fn add_missing_impl_members_inner(\n     let target = impl_def.syntax().text_range();\n     acc.add(AssistId(assist_id, AssistKind::QuickFix), label, target, |builder| {\n         let target_scope = ctx.sema.scope(impl_def.syntax());\n+        let missing_items = missing_items\n+            .into_iter()\n+            .map(|it| {\n+                if ctx.sema.hir_file_for(it.syntax()).is_macro() {\n+                    if let Some(it) = ast::AssocItem::cast(insert_ws_into(it.syntax().clone())) {\n+                        return it;\n+                    }\n+                }\n+                it.clone_for_update()\n+            })\n+            .collect();\n         let (new_impl_def, first_new_item) = add_trait_assoc_items_to_impl(\n             &ctx.sema,\n             missing_items,\n             trait_,\n             impl_def.clone(),\n             target_scope,\n         );\n-        // if target_scope.in_macro_file() {\n-\n-        // }\n         match ctx.config.snippet_cap {\n             None => builder.replace(target, new_impl_def.to_string()),\n             Some(cap) => {\n@@ -893,6 +901,44 @@ impl Default for Foo {\n         Self(Default::default())\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_from_macro() {\n+        check_assist(\n+            add_missing_default_members,\n+            r#\"\n+macro_rules! foo {\n+    () => {\n+        trait FooB {\n+            fn foo<'lt>(&'lt self) {}\n+        }\n+    }\n+}\n+foo!();\n+struct Foo(usize);\n+\n+impl FooB for Foo {\n+    $0\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+    () => {\n+        trait FooB {\n+            fn foo<'lt>(&'lt self) {}\n+        }\n+    }\n+}\n+foo!();\n+struct Foo(usize);\n+\n+impl FooB for Foo {\n+    $0fn foo< 'lt>(& 'lt self){}\n+\n+}\n \"#,\n         )\n     }"}, {"sha": "250f772fe15e6a86a5dca27327d42c569a9c5318", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -1,4 +1,5 @@\n use hir::ModuleDef;\n+use ide_db::helpers::insert_whitespace_into_node::insert_ws_into;\n use ide_db::helpers::{\n     get_path_at_cursor_in_tt, import_assets::NameToImport, mod_path_to_ast,\n     parse_tt_as_comma_sep_paths,\n@@ -170,7 +171,7 @@ fn impl_def_from_trait(\n ) -> Option<(ast::Impl, ast::AssocItem)> {\n     let trait_ = trait_?;\n     let target_scope = sema.scope(annotated_name.syntax());\n-    let trait_items = filter_assoc_items(sema.db, &trait_.items(sema.db), DefaultMethods::No);\n+    let trait_items = filter_assoc_items(sema, &trait_.items(sema.db), DefaultMethods::No);\n     if trait_items.is_empty() {\n         return None;\n     }\n@@ -193,6 +194,17 @@ fn impl_def_from_trait(\n         node\n     };\n \n+    let trait_items = trait_items\n+        .into_iter()\n+        .map(|it| {\n+            if sema.hir_file_for(it.syntax()).is_macro() {\n+                if let Some(it) = ast::AssocItem::cast(insert_ws_into(it.syntax().clone())) {\n+                    return it;\n+                }\n+            }\n+            it.clone_for_update()\n+        })\n+        .collect();\n     let (impl_def, first_assoc_item) =\n         add_trait_assoc_items_to_impl(sema, trait_items, trait_, impl_def, target_scope);\n "}, {"sha": "90ec710c8e939f7c0ae4a15f194a719b8e275bf5", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -5,7 +5,7 @@ use std::ops;\n use itertools::Itertools;\n \n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n-use hir::{db::HirDatabase, HasSource, HirDisplay};\n+use hir::{db::HirDatabase, HirDisplay, Semantics};\n use ide_db::{\n     helpers::FamousDefs, helpers::SnippetCap, path_transform::PathTransform, RootDatabase,\n };\n@@ -92,7 +92,7 @@ pub enum DefaultMethods {\n }\n \n pub fn filter_assoc_items(\n-    db: &RootDatabase,\n+    sema: &Semantics<RootDatabase>,\n     items: &[hir::AssocItem],\n     default_methods: DefaultMethods,\n ) -> Vec<ast::AssocItem> {\n@@ -109,11 +109,11 @@ pub fn filter_assoc_items(\n     items\n         .iter()\n         // Note: This throws away items with no source.\n-        .filter_map(|i| {\n+        .filter_map(|&i| {\n             let item = match i {\n-                hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source(db)?.value),\n-                hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source(db)?.value),\n-                hir::AssocItem::Const(i) => ast::AssocItem::Const(i.source(db)?.value),\n+                hir::AssocItem::Function(i) => ast::AssocItem::Fn(sema.source(i)?.value),\n+                hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(sema.source(i)?.value),\n+                hir::AssocItem::Const(i) => ast::AssocItem::Const(sema.source(i)?.value),\n             };\n             Some(item)\n         })\n@@ -129,7 +129,7 @@ pub fn filter_assoc_items(\n }\n \n pub fn add_trait_assoc_items_to_impl(\n-    sema: &hir::Semantics<ide_db::RootDatabase>,\n+    sema: &Semantics<RootDatabase>,\n     items: Vec<ast::AssocItem>,\n     trait_: hir::Trait,\n     impl_: ast::Impl,\n@@ -140,7 +140,6 @@ pub fn add_trait_assoc_items_to_impl(\n     let transform = PathTransform::trait_impl(&target_scope, &source_scope, trait_, impl_.clone());\n \n     let items = items.into_iter().map(|assoc_item| {\n-        let assoc_item = assoc_item.clone_for_update();\n         transform.apply(assoc_item.syntax());\n         assoc_item.remove_attrs_and_docs();\n         assoc_item"}, {"sha": "a0d6d5cdc6b91657c7e2c39621f7cfb1328c4ae3", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -152,7 +152,9 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             }\n         }\n         hir::PathResolution::Def(\n-            def @ (hir::ModuleDef::Adt(_)\n+            def\n+            @\n+            (hir::ModuleDef::Adt(_)\n             | hir::ModuleDef::TypeAlias(_)\n             | hir::ModuleDef::BuiltinType(_)),\n         ) => {"}, {"sha": "8118e4fcbbb5f2c6721bfd039b7f7f9c79c955cc", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -4,7 +4,7 @@ pub mod generated_lints;\n pub mod import_assets;\n pub mod insert_use;\n pub mod merge_imports;\n-pub mod render_macro_node;\n+pub mod insert_whitespace_into_node;\n pub mod node_ext;\n pub mod rust_doc;\n "}, {"sha": "251a4caa13278636788c7447599d68f4521ce4a3", "filename": "crates/ide_db/src/helpers/insert_whitespace_into_node.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749eeef3e75a3acc993fdd454ebadaa7e319509a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_whitespace_into_node.rs?ref=749eeef3e75a3acc993fdd454ebadaa7e319509a", "patch": "@@ -1,3 +1,4 @@\n+//! Utilities for formatting macro expanded nodes until we get a proper formatter.\n use syntax::{\n     ast::make,\n     ted::{self, Position},\n@@ -9,7 +10,7 @@ use syntax::{\n // FIXME: It would also be cool to share logic here and in the mbe tests,\n // which are pretty unreadable at the moment.\n /// Renders a [`SyntaxNode`] with whitespace inserted between tokens that require them.\n-pub fn render_with_ws_inserted(syn: SyntaxNode) -> SyntaxNode {\n+pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n     let mut indent = 0;\n     let mut last: Option<SyntaxKind> = None;\n     let mut mods = Vec::new();\n@@ -40,7 +41,9 @@ pub fn render_with_ws_inserted(syn: SyntaxNode) -> SyntaxNode {\n                         make::tokens::whitespace(&\" \".repeat(2 * indent)),\n                     ));\n                 }\n-                mods.push((Position::after(node), make::tokens::single_newline()));\n+                if node.parent().is_some() {\n+                    mods.push((Position::after(node), make::tokens::single_newline()));\n+                }\n                 continue;\n             }\n             _ => continue,\n@@ -82,7 +85,7 @@ pub fn render_with_ws_inserted(syn: SyntaxNode) -> SyntaxNode {\n                 }\n                 mods.push(do_nl(after, tok));\n             }\n-            LIFETIME_IDENT if is_next(|it| it == IDENT || it == MUT_KW, true) => {\n+            LIFETIME_IDENT if is_next(|it| is_text(it), true) => {\n                 mods.push(do_ws(after, tok));\n             }\n             AS_KW => {", "previous_filename": "crates/ide_db/src/helpers/render_macro_node.rs"}]}