{"sha": "38af81f183504145bd3bf6ba5bc40b3e41e04593", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YWY4MWYxODM1MDQxNDViZDNiZjZiYTViYzQwYjNlNDFlMDQ1OTM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-24T02:10:01Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-24T02:10:01Z"}, "message": "Account for updated module ids when determining whether a resolution is \"changed\"", "tree": {"sha": "61850b0c2a839af097c528d2b91baec3acd9cb8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61850b0c2a839af097c528d2b91baec3acd9cb8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38af81f183504145bd3bf6ba5bc40b3e41e04593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38af81f183504145bd3bf6ba5bc40b3e41e04593", "html_url": "https://github.com/rust-lang/rust/commit/38af81f183504145bd3bf6ba5bc40b3e41e04593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38af81f183504145bd3bf6ba5bc40b3e41e04593/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "471d44e72c54882cff2e00c662ee74d8c7c94234", "url": "https://api.github.com/repos/rust-lang/rust/commits/471d44e72c54882cff2e00c662ee74d8c7c94234", "html_url": "https://github.com/rust-lang/rust/commit/471d44e72c54882cff2e00c662ee74d8c7c94234"}], "stats": {"total": 187, "additions": 178, "deletions": 9}, "files": [{"sha": "571ba3b8ac42b15ab92f03610131430241ba3c84", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/38af81f183504145bd3bf6ba5bc40b3e41e04593/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38af81f183504145bd3bf6ba5bc40b3e41e04593/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=38af81f183504145bd3bf6ba5bc40b3e41e04593", "patch": "@@ -126,17 +126,40 @@ impl ItemScope {\n         let mut changed = false;\n         let existing = self.visible.entry(name).or_default();\n \n-        if existing.types.is_none() && def.types.is_some() {\n-            existing.types = def.types;\n-            changed = true;\n+        match (existing.types, def.types) {\n+            (None, Some(_)) => {\n+                existing.types = def.types;\n+                changed = true;\n+            }\n+            (Some(e), Some(d)) if e.0 != d.0 => {\n+                existing.types = def.types;\n+                changed = true;\n+            }\n+            _ => {}\n         }\n-        if existing.values.is_none() && def.values.is_some() {\n-            existing.values = def.values;\n-            changed = true;\n+\n+        match (existing.values, def.values) {\n+            (None, Some(_)) => {\n+                existing.values = def.values;\n+                changed = true;\n+            }\n+            (Some(e), Some(d)) if e.0 != d.0 => {\n+                existing.values = def.values;\n+                changed = true;\n+            }\n+            _ => {}\n         }\n-        if existing.macros.is_none() && def.macros.is_some() {\n-            existing.macros = def.macros;\n-            changed = true;\n+\n+        match (existing.macros, def.macros) {\n+            (None, Some(_)) => {\n+                existing.macros = def.macros;\n+                changed = true;\n+            }\n+            (Some(e), Some(d)) if e.0 != d.0 => {\n+                existing.macros = def.macros;\n+                changed = true;\n+            }\n+            _ => {}\n         }\n \n         changed"}, {"sha": "f0d85d30163e08a6d4ec335262116a72ca11a1b8", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/38af81f183504145bd3bf6ba5bc40b3e41e04593/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38af81f183504145bd3bf6ba5bc40b3e41e04593/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=38af81f183504145bd3bf6ba5bc40b3e41e04593", "patch": "@@ -229,3 +229,149 @@ fn glob_enum_group() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn glob_shadowed_def() {\n+    let db = TestDB::with_files(\n+        r###\"\n+        //- /lib.rs\n+        mod foo;\n+        mod bar;\n+\n+        use foo::*;\n+        use bar::Baz;\n+\n+        //- /foo.rs\n+        pub struct Baz;\n+\n+        //- /bar.rs\n+        pub struct Baz;\n+        \"###,\n+    );\n+    let krate = db.test_crate();\n+\n+    let crate_def_map = db.crate_def_map(krate);\n+    let (_, root_module) = crate_def_map\n+        .modules\n+        .iter()\n+        .find(|(_, module_data)| module_data.parent.is_none())\n+        .expect(\"Root module not found\");\n+    let visible_entries = root_module.scope.entries().collect::<Vec<_>>();\n+    insta::assert_debug_snapshot!(\n+        visible_entries,\n+        @r###\"\n+    [\n+        (\n+            Name(\n+                Text(\n+                    \"Baz\",\n+                ),\n+            ),\n+            PerNs {\n+                types: Some(\n+                    (\n+                        AdtId(\n+                            StructId(\n+                                StructId(\n+                                    1,\n+                                ),\n+                            ),\n+                        ),\n+                        Module(\n+                            ModuleId {\n+                                krate: CrateId(\n+                                    0,\n+                                ),\n+                                local_id: Idx::<ModuleData>(0),\n+                            },\n+                        ),\n+                    ),\n+                ),\n+                values: Some(\n+                    (\n+                        AdtId(\n+                            StructId(\n+                                StructId(\n+                                    1,\n+                                ),\n+                            ),\n+                        ),\n+                        Module(\n+                            ModuleId {\n+                                krate: CrateId(\n+                                    0,\n+                                ),\n+                                local_id: Idx::<ModuleData>(0),\n+                            },\n+                        ),\n+                    ),\n+                ),\n+                macros: None,\n+            },\n+        ),\n+        (\n+            Name(\n+                Text(\n+                    \"bar\",\n+                ),\n+            ),\n+            PerNs {\n+                types: Some(\n+                    (\n+                        ModuleId(\n+                            ModuleId {\n+                                krate: CrateId(\n+                                    0,\n+                                ),\n+                                local_id: Idx::<ModuleData>(2),\n+                            },\n+                        ),\n+                        Module(\n+                            ModuleId {\n+                                krate: CrateId(\n+                                    0,\n+                                ),\n+                                local_id: Idx::<ModuleData>(0),\n+                            },\n+                        ),\n+                    ),\n+                ),\n+                values: None,\n+                macros: None,\n+            },\n+        ),\n+        (\n+            Name(\n+                Text(\n+                    \"foo\",\n+                ),\n+            ),\n+            PerNs {\n+                types: Some(\n+                    (\n+                        ModuleId(\n+                            ModuleId {\n+                                krate: CrateId(\n+                                    0,\n+                                ),\n+                                local_id: Idx::<ModuleData>(1),\n+                            },\n+                        ),\n+                        Module(\n+                            ModuleId {\n+                                krate: CrateId(\n+                                    0,\n+                                ),\n+                                local_id: Idx::<ModuleData>(0),\n+                            },\n+                        ),\n+                    ),\n+                ),\n+                values: None,\n+                macros: None,\n+            },\n+        ),\n+    ]\n+    \"###\n+    );\n+}"}]}