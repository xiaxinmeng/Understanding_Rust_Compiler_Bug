{"sha": "7972c1905beb9d1169475f42231b25d0bc9e83e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzJjMTkwNWJlYjlkMTE2OTQ3NWY0MjIzMWIyNWQwYmM5ZTgzZTY=", "commit": {"author": {"name": "Benjamin Saunders", "email": "ben.e.saunders@gmail.com", "date": "2017-01-04T03:13:01Z"}, "committer": {"name": "Benjamin Saunders", "email": "ben.e.saunders@gmail.com", "date": "2017-01-12T05:33:17Z"}, "message": "syntax: struct field attributes and cfg", "tree": {"sha": "cc72ed09a2553aab5e384c305ff850844c607d8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc72ed09a2553aab5e384c305ff850844c607d8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7972c1905beb9d1169475f42231b25d0bc9e83e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7972c1905beb9d1169475f42231b25d0bc9e83e6", "html_url": "https://github.com/rust-lang/rust/commit/7972c1905beb9d1169475f42231b25d0bc9e83e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7972c1905beb9d1169475f42231b25d0bc9e83e6/comments", "author": {"login": "Ralith", "id": 104558, "node_id": "MDQ6VXNlcjEwNDU1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/104558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ralith", "html_url": "https://github.com/Ralith", "followers_url": "https://api.github.com/users/Ralith/followers", "following_url": "https://api.github.com/users/Ralith/following{/other_user}", "gists_url": "https://api.github.com/users/Ralith/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ralith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ralith/subscriptions", "organizations_url": "https://api.github.com/users/Ralith/orgs", "repos_url": "https://api.github.com/users/Ralith/repos", "events_url": "https://api.github.com/users/Ralith/events{/privacy}", "received_events_url": "https://api.github.com/users/Ralith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ralith", "id": 104558, "node_id": "MDQ6VXNlcjEwNDU1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/104558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ralith", "html_url": "https://github.com/Ralith", "followers_url": "https://api.github.com/users/Ralith/followers", "following_url": "https://api.github.com/users/Ralith/following{/other_user}", "gists_url": "https://api.github.com/users/Ralith/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ralith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ralith/subscriptions", "organizations_url": "https://api.github.com/users/Ralith/orgs", "repos_url": "https://api.github.com/users/Ralith/repos", "events_url": "https://api.github.com/users/Ralith/events{/privacy}", "received_events_url": "https://api.github.com/users/Ralith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f62c2920077eb5cb81323142fc5dbe6ae8813c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f62c2920077eb5cb81323142fc5dbe6ae8813c0", "html_url": "https://github.com/rust-lang/rust/commit/8f62c2920077eb5cb81323142fc5dbe6ae8813c0"}], "stats": {"total": 183, "additions": 164, "deletions": 19}, "files": [{"sha": "709de49fbaaf07ec0f06851aedc14ce51930268e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -538,6 +538,7 @@ pub struct FieldPat {\n     /// The pattern the field is destructured to\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n+    pub attrs: ThinVec<Attribute>,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -815,6 +816,7 @@ pub struct Field {\n     pub expr: P<Expr>,\n     pub span: Span,\n     pub is_shorthand: bool,\n+    pub attrs: ThinVec<Attribute>,\n }\n \n pub type SpannedIdent = Spanned<Ident>;"}, {"sha": "099ca8f02d2b20cc63c307d04f859338fa5fd032", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -18,7 +18,7 @@ use ast;\n use ast::{AttrId, Attribute, Name};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, Expr, Item, Local, Stmt, StmtKind};\n-use codemap::{spanned, dummy_spanned, mk_sp};\n+use codemap::{Spanned, spanned, dummy_spanned, mk_sp};\n use syntax_pos::{Span, BytePos, DUMMY_SP};\n use errors::Handler;\n use feature_gate::{Features, GatedCfg};\n@@ -959,6 +959,13 @@ pub trait HasAttrs: Sized {\n     fn map_attrs<F: FnOnce(Vec<ast::Attribute>) -> Vec<ast::Attribute>>(self, f: F) -> Self;\n }\n \n+impl<T: HasAttrs> HasAttrs for Spanned<T> {\n+    fn attrs(&self) -> &[ast::Attribute] { self.node.attrs() }\n+    fn map_attrs<F: FnOnce(Vec<ast::Attribute>) -> Vec<ast::Attribute>>(self, f: F) -> Self {\n+        Spanned { node: self.node.map_attrs(f), span: self.span }\n+    }\n+}\n+\n impl HasAttrs for Vec<Attribute> {\n     fn attrs(&self) -> &[Attribute] {\n         &self\n@@ -1012,26 +1019,31 @@ impl HasAttrs for StmtKind {\n     }\n }\n \n-macro_rules! derive_has_attrs_from_field {\n-    ($($ty:path),*) => { derive_has_attrs_from_field!($($ty: .attrs),*); };\n-    ($($ty:path : $(.$field:ident)*),*) => { $(\n+impl HasAttrs for Stmt {\n+    fn attrs(&self) -> &[ast::Attribute] { self.node.attrs() }\n+    fn map_attrs<F: FnOnce(Vec<ast::Attribute>) -> Vec<ast::Attribute>>(self, f: F) -> Self {\n+        Stmt { id: self.id, node: self.node.map_attrs(f), span: self.span }\n+    }\n+}\n+\n+macro_rules! derive_has_attrs {\n+    ($($ty:path),*) => { $(\n         impl HasAttrs for $ty {\n             fn attrs(&self) -> &[Attribute] {\n-                self $(.$field)* .attrs()\n+                &self.attrs\n             }\n \n             fn map_attrs<F>(mut self, f: F) -> Self\n                 where F: FnOnce(Vec<Attribute>) -> Vec<Attribute>,\n             {\n-                self $(.$field)* = self $(.$field)* .map_attrs(f);\n+                self.attrs = self.attrs.map_attrs(f);\n                 self\n             }\n         }\n     )* }\n }\n \n-derive_has_attrs_from_field! {\n-    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm\n+derive_has_attrs! {\n+    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n+    ast::Field, ast::FieldPat, ast::Variant_\n }\n-\n-derive_has_attrs_from_field! { Stmt: .node, ast::Variant: .node.attrs }"}, {"sha": "ea12a31770fc07ba93fd556197103d65658f1bec", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -221,11 +221,21 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     pub fn configure_expr_kind(&mut self, expr_kind: ast::ExprKind) -> ast::ExprKind {\n-        if let ast::ExprKind::Match(m, arms) = expr_kind {\n-            let arms = arms.into_iter().filter_map(|a| self.configure(a)).collect();\n-            ast::ExprKind::Match(m, arms)\n-        } else {\n-            expr_kind\n+        match expr_kind {\n+            ast::ExprKind::Match(m, arms) => {\n+                let arms = arms.into_iter().filter_map(|a| self.configure(a)).collect();\n+                ast::ExprKind::Match(m, arms)\n+            }\n+            ast::ExprKind::Struct(path, fields, base) => {\n+                let fields = fields.into_iter()\n+                    .filter_map(|field| {\n+                        self.visit_struct_field_attrs(field.attrs());\n+                        self.configure(field)\n+                    })\n+                    .collect();\n+                ast::ExprKind::Struct(path, fields, base)\n+            }\n+            _ => expr_kind,\n         }\n     }\n \n@@ -250,6 +260,51 @@ impl<'a> StripUnconfigured<'a> {\n     pub fn configure_stmt(&mut self, stmt: ast::Stmt) -> Option<ast::Stmt> {\n         self.configure(stmt)\n     }\n+\n+    pub fn configure_struct_expr_field(&mut self, field: ast::Field) -> Option<ast::Field> {\n+        if !self.features.map(|features| features.struct_field_attributes).unwrap_or(true) {\n+            if !field.attrs.is_empty() {\n+                let mut err = feature_err(&self.sess,\n+                                          \"struct_field_attributes\",\n+                                          field.span,\n+                                          GateIssue::Language,\n+                                          \"attributes on struct literal fields are unstable\");\n+                err.emit();\n+            }\n+        }\n+\n+        self.configure(field)\n+    }\n+\n+    pub fn configure_pat(&mut self, pattern: P<ast::Pat>) -> P<ast::Pat> {\n+        pattern.map(|mut pattern| {\n+            if let ast::PatKind::Struct(path, fields, etc) = pattern.node {\n+                let fields = fields.into_iter()\n+                    .filter_map(|field| {\n+                        self.visit_struct_field_attrs(field.attrs());\n+                        self.configure(field)\n+                    })\n+                    .collect();\n+                pattern.node = ast::PatKind::Struct(path, fields, etc);\n+            }\n+            pattern\n+        })\n+    }\n+\n+    fn visit_struct_field_attrs(&mut self, attrs: &[ast::Attribute]) {\n+        // flag the offending attributes\n+        for attr in attrs.iter() {\n+            if !self.features.map(|features| features.struct_field_attributes).unwrap_or(true) {\n+                let mut err = feature_err(\n+                    &self.sess,\n+                    \"struct_field_attributes\",\n+                    attr.span,\n+                    GateIssue::Language,\n+                    \"attributes on struct pattern or literal fields are unstable\");\n+                err.emit();\n+            }\n+        }\n+    }\n }\n \n impl<'a> fold::Folder for StripUnconfigured<'a> {\n@@ -299,6 +354,10 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n         // Interpolated AST will get configured once the surrounding tokens are parsed.\n         mac\n     }\n+\n+    fn fold_pat(&mut self, pattern: P<ast::Pat>) -> P<ast::Pat> {\n+        fold::noop_fold_pat(self.configure_pat(pattern), self)\n+    }\n }\n \n fn is_cfg(attr: &ast::Attribute) -> bool {"}, {"sha": "688df96ffa32fcfde245a767a0aa69001b243acc", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -699,7 +699,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(b.span, ast::ExprKind::Block(b))\n     }\n     fn field_imm(&self, span: Span, name: Ident, e: P<ast::Expr>) -> ast::Field {\n-        ast::Field { ident: respan(span, name), expr: e, span: span, is_shorthand: false }\n+        ast::Field {\n+            ident: respan(span, name),\n+            expr: e,\n+            span: span,\n+            is_shorthand: false,\n+            attrs: ast::ThinVec::new(),\n+        }\n     }\n     fn expr_struct(&self, span: Span, path: ast::Path, fields: Vec<ast::Field>) -> P<ast::Expr> {\n         self.expr(span, ast::ExprKind::Struct(path, fields, None))"}, {"sha": "968e7e7a91997d2f67c83588f984f98467fe887f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -679,6 +679,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_pat(&mut self, pat: P<ast::Pat>) -> P<ast::Pat> {\n+        let pat = self.cfg.configure_pat(pat);\n         match pat.node {\n             PatKind::Mac(_) => {}\n             _ => return noop_fold_pat(pat, self),"}, {"sha": "0e9ff828ccaadd05a9cb045413ccd65ac3e2d0a7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -327,6 +327,9 @@ declare_features! (\n \n     // The `unadjusted` ABI. Perma unstable.\n     (active, abi_unadjusted, \"1.16.0\", None),\n+\n+    // Allows attributes on struct literal fields.\n+    (active, struct_field_attributes, \"1.16.0\", Some(38814)),\n );\n \n declare_features! ("}, {"sha": "13869c0d54550e278bf02287f2584527dcd92cb8", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -830,6 +830,7 @@ pub fn noop_fold_field<T: Folder>(f: Field, folder: &mut T) -> Field {\n         expr: folder.fold_expr(f.expr),\n         span: folder.new_span(f.span),\n         is_shorthand: f.is_shorthand,\n+        attrs: fold_thin_attrs(f.attrs, folder),\n     }\n }\n \n@@ -1089,6 +1090,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                                   ident: folder.fold_ident(f.node.ident),\n                                   pat: folder.fold_pat(f.node.pat),\n                                   is_shorthand: f.node.is_shorthand,\n+                                  attrs: fold_attrs(f.node.attrs.into(), folder).into()\n                               }}\n                 });\n                 PatKind::Struct(pth, fs, etc)"}, {"sha": "167fa78d7e07500fdd861d6d7b03caff5a4ac486", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -1946,6 +1946,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse ident (COLON expr)?\n     pub fn parse_field(&mut self) -> PResult<'a, Field> {\n+        let attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n         let hi;\n \n@@ -1968,6 +1969,7 @@ impl<'a> Parser<'a> {\n             span: mk_sp(lo, expr.span.hi),\n             expr: expr,\n             is_shorthand: is_shorthand,\n+            attrs: attrs.into(),\n         })\n     }\n \n@@ -3436,6 +3438,7 @@ impl<'a> Parser<'a> {\n                 if self.check(&token::CloseDelim(token::Brace)) { break }\n             }\n \n+            let attrs = self.parse_outer_attributes()?;\n             let lo = self.span.lo;\n             let hi;\n \n@@ -3493,9 +3496,13 @@ impl<'a> Parser<'a> {\n             };\n \n             fields.push(codemap::Spanned { span: mk_sp(lo, hi),\n-                                              node: ast::FieldPat { ident: fieldname,\n-                                                                    pat: subpat,\n-                                                                    is_shorthand: is_shorthand }});\n+                                           node: ast::FieldPat {\n+                                               ident: fieldname,\n+                                               pat: subpat,\n+                                               is_shorthand: is_shorthand,\n+                                               attrs: attrs.into(),\n+                                           }\n+            });\n         }\n         return Ok((fields, etc));\n     }"}, {"sha": "04100b3af001dd0c5c266d887ab6ad9fd1234e44", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -427,6 +427,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         PatKind::Struct(ref path, ref fields, _) => {\n             visitor.visit_path(path, pattern.id);\n             for field in fields {\n+                walk_list!(visitor, visit_attribute, field.node.attrs.iter());\n                 visitor.visit_ident(field.span, field.node.ident);\n                 visitor.visit_pat(&field.node.pat)\n             }\n@@ -659,6 +660,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Struct(ref path, ref fields, ref optional_base) => {\n             visitor.visit_path(path, expression.id);\n             for field in fields {\n+                walk_list!(visitor, visit_attribute, field.attrs.iter());\n                 visitor.visit_ident(field.ident.span, field.ident.node);\n                 visitor.visit_expr(&field.expr)\n             }"}, {"sha": "1f50ceb626c7c2018648d128011c70eef48b22b8", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -1550,6 +1550,7 @@ impl<'a> TraitDef<'a> {\n                                 ident: ident.unwrap(),\n                                 pat: pat,\n                                 is_shorthand: false,\n+                                attrs: ast::ThinVec::new(),\n                             },\n                         }\n                     })"}, {"sha": "665c3fd67f48f292d2bc9181878d8cccdace7903", "filename": "src/test/compile-fail/struct-field-attr-feature-gate.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Ftest%2Fcompile-fail%2Fstruct-field-attr-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Ftest%2Fcompile-fail%2Fstruct-field-attr-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-attr-feature-gate.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    present: (),\n+}\n+\n+fn main() {\n+    let foo = Foo { #[cfg(all())] present: () };\n+    //~^ ERROR attributes on struct pattern or literal fields are unstable\n+    let Foo { #[cfg(all())] present: () } = foo;\n+    //~^ ERROR attributes on struct pattern or literal fields are unstable\n+}"}, {"sha": "9fb130f4d54fe8cebd73d9f73241fb4f1730b048", "filename": "src/test/compile-fail/struct-field-cfg.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Ftest%2Fcompile-fail%2Fstruct-field-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7972c1905beb9d1169475f42231b25d0bc9e83e6/src%2Ftest%2Fcompile-fail%2Fstruct-field-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-cfg.rs?ref=7972c1905beb9d1169475f42231b25d0bc9e83e6", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(struct_field_attributes)]\n+\n+struct Foo {\n+    present: (),\n+}\n+\n+fn main() {\n+    let foo = Foo { #[cfg(all())] present: () };\n+    let _ = Foo { #[cfg(any())] present: () };\n+    //~^ ERROR missing field `present` in initializer of `Foo`\n+    let _ = Foo { present: (), #[cfg(any())] absent: () };\n+    let _ = Foo { present: (), #[cfg(all())] absent: () };\n+    //~^ ERROR struct `Foo` has no field named `absent`\n+    let Foo { #[cfg(all())] present: () } = foo;\n+    let Foo { #[cfg(any())] present: () } = foo;\n+    //~^ ERROR pattern does not mention field `present`\n+    let Foo { present: (), #[cfg(any())] absent: () } = foo;\n+    let Foo { present: (), #[cfg(all())] absent: () } = foo;\n+    //~^ ERROR struct `Foo` does not have a field named `absent`\n+}"}]}