{"sha": "fd8aa9afbd42cc6979c0b83690b32d27cc7afa78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGFhOWFmYmQ0MmNjNjk3OWMwYjgzNjkwYjMyZDI3Y2M3YWZhNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T17:55:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T17:55:02Z"}, "message": "auto merge of #7177 : huonw/rust/unfold-fix, r=thestinger", "tree": {"sha": "a580268fc410dd81fab02cdc1fdfe08a99d4855d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a580268fc410dd81fab02cdc1fdfe08a99d4855d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78", "html_url": "https://github.com/rust-lang/rust/commit/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae23beb52f637b8c8640706ee8c6d2d4a5796bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae23beb52f637b8c8640706ee8c6d2d4a5796bc8", "html_url": "https://github.com/rust-lang/rust/commit/ae23beb52f637b8c8640706ee8c6d2d4a5796bc8"}, {"sha": "53f6a4e9fbc3e8bb1fcf47ec3676c791892ea1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f6a4e9fbc3e8bb1fcf47ec3676c791892ea1b1", "html_url": "https://github.com/rust-lang/rust/commit/53f6a4e9fbc3e8bb1fcf47ec3676c791892ea1b1"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "946cf7a72767f7c97948f6221bb2b71519b1893d", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=fd8aa9afbd42cc6979c0b83690b32d27cc7afa78", "patch": "@@ -816,8 +816,8 @@ impl<'self, A, St> UnfoldrIterator<'self, A, St> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the iterator\n     #[inline]\n-    pub fn new(f: &'self fn(&mut St) -> Option<A>, initial_state: St)\n-        -> UnfoldrIterator<'self, A, St> {\n+    pub fn new<'a>(f: &'a fn(&mut St) -> Option<A>, initial_state: St)\n+        -> UnfoldrIterator<'a, A, St> {\n         UnfoldrIterator {\n             f: f,\n             state: initial_state"}, {"sha": "4e98543ae826ea7e7e8ea2fc0ab2da978be6e5ca", "filename": "src/test/run-pass/unfoldr-cross-crate.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa9afbd42cc6979c0b83690b32d27cc7afa78/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs?ref=fd8aa9afbd42cc6979c0b83690b32d27cc7afa78", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::iterator::*;\n+\n+// UnfoldrIterator had a bug with 'self that mean it didn't work\n+// cross-crate\n+\n+fn main() {\n+    fn count(st: &mut uint) -> Option<uint> {\n+        if *st < 10 {\n+            let ret = Some(*st);\n+            *st += 1;\n+            ret\n+        } else {\n+            None\n+        }\n+    }\n+\n+    let mut it = UnfoldrIterator::new(count, 0);\n+    let mut i = 0;\n+    for it.advance |counted| {\n+        assert_eq!(counted, i);\n+        i += 1;\n+    }\n+    assert_eq!(i, 10);\n+}"}]}