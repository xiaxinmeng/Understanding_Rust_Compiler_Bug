{"sha": "22719efcc570b043f2e519d6025e5f36eab38fe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzE5ZWZjYzU3MGIwNDNmMmU1MTlkNjAyNWU1ZjM2ZWFiMzhmZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T03:30:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T03:30:55Z"}, "message": "Auto merge of #88824 - Manishearth:rollup-7bzk9h6, r=Manishearth\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #85200 (Ignore derived Clone and Debug implementations during dead code analysis)\n - #86165 (Add proc_macro::Span::{before, after}.)\n - #87088 (Fix stray notes when the source code is not available)\n - #87441 (Emit suggestion when passing byte literal to format macro)\n - #88546 (Emit proper errors when on missing closure braces)\n - #88578 (fix(rustc): suggest `items` be borrowed in `for i in items[x..]`)\n - #88632 (Fix issues with Markdown summary options)\n - #88639 (rustdoc: Fix ICE with `doc(hidden)` on tuple variant fields)\n - #88667 (Tweak `write_fmt` doc.)\n - #88720 (Rustdoc coverage fields count)\n - #88732 (RustWrapper: avoid deleted unclear attribute methods)\n - #88742 (Fix table in docblocks)\n - #88776 (Workaround blink/chromium grid layout limitation of 1000 rows)\n - #88807 (Fix typo in docs for iterators)\n - #88812 (Fix typo `option` -> `options`.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f7fb4178f9e9964f7a1965b9c13e9c1654cb1cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fb4178f9e9964f7a1965b9c13e9c1654cb1cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22719efcc570b043f2e519d6025e5f36eab38fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22719efcc570b043f2e519d6025e5f36eab38fe2", "html_url": "https://github.com/rust-lang/rust/commit/22719efcc570b043f2e519d6025e5f36eab38fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22719efcc570b043f2e519d6025e5f36eab38fe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69fe57261086e70aea9d5b58819a1794bf7c121", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69fe57261086e70aea9d5b58819a1794bf7c121", "html_url": "https://github.com/rust-lang/rust/commit/b69fe57261086e70aea9d5b58819a1794bf7c121"}, {"sha": "f77311bc2b01a2708e5676a9a3bcb3d07d5040e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f77311bc2b01a2708e5676a9a3bcb3d07d5040e2", "html_url": "https://github.com/rust-lang/rust/commit/f77311bc2b01a2708e5676a9a3bcb3d07d5040e2"}], "stats": {"total": 1188, "additions": 976, "deletions": 212}, "files": [{"sha": "f4cbbb60b053a2625f1c4578c96545d09a04a53c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -218,7 +218,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             );\n                             if self.fn_self_span_reported.insert(fn_span) {\n                                 err.span_note(\n-                                    self_arg.span,\n+                                    // Check whether the source is accessible\n+                                    if self\n+                                        .infcx\n+                                        .tcx\n+                                        .sess\n+                                        .source_map()\n+                                        .span_to_snippet(self_arg.span)\n+                                        .is_ok()\n+                                    {\n+                                        self_arg.span\n+                                    } else {\n+                                        fn_call_span\n+                                    },\n                                     \"calling this operator moves the left-hand side\",\n                                 );\n                             }\n@@ -429,7 +441,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     deref_target_ty\n                 ));\n \n-                err.span_note(deref_target, \"deref defined here\");\n+                // Check first whether the source is accessible (issue #87060)\n+                if self.infcx.tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                    err.span_note(deref_target, \"deref defined here\");\n+                }\n             }\n \n             if let Some((_, mut old_err)) ="}, {"sha": "693114e378664851ccc7179b65f1f87db5f0fd46", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -510,7 +510,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             match expr_to_spanned_string(ecx, template_expr, msg) {\n                 Ok(template_part) => template_part,\n                 Err(err) => {\n-                    if let Some(mut err) = err {\n+                    if let Some((mut err, _)) = err {\n                         err.emit();\n                     }\n                     return None;"}, {"sha": "c7626dec4d7c0b29bc5c07efb1f0f2c1a0154906", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -964,17 +964,19 @@ pub fn expand_preparsed_format_args(\n         }\n         Ok(fmt) => fmt,\n         Err(err) => {\n-            if let Some(mut err) = err {\n+            if let Some((mut err, suggested)) = err {\n                 let sugg_fmt = match args.len() {\n                     0 => \"{}\".to_string(),\n                     _ => format!(\"{}{{}}\", \"{} \".repeat(args.len())),\n                 };\n-                err.span_suggestion(\n-                    fmt_sp.shrink_to_lo(),\n-                    \"you might be missing a string literal to format with\",\n-                    format!(\"\\\"{}\\\", \", sugg_fmt),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                if !suggested {\n+                    err.span_suggestion(\n+                        fmt_sp.shrink_to_lo(),\n+                        \"you might be missing a string literal to format with\",\n+                        format!(\"\\\"{}\\\", \", sugg_fmt),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err.emit();\n             }\n             return DummyResult::raw_expr(sp, true);"}, {"sha": "6a135dd4f1f6a79903cfba89111e5cacd59c9eb6", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -1136,36 +1136,51 @@ impl<'a> ExtCtxt<'a> {\n }\n \n /// Extracts a string literal from the macro expanded version of `expr`,\n-/// emitting `err_msg` if `expr` is not a string literal. This does not stop\n-/// compilation on error, merely emits a non-fatal error and returns `None`.\n+/// returning a diagnostic error of `err_msg` if `expr` is not a string literal.\n+/// The returned bool indicates whether an applicable suggestion has already been\n+/// added to the diagnostic to avoid emitting multiple suggestions. `Err(None)`\n+/// indicates that an ast error was encountered.\n pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n     err_msg: &str,\n-) -> Result<(Symbol, ast::StrStyle, Span), Option<DiagnosticBuilder<'a>>> {\n+) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a>, bool)>> {\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n     let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();\n \n     Err(match expr.kind {\n         ast::ExprKind::Lit(ref l) => match l.kind {\n             ast::LitKind::Str(s, style) => return Ok((s, style, expr.span)),\n+            ast::LitKind::ByteStr(_) => {\n+                let mut err = cx.struct_span_err(l.span, err_msg);\n+                err.span_suggestion(\n+                    expr.span.shrink_to_lo(),\n+                    \"consider removing the leading `b`\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                Some((err, true))\n+            }\n             ast::LitKind::Err(_) => None,\n-            _ => Some(cx.struct_span_err(l.span, err_msg)),\n+            _ => Some((cx.struct_span_err(l.span, err_msg), false)),\n         },\n         ast::ExprKind::Err => None,\n-        _ => Some(cx.struct_span_err(expr.span, err_msg)),\n+        _ => Some((cx.struct_span_err(expr.span, err_msg), false)),\n     })\n }\n \n+/// Extracts a string literal from the macro expanded version of `expr`,\n+/// emitting `err_msg` if `expr` is not a string literal. This does not stop\n+/// compilation on error, merely emits a non-fatal error and returns `None`.\n pub fn expr_to_string(\n     cx: &mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n     err_msg: &str,\n ) -> Option<(Symbol, ast::StrStyle)> {\n     expr_to_spanned_string(cx, expr, err_msg)\n         .map_err(|err| {\n-            err.map(|mut err| {\n+            err.map(|(mut err, _)| {\n                 err.emit();\n             })\n         })"}, {"sha": "02d92e7c90a0d07c89c5ac58f21df53caaab58ec", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -758,6 +758,12 @@ impl server::Span for Rustc<'_> {\n         let loc = self.sess.source_map().lookup_char_pos(span.hi());\n         LineColumn { line: loc.line, column: loc.col.to_usize() }\n     }\n+    fn before(&mut self, span: Self::Span) -> Self::Span {\n+        span.shrink_to_lo()\n+    }\n+    fn after(&mut self, span: Self::Span) -> Self::Span {\n+        span.shrink_to_hi()\n+    }\n     fn join(&mut self, first: Self::Span, second: Self::Span) -> Option<Self::Span> {\n         let self_loc = self.sess.source_map().lookup_char_pos(first.lo());\n         let other_loc = self.sess.source_map().lookup_char_pos(second.lo());"}, {"sha": "61e27d2e4cd41053db35dc55d60c8effeabdc63b", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -16,7 +16,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: None,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+\n         ];"}, {"sha": "366ed715434eda4e2598b6ea7558588881b43e72", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -37,7 +37,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: $edition,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+];\n "}, {"sha": "f74ea0e0c4d271c979df7f85c251922e1eb59f12", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -453,6 +453,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     // Enumerates \"identity-like\" conversion methods to suggest on type mismatch.\n     rustc_attr!(rustc_conversion_suggestion, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    // Prevents field reads in the marked trait or method to be considered\n+    // during dead code analysis.\n+    rustc_attr!(rustc_trivial_field_reads, Normal, template!(Word), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "b25aab21e491afa1a54ac74cf7ad3fb7bff7bcc5", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -51,7 +51,6 @@ pub struct Feature {\n     pub since: &'static str,\n     issue: Option<NonZeroU32>,\n     pub edition: Option<Edition>,\n-    description: &'static str,\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "7b9b68268eacd8df4f5d51e684b5796f11a59e96", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -16,7 +16,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: None,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+\n         ];\n@@ -34,7 +33,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: None,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+\n         ];"}, {"sha": "9850f395a0f650a05d9bbb3e06ddb24b248e17d1", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -203,56 +203,57 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n   report_fatal_error(\"bad AttributeKind\");\n }\n \n+template<typename T> static inline void AddAttribute(T *t, unsigned Index, Attribute Attr) {\n+#if LLVM_VERSION_LT(14, 0)\n+  t->addAttribute(Index, Attr);\n+#else\n+  t->addAttributeAtIndex(Index, Attr);\n+#endif\n+}\n+\n extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n   Attribute Attr = Attribute::get(Call->getContext(), fromRust(RustAttr));\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddCallSiteAttrString(LLVMValueRef Instr, unsigned Index,\n                                               const char *Name) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n   Attribute Attr = Attribute::get(Call->getContext(), Name);\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n-\n extern \"C\" void LLVMRustAddAlignmentCallSiteAttr(LLVMValueRef Instr,\n                                                  unsigned Index,\n                                                  uint32_t Bytes) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-  AttrBuilder B;\n-  B.addAlignmentAttr(Bytes);\n-  Call->setAttributes(Call->getAttributes().addAttributes(\n-      Call->getContext(), Index, B));\n+  Attribute Attr = Attribute::getWithAlignment(Call->getContext(), Align(Bytes));\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n                                                        unsigned Index,\n                                                        uint64_t Bytes) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-  AttrBuilder B;\n-  B.addDereferenceableAttr(Bytes);\n-  Call->setAttributes(Call->getAttributes().addAttributes(\n-      Call->getContext(), Index, B));\n+  Attribute Attr = Attribute::getWithDereferenceableBytes(Call->getContext(), Bytes);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n                                                              unsigned Index,\n                                                              uint64_t Bytes) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-  AttrBuilder B;\n-  B.addDereferenceableOrNullAttr(Bytes);\n-  Call->setAttributes(Call->getAttributes().addAttributes(\n-      Call->getContext(), Index, B));\n+  Attribute Attr = Attribute::getWithDereferenceableOrNullBytes(Call->getContext(), Bytes);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n                                              LLVMTypeRef Ty) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n   Attribute Attr = Attribute::getWithByValType(Call->getContext(), unwrap(Ty));\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddStructRetCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n@@ -263,44 +264,44 @@ extern \"C\" void LLVMRustAddStructRetCallSiteAttr(LLVMValueRef Instr, unsigned In\n #else\n   Attribute Attr = Attribute::get(Call->getContext(), Attribute::StructRet);\n #endif\n-  Call->addAttribute(Index, Attr);\n+  AddAttribute(Call, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::get(A->getContext(), fromRust(RustAttr));\n-  A->addAttribute(Index, Attr);\n+  AddAttribute(A, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddAlignmentAttr(LLVMValueRef Fn,\n                                          unsigned Index,\n                                          uint32_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  A->addAttribute(Index, Attribute::getWithAlignment(\n+  AddAttribute(A, Index, Attribute::getWithAlignment(\n       A->getContext(), llvm::Align(Bytes)));\n }\n \n extern \"C\" void LLVMRustAddDereferenceableAttr(LLVMValueRef Fn, unsigned Index,\n                                                uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  A->addAttribute(Index, Attribute::getWithDereferenceableBytes(A->getContext(),\n+  AddAttribute(A, Index, Attribute::getWithDereferenceableBytes(A->getContext(),\n                                                                 Bytes));\n }\n \n extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n                                                      unsigned Index,\n                                                      uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  A->addAttribute(Index, Attribute::getWithDereferenceableOrNullBytes(\n+  AddAttribute(A, Index, Attribute::getWithDereferenceableOrNullBytes(\n       A->getContext(), Bytes));\n }\n \n extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n                                      LLVMTypeRef Ty) {\n   Function *F = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::getWithByValType(F->getContext(), unwrap(Ty));\n-  F->addAttribute(Index, Attr);\n+  AddAttribute(F, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n@@ -311,15 +312,15 @@ extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n #else\n   Attribute Attr = Attribute::get(F->getContext(), Attribute::StructRet);\n #endif\n-  F->addAttribute(Index, Attr);\n+  AddAttribute(F, Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,\n                                                    const char *Value) {\n   Function *F = unwrap<Function>(Fn);\n-  F->addAttribute(Index, Attribute::get(\n+  AddAttribute(F, Index, Attribute::get(\n       F->getContext(), StringRef(Name), StringRef(Value)));\n }\n \n@@ -330,7 +331,12 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n   Attribute Attr = Attribute::get(F->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n   auto PAL = F->getAttributes();\n-  auto PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+  AttributeList PALNew;\n+#if LLVM_VERSION_LT(14, 0)\n+  PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+#else\n+  PALNew = PAL.removeAttributesAtIndex(F->getContext(), Index, B);\n+#endif\n   F->setAttributes(PALNew);\n }\n "}, {"sha": "082948eba416d62c08714c36ac92d1b9be971e53", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -62,13 +62,6 @@ fn hash_body(\n     stable_hasher.finish()\n }\n \n-/// Represents an entry and its parent `HirId`.\n-#[derive(Copy, Clone, Debug)]\n-pub struct Entry<'hir> {\n-    parent: HirId,\n-    node: Node<'hir>,\n-}\n-\n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,"}, {"sha": "1c7e022673d95f68b2c9e94fa6bfba389f890809", "filename": "compiler/rustc_middle/src/ich/hcx.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -28,7 +28,6 @@ fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n /// things (e.g., each `DefId`/`DefPath` is only hashed once).\n #[derive(Clone)]\n pub struct StableHashingContext<'a> {\n-    sess: &'a Session,\n     definitions: &'a Definitions,\n     cstore: &'a dyn CrateStore,\n     pub(super) body_resolver: BodyResolver<'a>,\n@@ -78,7 +77,6 @@ impl<'a> StableHashingContext<'a> {\n             !always_ignore_spans && !sess.opts.debugging_opts.incremental_ignore_spans;\n \n         StableHashingContext {\n-            sess,\n             body_resolver: BodyResolver(krate),\n             definitions,\n             cstore,"}, {"sha": "0ff3fc60995bf0a011082412a42f79d874b4cf73", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -900,10 +900,7 @@ fn traverse_candidate<'pat, 'tcx: 'pat, C, T, I>(\n struct Binding<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    name: Symbol,\n     var_id: HirId,\n-    var_ty: Ty<'tcx>,\n-    mutability: Mutability,\n     binding_mode: BindingMode,\n }\n "}, {"sha": "4ce26cc8dff46a10f4ecde92cba0feb3833425ac", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -176,17 +176,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Ok(())\n             }\n \n-            PatKind::Binding { name, mutability, mode, var, ty, ref subpattern, is_primary: _ } => {\n+            PatKind::Binding {\n+                name: _,\n+                mutability: _,\n+                mode,\n+                var,\n+                ty: _,\n+                ref subpattern,\n+                is_primary: _,\n+            } => {\n                 if let Ok(place_resolved) =\n                     match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n                 {\n                     candidate.bindings.push(Binding {\n-                        name,\n-                        mutability,\n                         span: match_pair.pattern.span,\n                         source: place_resolved.into_place(self.tcx, self.typeck_results),\n                         var_id: var,\n-                        var_ty: ty,\n                         binding_mode: mode,\n                     });\n                 }"}, {"sha": "b74208edafea6172643d9c02f41a5a8cfb7679d2", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -118,9 +118,6 @@ struct Scope {\n     /// the region span of this scope within source code.\n     region_scope: region::Scope,\n \n-    /// the span of that region_scope\n-    region_scope_span: Span,\n-\n     /// set of places to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n     /// building process. This is a stack, so we always drop from the\n@@ -420,7 +417,6 @@ impl<'tcx> Scopes<'tcx> {\n         self.scopes.push(Scope {\n             source_scope: vis_scope,\n             region_scope: region_scope.0,\n-            region_scope_span: region_scope.1.span,\n             drops: vec![],\n             moved_locals: vec![],\n             cached_unwind_block: None,"}, {"sha": "b9e3c058ad7ec355e98206308bc31bb0e368cc5b", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         }\n \n         if let Err(e) = result {\n-            bug!(\"Error processing: {:?}: {:?}\", self.mir_body.source.def_id(), e)\n+            bug!(\"Error processing: {:?}: {:?}\", self.mir_body.source.def_id(), e.message)\n         };\n \n         // Depending on current `debug_options()`, `alert_on_unused_expressions()` could panic, so"}, {"sha": "dc80dab8c6c5f9d55f4c480a1ae932966fd74141", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,9 +1,12 @@\n use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n-use super::{AttrWrapper, BlockMode, ForceCollect, Parser, PathStyle, Restrictions, TokenType};\n+use super::{\n+    AttrWrapper, BlockMode, ClosureSpans, ForceCollect, Parser, PathStyle, Restrictions, TokenType,\n+};\n use super::{SemiColonMode, SeqSep, TokenExpectType, TrailingToken};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n+use ast::token::DelimToken;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::tokenstream::Spacing;\n@@ -91,6 +94,8 @@ impl<'a> Parser<'a> {\n     /// Parses an expression.\n     #[inline]\n     pub fn parse_expr(&mut self) -> PResult<'a, P<Expr>> {\n+        self.current_closure.take();\n+\n         self.parse_expr_res(Restrictions::empty(), None)\n     }\n \n@@ -1736,7 +1741,7 @@ impl<'a> Parser<'a> {\n         let capture_clause = self.parse_capture_clause()?;\n         let decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_token.span;\n-        let body = match decl.output {\n+        let mut body = match decl.output {\n             FnRetTy::Default(_) => {\n                 let restrictions = self.restrictions - Restrictions::STMT_EXPR;\n                 self.parse_expr_res(restrictions, None)?\n@@ -1753,11 +1758,28 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.gate(sym::async_closure, span);\n         }\n \n-        Ok(self.mk_expr(\n+        if self.token.kind == TokenKind::Semi && self.token_cursor.frame.delim == DelimToken::Paren\n+        {\n+            // It is likely that the closure body is a block but where the\n+            // braces have been removed. We will recover and eat the next\n+            // statements later in the parsing process.\n+            body = self.mk_expr_err(body.span);\n+        }\n+\n+        let body_span = body.span;\n+\n+        let closure = self.mk_expr(\n             lo.to(body.span),\n             ExprKind::Closure(capture_clause, asyncness, movability, decl, body, lo.to(decl_hi)),\n             attrs,\n-        ))\n+        );\n+\n+        // Disable recovery for closure body\n+        let spans =\n+            ClosureSpans { whole_closure: closure.span, closing_pipe: decl_hi, body: body_span };\n+        self.current_closure = Some(spans);\n+\n+        Ok(closure)\n     }\n \n     /// Parses an optional `move` prefix to a closure-like construct."}, {"sha": "5c701fefd17de95b0d95dfaeaa64f625f61f27e2", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 98, "deletions": 5, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -142,6 +142,17 @@ pub struct Parser<'a> {\n     /// If present, this `Parser` is not parsing Rust code but rather a macro call.\n     subparser_name: Option<&'static str>,\n     capture_state: CaptureState,\n+    /// This allows us to recover when the user forget to add braces around\n+    /// multiple statements in the closure body.\n+    pub current_closure: Option<ClosureSpans>,\n+}\n+\n+/// Stores span informations about a closure.\n+#[derive(Clone)]\n+pub struct ClosureSpans {\n+    pub whole_closure: Span,\n+    pub closing_pipe: Span,\n+    pub body: Span,\n }\n \n /// Indicates a range of tokens that should be replaced by\n@@ -440,6 +451,7 @@ impl<'a> Parser<'a> {\n                 replace_ranges: Vec::new(),\n                 inner_attr_ranges: Default::default(),\n             },\n+            current_closure: None,\n         };\n \n         // Make parser point to the first token.\n@@ -761,19 +773,41 @@ impl<'a> Parser<'a> {\n                     first = false;\n                 } else {\n                     match self.expect(t) {\n-                        Ok(false) => {}\n+                        Ok(false) => {\n+                            self.current_closure.take();\n+                        }\n                         Ok(true) => {\n+                            self.current_closure.take();\n                             recovered = true;\n                             break;\n                         }\n                         Err(mut expect_err) => {\n                             let sp = self.prev_token.span.shrink_to_hi();\n                             let token_str = pprust::token_kind_to_string(t);\n \n-                            // Attempt to keep parsing if it was a similar separator.\n-                            if let Some(ref tokens) = t.similar_tokens() {\n-                                if tokens.contains(&self.token.kind) && !unclosed_delims {\n-                                    self.bump();\n+                            match self.current_closure.take() {\n+                                Some(closure_spans) if self.token.kind == TokenKind::Semi => {\n+                                    // Finding a semicolon instead of a comma\n+                                    // after a closure body indicates that the\n+                                    // closure body may be a block but the user\n+                                    // forgot to put braces around its\n+                                    // statements.\n+\n+                                    self.recover_missing_braces_around_closure_body(\n+                                        closure_spans,\n+                                        expect_err,\n+                                    )?;\n+\n+                                    continue;\n+                                }\n+\n+                                _ => {\n+                                    // Attempt to keep parsing if it was a similar separator.\n+                                    if let Some(ref tokens) = t.similar_tokens() {\n+                                        if tokens.contains(&self.token.kind) && !unclosed_delims {\n+                                            self.bump();\n+                                        }\n+                                    }\n                                 }\n                             }\n \n@@ -839,6 +873,65 @@ impl<'a> Parser<'a> {\n         Ok((v, trailing, recovered))\n     }\n \n+    fn recover_missing_braces_around_closure_body(\n+        &mut self,\n+        closure_spans: ClosureSpans,\n+        mut expect_err: DiagnosticBuilder<'_>,\n+    ) -> PResult<'a, ()> {\n+        let initial_semicolon = self.token.span;\n+\n+        while self.eat(&TokenKind::Semi) {\n+            let _ = self.parse_stmt(ForceCollect::Yes)?;\n+        }\n+\n+        expect_err.set_primary_message(\n+            \"closure bodies that contain statements must be surrounded by braces\",\n+        );\n+\n+        let preceding_pipe_span = closure_spans.closing_pipe;\n+        let following_token_span = self.token.span;\n+\n+        let mut first_note = MultiSpan::from(vec![initial_semicolon]);\n+        first_note.push_span_label(\n+            initial_semicolon,\n+            \"this `;` turns the preceding closure into a statement\".to_string(),\n+        );\n+        first_note.push_span_label(\n+            closure_spans.body,\n+            \"this expression is a statement because of the trailing semicolon\".to_string(),\n+        );\n+        expect_err.span_note(first_note, \"statement found outside of a block\");\n+\n+        let mut second_note = MultiSpan::from(vec![closure_spans.whole_closure]);\n+        second_note.push_span_label(\n+            closure_spans.whole_closure,\n+            \"this is the parsed closure...\".to_string(),\n+        );\n+        second_note.push_span_label(\n+            following_token_span,\n+            \"...but likely you meant the closure to end here\".to_string(),\n+        );\n+        expect_err.span_note(second_note, \"the closure body may be incorrectly delimited\");\n+\n+        expect_err.set_span(vec![preceding_pipe_span, following_token_span]);\n+\n+        let opening_suggestion_str = \" {\".to_string();\n+        let closing_suggestion_str = \"}\".to_string();\n+\n+        expect_err.multipart_suggestion(\n+            \"try adding braces\",\n+            vec![\n+                (preceding_pipe_span.shrink_to_hi(), opening_suggestion_str),\n+                (following_token_span.shrink_to_lo(), closing_suggestion_str),\n+            ],\n+            Applicability::MaybeIncorrect,\n+        );\n+\n+        expect_err.emit();\n+\n+        Ok(())\n+    }\n+\n     /// Parses a sequence, not including the closing delimiter. The function\n     /// `f` must consume tokens until reaching the next separator or\n     /// closing bracket."}, {"sha": "0a3093757166afee7641ddea25449c5322b27b17", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -239,7 +239,69 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    /// Automatically generated items marked with `rustc_trivial_field_reads`\n+    /// will be ignored for the purposes of dead code analysis (see PR #85200\n+    /// for discussion).\n+    fn should_ignore_item(&self, def_id: DefId) -> bool {\n+        if !self.tcx.has_attr(def_id, sym::automatically_derived)\n+            && !self\n+                .tcx\n+                .impl_of_method(def_id)\n+                .map_or(false, |impl_id| self.tcx.has_attr(impl_id, sym::automatically_derived))\n+        {\n+            return false;\n+        }\n+\n+        let has_attr = |def_id| self.tcx.has_attr(def_id, sym::rustc_trivial_field_reads);\n+\n+        if has_attr(def_id) {\n+            return true;\n+        }\n+\n+        if let Some(impl_of) = self.tcx.impl_of_method(def_id) {\n+            if has_attr(impl_of) {\n+                return true;\n+            }\n+\n+            if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of) {\n+                if has_attr(trait_of) {\n+                    return true;\n+                }\n+\n+                if let Some(method_ident) = self.tcx.opt_item_name(def_id) {\n+                    if let Some(trait_method) = self\n+                        .tcx\n+                        .associated_items(trait_of)\n+                        .find_by_name_and_kind(self.tcx, method_ident, ty::AssocKind::Fn, trait_of)\n+                    {\n+                        if has_attr(trait_method.def_id) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        } else if let Some(trait_of) = self.tcx.trait_of_item(def_id) {\n+            if has_attr(trait_of) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n     fn visit_node(&mut self, node: Node<'tcx>) {\n+        if let Some(item_def_id) = match node {\n+            Node::Item(hir::Item { def_id, .. })\n+            | Node::ForeignItem(hir::ForeignItem { def_id, .. })\n+            | Node::TraitItem(hir::TraitItem { def_id, .. })\n+            | Node::ImplItem(hir::ImplItem { def_id, .. }) => Some(def_id.to_def_id()),\n+            _ => None,\n+        } {\n+            if self.should_ignore_item(item_def_id) {\n+                return;\n+            }\n+        }\n+\n         let had_repr_c = self.repr_has_repr_c;\n         let had_inherited_pub_visibility = self.inherited_pub_visibility;\n         let had_pub_visibility = self.pub_visibility;"}, {"sha": "c816d06045681ddebc9d40cf9417ade9768973da", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1134,6 +1134,7 @@ symbols! {\n         rustc_synthetic,\n         rustc_test_marker,\n         rustc_then_this_would_need,\n+        rustc_trivial_field_reads,\n         rustc_unsafe_specialization_marker,\n         rustc_variance,\n         rustdoc,"}, {"sha": "9371ff3405eb04aefe6c3eca22c305faffd2349e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::ty::{\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, DesugaringKind, ExpnKind, ForLoopLoc, MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use std::fmt;\n \n@@ -680,7 +680,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool {\n-        if !points_at_arg {\n+        let span = obligation.cause.span;\n+        let points_at_for_iter = matches!(\n+            span.ctxt().outer_expn_data().kind,\n+            ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n+        );\n+\n+        if !points_at_arg && !points_at_for_iter {\n             return false;\n         }\n \n@@ -695,7 +701,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n \n-        let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();\n \n@@ -754,7 +759,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     );\n \n                     // This if is to prevent a special edge-case\n-                    if !span.from_expansion() {\n+                    if matches!(\n+                        span.ctxt().outer_expn_data().kind,\n+                        ExpnKind::Root\n+                            | ExpnKind::Desugaring(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n+                    ) {\n                         // We don't want a borrowing suggestion on the fields in structs,\n                         // ```\n                         // struct Foo {"}, {"sha": "b02333b028850fd7a831adeb811e3bd6c7b37e61", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -105,6 +105,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"clone\"]\n #[rustc_diagnostic_item = \"Clone\"]\n+#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]\n pub trait Clone: Sized {\n     /// Returns a copy of the value.\n     ///"}, {"sha": "166a8e3f28a4190e9adfeda75b90ec29153b8429", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -582,6 +582,7 @@ impl Display for Arguments<'_> {\n )]\n #[doc(alias = \"{:?}\")]\n #[rustc_diagnostic_item = \"debug_trait\"]\n+#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     ///"}, {"sha": "9567479c8137b5d4f0a7e8e0f07d7ee8edc0da12", "filename": "library/core/tests/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -653,6 +653,7 @@ mod debug_list {\n fn test_formatting_parameters_are_forwarded() {\n     use std::collections::{BTreeMap, BTreeSet};\n     #[derive(Debug)]\n+    #[allow(dead_code)]\n     struct Foo {\n         bar: u32,\n         baz: u32,"}, {"sha": "bb05506defd0778c8f1f24e72d2a9d1617a64121", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -162,6 +162,8 @@ macro_rules! with_api {\n                 fn source($self: $S::Span) -> $S::Span;\n                 fn start($self: $S::Span) -> LineColumn;\n                 fn end($self: $S::Span) -> LineColumn;\n+                fn before($self: $S::Span) -> $S::Span;\n+                fn after($self: $S::Span) -> $S::Span;\n                 fn join($self: $S::Span, other: $S::Span) -> Option<$S::Span>;\n                 fn resolved_at($self: $S::Span, at: $S::Span) -> $S::Span;\n                 fn source_text($self: $S::Span) -> Option<String>;"}, {"sha": "e21a1507a62e200689e9a2d182d2673461baaa0f", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -357,6 +357,18 @@ impl Span {\n         self.0.end().add_1_to_column()\n     }\n \n+    /// Creates an empty span pointing to directly before this span.\n+    #[unstable(feature = \"proc_macro_span_shrink\", issue = \"87552\")]\n+    pub fn before(&self) -> Span {\n+        Span(self.0.before())\n+    }\n+\n+    /// Creates an empty span pointing to directly after this span.\n+    #[unstable(feature = \"proc_macro_span_shrink\", issue = \"87552\")]\n+    pub fn after(&self) -> Span {\n+        Span(self.0.after())\n+    }\n+\n     /// Creates a new span encompassing `self` and `other`.\n     ///\n     /// Returns `None` if `self` and `other` are from different files."}, {"sha": "71645aadb1d88b717eb03e341be65ef07a24982b", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -239,7 +239,7 @@\n //! Iterators also provide a series of *adapter* methods for performing common\n //! threads to sequences. Among the adapters are functional favorites like `map`,\n //! `fold`, `skip` and `take`. Of particular interest to collections is the\n-//! `rev` adapter, that reverses any iterator that supports this operation. Most\n+//! `rev` adapter, which reverses any iterator that supports this operation. Most\n //! collections provide reversible iterators as the way to iterate over them in\n //! reverse order.\n //!"}, {"sha": "d290c3c466035d5e2da432db494d263af24218b9", "filename": "library/std/src/io/buffered/tests.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -468,9 +468,6 @@ struct ProgrammableSink {\n     // Writes append to this slice\n     pub buffer: Vec<u8>,\n \n-    // Flush sets this flag\n-    pub flushed: bool,\n-\n     // If true, writes will always be an error\n     pub always_write_error: bool,\n \n@@ -520,7 +517,6 @@ impl Write for ProgrammableSink {\n         if self.always_flush_error {\n             Err(io::Error::new(io::ErrorKind::Other, \"test - always_flush_error\"))\n         } else {\n-            self.flushed = true;\n             Ok(())\n         }\n     }"}, {"sha": "4a35d36a9def72f284b48244219b347a9d140e80", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1611,7 +1611,7 @@ pub trait Write {\n     /// encountered.\n     ///\n     /// This method is primarily used to interface with the\n-    /// [`format_args!()`] macro, but it is rare that this should\n+    /// [`format_args!()`] macro, and it is rare that this should\n     /// explicitly be called. The [`write!()`] macro should be favored to\n     /// invoke this method instead.\n     ///"}, {"sha": "694473f52c1a79970e86b1888b737e305db37041", "filename": "library/test/src/term/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -16,6 +16,7 @@ use parser::compiled::{msys_terminfo, parse};\n use searcher::get_dbpath_for_term;\n \n /// A parsed terminfo database entry.\n+#[allow(unused)]\n #[derive(Debug)]\n pub(crate) struct TermInfo {\n     /// Names for the terminal"}, {"sha": "444b1cbf3cc45535d01a4f66a67c2ee4df84db76", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -375,7 +375,7 @@ Any reuse of a named label, local or otherwise, can result in a assembler or lin\n \n As a consequence, you should only use GNU assembler **numeric** [local labels] inside inline assembly code. Defining symbols in assembly code may lead to assembler and/or linker errors due to duplicate symbol definitions.\n \n-Moreover, on x86 when using the default intel syntax, due to [an llvm bug], you shouldn't use labels exclusively made of `0` and `1` digits, e.g. `0`, `11` or `101010`, as they may end up being interpreted as binary values. Using `option(att_syntax)` will avoid any ambiguity, but that affects the syntax of the _entire_ `asm!` block.\n+Moreover, on x86 when using the default intel syntax, due to [an llvm bug], you shouldn't use labels exclusively made of `0` and `1` digits, e.g. `0`, `11` or `101010`, as they may end up being interpreted as binary values. Using `options(att_syntax)` will avoid any ambiguity, but that affects the syntax of the _entire_ `asm!` block.\n \n ```rust,allow_fail\n #![feature(asm)]"}, {"sha": "78e4e4ec116da2693e430ea058ebe7826a0dae81", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -557,7 +557,6 @@ fn build_macro(\n     name: Symbol,\n     import_def_id: Option<DefId>,\n ) -> clean::ItemKind {\n-    let imported_from = cx.tcx.crate_name(def_id.krate);\n     match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n@@ -569,7 +568,6 @@ fn build_macro(\n                         def_id,\n                         cx.tcx.visibility(import_def_id.unwrap_or(def_id)),\n                     ),\n-                    imported_from: Some(imported_from),\n                 })\n             } else {\n                 unreachable!()"}, {"sha": "7ece2acac7a406ca6e7a2000b3f6931cd57fab18", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1859,7 +1859,6 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 }\n                 ItemKind::Macro(ref macro_def) => MacroItem(Macro {\n                     source: display_macro_source(cx, name, &macro_def, def_id, &item.vis),\n-                    imported_from: None,\n                 }),\n                 ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref item_ids) => {\n                     let items = item_ids"}, {"sha": "5f09e6ced96d45f6558f7383d8904c902ef689c7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -2202,7 +2202,6 @@ crate struct ImportSource {\n #[derive(Clone, Debug)]\n crate struct Macro {\n     crate source: String,\n-    crate imported_from: Option<Symbol>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "c971e231463cdc56dd1f58c5871e06a7537f9168", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -48,17 +48,21 @@ use pulldown_cmark::{\n mod tests;\n \n /// Options for rendering Markdown in the main body of documentation.\n-pub(crate) fn opts() -> Options {\n+pub(crate) fn main_body_opts() -> Options {\n     Options::ENABLE_TABLES\n         | Options::ENABLE_FOOTNOTES\n         | Options::ENABLE_STRIKETHROUGH\n         | Options::ENABLE_TASKLISTS\n         | Options::ENABLE_SMART_PUNCTUATION\n }\n \n-/// A subset of [`opts()`] used for rendering summaries.\n+/// Options for rendering Markdown in summaries (e.g., in search results).\n pub(crate) fn summary_opts() -> Options {\n-    Options::ENABLE_STRIKETHROUGH | Options::ENABLE_SMART_PUNCTUATION | Options::ENABLE_TABLES\n+    Options::ENABLE_TABLES\n+        | Options::ENABLE_FOOTNOTES\n+        | Options::ENABLE_STRIKETHROUGH\n+        | Options::ENABLE_TASKLISTS\n+        | Options::ENABLE_SMART_PUNCTUATION\n }\n \n /// When `to_string` is called, this struct will emit the HTML corresponding to\n@@ -441,6 +445,42 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n     }\n }\n \n+/// Wrap HTML tables into `<div>` to prevent having the doc blocks width being too big.\n+struct TableWrapper<'a, I: Iterator<Item = Event<'a>>> {\n+    inner: I,\n+    stored_events: VecDeque<Event<'a>>,\n+}\n+\n+impl<'a, I: Iterator<Item = Event<'a>>> TableWrapper<'a, I> {\n+    fn new(iter: I) -> Self {\n+        Self { inner: iter, stored_events: VecDeque::new() }\n+    }\n+}\n+\n+impl<'a, I: Iterator<Item = Event<'a>>> Iterator for TableWrapper<'a, I> {\n+    type Item = Event<'a>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if let Some(first) = self.stored_events.pop_front() {\n+            return Some(first);\n+        }\n+\n+        let event = self.inner.next()?;\n+\n+        Some(match event {\n+            Event::Start(Tag::Table(t)) => {\n+                self.stored_events.push_back(Event::Start(Tag::Table(t)));\n+                Event::Html(CowStr::Borrowed(\"<div>\"))\n+            }\n+            Event::End(Tag::Table(t)) => {\n+                self.stored_events.push_back(Event::Html(CowStr::Borrowed(\"</div>\")));\n+                Event::End(Tag::Table(t))\n+            }\n+            e => e,\n+        })\n+    }\n+}\n+\n type SpannedEvent<'a> = (Event<'a>, Range<usize>);\n \n /// Make headings links with anchor IDs and build up TOC.\n@@ -981,14 +1021,15 @@ impl Markdown<'_> {\n             }\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+        let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut replacer));\n         let p = p.into_offset_iter();\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n         let p = Footnotes::new(p);\n         let p = LinkReplacer::new(p.map(|(ev, _)| ev), links);\n+        let p = TableWrapper::new(p);\n         let p = CodeBlocks::new(p, codes, edition, playground);\n         html::push_html(&mut s, p);\n \n@@ -1000,7 +1041,7 @@ impl MarkdownWithToc<'_> {\n     crate fn into_string(self) -> String {\n         let MarkdownWithToc(md, mut ids, codes, edition, playground) = self;\n \n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n@@ -1009,7 +1050,8 @@ impl MarkdownWithToc<'_> {\n         {\n             let p = HeadingLinks::new(p, Some(&mut toc), &mut ids);\n             let p = Footnotes::new(p);\n-            let p = CodeBlocks::new(p.map(|(ev, _)| ev), codes, edition, playground);\n+            let p = TableWrapper::new(p.map(|(ev, _)| ev));\n+            let p = CodeBlocks::new(p, codes, edition, playground);\n             html::push_html(&mut s, p);\n         }\n \n@@ -1025,7 +1067,7 @@ impl MarkdownHtml<'_> {\n         if md.is_empty() {\n             return String::new();\n         }\n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n         // Treat inline HTML as plain text.\n         let p = p.map(|event| match event.0 {\n@@ -1037,7 +1079,8 @@ impl MarkdownHtml<'_> {\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n         let p = Footnotes::new(p);\n-        let p = CodeBlocks::new(p.map(|(ev, _)| ev), codes, edition, playground);\n+        let p = TableWrapper::new(p.map(|(ev, _)| ev));\n+        let p = CodeBlocks::new(p, codes, edition, playground);\n         html::push_html(&mut s, p);\n \n         s\n@@ -1099,7 +1142,7 @@ fn markdown_summary_with_limit(\n         }\n     };\n \n-    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+    let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));\n     let mut p = LinkReplacer::new(p, link_names);\n \n     let mut buf = HtmlWithLimit::new(length_limit);\n@@ -1246,7 +1289,8 @@ crate fn markdown_links(md: &str) -> Vec<MarkdownLink> {\n         });\n         None\n     };\n-    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n+    let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut push))\n+        .into_offset_iter();\n \n     // There's no need to thread an IdMap through to here because\n     // the IDs generated aren't going to be emitted anywhere.\n@@ -1285,7 +1329,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n         return code_blocks;\n     }\n \n-    let mut p = Parser::new_ext(md, opts()).into_offset_iter();\n+    let mut p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n     while let Some((event, offset)) = p.next() {\n         if let Event::Start(Tag::CodeBlock(syntax)) = event {"}, {"sha": "f71660c4b2ab26c96aaa519dbbab0efd7d8e9349", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -224,7 +224,6 @@ struct AllTypes {\n     opaque_tys: FxHashSet<ItemEntry>,\n     statics: FxHashSet<ItemEntry>,\n     constants: FxHashSet<ItemEntry>,\n-    keywords: FxHashSet<ItemEntry>,\n     attributes: FxHashSet<ItemEntry>,\n     derives: FxHashSet<ItemEntry>,\n     trait_aliases: FxHashSet<ItemEntry>,\n@@ -245,7 +244,6 @@ impl AllTypes {\n             opaque_tys: new_set(100),\n             statics: new_set(100),\n             constants: new_set(100),\n-            keywords: new_set(100),\n             attributes: new_set(100),\n             derives: new_set(100),\n             trait_aliases: new_set(100),"}, {"sha": "52505f2d634717fa70f06a43f59d0a528a24b0f7", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -256,6 +256,10 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n \n     debug!(\"{:?}\", indices);\n     let mut curty = None;\n+    // See: https://github.com/rust-lang/rust/issues/88545\n+    let item_table_block_size = 900usize;\n+    let mut item_table_nth_element = 0usize;\n+\n     for &idx in &indices {\n         let myitem = &items[idx];\n         if myitem.is_stripped() {\n@@ -275,11 +279,13 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n             write!(\n                 w,\n                 \"<h2 id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n-                       <a href=\\\"#{id}\\\">{name}</a></h2>\\n{}\",\n+                    <a href=\\\"#{id}\\\">{name}</a>\\\n+                 </h2>\\n{}\",\n                 ITEM_TABLE_OPEN,\n                 id = cx.derive_id(short.to_owned()),\n                 name = name\n             );\n+            item_table_nth_element = 0;\n         }\n \n         match *myitem.kind {\n@@ -386,6 +392,13 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 );\n             }\n         }\n+\n+        item_table_nth_element += 1;\n+        if item_table_nth_element > item_table_block_size {\n+            w.write_str(ITEM_TABLE_CLOSE);\n+            w.write_str(ITEM_TABLE_OPEN);\n+            item_table_nth_element = 0;\n+        }\n     }\n \n     if curty.is_some() {\n@@ -944,15 +957,15 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n }\n \n fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]) {\n-    for (i, ty) in s\n-        .iter()\n-        .map(|f| if let clean::StructFieldItem(ref ty) = *f.kind { ty } else { unreachable!() })\n-        .enumerate()\n-    {\n+    for (i, ty) in s.iter().enumerate() {\n         if i > 0 {\n             w.write_str(\",&nbsp;\");\n         }\n-        write!(w, \"{}\", ty.print(cx));\n+        match *ty.kind {\n+            clean::StrippedItem(box clean::StructFieldItem(_)) => w.write_str(\"_\"),\n+            clean::StructFieldItem(ref ty) => write!(w, \"{}\", ty.print(cx)),\n+            _ => unreachable!(),\n+        }\n     }\n }\n \n@@ -1068,24 +1081,27 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                     name = variant.name.as_ref().unwrap(),\n                 );\n                 for field in fields {\n-                    use crate::clean::StructFieldItem;\n-                    if let StructFieldItem(ref ty) = *field.kind {\n-                        let id = cx.derive_id(format!(\n-                            \"variant.{}.field.{}\",\n-                            variant.name.as_ref().unwrap(),\n-                            field.name.as_ref().unwrap()\n-                        ));\n-                        write!(\n-                            w,\n-                            \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                                 <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                 <code>{f}:&nbsp;{t}</code>\\\n-                             </span>\",\n-                            id = id,\n-                            f = field.name.as_ref().unwrap(),\n-                            t = ty.print(cx)\n-                        );\n-                        document(w, cx, field, Some(variant));\n+                    match *field.kind {\n+                        clean::StrippedItem(box clean::StructFieldItem(_)) => {}\n+                        clean::StructFieldItem(ref ty) => {\n+                            let id = cx.derive_id(format!(\n+                                \"variant.{}.field.{}\",\n+                                variant.name.as_ref().unwrap(),\n+                                field.name.as_ref().unwrap()\n+                            ));\n+                            write!(\n+                                w,\n+                                \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n+                                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                                    <code>{f}:&nbsp;{t}</code>\\\n+                                </span>\",\n+                                id = id,\n+                                f = field.name.as_ref().unwrap(),\n+                                t = ty.print(cx)\n+                            );\n+                            document(w, cx, field, Some(variant));\n+                        }\n+                        _ => unreachable!(),\n                     }\n                 }\n                 w.write_str(\"</div></div>\");"}, {"sha": "2d4bfc62af68e94e5fa26c8c14ba306b2953a903", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -522,6 +522,11 @@ nav.sub {\n \tposition: relative;\n }\n \n+.docblock > * {\n+\tmax-width: 100%;\n+\toverflow-x: auto;\n+}\n+\n .content .out-of-band {\n \tflex-grow: 0;\n \ttext-align: right;"}, {"sha": "37faa6742927a2860a543ab97f36f5a42dd92ce7", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -2,7 +2,7 @@ use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::html::markdown::opts;\n+use crate::html::markdown::main_body_opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use regex::Regex;\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> DocFolder for BareUrlsLinter<'a, 'tcx> {\n                 });\n             };\n \n-            let mut p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+            let mut p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n             while let Some((event, range)) = p.next() {\n                 match event {"}, {"sha": "721af3313d27f6d33d76888b36d25f9fbcc62818", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -4,8 +4,10 @@ use crate::fold::{self, DocFolder};\n use crate::html::markdown::{find_testable_code, ErrorCodes};\n use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n+use rustc_hir as hir;\n use rustc_lint::builtin::MISSING_DOCS;\n use rustc_middle::lint::LintLevelSource;\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::lint;\n use rustc_span::FileName;\n use serde::Serialize;\n@@ -221,10 +223,42 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                     .hir()\n                     .local_def_id_to_hir_id(i.def_id.expect_def_id().expect_local());\n                 let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);\n+\n+                // In case we have:\n+                //\n+                // ```\n+                // enum Foo { Bar(u32) }\n+                // // or:\n+                // struct Bar(u32);\n+                // ```\n+                //\n+                // there is no need to require documentation on the fields of tuple variants and\n+                // tuple structs.\n+                let should_be_ignored = i\n+                    .def_id\n+                    .as_def_id()\n+                    .and_then(|def_id| self.ctx.tcx.parent(def_id))\n+                    .and_then(|def_id| self.ctx.tcx.hir().get_if_local(def_id))\n+                    .map(|node| {\n+                        matches!(\n+                            node,\n+                            hir::Node::Variant(hir::Variant {\n+                                data: hir::VariantData::Tuple(_, _),\n+                                ..\n+                            }) | hir::Node::Item(hir::Item {\n+                                kind: hir::ItemKind::Struct(hir::VariantData::Tuple(_, _), _),\n+                                ..\n+                            })\n+                        )\n+                    })\n+                    .unwrap_or(false);\n+\n                 // `missing_docs` is allow-by-default, so don't treat this as ignoring the item\n-                // unless the user had an explicit `allow`\n-                let should_have_docs =\n-                    level != lint::Level::Allow || matches!(source, LintLevelSource::Default);\n+                // unless the user had an explicit `allow`.\n+                //\n+                let should_have_docs = !should_be_ignored\n+                    && (level != lint::Level::Allow || matches!(source, LintLevelSource::Default));\n+\n                 debug!(\"counting {:?} {:?} in {:?}\", i.type_(), i.name, filename);\n                 self.items.entry(filename).or_default().count_item(\n                     has_docs,"}, {"sha": "a0144a5298eba24b3d2cc94f0e6d562473c00d08", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -2,7 +2,7 @@ use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::html::markdown::opts;\n+use crate::html::markdown::main_body_opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use std::iter::Peekable;\n@@ -192,7 +192,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             let mut is_in_comment = None;\n             let mut in_code_block = false;\n \n-            let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+            let p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n             for (event, range) in p {\n                 match event {"}, {"sha": "10f516d2dae06703003c3a1336ad0da560207867", "filename": "src/test/rustdoc-gui/docblock-table-overflow.goml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -7,3 +7,11 @@ compare-elements-property: (\".top-doc .docblock\", \".top-doc .docblock > p\", [\"sc\n assert-property: (\".top-doc .docblock\", {\"scrollWidth\": \"816\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n assert-property: (\".top-doc .docblock table\", {\"scrollWidth\": \"1573\"})\n+\n+// Checking it works on other doc blocks as well...\n+\n+// Logically, the \".docblock\" and the \"<p>\" should have the same scroll width.\n+compare-elements-property: (\"#implementations + details .docblock\", \"#implementations + details .docblock > p\", [\"scrollWidth\"])\n+assert-property: (\"#implementations + details .docblock\", {\"scrollWidth\": \"816\"})\n+// However, since there is overflow in the <table>, its scroll width is bigger.\n+assert-property: (\"#implementations + details .docblock table\", {\"scrollWidth\": \"1573\"})"}, {"sha": "d5835b78d2fcf17a5d9457c0c9de39a691cd80af", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -67,6 +67,15 @@ pub mod long_table {\n     ///\n     /// I wanna sqdkfnqds f dsqf qds f dsqf dsq f dsq f qds f qds f qds f dsqq f dsf sqdf dsq fds f dsq f dq f ds fq sd fqds f dsq f sqd fsq df sd fdsqfqsd fdsq f dsq f dsqfd s dfq\n     pub struct Foo;\n+\n+    /// | This::is::a::kinda::very::long::header::number::one | This::is::a::kinda::very::long::header::number::two | This::is::a::kinda::very::long::header::number::one | This::is::a::kinda::very::long::header::number::two |\n+    /// | ----------- | ----------- | ----------- | ----------- |\n+    /// | This::is::a::kinda::long::content::number::one | This::is::a::kinda::very::long::content::number::two | This::is::a::kinda::long::content::number::one | This::is::a::kinda::very::long::content::number::two |\n+    ///\n+    /// I wanna sqdkfnqds f dsqf qds f dsqf dsq f dsq f qds f qds f qds f dsqq f dsf sqdf dsq fds f dsq f dq f ds fq sd fqds f dsq f sqd fsq df sd fdsqfqsd fdsq f dsq f dsqfd s dfq\n+    impl Foo {\n+        pub fn foo(&self) {}\n+    }\n }\n \n pub mod summary_table {"}, {"sha": "e9c165b1916e2452d95f9138a51bfc11e6bbf692", "filename": "src/test/rustdoc-ui/coverage/enum-tuple-documented.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple-documented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple-documented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple-documented.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// check-pass\n+\n+// The point of this test is to ensure that the number of \"documented\" items\n+// is higher than in `enum-tuple.rs`.\n+\n+//! (remember the crate root is still a module)\n+\n+/// so check out this enum here\n+pub enum ThisEnum {\n+    /// VarOne.\n+    VarOne(\n+        /// hello!\n+        String,\n+    ),\n+    /// Var Two.\n+    VarTwo(\n+        /// Hello\n+        String,\n+        /// Bis repetita.\n+        String,\n+    ),\n+}\n+\n+/// Struct.\n+pub struct ThisStruct(\n+    /// hello\n+    u32,\n+);\n+\n+/// Struct.\n+pub struct ThisStruct2(\n+    /// hello\n+    u32,\n+    /// Bis repetita.\n+    u8,\n+);"}, {"sha": "82c98f43f3dd08191bc4f833f013ee0d65d32396", "filename": "src/test/rustdoc-ui/coverage/enum-tuple-documented.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple-documented.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple-documented.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple-documented.stdout?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+------------+\n+| File                                | Documented | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+\n+| ...overage/enum-tuple-documented.rs |          9 |     100.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+\n+| Total                               |          9 |     100.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+"}, {"sha": "5fb205450755b23a579983f88cfdc41be0f77461", "filename": "src/test/rustdoc-ui/coverage/enum-tuple.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// check-pass\n+\n+//! (remember the crate root is still a module)\n+\n+/// so check out this enum here\n+pub enum ThisEnum {\n+    /// No need to document the field if there is only one in a tuple variant!\n+    VarOne(String),\n+    /// But if there is more than one... still fine!\n+    VarTwo(String, String),\n+}\n+\n+/// Struct.\n+pub struct ThisStruct(u32);\n+\n+/// Struct.\n+pub struct ThisStruct2(u32, u8);"}, {"sha": "a3377d59c073a2fb8d30b3411d0a834663b7b99f", "filename": "src/test/rustdoc-ui/coverage/enum-tuple.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenum-tuple.stdout?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+------------+\n+| File                                | Documented | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+\n+| ...ustdoc-ui/coverage/enum-tuple.rs |          6 |     100.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+\n+| Total                               |          6 |     100.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+"}, {"sha": "64c012c1f66e3dfea1eea7a743511b78a08e0f5f", "filename": "src/test/rustdoc-ui/coverage/enums.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,7 +1,7 @@\n +-------------------------------------+------------+------------+------------+------------+\n | File                                | Documented | Percentage |   Examples | Percentage |\n +-------------------------------------+------------+------------+------------+------------+\n-| ...est/rustdoc-ui/coverage/enums.rs |          6 |      66.7% |          0 |       0.0% |\n+| ...est/rustdoc-ui/coverage/enums.rs |          6 |      75.0% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+\n-| Total                               |          6 |      66.7% |          0 |       0.0% |\n+| Total                               |          6 |      75.0% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+"}, {"sha": "3761805b48b71ecc6f5c6f7b7faf1e7be99878d7", "filename": "src/test/rustdoc/issue-88600.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-88600.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,34 @@\n+// This test ensure that #[doc(hidden)] is applied correctly in enum variant fields.\n+\n+// Denotes a field which should be hidden.\n+pub struct H;\n+\n+// Denotes a field which should not be hidden (shown).\n+pub struct S;\n+\n+// @has issue_88600/enum.FooEnum.html\n+pub enum FooEnum {\n+    // @has - '//*[@id=\"variant.HiddenTupleItem\"]//code' 'HiddenTupleItem(_)'\n+    // @count - '//*[@id=\"variant.HiddenTupleItem.field.0\"]' 0\n+    HiddenTupleItem(#[doc(hidden)] H),\n+    // @has - '//*[@id=\"variant.MultipleHidden\"]//code' 'MultipleHidden(_, _)'\n+    // @count - '//*[@id=\"variant.MultipleHidden.field.0\"]' 0\n+    // @count - '//*[@id=\"variant.MultipleHidden.field.1\"]' 0\n+    MultipleHidden(#[doc(hidden)] H, #[doc(hidden)] H),\n+    // @has - '//*[@id=\"variant.MixedHiddenFirst\"]//code' 'MixedHiddenFirst(_, S)'\n+    // @count - '//*[@id=\"variant.MixedHiddenFirst.field.0\"]' 0\n+    // @has - '//*[@id=\"variant.MixedHiddenFirst.field.1\"]' '1: S'\n+    MixedHiddenFirst(#[doc(hidden)] H, S),\n+    // @has - '//*[@id=\"variant.MixedHiddenLast\"]//code' 'MixedHiddenLast(S, _)'\n+    // @has - '//*[@id=\"variant.MixedHiddenLast.field.0\"]' '0: S'\n+    // @count - '//*[@id=\"variant.MixedHiddenLast.field.1\"]' 0\n+    MixedHiddenLast(S, #[doc(hidden)] H),\n+    // @has - '//*[@id=\"variant.HiddenStruct\"]//code' 'HiddenStruct'\n+    // @count - '//*[@id=\"variant.HiddenStruct.field.h\"]' 0\n+    // @has - '//*[@id=\"variant.HiddenStruct.field.s\"]' 's: S'\n+    HiddenStruct {\n+        #[doc(hidden)]\n+        h: H,\n+        s: S,\n+    },\n+}"}, {"sha": "858b589196e7219f896c293a58e63719e0e11b98", "filename": "src/test/rustdoc/table-in-docblock.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Foo.html\n+// @count - '//*[@class=\"docblock\"]/div/table' 2\n+// @!has - '//*[@class=\"docblock\"]/table'\n+/// | hello | hello2 |\n+/// | ----- | ------ |\n+/// | data  | data2  |\n+pub struct Foo;\n+\n+impl Foo {\n+    /// | hello | hello2 |\n+    /// | ----- | ------ |\n+    /// | data  | data2  |\n+    pub fn foo(&self) {}\n+}"}, {"sha": "4d8022ecba73c5d3744a31d1ffd3f8ed298e1ec3", "filename": "src/test/ui/array-slice-vec/slice_binary_search.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_binary_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_binary_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_binary_search.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -2,6 +2,7 @@\n \n // Test binary_search_by_key lifetime. Issue #34683\n \n+#[allow(dead_code)]\n #[derive(Debug)]\n struct Assignment {\n     topic: String,"}, {"sha": "23ef975cbbca1a8b985f3c2bc77dc27dbd76f9dc", "filename": "src/test/ui/borrowck/borrowck-unused-mut-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unused-mut-locals.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(dead_code)]\n #![deny(unused_mut)]\n \n #[derive(Debug)]"}, {"sha": "3399bc0018e54526e78acde295f432ab094dcdec", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -3,6 +3,7 @@\n // check-pass\n #![allow(unreachable_code)]\n #![warn(unused)]\n+#![allow(dead_code)]\n \n #[derive(Debug)]\n struct Point {"}, {"sha": "74109772724a4ddd7f55f4161d2671378f7c7c0d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,5 @@\n warning: value captured by `a` is never read\n-  --> $DIR/liveness.rs:23:9\n+  --> $DIR/liveness.rs:24:9\n    |\n LL |         a = 1;\n    |         ^\n@@ -13,7 +13,7 @@ LL | #![warn(unused)]\n    = help: did you mean to capture by reference instead?\n \n warning: unused variable: `a`\n-  --> $DIR/liveness.rs:32:9\n+  --> $DIR/liveness.rs:33:9\n    |\n LL |         a += 1;\n    |         ^\n@@ -27,39 +27,39 @@ LL | #![warn(unused)]\n    = help: did you mean to capture by reference instead?\n \n warning: value assigned to `a` is never read\n-  --> $DIR/liveness.rs:52:9\n+  --> $DIR/liveness.rs:53:9\n    |\n LL |         a += 1;\n    |         ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `a` is never read\n-  --> $DIR/liveness.rs:76:13\n+  --> $DIR/liveness.rs:77:13\n    |\n LL |             a = Some(\"d1\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `b` is never read\n-  --> $DIR/liveness.rs:84:13\n+  --> $DIR/liveness.rs:85:13\n    |\n LL |             b = Some(\"e1\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `b` is never read\n-  --> $DIR/liveness.rs:86:13\n+  --> $DIR/liveness.rs:87:13\n    |\n LL |             b = Some(\"e2\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `b`\n-  --> $DIR/liveness.rs:84:13\n+  --> $DIR/liveness.rs:85:13\n    |\n LL |             b = Some(\"e1\");\n    |             ^"}, {"sha": "465c9476ba65b1636532ab50c9b3650543242747", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -2,6 +2,7 @@\n \n // check-pass\n #![warn(unused)]\n+#![allow(dead_code)]\n \n #[derive(Debug)]\n struct MyStruct {"}, {"sha": "11a440554f759b4a60a9ea096cba8eda9746fdfd", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,5 @@\n warning: value assigned to `a` is never read\n-  --> $DIR/liveness_unintentional_copy.rs:19:9\n+  --> $DIR/liveness_unintentional_copy.rs:20:9\n    |\n LL |         a = s;\n    |         ^\n@@ -13,7 +13,7 @@ LL | #![warn(unused)]\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `a`\n-  --> $DIR/liveness_unintentional_copy.rs:19:9\n+  --> $DIR/liveness_unintentional_copy.rs:20:9\n    |\n LL |         a = s;\n    |         ^\n@@ -27,7 +27,7 @@ LL | #![warn(unused)]\n    = help: did you mean to capture by reference instead?\n \n warning: unused variable: `a`\n-  --> $DIR/liveness_unintentional_copy.rs:35:9\n+  --> $DIR/liveness_unintentional_copy.rs:36:9\n    |\n LL |         a += x;\n    |         ^"}, {"sha": "ed222b3148f410c45433e7aa671e1f526707d1d8", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/struct-pattern-matching-with-methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,6 +1,7 @@\n // edition:2021\n //check-pass\n #![warn(unused)]\n+#![allow(dead_code)]\n #![feature(rustc_attrs)]\n \n #[derive(Debug, Clone, Copy)]"}, {"sha": "3f7ddf93f0697c821feeccdb47c6a0eccc4da1eb", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -3,6 +3,8 @@\n \n // Test that we can use raw ptrs when using `capture_disjoint_fields`.\n \n+#![allow(dead_code)]\n+\n #[derive(Debug)]\n struct S {\n     s: String,"}, {"sha": "9d62281178c48c689b5900ebd0c105255b1420a8", "filename": "src/test/ui/const-generics/broken-mir-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n use std::fmt::Debug;\n \n #[derive(Debug)]"}, {"sha": "80e9132093944ab0ce4d8700e81dec38f0ba4abf", "filename": "src/test/ui/derives/clone-debug-dead-code.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,45 @@\n+// Checks that derived implementations of Clone and Debug do not\n+// contribute to dead code analysis (issue #84647).\n+\n+#![forbid(dead_code)]\n+\n+struct A { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+#[derive(Clone)]\n+struct B { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+#[derive(Debug)]\n+struct C { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+#[derive(Debug,Clone)]\n+struct D { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+struct E { f: () }\n+//~^ ERROR: field is never read: `f`\n+// Custom impl, still doesn't read f\n+impl Clone for E {\n+    fn clone(&self) -> Self {\n+        Self { f: () }\n+    }\n+}\n+\n+struct F { f: () }\n+// Custom impl that actually reads f\n+impl Clone for F {\n+    fn clone(&self) -> Self {\n+        Self { f: self.f }\n+    }\n+}\n+\n+fn main() {\n+    let _ = A { f: () };\n+    let _ = B { f: () };\n+    let _ = C { f: () };\n+    let _ = D { f: () };\n+    let _ = E { f: () };\n+    let _ = F { f: () };\n+}"}, {"sha": "226007f3647b15299c34bf22f17b395ad572d6be", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,38 @@\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:6:12\n+   |\n+LL | struct A { f: () }\n+   |            ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/clone-debug-dead-code.rs:4:11\n+   |\n+LL | #![forbid(dead_code)]\n+   |           ^^^^^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:10:12\n+   |\n+LL | struct B { f: () }\n+   |            ^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:14:12\n+   |\n+LL | struct C { f: () }\n+   |            ^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:18:12\n+   |\n+LL | struct D { f: () }\n+   |            ^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:21:12\n+   |\n+LL | struct E { f: () }\n+   |            ^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "4374d1594e4655272a53e3ffd9c7961fd430d574", "filename": "src/test/ui/deriving/deriving-clone-generic-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-struct.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(dead_code)]\n+\n #[derive(Clone)]\n struct S<T> {\n     foo: (),"}, {"sha": "b93cbe5f8b6fd2b15a0a96f9f6467cf315f32af0", "filename": "src/test/ui/deriving/deriving-clone-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-struct.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(dead_code)]\n+\n #[derive(Clone)]\n struct S {\n     _int: isize,"}, {"sha": "7ad3f03471324e6b179a29a5629c6b44d49e61c8", "filename": "src/test/ui/deriving/deriving-clone-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-tuple-struct.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(dead_code)]\n+\n #[derive(Clone)]\n struct S((), ());\n "}, {"sha": "07f91d059735623a416b00b41898211089c05bbb", "filename": "src/test/ui/deriving/deriving-in-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fderiving%2Fderiving-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-in-fn.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n pub fn main() {\n     #[derive(Debug)]\n     struct Foo {"}, {"sha": "c50b9a12b6d44dbf7b5fa666dbd540f62a7f9119", "filename": "src/test/ui/expr/malformed_closure/missing_braces_around_block.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.fixed?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,19 @@\n+// This snippet ensures that no attempt to recover on a semicolon instead of\n+// comma is made next to a closure body.\n+//\n+// If this recovery happens, then plenty of errors are emitted. Here, we expect\n+// only one error.\n+//\n+// This is part of issue #88065:\n+// https://github.com/rust-lang/rust/issues/88065\n+\n+// run-rustfix\n+\n+fn main() {\n+    let num = 5;\n+    (1..num).reduce(|a, b| {\n+        //~^ ERROR: closure bodies that contain statements must be surrounded by braces\n+        println!(\"{}\", a);\n+        a * b\n+    }).unwrap();\n+}"}, {"sha": "58c81f3a6e2a940cb9725efd72ec2d1c430b92ac", "filename": "src/test/ui/expr/malformed_closure/missing_braces_around_block.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,19 @@\n+// This snippet ensures that no attempt to recover on a semicolon instead of\n+// comma is made next to a closure body.\n+//\n+// If this recovery happens, then plenty of errors are emitted. Here, we expect\n+// only one error.\n+//\n+// This is part of issue #88065:\n+// https://github.com/rust-lang/rust/issues/88065\n+\n+// run-rustfix\n+\n+fn main() {\n+    let num = 5;\n+    (1..num).reduce(|a, b|\n+        //~^ ERROR: closure bodies that contain statements must be surrounded by braces\n+        println!(\"{}\", a);\n+        a * b\n+    ).unwrap();\n+}"}, {"sha": "dac9a8cfc69d49a30d7698369a0674501dce324c", "filename": "src/test/ui/expr/malformed_closure/missing_braces_around_block.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fmissing_braces_around_block.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,38 @@\n+error: closure bodies that contain statements must be surrounded by braces\n+  --> $DIR/missing_braces_around_block.rs:14:26\n+   |\n+LL |     (1..num).reduce(|a, b|\n+   |                          ^\n+...\n+LL |     ).unwrap();\n+   |     ^\n+   |\n+note: statement found outside of a block\n+  --> $DIR/missing_braces_around_block.rs:16:26\n+   |\n+LL |         println!(\"{}\", a);\n+   |         -----------------^ this `;` turns the preceding closure into a statement\n+   |         |\n+   |         this expression is a statement because of the trailing semicolon\n+note: the closure body may be incorrectly delimited\n+  --> $DIR/missing_braces_around_block.rs:14:21\n+   |\n+LL |       (1..num).reduce(|a, b|\n+   |  _____________________^\n+LL | |\n+LL | |         println!(\"{}\", a);\n+   | |_________________________^ this is the parsed closure...\n+LL |           a * b\n+LL |       ).unwrap();\n+   |       - ...but likely you meant the closure to end here\n+help: try adding braces\n+   |\n+LL ~     (1..num).reduce(|a, b| {\n+LL |\n+LL |         println!(\"{}\", a);\n+LL |         a * b\n+LL ~     }).unwrap();\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "e4341e196877bb1252da5ee93924f5aeac0f6518", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,16 @@\n+// Part of issue #27300.\n+// The problem here is that ruby-style closures are parsed as blocks whose\n+// first statement is a closure. See the issue for more details:\n+// https://github.com/rust-lang/rust/issues/27300\n+\n+// Note: this test represents what the compiler currently emits. The error\n+// message will be improved later.\n+\n+fn main() {\n+    let p = Some(45).and_then({\n+        //~^ expected a `FnOnce<({integer},)>` closure, found `Option<_>`\n+        |x| println!(\"doubling {}\", x);\n+        Some(x * 2)\n+        //~^ ERROR: cannot find value `x` in this scope\n+    });\n+}"}, {"sha": "99df0632b4c3383bdf3a100e79ae754b4b2c0063", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,18 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/ruby_style_closure.rs:13:14\n+   |\n+LL |         Some(x * 2)\n+   |              ^ not found in this scope\n+\n+error[E0277]: expected a `FnOnce<({integer},)>` closure, found `Option<_>`\n+  --> $DIR/ruby_style_closure.rs:10:22\n+   |\n+LL |     let p = Some(45).and_then({\n+   |                      ^^^^^^^^ expected an `FnOnce<({integer},)>` closure, found `Option<_>`\n+   |\n+   = help: the trait `FnOnce<({integer},)>` is not implemented for `Option<_>`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0425.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "3970a4155e95c2ec53f4c110a0f347520bc48aed", "filename": "src/test/ui/issues/issue-19358.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-19358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-19358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19358.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n trait Trait { fn dummy(&self) { } }\n \n #[derive(Debug)]"}, {"sha": "ce3ab6b599864ded9ba9cf5b66316137b0af37da", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -2,9 +2,12 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n-   |                 ^^^^^^^ doesn't have a size known at compile-time\n+   |                 ^^^^^^^\n+   |                 |\n+   |                 expected an implementor of trait `IntoIterator`\n+   |                 help: consider mutably borrowing here: `&mut *things`\n    |\n-   = help: the trait `Sized` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n+   = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n note: required by `into_iter`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL"}, {"sha": "1809e822c54213d4dbdc222bbac07f17d90fbf4b", "filename": "src/test/ui/issues/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(box_syntax)]\n+#![allow(dead_code)]\n \n trait T {\n     fn print(&self);"}, {"sha": "01e0a20a5115c125731bea5af0eae8534b53df0e", "filename": "src/test/ui/issues/issue-86865.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-86865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-86865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86865.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,11 @@\n+use std::fmt::Write;\n+\n+fn main() {\n+    println!(b\"foo\");\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP consider removing the leading `b`\n+    let mut s = String::new();\n+    write!(s, b\"foo{}\", \"bar\");\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP consider removing the leading `b`\n+}"}, {"sha": "eed755366311be409970a0dd9c725c85a8728311", "filename": "src/test/ui/issues/issue-86865.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-86865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fissues%2Fissue-86865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86865.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,18 @@\n+error: format argument must be a string literal\n+  --> $DIR/issue-86865.rs:4:14\n+   |\n+LL |     println!(b\"foo\");\n+   |              -^^^^^\n+   |              |\n+   |              help: consider removing the leading `b`\n+\n+error: format argument must be a string literal\n+  --> $DIR/issue-86865.rs:8:15\n+   |\n+LL |     write!(s, b\"foo{}\", \"bar\");\n+   |               -^^^^^^^\n+   |               |\n+   |               help: consider removing the leading `b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a8d8bd1d5fd008ed1785479ba47ca2f7ce8be75c", "filename": "src/test/ui/monomorphize-abi-alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmonomorphize-abi-alignment.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![allow(non_upper_case_globals)]\n+#![allow(dead_code)]\n /*!\n  * On x86_64-linux-gnu and possibly other platforms, structs get 8-byte \"preferred\" alignment,\n  * but their \"ABI\" alignment (i.e., what actually matters for data layout) is the largest alignment"}, {"sha": "7d3987f65608715ce3147fdbf44295120869b968", "filename": "src/test/ui/moves/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(unused_mut)]\n+#![allow(dead_code)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "d23a852433f4f9b478312061d6a78d16a9eacc5c", "filename": "src/test/ui/moves/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(unused_mut)]\n+#![allow(dead_code)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "f48bae55f5f1e820063df9c290b47ef4ce53b5c6", "filename": "src/test/ui/overloaded/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef-order.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![allow(dead_code)]\n+\n use std::rc::Rc;\n use std::ops::Deref;\n "}, {"sha": "0aaaa7d47c3c1eef0bcf8066e2e08218136a495b", "filename": "src/test/ui/self/ufcs-explicit-self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(box_syntax)]\n+#![allow(dead_code)]\n \n #[derive(Copy, Clone)]\n struct Foo {"}, {"sha": "ca35a615d214774124cf33a6dd71f41dfe9186ad", "filename": "src/test/ui/structs-enums/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n \n trait noisy {\n   fn speak(&mut self) -> isize;"}, {"sha": "732aa146ce446ee2e99161d5fa61290c624e75e5", "filename": "src/test/ui/structs-enums/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-implement-traits.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n \n trait noisy {\n     fn speak(&mut self);"}, {"sha": "68ff73a0805921446b7c3b5ce9788857246218d4", "filename": "src/test/ui/structs-enums/functional-struct-upd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Ffunctional-struct-upd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Ffunctional-struct-upd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ffunctional-struct-upd.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n #[derive(Debug)]\n struct Foo {\n     x: isize,"}, {"sha": "ce599582378176d32670515d0c20643e644137ad", "filename": "src/test/ui/structs-enums/tag-align-shape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fstructs-enums%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ftag-align-shape.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n \n #[derive(Debug)]\n enum a_tag {"}, {"sha": "ecb7f54ea250a95a07fdf5f431b3dee063661fc9", "filename": "src/test/ui/suggestions/slice-issue-87994.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,16 @@\n+fn main() {\n+  let v = vec![1i32, 2, 3];\n+  for _ in v[1..] {\n+    //~^ ERROR [i32]` is not an iterator [E0277]\n+    //~^^ ERROR known at compilation time\n+  }\n+  struct K {\n+    n: i32,\n+  }\n+  let mut v2 = vec![K { n: 1 }, K { n: 1 }, K { n: 1 }];\n+  for i2 in v2[1..] {\n+    //~^ ERROR [K]` is not an iterator [E0277]\n+    //~^^ ERROR known at compilation time\n+    i2.n = 2;\n+  }\n+}"}, {"sha": "018f62e783daf4bcc995691ee0071d0b77d407fd", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -0,0 +1,71 @@\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+  --> $DIR/slice-issue-87994.rs:3:12\n+   |\n+LL |   for _ in v[1..] {\n+   |            ^^^^^^\n+   |            |\n+   |            expected an implementor of trait `IntoIterator`\n+   |            help: consider borrowing here: `&v[1..]`\n+   |\n+   = note: the trait bound `[i32]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `[i32]` is not an iterator\n+  --> $DIR/slice-issue-87994.rs:3:12\n+   |\n+LL |   for _ in v[1..] {\n+   |            ^^^^^^\n+   |            |\n+   |            expected an implementor of trait `IntoIterator`\n+   |            help: consider borrowing here: `&v[1..]`\n+   |\n+   = note: the trait bound `[i32]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n+  --> $DIR/slice-issue-87994.rs:11:13\n+   |\n+LL |   for i2 in v2[1..] {\n+   |             ^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `IntoIterator`\n+   |             help: consider borrowing here: `&v2[1..]`\n+   |\n+   = note: the trait bound `[K]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `[K]` is not an iterator\n+  --> $DIR/slice-issue-87994.rs:11:13\n+   |\n+LL |   for i2 in v2[1..] {\n+   |             ^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `IntoIterator`\n+   |             help: consider borrowing here: `&v2[1..]`\n+   |\n+   = note: the trait bound `[K]: IntoIterator` is not satisfied\n+   = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "41e6ad12d058923a9af3d1a1b616bd7d650ced23", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -29,36 +29,21 @@ declare_clippy_lint! {\n     \"#[macro_use] is no longer needed\"\n }\n \n-const BRACKETS: &[char] = &['<', '>'];\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n struct PathAndSpan {\n     path: String,\n     span: Span,\n }\n \n-/// `MacroRefData` includes the name of the macro\n-/// and the path from `SourceMap::span_to_filename`.\n+/// `MacroRefData` includes the name of the macro.\n #[derive(Debug, Clone)]\n pub struct MacroRefData {\n     name: String,\n-    path: String,\n }\n \n impl MacroRefData {\n-    pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let sm = cx.sess().source_map();\n-        let mut path = sm.filename_for_diagnostics(&sm.span_to_filename(callee)).to_string();\n-\n-        // std lib paths are <::std::module::file type>\n-        // so remove brackets, space and type.\n-        if path.contains('<') {\n-            path = path.replace(BRACKETS, \"\");\n-        }\n-        if path.contains(' ') {\n-            path = path.split(' ').next().unwrap().to_string();\n-        }\n-        Self { name, path }\n+    pub fn new(name: String) -> Self {\n+        Self { name }\n     }\n }\n \n@@ -78,15 +63,15 @@ impl MacroUseImports {\n     fn push_unique_macro(&mut self, cx: &LateContext<'_>, span: Span) {\n         let call_site = span.source_callsite();\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n-        if let Some(callee) = span.source_callee() {\n+        if let Some(_callee) = span.source_callee() {\n             if !self.collected.contains(&call_site) {\n                 let name = if name.contains(\"::\") {\n                     name.split(\"::\").last().unwrap().to_string()\n                 } else {\n                     name.to_string()\n                 };\n \n-                self.mac_refs.push(MacroRefData::new(name, callee.def_site, cx));\n+                self.mac_refs.push(MacroRefData::new(name));\n                 self.collected.insert(call_site);\n             }\n         }\n@@ -95,10 +80,10 @@ impl MacroUseImports {\n     fn push_unique_macro_pat_ty(&mut self, cx: &LateContext<'_>, span: Span) {\n         let call_site = span.source_callsite();\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n-        if let Some(callee) = span.source_callee() {\n+        if let Some(_callee) = span.source_callee() {\n             if !self.collected.contains(&call_site) {\n                 self.mac_refs\n-                    .push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n+                    .push(MacroRefData::new(name.to_string()));\n                 self.collected.insert(call_site);\n             }\n         }"}, {"sha": "89be7bf844f3a83f637aa27ed823df524e6ea2fc", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -3,8 +3,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{LitKind, StrStyle};\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, HirId};\n+use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{BytePos, Span};\n@@ -53,10 +52,7 @@ declare_clippy_lint! {\n }\n \n #[derive(Clone, Default)]\n-pub struct Regex {\n-    spans: FxHashSet<Span>,\n-    last: Option<HirId>,\n-}\n+pub struct Regex {}\n \n impl_lint_pass!(Regex => [INVALID_REGEX, TRIVIAL_REGEX]);\n "}, {"sha": "f1f9c123dc842880683a14584d5c63f7bb7aa9c1", "filename": "src/tools/clippy/tests/ui/default_trait_access.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports,dead_code)]\n #![deny(clippy::default_trait_access)]\n \n use std::default;"}, {"sha": "7f3dfc7f01366e0d39b23d59350a2428fe6b0e7c", "filename": "src/tools/clippy/tests/ui/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports,dead_code)]\n #![deny(clippy::default_trait_access)]\n \n use std::default;"}, {"sha": "779a1149f413e5fa262104989096379340e91f8c", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -762,7 +762,6 @@ impl MacroArgKind {\n #[derive(Debug, Clone)]\n struct ParsedMacroArg {\n     kind: MacroArgKind,\n-    span: Span,\n }\n \n impl ParsedMacroArg {\n@@ -780,14 +779,10 @@ impl ParsedMacroArg {\n struct MacroArgParser {\n     /// Either a name of the next metavariable, a separator, or junk.\n     buf: String,\n-    /// The start position on the current buffer.\n-    lo: BytePos,\n     /// The first token of the current buffer.\n     start_tok: Token,\n     /// `true` if we are parsing a metavariable or a repeat.\n     is_meta_var: bool,\n-    /// The position of the last token.\n-    hi: BytePos,\n     /// The last token parsed.\n     last_tok: Token,\n     /// Holds the parsed arguments.\n@@ -807,8 +802,6 @@ fn last_tok(tt: &TokenTree) -> Token {\n impl MacroArgParser {\n     fn new() -> MacroArgParser {\n         MacroArgParser {\n-            lo: BytePos(0),\n-            hi: BytePos(0),\n             buf: String::new(),\n             is_meta_var: false,\n             last_tok: Token {\n@@ -824,7 +817,6 @@ impl MacroArgParser {\n     }\n \n     fn set_last_tok(&mut self, tok: &TokenTree) {\n-        self.hi = tok.span().hi();\n         self.last_tok = last_tok(tok);\n     }\n \n@@ -836,7 +828,6 @@ impl MacroArgParser {\n         };\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Separator(self.buf.clone(), prefix),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         self.buf.clear();\n     }\n@@ -849,7 +840,6 @@ impl MacroArgParser {\n         };\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Other(self.buf.clone(), prefix),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         self.buf.clear();\n     }\n@@ -858,11 +848,10 @@ impl MacroArgParser {\n         match iter.next() {\n             Some(TokenTree::Token(Token {\n                 kind: TokenKind::Ident(name, _),\n-                span,\n+                ..\n             })) => {\n                 self.result.push(ParsedMacroArg {\n                     kind: MacroArgKind::MetaVariable(name, self.buf.clone()),\n-                    span: mk_sp(self.lo, span.hi()),\n                 });\n \n                 self.buf.clear();\n@@ -873,10 +862,9 @@ impl MacroArgParser {\n         }\n     }\n \n-    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: DelimToken, span: Span) {\n+    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: DelimToken) {\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Delimited(delim, inner),\n-            span,\n         });\n     }\n \n@@ -886,19 +874,15 @@ impl MacroArgParser {\n         inner: Vec<ParsedMacroArg>,\n         delim: DelimToken,\n         iter: &mut Cursor,\n-        span: Span,\n     ) -> Option<()> {\n         let mut buffer = String::new();\n         let mut first = true;\n-        let mut lo = span.lo();\n-        let mut hi = span.hi();\n \n         // Parse '*', '+' or '?.\n         for tok in iter {\n             self.set_last_tok(&tok);\n             if first {\n                 first = false;\n-                lo = tok.span().lo();\n             }\n \n             match tok {\n@@ -918,7 +902,6 @@ impl MacroArgParser {\n                 }\n                 TokenTree::Token(ref t) => {\n                     buffer.push_str(&pprust::token_to_string(&t));\n-                    hi = t.span.hi();\n                 }\n                 _ => return None,\n             }\n@@ -930,20 +913,17 @@ impl MacroArgParser {\n         } else {\n             Some(Box::new(ParsedMacroArg {\n                 kind: MacroArgKind::Other(buffer, \"\".to_owned()),\n-                span: mk_sp(lo, hi),\n             }))\n         };\n \n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Repeat(delim, inner, another, self.last_tok.clone()),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         Some(())\n     }\n \n     fn update_buffer(&mut self, t: &Token) {\n         if self.buf.is_empty() {\n-            self.lo = t.span.lo();\n             self.start_tok = t.clone();\n         } else {\n             let needs_space = match next_space(&self.last_tok.kind) {\n@@ -999,7 +979,6 @@ impl MacroArgParser {\n \n                     // Start keeping the name of this metavariable in the buffer.\n                     self.is_meta_var = true;\n-                    self.lo = span.lo();\n                     self.start_tok = Token {\n                         kind: TokenKind::Dollar,\n                         span,\n@@ -1012,7 +991,7 @@ impl MacroArgParser {\n                     self.add_meta_variable(&mut iter)?;\n                 }\n                 TokenTree::Token(ref t) => self.update_buffer(t),\n-                TokenTree::Delimited(delimited_span, delimited, ref tts) => {\n+                TokenTree::Delimited(_delimited_span, delimited, ref tts) => {\n                     if !self.buf.is_empty() {\n                         if next_space(&self.last_tok.kind) == SpaceState::Always {\n                             self.add_separator();\n@@ -1022,16 +1001,14 @@ impl MacroArgParser {\n                     }\n \n                     // Parse the stuff inside delimiters.\n-                    let mut parser = MacroArgParser::new();\n-                    parser.lo = delimited_span.open.lo();\n+                    let parser = MacroArgParser::new();\n                     let delimited_arg = parser.parse(tts.clone())?;\n \n-                    let span = delimited_span.entire();\n                     if self.is_meta_var {\n-                        self.add_repeat(delimited_arg, delimited, &mut iter, span)?;\n+                        self.add_repeat(delimited_arg, delimited, &mut iter)?;\n                         self.is_meta_var = false;\n                     } else {\n-                        self.add_delimited(delimited_arg, delimited, span);\n+                        self.add_delimited(delimited_arg, delimited);\n                     }\n                 }\n             }"}, {"sha": "ded34d9032f91f188c11c9437b41691cdcce75b5", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22719efcc570b043f2e519d6025e5f36eab38fe2/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=22719efcc570b043f2e519d6025e5f36eab38fe2", "patch": "@@ -27,7 +27,6 @@ type FileModMap<'ast> = BTreeMap<FileName, Module<'ast>>;\n pub(crate) struct Module<'a> {\n     ast_mod_kind: Option<Cow<'a, ast::ModKind>>,\n     pub(crate) items: Cow<'a, Vec<rustc_ast::ptr::P<ast::Item>>>,\n-    attrs: Cow<'a, Vec<ast::Attribute>>,\n     inner_attr: Vec<ast::Attribute>,\n     pub(crate) span: Span,\n }\n@@ -46,7 +45,6 @@ impl<'a> Module<'a> {\n             .collect();\n         Module {\n             items: mod_items,\n-            attrs: mod_attrs,\n             inner_attr,\n             span: mod_span,\n             ast_mod_kind,"}]}