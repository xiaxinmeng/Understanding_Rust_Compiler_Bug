{"sha": "9e4165072b59e0bf22f6e28229215ede0998a26d", "node_id": "C_kwDOAAsO6NoAKDllNDE2NTA3MmI1OWUwYmYyMmY2ZTI4MjI5MjE1ZWRlMDk5OGEyNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-12T16:52:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-12T16:52:55Z"}, "message": "Auto merge of #2019 - RalfJung:align, r=RalfJung\n\nadd README section on randomized alignment testing\n\nalso accept odd number of hex digits\n\n`@saethlin` you mentioned that you liked this snippet, do you think it'd make sense to put it in the README?", "tree": {"sha": "9cbab8d99c7cb5789e041aa2cbc0a8a06805a910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cbab8d99c7cb5789e041aa2cbc0a8a06805a910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4165072b59e0bf22f6e28229215ede0998a26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4165072b59e0bf22f6e28229215ede0998a26d", "html_url": "https://github.com/rust-lang/rust/commit/9e4165072b59e0bf22f6e28229215ede0998a26d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4165072b59e0bf22f6e28229215ede0998a26d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f34f270ac95ed89424a627c2c1a43800841554", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f34f270ac95ed89424a627c2c1a43800841554", "html_url": "https://github.com/rust-lang/rust/commit/f7f34f270ac95ed89424a627c2c1a43800841554"}, {"sha": "9a6450af95dd63c6e4f5ca43feff49313692885c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6450af95dd63c6e4f5ca43feff49313692885c", "html_url": "https://github.com/rust-lang/rust/commit/9a6450af95dd63c6e4f5ca43feff49313692885c"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "35e45800c0ed6f21a82d2b5eb9bf420da4817d4d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e4165072b59e0bf22f6e28229215ede0998a26d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9e4165072b59e0bf22f6e28229215ede0998a26d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9e4165072b59e0bf22f6e28229215ede0998a26d", "patch": "@@ -155,12 +155,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"hex\"\n-version = \"0.4.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n-\n [[package]]\n name = \"humantime\"\n version = \"2.1.0\"\n@@ -258,7 +252,6 @@ dependencies = [\n  \"compiletest_rs\",\n  \"env_logger\",\n  \"getrandom\",\n- \"hex\",\n  \"libc\",\n  \"log\",\n  \"measureme\","}, {"sha": "356f6822fa1824739f3d145fe34d48f2b2dc76cd", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e4165072b59e0bf22f6e28229215ede0998a26d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9e4165072b59e0bf22f6e28229215ede0998a26d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9e4165072b59e0bf22f6e28229215ede0998a26d", "patch": "@@ -22,7 +22,6 @@ getrandom = { version = \"0.2\", features = [\"std\"] }\n env_logger = \"0.9\"\n log = \"0.4\"\n shell-escape = \"0.1.4\"\n-hex = \"0.4.0\"\n rand = \"0.8\"\n smallvec = \"1.7\"\n "}, {"sha": "8e8670f3775174910b6b0b88b4916a38a889b5ba", "filename": "README.md", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e4165072b59e0bf22f6e28229215ede0998a26d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e4165072b59e0bf22f6e28229215ede0998a26d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9e4165072b59e0bf22f6e28229215ede0998a26d", "patch": "@@ -175,12 +175,28 @@ Here is an example job for GitHub Actions:\n The explicit `cargo miri setup` helps to keep the output of the actual test step\n clean.\n \n+### Testing for alignment issues\n+\n+Miri can sometimes miss misaligned accesses since allocations can \"happen to be\"\n+aligned just right. You can use `-Zmiri-symbolic-alignment-check` to definitely\n+catch all such issues, but that flag will also cause false positives when code\n+does manual pointer arithmetic to account for alignment. Another alternative is\n+to call Miri with various values for `-Zmiri-seed`; that will alter the\n+randomness that is used to determine allocation base addresses. The following\n+snippet calls Miri in a loop with different values for the seed:\n+\n+```\n+for seed in $({ echo obase=16; seq 255; } | bc); do\n+  MIRIFLAGS=-Zmiri-seed=$seed cargo miri test || { echo \"Last seed: $seed\"; break; };\n+done\n+```\n+\n ### Common Problems\n \n When using the above instructions, you may encounter a number of confusing compiler\n errors.\n \n-### \"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"\n+#### \"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"\n \n You may see this when trying to get Miri to display a backtrace. By default, Miri\n doesn't expose any environment to the program, so running"}, {"sha": "a1f7c617f0af1c937c31cdfc2bae49caff6a8946", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e4165072b59e0bf22f6e28229215ede0998a26d/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4165072b59e0bf22f6e28229215ede0998a26d/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=9e4165072b59e0bf22f6e28229215ede0998a26d", "patch": "@@ -15,7 +15,6 @@ use std::num::NonZeroU64;\n use std::path::PathBuf;\n use std::str::FromStr;\n \n-use hex::FromHexError;\n use log::debug;\n \n use rustc_data_structures::sync::Lrc;\n@@ -377,22 +376,11 @@ fn main() {\n                     if miri_config.seed.is_some() {\n                         panic!(\"Cannot specify -Zmiri-seed multiple times!\");\n                     }\n-                    let seed_raw = hex::decode(arg.strip_prefix(\"-Zmiri-seed=\").unwrap())\n-                        .unwrap_or_else(|err| match err {\n-                            FromHexError::InvalidHexCharacter { .. } => panic!(\n-                                \"-Zmiri-seed should only contain valid hex digits [0-9a-fA-F]\"\n-                            ),\n-                            FromHexError::OddLength =>\n-                                panic!(\"-Zmiri-seed should have an even number of digits\"),\n-                            err => panic!(\"unknown error decoding -Zmiri-seed as hex: {:?}\", err),\n-                        });\n-                    if seed_raw.len() > 8 {\n-                        panic!(\"-Zmiri-seed must be at most 8 bytes, was {}\", seed_raw.len());\n-                    }\n-\n-                    let mut bytes = [0; 8];\n-                    bytes[..seed_raw.len()].copy_from_slice(&seed_raw);\n-                    miri_config.seed = Some(u64::from_be_bytes(bytes));\n+                    let seed = u64::from_str_radix(arg.strip_prefix(\"-Zmiri-seed=\").unwrap(), 16)\n+                        .unwrap_or_else(|_| panic!(\n+                            \"-Zmiri-seed should only contain valid hex digits [0-9a-fA-F] and fit into a u64 (max 16 characters)\"\n+                        ));\n+                    miri_config.seed = Some(seed);\n                 }\n                 arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n                     miri_config"}]}