{"sha": "76758562539ef3c439dd28ad53636f6b70382e7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NzU4NTYyNTM5ZWYzYzQzOWRkMjhhZDUzNjM2ZjZiNzAzODJlN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T19:37:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-09T19:37:00Z"}, "message": "auto merge of #6354 : Aatch/rust/uninit-intrinsic, r=graydon\n\nAdds an `uninit` intrinsic.\r\n\r\nIt's just an empty function, so llvm optimizes it down to nothing.\r\n\r\nI changed all of the `init` intrinsic usages to `uninit` where it seemed appropriate to.", "tree": {"sha": "116ee84d37fff9ff3393bb28a66f59bd98a95132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/116ee84d37fff9ff3393bb28a66f59bd98a95132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76758562539ef3c439dd28ad53636f6b70382e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76758562539ef3c439dd28ad53636f6b70382e7b", "html_url": "https://github.com/rust-lang/rust/commit/76758562539ef3c439dd28ad53636f6b70382e7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76758562539ef3c439dd28ad53636f6b70382e7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce9c0225c451c00c3eebe4e496185143a18814b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9c0225c451c00c3eebe4e496185143a18814b9", "html_url": "https://github.com/rust-lang/rust/commit/ce9c0225c451c00c3eebe4e496185143a18814b9"}, {"sha": "414970c46f75c730d7fed029deb48b0d1c454391", "url": "https://api.github.com/repos/rust-lang/rust/commits/414970c46f75c730d7fed029deb48b0d1c454391", "html_url": "https://github.com/rust-lang/rust/commit/414970c46f75c730d7fed029deb48b0d1c454391"}], "stats": {"total": 221, "additions": 215, "deletions": 6}, "files": [{"sha": "7451353458e28b776de06501421106c3ced93f20", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -24,6 +24,20 @@ pub mod rusti {\n }\n \n /// Casts the value at `src` to U. The two types must have the same length.\n+#[cfg(not(stage0))]\n+pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    let mut dest: U = unstable::intrinsics::uninit();\n+    {\n+        let dest_ptr: *mut u8 = rusti::transmute(&mut dest);\n+        let src_ptr: *u8 = rusti::transmute(src);\n+        unstable::intrinsics::memmove64(dest_ptr,\n+                                        src_ptr,\n+                                        sys::size_of::<U>() as u64);\n+    }\n+    dest\n+}\n+\n+#[cfg(stage0)]\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n     let mut dest: U = unstable::intrinsics::init();\n     {"}, {"sha": "cfd305f4b70c1a55abd823b010375edb2c7a935a", "filename": "src/libcore/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -44,6 +44,9 @@ pub extern \"rust-intrinsic\" {\n \n     pub fn init<T>() -> T;\n \n+    #[cfg(not(stage0))]\n+    pub unsafe fn uninit<T>() -> T;\n+\n     pub fn forget<T>(_: T) -> ();\n \n     pub fn needs_drop<T>() -> bool;"}, {"sha": "3f3691670effbc6ad1c61e5634852585d834cc66", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 90, "deletions": 5, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -584,14 +584,29 @@ pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n }\n \n /// Remove the last element from a vector and return it\n+#[cfg(not(stage0))]\n+pub fn pop<T>(v: &mut ~[T]) -> T {\n+    let ln = v.len();\n+    if ln == 0 {\n+        fail!(~\"sorry, cannot vec::pop an empty vector\")\n+    }\n+    let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n+    unsafe {\n+        let mut val = intrinsics::uninit();\n+        val <-> *valptr;\n+        raw::set_len(v, ln - 1u);\n+        val\n+    }\n+}\n+\n+#[cfg(stage0)]\n pub fn pop<T>(v: &mut ~[T]) -> T {\n     let ln = v.len();\n     if ln == 0 {\n         fail!(~\"sorry, cannot vec::pop an empty vector\")\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n-        // FIXME #4204: Should be uninit() - we don't need this zeroed\n         let mut val = intrinsics::init();\n         val <-> *valptr;\n         raw::set_len(v, ln - 1u);\n@@ -660,13 +675,30 @@ pub fn push_all<T:Copy>(v: &mut ~[T], rhs: &const [T]) {\n }\n \n #[inline(always)]\n+#[cfg(not(stage0))]\n+pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n+    let new_len = v.len() + rhs.len();\n+    reserve(&mut *v, new_len);\n+    unsafe {\n+        do as_mut_buf(rhs) |p, len| {\n+            for uint::range(0, len) |i| {\n+                let mut x = intrinsics::uninit();\n+                x <-> *ptr::mut_offset(p, i);\n+                push(&mut *v, x);\n+            }\n+        }\n+        raw::set_len(&mut rhs, 0);\n+    }\n+}\n+\n+#[inline(always)]\n+#[cfg(stage0)]\n pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n     let new_len = v.len() + rhs.len();\n     reserve(&mut *v, new_len);\n     unsafe {\n         do as_mut_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                // FIXME #4204 Should be uninit() - don't need to zero\n                 let mut x = intrinsics::init();\n                 x <-> *ptr::mut_offset(p, i);\n                 push(&mut *v, x);\n@@ -677,13 +709,29 @@ pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n }\n \n /// Shorten a vector, dropping excess elements.\n+#[cfg(not(stage0))]\n+pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n+    do as_mut_buf(*v) |p, oldlen| {\n+        assert!(newlen <= oldlen);\n+        unsafe {\n+            // This loop is optimized out for non-drop types.\n+            for uint::range(newlen, oldlen) |i| {\n+                let mut dropped = intrinsics::uninit();\n+                dropped <-> *ptr::mut_offset(p, i);\n+            }\n+        }\n+    }\n+    unsafe { raw::set_len(&mut *v, newlen); }\n+}\n+\n+/// Shorten a vector, dropping excess elements.\n+#[cfg(stage0)]\n pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n     do as_mut_buf(*v) |p, oldlen| {\n         assert!(newlen <= oldlen);\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                // FIXME #4204 Should be uninit() - don't need to zero\n                 let mut dropped = intrinsics::init();\n                 dropped <-> *ptr::mut_offset(p, i);\n             }\n@@ -696,6 +744,45 @@ pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n  * Remove consecutive repeated elements from a vector; if the vector is\n  * sorted, this removes all duplicates.\n  */\n+#[cfg(not(stage0))]\n+pub fn dedup<T:Eq>(v: &mut ~[T]) {\n+    unsafe {\n+        if v.len() < 1 { return; }\n+        let mut last_written = 0, next_to_read = 1;\n+        do as_const_buf(*v) |p, ln| {\n+            // We have a mutable reference to v, so we can make arbitrary\n+            // changes. (cf. push and pop)\n+            let p = p as *mut T;\n+            // last_written < next_to_read <= ln\n+            while next_to_read < ln {\n+                // last_written < next_to_read < ln\n+                if *ptr::mut_offset(p, next_to_read) ==\n+                    *ptr::mut_offset(p, last_written) {\n+                    let mut dropped = intrinsics::uninit();\n+                    dropped <-> *ptr::mut_offset(p, next_to_read);\n+                } else {\n+                    last_written += 1;\n+                    // last_written <= next_to_read < ln\n+                    if next_to_read != last_written {\n+                        *ptr::mut_offset(p, last_written) <->\n+                            *ptr::mut_offset(p, next_to_read);\n+                    }\n+                }\n+                // last_written <= next_to_read < ln\n+                next_to_read += 1;\n+                // last_written < next_to_read <= ln\n+            }\n+        }\n+        // last_written < next_to_read == ln\n+        raw::set_len(v, last_written + 1);\n+    }\n+}\n+\n+/**\n+ * Remove consecutive repeated elements from a vector; if the vector is\n+ * sorted, this removes all duplicates.\n+ */\n+#[cfg(stage0)]\n pub fn dedup<T:Eq>(v: &mut ~[T]) {\n     unsafe {\n         if v.len() < 1 { return; }\n@@ -709,8 +796,6 @@ pub fn dedup<T:Eq>(v: &mut ~[T]) {\n                 // last_written < next_to_read < ln\n                 if *ptr::mut_offset(p, next_to_read) ==\n                     *ptr::mut_offset(p, last_written) {\n-                    // FIXME #4204 Should be uninit() - don't need to\n-                    // zero\n                     let mut dropped = intrinsics::init();\n                     dropped <-> *ptr::mut_offset(p, next_to_read);\n                 } else {"}, {"sha": "26654cf31f86143cdef7f1149da387715c154ffa", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -715,6 +715,9 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                 Store(bcx, C_null(lltp_ty), fcx.llretptr.get());\n             }\n         }\n+        ~\"uninit\" => {\n+            // Do nothing, this is effectively a no-op\n+        }\n         ~\"forget\" => {}\n         ~\"transmute\" => {\n             let (in_type, out_type) = (substs.tys[0], substs.tys[1]);"}, {"sha": "cbad7bcb3a6bed4698573484cc788a4ed2d05110", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -118,7 +118,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n         if abi.is_intrinsic() {\n             let flags = match *cx.ccx.sess.str_of(i.ident) {\n                 ~\"size_of\"  | ~\"pref_align_of\" | ~\"min_align_of\" |\n-                ~\"init\"     | ~\"transmute\"     | ~\"move_val\"     |\n+                ~\"uninit\"   | ~\"init\" | ~\"transmute\" | ~\"move_val\" |\n                 ~\"move_val_init\" => use_repr,\n \n                 ~\"get_tydesc\" | ~\"needs_drop\" => use_tydesc,"}, {"sha": "a6f2f0da234d40e29355311998393da5ca6fa736", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -3447,6 +3447,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n       ~\"size_of\" |\n       ~\"pref_align_of\" | ~\"min_align_of\" => (1u, ~[], ty::mk_uint()),\n       ~\"init\" => (1u, ~[], param(ccx, 0u)),\n+      ~\"uninit\" => (1u, ~[], param(ccx, 0u)),\n       ~\"forget\" => (1u, ~[arg(param(ccx, 0u))], ty::mk_nil()),\n       ~\"transmute\" => (2, ~[ arg(param(ccx, 0)) ], param(ccx, 1)),\n       ~\"move_val\" | ~\"move_val_init\" => {"}, {"sha": "b2f8c9c3c4e9a8f0c9b020f76f3b9911a48d6132", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -16,6 +16,8 @@ use core::old_iter::BaseIter;\n extern \"rust-intrinsic\" mod rusti {\n     fn move_val_init<T>(dst: &mut T, src: T);\n     fn init<T>() -> T;\n+    #[cfg(not(stage0))]\n+    fn uninit<T>() -> T;\n }\n \n pub struct PriorityQueue<T> {\n@@ -132,6 +134,27 @@ pub impl <T:Ord> PriorityQueue<T> {\n     // vector over the junk element.  This reduces the constant factor\n     // compared to using swaps, which involves twice as many moves.\n \n+    #[cfg(not(stage0))]\n+    priv fn siftup(&mut self, start: uint, mut pos: uint) {\n+        unsafe {\n+            let new = *ptr::to_unsafe_ptr(&self.data[pos]);\n+\n+            while pos > start {\n+                let parent = (pos - 1) >> 1;\n+                if new > self.data[parent] {\n+                    let mut x = rusti::uninit();\n+                    x <-> self.data[parent];\n+                    rusti::move_val_init(&mut self.data[pos], x);\n+                    pos = parent;\n+                    loop\n+                }\n+                break\n+            }\n+            rusti::move_val_init(&mut self.data[pos], new);\n+        }\n+    }\n+\n+    #[cfg(stage0)]\n     priv fn siftup(&mut self, start: uint, mut pos: uint) {\n         unsafe {\n             let new = *ptr::to_unsafe_ptr(&self.data[pos]);\n@@ -151,6 +174,32 @@ pub impl <T:Ord> PriorityQueue<T> {\n         }\n     }\n \n+\n+    #[cfg(not(stage0))]\n+    priv fn siftdown_range(&mut self, mut pos: uint, end: uint) {\n+        unsafe {\n+            let start = pos;\n+            let new = *ptr::to_unsafe_ptr(&self.data[pos]);\n+\n+            let mut child = 2 * pos + 1;\n+            while child < end {\n+                let right = child + 1;\n+                if right < end && !(self.data[child] > self.data[right]) {\n+                    child = right;\n+                }\n+                let mut x = rusti::uninit();\n+                x <-> self.data[child];\n+                rusti::move_val_init(&mut self.data[pos], x);\n+                pos = child;\n+                child = 2 * pos + 1;\n+            }\n+\n+            rusti::move_val_init(&mut self.data[pos], new);\n+            self.siftup(start, pos);\n+        }\n+    }\n+\n+    #[cfg(stage0)]\n     priv fn siftdown_range(&mut self, mut pos: uint, end: uint) {\n         unsafe {\n             let start = pos;"}, {"sha": "9eab1adde4759be09b5b6e36f08b68ed6855018a", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -46,6 +46,22 @@ pub impl<T: Owned> Rc<T> {\n }\n \n #[unsafe_destructor]\n+#[cfg(not(stage0))]\n+impl<T: Owned> Drop for Rc<T> {\n+    fn finalize(&self) {\n+        unsafe {\n+            (*self.ptr).count -= 1;\n+            if (*self.ptr).count == 0 {\n+                let mut x = intrinsics::uninit();\n+                x <-> *self.ptr;\n+                free(self.ptr as *c_void)\n+            }\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+#[cfg(stage0)]\n impl<T: Owned> Drop for Rc<T> {\n     fn finalize(&self) {\n         unsafe {\n@@ -59,6 +75,7 @@ impl<T: Owned> Drop for Rc<T> {\n     }\n }\n \n+\n impl<T: Owned> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n@@ -97,6 +114,8 @@ mod test_rc {\n #[abi = \"rust-intrinsic\"]\n extern \"rust-intrinsic\" mod rusti {\n     fn init<T>() -> T;\n+    #[cfg(not(stage0))]\n+    fn uninit<T>() -> T;\n }\n \n #[deriving(Eq)]\n@@ -154,6 +173,22 @@ pub impl<T: Owned> RcMut<T> {\n }\n \n #[unsafe_destructor]\n+#[cfg(not(stage0))]\n+impl<T: Owned> Drop for RcMut<T> {\n+    fn finalize(&self) {\n+        unsafe {\n+            (*self.ptr).count -= 1;\n+            if (*self.ptr).count == 0 {\n+                let mut x = rusti::uninit();\n+                x <-> *self.ptr;\n+                free(self.ptr as *c_void)\n+            }\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+#[cfg(stage0)]\n impl<T: Owned> Drop for RcMut<T> {\n     fn finalize(&self) {\n         unsafe {"}, {"sha": "a835c9531bf783443d94db1d078f44284f187bc7", "filename": "src/test/run-pass/intrinsic-uninit.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76758562539ef3c439dd28ad53636f6b70382e7b/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs?ref=76758562539ef3c439dd28ad53636f6b70382e7b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern \"rust-intrinsic\" {\n+        fn uninit<T>() -> T;\n+    }\n+}\n+pub fn main() {\n+    let _a : int = unsafe {rusti::uninit()};\n+}"}]}