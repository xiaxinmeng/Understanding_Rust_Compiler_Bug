{"sha": "05c8c2893584dcb8717314055833ea52a1e51657", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YzhjMjg5MzU4NGRjYjg3MTczMTQwNTU4MzNlYTUyYTFlNTE2NTc=", "commit": {"author": {"name": "Pavel Sountsov", "email": "siege@google.com", "date": "2015-09-19T07:00:53Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2015-09-19T17:36:46Z"}, "message": "Add some tests for hard tab mode.", "tree": {"sha": "29148bb662fcf29e925a824d7633e0aaaa70aa82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29148bb662fcf29e925a824d7633e0aaaa70aa82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c8c2893584dcb8717314055833ea52a1e51657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c8c2893584dcb8717314055833ea52a1e51657", "html_url": "https://github.com/rust-lang/rust/commit/05c8c2893584dcb8717314055833ea52a1e51657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c8c2893584dcb8717314055833ea52a1e51657/comments", "author": {"login": "SiegeLordEx", "id": 43966695, "node_id": "MDQ6VXNlcjQzOTY2Njk1", "avatar_url": "https://avatars.githubusercontent.com/u/43966695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLordEx", "html_url": "https://github.com/SiegeLordEx", "followers_url": "https://api.github.com/users/SiegeLordEx/followers", "following_url": "https://api.github.com/users/SiegeLordEx/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLordEx/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLordEx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLordEx/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLordEx/orgs", "repos_url": "https://api.github.com/users/SiegeLordEx/repos", "events_url": "https://api.github.com/users/SiegeLordEx/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLordEx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "620650219e5c456a770a9ea9952a8afffe875ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/620650219e5c456a770a9ea9952a8afffe875ea4", "html_url": "https://github.com/rust-lang/rust/commit/620650219e5c456a770a9ea9952a8afffe875ea4"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "3fe38a5e42ad3c6163b2d1c65aceb968aef0cdcc", "filename": "tests/source/hard-tabs.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/05c8c2893584dcb8717314055833ea52a1e51657/tests%2Fsource%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c8c2893584dcb8717314055833ea52a1e51657/tests%2Fsource%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fhard-tabs.rs?ref=05c8c2893584dcb8717314055833ea52a1e51657", "patch": "@@ -0,0 +1,69 @@\n+// rustfmt-hard_tabs: true\n+\n+fn main() {\n+let x = Bar;\n+\n+let y = Foo {a: x };\n+\n+Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+\n+fn foo(a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32) {}\n+\n+let str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n+\n+if let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1\n++ 2 + 3 {\n+}\n+\n+    if cond() {\n+        something();\n+    } else  if different_cond() {\n+        something_else();\n+    } else {\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    }\n+    \n+unsafe /* very looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong comment */ {}\n+\n+unsafe // So this is a very long comment.\n+   // Multi-line, too.\n+   // Will it still format correctly?\n+{\n+}\n+\n+let z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz, q];\n+\n+fn generic<T>(arg: T) -> &SomeType\n+    where T: Fn(// First arg\n+        A,\n+        // Second argument\n+        B, C, D, /* pre comment */ E /* last comment */) -> &SomeType {\n+    arg(a, b, c, d, e)    \n+}\n+\n+    loong_func().quux(move || {\n+        if true {\n+            1\n+        } else {\n+            2\n+        }\n+    });\n+\n+    fffffffffffffffffffffffffffffffffff(a,\n+                                        {\n+                                            SCRIPT_TASK_ROOT\n+                                            .with(|root| {\n+                                                *root.borrow_mut()  =   Some(&script_task);\n+                                            });\n+                                        });\n+    a.b\n+     .c\n+     .d();\n+    \n+    x().y(|| {\n+        match cond() {\n+            true => (),\n+            false => (),\n+        }\n+    });\n+}"}, {"sha": "d8df0c2936a021b7eb47beb1a7c9baea7be0c12c", "filename": "tests/target/hard-tabs.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/05c8c2893584dcb8717314055833ea52a1e51657/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c8c2893584dcb8717314055833ea52a1e51657/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=05c8c2893584dcb8717314055833ea52a1e51657", "patch": "@@ -0,0 +1,95 @@\n+// rustfmt-hard_tabs: true\n+\n+fn main() {\n+\tlet x = Bar;\n+\n+\tlet y = Foo { a: x };\n+\n+\tFoo {\n+\t\ta: foo(), // comment\n+\t\t// comment\n+\t\tb: bar(),\n+\t\t..something\n+\t};\n+\n+\tfn foo(a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32,\n+\t       a: i32) {\n+\t}\n+\n+\tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAA\\\n+\t           AAAAAAAAAAAAaAa\";\n+\n+\tif let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n+\t       1 + 2 + 3 {\n+\t}\n+\n+\tif cond() {\n+\t\tsomething();\n+\t} else if different_cond() {\n+\t\tsomething_else();\n+\t} else {\n+\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+\t}\n+\n+\tunsafe /* very looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+\t        * comment */ {\n+\t}\n+\n+\tunsafe /* So this is a very long comment.\n+\t        * Multi-line, too.\n+\t        * Will it still format correctly? */ {\n+\t}\n+\n+\tlet z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+\t         yyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+\t         zzzzzzzzzzzzzzzzzz,\n+\t         q];\n+\n+\tfn generic<T>(arg: T) -> &SomeType\n+\t\twhere T: Fn(// First arg\n+\t\t            A,\n+\t\t            // Second argument\n+\t\t            B,\n+\t\t            C,\n+\t\t            D,\n+\t\t            // pre comment\n+\t\t            E /* last comment */) -> &SomeType\n+\t{\n+\t\targ(a, b, c, d, e)\n+\t}\n+\n+\tloong_func().quux(move || {\n+\t\tif true {\n+\t\t\t1\n+\t\t} else {\n+\t\t\t2\n+\t\t}\n+\t});\n+\n+\tfffffffffffffffffffffffffffffffffff(a,\n+\t                                    {\n+\t\t                                    SCRIPT_TASK_ROOT.with(|root| {\n+\t\t\t                                    *root.borrow_mut() = Some(&script_task);\n+\t\t                                    });\n+\t                                    });\n+\ta.b\n+\t .c\n+\t .d();\n+\n+\tx().y(|| {\n+\t\tmatch cond() {\n+\t\t\ttrue => (),\n+\t\t\tfalse => (),\n+\t\t}\n+\t});\n+}"}]}