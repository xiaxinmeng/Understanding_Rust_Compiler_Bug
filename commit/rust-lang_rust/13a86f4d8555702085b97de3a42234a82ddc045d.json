{"sha": "13a86f4d8555702085b97de3a42234a82ddc045d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYTg2ZjRkODU1NTcwMjA4NWI5N2RlM2E0MjIzNGE4MmRkYzA0NWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-26T13:00:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-26T13:00:18Z"}, "message": "Auto merge of #48346 - emilio:pgo, r=alexcrichton\n\nAdd basic PGO support.\n\nThis PR adds two mutually exclusive options for profile usage and generation using LLVM's instruction profile generation (the same as clang uses), `-C pgo-use` and `-C pgo-gen`.\n\nSee each commit for details.", "tree": {"sha": "45147330529a766d4a069e6f22ad79d31236fb29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45147330529a766d4a069e6f22ad79d31236fb29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13a86f4d8555702085b97de3a42234a82ddc045d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13a86f4d8555702085b97de3a42234a82ddc045d", "html_url": "https://github.com/rust-lang/rust/commit/13a86f4d8555702085b97de3a42234a82ddc045d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13a86f4d8555702085b97de3a42234a82ddc045d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e4603f99066eaf2c1cf19ac3afbac9057b1e177", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4603f99066eaf2c1cf19ac3afbac9057b1e177", "html_url": "https://github.com/rust-lang/rust/commit/5e4603f99066eaf2c1cf19ac3afbac9057b1e177"}, {"sha": "1e1d907e6a407a474d46af343678e45c4eb327f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1d907e6a407a474d46af343678e45c4eb327f9", "html_url": "https://github.com/rust-lang/rust/commit/1e1d907e6a407a474d46af343678e45c4eb327f9"}], "stats": {"total": 222, "additions": 212, "deletions": 10}, "files": [{"sha": "8d6c7d68dfe23090441114164c8ebe0b661f0163", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -27,6 +27,7 @@ fn main() {\n                                    \"InstrProfilingFile.c\",\n                                    \"InstrProfilingMerge.c\",\n                                    \"InstrProfilingMergeFile.c\",\n+                                   \"InstrProfilingNameVar.c\",\n                                    \"InstrProfilingPlatformDarwin.c\",\n                                    \"InstrProfilingPlatformLinux.c\",\n                                    \"InstrProfilingPlatformOther.c\",\n@@ -42,6 +43,8 @@ fn main() {\n         cfg.define(\"strdup\", Some(\"_strdup\"));\n         cfg.define(\"open\", Some(\"_open\"));\n         cfg.define(\"fdopen\", Some(\"_fdopen\"));\n+        cfg.define(\"getpid\", Some(\"_getpid\"));\n+        cfg.define(\"fileno\", Some(\"_fileno\"));\n     } else {\n         // Turn off various features of gcc and such, mostly copying\n         // compiler-rt's build system already\n@@ -50,6 +53,7 @@ fn main() {\n         cfg.flag(\"-fomit-frame-pointer\");\n         cfg.flag(\"-ffreestanding\");\n         cfg.define(\"VISIBILITY_HIDDEN\", None);\n+        cfg.define(\"COMPILER_RT_HAS_UNAME\", Some(\"1\"));\n     }\n \n     for src in profile_sources {"}, {"sha": "9a5e929d85f2de1854aa79f079f1487a667cc3c3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -1249,6 +1249,14 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n+    pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"Generate PGO profile data, to a given file, or to the default \\\n+         location if it's empty.\"),\n+    pgo_use: String = (String::new(), parse_string, [TRACKED],\n+        \"Use PGO profile data from the given profile file.\"),\n+    disable_instrumentation_preinliner: bool =\n+        (false, parse_bool, [TRACKED], \"Disable the instrumentation pre-inliner, \\\n+        useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll: bool = (false, parse_bool, [UNTRACKED],\n@@ -1773,6 +1781,13 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if debugging_opts.pgo_gen.is_some() && !debugging_opts.pgo_use.is_empty() {\n+        early_error(\n+            error_format,\n+            \"options `-Z pgo-gen` and `-Z pgo-use` are exclusive\",\n+        );\n+    }\n+\n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n@@ -2886,6 +2901,14 @@ mod tests {\n         opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.debugging_opts.pgo_gen = Some(String::from(\"abc\"));\n+        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.pgo_use = String::from(\"abc\");\n+        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.cg.metadata = vec![String::from(\"A\"), String::from(\"B\")];\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "e73c570ed82310e4ff6bb5c9ec332aac7ce52859", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -121,6 +121,7 @@ impl InlineAsmDiagnostic {\n pub enum Diagnostic {\n     Optimization(OptimizationDiagnostic),\n     InlineAsm(InlineAsmDiagnostic),\n+    PGO(DiagnosticInfoRef),\n \n     /// LLVM has other types that we do not wrap here.\n     UnknownDiagnostic(DiagnosticInfoRef),\n@@ -160,6 +161,10 @@ impl Diagnostic {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationFailure, di))\n             }\n \n+            Dk::PGOProfile => {\n+                PGO(di)\n+            }\n+\n             _ => UnknownDiagnostic(di),\n         }\n     }"}, {"sha": "600cb6491ad2fb90364eebf4ee75929d16020938", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -322,6 +322,7 @@ pub enum DiagnosticKind {\n     OptimizationRemarkAnalysisAliasing,\n     OptimizationRemarkOther,\n     OptimizationFailure,\n+    PGOProfile,\n }\n \n /// LLVMRustArchiveKind\n@@ -1646,7 +1647,9 @@ extern \"C\" {\n                                                OptLevel: CodeGenOptLevel,\n                                                MergeFunctions: bool,\n                                                SLPVectorize: bool,\n-                                               LoopVectorize: bool);\n+                                               LoopVectorize: bool,\n+                                               PGOGenPath: *const c_char,\n+                                               PGOUsePath: *const c_char);\n     pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef,\n                                   M: ModuleRef,\n                                   DisableSimplifyLibCalls: bool);\n@@ -1741,6 +1744,7 @@ extern \"C\" {\n     pub fn LLVMRustModuleCost(M: ModuleRef) -> u64;\n \n     pub fn LLVMRustThinLTOAvailable() -> bool;\n+    pub fn LLVMRustPGOAvailable() -> bool;\n     pub fn LLVMRustWriteThinBitcodeToFile(PMR: PassManagerRef,\n                                           M: ModuleRef,\n                                           BC: *const c_char) -> bool;"}, {"sha": "802665b6ddbc51937c52265e6cf59fa45ce3c9b1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -784,7 +784,9 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self) {\n-        if self.sess.opts.debugging_opts.profile {\n+        if self.sess.opts.debugging_opts.profile ||\n+            self.sess.opts.debugging_opts.pgo_gen.is_some()\n+        {\n             info!(\"loading profiler\");\n \n             let symbol = Symbol::intern(\"profiler_builtins\");"}, {"sha": "c968b8525a5b1c90784cffbb335192e20a0ff611", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -92,6 +92,11 @@ pub fn set_probestack(cx: &CodegenCx, llfn: ValueRef) {\n         _ => {}\n     }\n \n+    // probestack doesn't play nice either with pgo-gen.\n+    if cx.sess().opts.debugging_opts.pgo_gen.is_some() {\n+        return;\n+    }\n+\n     // Flag our internal `__rust_probestack` function as the stack probe symbol.\n     // This is defined in the `compiler-builtins` crate for each architecture.\n     llvm::AddFunctionAttrStringValue("}, {"sha": "75ba83a7c620a62932c6bac64503fd4c47f23683", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -1085,6 +1085,10 @@ fn link_args(cmd: &mut Linker,\n         cmd.build_static_executable();\n     }\n \n+    if sess.opts.debugging_opts.pgo_gen.is_some() {\n+        cmd.pgo_gen();\n+    }\n+\n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the\n     // addl_lib_search_paths"}, {"sha": "a9095a66aaa98301e120519c4924a955e2ca6871", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -117,6 +117,7 @@ pub trait Linker {\n     fn partial_relro(&mut self);\n     fn no_relro(&mut self);\n     fn optimize(&mut self);\n+    fn pgo_gen(&mut self);\n     fn debuginfo(&mut self);\n     fn no_default_libraries(&mut self);\n     fn build_dylib(&mut self, out_filename: &Path);\n@@ -280,6 +281,24 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n+    fn pgo_gen(&mut self) {\n+        if !self.sess.target.target.options.linker_is_gnu { return }\n+\n+        // If we're doing PGO generation stuff and on a GNU-like linker, use the\n+        // \"-u\" flag to properly pull in the profiler runtime bits.\n+        //\n+        // This is because LLVM otherwise won't add the needed initialization\n+        // for us on Linux (though the extra flag should be harmless if it\n+        // does).\n+        //\n+        // See https://reviews.llvm.org/D14033 and https://reviews.llvm.org/D14030.\n+        //\n+        // Though it may be worth to try to revert those changes upstream, since\n+        // the overhead of the initialization should be minor.\n+        self.cmd.arg(\"-u\");\n+        self.cmd.arg(\"__llvm_profile_runtime\");\n+    }\n+\n     fn debuginfo(&mut self) {\n         match self.sess.opts.debuginfo {\n             DebugInfoLevel::NoDebugInfo => {\n@@ -520,6 +539,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // Needs more investigation of `/OPT` arguments\n     }\n \n+    fn pgo_gen(&mut self) {\n+        // Nothing needed here.\n+    }\n+\n     fn debuginfo(&mut self) {\n         // This will cause the Microsoft linker to generate a PDB file\n         // from the CodeView line tables in the object files.\n@@ -723,6 +746,10 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.args(&[\"--memory-init-file\", \"0\"]);\n     }\n \n+    fn pgo_gen(&mut self) {\n+        // noop, but maybe we need something like the gnu linker?\n+    }\n+\n     fn debuginfo(&mut self) {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n@@ -888,6 +915,9 @@ impl Linker for WasmLd {\n     fn optimize(&mut self) {\n     }\n \n+    fn pgo_gen(&mut self) {\n+    }\n+\n     fn debuginfo(&mut self) {\n     }\n "}, {"sha": "d205e6ca4eda6ed5b78e5afd8cfeeab40af71b07", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -223,6 +223,20 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n+    if tcx.sess.opts.debugging_opts.pgo_gen.is_some() {\n+        // These are weak symbols that point to the profile version and the\n+        // profile name, which need to be treated as exported so LTO doesn't nix\n+        // them.\n+        const PROFILER_WEAK_SYMBOLS: [&'static str; 2] = [\n+            \"__llvm_profile_raw_version\",\n+            \"__llvm_profile_filename\",\n+        ];\n+        for sym in &PROFILER_WEAK_SYMBOLS {\n+            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(sym));\n+            symbols.push((exported_symbol, SymbolExportLevel::C));\n+        }\n+    }\n+\n     if tcx.sess.crate_types.borrow().contains(&config::CrateTypeDylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));"}, {"sha": "2cbb88fed05c2c09b0ebdd49a9768b40cf93162d", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -240,6 +240,9 @@ pub struct ModuleConfig {\n     /// Some(level) to optimize binary size, or None to not affect program size.\n     opt_size: Option<llvm::CodeGenOptSize>,\n \n+    pgo_gen: Option<String>,\n+    pgo_use: String,\n+\n     // Flags indicating which outputs to produce.\n     emit_no_opt_bc: bool,\n     emit_bc: bool,\n@@ -274,6 +277,9 @@ impl ModuleConfig {\n             opt_level: None,\n             opt_size: None,\n \n+            pgo_gen: None,\n+            pgo_use: String::new(),\n+\n             emit_no_opt_bc: false,\n             emit_bc: false,\n             emit_bc_compressed: false,\n@@ -492,8 +498,13 @@ unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_vo\n                                                 opt.message));\n             }\n         }\n-\n-        _ => (),\n+        llvm::diagnostic::PGO(diagnostic_ref) => {\n+            let msg = llvm::build_string(|s| {\n+                llvm::LLVMRustWriteDiagnosticInfoToString(diagnostic_ref, s)\n+            }).expect(\"non-UTF8 PGO diagnostic\");\n+            diag_handler.warn(&msg);\n+        }\n+        llvm::diagnostic::UnknownDiagnostic(..) => {},\n     }\n }\n \n@@ -932,6 +943,9 @@ pub fn start_async_translation(tcx: TyCtxt,\n         modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n     }\n \n+    modules_config.pgo_gen = sess.opts.debugging_opts.pgo_gen.clone();\n+    modules_config.pgo_use = sess.opts.debugging_opts.pgo_use.clone();\n+\n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n \n@@ -2046,18 +2060,36 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n                             config: &ModuleConfig,\n                             opt_level: llvm::CodeGenOptLevel,\n                             f: &mut FnMut(llvm::PassManagerBuilderRef)) {\n+    use std::ptr;\n+\n     // Create the PassManagerBuilder for LLVM. We configure it with\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n     let opt_size = config.opt_size.unwrap_or(llvm::CodeGenOptSizeNone);\n     let inline_threshold = config.inline_threshold;\n \n-    llvm::LLVMRustConfigurePassManagerBuilder(builder,\n-                                              opt_level,\n-                                              config.merge_functions,\n-                                              config.vectorize_slp,\n-                                              config.vectorize_loop);\n+    let pgo_gen_path = config.pgo_gen.as_ref().map(|s| {\n+        let s = if s.is_empty() { \"default_%m.profraw\" } else { s };\n+        CString::new(s.as_bytes()).unwrap()\n+    });\n+\n+    let pgo_use_path = if config.pgo_use.is_empty() {\n+        None\n+    } else {\n+        Some(CString::new(config.pgo_use.as_bytes()).unwrap())\n+    };\n+\n+    llvm::LLVMRustConfigurePassManagerBuilder(\n+        builder,\n+        opt_level,\n+        config.merge_functions,\n+        config.vectorize_slp,\n+        config.vectorize_loop,\n+        pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+        pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+    );\n+\n     llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);\n \n     if opt_size != llvm::CodeGenOptSizeNone {"}, {"sha": "c839e5340f58dd7062c34a71ef639b68d5e6be21", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -708,6 +708,13 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n+    if (tcx.sess.opts.debugging_opts.pgo_gen.is_some() ||\n+        !tcx.sess.opts.debugging_opts.pgo_use.is_empty()) &&\n+        unsafe { !llvm::LLVMRustPGOAvailable() }\n+    {\n+        tcx.sess.fatal(\"this compiler's LLVM does not support PGO\");\n+    }\n+\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let link_meta = link::build_link_meta(crate_hash);\n "}, {"sha": "1c8f09ce7b3f1960bcfb5705e36f2143a18c4651", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -61,6 +61,9 @@ unsafe fn configure_llvm(sess: &Session) {\n         add(\"rustc\"); // fake program name\n         if sess.time_llvm_passes() { add(\"-time-passes\"); }\n         if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n+        if sess.opts.debugging_opts.disable_instrumentation_preinliner {\n+            add(\"-disable-preinline\");\n+        }\n \n         for arg in &sess.opts.cg.llvm_args {\n             add(&(*arg));"}, {"sha": "3d5cce81278ac872979800bbcbe3c1f740eeae82", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -44,6 +44,10 @@\n \n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n \n+#if LLVM_VERSION_GE(4, 0)\n+#define PGO_AVAILABLE\n+#endif\n+\n using namespace llvm;\n using namespace llvm::legacy;\n \n@@ -428,12 +432,27 @@ extern \"C\" void LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n \n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n-    bool MergeFunctions, bool SLPVectorize, bool LoopVectorize) {\n+    bool MergeFunctions, bool SLPVectorize, bool LoopVectorize,\n+    const char* PGOGenPath, const char* PGOUsePath) {\n   // Ignore mergefunc for now as enabling it causes crashes.\n   // unwrap(PMBR)->MergeFunctions = MergeFunctions;\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n+\n+#ifdef PGO_AVAILABLE\n+  if (PGOGenPath) {\n+    assert(!PGOUsePath);\n+    unwrap(PMBR)->EnablePGOInstrGen = true;\n+    unwrap(PMBR)->PGOInstrGen = PGOGenPath;\n+  }\n+  if (PGOUsePath) {\n+    assert(!PGOGenPath);\n+    unwrap(PMBR)->PGOInstrUse = PGOUsePath;\n+  }\n+#else\n+  assert(!PGOGenPath && !PGOUsePath && \"Should've caught earlier\");\n+#endif\n }\n \n // Unfortunately, the LLVM C API doesn't provide a way to set the `LibraryInfo`\n@@ -766,6 +785,15 @@ LLVMRustThinLTOAvailable() {\n #endif\n }\n \n+extern \"C\" bool\n+LLVMRustPGOAvailable() {\n+#ifdef PGO_AVAILABLE\n+  return true;\n+#else\n+  return false;\n+#endif\n+}\n+\n #if LLVM_VERSION_GE(4, 0)\n \n // Here you'll find an implementation of ThinLTO as used by the Rust compiler"}, {"sha": "0ef9643f4cab478acb19cfa335f12d3ac4b0b693", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -1021,6 +1021,7 @@ enum class LLVMRustDiagnosticKind {\n   OptimizationRemarkAnalysisAliasing,\n   OptimizationRemarkOther,\n   OptimizationFailure,\n+  PGOProfile,\n };\n \n static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n@@ -1043,6 +1044,8 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisFPCommute;\n   case DK_OptimizationRemarkAnalysisAliasing:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisAliasing;\n+  case DK_PGOProfile:\n+    return LLVMRustDiagnosticKind::PGOProfile;\n   default:\n     return (Kind >= DK_FirstRemark && Kind <= DK_LastRemark)\n                ? LLVMRustDiagnosticKind::OptimizationRemarkOther"}, {"sha": "e8c695f52bec0def2d90598f874b94f247f3cddf", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+ifeq ($(PROFILER_SUPPORT),1)\n+\t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n+\t$(call RUN,test) || exit 1\n+\t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n+endif"}, {"sha": "3f07b46791d22753d7a5492210b1d50c99c07cc7", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/test.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2Ftest.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "7dc227b5a145a342c3f3783151633a5f49f58965", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+ifeq ($(PROFILER_SUPPORT),1)\n+\t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n+\t$(call RUN,test) || exit 1\n+\t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n+endif"}, {"sha": "3f07b46791d22753d7a5492210b1d50c99c07cc7", "filename": "src/test/run-make-fulldeps/pgo-gen/test.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a86f4d8555702085b97de3a42234a82ddc045d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2Ftest.rs?ref=13a86f4d8555702085b97de3a42234a82ddc045d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}]}