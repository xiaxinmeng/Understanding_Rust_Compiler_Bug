{"sha": "44b3ddef8df7fa5392ce3608cbe1977f119337ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YjNkZGVmOGRmN2ZhNTM5MmNlMzYwOGNiZTE5NzdmMTE5MzM3ZWU=", "commit": {"author": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T11:12:17Z"}, "committer": {"name": "ville-h", "email": "ville3.14159@gmail.com", "date": "2015-01-04T11:12:17Z"}, "message": "fix code referencing RwLockWriteGuard", "tree": {"sha": "d50902703d349db7557f6d93a4746c11eb23abb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d50902703d349db7557f6d93a4746c11eb23abb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b3ddef8df7fa5392ce3608cbe1977f119337ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b3ddef8df7fa5392ce3608cbe1977f119337ee", "html_url": "https://github.com/rust-lang/rust/commit/44b3ddef8df7fa5392ce3608cbe1977f119337ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b3ddef8df7fa5392ce3608cbe1977f119337ee/comments", "author": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ville-h", "id": 8824715, "node_id": "MDQ6VXNlcjg4MjQ3MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8824715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ville-h", "html_url": "https://github.com/ville-h", "followers_url": "https://api.github.com/users/ville-h/followers", "following_url": "https://api.github.com/users/ville-h/following{/other_user}", "gists_url": "https://api.github.com/users/ville-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/ville-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ville-h/subscriptions", "organizations_url": "https://api.github.com/users/ville-h/orgs", "repos_url": "https://api.github.com/users/ville-h/repos", "events_url": "https://api.github.com/users/ville-h/events{/privacy}", "received_events_url": "https://api.github.com/users/ville-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e6d12017da5e323612108c81accb1f437f7137", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e6d12017da5e323612108c81accb1f437f7137", "html_url": "https://github.com/rust-lang/rust/commit/98e6d12017da5e323612108c81accb1f437f7137"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a2e1eb6c65ace713cb22226e4440f81eba8822c3", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b3ddef8df7fa5392ce3608cbe1977f119337ee/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b3ddef8df7fa5392ce3608cbe1977f119337ee/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=44b3ddef8df7fa5392ce3608cbe1977f119337ee", "patch": "@@ -22,7 +22,7 @@ pub use alloc::arc::{Arc, Weak};\n pub use self::mutex::{Mutex, MutexGuard, StaticMutex};\n pub use self::mutex::MUTEX_INIT;\n pub use self::rwlock::{RwLock, StaticRwLock, RW_LOCK_INIT};\n-pub use self::rwlock::{RwLockReadGuard, RWLockWriteGuard};\n+pub use self::rwlock::{RwLockReadGuard, RwLockWriteGuard};\n pub use self::condvar::{Condvar, StaticCondvar, CONDVAR_INIT};\n pub use self::once::{Once, ONCE_INIT};\n pub use self::semaphore::{Semaphore, SemaphoreGuard};"}, {"sha": "bc068d0e63702a45e1f6d0fbad1370e600452f91", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44b3ddef8df7fa5392ce3608cbe1977f119337ee/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b3ddef8df7fa5392ce3608cbe1977f119337ee/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=44b3ddef8df7fa5392ce3608cbe1977f119337ee", "patch": "@@ -199,9 +199,9 @@ impl<T: Send + Sync> RwLock<T> {\n     /// An error will be returned when the lock is acquired.\n     #[inline]\n     #[stable]\n-    pub fn write(&self) -> LockResult<RWLockWriteGuard<T>> {\n+    pub fn write(&self) -> LockResult<RwLockWriteGuard<T>> {\n         unsafe { self.inner.lock.write() }\n-        RWLockWriteGuard::new(&*self.inner, &self.data)\n+        RwLockWriteGuard::new(&*self.inner, &self.data)\n     }\n \n     /// Attempt to lock this rwlock with exclusive write access.\n@@ -218,9 +218,9 @@ impl<T: Send + Sync> RwLock<T> {\n     /// acquired.\n     #[inline]\n     #[stable]\n-    pub fn try_write(&self) -> TryLockResult<RWLockWriteGuard<T>> {\n+    pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<T>> {\n         if unsafe { self.inner.lock.try_read() } {\n-            Ok(try!(RWLockWriteGuard::new(&*self.inner, &self.data)))\n+            Ok(try!(RwLockWriteGuard::new(&*self.inner, &self.data)))\n         } else {\n             Err(TryLockError::WouldBlock)\n         }\n@@ -270,9 +270,9 @@ impl StaticRwLock {\n     /// See `RwLock::write`.\n     #[inline]\n     #[unstable = \"may be merged with RwLock in the future\"]\n-    pub fn write(&'static self) -> LockResult<RWLockWriteGuard<'static, ()>> {\n+    pub fn write(&'static self) -> LockResult<RwLockWriteGuard<'static, ()>> {\n         unsafe { self.lock.write() }\n-        RWLockWriteGuard::new(self, &DUMMY.0)\n+        RwLockWriteGuard::new(self, &DUMMY.0)\n     }\n \n     /// Attempt to lock this rwlock with exclusive write access.\n@@ -281,9 +281,9 @@ impl StaticRwLock {\n     #[inline]\n     #[unstable = \"may be merged with RwLock in the future\"]\n     pub fn try_write(&'static self)\n-                     -> TryLockResult<RWLockWriteGuard<'static, ()>> {\n+                     -> TryLockResult<RwLockWriteGuard<'static, ()>> {\n         if unsafe { self.lock.try_write() } {\n-            Ok(try!(RWLockWriteGuard::new(self, &DUMMY.0)))\n+            Ok(try!(RwLockWriteGuard::new(self, &DUMMY.0)))\n         } else {\n             Err(TryLockError::WouldBlock)\n         }"}]}