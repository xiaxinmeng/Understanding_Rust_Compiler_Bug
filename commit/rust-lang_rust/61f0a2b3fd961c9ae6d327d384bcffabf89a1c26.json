{"sha": "61f0a2b3fd961c9ae6d327d384bcffabf89a1c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjBhMmIzZmQ5NjFjOWFlNmQzMjdkMzg0YmNmZmFiZjg5YTFjMjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-29T21:08:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-29T21:08:47Z"}, "message": "fix some uses of pointer intrinsics with invalid pointers", "tree": {"sha": "4cd72969d46d559612a42e58d958abbd951e82a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cd72969d46d559612a42e58d958abbd951e82a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26", "html_url": "https://github.com/rust-lang/rust/commit/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e6aabcebe3bdb507df22a6233024711412b343", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e6aabcebe3bdb507df22a6233024711412b343", "html_url": "https://github.com/rust-lang/rust/commit/29e6aabcebe3bdb507df22a6233024711412b343"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "02393a185b1da2a4fd8296a5802f2b1e58270e61", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=61f0a2b3fd961c9ae6d327d384bcffabf89a1c26", "patch": "@@ -2410,9 +2410,8 @@ impl<T> Iterator for IntoIter<T> {\n                     // same pointer.\n                     self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;\n \n-                    // Use a non-null pointer value\n-                    // (self.ptr might be null because of wrapping)\n-                    Some(ptr::read(1 as *mut T))\n+                    // Read from a properly aligned pointer to make up a value of this ZST.\n+                    Some(ptr::read(NonNull::dangling().as_ptr()))\n                 } else {\n                     let old = self.ptr;\n                     self.ptr = self.ptr.offset(1);\n@@ -2451,9 +2450,8 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n                     // See above for why 'ptr.offset' isn't used\n                     self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n \n-                    // Use a non-null pointer value\n-                    // (self.end might be null because of wrapping)\n-                    Some(ptr::read(1 as *mut T))\n+                    // Read from a properly aligned pointer to make up a value of this ZST.\n+                    Some(ptr::read(NonNull::dangling().as_ptr()))\n                 } else {\n                     self.end = self.end.offset(-1);\n "}, {"sha": "547f97cc8acee1bccb45bae7ef94922087be66a3", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f0a2b3fd961c9ae6d327d384bcffabf89a1c26/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=61f0a2b3fd961c9ae6d327d384bcffabf89a1c26", "patch": "@@ -742,7 +742,9 @@ impl<K, V> RawTable<K, V> {\n     ) -> Result<RawTable<K, V>, CollectionAllocErr> {\n         unsafe {\n             let ret = RawTable::new_uninitialized_internal(capacity, fallibility)?;\n-            ptr::write_bytes(ret.hashes.ptr(), 0, capacity);\n+            if capacity > 0 {\n+                ptr::write_bytes(ret.hashes.ptr(), 0, capacity);\n+            }\n             Ok(ret)\n         }\n     }"}]}