{"sha": "62eb6056d332be09206dc664f2e949ae64341e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZWI2MDU2ZDMzMmJlMDkyMDZkYzY2NGYyZTk0OWFlNjQzNDFlNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-15T13:48:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-15T13:48:09Z"}, "message": "Auto merge of #39781 - nrc:save-impls, r=nikomatsakis\n\nsave-analysis: emit info about impls and super-traits in JSON", "tree": {"sha": "0db817c037c3cbb38c6fcdb573abcdbfcacae9ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db817c037c3cbb38c6fcdb573abcdbfcacae9ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62eb6056d332be09206dc664f2e949ae64341e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62eb6056d332be09206dc664f2e949ae64341e64", "html_url": "https://github.com/rust-lang/rust/commit/62eb6056d332be09206dc664f2e949ae64341e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62eb6056d332be09206dc664f2e949ae64341e64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0044bd3896456afb346d06e91a97ac515930ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0044bd3896456afb346d06e91a97ac515930ccf", "html_url": "https://github.com/rust-lang/rust/commit/e0044bd3896456afb346d06e91a97ac515930ccf"}, {"sha": "530d09c5d6782d4329b21661a2adacdc11806082", "url": "https://api.github.com/repos/rust-lang/rust/commits/530d09c5d6782d4329b21661a2adacdc11806082", "html_url": "https://github.com/rust-lang/rust/commit/530d09c5d6782d4329b21661a2adacdc11806082"}], "stats": {"total": 117, "additions": 97, "deletions": 20}, "files": [{"sha": "292f1eb13663b9b36a330a614b4e0fabc111b006", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=62eb6056d332be09206dc664f2e949ae64341e64", "patch": "@@ -747,21 +747,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     trait_ref: &'l Option<ast::TraitRef>,\n                     typ: &'l ast::Ty,\n                     impl_items: &'l [ast::ImplItem]) {\n-        let mut has_self_ref = false;\n         if let Some(impl_data) = self.save_ctxt.get_item_data(item) {\n             down_cast_data!(impl_data, ImplData, item.span);\n-            if let Some(ref self_ref) = impl_data.self_ref {\n-                has_self_ref = true;\n-                if !self.span.filter_generated(Some(self_ref.span), item.span) {\n-                    self.dumper.type_ref(self_ref.clone().lower(self.tcx));\n-                }\n-            }\n-            if let Some(ref trait_ref_data) = impl_data.trait_ref {\n-                if !self.span.filter_generated(Some(trait_ref_data.span), item.span) {\n-                    self.dumper.type_ref(trait_ref_data.clone().lower(self.tcx));\n-                }\n-            }\n-\n             if !self.span.filter_generated(Some(impl_data.span), item.span) {\n                 self.dumper.impl_data(ImplData {\n                     id: impl_data.id,\n@@ -772,9 +759,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 }.lower(self.tcx));\n             }\n         }\n-        if !has_self_ref {\n-            self.visit_ty(&typ);\n-        }\n+        self.visit_ty(&typ);\n         if let &Some(ref trait_ref) = trait_ref {\n             self.process_path(trait_ref.ref_id, &trait_ref.path, Some(recorder::TypeRef));\n         }"}, {"sha": "277535f9e651373318c162830e7c3889a2451bf7", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=62eb6056d332be09206dc664f2e949ae64341e64", "patch": "@@ -74,6 +74,15 @@ impl<'b, W: Write + 'b> Dump for JsonApiDumper<'b, W> {\n     impl_fn!(mod_data, ModData, defs);\n     impl_fn!(typedef, TypeDefData, defs);\n     impl_fn!(variable, VariableData, defs);\n+\n+    fn impl_data(&mut self, data: ImplData) {\n+        if data.self_ref.is_some() {\n+            self.result.relations.push(From::from(data));\n+        }\n+    }\n+    fn inheritance(&mut self, data: InheritanceData) {\n+        self.result.relations.push(From::from(data));\n+    }\n }\n \n // FIXME methods. The defs have information about possible overriding and the\n@@ -87,6 +96,7 @@ struct Analysis {\n     prelude: Option<CratePreludeData>,\n     imports: Vec<Import>,\n     defs: Vec<Def>,\n+    relations: Vec<Relation>,\n     // These two fields are dummies so that clients can parse the two kinds of\n     // JSON data in the same way.\n     refs: Vec<()>,\n@@ -100,6 +110,7 @@ impl Analysis {\n             prelude: None,\n             imports: vec![],\n             defs: vec![],\n+            relations: vec![],\n             refs: vec![],\n             macro_refs: vec![],\n         }\n@@ -427,6 +438,42 @@ impl From<VariableData> for Option<Def> {\n     }\n }\n \n+#[derive(Debug, RustcEncodable)]\n+struct Relation {\n+    span: SpanData,\n+    kind: RelationKind,\n+    from: Id,\n+    to: Id,\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+enum RelationKind {\n+    Impl,\n+    SuperTrait,\n+}\n+\n+impl From<ImplData> for Relation {\n+    fn from(data: ImplData) -> Relation {\n+        Relation {\n+            span: data.span,\n+            kind: RelationKind::Impl,\n+            from: From::from(data.self_ref.unwrap_or(null_def_id())),\n+            to: From::from(data.trait_ref.unwrap_or(null_def_id())),\n+        }\n+    }\n+}\n+\n+impl From<InheritanceData> for Relation {\n+    fn from(data: InheritanceData) -> Relation {\n+        Relation {\n+            span: data.span,\n+            kind: RelationKind::SuperTrait,\n+            from: From::from(data.base_id),\n+            to: From::from(data.deriv_id),\n+        }\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable)]\n pub struct JsonSignature {\n     span: SpanData,"}, {"sha": "09752994290c9c3490ec0ec4f1a4397c98740992", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=62eb6056d332be09206dc664f2e949ae64341e64", "patch": "@@ -112,9 +112,14 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n         self.result.defs.push(def);\n     }\n \n-    // FIXME store this instead of throwing it away.\n-    fn impl_data(&mut self, _data: ImplData) {}\n-    fn inheritance(&mut self, _data: InheritanceData) {}\n+    fn impl_data(&mut self, data: ImplData) {\n+        if data.self_ref.is_some() {\n+            self.result.relations.push(From::from(data));\n+        }\n+    }\n+    fn inheritance(&mut self, data: InheritanceData) {\n+        self.result.relations.push(From::from(data));\n+    }\n }\n \n // FIXME do we want to change ExternalData to this mode? It will break DXR.\n@@ -131,6 +136,7 @@ struct Analysis {\n     defs: Vec<Def>,\n     refs: Vec<Ref>,\n     macro_refs: Vec<MacroRef>,\n+    relations: Vec<Relation>,\n }\n \n impl Analysis {\n@@ -142,6 +148,7 @@ impl Analysis {\n             defs: vec![],\n             refs: vec![],\n             macro_refs: vec![],\n+            relations: vec![],\n         }\n     }\n }\n@@ -508,6 +515,42 @@ impl From<MacroUseData> for MacroRef {\n     }\n }\n \n+#[derive(Debug, RustcEncodable)]\n+struct Relation {\n+    span: SpanData,\n+    kind: RelationKind,\n+    from: Id,\n+    to: Id,\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+enum RelationKind {\n+    Impl,\n+    SuperTrait,\n+}\n+\n+impl From<ImplData> for Relation {\n+    fn from(data: ImplData) -> Relation {\n+        Relation {\n+            span: data.span,\n+            kind: RelationKind::Impl,\n+            from: From::from(data.self_ref.unwrap_or(null_def_id())),\n+            to: From::from(data.trait_ref.unwrap_or(null_def_id())),\n+        }\n+    }\n+}\n+\n+impl From<InheritanceData> for Relation {\n+    fn from(data: InheritanceData) -> Relation {\n+        Relation {\n+            span: data.span,\n+            kind: RelationKind::SuperTrait,\n+            from: From::from(data.base_id),\n+            to: From::from(data.deriv_id),\n+        }\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable)]\n pub struct JsonSignature {\n     span: SpanData,"}, {"sha": "ddc60fe5f81d85bfd054e2b94c2dfbe9914e1074", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62eb6056d332be09206dc664f2e949ae64341e64/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=62eb6056d332be09206dc664f2e949ae64341e64", "patch": "@@ -239,7 +239,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 match typ.node {\n                     // Common case impl for a struct or something basic.\n                     ast::TyKind::Path(None, ref path) => {\n-                        filter!(self.span_utils, None, path.span, None);\n+                        if generated_code(path.span) {\n+                            return None;\n+                        }\n                         sub_span = self.span_utils.sub_span_for_type_name(path.span);\n                         type_data = self.lookup_ref_id(typ.id).map(|id| {\n                             TypeRefData {"}]}