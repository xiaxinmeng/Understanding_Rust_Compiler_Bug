{"sha": "7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNmU1YjlkYTA4NjVmYmM5ZmE1NGVkYjMyNGZlZmU4MGYzNThkYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-27T19:41:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-27T19:41:40Z"}, "message": "Auto merge of #47420 - davidtwco:issue-46885, r=estebank\n\nFix off-by-one spans in MIR borrowck errors\n\nFixes #46885.\n\nr? @nikomatsakis", "tree": {"sha": "599504c84f3b9f0aa9eb34a1d55dd76d3f003829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/599504c84f3b9f0aa9eb34a1d55dd76d3f003829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "html_url": "https://github.com/rust-lang/rust/commit/7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b99adeb11313197f409b4f7c4083c2ceca8a4fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b99adeb11313197f409b4f7c4083c2ceca8a4fe", "html_url": "https://github.com/rust-lang/rust/commit/6b99adeb11313197f409b4f7c4083c2ceca8a4fe"}, {"sha": "0bd96671f0312fdc1eb07885835e58d258f1f927", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd96671f0312fdc1eb07885835e58d258f1f927", "html_url": "https://github.com/rust-lang/rust/commit/0bd96671f0312fdc1eb07885835e58d258f1f927"}], "stats": {"total": 185, "additions": 137, "deletions": 48}, "files": [{"sha": "b10e742595720dc595863c124d1404ce9d74f8b8", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -958,7 +958,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             // `sp` only covers `T`, change it so that it covers\n                             // `T:` when appropriate\n                             let sp = if has_lifetimes {\n-                                sp.to(sp.next_point().next_point())\n+                                sp.to(self.tcx.sess.codemap().next_point(\n+                                        self.tcx.sess.codemap().next_point(sp)))\n                             } else {\n                                 sp\n                             };"}, {"sha": "9888b2fffc7792beaa1a8c4590a185966f372621", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -591,8 +591,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             // 3. Where does old loan expire.\n \n             let previous_end_span =\n-                Some(old_loan.kill_scope.span(self.tcx(), &self.bccx.region_scope_tree)\n-                     .end_point());\n+                Some(self.tcx().sess.codemap().end_point(\n+                        old_loan.kill_scope.span(self.tcx(), &self.bccx.region_scope_tree)));\n \n             let mut err = match (new_loan.kind, old_loan.kind) {\n                 (ty::MutBorrow, ty::MutBorrow) =>"}, {"sha": "b35e8c6b41953dc27c870b314b823ca5f57bf516", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -1276,7 +1276,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     fn region_end_span(&self, region: ty::Region<'tcx>) -> Option<Span> {\n         match *region {\n             ty::ReScope(scope) => {\n-                Some(scope.span(self.tcx, &self.region_scope_tree).end_point())\n+                Some(self.tcx.sess.codemap().end_point(\n+                        scope.span(self.tcx, &self.region_scope_tree)))\n             }\n             _ => None\n         }"}, {"sha": "f69236516630ded31a4709edb1ded82c96427c3a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -1112,10 +1112,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             debug!(\"check_for_invalidation_at_exit({:?}): INVALID\", place);\n             // FIXME: should be talking about the region lifetime instead\n             // of just a span here.\n+            let span = self.tcx.sess.codemap().end_point(span);\n             self.report_borrowed_value_does_not_live_long_enough(\n                 context,\n                 borrow,\n-                span.end_point(),\n+                span,\n                 flow_state.borrows.operator(),\n             )\n         }"}, {"sha": "a631ab27d1c872bf50800437c988fd103b0c13d1", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -695,10 +695,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if let DropKind::Value { .. } = drop_kind {\n                     scope.needs_cleanup = true;\n                 }\n+\n                 let region_scope_span = region_scope.span(self.hir.tcx(),\n                                                           &self.hir.region_scope_tree);\n-                // Attribute scope exit drops to scope's closing brace\n-                let scope_end = region_scope_span.with_lo(region_scope_span.hi());\n+                // Attribute scope exit drops to scope's closing brace.\n+                let scope_end = self.hir.tcx().sess.codemap().end_point(region_scope_span);\n+\n                 scope.drops.push(DropData {\n                     span: scope_end,\n                     location: place.clone(),"}, {"sha": "d7cd8830adb00f78b9d4390a5c091c0719d4f228", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -537,8 +537,8 @@ impl<'a, 'gcx, 'tcx> ActiveBorrows<'a, 'gcx, 'tcx> {\n             Some(_) => None,\n             None => {\n                 match self.0.region_span_map.get(region) {\n-                    Some(span) => Some(span.end_point()),\n-                    None => Some(self.0.mir.span.end_point())\n+                    Some(span) => Some(self.0.tcx.sess.codemap().end_point(*span)),\n+                    None => Some(self.0.tcx.sess.codemap().end_point(self.0.mir.span))\n                 }\n             }\n         }"}, {"sha": "f7228fc3314c30b43f02da009db506316f1d9388", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -2871,8 +2871,8 @@ impl<'a> Resolver<'a> {\n         if let Some(sp) = self.current_type_ascription.last() {\n             let mut sp = *sp;\n             loop {  // try to find the `:`, bail on first non-':'/non-whitespace\n-                sp = sp.next_point();\n-                if let Ok(snippet) = cm.span_to_snippet(sp.to(sp.next_point())) {\n+                sp = cm.next_point(sp);\n+                if let Ok(snippet) = cm.span_to_snippet(sp.to(cm.next_point(sp))) {\n                     debug!(\"snippet {:?}\", snippet);\n                     let line_sp = cm.lookup_char_pos(sp.hi()).line;\n                     let line_base_sp = cm.lookup_char_pos(base_span.lo()).line;"}, {"sha": "9b24c09036bce9e893317f1871a0968bf43a61b9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -2457,7 +2457,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n-                let sugg_span = expr_sp.end_point();\n+                let sugg_span = sess.codemap().end_point(expr_sp);\n                 // remove closing `)` from the span\n                 let sugg_span = sugg_span.with_hi(sugg_span.lo());\n                 err.span_suggestion(\n@@ -4446,10 +4446,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// statement and the return type has been left as default or has been specified as `()`. If so,\n     /// it suggests adding a semicolon.\n     fn suggest_missing_semicolon(&self,\n-                                     err: &mut DiagnosticBuilder<'tcx>,\n-                                     expression: &'gcx hir::Expr,\n-                                     expected: Ty<'tcx>,\n-                                     cause_span: Span) {\n+                                 err: &mut DiagnosticBuilder<'tcx>,\n+                                 expression: &'gcx hir::Expr,\n+                                 expected: Ty<'tcx>,\n+                                 cause_span: Span) {\n         if expected.is_nil() {\n             // `BlockTailExpression` only relevant if the tail expr would be\n             // useful on its own.\n@@ -4461,7 +4461,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 hir::ExprLoop(..) |\n                 hir::ExprMatch(..) |\n                 hir::ExprBlock(..) => {\n-                    let sp = cause_span.next_point();\n+                    let sp = self.tcx.sess.codemap().next_point(cause_span);\n                     err.span_suggestion(sp,\n                                         \"try adding a semicolon\",\n                                         \";\".to_string());"}, {"sha": "a6a7f9e20b3a925fa9a236881fd045d0f37080ec", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -25,6 +25,7 @@ pub use self::ExpnFormat::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use std::cell::{RefCell, Ref};\n+use std::cmp;\n use std::hash::Hash;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n@@ -607,6 +608,101 @@ impl CodeMap {\n         self.span_until_char(sp, '{')\n     }\n \n+    /// Returns a new span representing just the end-point of this span\n+    pub fn end_point(&self, sp: Span) -> Span {\n+        let pos = sp.hi().0;\n+\n+        let width = self.find_width_of_character_at_span(sp, false);\n+        let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);\n+\n+        let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));\n+        sp.with_lo(end_point)\n+    }\n+\n+    /// Returns a new span representing the next character after the end-point of this span\n+    pub fn next_point(&self, sp: Span) -> Span {\n+        let start_of_next_point = sp.hi().0;\n+\n+        let width = self.find_width_of_character_at_span(sp, true);\n+        // If the width is 1, then the next span should point to the same `lo` and `hi`. However,\n+        // in the case of a multibyte character, where the width != 1, the next span should\n+        // span multiple bytes to include the whole character.\n+        let end_of_next_point = start_of_next_point.checked_add(\n+            width - 1).unwrap_or(start_of_next_point);\n+\n+        let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));\n+        Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt())\n+    }\n+\n+    /// Finds the width of a character, either before or after the provided span.\n+    fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {\n+        // Disregard malformed spans and assume a one-byte wide character.\n+        if sp.lo() >= sp.hi() {\n+            debug!(\"find_width_of_character_at_span: early return malformed span\");\n+            return 1;\n+        }\n+\n+        let local_begin = self.lookup_byte_offset(sp.lo());\n+        let local_end = self.lookup_byte_offset(sp.hi());\n+        debug!(\"find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`\",\n+               local_begin, local_end);\n+\n+        let start_index = local_begin.pos.to_usize();\n+        let end_index = local_end.pos.to_usize();\n+        debug!(\"find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`\",\n+               start_index, end_index);\n+\n+        // Disregard indexes that are at the start or end of their spans, they can't fit bigger\n+        // characters.\n+        if (!forwards && end_index == usize::min_value()) ||\n+            (forwards && start_index == usize::max_value()) {\n+            debug!(\"find_width_of_character_at_span: start or end of span, cannot be multibyte\");\n+            return 1;\n+        }\n+\n+        let source_len = (local_begin.fm.end_pos - local_begin.fm.start_pos).to_usize();\n+        debug!(\"find_width_of_character_at_span: source_len=`{:?}`\", source_len);\n+        // Ensure indexes are also not malformed.\n+        if start_index > end_index || end_index > source_len {\n+            debug!(\"find_width_of_character_at_span: source indexes are malformed\");\n+            return 1;\n+        }\n+\n+        // We need to extend the snippet to the end of the src rather than to end_index so when\n+        // searching forwards for boundaries we've got somewhere to search.\n+        let snippet = if let Some(ref src) = local_begin.fm.src {\n+            let len = src.len();\n+            (&src[start_index..len]).to_string()\n+        } else if let Some(src) = local_begin.fm.external_src.borrow().get_source() {\n+            let len = src.len();\n+            (&src[start_index..len]).to_string()\n+        } else {\n+            return 1;\n+        };\n+        debug!(\"find_width_of_character_at_span: snippet=`{:?}`\", snippet);\n+\n+        let file_start_pos = local_begin.fm.start_pos.to_usize();\n+        let file_end_pos = local_begin.fm.end_pos.to_usize();\n+        debug!(\"find_width_of_character_at_span: file_start_pos=`{:?}` file_end_pos=`{:?}`\",\n+               file_start_pos, file_end_pos);\n+\n+        let mut target = if forwards { end_index + 1 } else { end_index - 1 };\n+        debug!(\"find_width_of_character_at_span: initial target=`{:?}`\", target);\n+\n+        while !snippet.is_char_boundary(target - start_index)\n+                && target >= file_start_pos && target <= file_end_pos {\n+            target = if forwards { target + 1 } else { target - 1 };\n+            debug!(\"find_width_of_character_at_span: target=`{:?}`\", target);\n+        }\n+        debug!(\"find_width_of_character_at_span: final target=`{:?}`\", target);\n+\n+        if forwards {\n+            (target - end_index) as u32\n+        } else {\n+            (end_index - target) as u32\n+        }\n+    }\n+\n     pub fn get_filemap(&self, filename: &FileName) -> Option<Rc<FileMap>> {\n         for fm in self.files.borrow().iter() {\n             if *filename == fm.name {"}, {"sha": "e8e87e2854b777db8ae86cd0262487cad70e3fd3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -704,13 +704,15 @@ impl<'a> Parser<'a> {\n                     expect.clone()\n                 };\n                 (format!(\"expected one of {}, found `{}`\", expect, actual),\n-                 (self.prev_span.next_point(), format!(\"expected one of {} here\", short_expect)))\n+                 (self.sess.codemap().next_point(self.prev_span),\n+                  format!(\"expected one of {} here\", short_expect)))\n             } else if expected.is_empty() {\n                 (format!(\"unexpected token: `{}`\", actual),\n                  (self.prev_span, \"unexpected token after this\".to_string()))\n             } else {\n                 (format!(\"expected {}, found `{}`\", expect, actual),\n-                 (self.prev_span.next_point(), format!(\"expected {} here\", expect)))\n+                 (self.sess.codemap().next_point(self.prev_span),\n+                  format!(\"expected {} here\", expect)))\n             };\n             let mut err = self.fatal(&msg_exp);\n             let sp = if self.token == token::Token::Eof {\n@@ -3190,7 +3192,7 @@ impl<'a> Parser<'a> {\n         // return. This won't catch blocks with an explicit `return`, but that would be caught by\n         // the dead code lint.\n         if self.eat_keyword(keywords::Else) || !cond.returns() {\n-            let sp = lo.next_point();\n+            let sp = self.sess.codemap().next_point(lo);\n             let mut err = self.diagnostic()\n                 .struct_span_err(sp, \"missing condition for `if` statemement\");\n             err.span_label(sp, \"expected if condition here\");"}, {"sha": "dd1ec7284f6901320987f68a3bd325bf2ad5201f", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -216,20 +216,6 @@ impl Span {\n         self.data().with_ctxt(ctxt)\n     }\n \n-    /// Returns a new span representing just the end-point of this span\n-    pub fn end_point(self) -> Span {\n-        let span = self.data();\n-        let lo = cmp::max(span.hi.0 - 1, span.lo.0);\n-        span.with_lo(BytePos(lo))\n-    }\n-\n-    /// Returns a new span representing the next character after the end-point of this span\n-    pub fn next_point(self) -> Span {\n-        let span = self.data();\n-        let lo = cmp::max(span.hi.0, span.lo.0 + 1);\n-        Span::new(BytePos(lo), BytePos(lo), span.ctxt)\n-    }\n-\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.source_equal(&DUMMY_SP) { other } else { self }"}, {"sha": "97dfb458d2dfb24451a58353adf86bb508e39e05", "filename": "src/test/ui/issue-46471-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -15,7 +15,7 @@ error[E0597]: `z` does not live long enough (Mir)\n 16 |         &mut z\n    |         ^^^^^^ borrowed value does not live long enough\n 17 |     };\n-   |      - `z` dropped here while still borrowed\n+   |     - `z` dropped here while still borrowed\n ...\n 21 | }\n    | - borrowed value needs to live until here"}, {"sha": "4c196bba5a1f10d1c02660bed9dfba2f5fc38e06", "filename": "src/test/ui/issue-46471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -16,7 +16,7 @@ error[E0597]: `x` does not live long enough (Mir)\n    |     ^^ borrowed value does not live long enough\n ...\n 18 | }\n-   |  - borrowed value only lives until here\n+   | - borrowed value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "2f332a7a55850dc5f74789d067fe88958306f979", "filename": "src/test/ui/issue-46472.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -24,7 +24,7 @@ error[E0597]: borrowed value does not live long enough (Mir)\n    |          ^ temporary value does not live long enough\n ...\n 17 | }\n-   |  - temporary value only lives until here\n+   | - temporary value only lives until here\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n   --> $DIR/issue-46472.rs:13:1"}, {"sha": "d05ec91be3026cc4fe515d364f5a505f4cd28e60", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -5,7 +5,7 @@ error[E0597]: `y` does not live long enough\n    |                ^^ borrowed value does not live long enough\n ...\n 38 |     }\n-   |      - borrowed value only lives until here\n+   |     - borrowed value only lives until here\n 39 | \n 40 |     deref(p);\n    |           - borrow later used here"}, {"sha": "ee29f2f9c5c59b7264e1b5b26fb869fe0e3a1041", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -30,7 +30,7 @@ error[E0597]: `y` does not live long enough\n    |                         ^^ borrowed value does not live long enough\n 38 |         //~^ ERROR `y` does not live long enough [E0597]\n 39 |     }\n-   |      - borrowed value only lives until here\n+   |     - borrowed value only lives until here\n 40 | \n 41 |     deref(p);\n    |           - borrow later used here"}, {"sha": "501d2991547377efc0f5d99acbed21014c196f53", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -57,7 +57,7 @@ error[E0597]: `y` does not live long enough\n    | |_________^ borrowed value does not live long enough\n ...\n 36 |       }\n-   |        - borrowed value only lives until here\n+   |       - borrowed value only lives until here\n 37 | \n 38 |       deref(p);\n    |             - borrow later used here"}, {"sha": "556cd020f7ff5aaac4ff79788d4b4f3eaeaf207e", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -34,7 +34,7 @@ error[E0597]: `y` does not live long enough\n    |                           ^^^^^^^^^ borrowed value does not live long enough\n ...\n 36 |     }\n-   |      - borrowed value only lives until here\n+   |     - borrowed value only lives until here\n 37 | \n 38 |     deref(p);\n    |           - borrow later used here"}, {"sha": "dee5873ba3be1c9511164325b4d82f33899cb4b1", "filename": "src/test/ui/nll/drop-no-may-dangle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -8,7 +8,7 @@ error[E0506]: cannot assign to `v[..]` because it is borrowed\n    |         ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n ...\n 35 | }\n-   |  - borrow later used here, when `p` is dropped\n+   | - borrow later used here, when `p` is dropped\n \n error[E0506]: cannot assign to `v[..]` because it is borrowed\n   --> $DIR/drop-no-may-dangle.rs:34:5\n@@ -19,7 +19,7 @@ error[E0506]: cannot assign to `v[..]` because it is borrowed\n 34 |     v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n    |     ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n 35 | }\n-   |  - borrow later used here, when `p` is dropped\n+   | - borrow later used here, when `p` is dropped\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fbaaf5511ccd506b086f2bf94bc5059947cfb3dc", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -8,7 +8,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |     ^^^^^ assignment to borrowed `x` occurs here\n 33 |     // FIXME ^ Should not error in the future with implicit dtors, only manually implemented ones\n 34 | }\n-   |  - borrow later used here, when `foo` is dropped\n+   | - borrow later used here, when `foo` is dropped\n \n error: aborting due to previous error\n "}, {"sha": "5d526cda042e91b8ae9bf9c1b8ccaef6e1e2a4f4", "filename": "src/test/ui/nll/maybe-initialized-drop-with-fragment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -7,7 +7,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n 31 |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n 32 | }\n-   |  - borrow later used here, when `foo` is dropped\n+   | - borrow later used here, when `foo` is dropped\n \n error: aborting due to previous error\n "}, {"sha": "ecd60821194f831fbf3eb3cb32cd97328bc72593", "filename": "src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -8,7 +8,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |     ^^^^^ assignment to borrowed `x` occurs here\n 33 |     // FIXME ^ This currently errors and it should not.\n 34 | }\n-   |  - borrow later used here, when `foo` is dropped\n+   | - borrow later used here, when `foo` is dropped\n \n error: aborting due to previous error\n "}, {"sha": "874d63a0441b61971ecb636102d3d3d6d040ef51", "filename": "src/test/ui/nll/maybe-initialized-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -6,7 +6,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n 26 |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n 27 | }\n-   |  - borrow later used here, when `wrap` is dropped\n+   | - borrow later used here, when `wrap` is dropped\n \n error: aborting due to previous error\n "}, {"sha": "cd77569dae0bffd86c140e9dd8dc750e25bdecd6", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6e5b9da0865fbc9fa54edb324fefe80f358da7/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr?ref=7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "patch": "@@ -5,7 +5,7 @@ error[E0597]: borrowed value does not live long enough\n    |                     ^^^^^^^ temporary value does not live long enough\n 18 |     x\n 19 | }\n-   |  - temporary value only lives until here\n+   | - temporary value only lives until here\n    |\n    = note: borrowed value must be valid for lifetime '_#2r...\n "}]}