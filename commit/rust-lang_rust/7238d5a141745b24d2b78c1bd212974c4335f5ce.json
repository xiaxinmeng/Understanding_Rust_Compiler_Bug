{"sha": "7238d5a141745b24d2b78c1bd212974c4335f5ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzhkNWExNDE3NDViMjRkMmI3OGMxYmQyMTI5NzRjNDMzNWY1Y2U=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-02T21:39:25Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-03T16:59:45Z"}, "message": "Make privacy checking on default methods for cross crate structs not fail. Closes #7481.\n\nIt is unclear to me that the way method call privacy checking is done\nmakes any sense, though. It is only performed if the type is a\nstruct...", "tree": {"sha": "3dbecad2c000bd802acdaaf5a2f8a74bffcbc19f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dbecad2c000bd802acdaaf5a2f8a74bffcbc19f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7238d5a141745b24d2b78c1bd212974c4335f5ce", "comment_count": 21, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7238d5a141745b24d2b78c1bd212974c4335f5ce", "html_url": "https://github.com/rust-lang/rust/commit/7238d5a141745b24d2b78c1bd212974c4335f5ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7238d5a141745b24d2b78c1bd212974c4335f5ce/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419a14772a6ae4c61fd275e31dbfceedd0223630", "url": "https://api.github.com/repos/rust-lang/rust/commits/419a14772a6ae4c61fd275e31dbfceedd0223630", "html_url": "https://github.com/rust-lang/rust/commit/419a14772a6ae4c61fd275e31dbfceedd0223630"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "64ed3b0211d39ea8f51b5c9db99e79df890b5325", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7238d5a141745b24d2b78c1bd212974c4335f5ce/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7238d5a141745b24d2b78c1bd212974c4335f5ce/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7238d5a141745b24d2b78c1bd212974c4335f5ce", "patch": "@@ -245,6 +245,14 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n                                  method_id: def_id,\n                                  name: &ident) =\n             |span, method_id, name| {\n+        // If the method is a default method, we need to use the def_id of\n+        // the default implementation.\n+        // Having to do this this is really unfortunate.\n+        let method_id = match tcx.provided_method_sources.find(&method_id) {\n+            None => method_id,\n+            Some(source) => source.method_id\n+        };\n+\n         if method_id.crate == local_crate {\n             let is_private = method_is_private(span, method_id.node);\n             let container_id = local_method_container_id(span,"}, {"sha": "7ae648f113a38d0f5808da755b09e5ec260bc50a", "filename": "src/test/auxiliary/trait_default_method_xc_aux.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7238d5a141745b24d2b78c1bd212974c4335f5ce/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7238d5a141745b24d2b78c1bd212974c4335f5ce/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs?ref=7238d5a141745b24d2b78c1bd212974c4335f5ce", "patch": "@@ -1,5 +1,7 @@\n #[allow(default_methods)];\n \n+pub struct Something { x: int }\n+\n pub trait A {\n     fn f(&self) -> int;\n     fn g(&self) -> int { 10 }\n@@ -11,6 +13,10 @@ impl A for int {\n     fn f(&self) -> int { 10 }\n }\n \n+impl A for Something {\n+    fn f(&self) -> int { 10 }\n+}\n+\n trait B<T> {\n     fn thing<U>(&self, x: T, y: U) -> (T, U) { (x, y) }\n }"}, {"sha": "4eac1a1e7308fa775686289fc9d613898349f8a2", "filename": "src/test/run-pass/trait-default-method-xc.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7238d5a141745b24d2b78c1bd212974c4335f5ce/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7238d5a141745b24d2b78c1bd212974c4335f5ce/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs?ref=7238d5a141745b24d2b78c1bd212974c4335f5ce", "patch": "@@ -4,16 +4,18 @@\n #[allow(default_methods)];\n \n extern mod aux(name = \"trait_default_method_xc_aux\");\n-use aux::{A, B, TestEquality};\n+use aux::{A, B, TestEquality, Something};\n \n \n fn f<T: aux::A>(i: T) {\n     assert_eq!(i.g(), 10);\n }\n \n+mod stuff {\n+    pub struct thing { x: int }\n+}\n \n-pub struct thing { x: int }\n-impl A for thing {\n+impl A for stuff::thing {\n     fn f(&self) -> int { 10 }\n }\n \n@@ -29,8 +31,8 @@ fn neq<T: TestEquality>(lhs: &T, rhs: &T) -> bool {\n }\n \n \n-impl TestEquality for thing {\n-    fn test_eq(&self, rhs: &thing) -> bool {\n+impl TestEquality for stuff::thing {\n+    fn test_eq(&self, rhs: &stuff::thing) -> bool {\n         //self.x.test_eq(&rhs.x)\n         eq(&self.x, &rhs.x)\n     }\n@@ -41,15 +43,17 @@ fn main () {\n     // Some tests of random things\n     f(0);\n \n-    let a = thing { x: 0 };\n-    let b = thing { x: 1 };\n+    let a = stuff::thing { x: 0 };\n+    let b = stuff::thing { x: 1 };\n+    let c = Something { x: 1 };\n \n-    //assert_eq!(0i.g(), 10);\n+    assert_eq!(0i.g(), 10);\n     assert_eq!(a.g(), 10);\n     assert_eq!(a.h(), 10);\n+    assert_eq!(c.h(), 10);\n \n-\n-    //assert_eq!(0i.thing(3.14, 1), (3.14, 1));\n+    0i.thing(3.14, 1);\n+    assert_eq!(0i.thing(3.14, 1), (3.14, 1));\n \n     assert_eq!(g(0i, 3.14, 1), (3.14, 1));\n     assert_eq!(g(false, 3.14, 1), (3.14, 1));\n@@ -59,8 +63,8 @@ fn main () {\n \n \n     // Trying out a real one\n-    //assert!(12.test_neq(&10));\n-    //assert!(!10.test_neq(&10));\n+    assert!(12.test_neq(&10));\n+    assert!(!10.test_neq(&10));\n     assert!(a.test_neq(&b));\n     assert!(!a.test_neq(&a));\n "}]}