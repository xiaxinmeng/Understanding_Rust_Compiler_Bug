{"sha": "e1cd1853c8e29e7d951edc603726add1ea64f513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxY2QxODUzYzhlMjllN2Q5NTFlZGM2MDM3MjZhZGQxZWE2NGY1MTM=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-07-16T15:21:10Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-08-16T19:25:51Z"}, "message": "move DelaySpanBugEmitted to ty::context", "tree": {"sha": "c27b121c63ad1e0a76c1388edef6e895084106f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c27b121c63ad1e0a76c1388edef6e895084106f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1cd1853c8e29e7d951edc603726add1ea64f513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cd1853c8e29e7d951edc603726add1ea64f513", "html_url": "https://github.com/rust-lang/rust/commit/e1cd1853c8e29e7d951edc603726add1ea64f513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1cd1853c8e29e7d951edc603726add1ea64f513/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009551f758d1d007ad0f7b652bfa8ddba0738117", "url": "https://api.github.com/repos/rust-lang/rust/commits/009551f758d1d007ad0f7b652bfa8ddba0738117", "html_url": "https://github.com/rust-lang/rust/commit/009551f758d1d007ad0f7b652bfa8ddba0738117"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "ede28522000afcde48b0b1d645b2db3737845030", "filename": "src/librustc_middle/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs?ref=e1cd1853c8e29e7d951edc603726add1ea64f513", "patch": "@@ -34,7 +34,7 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(ty::sty::DelaySpanBugEmitted),\n+    Error(ty::DelaySpanBugEmitted),\n }\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "206f6a270e4c36555391310ed3f38ebb0b007d6b", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=e1cd1853c8e29e7d951edc603726add1ea64f513", "patch": "@@ -64,6 +64,12 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n+/// A type that is not publicly constructable. This prevents people from making `TyKind::Error`\n+/// except through `tcx.err*()`, which are in this module.\n+#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n+#[derive(TyEncodable, TyDecodable, HashStable)]\n+pub struct DelaySpanBugEmitted(());\n+\n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -1170,18 +1176,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n         self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(super::sty::DelaySpanBugEmitted(())))\n+        self.mk_ty(Error(DelaySpanBugEmitted(())))\n     }\n \n     /// Like `err` but for constants.\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n         self.sess\n             .delay_span_bug(DUMMY_SP, \"ty::ConstKind::Error constructed but no error reported.\");\n-        self.mk_const(ty::Const {\n-            val: ty::ConstKind::Error(super::sty::DelaySpanBugEmitted(())),\n-            ty,\n-        })\n+        self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {"}, {"sha": "142978c1687fef6bb0ab4c904ace6d4d3366ce81", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=e1cd1853c8e29e7d951edc603726add1ea64f513", "patch": "@@ -72,8 +72,8 @@ pub use self::binding::BindingMode::*;\n \n pub use self::context::{tls, FreeRegionInfo, TyCtxt};\n pub use self::context::{\n-    CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, ResolvedOpaqueTy,\n-    UserType, UserTypeAnnotationIndex,\n+    CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n+    DelaySpanBugEmitted, ResolvedOpaqueTy, UserType, UserTypeAnnotationIndex,\n };\n pub use self::context::{\n     CtxtInterners, GeneratorInteriorTypeCause, GlobalCtxt, Lift, TypeckResults,"}, {"sha": "1bcdf2dc0421f0f51afb62360f7aec9373995d89", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cd1853c8e29e7d951edc603726add1ea64f513/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=e1cd1853c8e29e7d951edc603726add1ea64f513", "patch": "@@ -10,7 +10,7 @@ use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{\n     self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable, WithConstness,\n };\n-use crate::ty::{List, ParamEnv, TyS};\n+use crate::ty::{DelaySpanBugEmitted, List, ParamEnv, TyS};\n use polonius_engine::Atom;\n use rustc_ast::ast;\n use rustc_data_structures::captures::Captures;\n@@ -212,12 +212,6 @@ impl TyKind<'tcx> {\n     }\n }\n \n-/// A type that is not publicly constructable. This prevents people from making `TyKind::Error`\n-/// except through `tcx.err*()`.\n-#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n-pub struct DelaySpanBugEmitted(pub(super) ());\n-\n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(TyKind<'_>, 24);"}]}