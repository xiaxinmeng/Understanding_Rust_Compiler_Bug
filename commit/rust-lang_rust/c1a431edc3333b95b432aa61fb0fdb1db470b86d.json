{"sha": "c1a431edc3333b95b432aa61fb0fdb1db470b86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTQzMWVkYzMzMzNiOTViNDMyYWE2MWZiMGZkYjFkYjQ3MGI4NmQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-30T16:56:10Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-02T14:11:47Z"}, "message": "validate: storage must be allocated on local use", "tree": {"sha": "62f5bf1566aabaf4260beed9e6582f2c13363d5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f5bf1566aabaf4260beed9e6582f2c13363d5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a431edc3333b95b432aa61fb0fdb1db470b86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a431edc3333b95b432aa61fb0fdb1db470b86d", "html_url": "https://github.com/rust-lang/rust/commit/c1a431edc3333b95b432aa61fb0fdb1db470b86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a431edc3333b95b432aa61fb0fdb1db470b86d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "html_url": "https://github.com/rust-lang/rust/commit/4dedf5edd51d0e0b1b45a61403842f8406e13b2c"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "d1a91ae4fc33ae04ef23d075c36f127c8727f710", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c1a431edc3333b95b432aa61fb0fdb1db470b86d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a431edc3333b95b432aa61fb0fdb1db470b86d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=c1a431edc3333b95b432aa61fb0fdb1db470b86d", "patch": "@@ -1,7 +1,12 @@\n //! Validates the MIR to ensure that invariants are upheld.\n \n+use crate::{\n+    dataflow::impls::MaybeStorageLive, dataflow::Analysis, dataflow::ResultsCursor,\n+    util::storage::AlwaysLiveLocals,\n+};\n+\n use super::{MirPass, MirSource};\n-use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::{visit::PlaceContext, visit::Visitor, Local};\n use rustc_middle::{\n     mir::{\n         AggregateKind, BasicBlock, Body, BorrowKind, Location, MirPhase, Operand, Rvalue,\n@@ -33,9 +38,18 @@ pub struct Validator {\n \n impl<'tcx> MirPass<'tcx> for Validator {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let param_env = tcx.param_env(source.def_id());\n+        let def_id = source.def_id();\n+        let param_env = tcx.param_env(def_id);\n         let mir_phase = self.mir_phase;\n-        TypeChecker { when: &self.when, source, body, tcx, param_env, mir_phase }.visit_body(body);\n+\n+        let always_live_locals = AlwaysLiveLocals::new(body);\n+        let storage_liveness = MaybeStorageLive::new(always_live_locals)\n+            .into_engine(tcx, body, def_id)\n+            .iterate_to_fixpoint()\n+            .into_results_cursor(body);\n+\n+        TypeChecker { when: &self.when, source, body, tcx, param_env, mir_phase, storage_liveness }\n+            .visit_body(body);\n     }\n }\n \n@@ -138,6 +152,7 @@ struct TypeChecker<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     mir_phase: MirPhase,\n+    storage_liveness: ResultsCursor<'a, 'tcx, MaybeStorageLive>,\n }\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n@@ -210,6 +225,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n+    fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n+        if context.is_use() {\n+            // Uses of locals must occur while the local's storage is allocated.\n+            self.storage_liveness.seek_after_primary_effect(location);\n+            let locals_with_storage = self.storage_liveness.get();\n+            if !locals_with_storage.contains(*local) {\n+                self.fail(location, format!(\"use of local {:?}, which has no storage here\", local));\n+            }\n+        }\n+    }\n+\n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         // `Operand::Copy` is only supposed to be used with `Copy` types.\n         if let Operand::Copy(place) = operand {"}]}