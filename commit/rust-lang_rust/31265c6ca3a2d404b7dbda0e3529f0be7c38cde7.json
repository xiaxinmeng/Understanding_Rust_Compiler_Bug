{"sha": "31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "node_id": "C_kwDOAAsO6NoAKDMxMjY1YzZjYTNhMmQ0MDRiN2RiZGEwZTM1MjlmMGJlN2MzOGNkZTc", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-10-11T04:09:15Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-10-13T04:10:09Z"}, "message": "Assemble the compiler when running `x.py build`\n\nPreviously, there was no way to actually get binaries in\n`build/$TARGET/stage1/bin` without building the standard library. This\nmakes it possible to build just the compiler. This can be useful when\nthe standard library isn't actually necessary for trying out your tests\n(e.g. a bug that can be reproduced with only a `no_core` crate).", "tree": {"sha": "c6d0a3cf386fafd98beca210af25631995bc3d60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6d0a3cf386fafd98beca210af25631995bc3d60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "html_url": "https://github.com/rust-lang/rust/commit/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8dd1b2f24dc62c962172b27433106b4e84dc62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8dd1b2f24dc62c962172b27433106b4e84dc62", "html_url": "https://github.com/rust-lang/rust/commit/ac8dd1b2f24dc62c962172b27433106b4e84dc62"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b55e7d8d50e36447db1d6a7ee0ca9949a258725c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "patch": "@@ -370,7 +370,7 @@ impl<'a> Builder<'a> {\n         match kind {\n             Kind::Build => describe!(\n                 compile::Std,\n-                compile::Rustc,\n+                compile::Assemble,\n                 compile::CodegenBackend,\n                 compile::StartupObjects,\n                 tool::BuildManifest,"}, {"sha": "6a4d57a36b71c613ee10690df8fe493f888e4d10", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31265c6ca3a2d404b7dbda0e3529f0be7c38cde7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=31265c6ca3a2d404b7dbda0e3529f0be7c38cde7", "patch": "@@ -528,7 +528,7 @@ impl Step for Rustc {\n     const DEFAULT: bool = false;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"compiler/rustc\")\n+        run.never()\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1023,9 +1023,16 @@ pub struct Assemble {\n \n impl Step for Assemble {\n     type Output = Compiler;\n+    const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.never()\n+        run.path(\"compiler/rustc\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Assemble {\n+            target_compiler: run.builder.compiler(run.builder.top_stage + 1, run.target),\n+        });\n     }\n \n     /// Prepare a new compiler from the artifacts in `stage`"}]}