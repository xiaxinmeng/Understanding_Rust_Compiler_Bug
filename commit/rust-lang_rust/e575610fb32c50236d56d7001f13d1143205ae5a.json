{"sha": "e575610fb32c50236d56d7001f13d1143205ae5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzU2MTBmYjMyYzUwMjM2ZDU2ZDcwMDFmMTNkMTE0MzIwNWFlNWE=", "commit": {"author": {"name": "lyj", "email": "sjtu5140809011@gmail.com", "date": "2021-06-02T05:41:52Z"}, "committer": {"name": "lyj", "email": "sjtu5140809011@gmail.com", "date": "2021-07-14T23:10:55Z"}, "message": "redundant_allocation: add Arc; some refractoring.", "tree": {"sha": "33e0d456a1429d1bbbb8d17ab800b73a28952828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e0d456a1429d1bbbb8d17ab800b73a28952828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e575610fb32c50236d56d7001f13d1143205ae5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e575610fb32c50236d56d7001f13d1143205ae5a", "html_url": "https://github.com/rust-lang/rust/commit/e575610fb32c50236d56d7001f13d1143205ae5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e575610fb32c50236d56d7001f13d1143205ae5a/comments", "author": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b193e247f108c303d2ef9818ddd4aadceaf5760", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b193e247f108c303d2ef9818ddd4aadceaf5760", "html_url": "https://github.com/rust-lang/rust/commit/2b193e247f108c303d2ef9818ddd4aadceaf5760"}], "stats": {"total": 674, "additions": 509, "deletions": 165}, "files": [{"sha": "7d629b5455b62913f4b480ce67fed09e65c1c4f1", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e575610fb32c50236d56d7001f13d1143205ae5a/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e575610fb32c50236d56d7001f13d1143205ae5a/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=e575610fb32c50236d56d7001f13d1143205ae5a", "patch": "@@ -178,8 +178,8 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// **What it does:** Checks for use of redundant allocations anywhere in the code.\n     ///\n-    /// **Why is this bad?** Expressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Box<T>>`, `Box<&T>`\n-    /// add an unnecessary level of indirection.\n+    /// **Why is this bad?** Expressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Arc<T>>`, `Rc<Box<T>>`, Arc<&T>`, `Arc<Rc<T>>`,\n+    /// `Arc<Arc<T>>`, `Arc<Box<T>>`, `Box<&T>`, `Box<Rc<T>>`, `Box<Arc<T>>`, `Box<Box<T>>`, add an unnecessary level of indirection.\n     ///\n     /// **Known problems:** None.\n     ///"}, {"sha": "8e83dcbf704e0930fecd8384910e51acbc10fa9e", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 89, "deletions": 64, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/e575610fb32c50236d56d7001f13d1143205ae5a/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e575610fb32c50236d56d7001f13d1143205ae5a/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=e575610fb32c50236d56d7001f13d1143205ae5a", "patch": "@@ -1,5 +1,5 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{get_qpath_generic_tys, is_ty_param_diagnostic_item, is_ty_param_lang_item};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, LangItem, QPath, TyKind};\n@@ -9,74 +9,99 @@ use rustc_span::symbol::sym;\n use super::{utils, REDUNDANT_ALLOCATION};\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if Some(def_id) == cx.tcx.lang_items().owned_box() {\n-        if let Some(span) = utils::match_borrows_parameter(cx, qpath) {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                REDUNDANT_ALLOCATION,\n-                hir_ty.span,\n-                \"usage of `Box<&T>`\",\n-                \"try\",\n-                snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n-                applicability,\n-            );\n-            return true;\n-        }\n+    let outer_sym = if Some(def_id) == cx.tcx.lang_items().owned_box() {\n+        \"Box\"\n+    } else if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n+        \"Rc\"\n+    } else if cx.tcx.is_diagnostic_item(sym::Arc, def_id) {\n+        \"Arc\"\n+    } else {\n+        return false;\n+    };\n+\n+    if let Some(span) = utils::match_borrows_parameter(cx, qpath) {\n+        let mut applicability = Applicability::MaybeIncorrect;\n+        let generic_snippet = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n+        span_lint_and_then(\n+            cx,\n+            REDUNDANT_ALLOCATION,\n+            hir_ty.span,\n+            &format!(\"usage of `{}<{}>`\", outer_sym, generic_snippet),\n+            |diag| {\n+                diag.span_suggestion(hir_ty.span, \"try\", format!(\"{}\", generic_snippet), applicability);\n+                diag.note(&format!(\n+                    \"`{generic}` is already a pointer, `{outer}<{generic}>` allocates a pointer on the heap\",\n+                    outer = outer_sym,\n+                    generic = generic_snippet\n+                ));\n+            },\n+        );\n+        return true;\n     }\n \n-    if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n-        if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Rc) {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                REDUNDANT_ALLOCATION,\n-                hir_ty.span,\n-                \"usage of `Rc<Rc<T>>`\",\n-                \"try\",\n-                snippet_with_applicability(cx, ty.span, \"..\", &mut applicability).to_string(),\n-                applicability,\n-            );\n-            true\n-        } else if let Some(ty) = is_ty_param_lang_item(cx, qpath, LangItem::OwnedBox) {\n-            let qpath = match &ty.kind {\n-                TyKind::Path(qpath) => qpath,\n-                _ => return false,\n-            };\n-            let inner_span = match get_qpath_generic_tys(qpath).next() {\n-                Some(ty) => ty.span,\n-                None => return false,\n-            };\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                REDUNDANT_ALLOCATION,\n-                hir_ty.span,\n-                \"usage of `Rc<Box<T>>`\",\n-                \"try\",\n-                format!(\n-                    \"Rc<{}>\",\n-                    snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n-                ),\n-                applicability,\n-            );\n-            true\n-        } else {\n-            utils::match_borrows_parameter(cx, qpath).map_or(false, |span| {\n-                let mut applicability = Applicability::MachineApplicable;\n-                span_lint_and_sugg(\n-                    cx,\n-                    REDUNDANT_ALLOCATION,\n+    let (inner_sym, ty) = if let Some(ty) = is_ty_param_lang_item(cx, qpath, LangItem::OwnedBox) {\n+        (\"Box\", ty)\n+    } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Rc) {\n+        (\"Rc\", ty)\n+    } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Arc) {\n+        (\"Arc\", ty)\n+    } else {\n+        return false;\n+    };\n+\n+    let inner_qpath = match &ty.kind {\n+        TyKind::Path(inner_qpath) => inner_qpath,\n+        _ => return false,\n+    };\n+    let inner_span = match get_qpath_generic_tys(inner_qpath).next() {\n+        Some(ty) => ty.span,\n+        None => return false,\n+    };\n+    if inner_sym == outer_sym {\n+        let mut applicability = Applicability::MaybeIncorrect;\n+        let generic_snippet = snippet_with_applicability(cx, inner_span, \"..\", &mut applicability);\n+        span_lint_and_then(\n+            cx,\n+            REDUNDANT_ALLOCATION,\n+            hir_ty.span,\n+            &format!(\"usage of `{}<{}<{}>>`\", outer_sym, inner_sym, generic_snippet),\n+            |diag| {\n+                diag.span_suggestion(\n                     hir_ty.span,\n-                    \"usage of `Rc<&T>`\",\n                     \"try\",\n-                    snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n+                    format!(\"{}<{}>\", outer_sym, generic_snippet),\n                     applicability,\n                 );\n-                true\n-            })\n-        }\n+                diag.note(&format!(\n+                    \"`{inner}<{generic}>` is already on the heap, `{outer}<{inner}<{generic}>>` makes an extra allocation\",\n+                    outer = outer_sym,\n+                    inner = inner_sym,\n+                    generic = generic_snippet\n+                ));\n+            },\n+        );\n     } else {\n-        false\n+        let generic_snippet = snippet(cx, inner_span, \"..\");\n+        span_lint_and_then(\n+            cx,\n+            REDUNDANT_ALLOCATION,\n+            hir_ty.span,\n+            &format!(\"usage of `{}<{}<{}>>`\", outer_sym, inner_sym, generic_snippet),\n+            |diag| {\n+                diag.note(&format!(\n+                    \"`{inner}<{generic}>` is already on the heap, `{outer}<{inner}<{generic}>>` makes an extra allocation\",\n+                    outer = outer_sym,\n+                    inner = inner_sym,\n+                    generic = generic_snippet\n+                ));\n+                diag.help(&format!(\n+                    \"consider using just `{outer}<{generic}>` or `{inner}<{generic}>`\",\n+                    outer = outer_sym,\n+                    inner = inner_sym,\n+                    generic = generic_snippet\n+                ));\n+            },\n+        );\n     }\n+    true\n }"}, {"sha": "6514fd6d1ac76bbe7ebbbd37453af5002e3c3308", "filename": "tests/ui/redundant_allocation.fixed", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2b193e247f108c303d2ef9818ddd4aadceaf5760/tests%2Fui%2Fredundant_allocation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b193e247f108c303d2ef9818ddd4aadceaf5760/tests%2Fui%2Fredundant_allocation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.fixed?ref=2b193e247f108c303d2ef9818ddd4aadceaf5760", "patch": "@@ -1,48 +0,0 @@\n-// run-rustfix\n-#![warn(clippy::all)]\n-#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n-#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n-\n-use std::boxed::Box;\n-use std::rc::Rc;\n-\n-pub struct MyStruct {}\n-\n-pub struct SubT<T> {\n-    foo: T,\n-}\n-\n-pub enum MyEnum {\n-    One,\n-    Two,\n-}\n-\n-// Rc<&T>\n-\n-pub fn test1<T>(foo: &T) {}\n-\n-pub fn test2(foo: &MyStruct) {}\n-\n-pub fn test3(foo: &MyEnum) {}\n-\n-pub fn test4_neg(foo: Rc<SubT<&usize>>) {}\n-\n-// Rc<Rc<T>>\n-\n-pub fn test5(a: Rc<bool>) {}\n-\n-// Rc<Box<T>>\n-\n-pub fn test6(a: Rc<bool>) {}\n-\n-// Box<&T>\n-\n-pub fn test7<T>(foo: &T) {}\n-\n-pub fn test8(foo: &MyStruct) {}\n-\n-pub fn test9(foo: &MyEnum) {}\n-\n-pub fn test10_neg(foo: Box<SubT<&usize>>) {}\n-\n-fn main() {}"}, {"sha": "1b4f2a66c705ec088d5396bc3dbed187e12579df", "filename": "tests/ui/redundant_allocation.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.rs?ref=e575610fb32c50236d56d7001f13d1143205ae5a", "patch": "@@ -1,10 +1,7 @@\n-// run-rustfix\n #![warn(clippy::all)]\n #![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n #![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n-\n-use std::boxed::Box;\n-use std::rc::Rc;\n+#![allow(unused_imports)]\n \n pub struct MyStruct {}\n \n@@ -17,32 +14,67 @@ pub enum MyEnum {\n     Two,\n }\n \n-// Rc<&T>\n+mod outer_box {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n \n-pub fn test1<T>(foo: Rc<&T>) {}\n+    pub fn box_test6<T>(foo: Box<Rc<T>>) {}\n \n-pub fn test2(foo: Rc<&MyStruct>) {}\n+    pub fn box_test7<T>(foo: Box<Arc<T>>) {}\n \n-pub fn test3(foo: Rc<&MyEnum>) {}\n+    pub fn box_test8() -> Box<Rc<SubT<usize>>> {\n+        unimplemented!();\n+    }\n \n-pub fn test4_neg(foo: Rc<SubT<&usize>>) {}\n+    pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {\n+        unimplemented!();\n+    }\n+}\n \n-// Rc<Rc<T>>\n+mod outer_rc {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n \n-pub fn test5(a: Rc<Rc<bool>>) {}\n+    pub fn rc_test5(a: Rc<Box<bool>>) {}\n \n-// Rc<Box<T>>\n+    pub fn rc_test7(a: Rc<Arc<bool>>) {}\n \n-pub fn test6(a: Rc<Box<bool>>) {}\n+    pub fn rc_test8() -> Rc<Box<SubT<usize>>> {\n+        unimplemented!();\n+    }\n \n-// Box<&T>\n+    pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {\n+        unimplemented!();\n+    }\n+}\n \n-pub fn test7<T>(foo: Box<&T>) {}\n+mod outer_arc {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n \n-pub fn test8(foo: Box<&MyStruct>) {}\n+    pub fn arc_test5(a: Arc<Box<bool>>) {}\n \n-pub fn test9(foo: Box<&MyEnum>) {}\n+    pub fn arc_test6(a: Arc<Rc<bool>>) {}\n \n-pub fn test10_neg(foo: Box<SubT<&usize>>) {}\n+    pub fn arc_test8() -> Arc<Box<SubT<usize>>> {\n+        unimplemented!();\n+    }\n+\n+    pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {\n+        unimplemented!();\n+    }\n+}\n \n fn main() {}"}, {"sha": "fdab74eb538e3e7c88cc341707db01439c91395b", "filename": "tests/ui/redundant_allocation.stderr", "status": "modified", "additions": 119, "deletions": 33, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.stderr?ref=e575610fb32c50236d56d7001f13d1143205ae5a", "patch": "@@ -1,52 +1,138 @@\n-error: usage of `Rc<&T>`\n-  --> $DIR/redundant_allocation.rs:22:22\n+error: usage of `Box<Rc<T>>`\n+  --> $DIR/redundant_allocation.rs:25:30\n    |\n-LL | pub fn test1<T>(foo: Rc<&T>) {}\n-   |                      ^^^^^^ help: try: `&T`\n+LL |     pub fn box_test6<T>(foo: Box<Rc<T>>) {}\n+   |                              ^^^^^^^^^^\n    |\n    = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n+   = note: `Rc<T>` is already on the heap, `Box<Rc<T>>` makes an extra allocation\n+   = help: consider using just `Box<T>` or `Rc<T>`\n \n-error: usage of `Rc<&T>`\n-  --> $DIR/redundant_allocation.rs:24:19\n+error: usage of `Box<Arc<T>>`\n+  --> $DIR/redundant_allocation.rs:27:30\n    |\n-LL | pub fn test2(foo: Rc<&MyStruct>) {}\n-   |                   ^^^^^^^^^^^^^ help: try: `&MyStruct`\n+LL |     pub fn box_test7<T>(foo: Box<Arc<T>>) {}\n+   |                              ^^^^^^^^^^^\n+   |\n+   = note: `Arc<T>` is already on the heap, `Box<Arc<T>>` makes an extra allocation\n+   = help: consider using just `Box<T>` or `Arc<T>`\n+\n+error: usage of `Box<Rc<SubT<usize>>>`\n+  --> $DIR/redundant_allocation.rs:29:27\n+   |\n+LL |     pub fn box_test8() -> Box<Rc<SubT<usize>>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Rc<SubT<usize>>` is already on the heap, `Box<Rc<SubT<usize>>>` makes an extra allocation\n+   = help: consider using just `Box<SubT<usize>>` or `Rc<SubT<usize>>`\n+\n+error: usage of `Box<Arc<T>>`\n+  --> $DIR/redundant_allocation.rs:33:30\n+   |\n+LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {\n+   |                              ^^^^^^^^^^^\n+   |\n+   = note: `Arc<T>` is already on the heap, `Box<Arc<T>>` makes an extra allocation\n+   = help: consider using just `Box<T>` or `Arc<T>`\n+\n+error: usage of `Box<Arc<SubT<T>>>`\n+  --> $DIR/redundant_allocation.rs:33:46\n+   |\n+LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {\n+   |                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Arc<SubT<T>>` is already on the heap, `Box<Arc<SubT<T>>>` makes an extra allocation\n+   = help: consider using just `Box<SubT<T>>` or `Arc<SubT<T>>`\n+\n+error: usage of `Rc<Box<bool>>`\n+  --> $DIR/redundant_allocation.rs:46:24\n+   |\n+LL |     pub fn rc_test5(a: Rc<Box<bool>>) {}\n+   |                        ^^^^^^^^^^^^^\n+   |\n+   = note: `Box<bool>` is already on the heap, `Rc<Box<bool>>` makes an extra allocation\n+   = help: consider using just `Rc<bool>` or `Box<bool>`\n+\n+error: usage of `Rc<Arc<bool>>`\n+  --> $DIR/redundant_allocation.rs:48:24\n+   |\n+LL |     pub fn rc_test7(a: Rc<Arc<bool>>) {}\n+   |                        ^^^^^^^^^^^^^\n+   |\n+   = note: `Arc<bool>` is already on the heap, `Rc<Arc<bool>>` makes an extra allocation\n+   = help: consider using just `Rc<bool>` or `Arc<bool>`\n+\n+error: usage of `Rc<Box<SubT<usize>>>`\n+  --> $DIR/redundant_allocation.rs:50:26\n+   |\n+LL |     pub fn rc_test8() -> Rc<Box<SubT<usize>>> {\n+   |                          ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<SubT<usize>>` is already on the heap, `Rc<Box<SubT<usize>>>` makes an extra allocation\n+   = help: consider using just `Rc<SubT<usize>>` or `Box<SubT<usize>>`\n+\n+error: usage of `Rc<Arc<T>>`\n+  --> $DIR/redundant_allocation.rs:54:29\n+   |\n+LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {\n+   |                             ^^^^^^^^^^\n+   |\n+   = note: `Arc<T>` is already on the heap, `Rc<Arc<T>>` makes an extra allocation\n+   = help: consider using just `Rc<T>` or `Arc<T>`\n \n-error: usage of `Rc<&T>`\n-  --> $DIR/redundant_allocation.rs:26:19\n+error: usage of `Rc<Arc<SubT<T>>>`\n+  --> $DIR/redundant_allocation.rs:54:44\n+   |\n+LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {\n+   |                                            ^^^^^^^^^^^^^^^^\n    |\n-LL | pub fn test3(foo: Rc<&MyEnum>) {}\n-   |                   ^^^^^^^^^^^ help: try: `&MyEnum`\n+   = note: `Arc<SubT<T>>` is already on the heap, `Rc<Arc<SubT<T>>>` makes an extra allocation\n+   = help: consider using just `Rc<SubT<T>>` or `Arc<SubT<T>>`\n \n-error: usage of `Rc<Rc<T>>`\n-  --> $DIR/redundant_allocation.rs:32:17\n+error: usage of `Arc<Box<bool>>`\n+  --> $DIR/redundant_allocation.rs:67:25\n    |\n-LL | pub fn test5(a: Rc<Rc<bool>>) {}\n-   |                 ^^^^^^^^^^^^ help: try: `Rc<bool>`\n+LL |     pub fn arc_test5(a: Arc<Box<bool>>) {}\n+   |                         ^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<bool>` is already on the heap, `Arc<Box<bool>>` makes an extra allocation\n+   = help: consider using just `Arc<bool>` or `Box<bool>`\n \n-error: usage of `Rc<Box<T>>`\n-  --> $DIR/redundant_allocation.rs:36:17\n+error: usage of `Arc<Rc<bool>>`\n+  --> $DIR/redundant_allocation.rs:69:25\n+   |\n+LL |     pub fn arc_test6(a: Arc<Rc<bool>>) {}\n+   |                         ^^^^^^^^^^^^^\n    |\n-LL | pub fn test6(a: Rc<Box<bool>>) {}\n-   |                 ^^^^^^^^^^^^^ help: try: `Rc<bool>`\n+   = note: `Rc<bool>` is already on the heap, `Arc<Rc<bool>>` makes an extra allocation\n+   = help: consider using just `Arc<bool>` or `Rc<bool>`\n \n-error: usage of `Box<&T>`\n-  --> $DIR/redundant_allocation.rs:40:22\n+error: usage of `Arc<Box<SubT<usize>>>`\n+  --> $DIR/redundant_allocation.rs:71:27\n    |\n-LL | pub fn test7<T>(foo: Box<&T>) {}\n-   |                      ^^^^^^^ help: try: `&T`\n+LL |     pub fn arc_test8() -> Arc<Box<SubT<usize>>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<SubT<usize>>` is already on the heap, `Arc<Box<SubT<usize>>>` makes an extra allocation\n+   = help: consider using just `Arc<SubT<usize>>` or `Box<SubT<usize>>`\n \n-error: usage of `Box<&T>`\n-  --> $DIR/redundant_allocation.rs:42:19\n+error: usage of `Arc<Rc<T>>`\n+  --> $DIR/redundant_allocation.rs:75:30\n+   |\n+LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {\n+   |                              ^^^^^^^^^^\n    |\n-LL | pub fn test8(foo: Box<&MyStruct>) {}\n-   |                   ^^^^^^^^^^^^^^ help: try: `&MyStruct`\n+   = note: `Rc<T>` is already on the heap, `Arc<Rc<T>>` makes an extra allocation\n+   = help: consider using just `Arc<T>` or `Rc<T>`\n \n-error: usage of `Box<&T>`\n-  --> $DIR/redundant_allocation.rs:44:19\n+error: usage of `Arc<Rc<SubT<T>>>`\n+  --> $DIR/redundant_allocation.rs:75:45\n+   |\n+LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {\n+   |                                             ^^^^^^^^^^^^^^^^\n    |\n-LL | pub fn test9(foo: Box<&MyEnum>) {}\n-   |                   ^^^^^^^^^^^^ help: try: `&MyEnum`\n+   = note: `Rc<SubT<T>>` is already on the heap, `Arc<Rc<SubT<T>>>` makes an extra allocation\n+   = help: consider using just `Arc<SubT<T>>` or `Rc<SubT<T>>`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "ef089b25f47fdae22b8d18c322320fd1cd6f7200", "filename": "tests/ui/redundant_allocation_fixable.fixed", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation_fixable.fixed?ref=e575610fb32c50236d56d7001f13d1143205ae5a", "patch": "@@ -0,0 +1,75 @@\n+// run-rustfix\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+#![allow(unused_imports)]\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+mod outer_box {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub fn box_test1<T>(foo: &T) {}\n+\n+    pub fn box_test2(foo: &MyStruct) {}\n+\n+    pub fn box_test3(foo: &MyEnum) {}\n+\n+    pub fn box_test4_neg(foo: Box<SubT<&usize>>) {}\n+\n+    pub fn box_test5<T>(foo: Box<T>) {}\n+}\n+\n+mod outer_rc {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub fn rc_test1<T>(foo: &T) {}\n+\n+    pub fn rc_test2(foo: &MyStruct) {}\n+\n+    pub fn rc_test3(foo: &MyEnum) {}\n+\n+    pub fn rc_test4_neg(foo: Rc<SubT<&usize>>) {}\n+\n+    pub fn rc_test6(a: Rc<bool>) {}\n+}\n+\n+mod outer_arc {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub fn arc_test1<T>(foo: &T) {}\n+\n+    pub fn arc_test2(foo: &MyStruct) {}\n+\n+    pub fn arc_test3(foo: &MyEnum) {}\n+\n+    pub fn arc_test4_neg(foo: Arc<SubT<&usize>>) {}\n+\n+    pub fn arc_test7(a: Arc<bool>) {}\n+}\n+\n+fn main() {}"}, {"sha": "fefa87721d720b9deeb77fe4d27657abb5783b88", "filename": "tests/ui/redundant_allocation_fixable.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation_fixable.rs?ref=e575610fb32c50236d56d7001f13d1143205ae5a", "patch": "@@ -0,0 +1,75 @@\n+// run-rustfix\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+#![allow(unused_imports)]\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+mod outer_box {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub fn box_test1<T>(foo: Box<&T>) {}\n+\n+    pub fn box_test2(foo: Box<&MyStruct>) {}\n+\n+    pub fn box_test3(foo: Box<&MyEnum>) {}\n+\n+    pub fn box_test4_neg(foo: Box<SubT<&usize>>) {}\n+\n+    pub fn box_test5<T>(foo: Box<Box<T>>) {}\n+}\n+\n+mod outer_rc {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub fn rc_test1<T>(foo: Rc<&T>) {}\n+\n+    pub fn rc_test2(foo: Rc<&MyStruct>) {}\n+\n+    pub fn rc_test3(foo: Rc<&MyEnum>) {}\n+\n+    pub fn rc_test4_neg(foo: Rc<SubT<&usize>>) {}\n+\n+    pub fn rc_test6(a: Rc<Rc<bool>>) {}\n+}\n+\n+mod outer_arc {\n+    use crate::MyEnum;\n+    use crate::MyStruct;\n+    use crate::SubT;\n+    use std::boxed::Box;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub fn arc_test1<T>(foo: Arc<&T>) {}\n+\n+    pub fn arc_test2(foo: Arc<&MyStruct>) {}\n+\n+    pub fn arc_test3(foo: Arc<&MyEnum>) {}\n+\n+    pub fn arc_test4_neg(foo: Arc<SubT<&usize>>) {}\n+\n+    pub fn arc_test7(a: Arc<Arc<bool>>) {}\n+}\n+\n+fn main() {}"}, {"sha": "fdd76ef17a55e884de278a3902ee9d03b5a6da46", "filename": "tests/ui/redundant_allocation_fixable.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e575610fb32c50236d56d7001f13d1143205ae5a/tests%2Fui%2Fredundant_allocation_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation_fixable.stderr?ref=e575610fb32c50236d56d7001f13d1143205ae5a", "patch": "@@ -0,0 +1,99 @@\n+error: usage of `Box<&T>`\n+  --> $DIR/redundant_allocation_fixable.rs:26:30\n+   |\n+LL |     pub fn box_test1<T>(foo: Box<&T>) {}\n+   |                              ^^^^^^^ help: try: `&T`\n+   |\n+   = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n+   = note: `&T` is already a pointer, `Box<&T>` allocates a pointer on the heap\n+\n+error: usage of `Box<&MyStruct>`\n+  --> $DIR/redundant_allocation_fixable.rs:28:27\n+   |\n+LL |     pub fn box_test2(foo: Box<&MyStruct>) {}\n+   |                           ^^^^^^^^^^^^^^ help: try: `&MyStruct`\n+   |\n+   = note: `&MyStruct` is already a pointer, `Box<&MyStruct>` allocates a pointer on the heap\n+\n+error: usage of `Box<&MyEnum>`\n+  --> $DIR/redundant_allocation_fixable.rs:30:27\n+   |\n+LL |     pub fn box_test3(foo: Box<&MyEnum>) {}\n+   |                           ^^^^^^^^^^^^ help: try: `&MyEnum`\n+   |\n+   = note: `&MyEnum` is already a pointer, `Box<&MyEnum>` allocates a pointer on the heap\n+\n+error: usage of `Box<Box<T>>`\n+  --> $DIR/redundant_allocation_fixable.rs:34:30\n+   |\n+LL |     pub fn box_test5<T>(foo: Box<Box<T>>) {}\n+   |                              ^^^^^^^^^^^ help: try: `Box<T>`\n+   |\n+   = note: `Box<T>` is already on the heap, `Box<Box<T>>` makes an extra allocation\n+\n+error: usage of `Rc<&T>`\n+  --> $DIR/redundant_allocation_fixable.rs:45:29\n+   |\n+LL |     pub fn rc_test1<T>(foo: Rc<&T>) {}\n+   |                             ^^^^^^ help: try: `&T`\n+   |\n+   = note: `&T` is already a pointer, `Rc<&T>` allocates a pointer on the heap\n+\n+error: usage of `Rc<&MyStruct>`\n+  --> $DIR/redundant_allocation_fixable.rs:47:26\n+   |\n+LL |     pub fn rc_test2(foo: Rc<&MyStruct>) {}\n+   |                          ^^^^^^^^^^^^^ help: try: `&MyStruct`\n+   |\n+   = note: `&MyStruct` is already a pointer, `Rc<&MyStruct>` allocates a pointer on the heap\n+\n+error: usage of `Rc<&MyEnum>`\n+  --> $DIR/redundant_allocation_fixable.rs:49:26\n+   |\n+LL |     pub fn rc_test3(foo: Rc<&MyEnum>) {}\n+   |                          ^^^^^^^^^^^ help: try: `&MyEnum`\n+   |\n+   = note: `&MyEnum` is already a pointer, `Rc<&MyEnum>` allocates a pointer on the heap\n+\n+error: usage of `Rc<Rc<bool>>`\n+  --> $DIR/redundant_allocation_fixable.rs:53:24\n+   |\n+LL |     pub fn rc_test6(a: Rc<Rc<bool>>) {}\n+   |                        ^^^^^^^^^^^^ help: try: `Rc<bool>`\n+   |\n+   = note: `Rc<bool>` is already on the heap, `Rc<Rc<bool>>` makes an extra allocation\n+\n+error: usage of `Arc<&T>`\n+  --> $DIR/redundant_allocation_fixable.rs:64:30\n+   |\n+LL |     pub fn arc_test1<T>(foo: Arc<&T>) {}\n+   |                              ^^^^^^^ help: try: `&T`\n+   |\n+   = note: `&T` is already a pointer, `Arc<&T>` allocates a pointer on the heap\n+\n+error: usage of `Arc<&MyStruct>`\n+  --> $DIR/redundant_allocation_fixable.rs:66:27\n+   |\n+LL |     pub fn arc_test2(foo: Arc<&MyStruct>) {}\n+   |                           ^^^^^^^^^^^^^^ help: try: `&MyStruct`\n+   |\n+   = note: `&MyStruct` is already a pointer, `Arc<&MyStruct>` allocates a pointer on the heap\n+\n+error: usage of `Arc<&MyEnum>`\n+  --> $DIR/redundant_allocation_fixable.rs:68:27\n+   |\n+LL |     pub fn arc_test3(foo: Arc<&MyEnum>) {}\n+   |                           ^^^^^^^^^^^^ help: try: `&MyEnum`\n+   |\n+   = note: `&MyEnum` is already a pointer, `Arc<&MyEnum>` allocates a pointer on the heap\n+\n+error: usage of `Arc<Arc<bool>>`\n+  --> $DIR/redundant_allocation_fixable.rs:72:25\n+   |\n+LL |     pub fn arc_test7(a: Arc<Arc<bool>>) {}\n+   |                         ^^^^^^^^^^^^^^ help: try: `Arc<bool>`\n+   |\n+   = note: `Arc<bool>` is already on the heap, `Arc<Arc<bool>>` makes an extra allocation\n+\n+error: aborting due to 12 previous errors\n+"}]}