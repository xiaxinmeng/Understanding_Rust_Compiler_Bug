{"sha": "72791061666c45e830dade2445354a6f60699d69", "node_id": "C_kwDOAAsO6NoAKDcyNzkxMDYxNjY2YzQ1ZTgzMGRhZGUyNDQ1MzU0YTZmNjA2OTlkNjk", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-09-09T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-09-09T13:54:14Z"}, "message": "Introduce a fallible variant of LLVMConstIntGetZExtValue\n\nwhich verifies that a constant bit width is within 64 bits or fails.", "tree": {"sha": "f45a4677c2e931e0fe07191131df949eb3be91ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45a4677c2e931e0fe07191131df949eb3be91ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72791061666c45e830dade2445354a6f60699d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72791061666c45e830dade2445354a6f60699d69", "html_url": "https://github.com/rust-lang/rust/commit/72791061666c45e830dade2445354a6f60699d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72791061666c45e830dade2445354a6f60699d69/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f3001eecbe4cbd091c10ffab45b4c164bb507b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f3001eecbe4cbd091c10ffab45b4c164bb507b", "html_url": "https://github.com/rust-lang/rust/commit/98f3001eecbe4cbd091c10ffab45b4c164bb507b"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "acee9134fb96e48a26c3d4eb7a465c8d66ac6bf9", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72791061666c45e830dade2445354a6f60699d69/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72791061666c45e830dade2445354a6f60699d69/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=72791061666c45e830dade2445354a6f60699d69", "patch": "@@ -215,7 +215,11 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn const_to_opt_uint(&self, v: &'ll Value) -> Option<u64> {\n-        try_as_const_integral(v).map(|v| unsafe { llvm::LLVMConstIntGetZExtValue(v) })\n+        try_as_const_integral(v).and_then(|v| unsafe {\n+            let mut i = 0u64;\n+            let success = llvm::LLVMRustConstIntGetZExtValue(v, &mut i);\n+            success.then_some(i)\n+        })\n     }\n \n     fn const_to_opt_u128(&self, v: &'ll Value, sign_ext: bool) -> Option<u128> {"}, {"sha": "ce27dc5a5d1ea23c61a094fbc07150630c4663e7", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72791061666c45e830dade2445354a6f60699d69/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72791061666c45e830dade2445354a6f60699d69/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=72791061666c45e830dade2445354a6f60699d69", "patch": "@@ -1096,7 +1096,7 @@ extern \"C\" {\n     pub fn LLVMConstInt(IntTy: &Type, N: c_ulonglong, SignExtend: Bool) -> &Value;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n     pub fn LLVMConstReal(RealTy: &Type, N: f64) -> &Value;\n-    pub fn LLVMConstIntGetZExtValue(ConstantVal: &ConstantInt) -> c_ulonglong;\n+    pub fn LLVMRustConstIntGetZExtValue(ConstantVal: &ConstantInt, Value: &mut u64) -> bool;\n     pub fn LLVMRustConstInt128Get(\n         ConstantVal: &ConstantInt,\n         SExt: bool,"}, {"sha": "6ee3c7d68213ee9382413d66975ee048ed9bb7f3", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72791061666c45e830dade2445354a6f60699d69/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72791061666c45e830dade2445354a6f60699d69/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=72791061666c45e830dade2445354a6f60699d69", "patch": "@@ -1618,6 +1618,14 @@ extern \"C\" LLVMValueRef LLVMRustConstInBoundsGEP2(LLVMTypeRef Ty,\n   return wrap(ConstantExpr::getInBoundsGetElementPtr(unwrap(Ty), Val, IdxList));\n }\n \n+extern \"C\" bool LLVMRustConstIntGetZExtValue(LLVMValueRef CV, uint64_t *value) {\n+    auto C = unwrap<llvm::ConstantInt>(CV);\n+    if (C->getBitWidth() > 64)\n+      return false;\n+    *value = C->getZExtValue();\n+    return true;\n+}\n+\n // Returns true if both high and low were successfully set. Fails in case constant wasn\u2019t any of\n // the common sizes (1, 8, 16, 32, 64, 128 bits)\n extern \"C\" bool LLVMRustConstInt128Get(LLVMValueRef CV, bool sext, uint64_t *high, uint64_t *low)"}, {"sha": "c6a686597e9c810f4f9c3192de750fc3632f66bc", "filename": "src/test/ui/codegen/issue-101585-128bit-repeat.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72791061666c45e830dade2445354a6f60699d69/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72791061666c45e830dade2445354a6f60699d69/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-101585-128bit-repeat.rs?ref=72791061666c45e830dade2445354a6f60699d69", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for issue 101585.\n+// run-pass\n+\n+fn main() {\n+    fn min_array_ok() -> [i128; 1] {\n+        [i128::MIN]\n+    }\n+    assert_eq!(min_array_ok(), [-170141183460469231731687303715884105728i128]);\n+\n+    fn min_array_nok() -> [i128; 1] {\n+        [i128::MIN; 1]\n+    }\n+    assert_eq!(min_array_nok(), [-170141183460469231731687303715884105728i128]);\n+}"}]}