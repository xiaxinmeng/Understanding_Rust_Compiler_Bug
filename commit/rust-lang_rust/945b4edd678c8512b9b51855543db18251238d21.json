{"sha": "945b4edd678c8512b9b51855543db18251238d21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NWI0ZWRkNjc4Yzg1MTJiOWI1MTg1NTU0M2RiMTgyNTEyMzhkMjE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-11-26T01:37:13Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-11-26T01:39:53Z"}, "message": "Allow mutable access to wrapped internal type in Buffered*\n\nThis is necessary to e.g. set a timeout on the underlying stream.", "tree": {"sha": "98ad952e13c99f81d262fb80950da3fda7a2332d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ad952e13c99f81d262fb80950da3fda7a2332d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945b4edd678c8512b9b51855543db18251238d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945b4edd678c8512b9b51855543db18251238d21", "html_url": "https://github.com/rust-lang/rust/commit/945b4edd678c8512b9b51855543db18251238d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945b4edd678c8512b9b51855543db18251238d21/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e06f71747749e33ca590c334658bddde97a7e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e06f71747749e33ca590c334658bddde97a7e54", "html_url": "https://github.com/rust-lang/rust/commit/0e06f71747749e33ca590c334658bddde97a7e54"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "6c704d2f23dcec9b868e368ec1c7ec37274e6d22", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/945b4edd678c8512b9b51855543db18251238d21/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945b4edd678c8512b9b51855543db18251238d21/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=945b4edd678c8512b9b51855543db18251238d21", "patch": "@@ -75,10 +75,14 @@ impl<R: Reader> BufferedReader<R> {\n     }\n \n     /// Gets a reference to the underlying reader.\n+    pub fn get_ref<'a>(&self) -> &R { &self.inner }\n+\n+    /// Gets a mutable reference to the underlying reader.\n     ///\n-    /// This type does not expose the ability to get a mutable reference to the\n-    /// underlying reader because that could possibly corrupt the buffer.\n-    pub fn get_ref<'a>(&'a self) -> &'a R { &self.inner }\n+    /// ## Warning\n+    ///\n+    /// It is inadvisable to directly read from the underlying reader.\n+    pub fn get_mut(&mut self) -> &mut R { &mut self.inner }\n \n     /// Unwraps this `BufferedReader`, returning the underlying reader.\n     ///\n@@ -176,10 +180,14 @@ impl<W: Writer> BufferedWriter<W> {\n     }\n \n     /// Gets a reference to the underlying writer.\n+    pub fn get_ref(&self) -> &W { self.inner.as_ref().unwrap() }\n+\n+    /// Gets a mutable reference to the underlying write.\n     ///\n-    /// This type does not expose the ability to get a mutable reference to the\n-    /// underlying reader because that could possibly corrupt the buffer.\n-    pub fn get_ref<'a>(&'a self) -> &'a W { self.inner.as_ref().unwrap() }\n+    /// ## Warning\n+    ///\n+    /// It is inadvisable to directly read from the underlying writer.\n+    pub fn get_mut(&mut self) -> &mut W { self.inner.as_mut().unwrap() }\n \n     /// Unwraps this `BufferedWriter`, returning the underlying writer.\n     ///\n@@ -341,14 +349,22 @@ impl<S: Stream> BufferedStream<S> {\n     }\n \n     /// Gets a reference to the underlying stream.\n-    ///\n-    /// This type does not expose the ability to get a mutable reference to the\n-    /// underlying reader because that could possibly corrupt the buffer.\n-    pub fn get_ref<'a>(&'a self) -> &'a S {\n+    pub fn get_ref(&self) -> &S {\n         let InternalBufferedWriter(ref w) = self.inner.inner;\n         w.get_ref()\n     }\n \n+    /// Gets a mutable reference to the underlying stream.\n+    ///\n+    /// ## Warning\n+    ///\n+    /// It is inadvisable to read directly from or write directly to the\n+    /// underlying stream.\n+    pub fn get_mut(&mut self) -> &mut S {\n+        let InternalBufferedWriter(ref mut w) = self.inner.inner;\n+        w.get_mut()\n+    }\n+\n     /// Unwraps this `BufferedStream`, returning the underlying stream.\n     ///\n     /// The internal buffer is flushed before returning the stream. Any leftover"}]}