{"sha": "5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMGZiZDU5NjQ1YWQ3YTg4MDhhN2FlOWYzZWEzOTRhZmE0NzU4NTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T12:05:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T12:05:33Z"}, "message": "Range patterns", "tree": {"sha": "a1a805e24ff84f2b7b94608a9f5cf2708fb838b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a805e24ff84f2b7b94608a9f5cf2708fb838b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "html_url": "https://github.com/rust-lang/rust/commit/5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb90dc4f1e9d86a24207b252c5f3405037928b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb90dc4f1e9d86a24207b252c5f3405037928b1", "html_url": "https://github.com/rust-lang/rust/commit/bfb90dc4f1e9d86a24207b252c5f3405037928b1"}], "stats": {"total": 111, "additions": 89, "deletions": 22}, "files": [{"sha": "df1dfe050a50e56a9bb257e00da48c6ed4ba2c5f", "filename": "src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "patch": "@@ -143,6 +143,7 @@ Grammar(\n         \"TUPLE_STRUCT_PAT\",\n         \"TUPLE_PAT\",\n         \"SLICE_PAT\",\n+        \"RANGE_PAT\",\n \n         // atoms\n         \"TUPLE_EXPR\","}, {"sha": "436f3b26d8b1944ab1d2b8042b78f5942f7b0eca", "filename": "src/grammar/patterns.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/src%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/src%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fpatterns.rs?ref=5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "patch": "@@ -1,16 +1,29 @@\n use super::*;\n \n pub(super) fn pattern(p: &mut Parser) {\n+    if let Some(lhs) = atom_pat(p) {\n+        // test range_pat\n+        // fn main() {\n+        //     match 92 { 0 ... 100 => () }\n+        // }\n+        if p.at(DOTDOTDOT) {\n+            let m = lhs.precede(p);\n+            p.bump();\n+            atom_pat(p);\n+            m.complete(p, RANGE_PAT);\n+        }\n+    }\n+}\n+\n+fn atom_pat(p: &mut Parser) -> Option<CompletedMarker> {\n     let la0 = p.nth(0);\n     let la1 = p.nth(1);\n     if la0 == REF_KW || la0 == MUT_KW\n         || (la0 == IDENT && !(la1 == COLONCOLON || la1 == L_PAREN || la1 == L_CURLY)) {\n-        bind_pat(p, true);\n-        return;\n+        return Some(bind_pat(p, true));\n     }\n     if paths::is_path_start(p) {\n-        path_pat(p);\n-        return;\n+        return Some(path_pat(p));\n     }\n \n     // test literal_pattern\n@@ -21,17 +34,22 @@ pub(super) fn pattern(p: &mut Parser) {\n     //         \"hello\" => (),\n     //     }\n     // }\n-    if expressions::literal(p).is_some() {\n-        return;\n+    match expressions::literal(p) {\n+        Some(m) => return Some(m),\n+        None => (),\n     }\n \n-    match la0 {\n+    let m = match la0 {\n         UNDERSCORE => placeholder_pat(p),\n         AMP => ref_pat(p),\n         L_PAREN => tuple_pat(p),\n         L_BRACK => slice_pat(p),\n-        _ => p.err_and_bump(\"expected pattern\"),\n-    }\n+        _ => {\n+            p.err_and_bump(\"expected pattern\");\n+            return None;\n+        }\n+    };\n+    Some(m)\n }\n \n // test path_part\n@@ -41,7 +59,7 @@ pub(super) fn pattern(p: &mut Parser) {\n //     let Bar { .. } = ();\n //     let Bar(..) = ();\n // }\n-fn path_pat(p: &mut Parser) {\n+fn path_pat(p: &mut Parser) -> CompletedMarker {\n     let m = p.start();\n     paths::expr_path(p);\n     let kind = match p.current() {\n@@ -55,7 +73,7 @@ fn path_pat(p: &mut Parser) {\n         }\n         _ => PATH_PAT\n     };\n-    m.complete(p, kind);\n+    m.complete(p, kind)\n }\n \n // test tuple_pat_fields\n@@ -98,7 +116,9 @@ fn struct_pat_fields(p: &mut Parser) {\n                 p.bump();\n                 pattern(p);\n             }\n-            _ => bind_pat(p, false),\n+            _ => {\n+                bind_pat(p, false);\n+            }\n         }\n         if !p.at(R_CURLY) {\n             p.expect(COMMA);\n@@ -109,43 +129,43 @@ fn struct_pat_fields(p: &mut Parser) {\n \n // test placeholder_pat\n // fn main() { let _ = (); }\n-fn placeholder_pat(p: &mut Parser) {\n+fn placeholder_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(UNDERSCORE));\n     let m = p.start();\n     p.bump();\n-    m.complete(p, PLACEHOLDER_PAT);\n+    m.complete(p, PLACEHOLDER_PAT)\n }\n \n // test ref_pat\n // fn main() {\n //     let &a = ();\n //     let &mut b = ();\n // }\n-fn ref_pat(p: &mut Parser) {\n+fn ref_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(AMP));\n     let m = p.start();\n     p.bump();\n     p.eat(MUT_KW);\n     pattern(p);\n-    m.complete(p, REF_PAT);\n+    m.complete(p, REF_PAT)\n }\n \n // test tuple_pat\n // fn main() {\n //     let (a, b, ..) = ();\n // }\n-fn tuple_pat(p: &mut Parser) {\n+fn tuple_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(L_PAREN));\n     let m = p.start();\n     tuple_pat_fields(p);\n-    m.complete(p, TUPLE_PAT);\n+    m.complete(p, TUPLE_PAT)\n }\n \n // test slice_pat\n // fn main() {\n //     let [a, b, ..] = [];\n // }\n-fn slice_pat(p: &mut Parser) {\n+fn slice_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(L_BRACK));\n     let m = p.start();\n     p.bump();\n@@ -160,7 +180,7 @@ fn slice_pat(p: &mut Parser) {\n     }\n     p.expect(R_BRACK);\n \n-    m.complete(p, SLICE_PAT);\n+    m.complete(p, SLICE_PAT)\n }\n \n // test bind_pat\n@@ -172,13 +192,13 @@ fn slice_pat(p: &mut Parser) {\n //     let e @ _ = ();\n //     let ref mut f @ g @ _ = ();\n // }\n-fn bind_pat(p: &mut Parser, with_at: bool) {\n+fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     let m = p.start();\n     p.eat(REF_KW);\n     p.eat(MUT_KW);\n     name(p);\n     if with_at && p.eat(AT) {\n         pattern(p);\n     }\n-    m.complete(p, BIND_PAT);\n+    m.complete(p, BIND_PAT)\n }"}, {"sha": "a74acf6ebf9fc6c3ee30ab50d5704c4b7b612fa4", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "patch": "@@ -135,6 +135,7 @@ pub enum SyntaxKind {\n     TUPLE_STRUCT_PAT,\n     TUPLE_PAT,\n     SLICE_PAT,\n+    RANGE_PAT,\n     TUPLE_EXPR,\n     ARRAY_EXPR,\n     PAREN_EXPR,\n@@ -374,6 +375,7 @@ impl SyntaxKind {\n             TUPLE_STRUCT_PAT => &SyntaxInfo { name: \"TUPLE_STRUCT_PAT\" },\n             TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n             SLICE_PAT => &SyntaxInfo { name: \"SLICE_PAT\" },\n+            RANGE_PAT => &SyntaxInfo { name: \"RANGE_PAT\" },\n             TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n             ARRAY_EXPR => &SyntaxInfo { name: \"ARRAY_EXPR\" },\n             PAREN_EXPR => &SyntaxInfo { name: \"PAREN_EXPR\" },"}, {"sha": "657467e755ac688a3fe040a4f6d68fbb17a1f103", "filename": "tests/data/parser/inline/0094_range_pat.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/tests%2Fdata%2Fparser%2Finline%2F0094_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/tests%2Fdata%2Fparser%2Finline%2F0094_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0094_range_pat.rs?ref=5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    match 92 { 0 ... 100 => () }\n+}"}, {"sha": "01aed336beda2274701d74e31a95e5e73f3cc888", "filename": "tests/data/parser/inline/0094_range_pat.txt", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/tests%2Fdata%2Fparser%2Finline%2F0094_range_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e0fbd59645ad7a8808a7ae9f3ea394afa475852/tests%2Fdata%2Fparser%2Finline%2F0094_range_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0094_range_pat.txt?ref=5e0fbd59645ad7a8808a7ae9f3ea394afa475852", "patch": "@@ -0,0 +1,41 @@\n+FILE@[0; 47)\n+  FN_ITEM@[0; 46)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+    WHITESPACE@[9; 10)\n+    BLOCK_EXPR@[10; 46)\n+      L_CURLY@[10; 11)\n+      WHITESPACE@[11; 16)\n+      MATCH_EXPR@[16; 44)\n+        MATCH_KW@[16; 21)\n+        WHITESPACE@[21; 22)\n+        LITERAL@[22; 24)\n+          INT_NUMBER@[22; 24) \"92\"\n+        WHITESPACE@[24; 25)\n+        L_CURLY@[25; 26)\n+        WHITESPACE@[26; 27)\n+        MATCH_ARM@[27; 42)\n+          RANGE_PAT@[27; 36)\n+            LITERAL@[27; 28)\n+              INT_NUMBER@[27; 28) \"0\"\n+            WHITESPACE@[28; 29)\n+            DOTDOTDOT@[29; 32)\n+            WHITESPACE@[32; 33)\n+            LITERAL@[33; 36)\n+              INT_NUMBER@[33; 36) \"100\"\n+          WHITESPACE@[36; 37)\n+          FAT_ARROW@[37; 39)\n+          WHITESPACE@[39; 40)\n+          TUPLE_EXPR@[40; 42)\n+            L_PAREN@[40; 41)\n+            R_PAREN@[41; 42)\n+        WHITESPACE@[42; 43)\n+        R_CURLY@[43; 44)\n+      WHITESPACE@[44; 45)\n+      R_CURLY@[45; 46)\n+  WHITESPACE@[46; 47)"}]}