{"sha": "17a9aff71a272258ce24a88119601a199d6ecddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTlhZmY3MWEyNzIyNThjZTI0YTg4MTE5NjAxYTE5OWQ2ZWNkZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T08:42:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T08:42:09Z"}, "message": "Auto merge of #3531 - mikerite:fix-3514, r=phansch\n\nFix write_with_newline escaping false positive\n\nFixes #3514", "tree": {"sha": "54123358c2f1d33ea53af7c2b12a0da50862b8c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54123358c2f1d33ea53af7c2b12a0da50862b8c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a9aff71a272258ce24a88119601a199d6ecddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a9aff71a272258ce24a88119601a199d6ecddc", "html_url": "https://github.com/rust-lang/rust/commit/17a9aff71a272258ce24a88119601a199d6ecddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a9aff71a272258ce24a88119601a199d6ecddc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "html_url": "https://github.com/rust-lang/rust/commit/379c934f3f0c1266e2a4112a4babe7ec0a6368ce"}, {"sha": "be40d82fea5010707290f8347ff3953a2e15639e", "url": "https://api.github.com/repos/rust-lang/rust/commits/be40d82fea5010707290f8347ff3953a2e15639e", "html_url": "https://github.com/rust-lang/rust/commit/be40d82fea5010707290f8347ff3953a2e15639e"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "416ba4ca18d538624325aa0a1de8906b5223706a", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/17a9aff71a272258ce24a88119601a199d6ecddc/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a9aff71a272258ce24a88119601a199d6ecddc/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=17a9aff71a272258ce24a88119601a199d6ecddc", "patch": "@@ -206,10 +206,7 @@ impl EarlyLintPass for Pass {\n         } else if mac.node.path == \"print\" {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n             if let Some(fmtstr) = check_tts(cx, &mac.node.tts, false).0 {\n-                if fmtstr.ends_with(\"\\\\n\") &&\n-                   // don't warn about strings with several `\\n`s (#3126)\n-                   fmtstr.matches(\"\\\\n\").count() == 1\n-                {\n+                if check_newlines(&fmtstr) {\n                     span_lint(\n                         cx,\n                         PRINT_WITH_NEWLINE,\n@@ -221,10 +218,7 @@ impl EarlyLintPass for Pass {\n             }\n         } else if mac.node.path == \"write\" {\n             if let Some(fmtstr) = check_tts(cx, &mac.node.tts, true).0 {\n-                if fmtstr.ends_with(\"\\\\n\") &&\n-                   // don't warn about strings with several `\\n`s (#3126)\n-                   fmtstr.matches(\"\\\\n\").count() == 1\n-                {\n+                if check_newlines(&fmtstr) {\n                     span_lint(\n                         cx,\n                         WRITE_WITH_NEWLINE,\n@@ -375,3 +369,29 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n         }\n     }\n }\n+\n+// Checks if `s` constains a single newline that terminates it\n+fn check_newlines(s: &str) -> bool {\n+    if s.len() < 2 {\n+        return false;\n+    }\n+\n+    let bytes = s.as_bytes();\n+    if bytes[bytes.len() - 2] != b'\\\\' || bytes[bytes.len() - 1] != b'n' {\n+        return false;\n+    }\n+\n+    let mut escaping = false;\n+    for (index, &byte) in bytes.iter().enumerate() {\n+        if escaping {\n+            if byte == b'n' {\n+                return index == bytes.len() - 1;\n+            }\n+            escaping = false;\n+        } else if byte == b'\\\\' {\n+            escaping = true;\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "5d8543e578dee5ecaf6c9459d6a94d49a3ded751", "filename": "tests/ui/write_with_newline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17a9aff71a272258ce24a88119601a199d6ecddc/tests%2Fui%2Fwrite_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a9aff71a272258ce24a88119601a199d6ecddc/tests%2Fui%2Fwrite_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.rs?ref=17a9aff71a272258ce24a88119601a199d6ecddc", "patch": "@@ -35,4 +35,9 @@ fn main() {\n     write!(&mut v, \"Hello {} {}\\n\\n\", \"world\", \"#2\");\n     writeln!(&mut v, \"\\ndon't\\nwarn\\nfor\\nmultiple\\nnewlines\\n\"); // #3126\n     writeln!(&mut v, \"\\nbla\\n\\n\"); // #3126\n+\n+    // Escaping\n+    write!(&mut v, \"\\\\n\"); // #3514\n+    write!(&mut v, \"\\\\\\n\");\n+    write!(&mut v, \"\\\\\\\\n\");\n }"}, {"sha": "ead6b5d08a017b232499e8b6f804b5cc4a085516", "filename": "tests/ui/write_with_newline.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17a9aff71a272258ce24a88119601a199d6ecddc/tests%2Fui%2Fwrite_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a9aff71a272258ce24a88119601a199d6ecddc/tests%2Fui%2Fwrite_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.stderr?ref=17a9aff71a272258ce24a88119601a199d6ecddc", "patch": "@@ -24,5 +24,11 @@ error: using `write!()` with a format string that ends in a single newline, cons\n 22 |     write!(&mut v, \"{}/n\", 1265);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: using `write!()` with a format string that ends in a single newline, consider using `writeln!()` instead\n+  --> $DIR/write_with_newline.rs:41:5\n+   |\n+41 |     write!(&mut v, \"//n\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}