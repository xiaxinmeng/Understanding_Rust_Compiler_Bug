{"sha": "d447bdff9b44ab4f298e1d986a02e51997540b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDdiZGZmOWI0NGFiNGYyOThlMWQ5ODZhMDJlNTE5OTc1NDBiMDg=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-18T22:07:37Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-27T18:20:30Z"}, "message": "Disentangle `Fields` and `PatStack`", "tree": {"sha": "a5d7dc704bf7140ad8166ccef51d9059ff82f926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d7dc704bf7140ad8166ccef51d9059ff82f926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d447bdff9b44ab4f298e1d986a02e51997540b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d447bdff9b44ab4f298e1d986a02e51997540b08", "html_url": "https://github.com/rust-lang/rust/commit/d447bdff9b44ab4f298e1d986a02e51997540b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d447bdff9b44ab4f298e1d986a02e51997540b08/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59792128ce235e9dfae921aa5cecf89106b0b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59792128ce235e9dfae921aa5cecf89106b0b53", "html_url": "https://github.com/rust-lang/rust/commit/b59792128ce235e9dfae921aa5cecf89106b0b53"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "293641079541a451135607a7f1f2497aaf6961d5", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d447bdff9b44ab4f298e1d986a02e51997540b08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d447bdff9b44ab4f298e1d986a02e51997540b08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=d447bdff9b44ab4f298e1d986a02e51997540b08", "patch": "@@ -437,8 +437,10 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n     fn pop_head_constructor(&self, ctor_wild_subpatterns: &Fields<'p, 'tcx>) -> PatStack<'p, 'tcx> {\n         // We pop the head pattern and push the new fields extracted from the arguments of\n         // `self.head()`.\n-        let new_fields = ctor_wild_subpatterns.replace_with_pattern_arguments(self.head());\n-        new_fields.push_on_patstack(&self.pats[1..])\n+        let mut new_fields =\n+            ctor_wild_subpatterns.replace_with_pattern_arguments(self.head()).filtered_patterns();\n+        new_fields.extend_from_slice(&self.pats[1..]);\n+        PatStack::from_vec(new_fields)\n     }\n }\n \n@@ -1252,6 +1254,18 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         pats.into_iter()\n     }\n \n+    /// Returns the filtered list of patterns, not including hidden fields.\n+    fn filtered_patterns(self) -> SmallVec<[&'p Pat<'tcx>; 2]> {\n+        match self {\n+            Fields::Slice(pats) => pats.iter().collect(),\n+            Fields::Vec(pats) => pats,\n+            Fields::Filtered { fields, .. } => {\n+                // We skip hidden fields here\n+                fields.into_iter().filter_map(|p| p.kept()).collect()\n+            }\n+        }\n+    }\n+\n     /// Overrides some of the fields with the provided patterns. Exactly like\n     /// `replace_fields_indexed`, except that it takes `FieldPat`s as input.\n     fn replace_with_fieldpats(\n@@ -1358,21 +1372,6 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n             _ => self.clone(),\n         }\n     }\n-\n-    fn push_on_patstack(self, stack: &[&'p Pat<'tcx>]) -> PatStack<'p, 'tcx> {\n-        let pats: SmallVec<_> = match self {\n-            Fields::Slice(pats) => pats.iter().chain(stack.iter().copied()).collect(),\n-            Fields::Vec(mut pats) => {\n-                pats.extend_from_slice(stack);\n-                pats\n-            }\n-            Fields::Filtered { fields, .. } => {\n-                // We skip hidden fields here\n-                fields.into_iter().filter_map(|p| p.kept()).chain(stack.iter().copied()).collect()\n-            }\n-        };\n-        PatStack::from_vec(pats)\n-    }\n }\n \n #[derive(Clone, Debug)]"}]}