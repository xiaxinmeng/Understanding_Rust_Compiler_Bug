{"sha": "5b9848912a85e28d000602fc2e81bad9c2f2a981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTg0ODkxMmE4NWUyOGQwMDA2MDJmYzJlODFiYWQ5YzJmMmE5ODE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-22T11:53:52Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-30T09:19:22Z"}, "message": "Make the `type_name` intrinsic's output deterministic", "tree": {"sha": "7d6a280aec9b093ac0da7313e4533795cebb866f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d6a280aec9b093ac0da7313e4533795cebb866f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9848912a85e28d000602fc2e81bad9c2f2a981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9848912a85e28d000602fc2e81bad9c2f2a981", "html_url": "https://github.com/rust-lang/rust/commit/5b9848912a85e28d000602fc2e81bad9c2f2a981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9848912a85e28d000602fc2e81bad9c2f2a981/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14178efa5dd48968c951b3266c6a9bebcd914884", "url": "https://api.github.com/repos/rust-lang/rust/commits/14178efa5dd48968c951b3266c6a9bebcd914884", "html_url": "https://github.com/rust-lang/rust/commit/14178efa5dd48968c951b3266c6a9bebcd914884"}], "stats": {"total": 333, "additions": 306, "deletions": 27}, "files": [{"sha": "856b47c7e1b6feb8570c061e65b674c7e44707af", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -12,6 +12,7 @@ use std::ops::{Deref, DerefMut};\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_macros::HashStable;\n use rustc_target::abi::HasDataLayout;\n+use std::borrow::Cow;\n \n /// Used by `check_bounds` to indicate whether the pointer needs to be just inbounds\n /// or also inbounds of a *live* allocation.\n@@ -112,10 +113,11 @@ impl AllocationExtra<()> for () { }\n \n impl<Tag, Extra> Allocation<Tag, Extra> {\n     /// Creates a read-only allocation initialized by the given bytes\n-    pub fn from_bytes(slice: &[u8], align: Align, extra: Extra) -> Self {\n-        let undef_mask = UndefMask::new(Size::from_bytes(slice.len() as u64), true);\n+    pub fn from_bytes<'a>(slice: impl Into<Cow<'a, [u8]>>, align: Align, extra: Extra) -> Self {\n+        let bytes = slice.into().into_owned();\n+        let undef_mask = UndefMask::new(Size::from_bytes(bytes.len() as u64), true);\n         Self {\n-            bytes: slice.to_owned(),\n+            bytes,\n             relocations: Relocations::new(),\n             undef_mask,\n             align,\n@@ -124,7 +126,7 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n         }\n     }\n \n-    pub fn from_byte_aligned_bytes(slice: &[u8], extra: Extra) -> Self {\n+    pub fn from_byte_aligned_bytes<'a>(slice: impl Into<Cow<'a, [u8]>>, extra: Extra) -> Self {\n         Allocation::from_bytes(slice, Align::from_bytes(1).unwrap(), extra)\n     }\n "}, {"sha": "060c295eb7af19b13664aea56355b193626481d8", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -20,7 +20,6 @@ use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use syntax::ast::{self, FloatTy};\n-use syntax::symbol::LocalInternedString;\n \n use rustc_codegen_ssa::traits::*;\n \n@@ -213,8 +212,8 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n             \"type_name\" => {\n                 let tp_ty = substs.type_at(0);\n-                let ty_name = LocalInternedString::intern(&tp_ty.to_string());\n-                self.const_str_slice(ty_name)\n+                let ty_name = rustc_mir::interpret::type_name(self.tcx, tp_ty);\n+                OperandRef::from_const(self, ty_name).immediate_or_packed_pair(self)\n             }\n             \"type_id\" => {\n                 self.const_u64(self.tcx.type_id_hash(substs.type_at(0)))"}, {"sha": "0ae2fbe8071adb5787ae3a228094ef4ddacca1af", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -68,11 +68,11 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n     pub fn from_const<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n         val: &'tcx ty::Const<'tcx>\n-    ) -> Result<Self, ErrorHandled> {\n+    ) -> Self {\n         let layout = bx.layout_of(val.ty);\n \n         if layout.is_zst() {\n-            return Ok(OperandRef::new_zst(bx, layout));\n+            return OperandRef::new_zst(bx, layout);\n         }\n \n         let val = match val.val {\n@@ -110,14 +110,14 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n             ConstValue::ByRef(ptr, alloc) => {\n-                return Ok(bx.load_operand(bx.from_const_alloc(layout, alloc, ptr.offset)));\n+                return bx.load_operand(bx.from_const_alloc(layout, alloc, ptr.offset));\n             },\n         };\n \n-        Ok(OperandRef {\n+        OperandRef {\n             val,\n             layout\n-        })\n+        }\n     }\n \n     /// Asserts that this operand refers to a scalar and returns\n@@ -468,7 +468,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Operand::Constant(ref constant) => {\n                 let ty = self.monomorphize(&constant.ty);\n                 self.eval_mir_constant(constant)\n-                    .and_then(|c| OperandRef::from_const(bx, c))\n+                    .map(|c| OperandRef::from_const(bx, c))\n                     .unwrap_or_else(|err| {\n                         match err {\n                             // errored or at least linted"}, {"sha": "2c68ed58d50d40edbd0ae5649b14c2678e6240dd", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -116,7 +116,9 @@ fn op_to_const<'tcx>(\n                     ptr.offset.bytes(),\n                 ),\n                 Scalar::Raw { .. } => (\n-                    ecx.tcx.intern_const_alloc(Allocation::from_byte_aligned_bytes(b\"\", ())),\n+                    ecx.tcx.intern_const_alloc(Allocation::from_byte_aligned_bytes(\n+                        b\"\" as &[u8], (),\n+                    )),\n                     0,\n                 ),\n             };"}, {"sha": "34e9b4972a16d1ff7b148f75e96c0d6db91d5218", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -14,6 +14,9 @@ use super::{\n     Machine, PlaceTy, OpTy, InterpretCx,\n };\n \n+mod type_name;\n+\n+pub use type_name::*;\n \n fn numeric_intrinsic<'tcx, Tag>(\n     name: &str,"}, {"sha": "48b02d8e11b6057dc1f91ab9842e8a494a650b2b", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -0,0 +1,228 @@\n+use rustc::ty::{\n+    TyCtxt, Ty,\n+    subst::{UnpackedKind, Kind},\n+    print::{Printer, PrettyPrinter, Print},\n+    self,\n+};\n+use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n+use rustc::hir::def_id::CrateNum;\n+use std::fmt::Write;\n+use rustc::mir::interpret::{Allocation, ConstValue};\n+\n+struct AbsolutePathPrinter<'a, 'tcx> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    path: String,\n+}\n+\n+impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n+    type Error = std::fmt::Error;\n+\n+    type Path = Self;\n+    type Region = Self;\n+    type Type = Self;\n+    type DynExistential = Self;\n+    type Const = Self;\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+        self.tcx\n+    }\n+\n+    fn print_region(self, _region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n+        Ok(self)\n+    }\n+\n+    fn print_type(self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n+        match ty.sty {\n+            // types without identity\n+            | ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnPtr(_)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Dynamic(_, _)\n+            | ty::Adt(..)\n+            | ty::Foreign(_)\n+            // should be unreachable, but there's no hurt in printing it (and better than ICEing)\n+            | ty::Error\n+            => self.pretty_print_type(ty),\n+            | ty::Infer(_)\n+            | ty::Bound(_, _)\n+            | ty::Param(_)\n+            | ty::Placeholder(_)\n+            | ty::Projection(_)\n+            | ty::UnnormalizedProjection(_)\n+            | ty::GeneratorWitness(_)\n+            => bug!(\n+                \"{:#?} in `type_name` should not happen because we are always monomorphized\",\n+                ty,\n+            ),\n+            // types with identity (print the module path instead)\n+            | ty::FnDef(did, substs)\n+            | ty::Opaque(did, substs)\n+            => self.print_def_path(did, substs),\n+            ty::Closure(did, substs) => self.print_def_path(did, substs.substs),\n+            ty::Generator(did, substs, _) => self.print_def_path(did, substs.substs),\n+        }\n+    }\n+\n+    fn print_const(\n+        self,\n+        _: &'tcx ty::Const<'tcx>,\n+    ) -> Result<Self::Const, Self::Error> {\n+        // don't print constants to the user\n+        Ok(self)\n+    }\n+\n+    fn print_dyn_existential(\n+        mut self,\n+        predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+    ) -> Result<Self::DynExistential, Self::Error> {\n+        let mut first = true;\n+        for p in predicates {\n+            if !first {\n+                write!(self, \"+\")?;\n+            }\n+            first = false;\n+            self = p.print(self)?;\n+        }\n+        Ok(self)\n+    }\n+\n+    fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n+        self.path.push_str(&self.tcx.original_crate_name(cnum).as_str());\n+        Ok(self)\n+    }\n+\n+    fn path_qualified(\n+        self,\n+        self_ty: Ty<'tcx>,\n+        trait_ref: Option<ty::TraitRef<'tcx>>,\n+    ) -> Result<Self::Path, Self::Error> {\n+        self.pretty_path_qualified(self_ty, trait_ref)\n+    }\n+\n+    fn path_append_impl(\n+        self,\n+        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        _disambiguated_data: &DisambiguatedDefPathData,\n+        self_ty: Ty<'tcx>,\n+        trait_ref: Option<ty::TraitRef<'tcx>>,\n+    ) -> Result<Self::Path, Self::Error> {\n+        self.pretty_path_append_impl(\n+            |mut cx| {\n+                cx = print_prefix(cx)?;\n+\n+                cx.path.push_str(\"::\");\n+\n+                Ok(cx)\n+            },\n+            self_ty,\n+            trait_ref,\n+        )\n+    }\n+\n+    fn path_append(\n+        mut self,\n+        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        disambiguated_data: &DisambiguatedDefPathData,\n+    ) -> Result<Self::Path, Self::Error> {\n+        self = print_prefix(self)?;\n+\n+        // Skip `::{{constructor}}` on tuple/unit structs.\n+        match disambiguated_data.data {\n+            DefPathData::Ctor => return Ok(self),\n+            _ => {}\n+        }\n+\n+        self.path.push_str(\"::\");\n+\n+        self.path.push_str(&disambiguated_data.data.as_interned_str().as_str());\n+        Ok(self)\n+    }\n+\n+    fn path_generic_args(\n+        mut self,\n+        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        args: &[Kind<'tcx>],\n+    ) -> Result<Self::Path, Self::Error> {\n+        self = print_prefix(self)?;\n+        let args = args.iter().cloned().filter(|arg| {\n+            match arg.unpack() {\n+                UnpackedKind::Lifetime(_) => false,\n+                _ => true,\n+            }\n+        });\n+        if args.clone().next().is_some() {\n+            self.generic_delimiters(|cx| cx.comma_sep(args))\n+        } else {\n+            Ok(self)\n+        }\n+    }\n+}\n+impl PrettyPrinter<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n+    fn region_should_not_be_omitted(\n+        &self,\n+        _region: ty::Region<'_>,\n+    ) -> bool {\n+        false\n+    }\n+    fn comma_sep<T>(\n+        mut self,\n+        mut elems: impl Iterator<Item = T>,\n+    ) -> Result<Self, Self::Error>\n+        where T: Print<'tcx, 'tcx, Self, Output = Self, Error = Self::Error>\n+    {\n+        if let Some(first) = elems.next() {\n+            self = first.print(self)?;\n+            for elem in elems {\n+                self.path.push_str(\", \");\n+                self = elem.print(self)?;\n+            }\n+        }\n+        Ok(self)\n+    }\n+\n+    fn generic_delimiters(\n+        mut self,\n+        f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n+    ) -> Result<Self, Self::Error> {\n+        write!(self, \"<\")?;\n+\n+        self = f(self)?;\n+\n+        write!(self, \">\")?;\n+\n+        Ok(self)\n+    }\n+}\n+\n+impl Write for AbsolutePathPrinter<'_, '_> {\n+    fn write_str(&mut self, s: &str) -> std::fmt::Result {\n+        Ok(self.path.push_str(s))\n+    }\n+}\n+\n+/// Produces an absolute path representation of the given type. See also the documentation on\n+/// `std::any::type_name`\n+pub fn type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n+    let len = path.len();\n+    let alloc = Allocation::from_byte_aligned_bytes(path.into_bytes(), ());\n+    let alloc = tcx.intern_const_alloc(alloc);\n+    tcx.mk_const(ty::Const {\n+        val: ConstValue::Slice {\n+            data: alloc,\n+            start: 0,\n+            end: len,\n+        },\n+        ty: tcx.mk_static_str(),\n+    })\n+}"}, {"sha": "ed389a8df94abaa9a164b266a1c2caa15533161d", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -32,3 +32,5 @@ pub use self::operand::{ScalarMaybeUndef, Immediate, ImmTy, Operand, OpTy};\n pub use self::visitor::{ValueVisitor, MutValueVisitor};\n \n pub use self::validity::RefTracking;\n+\n+pub use self::intrinsics::type_name;"}, {"sha": "3efa94ce6835c73a12c0c96e4131f4e0a4365dbb", "filename": "src/test/run-pass/issues/issue-21058.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -2,21 +2,64 @@\n #![allow(dead_code)]\n #![feature(core_intrinsics)]\n \n+use std::fmt::Debug;\n+\n struct NT(str);\n struct DST { a: u32, b: str }\n \n+macro_rules! check {\n+    (val: $ty_of:expr, $expected:expr) => {\n+        assert_eq!(type_name_of_val($ty_of), $expected);\n+    };\n+    ($ty:ty, $expected:expr) => {\n+        assert_eq!(unsafe { std::intrinsics::type_name::<$ty>()}, $expected);\n+    };\n+}\n+\n fn main() {\n     // type_name should support unsized types\n-    assert_eq!(unsafe {(\n-        // Slice\n-        std::intrinsics::type_name::<[u8]>(),\n-        // str\n-        std::intrinsics::type_name::<str>(),\n-        // Trait\n-        std::intrinsics::type_name::<dyn Send>(),\n-        // Newtype\n-        std::intrinsics::type_name::<NT>(),\n-        // DST\n-        std::intrinsics::type_name::<DST>()\n-    )}, (\"[u8]\", \"str\", \"dyn std::marker::Send\", \"NT\", \"DST\"));\n+    check!([u8], \"[u8]\");\n+    check!(str, \"str\");\n+    check!(dyn Send, \"dyn core::marker::Send\");\n+    check!(NT, \"issue_21058::NT\");\n+    check!(DST, \"issue_21058::DST\");\n+    check!(&i32, \"&i32\");\n+    check!(&'static i32, \"&i32\");\n+    check!((i32, u32), \"(i32, u32)\");\n+    check!(val: foo(), \"issue_21058::Foo\");\n+    check!(val: Foo::new, \"issue_21058::Foo::new\");\n+    check!(val:\n+        <Foo as Debug>::fmt,\n+        \"<issue_21058::Foo as core::fmt::Debug>::fmt\"\n+    );\n+    check!(val: || {}, \"issue_21058::main::{{closure}}\");\n+    bar::<i32>();\n+}\n+\n+trait Trait {\n+    type Assoc;\n+}\n+\n+impl Trait for i32 {\n+    type Assoc = String;\n+}\n+\n+fn bar<T: Trait>() {\n+    check!(T::Assoc, \"alloc::string::String\");\n+    check!(T, \"i32\");\n+}\n+\n+fn type_name_of_val<T>(_: T) -> &'static str {\n+    unsafe { std::intrinsics::type_name::<T>() }\n+}\n+\n+#[derive(Debug)]\n+struct Foo;\n+\n+impl Foo {\n+    fn new() -> Self { Foo }\n+}\n+\n+fn foo() -> impl Debug {\n+    Foo\n }"}, {"sha": "91578b71d04aebfc7f390865472a81d5b566df20", "filename": "src/test/run-pass/tydesc-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9848912a85e28d000602fc2e81bad9c2f2a981/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftydesc-name.rs?ref=5b9848912a85e28d000602fc2e81bad9c2f2a981", "patch": "@@ -11,6 +11,6 @@ struct Foo<T> {\n pub fn main() {\n     unsafe {\n         assert_eq!(type_name::<isize>(), \"isize\");\n-        assert_eq!(type_name::<Foo<usize>>(), \"Foo<usize>\");\n+        assert_eq!(type_name::<Foo<usize>>(), \"tydesc_name::Foo<usize>\");\n     }\n }"}]}