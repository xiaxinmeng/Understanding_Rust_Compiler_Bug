{"sha": "05ae66607fe2aaab786e6444f4b674499fd79319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YWU2NjYwN2ZlMmFhYWI3ODZlNjQ0NGY0YjY3NDQ5OWZkNzkzMTk=", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-03-08T17:16:12Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-03-08T17:16:12Z"}, "message": "Move default inline asm dialect to Session", "tree": {"sha": "1b093e8bb86e88b70c9ea81774255409b2ec2a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b093e8bb86e88b70c9ea81774255409b2ec2a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05ae66607fe2aaab786e6444f4b674499fd79319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05ae66607fe2aaab786e6444f4b674499fd79319", "html_url": "https://github.com/rust-lang/rust/commit/05ae66607fe2aaab786e6444f4b674499fd79319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05ae66607fe2aaab786e6444f4b674499fd79319/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39dcd01bf5e0c69c487f18903f44074f49ef205b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39dcd01bf5e0c69c487f18903f44074f49ef205b", "html_url": "https://github.com/rust-lang/rust/commit/39dcd01bf5e0c69c487f18903f44074f49ef205b"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "8d8b3f4f6aaaceb955cbe3b670289ff118e244f8", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05ae66607fe2aaab786e6444f4b674499fd79319/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae66607fe2aaab786e6444f4b674499fd79319/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=05ae66607fe2aaab786e6444f4b674499fd79319", "patch": "@@ -12,7 +12,6 @@ use rustc_span::{\n     BytePos,\n };\n use rustc_span::{InnerSpan, Span};\n-use rustc_target::asm::InlineAsmArch;\n \n struct AsmArgs {\n     templates: Vec<P<ast::Expr>>,\n@@ -403,6 +402,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n     let mut line_spans = Vec::with_capacity(args.templates.len());\n     let mut curarg = 0;\n \n+    let default_dialect = ecx.sess.inline_asm_dialect();\n+\n     for template_expr in args.templates.into_iter() {\n         if !template.is_empty() {\n             template.push(ast::InlineAsmTemplatePiece::String(\"\\n\".to_string()));\n@@ -430,11 +431,6 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n \n         if let Some(snippet) = &template_snippet {\n-            let default_dialect = match ecx.sess.asm_arch {\n-                Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) => ast::LlvmAsmDialect::Intel,\n-                _ => ast::LlvmAsmDialect::Att,\n-            };\n-\n             let snippet = snippet.trim_matches('\"');\n             match default_dialect {\n                 ast::LlvmAsmDialect::Intel => {"}, {"sha": "83ab066c7c3ad4227a6cf7ee2587d47806ab7326", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05ae66607fe2aaab786e6444f4b674499fd79319/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae66607fe2aaab786e6444f4b674499fd79319/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=05ae66607fe2aaab786e6444f4b674499fd79319", "patch": "@@ -784,6 +784,13 @@ impl Session {\n         }\n     }\n \n+    pub fn inline_asm_dialect(&self) -> rustc_ast::LlvmAsmDialect {\n+        match self.asm_arch {\n+            Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) => rustc_ast::LlvmAsmDialect::Intel,\n+            _ => rustc_ast::LlvmAsmDialect::Att,\n+        }\n+    }\n+\n     pub fn relocation_model(&self) -> RelocModel {\n         self.opts.cg.relocation_model.unwrap_or(self.target.relocation_model)\n     }"}]}