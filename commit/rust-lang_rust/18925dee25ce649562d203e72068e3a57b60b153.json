{"sha": "18925dee25ce649562d203e72068e3a57b60b153", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OTI1ZGVlMjVjZTY0OTU2MmQyMDNlNzIwNjhlM2E1N2I2MGIxNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T11:00:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T11:00:07Z"}, "message": "Auto merge of #53150 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #52885 (Remove some unused method arguments from typeck)\n - #52886 (cleanup: Remove `Def::GlobalAsm`)\n - #53028 (Building librustc_codegen_llvm in a separate directory)\n - #53052 (fixed broken links to char)\n - #53060 (Change rustdoc style so fully qualified name does not overlap src link)\n - #53068 (Rename Executor trait to Spawn)\n - #53093 (Enable macros to pass $:literal to another macro)\n - #53107 (Remove references to `StaticMutex` which got removed a while ago)\n - #53135 (Rust 2018: Disable catch_expr, not targeted for 2018 edition)\n - #53139 (set emit_debug_gdb_scripts: false for riscv32imac-unknown-none target)", "tree": {"sha": "cefb7c09f52e823aa3c03dc072d29cba51e52c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cefb7c09f52e823aa3c03dc072d29cba51e52c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18925dee25ce649562d203e72068e3a57b60b153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18925dee25ce649562d203e72068e3a57b60b153", "html_url": "https://github.com/rust-lang/rust/commit/18925dee25ce649562d203e72068e3a57b60b153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18925dee25ce649562d203e72068e3a57b60b153/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e472c2acea2b7714985390abb6b7fe420a4f346", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e472c2acea2b7714985390abb6b7fe420a4f346", "html_url": "https://github.com/rust-lang/rust/commit/9e472c2acea2b7714985390abb6b7fe420a4f346"}, {"sha": "d9e9230b1d3ccb8eb0fe57d0e0a29e08f09292c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e9230b1d3ccb8eb0fe57d0e0a29e08f09292c3", "html_url": "https://github.com/rust-lang/rust/commit/d9e9230b1d3ccb8eb0fe57d0e0a29e08f09292c3"}], "stats": {"total": 353, "additions": 141, "deletions": 212}, "files": [{"sha": "30d56f7656d7d0a00f1974139e0792522bf0390a", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -2184,30 +2184,10 @@ dependencies = [\n name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc 0.0.0\",\n  \"rustc-demangle 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc_allocator 0.0.0\",\n- \"rustc_apfloat 0.0.0\",\n- \"rustc_codegen_utils 0.0.0\",\n- \"rustc_data_structures 0.0.0\",\n- \"rustc_errors 0.0.0\",\n- \"rustc_incremental 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n- \"rustc_mir 0.0.0\",\n- \"rustc_platform_intrinsics 0.0.0\",\n- \"rustc_target 0.0.0\",\n- \"serialize 0.0.0\",\n- \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n- \"tempfile 3.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "133e5aa37a7db9715e55b83867e8a9ab0ad3fff2", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -137,16 +137,18 @@ impl Step for CodegenBackend {\n         let target = self.target;\n         let backend = self.backend;\n \n+        let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n+        builder.clear_if_dirty(&out_dir, &librustc_stamp(builder, compiler, target));\n+\n         let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"check\");\n-        let features = builder.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\").arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n         // We won't build LLVM if it's not available, as it shouldn't affect `check`.\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n-                  cargo.arg(\"--features\").arg(features),\n+                  &mut cargo,\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n     }"}, {"sha": "2f8816d111a9d2b4d6f89171d897d8fcca36088b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -670,16 +670,17 @@ impl Step for CodegenBackend {\n             return;\n         }\n \n+        let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n+        builder.clear_if_dirty(&out_dir, &librustc_stamp(builder, compiler, target));\n+\n         let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n-        let mut features = builder.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n-        features += &build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n+        let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n-        let tmp_stamp = builder.cargo_out(compiler, Mode::Codegen, target)\n-            .join(\".tmp.stamp\");\n+        let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,"}, {"sha": "38965949bf22f6ce594090aa6c25812c4549f32f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -555,8 +555,8 @@ impl Build {\n         let suffix = match mode {\n             Mode::Std => \"-std\",\n             Mode::Test => \"-test\",\n-            Mode::Codegen => \"-rustc\",\n             Mode::Rustc => \"-rustc\",\n+            Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n             Mode::ToolStd => \"-tools\",\n             Mode::ToolRustc => \"-tools\","}, {"sha": "08db5136d040450c0164841ed8fed83d0be2ad1f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -67,7 +67,7 @@ use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll, Executor, SpawnErrorKind, SpawnObjError};\n+use core::task::{Context, Poll, Spawn, SpawnErrorKind, SpawnObjError};\n \n use raw_vec::RawVec;\n use str::from_boxed_utf8_unchecked;\n@@ -973,11 +973,14 @@ unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinBox<F>\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<E> Executor for Box<E>\n-    where E: Executor + ?Sized\n+impl<Sp> Spawn for Box<Sp>\n+    where Sp: Spawn + ?Sized\n {\n-    fn spawn_obj(&mut self, task: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n-        (**self).spawn_obj(task)\n+    fn spawn_obj(\n+        &mut self,\n+        future: FutureObj<'static, ()>,\n+    ) -> Result<(), SpawnObjError> {\n+        (**self).spawn_obj(future)\n     }\n \n     fn status(&self) -> Result<(), SpawnErrorKind> {"}, {"sha": "356534a91879cde36e2ef26405b6e1030c910a7b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -2117,8 +2117,6 @@ impl str {\n     /// This length is in bytes, not [`char`]s or graphemes. In other words,\n     /// it may not be what a human considers the length of the string.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2590,8 +2588,6 @@ impl str {\n     /// Value, and may not match your idea of what a 'character' is. Iteration\n     /// over grapheme clusters may be what you actually want.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2643,8 +2639,6 @@ impl str {\n     /// The iterator yields tuples. The position is first, the [`char`] is\n     /// second.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2946,7 +2940,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -2994,7 +2987,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -3050,7 +3042,6 @@ impl str {\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit`] method can be used.\n     ///\n-    /// [`char`]: primitive.char.html\n     /// [`rsplit`]: #method.rsplit\n     ///\n     /// # Examples\n@@ -3157,8 +3148,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3224,7 +3213,6 @@ impl str {\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit_terminator`] method can be used.\n@@ -3259,8 +3247,6 @@ impl str {\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// Equivalent to [`split`], except that the trailing substring is\n     /// skipped if empty.\n     ///\n@@ -3306,8 +3292,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will not be double ended, because it is\n@@ -3361,8 +3345,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines the split.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will not be double ended, because it is not\n@@ -3407,16 +3389,13 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n     /// allows a reverse search and forward/reverse search yields the same\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rmatches`] method can be used.\n@@ -3446,8 +3425,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3488,8 +3465,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines\n     /// if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n@@ -3532,8 +3507,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3665,8 +3638,6 @@ impl str {\n     /// The pattern can be a [`char`] or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Simple patterns:\n@@ -3711,8 +3682,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Text directionality\n     ///\n     /// A string is a sequence of bytes. 'Left' in this context means the first\n@@ -3750,8 +3719,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Text directionality\n     ///\n     /// A string is a sequence of bytes. 'Right' in this context means the last"}, {"sha": "5a29c8528ef3a0801c9a467a4f1ec21d5abd267c", "filename": "src/libcore/task/context.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Ftask%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Ftask%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fcontext.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -13,15 +13,15 @@\n             issue = \"50547\")]\n \n use fmt;\n-use super::{Executor, Waker, LocalWaker};\n+use super::{Spawn, Waker, LocalWaker};\n \n /// Information about the currently-running task.\n ///\n /// Contexts are always tied to the stack, since they are set up specifically\n /// when performing a single `poll` step on a task.\n pub struct Context<'a> {\n     local_waker: &'a LocalWaker,\n-    executor: &'a mut dyn Executor,\n+    spawner: &'a mut dyn Spawn,\n }\n \n impl<'a> fmt::Debug for Context<'a> {\n@@ -32,13 +32,14 @@ impl<'a> fmt::Debug for Context<'a> {\n }\n \n impl<'a> Context<'a> {\n-    /// Create a new task `Context` with the provided `local_waker`, `waker`, and `executor`.\n+    /// Create a new task `Context` with the provided `local_waker`, `waker`,\n+    /// and `spawner`.\n     #[inline]\n-    pub fn new(local_waker: &'a LocalWaker, executor: &'a mut dyn Executor) -> Context<'a> {\n-        Context {\n-            local_waker,\n-            executor,\n-        }\n+    pub fn new(\n+        local_waker: &'a LocalWaker,\n+        spawner: &'a mut dyn Spawn,\n+    ) -> Context<'a> {\n+        Context { local_waker, spawner }\n     }\n \n     /// Get the `LocalWaker` associated with the current task.\n@@ -53,40 +54,45 @@ impl<'a> Context<'a> {\n         unsafe { &*(self.local_waker as *const LocalWaker as *const Waker) }\n     }\n \n-    /// Get the default executor associated with this task.\n+    /// Get the spawner associated with this task.\n     ///\n     /// This method is useful primarily if you want to explicitly handle\n     /// spawn failures.\n     #[inline]\n-    pub fn executor(&mut self) -> &mut dyn Executor {\n-        self.executor\n+    pub fn spawner(&mut self) -> &mut dyn Spawn {\n+        self.spawner\n     }\n \n-    /// Produce a context like the current one, but using the given waker instead.\n+    /// Produce a context like the current one, but using the given waker\n+    /// instead.\n     ///\n     /// This advanced method is primarily used when building \"internal\n     /// schedulers\" within a task, where you want to provide some customized\n     /// wakeup logic.\n     #[inline]\n-    pub fn with_waker<'b>(&'b mut self, local_waker: &'b LocalWaker) -> Context<'b> {\n+    pub fn with_waker<'b>(\n+        &'b mut self,\n+        local_waker: &'b LocalWaker,\n+    ) -> Context<'b> {\n         Context {\n             local_waker,\n-            executor: self.executor,\n+            spawner: self.spawner,\n         }\n     }\n \n-    /// Produce a context like the current one, but using the given executor\n+    /// Produce a context like the current one, but using the given spawner\n     /// instead.\n     ///\n     /// This advanced method is primarily used when building \"internal\n     /// schedulers\" within a task.\n     #[inline]\n-    pub fn with_executor<'b, E>(&'b mut self, executor: &'b mut E) -> Context<'b>\n-        where E: Executor\n-    {\n+    pub fn with_spawner<'b, Sp: Spawn>(\n+        &'b mut self,\n+        spawner: &'b mut Sp,\n+    ) -> Context<'b> {\n         Context {\n             local_waker: self.local_waker,\n-            executor,\n+            spawner,\n         }\n     }\n }"}, {"sha": "f51e5f7ce0e311d3a37e07589e2f1cd984cd59fd", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -17,10 +17,8 @@\n mod context;\n pub use self::context::Context;\n \n-mod executor;\n-pub use self::executor::{\n-  Executor, SpawnErrorKind, SpawnObjError, SpawnLocalObjError\n-};\n+mod spawn;\n+pub use self::spawn::{Spawn, SpawnErrorKind, SpawnObjError, SpawnLocalObjError};\n \n mod poll;\n pub use self::poll::Poll;"}, {"sha": "58ee85d232bc48a0f8a179baf00eef75d50f172b", "filename": "src/libcore/task/spawn.rs", "status": "renamed", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -15,16 +15,13 @@\n use fmt;\n use future::{FutureObj, LocalFutureObj};\n \n-/// A task executor.\n+/// Spawns tasks that poll futures to completion onto its associated task\n+/// executor.\n ///\n-/// Futures are polled until completion by tasks, a kind of lightweight\n-/// \"thread\". A *task executor* is responsible for the creation of these tasks\n-/// and the coordination of their execution on real operating system threads. In\n-/// particular, whenever a task signals that it can make further progress via a\n-/// wake-up notification, it is the responsibility of the task executor to put\n-/// the task into a queue to continue executing it, i.e. polling the future in\n-/// it, later.\n-pub trait Executor {\n+/// The term \"task\" refers to a kind of lightweight \"thread\". Task executors\n+/// are responsible for scheduling the execution of tasks on operating system\n+/// threads.\n+pub trait Spawn {\n     /// Spawns a new task with the given future. The future will be polled until\n     /// completion.\n     ///", "previous_filename": "src/libcore/task/executor.rs"}, {"sha": "b297accc75fd5a2a100df19f7525a62a6329ec73", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -70,8 +70,6 @@ pub enum Def {\n     Macro(DefId, MacroKind),\n     NonMacroAttr, // e.g. `#[inline]` or `#[rustfmt::skip]`\n \n-    GlobalAsm(DefId),\n-\n     // Both namespaces\n     Err,\n }\n@@ -251,8 +249,7 @@ impl Def {\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n-            Def::Existential(id) | Def::AssociatedExistential(id) |\n-            Def::GlobalAsm(id) | Def::TyForeign(id) => {\n+            Def::Existential(id) | Def::AssociatedExistential(id) | Def::TyForeign(id) => {\n                 id\n             }\n \n@@ -302,7 +299,6 @@ impl Def {\n             Def::Label(..) => \"label\",\n             Def::SelfTy(..) => \"self type\",\n             Def::Macro(.., macro_kind) => macro_kind.descr(),\n-            Def::GlobalAsm(..) => \"global asm\",\n             Def::ToolMod => \"tool module\",\n             Def::NonMacroAttr => \"non-macro attribute\",\n             Def::Err => \"unresolved item\","}, {"sha": "b05bcadf82649daa57cb8573a60d2a613ce8263a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -432,7 +432,6 @@ impl<'hir> Map<'hir> {\n                     ItemKind::Const(..) => Some(Def::Const(def_id())),\n                     ItemKind::Fn(..) => Some(Def::Fn(def_id())),\n                     ItemKind::Mod(..) => Some(Def::Mod(def_id())),\n-                    ItemKind::GlobalAsm(..) => Some(Def::GlobalAsm(def_id())),\n                     ItemKind::Existential(..) => Some(Def::Existential(def_id())),\n                     ItemKind::Ty(..) => Some(Def::TyAlias(def_id())),\n                     ItemKind::Enum(..) => Some(Def::Enum(def_id())),\n@@ -445,6 +444,7 @@ impl<'hir> Map<'hir> {\n                     ItemKind::ExternCrate(_) |\n                     ItemKind::Use(..) |\n                     ItemKind::ForeignMod(..) |\n+                    ItemKind::GlobalAsm(..) |\n                     ItemKind::Impl(..) => None,\n                 }\n             }"}, {"sha": "69872cffdc1b1ea54891628ce55e3583690f1d7c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -1015,7 +1015,6 @@ impl_stable_hash_for!(enum hir::def::Def {\n     Upvar(def_id, index, expr_id),\n     Label(node_id),\n     Macro(def_id, macro_kind),\n-    GlobalAsm(def_id),\n     ToolMod,\n     NonMacroAttr,\n     Err"}, {"sha": "28fa49846b7369de67024aacf0ac81e4121952b4", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -10,39 +10,12 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-bitflags = \"1.0.1\"\n cc = \"1.0.1\"\n-flate2 = \"1.0\"\n-jobserver = \"0.1.5\"\n-libc = \"0.2\"\n-log = \"0.4\"\n num_cpus = \"1.0\"\n-rustc = { path = \"../librustc\" }\n rustc-demangle = \"0.1.4\"\n-rustc_allocator = { path = \"../librustc_allocator\" }\n-rustc_apfloat = { path = \"../librustc_apfloat\" }\n-rustc_target = { path = \"../librustc_target\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n-rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n-rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n-rustc_mir = { path = \"../librustc_mir\" }\n-serialize = { path = \"../libserialize\" }\n-syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n-tempfile = \"3.0\"\n-\n-# not actually used but needed to make sure we enable the same feature set as\n-# winapi used in librustc\n-env_logger = { version = \"0.5\", default-features = false }\n \n [features]\n-# Used to communicate the feature to `rustc_target` in the same manner that the\n-# `rustc` driver script communicate this.\n-jemalloc = [\"rustc_target/jemalloc\"]\n-\n # This is used to convince Cargo to separately cache builds of `rustc_codegen_llvm`\n # when this option is enabled or not. That way we can build two, cache two\n # artifacts, and have nice speedy rebuilds."}, {"sha": "5121b682d36a736a60702a6dfbe16bde1687d945", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -427,10 +427,10 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Trait(_) => Def::Trait(did),\n             EntryKind::Enum(..) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n-            EntryKind::GlobalAsm => Def::GlobalAsm(did),\n             EntryKind::ForeignType => Def::TyForeign(did),\n \n             EntryKind::ForeignMod |\n+            EntryKind::GlobalAsm |\n             EntryKind::Impl(_) |\n             EntryKind::Field |\n             EntryKind::Generator(_) |"}, {"sha": "714218a04178ed26059396cc5b6fc0908ba48c3f", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -1281,9 +1281,7 @@ const F: &'static C = &D; // error\n ```\n \n This is because cell types do operations that are not thread-safe. Due to this,\n-they don't implement Sync and thus can't be placed in statics. In this\n-case, `StaticMutex` would work just fine, but it isn't stable yet:\n-https://doc.rust-lang.org/nightly/std/sync/struct.StaticMutex.html\n+they don't implement Sync and thus can't be placed in statics.\n \n However, if you still wish to use these types, you can achieve this by an unsafe\n wrapper:"}, {"sha": "3fada8d4aa88087fc434b8a1e84857bdf52f4757", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -810,7 +810,6 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::SelfTy(..) |\n             HirDef::Label(..) |\n             HirDef::Macro(..) |\n-            HirDef::GlobalAsm(..) |\n             HirDef::ToolMod |\n             HirDef::NonMacroAttr |\n             HirDef::Err => None,"}, {"sha": "f8cd1b5b81207b95a5ded060b4bf72ad36b4aa58", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -33,6 +33,7 @@ pub fn target() -> TargetResult {\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: \"static\".to_string(),\n+            emit_debug_gdb_scripts: false,\n             abi_blacklist: vec![\n                 Abi::Cdecl,\n                 Abi::Stdcall,"}, {"sha": "546553ac2455de6dd5ad1e038b6c2a3fa8fb59e2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -68,9 +68,7 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if let Err(ErrorReported) = compare_synthetic_generics(tcx,\n                                                            impl_m,\n-                                                           impl_m_span,\n-                                                           trait_m,\n-                                                           trait_item_span) {\n+                                                           trait_m) {\n         return;\n     }\n \n@@ -729,14 +727,11 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         impl_m: &ty::AssociatedItem,\n-                                        _impl_m_span: Span, // FIXME necessary?\n-                                        trait_m: &ty::AssociatedItem,\n-                                        _trait_item_span: Option<Span>) // FIXME necessary?\n+                                        trait_m: &ty::AssociatedItem)\n                                         -> Result<(), ErrorReported> {\n     // FIXME(chrisvittal) Clean up this function, list of FIXME items:\n     //     1. Better messages for the span labels\n     //     2. Explanation as to what is going on\n-    //     3. Correct the function signature for what we actually use\n     // If we get here, we already have the same number of generics, so the zip will\n     // be okay.\n     let mut error_found = false;"}, {"sha": "ba65d0606b37267ee00a4f837b1b420628b707e6", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -41,21 +41,19 @@ struct Checker<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn check<F>(&self, trait_def_id: Option<DefId>, mut f: F) -> &Self\n-        where F: FnMut(TyCtxt<'a, 'tcx, 'tcx>, DefId, DefId)\n+        where F: FnMut(TyCtxt<'a, 'tcx, 'tcx>, DefId)\n     {\n         if Some(self.trait_def_id) == trait_def_id {\n             for &impl_id in self.tcx.hir.trait_impls(self.trait_def_id) {\n                 let impl_def_id = self.tcx.hir.local_def_id(impl_id);\n-                f(self.tcx, self.trait_def_id, impl_def_id);\n+                f(self.tcx, impl_def_id);\n             }\n         }\n         self\n     }\n }\n \n-fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                          _drop_did: DefId,\n-                                          impl_did: DefId) {\n+fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n     match tcx.type_of(impl_did).sty {\n         ty::TyAdt(..) => {}\n         _ => {\n@@ -87,9 +85,7 @@ fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                          _copy_did: DefId,\n-                                          impl_did: DefId) {\n+fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_node_id = if let Some(n) = tcx.hir.as_local_node_id(impl_did) {\n@@ -157,9 +153,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                    _: DefId,\n-                                                    impl_did: DefId) {\n+fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\",\n            impl_did);\n "}, {"sha": "470aa2c10e977898f31b54d6c95d3c17c68dc33c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -1613,14 +1613,14 @@ impl fmt::Display for AllTypes {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f,\n \"<h1 class='fqn'>\\\n-     <span class='in-band'>List of all items</span>\\\n      <span class='out-of-band'>\\\n          <span id='render-detail'>\\\n              <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" title=\\\"collapse all docs\\\">\\\n                  [<span class='inner'>&#x2212;</span>]\\\n              </a>\\\n          </span>\n      </span>\n+     <span class='in-band'>List of all items</span>\\\n </h1>\")?;\n         print_entries(f, &self.structs, \"Structs\", \"structs\")?;\n         print_entries(f, &self.enums, \"Enums\", \"enums\")?;\n@@ -2068,7 +2068,34 @@ impl<'a> fmt::Display for Item<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         debug_assert!(!self.item.is_stripped());\n         // Write the breadcrumb trail header for the top\n-        write!(fmt, \"<h1 class='fqn'><span class='in-band'>\")?;\n+        write!(fmt, \"<h1 class='fqn'><span class='out-of-band'>\")?;\n+        if let Some(version) = self.item.stable_since() {\n+            write!(fmt, \"<span class='since' title='Stable since Rust version {0}'>{0}</span>\",\n+                   version)?;\n+        }\n+        write!(fmt,\n+               \"<span id='render-detail'>\\\n+                   <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n+                      title=\\\"collapse all docs\\\">\\\n+                       [<span class='inner'>&#x2212;</span>]\\\n+                   </a>\\\n+               </span>\")?;\n+\n+        // Write `src` tag\n+        //\n+        // When this item is part of a `pub use` in a downstream crate, the\n+        // [src] link in the downstream documentation will actually come back to\n+        // this page, and this link will be auto-clicked. The `id` attribute is\n+        // used to find the link to auto-click.\n+        if self.cx.shared.include_sources && !self.item.is_primitive() {\n+            if let Some(l) = self.src_href() {\n+                write!(fmt, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                       l, \"goto source code\")?;\n+            }\n+        }\n+\n+        write!(fmt, \"</span>\")?; // out-of-band\n+        write!(fmt, \"<span class='in-band'>\")?;\n         match self.item.inner {\n             clean::ModuleItem(ref m) => if m.is_crate {\n                     write!(fmt, \"Crate \")?;\n@@ -2105,34 +2132,7 @@ impl<'a> fmt::Display for Item<'a> {\n         write!(fmt, \"<a class=\\\"{}\\\" href=''>{}</a>\",\n                self.item.type_(), self.item.name.as_ref().unwrap())?;\n \n-        write!(fmt, \"</span>\")?; // in-band\n-        write!(fmt, \"<span class='out-of-band'>\")?;\n-        if let Some(version) = self.item.stable_since() {\n-            write!(fmt, \"<span class='since' title='Stable since Rust version {0}'>{0}</span>\",\n-                   version)?;\n-        }\n-        write!(fmt,\n-               \"<span id='render-detail'>\\\n-                   <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n-                      title=\\\"collapse all docs\\\">\\\n-                       [<span class='inner'>&#x2212;</span>]\\\n-                   </a>\\\n-               </span>\")?;\n-\n-        // Write `src` tag\n-        //\n-        // When this item is part of a `pub use` in a downstream crate, the\n-        // [src] link in the downstream documentation will actually come back to\n-        // this page, and this link will be auto-clicked. The `id` attribute is\n-        // used to find the link to auto-click.\n-        if self.cx.shared.include_sources && !self.item.is_primitive() {\n-            if let Some(l) = self.src_href() {\n-                write!(fmt, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n-                       l, \"goto source code\")?;\n-            }\n-        }\n-\n-        write!(fmt, \"</span></h1>\")?; // out-of-band\n+        write!(fmt, \"</span></h1>\")?; // in-band\n \n         match self.item.inner {\n             clean::ModuleItem(ref m) =>"}, {"sha": "57a111daa897718b5920d831350a3a228f992716", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -97,7 +97,7 @@ h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod):not(.important), h4\n h1.fqn {\n \tborder-bottom: 1px dashed;\n \tmargin-top: 0;\n-\tposition: relative;\n+\toverflow: auto;\n }\n h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant) {\n \tborder-bottom: 1px solid;\n@@ -352,14 +352,11 @@ nav.sub {\n }\n \n .content .out-of-band {\n+\tfloat: right;\n \tfont-size: 23px;\n \tmargin: 0px;\n \tpadding: 0px;\n-\ttext-align: right;\n-\tdisplay: inline-block;\n \tfont-weight: normal;\n-\tposition: absolute;\n-\tright: 0;\n }\n \n h3.impl > .out-of-band {"}, {"sha": "f6cb8beae84158e6fe6715676c16d60d420b2794", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -31,12 +31,10 @@\n // initialization closure panics, the Once enters a \"poisoned\" state which means\n // that all future calls will immediately panic as well.\n //\n-// So to implement this, one might first reach for a `StaticMutex`, but those\n-// unfortunately need to be deallocated (e.g. call `destroy()`) to free memory\n-// on all OSes (some of the BSDs allocate memory for mutexes). It also gets a\n-// lot harder with poisoning to figure out when the mutex needs to be\n-// deallocated because it's not after the closure finishes, but after the first\n-// successful closure finishes.\n+// So to implement this, one might first reach for a `Mutex`, but those cannot\n+// be put into a `static`. It also gets a lot harder with poisoning to figure\n+// out when the mutex needs to be deallocated because it's not after the closure\n+// finishes, but after the first successful closure finishes.\n //\n // All in all, this is instead implemented with atomics and lock-free\n // operations! Whee! Each `Once` has one word of atomic state, and this state is"}, {"sha": "60b03cdbeb0e9923b8c6b640b386090d126f2dcf", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -49,9 +49,6 @@ impl Mutex {\n         // references, we instead create the mutex with type\n         // PTHREAD_MUTEX_NORMAL which is guaranteed to deadlock if we try to\n         // re-lock it from the same thread, thus avoiding undefined behavior.\n-        //\n-        // We can't do anything for StaticMutex, but that type is deprecated\n-        // anyways.\n         let mut attr: libc::pthread_mutexattr_t = mem::uninitialized();\n         let r = libc::pthread_mutexattr_init(&mut attr);\n         debug_assert_eq!(r, 0);"}, {"sha": "3dac7734e9175cd20909854c7d23c13b727e4073", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -323,7 +323,7 @@ declare_features! (\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n     // Allows the `catch {...}` expression\n-    (active, catch_expr, \"1.17.0\", Some(31436), Some(Edition::Edition2018)),\n+    (active, catch_expr, \"1.17.0\", Some(31436), None),\n \n     // Used to preserve symbols (see llvm.used)\n     (active, used, \"1.18.0\", Some(40289), None),"}, {"sha": "1d0c6b5317a38d3484de1adbfd1ed0ef95eb9f5a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -302,6 +302,10 @@ impl Token {\n             BinOp(Minus) => true,\n             Ident(ident, false) if ident.name == keywords::True.name() => true,\n             Ident(ident, false) if ident.name == keywords::False.name() => true,\n+            Interpolated(ref nt) => match nt.0 {\n+                NtLiteral(..) => true,\n+                _             => false,\n+            },\n             _            => false,\n         }\n     }"}, {"sha": "99b8ad83bf6ccfe44c76d2f25274cbf4da569b6a", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -22,7 +22,7 @@ use std::sync::{\n use std::future::FutureObj;\n use std::task::{\n     Context, Poll, Wake,\n-    Executor, SpawnObjError,\n+    Spawn, SpawnObjError,\n     local_waker_from_nonlocal,\n };\n \n@@ -36,8 +36,8 @@ impl Wake for Counter {\n     }\n }\n \n-struct NoopExecutor;\n-impl Executor for NoopExecutor {\n+struct NoopSpawner;\n+impl Spawn for NoopSpawner {\n     fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n@@ -127,8 +127,8 @@ where\n     let mut fut = PinBox::new(f(9));\n     let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n     let waker = local_waker_from_nonlocal(counter.clone());\n-    let executor = &mut NoopExecutor;\n-    let cx = &mut Context::new(&waker, executor);\n+    let spawner = &mut NoopSpawner;\n+    let cx = &mut Context::new(&waker, spawner);\n \n     assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));\n     assert_eq!(Poll::Pending, fut.as_pin_mut().poll(cx));"}, {"sha": "476cb48c0d2ee7af5169b9616a3b425bb83f5f12", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -23,7 +23,7 @@ use std::future::FutureObj;\n use std::task::{\n     Context, Poll,\n     Wake, Waker, LocalWaker,\n-    Executor, SpawnObjError,\n+    Spawn, SpawnObjError,\n     local_waker, local_waker_from_nonlocal,\n };\n \n@@ -42,9 +42,9 @@ impl Wake for Counter {\n     }\n }\n \n-struct NoopExecutor;\n+struct NoopSpawner;\n \n-impl Executor for NoopExecutor {\n+impl Spawn for NoopSpawner {\n     fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n@@ -59,7 +59,7 @@ impl Future for MyFuture {\n         cx.waker().wake();\n         cx.waker().wake();\n         cx.local_waker().wake();\n-        cx.executor().spawn_obj(PinBox::new(MyFuture).into()).unwrap();\n+        cx.spawner().spawn_obj(PinBox::new(MyFuture).into()).unwrap();\n         Poll::Ready(())\n     }\n }\n@@ -70,8 +70,8 @@ fn test_local_waker() {\n         nonlocal_wakes: AtomicUsize::new(0),\n     });\n     let waker = unsafe { local_waker(counter.clone()) };\n-    let executor = &mut NoopExecutor;\n-    let cx = &mut Context::new(&waker, executor);\n+    let spawner = &mut NoopSpawner;\n+    let cx = &mut Context::new(&waker, spawner);\n     assert_eq!(Poll::Ready(()), PinMut::new(&mut MyFuture).poll(cx));\n     assert_eq!(1, counter.local_wakes.load(atomic::Ordering::SeqCst));\n     assert_eq!(2, counter.nonlocal_wakes.load(atomic::Ordering::SeqCst));\n@@ -83,8 +83,8 @@ fn test_local_as_nonlocal_waker() {\n         nonlocal_wakes: AtomicUsize::new(0),\n     });\n     let waker: LocalWaker = local_waker_from_nonlocal(counter.clone());\n-    let executor = &mut NoopExecutor;\n-    let cx = &mut Context::new(&waker, executor);\n+    let spawner = &mut NoopSpawner;\n+    let cx = &mut Context::new(&waker, spawner);\n     assert_eq!(Poll::Ready(()), PinMut::new(&mut MyFuture).poll(cx));\n     assert_eq!(0, counter.local_wakes.load(atomic::Ordering::SeqCst));\n     assert_eq!(3, counter.nonlocal_wakes.load(atomic::Ordering::SeqCst));"}, {"sha": "f2163416922cd5a0cded69cb614bbbdd7179be1f", "filename": "src/test/run-pass/issue-52169.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18925dee25ce649562d203e72068e3a57b60b153/src%2Ftest%2Frun-pass%2Fissue-52169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18925dee25ce649562d203e72068e3a57b60b153/src%2Ftest%2Frun-pass%2Fissue-52169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-52169.rs?ref=18925dee25ce649562d203e72068e3a57b60b153", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_literal_matcher)]\n+\n+macro_rules! a {\n+    ($i:literal) => { \"right\" };\n+    ($i:tt) => { \"wrong\" };\n+}\n+\n+macro_rules! b {\n+    ($i:literal) => { a!($i) };\n+}\n+\n+fn main() {\n+    assert_eq!(b!(0), \"right\");\n+}"}]}