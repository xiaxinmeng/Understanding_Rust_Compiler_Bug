{"sha": "2b2462e8b0a6b83191a8035d9209f7aa87a2feb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMjQ2MmU4YjBhNmI4MzE5MWE4MDM1ZDkyMDlmN2FhODdhMmZlYjA=", "commit": {"author": {"name": "Arlie Davis", "email": "ardavis@microsoft.com", "date": "2020-12-14T19:34:55Z"}, "committer": {"name": "Arlie Davis", "email": "ardavis@microsoft.com", "date": "2020-12-17T23:20:45Z"}, "message": "Stop using intermediate macros in definition of symbols\n\nCurrently, the rustc_macros::symbols macro generates two\n`macro_rules!` macros as its output. These two macros are\nused in rustc_span/src/symbol.rs.\n\nThis means that each Symbol that we define is represented\nin the AST of rustc_symbols twice: once in the definition\nof the `define_symbols!` macro (similarly for the\n`keywords! macro), and once in the rustc_span::symbols\ndefinition.\n\nThat would be OK if there were only a handful of symbols,\nbut currently we define over 1100 symbols. The definition\nof the `define_symbols!` macro contains the expanded definition\nof each symbol, so that's a lot of AST storage wasted on a\nmacro that is used exactly once.\n\nThis commit removes the `define_symbols` macro, and simply\nallows the proc macro to directly generate the\n`rustc_symbols::symbol::sym` module.\n\nThe benefit is mainly in reducing memory wasted during\ncompilation of rustc itself. It should also reduce memory used\nby Rust Analyzer.\n\nThis commit also reduces the size of the AST for symbol\ndefinitions, by moving two `#[allow(...)]` attributes from\nthe symbol constants to the `sym` module. This eliminates 2200+\nattribute nodes.\n\nThis commit also eliminates the need for the `digits_array`\nconstant. There's no need to store an array of Symbol values\nfor digits. We can simply define a constant of the base value,\nand add to that base value.", "tree": {"sha": "1eab879f65ef0187a5aa1dd37f46516c20106762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eab879f65ef0187a5aa1dd37f46516c20106762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0", "html_url": "https://github.com/rust-lang/rust/commit/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0/comments", "author": null, "committer": null, "parents": [{"sha": "eb4fc71dc9024f15a0c9cc44bcc10c861e9d585e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fc71dc9024f15a0c9cc44bcc10c861e9d585e", "html_url": "https://github.com/rust-lang/rust/commit/eb4fc71dc9024f15a0c9cc44bcc10c861e9d585e"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "5b932864dff5da7a8a547bce4a1601de9ac3cbdb", "filename": "compiler/rustc_macros/src/symbols.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs?ref=2b2462e8b0a6b83191a8035d9209f7aa87a2feb0", "patch": "@@ -126,7 +126,6 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n \n     let mut keyword_stream = quote! {};\n     let mut symbols_stream = quote! {};\n-    let mut digits_stream = quote! {};\n     let mut prefill_stream = quote! {};\n     let mut counter = 0u32;\n     let mut keys =\n@@ -162,7 +161,6 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n             #value,\n         });\n         keyword_stream.extend(quote! {\n-            #[allow(non_upper_case_globals)]\n             pub const #name: Symbol = Symbol::new(#counter);\n         });\n         counter += 1;\n@@ -182,42 +180,39 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n             #value,\n         });\n         symbols_stream.extend(quote! {\n-            #[allow(rustc::default_hash_types)]\n-            #[allow(non_upper_case_globals)]\n             pub const #name: Symbol = Symbol::new(#counter);\n         });\n         counter += 1;\n     }\n \n     // Generate symbols for the strings \"0\", \"1\", ..., \"9\".\n+    let digits_base = counter;\n+    counter += 10;\n     for n in 0..10 {\n         let n = n.to_string();\n         check_dup(Span::call_site(), &n, &mut errors);\n         prefill_stream.extend(quote! {\n             #n,\n         });\n-        digits_stream.extend(quote! {\n-            Symbol::new(#counter),\n-        });\n-        counter += 1;\n     }\n+    let _ = counter; // for future use\n \n     let output = quote! {\n-        macro_rules! keywords {\n-            () => {\n-                #keyword_stream\n-            }\n-        }\n+        const SYMBOL_DIGITS_BASE: u32 = #digits_base;\n \n-        macro_rules! define_symbols {\n-            () => {\n-                #symbols_stream\n+        #[doc(hidden)]\n+        #[allow(non_upper_case_globals)]\n+        mod kw_generated {\n+            use super::Symbol;\n+            #keyword_stream\n+        }\n \n-                #[allow(non_upper_case_globals)]\n-                pub const digits_array: &[Symbol; 10] = &[\n-                    #digits_stream\n-                ];\n-            }\n+        #[allow(rustc::default_hash_types)]\n+        #[allow(non_upper_case_globals)]\n+        #[doc(hidden)]\n+        pub mod sym_generated {\n+            use super::Symbol;\n+            #symbols_stream\n         }\n \n         impl Interner {"}, {"sha": "cceede42cacbf4eb72f1eb41d343c1a196131ead", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2462e8b0a6b83191a8035d9209f7aa87a2feb0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2b2462e8b0a6b83191a8035d9209f7aa87a2feb0", "patch": "@@ -1577,31 +1577,31 @@ impl Interner {\n /// Given that `kw` is imported, use them like `kw::keyword_name`.\n /// For example `kw::Loop` or `kw::Break`.\n pub mod kw {\n-    use super::Symbol;\n-    keywords!();\n+    pub use super::kw_generated::*;\n }\n \n // This module has a very short name because it's used a lot.\n /// This module contains all the defined non-keyword `Symbol`s.\n ///\n /// Given that `sym` is imported, use them like `sym::symbol_name`.\n /// For example `sym::rustfmt` or `sym::u8`.\n-#[allow(rustc::default_hash_types)]\n pub mod sym {\n     use super::Symbol;\n     use std::convert::TryInto;\n \n-    define_symbols!();\n+    pub use super::sym_generated::*;\n \n     // Used from a macro in `librustc_feature/accepted.rs`\n     pub use super::kw::MacroRules as macro_rules;\n \n-    // Get the symbol for an integer. The first few non-negative integers each\n-    // have a static symbol and therefore are fast.\n+    /// Get the symbol for an integer.\n+    ///\n+    /// The first few non-negative integers each have a static symbol and therefore\n+    /// are fast.\n     pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {\n         if let Result::Ok(idx) = n.try_into() {\n-            if let Option::Some(&sym_) = digits_array.get(idx) {\n-                return sym_;\n+            if idx < 10 {\n+                return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);\n             }\n         }\n         Symbol::intern(&n.to_string())"}]}