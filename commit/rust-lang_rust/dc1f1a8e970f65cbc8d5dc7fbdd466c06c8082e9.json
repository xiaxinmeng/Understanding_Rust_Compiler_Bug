{"sha": "dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9", "node_id": "C_kwDOAAsO6NoAKGRjMWYxYThlOTcwZjY1Y2JjOGQ1ZGM3ZmJkZDQ2NmMwNmM4MDgyZTk", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-06T17:01:44Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-06T17:01:44Z"}, "message": "Added `const_hash` tracking issue id", "tree": {"sha": "e35c8708041e0e70cd56dbb7138fdc958c8fdc78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e35c8708041e0e70cd56dbb7138fdc958c8fdc78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9", "html_url": "https://github.com/rust-lang/rust/commit/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9899b289c726518faab975ae2f612462ba888b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9899b289c726518faab975ae2f612462ba888b", "html_url": "https://github.com/rust-lang/rust/commit/5f9899b289c726518faab975ae2f612462ba888b"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "d8bb92fcc8d503f65b067a048225cb60014037ee", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9", "patch": "@@ -567,7 +567,7 @@ pub trait Hasher {\n }\n \n #[stable(feature = \"indirect_hasher_impl\", since = \"1.22.0\")]\n-#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n impl<H: ~const Hasher + ?Sized> const Hasher for &mut H {\n     fn finish(&self) -> u64 {\n         (**self).finish()\n@@ -776,7 +776,7 @@ impl<H> fmt::Debug for BuildHasherDefault<H> {\n }\n \n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n-#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n impl<H: ~const Default + Hasher> const BuildHasher for BuildHasherDefault<H> {\n     type Hasher = H;\n \n@@ -819,7 +819,7 @@ mod impls {\n     macro_rules! impl_write {\n         ($(($ty:ident, $meth:ident),)*) => {$(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+            #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n             impl const Hash for $ty {\n                 #[inline]\n                 fn hash<H: ~const Hasher>(&self, state: &mut H) {\n@@ -856,7 +856,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl const Hash for bool {\n         #[inline]\n         fn hash<H: ~const Hasher>(&self, state: &mut H) {\n@@ -865,7 +865,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl const Hash for char {\n         #[inline]\n         fn hash<H: ~const Hasher>(&self, state: &mut H) {\n@@ -874,7 +874,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl const Hash for str {\n         #[inline]\n         fn hash<H: ~const Hasher>(&self, state: &mut H) {\n@@ -883,7 +883,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"never_hash\", since = \"1.29.0\")]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl const Hash for ! {\n         #[inline]\n         fn hash<H: ~const Hasher>(&self, _: &mut H) {\n@@ -894,7 +894,7 @@ mod impls {\n     macro_rules! impl_hash_tuple {\n         () => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+            #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n             impl const Hash for () {\n                 #[inline]\n                 fn hash<H: ~const Hasher>(&self, _state: &mut H) {}\n@@ -905,7 +905,7 @@ mod impls {\n             maybe_tuple_doc! {\n                 $($name)+ @\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-                #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+                #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n                 impl<$($name: ~const Hash),+> const Hash for ($($name,)+) where last_type!($($name,)+): ?Sized {\n                     #[allow(non_snake_case)]\n                     #[inline]\n@@ -952,7 +952,7 @@ mod impls {\n     impl_hash_tuple! { T B C D E F G H I J K L }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl<T: ~const Hash> const Hash for [T] {\n         #[inline]\n         fn hash<H: ~const Hasher>(&self, state: &mut H) {\n@@ -962,7 +962,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl<T: ?Sized + ~const Hash> const Hash for &T {\n         #[inline]\n         fn hash<H: ~const Hasher>(&self, state: &mut H) {\n@@ -971,7 +971,7 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl<T: ?Sized + ~const Hash> const Hash for &mut T {\n         #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {"}, {"sha": "51581d2108951d8d0da5edcee1861a8084ec07f7", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9", "patch": "@@ -150,7 +150,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     #[must_use]\n     pub const fn new() -> SipHasher {\n         SipHasher::new_with_keys(0, 0)\n@@ -163,7 +163,7 @@ impl SipHasher {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     #[must_use]\n     pub const fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n         SipHasher(SipHasher24 { hasher: Hasher::new_with_keys(key0, key1) })\n@@ -178,7 +178,7 @@ impl SipHasher13 {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     pub const fn new() -> SipHasher13 {\n         SipHasher13::new_with_keys(0, 0)\n     }\n@@ -190,7 +190,7 @@ impl SipHasher13 {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     pub const fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {\n         SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }\n     }\n@@ -224,7 +224,7 @@ impl<S: Sip> Hasher<S> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n impl const super::Hasher for SipHasher {\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {\n@@ -243,7 +243,7 @@ impl const super::Hasher for SipHasher {\n }\n \n #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n-#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n impl const super::Hasher for SipHasher13\n where\n     Hasher<Sip13Rounds>: ~const super::Hasher,"}, {"sha": "df490358827e7ae9c8fd777450dc776a19f66b10", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=dc1f1a8e970f65cbc8d5dc7fbdd466c06c8082e9", "patch": "@@ -3161,15 +3161,15 @@ impl DefaultHasher {\n     #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n     #[inline]\n     #[allow(deprecated)]\n-    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     #[must_use]\n     pub const fn new() -> DefaultHasher {\n         DefaultHasher(SipHasher13::new_with_keys(0, 0))\n     }\n }\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n-#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n impl const Default for DefaultHasher {\n     /// Creates a new `DefaultHasher` using [`new`].\n     /// See its documentation for more.\n@@ -3182,7 +3182,7 @@ impl const Default for DefaultHasher {\n }\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n-#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n impl const Hasher for DefaultHasher {\n     // The underlying `SipHasher13` doesn't override the other\n     // `write_*` methods, so it's ok not to forward them here."}]}