{"sha": "1cfa6569f9078090ac317af432adf712407bd4f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZmE2NTY5ZjkwNzgwOTBhYzMxN2FmNDMyYWRmNzEyNDA3YmQ0Zjc=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-27T02:33:47Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-27T02:33:47Z"}, "message": "Implement Hash for RingBuf", "tree": {"sha": "2171dcbb31d3a26a400dcfae4a6c823970fbbc74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2171dcbb31d3a26a400dcfae4a6c823970fbbc74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cfa6569f9078090ac317af432adf712407bd4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfa6569f9078090ac317af432adf712407bd4f7", "html_url": "https://github.com/rust-lang/rust/commit/1cfa6569f9078090ac317af432adf712407bd4f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cfa6569f9078090ac317af432adf712407bd4f7/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32e521ffab81572fc8c9b0b3c7537a092f058371", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e521ffab81572fc8c9b0b3c7537a092f058371", "html_url": "https://github.com/rust-lang/rust/commit/32e521ffab81572fc8c9b0b3c7537a092f058371"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "03532051d7a6d406c848f5ba3c71fe39ccf317bd", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1cfa6569f9078090ac317af432adf712407bd4f7/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfa6569f9078090ac317af432adf712407bd4f7/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=1cfa6569f9078090ac317af432adf712407bd4f7", "patch": "@@ -19,6 +19,7 @@ use core::cmp;\n use core::default::Default;\n use core::fmt;\n use core::iter::RandomAccessIterator;\n+use std::hash::{Writer, Hash};\n \n use {Deque, Collection, Mutable, MutableSeq};\n use vec::Vec;\n@@ -450,6 +451,14 @@ impl<A: PartialEq> PartialEq for RingBuf<A> {\n     }\n }\n \n+impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n+    fn hash(&self, state: &mut S) {\n+        for elt in self.iter() {\n+            elt.hash(state);\n+        }\n+    }\n+}\n+\n impl<A> FromIterator<A> for RingBuf<A> {\n     fn from_iter<T: Iterator<A>>(iterator: T) -> RingBuf<A> {\n         let (lower, _) = iterator.size_hint();\n@@ -485,6 +494,7 @@ mod tests {\n     use std::fmt::Show;\n     use std::prelude::*;\n     use std::gc::{GC, Gc};\n+    use std::hash;\n     use test::Bencher;\n     use test;\n \n@@ -912,6 +922,24 @@ mod tests {\n         assert!(e == RingBuf::new());\n     }\n \n+    #[test]\n+    fn test_hash() {\n+      let mut x = RingBuf::new();\n+      let mut y = RingBuf::new();\n+\n+      x.push(1i);\n+      x.push(2);\n+      x.push(3);\n+\n+      y.push(0i);\n+      y.push(1i);\n+      y.pop_front();\n+      y.push(2);\n+      y.push(3);\n+\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+    }\n+\n     #[test]\n     fn test_show() {\n         let ringbuf: RingBuf<int> = range(0i, 10).collect();"}]}