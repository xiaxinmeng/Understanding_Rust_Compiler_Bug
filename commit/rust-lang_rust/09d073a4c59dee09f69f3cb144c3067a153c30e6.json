{"sha": "09d073a4c59dee09f69f3cb144c3067a153c30e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZDA3M2E0YzU5ZGVlMDlmNjlmM2NiMTQ0YzMwNjdhMTUzYzMwZTY=", "commit": {"author": {"name": "Ryan Leckey", "email": "ryan@launchbadge.com", "date": "2019-01-07T15:09:17Z"}, "committer": {"name": "Ryan Leckey", "email": "ryan@launchbadge.com", "date": "2019-01-15T07:42:46Z"}, "message": "stabilize extern_crate_self", "tree": {"sha": "c0be58b46fcf93924472cb1443b567ec65268c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0be58b46fcf93924472cb1443b567ec65268c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d073a4c59dee09f69f3cb144c3067a153c30e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d073a4c59dee09f69f3cb144c3067a153c30e6", "html_url": "https://github.com/rust-lang/rust/commit/09d073a4c59dee09f69f3cb144c3067a153c30e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d073a4c59dee09f69f3cb144c3067a153c30e6/comments", "author": {"login": "mehcode", "id": 753919, "node_id": "MDQ6VXNlcjc1MzkxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/753919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehcode", "html_url": "https://github.com/mehcode", "followers_url": "https://api.github.com/users/mehcode/followers", "following_url": "https://api.github.com/users/mehcode/following{/other_user}", "gists_url": "https://api.github.com/users/mehcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehcode/subscriptions", "organizations_url": "https://api.github.com/users/mehcode/orgs", "repos_url": "https://api.github.com/users/mehcode/repos", "events_url": "https://api.github.com/users/mehcode/events{/privacy}", "received_events_url": "https://api.github.com/users/mehcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mehcode", "id": 753919, "node_id": "MDQ6VXNlcjc1MzkxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/753919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehcode", "html_url": "https://github.com/mehcode", "followers_url": "https://api.github.com/users/mehcode/followers", "following_url": "https://api.github.com/users/mehcode/following{/other_user}", "gists_url": "https://api.github.com/users/mehcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehcode/subscriptions", "organizations_url": "https://api.github.com/users/mehcode/orgs", "repos_url": "https://api.github.com/users/mehcode/repos", "events_url": "https://api.github.com/users/mehcode/events{/privacy}", "received_events_url": "https://api.github.com/users/mehcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea9f0aa976db2f5de28be3b6b287c6889cd926b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea9f0aa976db2f5de28be3b6b287c6889cd926b", "html_url": "https://github.com/rust-lang/rust/commit/aea9f0aa976db2f5de28be3b6b287c6889cd926b"}], "stats": {"total": 77, "additions": 49, "deletions": 28}, "files": [{"sha": "75bfdcc2f448adbcd98b8c71c2b720a415a18dee", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -30,7 +30,7 @@ use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n-use syntax::feature_gate::{is_builtin_attr, emit_feature_err, GateIssue};\n+use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n@@ -349,10 +349,6 @@ impl<'a> Resolver<'a> {\n                         .emit();\n                     return;\n                 } else if orig_name == Some(keywords::SelfLower.name()) {\n-                    if !self.session.features_untracked().extern_crate_self {\n-                        emit_feature_err(&self.session.parse_sess, \"extern_crate_self\", item.span,\n-                                         GateIssue::Language, \"`extern crate self` is unstable\");\n-                    }\n                     self.graph_root\n                 } else {\n                     let crate_id = self.crate_loader.process_extern_crate(item, &self.definitions);"}, {"sha": "afbc01062627651dfffff36d9932be65572846f4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -453,9 +453,6 @@ declare_features! (\n     // Adds `reason` and `expect` lint attributes.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n-    // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n-    (active, extern_crate_self, \"1.31.0\", Some(56409), None),\n-\n     // Allows paths to enum variants on type aliases.\n     (active, type_alias_enum_variants, \"1.31.0\", Some(49683), None),\n \n@@ -685,6 +682,8 @@ declare_features! (\n     (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n     // Allows `cfg(target_vendor = \"...\")`.\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n+    // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n+    (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "2161932c2f6aa187b48eeffa02f02dbb97e8505d", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_self.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,3 +0,0 @@\n-extern crate self as foo; //~ ERROR `extern crate self` is unstable\n-\n-fn main() {}"}, {"sha": "530015b2cb71266fccf77500418973744356e13d", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_self.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aea9f0aa976db2f5de28be3b6b287c6889cd926b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr?ref=aea9f0aa976db2f5de28be3b6b287c6889cd926b", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `extern crate self` is unstable (see issue #56409)\n-  --> $DIR/feature-gate-extern_crate_self.rs:1:1\n-   |\n-LL | extern crate self as foo; //~ ERROR `extern crate self` is unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(extern_crate_self)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "defa0e294bd743e81b25b3434ce26f1add8639d6", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -1,5 +1,3 @@\n-#![feature(extern_crate_self)]\n-\n extern crate self; //~ ERROR `extern crate self;` requires renaming\n \n #[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`", "previous_filename": "src/test/ui/imports/extern-crate-self-fail.rs"}, {"sha": "b47d10343f68975d33b257160fc047270f478a3a", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -1,11 +1,11 @@\n error: `extern crate self;` requires renaming\n-  --> $DIR/extern-crate-self-fail.rs:3:1\n+  --> $DIR/extern-crate-self-fail.rs:1:1\n    |\n LL | extern crate self; //~ ERROR `extern crate self;` requires renaming\n    | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n \n error: `macro_use` is not supported on `extern crate self`\n-  --> $DIR/extern-crate-self-fail.rs:5:1\n+  --> $DIR/extern-crate-self-fail.rs:3:1\n    |\n LL | #[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`\n    | ^^^^^^^^^^^^", "previous_filename": "src/test/ui/imports/extern-crate-self-fail.stderr"}, {"sha": "79683522888cbeffa958ef76daa823aa377271af", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-macro-alias.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-alias.rs?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+// Test that a macro can correctly expand the alias\n+// in an `extern crate self as ALIAS` item.\n+\n+fn the_answer() -> usize { 42 }\n+\n+macro_rules! alias_self {\n+    ($alias:ident) => { extern crate self as $alias; }\n+}\n+\n+alias_self!(the_alias);\n+\n+fn main() {\n+    assert_eq!(the_alias::the_answer(), 42);\n+}"}, {"sha": "9c9397999ff679c5f060b65432a0f072e1d89472", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-macro-item.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-item.rs?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+// Test that `extern crate self;` is accepted\n+// syntactically as an item for use in a macro.\n+\n+macro_rules! accept_item { ($x:item) => {} }\n+\n+accept_item! {\n+    extern crate self;\n+}\n+\n+fn main() {}"}, {"sha": "009a92e877645ace1e68176b8edd52d4f8836826", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-macro-self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-self.rs?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+// Test that a macro can correctly expand `self` in\n+// an `extern crate self as ALIAS` item.\n+\n+fn the_answer() -> usize { 42 }\n+\n+macro_rules! extern_something {\n+    ($alias:ident) => { extern crate $alias as the_alias; }\n+}\n+\n+extern_something!(self);\n+\n+fn main() {\n+    assert_eq!(the_alias::the_answer(), 42);\n+}"}, {"sha": "6f6343a614886f0ed74518dfc669bb23898ce528", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-pass.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d073a4c59dee09f69f3cb144c3067a153c30e6/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-pass.rs?ref=09d073a4c59dee09f69f3cb144c3067a153c30e6", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(extern_crate_self)]\n-\n extern crate self as foo;\n \n struct S;", "previous_filename": "src/test/ui/imports/extern-crate-self-pass.rs"}]}