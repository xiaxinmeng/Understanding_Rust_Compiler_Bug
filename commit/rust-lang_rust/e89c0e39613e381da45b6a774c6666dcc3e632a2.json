{"sha": "e89c0e39613e381da45b6a774c6666dcc3e632a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OWMwZTM5NjEzZTM4MWRhNDViNmE3NzRjNjY2NmRjYzNlNjMyYTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-08T18:39:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-08T18:45:43Z"}, "message": "Remove now dead code", "tree": {"sha": "8a2e53e4c97381f628eeedae92c9df71b4625287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2e53e4c97381f628eeedae92c9df71b4625287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89c0e39613e381da45b6a774c6666dcc3e632a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89c0e39613e381da45b6a774c6666dcc3e632a2", "html_url": "https://github.com/rust-lang/rust/commit/e89c0e39613e381da45b6a774c6666dcc3e632a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89c0e39613e381da45b6a774c6666dcc3e632a2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "095b9110b5e4e166c86501a1f0603cf626a48127", "url": "https://api.github.com/repos/rust-lang/rust/commits/095b9110b5e4e166c86501a1f0603cf626a48127", "html_url": "https://github.com/rust-lang/rust/commit/095b9110b5e4e166c86501a1f0603cf626a48127"}], "stats": {"total": 166, "additions": 76, "deletions": 90}, "files": [{"sha": "e43d4fa73873cffcc101b12b5b45aa750929a1f9", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -16,7 +16,7 @@ use std::{\n     fmt, mem,\n     path::{Path, PathBuf},\n };\n-use xshell::{cmd, pushenv, read_file, write_file};\n+use xshell::{cmd, pushenv};\n \n use crate::{ensure_rustfmt, project_root, Result};\n \n@@ -35,44 +35,38 @@ pub(crate) fn docs() -> Result<()> {\n \n #[allow(unused)]\n fn used() {\n-    generate_parser_tests(Mode::Overwrite);\n-    generate_assists_tests(Mode::Overwrite);\n-    generate_syntax(Mode::Overwrite);\n-    generate_lint_completions(Mode::Overwrite);\n+    generate_parser_tests();\n+    generate_assists_tests();\n+    generate_syntax();\n+    generate_lint_completions();\n }\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub(crate) enum Mode {\n-    Overwrite,\n-    Ensure,\n-}\n-\n-/// A helper to update file on disk if it has changed.\n-/// With verify = false,\n-fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n-    match read_file(path) {\n-        Ok(old_contents) if normalize(&old_contents) == normalize(contents) => {\n-            return Ok(());\n+/// Checks that the `file` has the specified `contents`. If that is not the\n+/// case, updates the file and then fails the test.\n+pub(crate) fn ensure_file_contents(file: &Path, contents: &str) -> Result<()> {\n+    match std::fs::read_to_string(file) {\n+        Ok(old_contents) if normalize_newlines(&old_contents) == normalize_newlines(contents) => {\n+            return Ok(())\n         }\n         _ => (),\n     }\n-    let return_error = match mode {\n-        Mode::Overwrite => false,\n-        Mode::Ensure => true,\n-    };\n-    eprintln!(\"updating {}\", path.display());\n-    write_file(path, contents)?;\n-\n-    return if return_error {\n-        let path = path.strip_prefix(&project_root()).unwrap_or(path);\n-        anyhow::bail!(\"`{}` was not up-to-date, updating\", path.display());\n-    } else {\n-        Ok(())\n-    };\n-\n-    fn normalize(s: &str) -> String {\n-        s.replace(\"\\r\\n\", \"\\n\")\n+    let display_path = file.strip_prefix(&project_root()).unwrap_or(file);\n+    eprintln!(\n+        \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n+        display_path.display()\n+    );\n+    if std::env::var(\"CI\").is_ok() {\n+        eprintln!(\"\\n    NOTE: run `cargo test` locally and commit the updated files\\n\");\n+    }\n+    if let Some(parent) = file.parent() {\n+        let _ = std::fs::create_dir_all(parent);\n     }\n+    std::fs::write(file, contents).unwrap();\n+    anyhow::bail!(\"some file were not up to date\")\n+}\n+\n+fn normalize_newlines(s: &str) -> String {\n+    s.replace(\"\\r\\n\", \"\\n\")\n }\n \n const PREAMBLE: &str = \"Generated file, do not edit by hand, see `xtask/src/codegen`\";"}, {"sha": "158680993f2561cfbdd4b642b4ccd886a96c1bf4", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -2,22 +2,25 @@\n \n use std::{fmt, path::Path};\n \n+use xshell::write_file;\n+\n use crate::{\n-    codegen::{self, extract_comment_blocks_with_empty_lines, reformat, Location, Mode, PREAMBLE},\n+    codegen::{self, extract_comment_blocks_with_empty_lines, reformat, Location, PREAMBLE},\n     project_root, rust_files_in, Result,\n };\n \n-pub(crate) fn generate_assists_tests(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_assists_tests() -> Result<()> {\n     let assists = Assist::collect()?;\n-    generate_tests(&assists, mode)\n+    generate_tests(&assists)\n }\n \n pub(crate) fn generate_assists_docs() -> Result<()> {\n     let assists = Assist::collect()?;\n     let contents = assists.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n     let dst = project_root().join(\"docs/user/generated_assists.adoc\");\n-    codegen::update(&dst, &contents, Mode::Overwrite)\n+    write_file(dst, &contents)?;\n+    Ok(())\n }\n \n #[derive(Debug)]\n@@ -111,7 +114,7 @@ impl fmt::Display for Assist {\n     }\n }\n \n-fn generate_tests(assists: &[Assist], mode: Mode) -> Result<()> {\n+fn generate_tests(assists: &[Assist]) -> Result<()> {\n     let mut buf = String::from(\"use super::check_doc_test;\\n\");\n \n     for assist in assists.iter() {\n@@ -135,7 +138,10 @@ r#####\"\n         buf.push_str(&test)\n     }\n     let buf = reformat(&buf)?;\n-    codegen::update(&project_root().join(\"crates/ide_assists/src/tests/generated.rs\"), &buf, mode)\n+    codegen::ensure_file_contents(\n+        &project_root().join(\"crates/ide_assists/src/tests/generated.rs\"),\n+        &buf,\n+    )\n }\n \n fn hide_hash_comments(text: &str) -> String {"}, {"sha": "9cf4d0a88a3e4d534bf93e4eecc81aa23d4f3f1b", "filename": "xtask/src/codegen/gen_diagnostic_docs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -2,8 +2,10 @@\n \n use std::{fmt, path::PathBuf};\n \n+use xshell::write_file;\n+\n use crate::{\n-    codegen::{self, extract_comment_blocks_with_empty_lines, Location, Mode, PREAMBLE},\n+    codegen::{extract_comment_blocks_with_empty_lines, Location, PREAMBLE},\n     project_root, rust_files, Result,\n };\n \n@@ -13,7 +15,7 @@ pub(crate) fn generate_diagnostic_docs() -> Result<()> {\n         diagnostics.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n     let dst = project_root().join(\"docs/user/generated_diagnostic.adoc\");\n-    codegen::update(&dst, &contents, Mode::Overwrite)?;\n+    write_file(&dst, &contents)?;\n     Ok(())\n }\n "}, {"sha": "c373d7d70f55745365058b49e87e219230750f99", "filename": "xtask/src/codegen/gen_feature_docs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -2,8 +2,10 @@\n \n use std::{fmt, path::PathBuf};\n \n+use xshell::write_file;\n+\n use crate::{\n-    codegen::{self, extract_comment_blocks_with_empty_lines, Location, Mode, PREAMBLE},\n+    codegen::{extract_comment_blocks_with_empty_lines, Location, PREAMBLE},\n     project_root, rust_files, Result,\n };\n \n@@ -12,7 +14,7 @@ pub(crate) fn generate_feature_docs() -> Result<()> {\n     let contents = features.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n     let dst = project_root().join(\"docs/user/generated_features.adoc\");\n-    codegen::update(&dst, &contents, Mode::Overwrite)?;\n+    write_file(&dst, &contents)?;\n     Ok(())\n }\n "}, {"sha": "3a2937670048583faa9452cd82efdca98399c206", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -5,12 +5,9 @@ use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n use xshell::{cmd, read_file};\n \n-use crate::{\n-    codegen::{project_root, reformat, update, Mode, Result},\n-    run_rustfmt,\n-};\n+use crate::codegen::{ensure_file_contents, project_root, reformat, Result};\n \n-pub(crate) fn generate_lint_completions(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_lint_completions() -> Result<()> {\n     if !Path::new(\"./target/rust\").exists() {\n         cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust ./target/rust\").run()?;\n     }\n@@ -25,8 +22,7 @@ pub(crate) fn generate_lint_completions(mode: Mode) -> Result<()> {\n \n     let destination =\n         project_root().join(\"crates/ide_completion/src/generated_lint_completions.rs\");\n-    update(destination.as_path(), &contents, mode)?;\n-    run_rustfmt(mode)?;\n+    ensure_file_contents(destination.as_path(), &contents)?;\n \n     Ok(())\n }"}, {"sha": "096590653f96c39605c0c5ce858fe40199bae6b8", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -8,13 +8,13 @@ use std::{\n };\n \n use crate::{\n-    codegen::{extract_comment_blocks, update, Mode},\n+    codegen::{ensure_file_contents, extract_comment_blocks},\n     project_root, Result,\n };\n \n-pub(crate) fn generate_parser_tests(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_parser_tests() -> Result<()> {\n     let tests = tests_from_dir(&project_root().join(Path::new(\"crates/parser/src/grammar\")))?;\n-    fn install_tests(tests: &HashMap<String, Test>, into: &str, mode: Mode) -> Result<()> {\n+    fn install_tests(tests: &HashMap<String, Test>, into: &str) -> Result<()> {\n         let tests_dir = project_root().join(into);\n         if !tests_dir.is_dir() {\n             fs::create_dir_all(&tests_dir)?;\n@@ -35,12 +35,12 @@ pub(crate) fn generate_parser_tests(mode: Mode) -> Result<()> {\n                     tests_dir.join(file_name)\n                 }\n             };\n-            update(&path, &test.text, mode)?;\n+            ensure_file_contents(&path, &test.text)?;\n         }\n         Ok(())\n     }\n-    install_tests(&tests.ok, \"crates/syntax/test_data/parser/inline/ok\", mode)?;\n-    install_tests(&tests.err, \"crates/syntax/test_data/parser/inline/err\", mode)\n+    install_tests(&tests.ok, \"crates/syntax/test_data/parser/inline/ok\")?;\n+    install_tests(&tests.err, \"crates/syntax/test_data/parser/inline/err\")\n }\n \n #[derive(Debug)]"}, {"sha": "80f26e8f59c3947a22e5368494d4861344b1a5da", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -14,25 +14,25 @@ use ungrammar::{rust_grammar, Grammar, Rule};\n \n use crate::{\n     ast_src::{AstEnumSrc, AstNodeSrc, AstSrc, Cardinality, Field, KindsSrc, KINDS_SRC},\n-    codegen::{reformat, update, Mode},\n+    codegen::{ensure_file_contents, reformat},\n     project_root, Result,\n };\n \n-pub(crate) fn generate_syntax(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_syntax() -> Result<()> {\n     let grammar = rust_grammar();\n     let ast = lower(&grammar);\n \n     let syntax_kinds_file = project_root().join(\"crates/parser/src/syntax_kind/generated.rs\");\n     let syntax_kinds = generate_syntax_kinds(KINDS_SRC)?;\n-    update(syntax_kinds_file.as_path(), &syntax_kinds, mode)?;\n+    ensure_file_contents(syntax_kinds_file.as_path(), &syntax_kinds)?;\n \n     let ast_tokens_file = project_root().join(\"crates/syntax/src/ast/generated/tokens.rs\");\n     let contents = generate_tokens(&ast)?;\n-    update(ast_tokens_file.as_path(), &contents, mode)?;\n+    ensure_file_contents(ast_tokens_file.as_path(), &contents)?;\n \n     let ast_nodes_file = project_root().join(\"crates/syntax/src/ast/generated/nodes.rs\");\n     let contents = generate_nodes(KINDS_SRC, &ast)?;\n-    update(ast_nodes_file.as_path(), &contents, mode)?;\n+    ensure_file_contents(ast_nodes_file.as_path(), &contents)?;\n \n     Ok(())\n }"}, {"sha": "35cc7c10888e1a262f0efca121423b47b26ba9d0", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -28,7 +28,7 @@ use std::{\n use walkdir::{DirEntry, WalkDir};\n use xshell::{cmd, cp, pushd, pushenv};\n \n-use crate::{codegen::Mode, dist::DistCmd};\n+use crate::dist::DistCmd;\n \n fn main() -> Result<()> {\n     let _d = pushd(project_root())?;\n@@ -84,23 +84,6 @@ fn rust_files_in(path: &Path) -> impl Iterator<Item = PathBuf> {\n     files_in(path, \"rs\")\n }\n \n-fn run_rustfmt(mode: Mode) -> Result<()> {\n-    let _dir = pushd(project_root())?;\n-    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n-    ensure_rustfmt()?;\n-    match mode {\n-        Mode::Overwrite => cmd!(\"cargo fmt\").run()?,\n-        Mode::Ensure => {\n-            let res = cmd!(\"cargo fmt -- --check\").run();\n-            if !res.is_ok() {\n-                let _ = cmd!(\"cargo fmt\").run();\n-            }\n-            res?;\n-        }\n-    };\n-    Ok(())\n-}\n-\n fn ensure_rustfmt() -> Result<()> {\n     let out = cmd!(\"rustfmt --version\").read()?;\n     if !out.contains(\"stable\") {"}, {"sha": "1352d12189b63bd653970b91b2267ed11f525b28", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89c0e39613e381da45b6a774c6666dcc3e632a2/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=e89c0e39613e381da45b6a774c6666dcc3e632a2", "patch": "@@ -3,40 +3,43 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use xshell::{cmd, read_file};\n+use xshell::{cmd, pushd, pushenv, read_file};\n \n-use crate::{\n-    cargo_files,\n-    codegen::{self, Mode},\n-    project_root, run_rustfmt, rust_files,\n-};\n+use crate::{cargo_files, codegen, project_root, rust_files};\n \n #[test]\n fn generate_grammar() {\n-    codegen::generate_syntax(Mode::Ensure).unwrap()\n+    codegen::generate_syntax().unwrap()\n }\n \n #[test]\n fn generate_parser_tests() {\n-    codegen::generate_parser_tests(Mode::Ensure).unwrap()\n+    codegen::generate_parser_tests().unwrap()\n }\n \n #[test]\n fn generate_assists_tests() {\n-    codegen::generate_assists_tests(Mode::Ensure).unwrap();\n+    codegen::generate_assists_tests().unwrap();\n }\n \n /// This clones rustc repo, and so is not worth to keep up-to-date. We update\n /// manually by un-ignoring the test from time to time.\n #[test]\n #[ignore]\n fn generate_lint_completions() {\n-    codegen::generate_lint_completions(Mode::Ensure).unwrap()\n+    codegen::generate_lint_completions().unwrap()\n }\n \n #[test]\n fn check_code_formatting() {\n-    run_rustfmt(Mode::Ensure).unwrap()\n+    let _dir = pushd(project_root()).unwrap();\n+    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n+    crate::ensure_rustfmt().unwrap();\n+    let res = cmd!(\"cargo fmt -- --check\").run();\n+    if !res.is_ok() {\n+        let _ = cmd!(\"cargo fmt\").run();\n+    }\n+    res.unwrap()\n }\n \n #[test]"}]}