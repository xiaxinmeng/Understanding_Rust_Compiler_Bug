{"sha": "462c1c846b5488024c2e5fec6e1ed4700642b49e", "node_id": "C_kwDOAAsO6NoAKDQ2MmMxYzg0NmI1NDg4MDI0YzJlNWZlYzZlMWVkNDcwMDY0MmI0OWU", "commit": {"author": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-17T18:10:15Z"}, "committer": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-17T18:10:15Z"}, "message": "generate code for `subdiagnostic` fields in the second `match`", "tree": {"sha": "4cbe4cf0934312526d978243801220a3b23227d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cbe4cf0934312526d978243801220a3b23227d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462c1c846b5488024c2e5fec6e1ed4700642b49e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCYoPlBwAKCRAnUl7150IK\nUABbAP0Ye5J2XQYSlROT7BBnHwi0EogJqiAUVNVBTpXbP3mZGAD/RpO+BX8a2otv\nG0O5tH3aowHqnGV8cSDPDYI1Fz21GA8=\n=zZQB\n-----END PGP SIGNATURE-----", "payload": "tree 4cbe4cf0934312526d978243801220a3b23227d3\nparent 3655175a75f503c9855b6a73a9d3c83997354c1d\nauthor Christian Poveda <git@pvdrz.com> 1652811015 -0500\ncommitter Christian Poveda <git@pvdrz.com> 1652811015 -0500\n\ngenerate code for `subdiagnostic` fields in the second `match`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462c1c846b5488024c2e5fec6e1ed4700642b49e", "html_url": "https://github.com/rust-lang/rust/commit/462c1c846b5488024c2e5fec6e1ed4700642b49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462c1c846b5488024c2e5fec6e1ed4700642b49e/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3655175a75f503c9855b6a73a9d3c83997354c1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3655175a75f503c9855b6a73a9d3c83997354c1d", "html_url": "https://github.com/rust-lang/rust/commit/3655175a75f503c9855b6a73a9d3c83997354c1d"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "adb25e1fdef54ab68e0b211e6416d40161221591", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/462c1c846b5488024c2e5fec6e1ed4700642b49e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c1c846b5488024c2e5fec6e1ed4700642b49e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=462c1c846b5488024c2e5fec6e1ed4700642b49e", "patch": "@@ -71,31 +71,46 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     }\n                 };\n \n+                // Keep track of which fields are subdiagnostics\n+                let mut subdiagnostics = std::collections::HashSet::new();\n+\n                 // Generates calls to `span_label` and similar functions based on the attributes\n                 // on fields. Code for suggestions uses formatting machinery and the value of\n                 // other fields - because any given field can be referenced multiple times, it\n                 // should be accessed through a borrow. When passing fields to `set_arg` (which\n                 // happens below) for Fluent, we want to move the data, so that has to happen\n                 // in a separate pass over the fields.\n-                let attrs = structure.each(|field_binding| {\n-                    let field = field_binding.ast();\n-                    let result = field.attrs.iter().map(|attr| {\n-                        builder\n-                            .generate_field_attr_code(\n-                                attr,\n-                                FieldInfo {\n-                                    vis: &field.vis,\n-                                    binding: field_binding,\n-                                    ty: &field.ty,\n-                                    span: &field.span(),\n-                                },\n-                            )\n-                            .unwrap_or_else(|v| v.to_compile_error())\n+                let attrs = structure\n+                    .clone()\n+                    // Remove the fields that have a `subdiagnostic` attribute.\n+                    .filter(|field_binding| {\n+                        field_binding.ast().attrs.iter().all(|attr| {\n+                            \"subdiagnostic\" != attr.path.segments.last().unwrap().ident.to_string()\n+                                || {\n+                                    subdiagnostics.insert(field_binding.binding.clone());\n+                                    false\n+                                }\n+                        })\n+                    })\n+                    .each(|field_binding| {\n+                        let field = field_binding.ast();\n+                        let result = field.attrs.iter().map(|attr| {\n+                            builder\n+                                .generate_field_attr_code(\n+                                    attr,\n+                                    FieldInfo {\n+                                        vis: &field.vis,\n+                                        binding: field_binding,\n+                                        ty: &field.ty,\n+                                        span: &field.span(),\n+                                    },\n+                                )\n+                                .unwrap_or_else(|v| v.to_compile_error())\n+                        });\n+\n+                        quote! { #(#result);* }\n                     });\n \n-                    quote! { #(#result);* }\n-                });\n-\n                 // When generating `set_arg` calls, move data rather than borrow it to avoid\n                 // requiring clones - this must therefore be the last use of each field (for\n                 // example, any formatting machinery that might refer to a field should be\n@@ -107,7 +122,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     // need to be passed as an argument to the diagnostic. But when a field has no\n                     // attributes then it must be passed as an argument to the diagnostic so that\n                     // it can be referred to by Fluent messages.\n-                    if field.attrs.is_empty() {\n+                    let tokens = if field.attrs.is_empty() {\n                         let diag = &builder.diag;\n                         let ident = field_binding.ast().ident.as_ref().unwrap();\n                         quote! {\n@@ -118,6 +133,27 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                         }\n                     } else {\n                         quote! {}\n+                    };\n+                    // If this field had a subdiagnostic attribute, we generate the code here to\n+                    // avoid binding it twice.\n+                    if subdiagnostics.contains(&field_binding.binding) {\n+                        let result = field.attrs.iter().map(|attr| {\n+                            builder\n+                                .generate_field_attr_code(\n+                                    attr,\n+                                    FieldInfo {\n+                                        vis: &field.vis,\n+                                        binding: field_binding,\n+                                        ty: &field.ty,\n+                                        span: &field.span(),\n+                                    },\n+                                )\n+                                .unwrap_or_else(|v| v.to_compile_error())\n+                        });\n+\n+                        quote! { #(#result);* #tokens }\n+                    } else {\n+                        tokens\n                     }\n                 });\n \n@@ -359,6 +395,8 @@ impl SessionDiagnosticDeriveBuilder {\n         let (binding, needs_destructure) = match (name.as_str(), &inner_ty) {\n             // `primary_span` can accept a `Vec<Span>` so don't destructure that.\n             (\"primary_span\", FieldInnerTy::Vec(_)) => (quote! { #field_binding.clone() }, false),\n+            // `subdiagnostics` are not derefed because they are bound by value.\n+            (\"subdiagnostic\", _) => (quote! { #field_binding }, true),\n             _ => (quote! { *#field_binding }, true),\n         };\n "}, {"sha": "0c20bf49c4fb63380922b73102edfd7c392fec6c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/462c1c846b5488024c2e5fec6e1ed4700642b49e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462c1c846b5488024c2e5fec6e1ed4700642b49e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=462c1c846b5488024c2e5fec6e1ed4700642b49e", "patch": "@@ -254,23 +254,23 @@ struct AmbiguousPlus {\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0178\", slug = \"parser-maybe-recover-from-bad-type-plus\")]\n-struct BadTypePlus<'a> {\n+struct BadTypePlus {\n     pub ty: String,\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub sub: BadTypePlusSub<'a>,\n+    pub sub: BadTypePlusSub,\n }\n \n-#[derive(SessionSubdiagnostic, Clone, Copy)]\n-pub enum BadTypePlusSub<'a> {\n+#[derive(SessionSubdiagnostic)]\n+pub enum BadTypePlusSub {\n     #[suggestion(\n         slug = \"parser-add-paren\",\n         code = \"{sum_with_parens}\",\n         applicability = \"machine-applicable\"\n     )]\n     AddParen {\n-        sum_with_parens: &'a str,\n+        sum_with_parens: String,\n         #[primary_span]\n         span: Span,\n     },\n@@ -1289,11 +1289,9 @@ impl<'a> Parser<'a> {\n         let bounds = self.parse_generic_bounds(None)?;\n         let sum_span = ty.span.to(self.prev_token.span);\n \n-        let sum_with_parens: String;\n-\n         let sub = match ty.kind {\n             TyKind::Rptr(ref lifetime, ref mut_ty) => {\n-                sum_with_parens = pprust::to_string(|s| {\n+                let sum_with_parens = pprust::to_string(|s| {\n                     s.s.word(\"&\");\n                     s.print_opt_lifetime(lifetime);\n                     s.print_mutability(mut_ty.mutbl, false);\n@@ -1303,7 +1301,7 @@ impl<'a> Parser<'a> {\n                     s.pclose()\n                 });\n \n-                BadTypePlusSub::AddParen { sum_with_parens: &sum_with_parens, span: sum_span }\n+                BadTypePlusSub::AddParen { sum_with_parens, span: sum_span }\n             }\n             TyKind::Ptr(..) | TyKind::BareFn(..) => BadTypePlusSub::ForgotParen { span: sum_span },\n             _ => BadTypePlusSub::ExpectPath { span: sum_span },"}]}