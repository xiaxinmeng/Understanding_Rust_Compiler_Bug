{"sha": "c836ff46215b743c0f681d3e4d799cde1832cde3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MzZmZjQ2MjE1Yjc0M2MwZjY4MWQzZTRkNzk5Y2RlMTgzMmNkZTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-13T21:39:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-16T02:45:00Z"}, "message": "std: Impl Deref/DerefMut for a borrowed task", "tree": {"sha": "d2d65dfca8f0683102c85ef3a287be374b1cf647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d65dfca8f0683102c85ef3a287be374b1cf647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c836ff46215b743c0f681d3e4d799cde1832cde3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c836ff46215b743c0f681d3e4d799cde1832cde3", "html_url": "https://github.com/rust-lang/rust/commit/c836ff46215b743c0f681d3e4d799cde1832cde3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c836ff46215b743c0f681d3e4d799cde1832cde3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326f938730c1eaae48ed333907dce2cc92dc9aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/326f938730c1eaae48ed333907dce2cc92dc9aab", "html_url": "https://github.com/rust-lang/rust/commit/326f938730c1eaae48ed333907dce2cc92dc9aab"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "34a5788439839c29431dd1ac3e27976890ab3acd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=c836ff46215b743c0f681d3e4d799cde1832cde3", "patch": "@@ -160,7 +160,7 @@ fn reset_helper(w: ~Writer:Send,\n {\n     let mut t = Local::borrow(None::<Task>);\n     // Be sure to flush any pending output from the writer\n-    match f(t.get(), w) {\n+    match f(&mut *t, w) {\n         Some(mut w) => {\n             drop(t);\n             // FIXME: is failing right here?\n@@ -230,9 +230,7 @@ fn with_task_stdout(f: |&mut Writer| -> IoResult<()> ) {\n             // To protect against this, we do a little dance in which we\n             // temporarily take the task, swap the handles, put the task in TLS,\n             // and only then drop the previous handle.\n-            let mut t = Local::borrow(None::<Task>);\n-            let prev = replace(&mut t.get().stdout, my_stdout);\n-            drop(t);\n+            let prev = replace(&mut Local::borrow(None::<Task>).stdout, my_stdout);\n             drop(prev);\n             ret\n         }"}, {"sha": "caf0d9028c5da1211db6b309ed101b54f82edafc", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=c836ff46215b743c0f681d3e4d799cde1832cde3", "patch": "@@ -319,8 +319,7 @@ pub unsafe fn local_free(ptr: *u8) {\n }\n \n pub fn live_allocs() -> *mut Box {\n-    let mut task = Local::borrow(None::<Task>);\n-    task.get().heap.live_allocs\n+    Local::borrow(None::<Task>).heap.live_allocs\n }\n \n #[cfg(test)]"}, {"sha": "6b61af1d9a2eb2eb5ab7ac6c6af01f3c06bc8b50", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=c836ff46215b743c0f681d3e4d799cde1832cde3", "patch": "@@ -18,7 +18,7 @@\n #![allow(dead_code)]\n \n use cast;\n-use ops::Drop;\n+use ops::{Drop, Deref, DerefMut};\n use ptr::RawPtr;\n \n #[cfg(windows)]               // mingw-w32 doesn't like thread_local things\n@@ -48,13 +48,15 @@ impl<T> Drop for Borrowed<T> {\n     }\n }\n \n-impl<T> Borrowed<T> {\n-    pub fn get<'a>(&'a mut self) -> &'a mut T {\n-        unsafe {\n-            let val_ptr: &mut ~T = cast::transmute(&mut self.val);\n-            let val_ptr: &'a mut T = *val_ptr;\n-            val_ptr\n-        }\n+impl<T> Deref<T> for Borrowed<T> {\n+    fn deref<'a>(&'a self) -> &'a T {\n+        unsafe { &*(self.val as *T) }\n+    }\n+}\n+\n+impl<T> DerefMut<T> for Borrowed<T> {\n+    fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n+        unsafe { &mut *(self.val as *mut T) }\n     }\n }\n "}, {"sha": "a3664b45a4178ab4465f9b8117b6ba494f26110c", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=c836ff46215b743c0f681d3e4d799cde1832cde3", "patch": "@@ -127,8 +127,8 @@ impl Task {\n                 #[allow(unused_must_use)]\n                 fn close_outputs() {\n                     let mut task = Local::borrow(None::<Task>);\n-                    let stderr = task.get().stderr.take();\n-                    let stdout = task.get().stdout.take();\n+                    let stderr = task.stderr.take();\n+                    let stdout = task.stdout.take();\n                     drop(task);\n                     match stdout { Some(mut w) => { w.flush(); }, None => {} }\n                     match stderr { Some(mut w) => { w.flush(); }, None => {} }\n@@ -159,8 +159,7 @@ impl Task {\n                 // be intertwined, and miraculously work for now...\n                 let mut task = Local::borrow(None::<Task>);\n                 let storage_map = {\n-                    let task = task.get();\n-                    let LocalStorage(ref mut optmap) = task.storage;\n+                    let &LocalStorage(ref mut optmap) = &mut task.storage;\n                     optmap.take()\n                 };\n                 drop(task);\n@@ -332,8 +331,7 @@ impl BlockedTask {\n     }\n \n     /// Converts one blocked task handle to a list of many handles to the same.\n-    pub fn make_selectable(self, num_handles: uint) -> Take<BlockedTasks>\n-    {\n+    pub fn make_selectable(self, num_handles: uint) -> Take<BlockedTasks> {\n         let arc = match self {\n             Owned(task) => {\n                 let flag = unsafe { AtomicUint::new(cast::transmute(task)) };"}, {"sha": "df627809ea02919af555c5fd881c8489882bd6cb", "filename": "src/libstd/task.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c836ff46215b743c0f681d3e4d799cde1832cde3/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=c836ff46215b743c0f681d3e4d799cde1832cde3", "patch": "@@ -257,8 +257,8 @@ pub fn try<T:Send>(f: proc():Send -> T) -> Result<T, ~Any:Send> {\n pub fn with_task_name<U>(blk: |Option<&str>| -> U) -> U {\n     use rt::task::Task;\n \n-    let mut task = Local::borrow(None::<Task>);\n-    match task.get().name {\n+    let task = Local::borrow(None::<Task>);\n+    match task.name {\n         Some(ref name) => blk(Some(name.as_slice())),\n         None => blk(None)\n     }\n@@ -276,11 +276,8 @@ pub fn deschedule() {\n \n pub fn failing() -> bool {\n     //! True if the running task has failed\n-\n     use rt::task::Task;\n-\n-    let mut local = Local::borrow(None::<Task>);\n-    local.get().unwinder.unwinding()\n+    Local::borrow(None::<Task>).unwinder.unwinding()\n }\n \n // The following 8 tests test the following 2^3 combinations:"}]}