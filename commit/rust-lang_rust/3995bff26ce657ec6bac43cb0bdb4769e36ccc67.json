{"sha": "3995bff26ce657ec6bac43cb0bdb4769e36ccc67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OTViZmYyNmNlNjU3ZWM2YmFjNDNjYjBiZGI0NzY5ZTM2Y2NjNjc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-21T21:24:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-21T21:24:23Z"}, "message": "Add another PartialEq example", "tree": {"sha": "449e20c16d783fd2f90cb1d3acfe985f392c6b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449e20c16d783fd2f90cb1d3acfe985f392c6b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3995bff26ce657ec6bac43cb0bdb4769e36ccc67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3995bff26ce657ec6bac43cb0bdb4769e36ccc67", "html_url": "https://github.com/rust-lang/rust/commit/3995bff26ce657ec6bac43cb0bdb4769e36ccc67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3995bff26ce657ec6bac43cb0bdb4769e36ccc67/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "html_url": "https://github.com/rust-lang/rust/commit/bf1e461173e3936e4014cc951dfbdd7d9ec9190b"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "ef7d83a0993da134e3d670408c7b0008e59ee7b1", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3995bff26ce657ec6bac43cb0bdb4769e36ccc67/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3995bff26ce657ec6bac43cb0bdb4769e36ccc67/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=3995bff26ce657ec6bac43cb0bdb4769e36ccc67", "patch": "@@ -75,7 +75,12 @@ use self::Ordering::*;\n /// the same book if their ISBN matches, even if the formats differ:\n ///\n /// ```\n-/// enum BookFormat { Paperback, Hardback, Ebook }\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n /// struct Book {\n ///     isbn: i32,\n ///     format: BookFormat,\n@@ -95,6 +100,84 @@ use self::Ordering::*;\n /// assert!(b1 != b3);\n /// ```\n ///\n+/// ## How can I compare two different types?\n+///\n+/// The type you can compare with is controlled by `PartialEq`'s type parameter.\n+/// For example, let's tweak our previous code a bit:\n+///\n+/// ```\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+///\n+/// impl PartialEq<BookFormat> for Book {\n+///     fn eq(&self, other: &BookFormat) -> bool {\n+///         match (&self.format, other) {\n+///            (BookFormat::Paperback, BookFormat::Paperback) => true,\n+///            (BookFormat::Hardback,  BookFormat::Hardback)  => true,\n+///            (BookFormat::Ebook,     BookFormat::Ebook)     => true,\n+///            (_, _) => false,\n+///         }\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+///\n+/// assert!(b1 == BookFormat::Paperback);\n+/// assert!(b1 != BookFormat::Ebook);\n+/// ```\n+///\n+/// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n+/// we've changed what type we can use on the right side of the `==` operator.\n+/// This lets us use it in the `assert!` statements at the bottom.\n+///\n+/// You can also combine these implementations to let the `==` operator work with\n+/// two different types:\n+///\n+/// ```\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+///\n+/// impl PartialEq<BookFormat> for Book {\n+///     fn eq(&self, other: &BookFormat) -> bool {\n+///         match (&self.format, other) {\n+///            (&BookFormat::Paperback, &BookFormat::Paperback) => true,\n+///            (&BookFormat::Hardback,  &BookFormat::Hardback)  => true,\n+///            (&BookFormat::Ebook,     &BookFormat::Ebook)     => true,\n+///            (_, _) => false,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Book {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         self.isbn == other.isbn\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n+///\n+/// assert!(b1 == BookFormat::Paperback);\n+/// assert!(b1 != BookFormat::Ebook);\n+/// assert!(b1 == b2);\n+/// ```\n+///\n /// # Examples\n ///\n /// ```"}]}