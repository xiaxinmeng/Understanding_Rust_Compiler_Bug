{"sha": "2f36f47dab59886f2f82252f427c4a3d3ee2c83b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzZmNDdkYWI1OTg4NmYyZjgyMjUyZjQyN2M0YTNkM2VlMmM4M2I=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-07T15:20:37Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T21:41:13Z"}, "message": "Do a cleanup/legibility pass", "tree": {"sha": "0c6678c5530d5f0c72c75915b87d1659ca479a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6678c5530d5f0c72c75915b87d1659ca479a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f36f47dab59886f2f82252f427c4a3d3ee2c83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f36f47dab59886f2f82252f427c4a3d3ee2c83b", "html_url": "https://github.com/rust-lang/rust/commit/2f36f47dab59886f2f82252f427c4a3d3ee2c83b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f36f47dab59886f2f82252f427c4a3d3ee2c83b/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1df81f3d659926078b73dfb7cc246e13ef308429", "url": "https://api.github.com/repos/rust-lang/rust/commits/1df81f3d659926078b73dfb7cc246e13ef308429", "html_url": "https://github.com/rust-lang/rust/commit/1df81f3d659926078b73dfb7cc246e13ef308429"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "567fc9586a9c66171a5089e11629851e6813d8a3", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2f36f47dab59886f2f82252f427c4a3d3ee2c83b/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36f47dab59886f2f82252f427c4a3d3ee2c83b/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=2f36f47dab59886f2f82252f427c4a3d3ee2c83b", "patch": "@@ -44,31 +44,35 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n     let impl_node = node.ancestors().find_map(ast::ImplBlock::cast)?;\n     let impl_item_list = impl_node.item_list()?;\n     // Don't offer the assist when cursor is at the end, outside the block itself.\n+    let cursor_range = TextRange::from_to(node.range().end(), node.range().end());\n     if node.range().end() == impl_node.syntax().range().end() {\n         return None;\n     }\n \n     let trait_def = {\n-        let position = FilePosition { file_id: ctx.frange.file_id, offset: node.range().end() };\n+        let position = FilePosition { file_id: ctx.frange.file_id, offset: cursor_range.end() };\n         let resolver = hir::source_binder::resolver_for_position(ctx.db, position);\n \n         resolve_target_trait_def(ctx.db, &resolver, impl_node)?\n     };\n \n-    let fn_def_opt = |kind| if let ImplItemKind::FnDef(def) = kind { Some(def) } else { None };\n-    let def_name = |def| -> Option<&SmolStr> { FnDef::name(def).map(ast::Name::text) };\n+    let missing_fns: Vec<_> = {\n+        let fn_def_opt = |kind| if let ImplItemKind::FnDef(def) = kind { Some(def) } else { None };\n+        let def_name = |def| -> Option<&SmolStr> { FnDef::name(def).map(ast::Name::text) };\n \n-    let trait_items = trait_def.syntax().descendants().find_map(ast::ItemList::cast)?.impl_items();\n-    let impl_items = impl_item_list.impl_items();\n+        let trait_items =\n+            trait_def.syntax().descendants().find_map(ast::ItemList::cast)?.impl_items();\n+        let impl_items = impl_item_list.impl_items();\n \n-    let trait_fns = trait_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n-    let impl_fns = impl_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n+        let trait_fns = trait_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n+        let impl_fns = impl_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n \n-    let missing_fns: Vec<_> = trait_fns\n-        .into_iter()\n-        .filter(|t| def_name(t).is_some())\n-        .filter(|t| impl_fns.iter().all(|i| def_name(i) != def_name(t)))\n-        .collect();\n+        trait_fns\n+            .into_iter()\n+            .filter(|t| def_name(t).is_some())\n+            .filter(|t| impl_fns.iter().all(|i| def_name(i) != def_name(t)))\n+            .collect()\n+    };\n     if missing_fns.is_empty() {\n         return None;\n     }\n@@ -89,21 +93,17 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n             )\n         };\n \n-        let func_bodies = missing_fns.into_iter().map(build_func_body).join(\"\\n\");\n-        let func_bodies = String::from(\"\\n\") + &func_bodies;\n-        let trailing_whitespace = format!(\"\\n{}\", parent_indent);\n-        let func_bodies = reindent(&func_bodies, &indent) + &trailing_whitespace;\n-\n         let changed_range = {\n             let last_whitespace = impl_item_list.syntax().children();\n             let last_whitespace = last_whitespace.filter_map(ast::Whitespace::cast).last();\n-            let last_whitespace = last_whitespace.map(|w| w.syntax());\n \n-            let cursor_range = TextRange::from_to(node.range().end(), node.range().end());\n-\n-            last_whitespace.map(|x| x.range()).unwrap_or(cursor_range)\n+            last_whitespace.map(|w| w.syntax().range()).unwrap_or(cursor_range)\n         };\n \n+        let func_bodies = format!(\"\\n{}\", missing_fns.into_iter().map(build_func_body).join(\"\\n\"));\n+        let trailing_whitespace = format!(\"\\n{}\", parent_indent);\n+        let func_bodies = reindent(&func_bodies, &indent) + &trailing_whitespace;\n+\n         let replaced_text_range = TextUnit::of_str(&func_bodies);\n \n         edit.replace(changed_range, func_bodies);"}]}