{"sha": "8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmY2VlZTZjODhlZTU4YTUwNmI5ZDJkOWY1ZjA0YzFkYzQyMzIxNGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T01:28:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T12:18:12Z"}, "message": "test: De-[mut] (remove all mutable arrays from) the tests. rs=demuting", "tree": {"sha": "0a679d6d68a36e095d6ab929b79ad393c3abd8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a679d6d68a36e095d6ab929b79ad393c3abd8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "html_url": "https://github.com/rust-lang/rust/commit/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "url": "https://api.github.com/repos/rust-lang/rust/commits/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "html_url": "https://github.com/rust-lang/rust/commit/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2"}], "stats": {"total": 281, "additions": 25, "deletions": 256}, "files": [{"sha": "17c7ff1bb6037bfc249e9db83cea547d4760c47b", "filename": "src/test/compile-fail/assign-super.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-super.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let mut x: ~[mut int] = ~[mut 3];\n-    let y: ~[int] = ~[3];\n-    x = y; //~ ERROR values differ in mutability\n-}"}, {"sha": "ded47fc9f7fe268c49fcd0f1a283cad887ab63c9", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -11,7 +11,7 @@\n type point = { x: int, y: int };\n \n fn a() {\n-    let mut p = ~[mut 1];\n+    let mut p = ~[1];\n \n     // Create an immutable pointer into p's contents:\n     let _q: &int = &p[0]; //~ NOTE loan of mutable vec content granted here\n@@ -25,7 +25,7 @@ fn b() {\n     // here we alias the mutable vector into an imm slice and try to\n     // modify the original:\n \n-    let mut p = ~[mut 1];\n+    let mut p = ~[1];\n \n     do borrow(p) { //~ NOTE loan of mutable vec content granted here\n         p[0] = 5; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n@@ -35,7 +35,7 @@ fn b() {\n fn c() {\n     // Legal because the scope of the borrow does not include the\n     // modification:\n-    let mut p = ~[mut 1];\n+    let mut p = ~[1];\n     borrow(p, ||{});\n     p[0] = 5;\n }"}, {"sha": "8457fce255ea319bfcadae50c5fb06edd6276f66", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -17,13 +17,13 @@ fn takes_imm_elt(_v: &int, f: fn()) {\n }\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n-    let v = ~[mut 1, 2, 3];\n+    let mut v = ~[1, 2, 3];\n     do takes_imm_elt(&v[0]) {\n     }\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n-    let v = ~[mut 1, 2, 3];\n+    let mut v = ~[1, 2, 3];\n     do takes_imm_elt(&v[0]) { //~ NOTE loan of mutable vec content granted here\n         v[1] = 4; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n     }\n@@ -34,7 +34,7 @@ fn takes_const_elt(_v: &const int, f: fn()) {\n }\n \n fn has_mut_vec_and_tries_to_change_it() {\n-    let v = ~[mut 1, 2, 3];\n+    let mut v = ~[1, 2, 3];\n     do takes_const_elt(&const v[0]) {\n         v[1] = 4;\n     }"}, {"sha": "bc0340983ae3491348db9d9806f51d1d5e50fbb6", "filename": "src/test/compile-fail/borrowck-mut-slice-of-imm-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn write(v: &[mut int]) {\n+fn write(v: &mut [int]) {\n     v[0] += 1;\n }\n "}, {"sha": "43feb65c8b96b9492e4ab595c0405033dc2d77f1", "filename": "src/test/compile-fail/borrowck-mut-vec-as-imm-slice-bad.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn want_slice(v: &[int]) -> int {\n-    let mut sum = 0;\n-    for vec::each(v) |i| { sum += *i; }\n-    return sum;\n-}\n-\n-fn has_mut_vec(+v: @~[mut int]) -> int {\n-    want_slice(*v) //~ ERROR illegal borrow unless pure\n-        //~^ NOTE impure due to access to impure function\n-}\n-\n-fn main() {\n-    assert has_mut_vec(@~[mut 1, 2, 3]) == 6;\n-}"}, {"sha": "16b48aedb0c7fedc3d4d9949ed4a26b7890563f4", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let a = [mut 1, 2, 3, 4];\n+    let mut a = [1, 2, 3, 4];\n     let _ = match a {\n         [1, 2, ..tail] => tail,\n         _ => core::util::unreachable()"}, {"sha": "88c76fb31a1ff86add6c2cb20cda0b0f0b369b21", "filename": "src/test/compile-fail/issue-2969.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -12,7 +12,7 @@\n fn main()\n {\n // See #2969 -- error message should be improved\n-   let mut x = [mut 1, 2, 4];\n+   let mut x = [1, 2, 4];\n    let v : &int = &x[2];\n    x[2] = 6;\n    assert *v == 6;"}, {"sha": "443fae619ba7b0186785fbd80edeadcc0c938d04", "filename": "src/test/compile-fail/issue-3243.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-fn function() -> &[mut int] {\n-    let mut x: &static/[mut int] = &[mut 1,2,3];\n+fn function() -> &mut [int] {\n+    let mut x: &static/mut [int] = &[1,2,3];\n     x[0] = 12345;\n     x //~ ERROR bad\n }"}, {"sha": "5c71ae38a64c019525e4f882a03001eff384dc80", "filename": "src/test/compile-fail/lub-in-args.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -11,8 +11,6 @@\n fn two_args<T>(x: T, y: T) { }\n \n fn main() {\n-    let x: ~[mut int] = ~[mut 3];\n-    let y: ~[int] = ~[3];\n     let a: @mut int = @mut 3;\n     let b: @int = @3;\n \n@@ -22,6 +20,5 @@ fn main() {\n     // shortcoming of the current inference algorithm.  These errors\n     // are *not* desirable.\n \n-    two_args(x, y); //~ ERROR (values differ in mutability)\n     two_args(a, b); //~ ERROR (values differ in mutability)\n }"}, {"sha": "316c832f0119e574f58001e2924f459f90086188", "filename": "src/test/compile-fail/mutable-huh-variance-box.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: mismatched types\n-\n-fn main() {\n-    let v = @mut ~[0];\n-\n-    fn f(&&v: @mut ~[const int]) {\n-        *v = ~[mut 3]\n-    }\n-\n-    f(v);\n-}"}, {"sha": "51d5a6177f6aa5aa70cb70ab22beab512a4fafda", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: mismatched types\n-\n-fn main() {\n-    let v = @[mut @mut @mut @[0]];\n-\n-    fn f(&&v: @[mut @mut @mut @[const int]]) {\n-    }\n-\n-    f(v);\n-}"}, {"sha": "dba6f9ae3fa0fb5df1db58067dc842f0e5086a7b", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: mismatched types\n-\n-extern mod std;\n-\n-fn main() {\n-    let mut a = ~[0];\n-    let v: *mut ~[int] = &mut a;\n-\n-    fn f(&&v: *mut ~[const int]) {\n-        unsafe {\n-            *v = ~[mut 3]\n-        }\n-    }\n-\n-    f(v);\n-}"}, {"sha": "c3f4636f898b19f892886a9184b4713db9c1ea44", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    // Note: explicit type annot is required here\n-    // because otherwise the inference gets smart\n-    // and assigns a type of ~[mut ~[const int]].\n-    let v: ~[mut ~[int]] = ~[mut ~[0]];\n-\n-    fn f(&&v: ~[mut ~[const int]]) {\n-        v[0] = ~[mut 3]\n-    }\n-\n-    f(v); //~ ERROR (values differ in mutability)\n-}"}, {"sha": "aeb06324341f46eae6c6b7cfd7debb335bb0c12b", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    // Note: explicit type annot is required here\n-    // because otherwise the inference gets smart\n-    // and assigns a type of ~[mut ~[const int]].\n-    let v: ~[mut ~[mut int]] = ~[mut ~[mut 0]];\n-\n-    fn f(&&v: ~[mut ~[const int]]) {\n-        v[0] = ~[3]\n-    }\n-\n-    f(v); //~ ERROR (values differ in mutability)\n-}"}, {"sha": "edc66536e9bac2f271b3701c55ff324fc6dd9ee5", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    // Note: explicit type annot is required here\n-    // because otherwise the inference gets smart\n-    // and assigns a type of ~[mut ~[const int]].\n-    let v: ~[mut ~[mut ~[int]]] = ~[mut ~[mut ~[0]]];\n-\n-    fn f(&&v: ~[mut ~[mut ~[const int]]]) {\n-        v[0][1] = ~[mut 3]\n-    }\n-\n-    f(v); //~ ERROR (values differ in mutability)\n-}"}, {"sha": "e0980826a2a599f2057fa387559524c238354bf2", "filename": "src/test/compile-fail/mutable-huh-variance-vec4.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bdc349303c1bd55ebba4e2dd5f7f51e087dad2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs?ref=96bdc349303c1bd55ebba4e2dd5f7f51e087dad2", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-\n-    // Note: here we do not have any type annotations\n-    // but we do express conflicting requirements:\n-\n-    let v = ~[mut ~[0]];\n-    let w = ~[mut ~[mut 0]];\n-    let x = ~[mut ~[mut 0]];\n-\n-    fn f(&&v: ~[mut ~[int]]) {\n-        v[0] = ~[3]\n-    }\n-\n-    fn g(&&v: ~[const ~[const int]]) {\n-    }\n-\n-    fn h(&&v: ~[mut ~[mut int]]) {\n-        v[0] = ~[mut 3]\n-    }\n-\n-    fn i(&&v: ~[mut ~[const int]]) {\n-        v[0] = ~[mut 3]\n-    }\n-\n-    fn j(&&v: ~[~[const int]]) {\n-    }\n-\n-    f(v);\n-    g(v);\n-    h(v); //~ ERROR (values differ in mutability)\n-    i(v); //~ ERROR (values differ in mutability)\n-    j(v); //~ ERROR (values differ in mutability)\n-\n-    f(w); //~ ERROR (values differ in mutability)\n-    g(w);\n-    h(w);\n-    i(w); //~ ERROR (values differ in mutability)\n-    j(w); //~ ERROR (values differ in mutability)\n-\n-    // Note that without adding f() or h() to the mix, it is valid for\n-    // x to have the type ~[mut ~[const int]], and thus we can safely\n-    // call g() and i() but not j():\n-    g(x);\n-    i(x);\n-    j(x); //~ ERROR (values differ in mutability)\n-}"}, {"sha": "4b637b0195c31c7bc5eac21eef4f7c64aace4547", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant {\n-    f: @[mut &int]\n+    f: @mut [&int]\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "0f51d34fc2ff2a284c2da3e8e95625b3be4243f2", "filename": "src/test/compile-fail/vec-add.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fceee6c88ee58a506b9d2d9f5f04c1dc423214c/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-add.rs?ref=8fceee6c88ee58a506b9d2d9f5f04c1dc423214c", "patch": "@@ -14,7 +14,7 @@\n // the right hand side in all cases. We are getting compiler errors\n // about this now, so I'm xfailing the test for now. -eholk\n \n-fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n+fn add(i: ~[int], mut m: ~[int], c: ~[const int]) {\n \n     // Check that:\n     //  (1) vectors of any two mutabilities can be added\n@@ -24,9 +24,9 @@ fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n        m + ~[3],\n        ~[3]);\n \n-   add(i + ~[mut 3],\n-       m + ~[mut 3],\n-       ~[mut 3]);\n+   add(i + ~[3],\n+       m + ~[3],\n+       ~[3]);\n \n    add(i + i,\n        m + i,\n@@ -54,19 +54,19 @@ fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n                 //~^ mismatched types\n        ~[3]);\n \n-   add(m + ~[mut 3], //~ ERROR mismatched types\n-       m + ~[mut 3],\n-       m + ~[mut 3]);\n+   add(m + ~[3], //~ ERROR mismatched types\n+       m + ~[3],\n+       m + ~[3]);\n \n-   add(i + ~[mut 3],\n-       i + ~[mut 3], //~ ERROR mismatched types\n-       i + ~[mut 3]);\n+   add(i + ~[3],\n+       i + ~[3], //~ ERROR mismatched types\n+       i + ~[3]);\n \n-   add(c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n+   add(c + ~[3], //~ ERROR binary operation + cannot be applied\n                     //~^ mismatched types\n-       c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n+       c + ~[3], //~ ERROR binary operation + cannot be applied\n                     //~^ mismatched types\n-       ~[mut 3]);\n+       ~[3]);\n \n    add(m + i, //~ ERROR mismatched types\n        m + i,"}]}