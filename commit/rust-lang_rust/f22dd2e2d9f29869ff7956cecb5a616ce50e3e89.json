{"sha": "f22dd2e2d9f29869ff7956cecb5a616ce50e3e89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMmRkMmUyZDlmMjk4NjlmZjc5NTZjZWNiNWE2MTZjZTUwZTNlODk=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-18T14:07:57Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:26:41Z"}, "message": "Factor write_ty out of field/indexing methods", "tree": {"sha": "69004ae4a05cbb1879ba4d4a23cb3aa1768661e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69004ae4a05cbb1879ba4d4a23cb3aa1768661e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89", "html_url": "https://github.com/rust-lang/rust/commit/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b39b5e65ac66f85bc6be749593690417d0373e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b39b5e65ac66f85bc6be749593690417d0373e", "html_url": "https://github.com/rust-lang/rust/commit/91b39b5e65ac66f85bc6be749593690417d0373e"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "30f4202fccbf09637eaf33d90c9ae287bb240994", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f22dd2e2d9f29869ff7956cecb5a616ce50e3e89", "patch": "@@ -2942,9 +2942,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         if field.vis.is_accessible_from(self.body_id, &self.tcx().map) {\n                             autoderef.finalize(lvalue_pref, Some(base));\n-                            let ty = self.write_ty(expr.id, field_ty);\n                             self.write_autoderef_adjustment(base.id, autoderefs);\n-                            return ty;\n+                            return field_ty;\n                         }\n                         private_candidate = Some((base_def.did, field_ty));\n                     }\n@@ -2956,7 +2955,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some((did, field_ty)) = private_candidate {\n             let struct_path = self.tcx().item_path_str(did);\n-            let ty = self.write_ty(expr.id, field_ty);\n             let msg = format!(\"field `{}` of struct `{}` is private\", field.node, struct_path);\n             let mut err = self.tcx().sess.struct_span_err(expr.span, &msg);\n             // Also check if an accessible method exists, which is often what is meant.\n@@ -2965,9 +2963,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   field.node));\n             }\n             err.emit();\n-            ty\n+            field_ty\n         } else if field.node == keywords::Invalid.name() {\n-            self.write_error(expr.id)\n+            self.tcx().types.err\n         } else if self.method_exists(field.span, field.node, expr_t, expr.id, true) {\n             self.type_error_struct(field.span, |actual| {\n                 format!(\"attempted to take value of method `{}` on type \\\n@@ -2976,7 +2974,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 .help(\"maybe a `()` to call it is missing? \\\n                        If not, try an anonymous function\")\n                 .emit();\n-            self.write_error(expr.id)\n+            self.tcx().types.err\n         } else {\n             let mut err = self.type_error_struct(expr.span, |actual| {\n                 format!(\"attempted access of field `{}` on type `{}`, \\\n@@ -2994,7 +2992,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 _ => {}\n             }\n             err.emit();\n-            self.write_error(expr.id)\n+            self.tcx().types.err\n         }\n     }\n \n@@ -3059,9 +3057,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             if let Some(field_ty) = field {\n                 autoderef.finalize(lvalue_pref, Some(base));\n-                let ty = self.write_ty(expr.id, field_ty);\n                 self.write_autoderef_adjustment(base.id, autoderefs);\n-                return ty;\n+                return field_ty;\n             }\n         }\n         autoderef.unambiguous_final_ty();\n@@ -3070,7 +3067,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let struct_path = self.tcx().item_path_str(did);\n             let msg = format!(\"field `{}` of struct `{}` is private\", idx.node, struct_path);\n             self.tcx().sess.span_err(expr.span, &msg);\n-            return self.write_ty(expr.id, field_ty)\n+            return field_ty;\n         }\n \n         self.type_error_message(\n@@ -3090,7 +3087,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             },\n             expr_t);\n \n-        self.write_error(expr.id)\n+        self.tcx().types.err\n     }\n \n     fn report_unknown_field(&self,\n@@ -3698,25 +3695,27 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty\n           }\n           hir::ExprField(ref base, ref field) => {\n-            self.check_field(expr, lvalue_pref, &base, field)\n+            let ty = self.check_field(expr, lvalue_pref, &base, field);\n+            self.write_ty(id, ty)\n           }\n           hir::ExprTupField(ref base, idx) => {\n-            self.check_tup_field(expr, lvalue_pref, &base, idx)\n+            let ty = self.check_tup_field(expr, lvalue_pref, &base, idx);\n+            self.write_ty(id, ty)\n           }\n           hir::ExprIndex(ref base, ref idx) => {\n               let base_t = self.check_expr_with_lvalue_pref(&base, lvalue_pref);\n               let idx_t = self.check_expr(&idx);\n \n-              if base_t.references_error() {\n-                  self.write_ty(id, base_t)\n+              let ty = if base_t.references_error() {\n+                  base_t\n               } else if idx_t.references_error() {\n-                  self.write_ty(id, idx_t)\n+                  idx_t\n               } else {\n                   let base_t = self.structurally_resolved_type(expr.span, base_t);\n                   match self.lookup_indexing(expr, base, base_t, idx_t, lvalue_pref) {\n                       Some((index_ty, element_ty)) => {\n                           self.demand_eqtype(expr.span, index_ty, idx_t);\n-                          self.write_ty(id, element_ty)\n+                          element_ty\n                       }\n                       None => {\n                           self.check_expr_has_type(&idx, self.tcx.types.err);\n@@ -3752,10 +3751,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               }\n                           }\n                           err.emit();\n-                          self.write_ty(id, self.tcx().types.err)\n+                          self.tcx().types.err\n                       }\n                   }\n-              }\n+              };\n+              self.write_ty(id, ty)\n            }\n         };\n "}]}