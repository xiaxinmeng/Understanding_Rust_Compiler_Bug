{"sha": "8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODJkMTU1MWVlMDlmYWE1ZDQ2YTU4YzE3YzQwYzI1MTVkM2YzYjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-22T16:02:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-22T16:06:30Z"}, "message": "Extend add impl", "tree": {"sha": "bdff5ca6dc2d4be1ef0aca616ba920d8ff2933e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdff5ca6dc2d4be1ef0aca616ba920d8ff2933e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "html_url": "https://github.com/rust-lang/rust/commit/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147578f0fe28dee9ba3bfe3ed8805ffe3a525611", "url": "https://api.github.com/repos/rust-lang/rust/commits/147578f0fe28dee9ba3bfe3ed8805ffe3a525611", "html_url": "https://github.com/rust-lang/rust/commit/147578f0fe28dee9ba3bfe3ed8805ffe3a525611"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "6c41923ddd7fe1937c56767cc7ec03be8e0f88a6", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "patch": "@@ -1,4 +1,7 @@\n-use {TextUnit, EditBuilder, Edit};\n+use std::{\n+    fmt::{self, Write},\n+};\n+\n use libsyntax2::{\n     ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner, ParsedFile},\n     SyntaxKind::COMMA,\n@@ -9,6 +12,8 @@ use libsyntax2::{\n     },\n };\n \n+use {TextUnit, EditBuilder, Edit};\n+\n pub struct ActionResult {\n     pub edit: Edit,\n     pub cursor_position: Option<TextUnit>,\n@@ -63,27 +68,31 @@ pub fn add_impl<'a>(file: &'a ParsedFile, offset: TextUnit) -> Option<impl FnOnc\n     let name = nominal.name()?;\n \n     Some(move || {\n-        // let type_params = nominal.type_param_list();\n-        // let type_args = match type_params {\n-        //     None => String::new(),\n-        //     Some(params) => {\n-        //         let mut buf = String::new();\n-        //     }\n-        // };\n+        let type_params = nominal.type_param_list();\n         let mut edit = EditBuilder::new();\n         let start_offset = nominal.syntax().range().end();\n-        edit.insert(\n-            start_offset,\n-            format!(\n-                \"\\n\\nimpl {} {{\\n\\n}}\",\n-                name.text(),\n-            )\n-        );\n+        let mut buf = String::new();\n+        buf.push_str(\"\\n\\nimpl\");\n+        if let Some(type_params) = type_params {\n+            buf.push_display(&type_params.syntax().text());\n+        }\n+        buf.push_str(\" \");\n+        buf.push_str(name.text().as_str());\n+        if let Some(type_params) = type_params {\n+            comma_list(\n+                &mut buf, \"<\", \">\",\n+                type_params.type_params()\n+                    .filter_map(|it| it.name())\n+                    .map(|it| it.text())\n+            );\n+        }\n+        buf.push_str(\" {\\n\");\n+        let offset = start_offset + TextUnit::of_str(&buf);\n+        buf.push_str(\"\\n}\");\n+        edit.insert(start_offset, buf);\n         ActionResult {\n             edit: edit.finish(),\n-            cursor_position: Some(\n-                start_offset + TextUnit::of_str(\"\\n\\nimpl  {\\n\") + name.syntax().range().len()\n-            ),\n+            cursor_position: Some(offset),\n         }\n     })\n }\n@@ -104,3 +113,26 @@ pub fn find_node<'a, N: AstNode<'a>>(syntax: SyntaxNodeRef<'a>, offset: TextUnit\n         .next()\n }\n \n+fn comma_list(buf: &mut String, bra: &str, ket: &str, items: impl Iterator<Item=impl fmt::Display>) {\n+    buf.push_str(bra);\n+    let mut first = true;\n+    for item in items {\n+        if !first {\n+            first = false;\n+            buf.push_str(\", \");\n+        }\n+        write!(buf, \"{}\", item).unwrap();\n+    }\n+    buf.push_str(ket);\n+}\n+\n+trait PushDisplay {\n+    fn push_display<T: fmt::Display>(&mut self, item: &T);\n+}\n+\n+impl PushDisplay for String {\n+    fn push_display<T: fmt::Display>(&mut self, item: &T) {\n+        use std::fmt::Write;\n+        write!(self, \"{}\", item).unwrap()\n+    }\n+}"}, {"sha": "42926ffc87288964dbcea90c81fe59cfd1f9e9ac", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "patch": "@@ -151,11 +151,11 @@ fn test_add_impl() {\n         \"struct Foo {}\\n\\nimpl Foo {\\n<|>\\n}\\n\",\n         |file, off| add_impl(file, off).map(|f| f()),\n     );\n-    // check_action(\n-    //     \"struct Foo<T: Clone> {<|>}\",\n-    //     \"struct Foo<T: Clone> {}\\nimpl<T: Clone> Foo<T> {\\n<|>\\n}\",\n-    //     |file, off| add_impl(file, off).map(|f| f()),\n-    // );\n+    check_action(\n+        \"struct Foo<T: Clone> {<|>}\",\n+        \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n<|>\\n}\",\n+        |file, off| add_impl(file, off).map(|f| f()),\n+    );\n }\n \n #[test]"}, {"sha": "5edb9faaaaf9c2952458ac225622a59c475e7a05", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "patch": "@@ -580,6 +580,25 @@ impl<'a> ast::TypeParamsOwner<'a> for TypeDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for TypeDef<'a> {}\n impl<'a> TypeDef<'a> {}\n \n+// TypeParam\n+#[derive(Debug, Clone, Copy)]\n+pub struct TypeParam<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for TypeParam<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            TYPE_PARAM => Some(TypeParam { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> ast::NameOwner<'a> for TypeParam<'a> {}\n+impl<'a> TypeParam<'a> {}\n+\n // TypeParamList\n #[derive(Debug, Clone, Copy)]\n pub struct TypeParamList<'a> {\n@@ -596,7 +615,11 @@ impl<'a> AstNode<'a> for TypeParamList<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> TypeParamList<'a> {}\n+impl<'a> TypeParamList<'a> {\n+    pub fn type_params(self) -> impl Iterator<Item = TypeParam<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n \n // TypeRef\n #[derive(Debug, Clone, Copy)]"}, {"sha": "daf80dde30bb2bc48e032bacce8ab1f1398cfb00", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "patch": "@@ -310,7 +310,8 @@ Grammar(\n         \"NameRef\": (),\n         \"Attr\": ( options: [ [\"value\", \"TokenTree\"] ] ),\n         \"TokenTree\": (),\n-        \"TypeParamList\": (),\n+        \"TypeParamList\": ( collections: [ [\"type_params\", \"TypeParam\" ] ]),\n+        \"TypeParam\": ( traits: [\"NameOwner\"]),\n         \"WhereClause\": (),\n     },\n )"}, {"sha": "b47cbc0fc2fd095339cdb2dc2604ba1378e271c9", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d82d1551ee09faa5d46a58c17c40c2515d3f3b9/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8d82d1551ee09faa5d46a58c17c40c2515d3f3b9", "patch": "@@ -110,6 +110,7 @@ pub fn handle_code_action(\n     let actions = &[\n         (ActionId::FlipComma, libeditor::flip_comma(&file, offset).is_some()),\n         (ActionId::AddDerive, libeditor::add_derive(&file, offset).is_some()),\n+        (ActionId::AddImpl, libeditor::add_impl(&file, offset).is_some()),\n     ];\n \n     for (id, edit) in actions {\n@@ -218,6 +219,7 @@ pub fn handle_execute_command(\n     let action_result = match arg.id {\n         ActionId::FlipComma => libeditor::flip_comma(&file, arg.offset).map(|f| f()),\n         ActionId::AddDerive => libeditor::add_derive(&file, arg.offset).map(|f| f()),\n+        ActionId::AddImpl => libeditor::add_impl(&file, arg.offset).map(|f| f()),\n     }.ok_or_else(|| format_err!(\"command not applicable\"))?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let mut changes = HashMap::new();\n@@ -259,13 +261,15 @@ fn apply_code_action_cmd(id: ActionId, doc: TextDocumentIdentifier, offset: Text\n enum ActionId {\n     FlipComma,\n     AddDerive,\n+    AddImpl,\n }\n \n impl ActionId {\n     fn title(&self) -> &'static str {\n         match *self {\n             ActionId::FlipComma => \"Flip `,`\",\n             ActionId::AddDerive => \"Add `#[derive]`\",\n+            ActionId::AddImpl => \"Add impl\",\n         }\n     }\n }"}]}