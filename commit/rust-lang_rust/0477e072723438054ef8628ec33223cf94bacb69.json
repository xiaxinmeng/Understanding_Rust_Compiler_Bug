{"sha": "0477e072723438054ef8628ec33223cf94bacb69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NzdlMDcyNzIzNDM4MDU0ZWY4NjI4ZWMzMzIyM2NmOTRiYWNiNjk=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-21T16:12:39Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-03T08:00:26Z"}, "message": "Remove needless lifetimes", "tree": {"sha": "2f38410cb0378b512d215a2a8706f377fd55f4c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f38410cb0378b512d215a2a8706f377fd55f4c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0477e072723438054ef8628ec33223cf94bacb69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0cYJoACgkQj1SKWi7R\nP1im9w//RpJKvE+76M1SDFnEI2zHb8p154H0E8zqoL77yvFZKiBCERk6EIxWcgTJ\nz/dFq4D+mPX3xhsRU0V7bvzILtNSfjbcuPFNWYPiXlSo7PwdXQUx6CC2dPJoROVJ\n2kq9hWZqN/bumJvb02759EY+jLLzUWbpptyb+4h0YnpZOeRh7D9W2Vd5SMhCbJ5H\nwa0nr1SQZmgAGXaW+A8+EjI9SRfKJ4j1eAc7T7ihQNE5Xa4ZODAKi5cbEb9mgsaf\ntDfVwshauhkEneKDNEhwBNGyqrn1LCZHZ9X5uAWfn8PDBYF38QJ83EkXDPAkIdHm\n52YlNiHFpTK8rq1bpwGpHdNXCi+RmJGzJEdPi4OfT2f5S9HbopT/bwic7AwKG/Om\nIUHSKn7RjBSkqc9+AiNI+VlWvRa6ZTQF5DuH/AQEv5bdASVjO3WyTZpV94GDDgDQ\na3Ro4jGpX4QTS4mC978SXGYxwp3iGq417YePrgjC1eWk5FklFlUxsP4fyHBHv4j9\nVIFdlTelRgWBlcsY86zsp3FeNOfnomUnXG5fO8D5sSWFEkeOwEJHG3+OSpKawY/o\nNZ3rDB3kRHgs+n5H/cv2bYWUlsZhzY7m0nrYA3evdpRvsRWRPgOLjSDkuOPc00tV\n23KbuW7NwMliiL7dGZnyq4qoKBdpd7zThSMIkD9AS4vBZ0iCEec=\n=Qr+S\n-----END PGP SIGNATURE-----", "payload": "tree 2f38410cb0378b512d215a2a8706f377fd55f4c9\nparent 87e8613fd41e7a4237a146cbe49835bb88295df6\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561133559 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1562140826 +0200\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0477e072723438054ef8628ec33223cf94bacb69", "html_url": "https://github.com/rust-lang/rust/commit/0477e072723438054ef8628ec33223cf94bacb69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0477e072723438054ef8628ec33223cf94bacb69/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e8613fd41e7a4237a146cbe49835bb88295df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e8613fd41e7a4237a146cbe49835bb88295df6", "html_url": "https://github.com/rust-lang/rust/commit/87e8613fd41e7a4237a146cbe49835bb88295df6"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "891a1956bc971da7ecf4164cbec771ab3e59f3f6", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -4,7 +4,7 @@ use crate::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, ParallelIterator, par_iter};\n \n-pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n+pub fn check_crate(hir_map: &hir::map::Map<'_>) {\n     hir_map.dep_graph.assert_ignored();\n \n     let errors = Lock::new(Vec::new());"}, {"sha": "037d04a5d8ed3a21d61655008f25290ae669df95", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -147,15 +147,15 @@ impl Forest {\n         }\n     }\n \n-    pub fn krate<'hir>(&'hir self) -> &'hir Crate {\n+    pub fn krate(&self) -> &Crate {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::Krate));\n         &self.krate\n     }\n \n     /// This is used internally in the dependency tracking system.\n     /// Use the `krate` method to ensure your dependency on the\n     /// crate is tracked.\n-    pub fn untracked_krate<'hir>(&'hir self) -> &'hir Crate {\n+    pub fn untracked_krate(&self) -> &Crate {\n         &self.krate\n     }\n }\n@@ -1085,7 +1085,7 @@ impl<'a> NodesMatchingSuffix<'a> {\n         // If `id` itself is a mod named `m` with parent `p`, then\n         // returns `Some(id, m, p)`.  If `id` has no mod in its parent\n         // chain, then returns `None`.\n-        fn find_first_mod_parent<'a>(map: &'a Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n+        fn find_first_mod_parent(map: &Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n             loop {\n                 if let Node::Item(item) = map.find(id)? {\n                     if item_is_mod(&item) {"}, {"sha": "b6f0addd77107216c344fefa999de768462d56ba", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -48,8 +48,8 @@ pub fn add_placeholder_note(err: &mut errors::DiagnosticBuilder<'_>) {\n /// If there are types that satisfy both impls, invokes `on_overlap`\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, invokes `no_overlap`.\n-pub fn overlapping_impls<'tcx, F1, F2, R>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn overlapping_impls<F1, F2, R>(\n+    tcx: TyCtxt<'_>,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     intercrate_mode: IntercrateMode,\n@@ -247,10 +247,10 @@ pub enum OrphanCheckErr<'tcx> {\n ///\n /// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n /// 2. Some local type must appear in `Self`.\n-pub fn orphan_check<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn orphan_check(\n+    tcx: TyCtxt<'_>,\n     impl_def_id: DefId,\n-) -> Result<(), OrphanCheckErr<'tcx>> {\n+) -> Result<(), OrphanCheckErr<'_>> {\n     debug!(\"orphan_check({:?})\", impl_def_id);\n \n     // We only except this routine to be invoked on implementations"}, {"sha": "d6cc68bcdab468c19c68a709bbcf5fb4457a47ff", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         /// returns the fuzzy category of a given type, or None\n         /// if the type can be equated to any type.\n-        fn type_category<'tcx>(t: Ty<'tcx>) -> Option<u32> {\n+        fn type_category(t: Ty<'_>) -> Option<u32> {\n             match t.sty {\n                 ty::Bool => Some(0),\n                 ty::Char => Some(1),"}, {"sha": "37eff852abd01de8b5c485e7fcc4be4cb7c50cdc", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -702,6 +702,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub(super) fn is_object_safe_provider<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> bool {\n+pub(super) fn is_object_safe_provider(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n     tcx.object_safety_violations(trait_def_id).is_empty()\n }"}, {"sha": "20acf443406908baccd56ddeec2db744e3e73d18", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -1509,8 +1509,8 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n ///\n /// Based on the \"projection mode\", this lookup may in fact only examine the\n /// topmost impl. See the comments for `Reveal` for more details.\n-fn assoc_ty_def<'cx, 'tcx>(\n-    selcx: &SelectionContext<'cx, 'tcx>,\n+fn assoc_ty_def(\n+    selcx: &SelectionContext<'_, '_>,\n     impl_def_id: DefId,\n     assoc_ty_def_id: DefId,\n ) -> specialization_graph::NodeItem<ty::AssocItem> {"}, {"sha": "07d6f633143a2c29b8b99e76ca0a55ef2cd062e7", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -417,7 +417,7 @@ pub struct SupertraitDefIds<'tcx> {\n     visited: FxHashSet<DefId>,\n }\n \n-pub fn supertrait_def_ids<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> SupertraitDefIds<'tcx> {\n+pub fn supertrait_def_ids(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SupertraitDefIds<'_> {\n     SupertraitDefIds {\n         tcx,\n         stack: vec![trait_def_id],"}, {"sha": "9d5aaa7655db88161ee2994755cfa1d071419b4b", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -44,7 +44,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n     );\n-    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString);\n+    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString);\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}, {"sha": "3a144f0b0e0aa0a879bb5b69188abc4700bdc0fb", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -36,7 +36,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n {\n     fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Value, name: &'b str) -> Self;\n     fn with_cx(cx: &'a Self::CodegenCx) -> Self;\n-    fn build_sibling_block<'b>(&self, name: &'b str) -> Self;\n+    fn build_sibling_block(&self, name: &str) -> Self;\n     fn cx(&self) -> &Self::CodegenCx;\n     fn llbb(&self) -> Self::BasicBlock;\n "}, {"sha": "de5af0a46b534935102c2de6e231ad2d28fbccfe", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -14,8 +14,8 @@ pub struct AddRetag;\n /// after the assignment, we can be sure to obtain the same place value.\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n-fn is_stable<'tcx>(\n-    place: &Place<'tcx>,\n+fn is_stable(\n+    place: &Place<'_>,\n ) -> bool {\n     use rustc::mir::Place::*;\n "}, {"sha": "9898ba897734d7f74deb56476bea127caf3506ce", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -480,11 +480,11 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     }\n }\n \n-fn check_unused_unsafe<'a, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_unused_unsafe(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n     used_unsafe: &FxHashSet<hir::HirId>,\n-    unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>,\n+    unsafe_blocks: &mut Vec<(hir::HirId, bool)>,\n ) {\n     let body_id =\n         tcx.hir().as_local_hir_id(def_id).and_then(|hir_id| {\n@@ -506,7 +506,7 @@ fn check_unused_unsafe<'a, 'tcx>(\n     hir::intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> UnsafetyCheckResult {\n+fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult {\n     debug!(\"unsafety_violations({:?})\", def_id);\n \n     // N.B., this borrow is valid because all the consumers of\n@@ -545,7 +545,7 @@ fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> UnsafetyChec\n     }\n }\n \n-fn unsafe_derive_on_repr_packed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: DefId) {\n     let lint_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap_or_else(||\n         bug!(\"checking unsafety for non-local def id {:?}\", def_id));\n \n@@ -602,7 +602,7 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, used_unsafe: &FxHashSet<hir::HirId>, id\n     db.emit();\n }\n \n-fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId> {\n+fn builtin_derive_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     debug!(\"builtin_derive_def_id({:?})\", def_id);\n     if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n         if tcx.has_attr(impl_def_id, sym::automatically_derived) {\n@@ -618,7 +618,7 @@ fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId\n     }\n }\n \n-pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n     // closures are handled by their parent fn."}, {"sha": "a6fb555f20bd023cddbf7d14aaa3902d4f82148c", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -14,7 +14,7 @@ use crate::util as mir_util;\n pub struct Marker(pub &'static str);\n \n impl MirPass for Marker {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(self.0)\n     }\n \n@@ -52,7 +52,7 @@ pub fn on_mir_pass<'tcx>(\n     }\n }\n \n-pub fn emit_mir<'tcx>(tcx: TyCtxt<'tcx>, outputs: &OutputFilenames) -> io::Result<()> {\n+pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = File::create(&path)?;\n     mir_util::write_mir_pretty(tcx, None, &mut f)?;"}, {"sha": "2ed3f7d5c26e28c852e4dd45a30c153c43754c20", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -1028,14 +1028,14 @@ fn create_generator_resume_function<'tcx>(\n     dump_mir(tcx, None, \"generator_resume\", &0, source, body, |_, _| Ok(()) );\n }\n \n-fn source_info<'tcx>(body: &Body<'tcx>) -> SourceInfo {\n+fn source_info(body: &Body<'_>) -> SourceInfo {\n     SourceInfo {\n         span: body.span,\n         scope: OUTERMOST_SOURCE_SCOPE,\n     }\n }\n \n-fn insert_clean_drop<'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n+fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars."}, {"sha": "7f43c4a3e89a1adee9f7cf976f1aed2afeea6bd9", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -50,13 +50,13 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn is_mir_available<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     tcx.mir_keys(def_id.krate).contains(&def_id)\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx DefIdSet {\n+fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let mut set = DefIdSet::default();\n@@ -94,7 +94,7 @@ fn mir_keys<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx DefIdSet {\n     tcx.arena.alloc(set)\n }\n \n-fn mir_built<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_built(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     let mir = build::mir_build(tcx, def_id);\n     tcx.alloc_steal_mir(mir)\n }\n@@ -137,7 +137,7 @@ pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n pub trait MirPass {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         default_name::<Self>()\n     }\n \n@@ -192,7 +192,7 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -223,7 +223,7 @@ fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     tcx.alloc_steal_mir(body)\n }\n \n-fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const"}, {"sha": "3e52d3ee9bbdff021d4d8d56ea2501bd037e1d26", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -1473,7 +1473,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_const_qualif<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> (u8, &'tcx BitSet<Local>) {\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before"}, {"sha": "2eed9d453f23363fded6deb3aa19d811e6e04cbf", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -53,7 +53,7 @@ pub fn simplify_cfg(body: &mut Body<'_>) {\n }\n \n impl MirPass for SimplifyCfg {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n "}, {"sha": "f39c71ef42d71559c70bc6a04a5bd008ceb3ef03", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477e072723438054ef8628ec33223cf94bacb69/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=0477e072723438054ef8628ec33223cf94bacb69", "patch": "@@ -15,7 +15,7 @@ impl SimplifyBranches {\n }\n \n impl MirPass for SimplifyBranches {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n "}]}