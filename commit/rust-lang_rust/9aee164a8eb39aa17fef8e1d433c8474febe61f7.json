{"sha": "9aee164a8eb39aa17fef8e1d433c8474febe61f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWUxNjRhOGViMzlhYTE3ZmVmOGUxZDQzM2M4NDc0ZmViZTYxZjc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-20T21:16:46Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-21T16:35:35Z"}, "message": "Add themes option", "tree": {"sha": "df350bb560bb8a973b080556e8c01b6e3b9791d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df350bb560bb8a973b080556e8c01b6e3b9791d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aee164a8eb39aa17fef8e1d433c8474febe61f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aee164a8eb39aa17fef8e1d433c8474febe61f7", "html_url": "https://github.com/rust-lang/rust/commit/9aee164a8eb39aa17fef8e1d433c8474febe61f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aee164a8eb39aa17fef8e1d433c8474febe61f7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "003b2bc1c65251ec2fc80b78ed91c43fb35402ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/003b2bc1c65251ec2fc80b78ed91c43fb35402ec", "html_url": "https://github.com/rust-lang/rust/commit/003b2bc1c65251ec2fc80b78ed91c43fb35402ec"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "420e0b2e80706024322807de725227b632a38925", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aee164a8eb39aa17fef8e1d433c8474febe61f7/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee164a8eb39aa17fef8e1d433c8474febe61f7/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=9aee164a8eb39aa17fef8e1d433c8474febe61f7", "patch": "@@ -14,7 +14,7 @@ use std::str;\n use html::markdown::{Markdown, RenderType};\n \n #[derive(Clone)]\n-pub struct ExternalHtml{\n+pub struct ExternalHtml {\n     /// Content that will be included inline in the <head> section of a\n     /// rendered Markdown file or generated documentation\n     pub in_header: String,"}, {"sha": "95db6a8679e5dd3fda015db66a4ead453f9b4a8d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9aee164a8eb39aa17fef8e1d433c8474febe61f7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee164a8eb39aa17fef8e1d433c8474febe61f7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9aee164a8eb39aa17fef8e1d433c8474febe61f7", "patch": "@@ -132,6 +132,8 @@ pub struct SharedContext {\n     /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n     /// should be ordered alphabetically or in order of appearance (in the source code).\n     pub sort_modules_alphabetically: bool,\n+    /// Additional themes to be added to the generated docs.\n+    pub themes: Vec<PathBuf>,\n }\n \n impl SharedContext {\n@@ -500,7 +502,8 @@ pub fn run(mut krate: clean::Crate,\n            renderinfo: RenderInfo,\n            render_type: RenderType,\n            sort_modules_alphabetically: bool,\n-           deny_render_differences: bool) -> Result<(), Error> {\n+           deny_render_differences: bool,\n+           themes: Vec<PathBuf>) -> Result<(), Error> {\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n             Some(p) => p.to_path_buf(),\n@@ -524,6 +527,7 @@ pub fn run(mut krate: clean::Crate,\n         markdown_warnings: RefCell::new(vec![]),\n         created_dirs: RefCell::new(FxHashSet()),\n         sort_modules_alphabetically,\n+        themes,\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -872,19 +876,28 @@ fn write_shared(cx: &Context,\n \n     write(cx.dst.join(\"rustdoc.css\"),\n           include_bytes!(\"static/rustdoc.css\"))?;\n-    let path = cx.shared.src_root.join(\"../librustdoc/html/static/themes\");\n-    let mut themes: Vec<String> = Vec::new();\n-    for entry in try_err!(fs::read_dir(path.clone()), &path) {\n-        let entry = try_err!(entry, &path);\n+\n+    // To avoid \"main.css\" to be overwritten, we'll first run over the received themes and only\n+    // then we'll run over the \"official\" styles.\n+    let mut themes: HashSet<String> = HashSet::new();\n+\n+    for entry in &cx.shared.themes {\n         let mut content = Vec::with_capacity(100000);\n \n-        let mut f = try_err!(File::open(entry.path()), &entry.path());\n-        try_err!(f.read_to_end(&mut content), &entry.path());\n-        write(cx.dst.join(entry.file_name()), content.as_slice())?;\n-        themes.push(try_none!(\n-                        try_none!(entry.path().file_stem(), &entry.path()).to_str(),\n-                        &entry.path()).to_owned());\n+        let mut f = try_err!(File::open(&entry), &entry);\n+        try_err!(f.read_to_end(&mut content), &entry);\n+        write(cx.dst.join(try_none!(entry.file_name(), &entry)), content.as_slice())?;\n+        themes.insert(try_none!(try_none!(entry.file_stem(), &entry).to_str(), &entry).to_owned());\n     }\n+\n+    write(cx.dst.join(\"main.css\"),\n+          include_bytes!(\"static/themes/main.css\"))?;\n+    themes.insert(\"main\".to_owned());\n+    write(cx.dst.join(\"dark.css\"),\n+          include_bytes!(\"static/themes/dark.css\"))?;\n+    themes.insert(\"dark\".to_owned());\n+\n+    let mut themes: Vec<&String> = themes.iter().collect();\n     themes.sort();\n     // To avoid theme switch latencies as much as possible, we put everything theme related\n     // at the beginning of the html files into another js file."}, {"sha": "bf624c31d3d954784f6103bba9ed11d0a8ce751f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9aee164a8eb39aa17fef8e1d433c8474febe61f7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee164a8eb39aa17fef8e1d433c8474febe61f7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9aee164a8eb39aa17fef8e1d433c8474febe61f7", "patch": "@@ -264,6 +264,11 @@ pub fn opts() -> Vec<RustcOptGroup> {\n             o.optflag(\"\", \"deny-render-differences\", \"abort doc runs when markdown rendering \\\n                                                       differences are found\")\n         }),\n+        unstable(\"themes\", |o| {\n+            o.optmulti(\"\", \"themes\",\n+                       \"additional themes which will be added to the generated docs\",\n+                       \"FILES\")\n+        }),\n     ]\n }\n \n@@ -365,6 +370,15 @@ pub fn main_args(args: &[String]) -> isize {\n         }\n     }\n \n+    let mut themes = Vec::new();\n+    for theme in matches.opt_strs(\"themes\").iter().map(|s| PathBuf::from(&s)) {\n+        if !theme.is_file() {\n+            eprintln!(\"rustdoc: option --themes arguments must all be files\");\n+            return 1;\n+        }\n+        themes.push(theme);\n+    }\n+\n     let external_html = match ExternalHtml::load(\n             &matches.opt_strs(\"html-in-header\"),\n             &matches.opt_strs(\"html-before-content\"),\n@@ -413,7 +427,8 @@ pub fn main_args(args: &[String]) -> isize {\n                                   renderinfo,\n                                   render_type,\n                                   sort_modules_alphabetically,\n-                                  deny_render_differences)\n+                                  deny_render_differences,\n+                                  themes)\n                     .expect(\"failed to generate documentation\");\n                 0\n             }"}]}