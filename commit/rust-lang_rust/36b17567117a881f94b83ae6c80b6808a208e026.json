{"sha": "36b17567117a881f94b83ae6c80b6808a208e026", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YjE3NTY3MTE3YTg4MWY5NGI4M2FlNmM4MGI2ODA4YTIwOGUwMjY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-01T15:35:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:25Z"}, "message": "Do not store lint_root", "tree": {"sha": "6eb2a1519d863f11a944755ad359b3139de7878c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb2a1519d863f11a944755ad359b3139de7878c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b17567117a881f94b83ae6c80b6808a208e026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b17567117a881f94b83ae6c80b6808a208e026", "html_url": "https://github.com/rust-lang/rust/commit/36b17567117a881f94b83ae6c80b6808a208e026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b17567117a881f94b83ae6c80b6808a208e026/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "156561267ea9625d9d8344cf0a7755aff96431a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/156561267ea9625d9d8344cf0a7755aff96431a4", "html_url": "https://github.com/rust-lang/rust/commit/156561267ea9625d9d8344cf0a7755aff96431a4"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "b3ef639109735e15878075b113f03cf2f2022780", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/36b17567117a881f94b83ae6c80b6808a208e026/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b17567117a881f94b83ae6c80b6808a208e026/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=36b17567117a881f94b83ae6c80b6808a208e026", "patch": "@@ -264,7 +264,6 @@ struct ConstPropagator<'mir, 'tcx> {\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n-    lint_root: Option<HirId>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -344,7 +343,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             local_decls: body.local_decls.clone(),\n             ret: ret.map(Into::into),\n             source_info: None,\n-            lint_root: None,\n         }\n     }\n \n@@ -378,6 +376,10 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         F: FnOnce(&mut Self) -> InterpResult<'tcx, T>,\n     {\n         self.ecx.tcx.span = source_info.span;\n+        // FIXME(eddyb) move this to the `Panic(_)` error case, so that\n+        // `f(self)` is always called, and that the only difference when the\n+        // scope's `local_data` is missing, is that the lint isn't emitted.\n+        let lint_root = self.lint_root(source_info)?;\n         let r = match f(self) {\n             Ok(val) => Some(val),\n             Err(error) => {\n@@ -411,7 +413,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         diagnostic.report_as_lint(\n                             self.ecx.tcx,\n                             \"this expression will panic at runtime\",\n-                            self.lint_root?,\n+                            lint_root,\n                             None,\n                         );\n                     }\n@@ -423,7 +425,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         r\n     }\n \n-    fn eval_constant(&mut self, c: &Constant<'tcx>) -> Option<Const<'tcx>> {\n+    fn eval_constant(\n+        &mut self,\n+        c: &Constant<'tcx>,\n+        source_info: SourceInfo,\n+    ) -> Option<Const<'tcx>> {\n         self.ecx.tcx.span = c.span;\n \n         // FIXME we need to revisit this for #67176\n@@ -435,7 +441,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let err = error_to_const_error(&self.ecx, error);\n-                match self.lint_root {\n+                match self.lint_root(source_info) {\n                     Some(lint_root) if c.literal.needs_subst() => {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n                         // generic functions using associated constants of the generic parameters.\n@@ -462,7 +468,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n     fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n         match *op {\n-            Operand::Constant(ref c) => self.eval_constant(c),\n+            Operand::Constant(ref c) => self.eval_constant(c, source_info),\n             Operand::Move(ref place) | Operand::Copy(ref place) => {\n                 self.eval_place(place, source_info)\n             }\n@@ -801,14 +807,13 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         trace!(\"visit_constant: {:?}\", constant);\n         self.super_constant(constant, location);\n-        self.eval_constant(constant);\n+        self.eval_constant(constant, self.source_info.unwrap());\n     }\n \n     fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n         trace!(\"visit_statement: {:?}\", statement);\n         let source_info = statement.source_info;\n         self.source_info = Some(source_info);\n-        self.lint_root = self.lint_root(source_info);\n         if let StatementKind::Assign(box (ref place, ref mut rval)) = statement.kind {\n             let place_ty: Ty<'tcx> = place.ty(&self.local_decls, self.tcx).ty;\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n@@ -860,7 +865,6 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         let source_info = terminator.source_info;\n         self.source_info = Some(source_info);\n         self.super_terminator(terminator, location);\n-        self.lint_root = self.lint_root(source_info);\n         match &mut terminator.kind {\n             TerminatorKind::Assert { expected, ref msg, ref mut cond, .. } => {\n                 if let Some(value) = self.eval_operand(&cond, source_info) {"}]}