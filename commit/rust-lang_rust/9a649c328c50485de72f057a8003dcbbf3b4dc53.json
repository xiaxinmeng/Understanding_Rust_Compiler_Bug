{"sha": "9a649c328c50485de72f057a8003dcbbf3b4dc53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjQ5YzMyOGM1MDQ4NWRlNzJmMDU3YTgwMDNkY2JiZjNiNGRjNTM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-12T12:23:38Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-12T16:23:20Z"}, "message": "Require destructors using `#[may_dangle]` to use `unsafe impl`.", "tree": {"sha": "e14c6c4463904a642686d42e1ba5891913af0aee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14c6c4463904a642686d42e1ba5891913af0aee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a649c328c50485de72f057a8003dcbbf3b4dc53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a649c328c50485de72f057a8003dcbbf3b4dc53", "html_url": "https://github.com/rust-lang/rust/commit/9a649c328c50485de72f057a8003dcbbf3b4dc53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a649c328c50485de72f057a8003dcbbf3b4dc53/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d2d5bcbcf8342976609feeb46972d346b549cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2d5bcbcf8342976609feeb46972d346b549cca", "html_url": "https://github.com/rust-lang/rust/commit/7d2d5bcbcf8342976609feeb46972d346b549cca"}], "stats": {"total": 127, "additions": 116, "deletions": 11}, "files": [{"sha": "6e81c3e700ed2ab47a8350f7a5560602080252d9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9a649c328c50485de72f057a8003dcbbf3b4dc53", "patch": "@@ -330,6 +330,36 @@ impl Generics {\n     }\n }\n \n+pub enum UnsafeGeneric {\n+    Region(LifetimeDef, &'static str),\n+    Type(TyParam, &'static str),\n+}\n+\n+impl UnsafeGeneric {\n+    pub fn attr_name(&self) -> &'static str {\n+        match *self {\n+            UnsafeGeneric::Region(_, s) => s,\n+            UnsafeGeneric::Type(_, s) => s,\n+        }\n+    }\n+}\n+\n+impl Generics {\n+    pub fn carries_unsafe_attr(&self) -> Option<UnsafeGeneric> {\n+        for r in &self.lifetimes {\n+            if r.pure_wrt_drop {\n+                return Some(UnsafeGeneric::Region(r.clone(), \"may_dangle\"));\n+            }\n+        }\n+        for t in &self.ty_params {\n+            if t.pure_wrt_drop {\n+                return Some(UnsafeGeneric::Type(t.clone(), \"may_dangle\"));\n+            }\n+        }\n+        return None;\n+    }\n+}\n+\n /// A `where` clause in a definition\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereClause {"}, {"sha": "cca6c884306725c1342e72df83ca5df3b75e4363", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=9a649c328c50485de72f057a8003dcbbf3b4dc53", "patch": "@@ -13,7 +13,7 @@\n \n use rustc::ty::TyCtxt;\n use rustc::hir::intravisit;\n-use rustc::hir;\n+use rustc::hir::{self, Unsafety};\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut orphan = UnsafetyChecker { tcx: tcx };\n@@ -27,6 +27,7 @@ struct UnsafetyChecker<'cx, 'tcx: 'cx> {\n impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n     fn check_unsafety_coherence(&mut self,\n                                 item: &'v hir::Item,\n+                                impl_generics: Option<&hir::Generics>,\n                                 unsafety: hir::Unsafety,\n                                 polarity: hir::ImplPolarity) {\n         match self.tcx.impl_trait_ref(self.tcx.map.local_def_id(item.id)) {\n@@ -47,33 +48,44 @@ impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n \n             Some(trait_ref) => {\n                 let trait_def = self.tcx.lookup_trait_def(trait_ref.def_id);\n-                match (trait_def.unsafety, unsafety, polarity) {\n-                    (hir::Unsafety::Unsafe, hir::Unsafety::Unsafe, hir::ImplPolarity::Negative) => {\n+                let unsafe_attr = impl_generics.and_then(|g| g.carries_unsafe_attr());\n+                match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n+                    (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative) => {\n                         span_err!(self.tcx.sess,\n                                   item.span,\n                                   E0198,\n                                   \"negative implementations are not unsafe\");\n                     }\n \n-                    (hir::Unsafety::Normal, hir::Unsafety::Unsafe, _) => {\n+                    (Unsafety::Normal, None, Unsafety::Unsafe, _) => {\n                         span_err!(self.tcx.sess,\n                                   item.span,\n                                   E0199,\n                                   \"implementing the trait `{}` is not unsafe\",\n                                   trait_ref);\n                     }\n \n-                    (hir::Unsafety::Unsafe, hir::Unsafety::Normal, hir::ImplPolarity::Positive) => {\n+                    (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n                         span_err!(self.tcx.sess,\n                                   item.span,\n                                   E0200,\n                                   \"the trait `{}` requires an `unsafe impl` declaration\",\n                                   trait_ref);\n                     }\n \n-                    (hir::Unsafety::Unsafe, hir::Unsafety::Normal, hir::ImplPolarity::Negative) |\n-                    (hir::Unsafety::Unsafe, hir::Unsafety::Unsafe, hir::ImplPolarity::Positive) |\n-                    (hir::Unsafety::Normal, hir::Unsafety::Normal, _) => {\n+                    (Unsafety::Normal, Some(g), Unsafety::Normal, hir::ImplPolarity::Positive) =>\n+                    {\n+                        span_err!(self.tcx.sess,\n+                                  item.span,\n+                                  E0569,\n+                                  \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n+                                  g.attr_name());\n+                    }\n+\n+                    (_, _, Unsafety::Normal, hir::ImplPolarity::Negative) |\n+                    (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive) |\n+                    (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive) |\n+                    (Unsafety::Normal, None, Unsafety::Normal, _) => {\n                         // OK\n                     }\n                 }\n@@ -86,10 +98,10 @@ impl<'cx, 'tcx, 'v> intravisit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n             hir::ItemDefaultImpl(unsafety, _) => {\n-                self.check_unsafety_coherence(item, unsafety, hir::ImplPolarity::Positive);\n+                self.check_unsafety_coherence(item, None, unsafety, hir::ImplPolarity::Positive);\n             }\n-            hir::ItemImpl(unsafety, polarity, ..) => {\n-                self.check_unsafety_coherence(item, unsafety, polarity);\n+            hir::ItemImpl(unsafety, polarity, ref generics, ..) => {\n+                self.check_unsafety_coherence(item, Some(generics), unsafety, polarity);\n             }\n             _ => {}\n         }"}, {"sha": "bdd33cb56e0bc47bf2525a283e74deae031964c9", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9a649c328c50485de72f057a8003dcbbf3b4dc53", "patch": "@@ -2819,6 +2819,23 @@ not a distinct static type. Likewise, it's not legal to attempt to\n behavior for specific enum variants.\n \"##,\n \n+E0569: r##\"\n+If an impl has a generic parameter with the `#[may_dangle]` attribute, then\n+that impl must be declared as an `unsafe impl. For example:\n+\n+```compile_fail,E0569\n+struct Foo<X>(X);\n+impl<#[may_dangle] X> Drop for Foo {\n+    fn drop(&mut self) { }\n+}\n+```\n+\n+In this example, we are asserting that the destructor for `Foo` will not\n+access any data of type `X`, and require this assertion to be true for\n+overall safety in our program. The compiler does not currently attempt to\n+verify this assertion; therefore we must tag this `impl` as unsafe.\n+\"##,\n+\n E0318: r##\"\n Default impls for a trait must be located in the same crate where the trait was\n defined. For more information see the [opt-in builtin traits RFC](https://github"}, {"sha": "f92c8703dc9273b9ddb3055db23b98aab705ae43", "filename": "src/test/compile-fail/dropck-eyepatch-implies-unsafe-impl.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Ftest%2Fcompile-fail%2Fdropck-eyepatch-implies-unsafe-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a649c328c50485de72f057a8003dcbbf3b4dc53/src%2Ftest%2Fcompile-fail%2Fdropck-eyepatch-implies-unsafe-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck-eyepatch-implies-unsafe-impl.rs?ref=9a649c328c50485de72f057a8003dcbbf3b4dc53", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generic_param_attrs)]\n+#![feature(dropck_eyepatch)]\n+\n+// This test ensures that a use of `#[may_dangle]` is rejected if\n+// it is not attached to an `unsafe impl`.\n+\n+use std::fmt;\n+\n+struct Dt<A: fmt::Debug>(&'static str, A);\n+struct Dr<'a, B:'a+fmt::Debug>(&'static str, &'a B);\n+struct Pt<A,B: fmt::Debug>(&'static str, A, B);\n+struct Pr<'a, 'b, B:'a+'b+fmt::Debug>(&'static str, &'a B, &'b B);\n+struct St<A: fmt::Debug>(&'static str, A);\n+struct Sr<'a, B:'a+fmt::Debug>(&'static str, &'a B);\n+\n+impl<A: fmt::Debug> Drop for Dt<A> {\n+    fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.1); }\n+}\n+impl<'a, B: fmt::Debug> Drop for Dr<'a, B> {\n+    fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.1); }\n+}\n+impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n+    //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n+\n+    // (unsafe to access self.1  due to #[may_dangle] on A)\n+    fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n+}\n+impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n+    //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n+\n+    // (unsafe to access self.1 due to #[may_dangle] on 'a)\n+    fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n+}\n+\n+fn main() {\n+}"}]}