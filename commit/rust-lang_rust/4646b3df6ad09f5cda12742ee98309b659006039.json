{"sha": "4646b3df6ad09f5cda12742ee98309b659006039", "node_id": "C_kwDOAAsO6NoAKDQ2NDZiM2RmNmFkMDlmNWNkYTEyNzQyZWU5ODMwOWI2NTkwMDYwMzk", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T01:12:17Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T03:01:35Z"}, "message": "Use BoundTy and BoundRegion instead of kind of PlaceholderTy and PlaceholderRegion", "tree": {"sha": "8b46d3aea10dcaac316483d29cff2930223ddb0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b46d3aea10dcaac316483d29cff2930223ddb0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4646b3df6ad09f5cda12742ee98309b659006039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4646b3df6ad09f5cda12742ee98309b659006039", "html_url": "https://github.com/rust-lang/rust/commit/4646b3df6ad09f5cda12742ee98309b659006039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4646b3df6ad09f5cda12742ee98309b659006039/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c934ce9e0a267340920a8bef96d7c59a46910c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/c934ce9e0a267340920a8bef96d7c59a46910c55", "html_url": "https://github.com/rust-lang/rust/commit/c934ce9e0a267340920a8bef96d7c59a46910c55"}], "stats": {"total": 196, "additions": 121, "deletions": 75}, "files": [{"sha": "84f75caa6928aefa2aa372ddad8db66235a60a38", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -181,8 +181,8 @@ trait TypeOpInfo<'tcx> {\n         };\n \n         let placeholder_region = tcx.mk_re_placeholder(ty::Placeholder {\n-            name: placeholder.name,\n             universe: adjusted_universe.into(),\n+            bound: placeholder.bound,\n         });\n \n         let error_region =\n@@ -191,8 +191,8 @@ trait TypeOpInfo<'tcx> {\n                     error_placeholder.universe.as_u32().checked_sub(base_universe.as_u32());\n                 adjusted_universe.map(|adjusted| {\n                     tcx.mk_re_placeholder(ty::Placeholder {\n-                        name: error_placeholder.name,\n                         universe: adjusted.into(),\n+                        bound: error_placeholder.bound,\n                     })\n                 })\n             } else {"}, {"sha": "110354a20d8393e94ca75f59fb82ea0762847a62", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -467,9 +467,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let ty::Ref(region, ..) = ty.kind() {\n             match **region {\n                 ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n-                | ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n-                    printer.region_highlight_mode.highlighting_bound_region(br, counter)\n-                }\n+                | ty::RePlaceholder(ty::PlaceholderRegion {\n+                    bound: ty::BoundRegion { kind: br, .. },\n+                    ..\n+                }) => printer.region_highlight_mode.highlighting_bound_region(br, counter),\n                 _ => {}\n             }\n         }\n@@ -485,9 +486,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let region = if let ty::Ref(region, ..) = ty.kind() {\n             match **region {\n                 ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n-                | ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n-                    printer.region_highlight_mode.highlighting_bound_region(br, counter)\n-                }\n+                | ty::RePlaceholder(ty::PlaceholderRegion {\n+                    bound: ty::BoundRegion { kind: br, .. },\n+                    ..\n+                }) => printer.region_highlight_mode.highlighting_bound_region(br, counter),\n                 _ => {}\n             }\n             region"}, {"sha": "9fcebeb0acdc7ef670ce658c07afc56126dd1487", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             .regioncx\n             .placeholders_contained_in(lower_bound)\n             .map(|placeholder| {\n-                if let Some(id) = placeholder.name.get_id()\n+                if let Some(id) = placeholder.bound.kind.get_id()\n                     && let Some(placeholder_id) = id.as_local()\n                     && let gat_hir_id = hir.local_def_id_to_hir_id(placeholder_id)\n                     && let Some(generics_impl) = hir.get_parent(gat_hir_id).generics()"}, {"sha": "cdc916457ca68d82656597faed8edc08a46f8b99", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             .constraints\n             .placeholder_region(self.type_checker.infcx, placeholder);\n \n-        let reg_info = match placeholder.name {\n+        let reg_info = match placeholder.bound.kind {\n             ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n             ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),"}, {"sha": "e0408b36af9e40d25fdc7b45f36d960826d43f35", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -2336,10 +2336,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 FnMutDelegate {\n                     regions: &mut |_| tcx.lifetimes.re_erased,\n                     types: &mut |bv| {\n-                        tcx.mk_placeholder(ty::PlaceholderType { universe, name: bv.kind })\n+                        tcx.mk_placeholder(ty::PlaceholderType { universe, bound: bv })\n                     },\n                     consts: &mut |bv, ty| {\n-                        tcx.mk_const(ty::PlaceholderConst { universe, name: bv }, ty)\n+                        tcx.mk_const(ty::PlaceholderConst { universe, bound: bv }, ty)\n                     },\n                 },\n             );\n@@ -2525,11 +2525,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                             regions: &mut |_| tcx.lifetimes.re_erased,\n                                             types: &mut |bv| tcx.mk_placeholder(ty::PlaceholderType {\n                                                 universe,\n-                                                name: bv.kind,\n+                                                bound: bv,\n                                             }),\n                                             consts: &mut |bv, ty| tcx.mk_const(ty::PlaceholderConst {\n                                                 universe,\n-                                                name: bv\n+                                                bound: bv,\n                                             }, ty),\n                                         })\n                                     )"}, {"sha": "fbb2257bf67c4929473668d5e387da863f60f1d9", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -125,9 +125,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 ty.into()\n             }\n \n-            CanonicalVarKind::PlaceholderTy(ty::PlaceholderType { universe, name }) => {\n+            CanonicalVarKind::PlaceholderTy(ty::PlaceholderType { universe, bound }) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::PlaceholderType { universe: universe_mapped, name };\n+                let placeholder_mapped = ty::PlaceholderType { universe: universe_mapped, bound };\n                 self.tcx.mk_placeholder(placeholder_mapped).into()\n             }\n \n@@ -138,9 +138,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 )\n                 .into(),\n \n-            CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, name }) => {\n+            CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, bound }) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::PlaceholderRegion { universe: universe_mapped, name };\n+                let placeholder_mapped = ty::PlaceholderRegion { universe: universe_mapped, bound };\n                 self.tcx.mk_re_placeholder(placeholder_mapped).into()\n             }\n \n@@ -152,9 +152,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 )\n                 .into(),\n \n-            CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }, ty) => {\n+            CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, bound }, ty) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n+                let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, bound };\n                 self.tcx.mk_const(placeholder_mapped, ty).into()\n             }\n         }"}, {"sha": "40d5760681716c1004aad703aeb1804341e49336", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -170,15 +170,15 @@ fn msg_span_from_named_region<'tcx>(\n         }\n         ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            name: ty::BoundRegionKind::BrNamed(def_id, name),\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrNamed(def_id, name), .. },\n             ..\n         }) => (format!(\"the lifetime `{name}` as defined here\"), Some(tcx.def_span(def_id))),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            name: ty::BoundRegionKind::BrAnon(_, Some(span)),\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(_, Some(span)), .. },\n             ..\n         }) => (format!(\"the anonymous lifetime defined here\"), Some(span)),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            name: ty::BoundRegionKind::BrAnon(_, None),\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(_, None), .. },\n             ..\n         }) => (format!(\"an anonymous lifetime\"), None),\n         _ => bug!(\"{:?}\", region),"}, {"sha": "06aff52681fde751ce6e7ad54351ba0077887090", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -16,8 +16,20 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         match &self.error {\n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::RelateRegionParamBound(span),\n-                Region(Interned(RePlaceholder(ty::Placeholder { name: sub_name, .. }), _)),\n-                Region(Interned(RePlaceholder(ty::Placeholder { name: sup_name, .. }), _)),\n+                Region(Interned(\n+                    RePlaceholder(ty::Placeholder {\n+                        bound: ty::BoundRegion { kind: sub_name, .. },\n+                        ..\n+                    }),\n+                    _,\n+                )),\n+                Region(Interned(\n+                    RePlaceholder(ty::Placeholder {\n+                        bound: ty::BoundRegion { kind: sup_name, .. },\n+                        ..\n+                    }),\n+                    _,\n+                )),\n             )) => {\n                 let span = *span;\n                 let (sub_span, sub_symbol) = match sub_name {"}, {"sha": "a63cfbc919c65caffeb6dae90ffad44136234444", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -82,20 +82,20 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         let delegate = FnMutDelegate {\n             regions: &mut |br: ty::BoundRegion| {\n-                self.tcx.mk_re_placeholder(ty::PlaceholderRegion {\n-                    universe: next_universe,\n-                    name: br.kind,\n-                })\n+                self.tcx\n+                    .mk_re_placeholder(ty::PlaceholderRegion { universe: next_universe, bound: br })\n             },\n             types: &mut |bound_ty: ty::BoundTy| {\n                 self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n-                    name: bound_ty.kind,\n+                    bound: bound_ty,\n                 })\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n-                self.tcx\n-                    .mk_const(ty::PlaceholderConst { universe: next_universe, name: bound_var }, ty)\n+                self.tcx.mk_const(\n+                    ty::PlaceholderConst { universe: next_universe, bound: bound_var },\n+                    ty,\n+                )\n             },\n         };\n "}, {"sha": "ac8349e4c3ab3f9d52db0fa2f03eb75ae6ec915d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -2130,13 +2130,17 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n \n         fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n             if let ty::Infer(_) = t.kind() {\n+                let idx = {\n+                    let idx = self.idx;\n+                    self.idx += 1;\n+                    idx\n+                };\n                 self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundTyKind::Anon({\n-                        let idx = self.idx;\n-                        self.idx += 1;\n-                        idx\n-                    }),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_u32(idx),\n+                        kind: ty::BoundTyKind::Anon(idx),\n+                    },\n                 })\n             } else {\n                 t.super_fold_with(self)\n@@ -2153,7 +2157,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                 self.tcx.mk_const(\n                     ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from_u32({\n+                        bound: ty::BoundVar::from_u32({\n                             let idx = self.idx;\n                             self.idx += 1;\n                             idx"}, {"sha": "9f7b26b87f459470fe756cf8d0223577a99ba83b", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -296,7 +296,7 @@ where\n                     universe\n                 });\n \n-                let placeholder = ty::PlaceholderRegion { universe, name: br.kind };\n+                let placeholder = ty::PlaceholderRegion { universe, bound: br };\n                 debug!(?placeholder);\n                 let placeholder_reg = nll_delegate.next_placeholder_region(placeholder);\n                 debug!(?placeholder_reg);"}, {"sha": "b8ba98fc0a9f53901f2b75d110c58c394da5c09c", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -290,9 +290,9 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n     ) -> TypeError<'tcx> {\n         debug!(\"error: placeholder={:?}, other_region={:?}\", placeholder, other_region);\n         if self.overly_polymorphic {\n-            TypeError::RegionsOverlyPolymorphic(placeholder.name, other_region)\n+            TypeError::RegionsOverlyPolymorphic(placeholder.bound.kind, other_region)\n         } else {\n-            TypeError::RegionsInsufficientlyPolymorphic(placeholder.name, other_region)\n+            TypeError::RegionsInsufficientlyPolymorphic(placeholder.bound.kind, other_region)\n         }\n     }\n }"}, {"sha": "d3f71e75d991d10fd7f2475713239d9b93b57d79", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -155,9 +155,11 @@ impl<'tcx> CanonicalVarInfo<'tcx> {\n             | CanonicalVarKind::Region(_)\n             | CanonicalVarKind::Const(_, _) => bug!(\"expected placeholder: {self:?}\"),\n \n-            CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.name.expect_anon(),\n-            CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.name.expect_anon(),\n-            CanonicalVarKind::PlaceholderConst(placeholder, _) => placeholder.name.as_u32(),\n+            CanonicalVarKind::PlaceholderRegion(placeholder) => {\n+                placeholder.bound.kind.expect_anon()\n+            }\n+            CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.bound.kind.expect_anon(),\n+            CanonicalVarKind::PlaceholderConst(placeholder, _) => placeholder.bound.as_u32(),\n         }\n     }\n }"}, {"sha": "c856bb25e1474c5d96713baa0655092a8ec12ae0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -1454,12 +1454,12 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n #[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct Placeholder<T> {\n     pub universe: UniverseIndex,\n-    pub name: T,\n+    pub bound: T,\n }\n \n-pub type PlaceholderRegion = Placeholder<BoundRegionKind>;\n+pub type PlaceholderRegion = Placeholder<BoundRegion>;\n \n-pub type PlaceholderType = Placeholder<BoundTyKind>;\n+pub type PlaceholderType = Placeholder<BoundTy>;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n #[derive(TyEncodable, TyDecodable, PartialOrd, Ord)]"}, {"sha": "fb681f1114d6ddaed17b579e29c9d2f2d4da35b6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -739,7 +739,7 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(print(data))\n                 }\n             }\n-            ty::Placeholder(placeholder) => match placeholder.name {\n+            ty::Placeholder(placeholder) => match placeholder.bound.kind {\n                 ty::BoundTyKind::Anon(_) => p!(write(\"Placeholder({:?})\", placeholder)),\n                 ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n             },\n@@ -2104,7 +2104,9 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n \n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n-            | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+            | ty::RePlaceholder(ty::Placeholder {\n+                bound: ty::BoundRegion { kind: br, .. }, ..\n+            }) => {\n                 if br.is_named() {\n                     return true;\n                 }\n@@ -2181,7 +2183,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n-            | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+            | ty::RePlaceholder(ty::Placeholder {\n+                bound: ty::BoundRegion { kind: br, .. }, ..\n+            }) => {\n                 if let ty::BrNamed(_, name) = br && br.is_named() {\n                     p!(write(\"{}\", name));\n                     return Ok(self);\n@@ -2259,7 +2263,10 @@ impl<'a, 'tcx> ty::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n             ty::ReLateBound(db, br) if db >= self.current_index => {\n                 *self.region_map.entry(br).or_insert_with(|| name(Some(db), self.current_index, br))\n             }\n-            ty::RePlaceholder(ty::PlaceholderRegion { name: kind, .. }) => {\n+            ty::RePlaceholder(ty::PlaceholderRegion {\n+                bound: ty::BoundRegion { kind, .. },\n+                ..\n+            }) => {\n                 // If this is an anonymous placeholder, don't rename. Otherwise, in some\n                 // async fns, we get a `for<'r> Send` bound\n                 match kind {"}, {"sha": "3eda2b2d98439e3dc8c1185118df8a42bcd1e295", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -254,8 +254,8 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::AssocKind,\n     crate::ty::AliasKind,\n     crate::ty::AliasRelationDirection,\n-    crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n-    crate::ty::Placeholder<crate::ty::BoundTyKind>,\n+    crate::ty::Placeholder<crate::ty::BoundRegion>,\n+    crate::ty::Placeholder<crate::ty::BoundTy>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,\n     crate::ty::InferTy,"}, {"sha": "f6d79e94a511a05283e36aa4abd9dd8c0e0b2003", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -1632,7 +1632,7 @@ impl<'tcx> Region<'tcx> {\n                 ty::ReLateBound(_, br) => br.kind.get_name(),\n                 ty::ReFree(fr) => fr.bound_region.get_name(),\n                 ty::ReStatic => Some(kw::StaticLifetime),\n-                ty::RePlaceholder(placeholder) => placeholder.name.get_name(),\n+                ty::RePlaceholder(placeholder) => placeholder.bound.kind.get_name(),\n                 _ => None,\n             };\n \n@@ -1650,7 +1650,7 @@ impl<'tcx> Region<'tcx> {\n             ty::ReFree(fr) => fr.bound_region.is_named(),\n             ty::ReStatic => true,\n             ty::ReVar(..) => false,\n-            ty::RePlaceholder(placeholder) => placeholder.name.is_named(),\n+            ty::RePlaceholder(placeholder) => placeholder.bound.kind.is_named(),\n             ty::ReErased => false,\n             ty::ReError(_) => false,\n         }"}, {"sha": "848554e89efc920b62ac98716e11380e056b6aff", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -300,14 +300,20 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n             ty::Placeholder(placeholder) => match self.canonicalize_mode {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderTy(ty::Placeholder {\n                     universe: placeholder.universe,\n-                    name: BoundTyKind::Anon(self.variables.len() as u32),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_usize(self.variables.len()),\n+                        kind: ty::BoundTyKind::Anon(self.variables.len() as u32),\n+                    },\n                 }),\n                 CanonicalizeMode::Response { .. } => CanonicalVarKind::PlaceholderTy(placeholder),\n             },\n             ty::Param(_) => match self.canonicalize_mode {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderTy(ty::Placeholder {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundTyKind::Anon(self.variables.len() as u32),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_usize(self.variables.len()),\n+                        kind: ty::BoundTyKind::Anon(self.variables.len() as u32),\n+                    },\n                 }),\n                 CanonicalizeMode::Response { .. } => bug!(\"param ty in response: {t:?}\"),\n             },\n@@ -373,7 +379,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderConst(\n                     ty::Placeholder {\n                         universe: placeholder.universe,\n-                        name: ty::BoundVar::from(self.variables.len()),\n+                        bound: ty::BoundVar::from(self.variables.len()),\n                     },\n                     c.ty(),\n                 ),\n@@ -385,7 +391,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderConst(\n                     ty::Placeholder {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from(self.variables.len()),\n+                        bound: ty::BoundVar::from(self.variables.len()),\n                     },\n                     c.ty(),\n                 ),"}, {"sha": "826fc63ca06535b76ecadb40afb8a123a73e6027", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::ReLateBound(debruijn, br) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderRegion { universe, name: br.kind };\n+                let p = ty::PlaceholderRegion { universe, bound: br };\n                 self.mapped_regions.insert(p, br);\n                 self.infcx.tcx.mk_re_placeholder(p)\n             }\n@@ -790,7 +790,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderType { universe, name: bound_ty.kind };\n+                let p = ty::PlaceholderType { universe, bound: bound_ty };\n                 self.mapped_types.insert(p, bound_ty);\n                 self.infcx.tcx.mk_placeholder(p)\n             }\n@@ -809,7 +809,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::ConstKind::Bound(debruijn, bound_const) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderConst { universe, name: bound_const };\n+                let p = ty::PlaceholderConst { universe, bound: bound_const };\n                 self.mapped_consts.insert(p, bound_const);\n                 self.infcx.tcx.mk_const(p, ct.ty())\n             }"}, {"sha": "f7caf50c56ac0e9f8c561a921d839b586eb512a0", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4646b3df6ad09f5cda12742ee98309b659006039/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=4646b3df6ad09f5cda12742ee98309b659006039", "patch": "@@ -376,7 +376,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Placeholder(_placeholder) => {\n                 chalk_ir::TyKind::Placeholder(chalk_ir::PlaceholderIndex {\n                     ui: chalk_ir::UniverseIndex { counter: _placeholder.universe.as_usize() },\n-                    idx: _placeholder.name.expect_anon() as usize,\n+                    idx: _placeholder.bound.var.as_usize(),\n                 })\n             }\n             ty::Infer(_infer) => unimplemented!(),\n@@ -484,7 +484,10 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             ),\n             TyKind::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n-                name: ty::BoundTyKind::Anon(placeholder.idx as u32),\n+                bound: ty::BoundTy {\n+                    var: ty::BoundVar::from_usize(placeholder.idx),\n+                    kind: ty::BoundTyKind::Anon(placeholder.idx as u32),\n+                },\n             }),\n             TyKind::InferenceVar(_, _) => unimplemented!(),\n             TyKind::Dyn(_) => unimplemented!(),\n@@ -536,7 +539,10 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n             chalk_ir::LifetimeData::Placeholder(p) => tcx.mk_re_placeholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(p.ui.counter),\n-                name: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n+                bound: ty::BoundRegion {\n+                    var: ty::BoundVar::from_usize(p.idx),\n+                    kind: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n+                },\n             }),\n             chalk_ir::LifetimeData::Static => tcx.lifetimes.re_static,\n             chalk_ir::LifetimeData::Erased => tcx.lifetimes.re_erased,\n@@ -1090,15 +1096,21 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n             ty::Param(param) => match self.list.iter().position(|r| r == &param) {\n                 Some(idx) => self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::from_usize(0),\n-                    name: ty::BoundTyKind::Anon(idx as u32),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_usize(idx),\n+                        kind: ty::BoundTyKind::Anon(idx as u32),\n+                    },\n                 }),\n                 None => {\n                     self.list.push(param);\n                     let idx = self.list.len() - 1 + self.next_ty_placeholder;\n                     self.params.insert(idx as u32, param);\n                     self.tcx.mk_placeholder(ty::PlaceholderType {\n                         universe: ty::UniverseIndex::from_usize(0),\n-                        name: ty::BoundTyKind::Anon(idx as u32),\n+                        bound: ty::BoundTy {\n+                            var: ty::BoundVar::from_usize(idx),\n+                            kind: ty::BoundTyKind::Anon(idx as u32),\n+                        },\n                     })\n                 }\n             },\n@@ -1156,12 +1168,13 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseParamsSubstitutor<'tcx> {\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n-            ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, name }) => {\n-                match self.params.get(&name.expect_anon()) {\n-                    Some(&ty::ParamTy { index, name }) => self.tcx.mk_ty_param(index, name),\n-                    None => t,\n-                }\n-            }\n+            ty::Placeholder(ty::PlaceholderType {\n+                universe: ty::UniverseIndex::ROOT,\n+                bound: ty::BoundTy { kind: name, .. },\n+            }) => match self.params.get(&name.expect_anon()) {\n+                Some(&ty::ParamTy { index, name }) => self.tcx.mk_ty_param(index, name),\n+                None => t,\n+            },\n \n             _ => t.super_fold_with(self),\n         }\n@@ -1190,7 +1203,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n                 self.next_ty_placeholder =\n-                    self.next_ty_placeholder.max(p.name.expect_anon() as usize + 1);\n+                    self.next_ty_placeholder.max(p.bound.kind.expect_anon() as usize + 1);\n             }\n \n             _ => (),\n@@ -1202,7 +1215,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n-                if let ty::BoundRegionKind::BrAnon(anon, _) = p.name {\n+                if let ty::BoundRegionKind::BrAnon(anon, _) = p.bound.kind {\n                     self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);\n                 }\n                 // FIXME: This doesn't seem to handle BrNamed at all?"}]}