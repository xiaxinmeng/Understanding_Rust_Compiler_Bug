{"sha": "c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "node_id": "C_kwDOAAsO6NoAKGMxZDMwMWJiMjlmZDFiOWY2ZjQyZGUxMWQ1MjAxNWFlNDY0Y2M4YjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T08:59:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T08:59:55Z"}, "message": "Auto merge of #92167 - pierwill:chalk-update, r=jackh726\n\nUpdate chalk to 0.75.0\n\n- Compute flags in `intern_ty`\n- Remove `tracing-serde` from `PERMITTED_DEPENDENCIES`\n- Bump `tracing-tree` to 0.2.0\n- Bump `tracing-subscriber` to 0.3.3", "tree": {"sha": "0add89dabb63c6194550e7d4297fadbf29f178d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0add89dabb63c6194550e7d4297fadbf29f178d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "html_url": "https://github.com/rust-lang/rust/commit/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "390bb3406d6c15894139830f6a30e16a1e92053f", "url": "https://api.github.com/repos/rust-lang/rust/commits/390bb3406d6c15894139830f6a30e16a1e92053f", "html_url": "https://github.com/rust-lang/rust/commit/390bb3406d6c15894139830f6a30e16a1e92053f"}, {"sha": "155a4a87af9a3a7671e9df7394f5c1d4ab3d1927", "url": "https://api.github.com/repos/rust-lang/rust/commits/155a4a87af9a3a7671e9df7394f5c1d4ab3d1927", "html_url": "https://github.com/rust-lang/rust/commit/155a4a87af9a3a7671e9df7394f5c1d4ab3d1927"}], "stats": {"total": 294, "additions": 140, "deletions": 154}, "files": [{"sha": "cd50defbe6f6c9e7e3650cec12da96a863b503a1", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -492,9 +492,9 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.55.0\"\n+version = \"0.75.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3983193cacd81f0f924acb666b7fe5e1a0d81db9f113fa69203eda7ea8ce8b6c\"\n+checksum = \"d54e3b5f9e3425e6b119ff07568d8d006bfa5a8d6f78a9cbc3530b1e962e316c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -504,9 +504,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.55.0\"\n+version = \"0.75.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05a171ce5abbf0fbd06f221ab80ab182c7ef78603d23b858bc44e7ce8a86a396\"\n+checksum = \"bdc891073396b167163db77123b0a3c00088edc00466cecc5531f33e3e989523\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -517,9 +517,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.55.0\"\n+version = \"0.75.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a522f53af971e7678f472d687e053120157b3ae26e2ebd5ecbc0f5ab124f2cb6\"\n+checksum = \"2b79e5a1d04b79311e90c69356a2c62027853906a7e33b3e070b93c055fc3e8a\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-derive\",\n@@ -528,14 +528,14 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.55.0\"\n+version = \"0.75.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cdf79fb77a567e456a170f7ec84ea6584163d4ba3f13660cd182013d34ca667c\"\n+checksum = \"a5d2a1db6605aba70a58820bd80ac422b218913a510f1a40beef9efc5371ea1d\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n  \"ena\",\n- \"itertools 0.9.0\",\n+ \"itertools 0.10.1\",\n  \"petgraph\",\n  \"rustc-hash\",\n  \"tracing\",\n@@ -2107,9 +2107,9 @@ dependencies = [\n \n [[package]]\n name = \"matchers\"\n-version = \"0.0.1\"\n+version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1\"\n+checksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\n dependencies = [\n  \"regex-automata\",\n ]\n@@ -5122,9 +5122,9 @@ dependencies = [\n \n [[package]]\n name = \"synstructure\"\n-version = \"0.12.4\"\n+version = \"0.12.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b834f2d66f734cb897113e34aaff2f1ab4719ca946f9a7358dba8f8064148701\"\n+checksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -5447,49 +5447,34 @@ dependencies = [\n  \"tracing-core\",\n ]\n \n-[[package]]\n-name = \"tracing-serde\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fb65ea441fbb84f9f6748fd496cf7f63ec9af5bca94dd86456978d055e8eb28b\"\n-dependencies = [\n- \"serde\",\n- \"tracing-core\",\n-]\n-\n [[package]]\n name = \"tracing-subscriber\"\n-version = \"0.2.16\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8ab8966ac3ca27126141f7999361cc97dd6fb4b71da04c02044fa9045d98bb96\"\n+checksum = \"245da694cc7fc4729f3f418b304cb57789f1bed2a78c575407ab8a23f53cb4d3\"\n dependencies = [\n  \"ansi_term 0.12.1\",\n- \"chrono\",\n  \"lazy_static\",\n  \"matchers\",\n  \"parking_lot\",\n  \"regex\",\n- \"serde\",\n- \"serde_json\",\n  \"sharded-slab\",\n  \"smallvec\",\n  \"thread_local\",\n  \"tracing\",\n  \"tracing-core\",\n  \"tracing-log\",\n- \"tracing-serde\",\n ]\n \n [[package]]\n name = \"tracing-tree\"\n-version = \"0.1.9\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1712b40907f8d9bc2bc66763ab61dec914b7123d7149e59feb0d4e2a95fc4967\"\n+checksum = \"3ce989c9962c7f61fe084dd4a230eec784649dfc2392467c790007c3a6e134e7\"\n dependencies = [\n  \"ansi_term 0.12.1\",\n  \"atty\",\n- \"termcolor\",\n- \"tracing\",\n+ \"tracing-core\",\n  \"tracing-log\",\n  \"tracing-subscriber\",\n ]"}, {"sha": "2383a000687fa67238ceb7beca6aaabc847821f7", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -10,8 +10,8 @@ crate-type = [\"dylib\"]\n libc = \"0.2\"\n atty = \"0.2\"\n tracing = { version = \"0.1.28\" }\n-tracing-subscriber = { version = \"0.2.16\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n-tracing-tree = \"0.1.9\"\n+tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n+tracing-tree = \"0.2.0\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "a9db8469384ed9b34ee081975bd9521414b71e3d", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -29,7 +29,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.55.0\"\n+chalk-ir = \"0.75.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_session = { path = \"../rustc_session\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }"}, {"sha": "09a28249cce5ba18758bd34d9e609db4424c3201", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -206,179 +206,180 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         Some(write!(fmt, \"{:?}\", opaque_ty.opaque_ty_id))\n     }\n \n-    fn intern_ty(&self, ty: chalk_ir::TyData<Self>) -> Self::InternedType {\n-        Box::new(ty)\n+    fn intern_ty(self, ty: chalk_ir::TyKind<Self>) -> Self::InternedType {\n+        let flags = ty.compute_flags(self);\n+        Box::new(chalk_ir::TyData { kind: ty, flags: flags })\n     }\n \n-    fn ty_data<'a>(&self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n+    fn ty_data<'a>(self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n         ty\n     }\n \n-    fn intern_lifetime(&self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n+    fn intern_lifetime(self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n         Box::new(lifetime)\n     }\n \n     fn lifetime_data<'a>(\n-        &self,\n+        self,\n         lifetime: &'a Self::InternedLifetime,\n     ) -> &'a chalk_ir::LifetimeData<Self> {\n         &lifetime\n     }\n \n-    fn intern_const(&self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n+    fn intern_const(self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n         Box::new(constant)\n     }\n \n-    fn const_data<'a>(&self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n+    fn const_data<'a>(self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n         &constant\n     }\n \n     fn const_eq(\n-        &self,\n+        self,\n         _ty: &Self::InternedType,\n         c1: &Self::InternedConcreteConst,\n         c2: &Self::InternedConcreteConst,\n     ) -> bool {\n         c1 == c2\n     }\n \n-    fn intern_generic_arg(&self, data: chalk_ir::GenericArgData<Self>) -> Self::InternedGenericArg {\n+    fn intern_generic_arg(self, data: chalk_ir::GenericArgData<Self>) -> Self::InternedGenericArg {\n         Box::new(data)\n     }\n \n     fn generic_arg_data<'a>(\n-        &self,\n+        self,\n         data: &'a Self::InternedGenericArg,\n     ) -> &'a chalk_ir::GenericArgData<Self> {\n         &data\n     }\n \n-    fn intern_goal(&self, goal: chalk_ir::GoalData<Self>) -> Self::InternedGoal {\n+    fn intern_goal(self, goal: chalk_ir::GoalData<Self>) -> Self::InternedGoal {\n         Box::new(goal)\n     }\n \n-    fn goal_data<'a>(&self, goal: &'a Self::InternedGoal) -> &'a chalk_ir::GoalData<Self> {\n+    fn goal_data<'a>(self, goal: &'a Self::InternedGoal) -> &'a chalk_ir::GoalData<Self> {\n         &goal\n     }\n \n     fn intern_goals<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::Goal<Self>, E>>,\n     ) -> Result<Self::InternedGoals, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn goals_data<'a>(&self, goals: &'a Self::InternedGoals) -> &'a [chalk_ir::Goal<Self>] {\n+    fn goals_data<'a>(self, goals: &'a Self::InternedGoals) -> &'a [chalk_ir::Goal<Self>] {\n         goals\n     }\n \n     fn intern_substitution<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::GenericArg<Self>, E>>,\n     ) -> Result<Self::InternedSubstitution, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn substitution_data<'a>(\n-        &self,\n+        self,\n         substitution: &'a Self::InternedSubstitution,\n     ) -> &'a [chalk_ir::GenericArg<Self>] {\n         substitution\n     }\n \n     fn intern_program_clause(\n-        &self,\n+        self,\n         data: chalk_ir::ProgramClauseData<Self>,\n     ) -> Self::InternedProgramClause {\n         Box::new(data)\n     }\n \n     fn program_clause_data<'a>(\n-        &self,\n+        self,\n         clause: &'a Self::InternedProgramClause,\n     ) -> &'a chalk_ir::ProgramClauseData<Self> {\n         &clause\n     }\n \n     fn intern_program_clauses<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::ProgramClause<Self>, E>>,\n     ) -> Result<Self::InternedProgramClauses, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn program_clauses_data<'a>(\n-        &self,\n+        self,\n         clauses: &'a Self::InternedProgramClauses,\n     ) -> &'a [chalk_ir::ProgramClause<Self>] {\n         clauses\n     }\n \n     fn intern_quantified_where_clauses<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::QuantifiedWhereClause<Self>, E>>,\n     ) -> Result<Self::InternedQuantifiedWhereClauses, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn quantified_where_clauses_data<'a>(\n-        &self,\n+        self,\n         clauses: &'a Self::InternedQuantifiedWhereClauses,\n     ) -> &'a [chalk_ir::QuantifiedWhereClause<Self>] {\n         clauses\n     }\n \n     fn intern_generic_arg_kinds<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::VariableKind<Self>, E>>,\n     ) -> Result<Self::InternedVariableKinds, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn variable_kinds_data<'a>(\n-        &self,\n+        self,\n         parameter_kinds: &'a Self::InternedVariableKinds,\n     ) -> &'a [chalk_ir::VariableKind<Self>] {\n         parameter_kinds\n     }\n \n     fn intern_canonical_var_kinds<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::CanonicalVarKind<Self>, E>>,\n     ) -> Result<Self::InternedCanonicalVarKinds, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn canonical_var_kinds_data<'a>(\n-        &self,\n+        self,\n         canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n     ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n         canonical_var_kinds\n     }\n \n     fn intern_constraints<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>, E>>,\n     ) -> Result<Self::InternedConstraints, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn constraints_data<'a>(\n-        &self,\n+        self,\n         constraints: &'a Self::InternedConstraints,\n     ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n         constraints\n     }\n \n     fn intern_variances<E>(\n-        &self,\n+        self,\n         data: impl IntoIterator<Item = Result<chalk_ir::Variance, E>>,\n     ) -> Result<Self::InternedVariances, E> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n     fn variances_data<'a>(\n-        &self,\n+        self,\n         variances: &'a Self::InternedVariances,\n     ) -> &'a [chalk_ir::Variance] {\n         variances"}, {"sha": "f22751dc740c999d9428aef657058d74607f75fa", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -12,9 +12,9 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.55.0\"\n-chalk-solve = \"0.55.0\"\n-chalk-engine = \"0.55.0\"\n+chalk-ir = \"0.75.0\"\n+chalk-engine = \"0.75.0\"\n+chalk-solve = \"0.75.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "1b79e537634e9ea0c1ae1193b9bcee8dee52093e", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -46,7 +46,9 @@ impl<'tcx> RustIrDatabase<'tcx> {\n             .iter()\n             .map(|(wc, _)| wc.subst(self.interner.tcx, bound_vars))\n             .map(|wc| wc.fold_with(&mut regions_substitutor))\n-            .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect()\n+            .filter_map(|wc| LowerInto::<\n+                    Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>\n+                    >::lower_into(wc, self.interner)).collect()\n     }\n \n     fn bounds_for<T>(&self, def_id: DefId, bound_vars: SubstsRef<'tcx>) -> Vec<T>\n@@ -58,14 +60,14 @@ impl<'tcx> RustIrDatabase<'tcx> {\n             .explicit_item_bounds(def_id)\n             .iter()\n             .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n-            .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, &self.interner))\n+            .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n             .collect()\n     }\n }\n \n impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'tcx> {\n-    fn interner(&self) -> &RustInterner<'tcx> {\n-        &self.interner\n+    fn interner(&self) -> RustInterner<'tcx> {\n+        self.interner\n     }\n \n     fn associated_ty_data(\n@@ -83,7 +85,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             _ => unimplemented!(\"Not possible??\"),\n         }\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n-        let binders = binders_for(&self.interner, bound_vars);\n+        let binders = binders_for(self.interner, bound_vars);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n         let bounds = self.bounds_for(def_id, bound_vars);\n@@ -107,7 +109,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let trait_def = self.interner.tcx.trait_def(def_id);\n \n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n-        let binders = binders_for(&self.interner, bound_vars);\n+        let binders = binders_for(self.interner, bound_vars);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n@@ -170,7 +172,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let adt_def = adt_id.0;\n \n         let bound_vars = bound_vars_for_item(self.interner.tcx, adt_def.did);\n-        let binders = binders_for(&self.interner, bound_vars);\n+        let binders = binders_for(self.interner, bound_vars);\n \n         let where_clauses = self.where_clauses_for(adt_def.did, bound_vars);\n \n@@ -181,7 +183,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 fields: variant\n                     .fields\n                     .iter()\n-                    .map(|field| field.ty(self.interner.tcx, bound_vars).lower_into(&self.interner))\n+                    .map(|field| field.ty(self.interner.tcx, bound_vars).lower_into(self.interner))\n                     .collect(),\n             })\n             .collect();\n@@ -209,8 +211,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::AdtRepr<RustInterner<'tcx>>> {\n         let adt_def = adt_id.0;\n-        let int = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(i)).intern(&self.interner);\n-        let uint = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(i)).intern(&self.interner);\n+        let int = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(i)).intern(self.interner);\n+        let uint = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(i)).intern(self.interner);\n         Arc::new(chalk_solve::rust_ir::AdtRepr {\n             c: adt_def.repr.c(),\n             packed: adt_def.repr.packed(),\n@@ -241,25 +243,25 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Arc<chalk_solve::rust_ir::FnDefDatum<RustInterner<'tcx>>> {\n         let def_id = fn_def_id.0;\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n-        let binders = binders_for(&self.interner, bound_vars);\n+        let binders = binders_for(self.interner, bound_vars);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n         let sig = self.interner.tcx.fn_sig(def_id);\n         let (inputs_and_output, iobinders, _) = crate::chalk::lowering::collect_bound_vars(\n-            &self.interner,\n+            self.interner,\n             self.interner.tcx,\n             sig.inputs_and_output().subst(self.interner.tcx, bound_vars),\n         );\n \n         let argument_types = inputs_and_output[..inputs_and_output.len() - 1]\n             .iter()\n-            .map(|t| t.subst(self.interner.tcx, &bound_vars).lower_into(&self.interner))\n+            .map(|t| t.subst(self.interner.tcx, &bound_vars).lower_into(self.interner))\n             .collect();\n \n         let return_type = inputs_and_output[inputs_and_output.len() - 1]\n             .subst(self.interner.tcx, &bound_vars)\n-            .lower_into(&self.interner);\n+            .lower_into(self.interner);\n \n         let bound = chalk_solve::rust_ir::FnDefDatumBound {\n             inputs_and_output: chalk_ir::Binders::new(\n@@ -270,7 +272,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         };\n         Arc::new(chalk_solve::rust_ir::FnDefDatum {\n             id: fn_def_id,\n-            sig: sig.lower_into(&self.interner),\n+            sig: sig.lower_into(self.interner),\n             binders: chalk_ir::Binders::new(binders, bound),\n         })\n     }\n@@ -281,7 +283,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Arc<chalk_solve::rust_ir::ImplDatum<RustInterner<'tcx>>> {\n         let def_id = impl_id.0;\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n-        let binders = binders_for(&self.interner, bound_vars);\n+        let binders = binders_for(self.interner, bound_vars);\n \n         let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n         let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n@@ -292,7 +294,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n         let value = chalk_solve::rust_ir::ImplDatumBound {\n-            trait_ref: trait_ref.lower_into(&self.interner),\n+            trait_ref: trait_ref.lower_into(self.interner),\n             where_clauses,\n         };\n \n@@ -306,7 +308,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .collect();\n \n         Arc::new(chalk_solve::rust_ir::ImplDatum {\n-            polarity: self.interner.tcx.impl_polarity(def_id).lower_into(&self.interner),\n+            polarity: self.interner.tcx.impl_polarity(def_id).lower_into(self.interner),\n             binders: chalk_ir::Binders::new(binders, value),\n             impl_type: chalk_solve::rust_ir::ImplType::Local,\n             associated_ty_value_ids,\n@@ -336,10 +338,10 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             let mut regions_substitutor =\n                 lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n             let self_ty = self_ty.fold_with(&mut regions_substitutor);\n-            let lowered_ty = self_ty.lower_into(&self.interner);\n+            let lowered_ty = self_ty.lower_into(self.interner);\n \n-            parameters[0].assert_ty_ref(&self.interner).could_match(\n-                &self.interner,\n+            parameters[0].assert_ty_ref(self.interner).could_match(\n+                self.interner,\n                 self.unification_database(),\n                 &lowered_ty,\n             )\n@@ -452,13 +454,13 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .find_by_name_and_kind(self.interner.tcx, assoc_item.ident, assoc_item.kind, trait_id)\n             .unwrap();\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n-        let binders = binders_for(&self.interner, bound_vars);\n+        let binders = binders_for(self.interner, bound_vars);\n         let ty = self\n             .interner\n             .tcx\n             .type_of(def_id)\n             .subst(self.interner.tcx, bound_vars)\n-            .lower_into(&self.interner);\n+            .lower_into(self.interner);\n \n         Arc::new(chalk_solve::rust_ir::AssociatedTyValue {\n             impl_id: chalk_ir::ImplId(impl_id),\n@@ -521,13 +523,13 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 .filter_map(|bound| {\n                     LowerInto::<\n                     Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>\n-                >::lower_into(bound, &self.interner)\n+                >::lower_into(bound, self.interner)\n                 })\n                 .collect();\n \n         // Binder for the bound variable representing the concrete impl Trait type.\n         let existential_binder = chalk_ir::VariableKinds::from1(\n-            &self.interner,\n+            self.interner,\n             chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General),\n         );\n \n@@ -536,7 +538,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             where_clauses: chalk_ir::Binders::new(existential_binder, where_clauses),\n         };\n \n-        let binders = binders_for(&self.interner, bound_vars);\n+        let binders = binders_for(self.interner, bound_vars);\n         Arc::new(chalk_solve::rust_ir::OpaqueTyDatum {\n             opaque_ty_id,\n             bound: chalk_ir::Binders::new(binders, value),\n@@ -568,6 +570,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Unpin => lang_items.unpin_trait(),\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n             DiscriminantKind => lang_items.discriminant_kind_trait(),\n+            Generator => lang_items.generator_return(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }\n@@ -584,16 +587,16 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         self.interner\n             .tcx\n             .mk_ty(ty::Tuple(self.interner.tcx.intern_substs(&[])))\n-            .lower_into(&self.interner)\n+            .lower_into(self.interner)\n     }\n \n     fn closure_kind(\n         &self,\n         _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_solve::rust_ir::ClosureKind {\n-        let kind = &substs.as_slice(&self.interner)[substs.len(&self.interner) - 3];\n-        match kind.assert_ty_ref(&self.interner).kind(&self.interner) {\n+        let kind = &substs.as_slice(self.interner)[substs.len(self.interner) - 3];\n+        match kind.assert_ty_ref(self.interner).kind(self.interner) {\n             chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(int_ty)) => match int_ty {\n                 chalk_ir::IntTy::I8 => chalk_solve::rust_ir::ClosureKind::Fn,\n                 chalk_ir::IntTy::I16 => chalk_solve::rust_ir::ClosureKind::FnMut,\n@@ -610,26 +613,25 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_ir::Binders<chalk_solve::rust_ir::FnDefInputsAndOutputDatum<RustInterner<'tcx>>>\n     {\n-        let sig = &substs.as_slice(&self.interner)[substs.len(&self.interner) - 2];\n-        match sig.assert_ty_ref(&self.interner).kind(&self.interner) {\n+        let sig = &substs.as_slice(self.interner)[substs.len(self.interner) - 2];\n+        match sig.assert_ty_ref(self.interner).kind(self.interner) {\n             chalk_ir::TyKind::Function(f) => {\n-                let substitution = f.substitution.0.as_slice(&self.interner);\n-                let return_type =\n-                    substitution.last().unwrap().assert_ty_ref(&self.interner).clone();\n+                let substitution = f.substitution.0.as_slice(self.interner);\n+                let return_type = substitution.last().unwrap().assert_ty_ref(self.interner).clone();\n                 // Closure arguments are tupled\n-                let argument_tuple = substitution[0].assert_ty_ref(&self.interner);\n-                let argument_types = match argument_tuple.kind(&self.interner) {\n+                let argument_tuple = substitution[0].assert_ty_ref(self.interner);\n+                let argument_types = match argument_tuple.kind(self.interner) {\n                     chalk_ir::TyKind::Tuple(_len, substitution) => substitution\n-                        .iter(&self.interner)\n-                        .map(|arg| arg.assert_ty_ref(&self.interner))\n+                        .iter(self.interner)\n+                        .map(|arg| arg.assert_ty_ref(self.interner))\n                         .cloned()\n                         .collect(),\n                     _ => bug!(\"Expecting closure FnSig args to be tupled.\"),\n                 };\n \n                 chalk_ir::Binders::new(\n                     chalk_ir::VariableKinds::from_iter(\n-                        &self.interner,\n+                        self.interner,\n                         (0..f.num_binders).map(|_| chalk_ir::VariableKind::Lifetime),\n                     ),\n                     chalk_solve::rust_ir::FnDefInputsAndOutputDatum { argument_types, return_type },\n@@ -645,7 +647,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_ir::Binders<chalk_ir::Ty<RustInterner<'tcx>>> {\n         let inputs_and_output = self.closure_inputs_and_output(_closure_id, substs);\n-        let tuple = substs.as_slice(&self.interner).last().unwrap().assert_ty_ref(&self.interner);\n+        let tuple = substs.as_slice(self.interner).last().unwrap().assert_ty_ref(self.interner);\n         inputs_and_output.map_ref(|_| tuple.clone())\n     }\n \n@@ -654,8 +656,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n         substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n     ) -> chalk_ir::Substitution<RustInterner<'tcx>> {\n-        let substitution = &substs.as_slice(&self.interner)[0..substs.len(&self.interner) - 3];\n-        chalk_ir::Substitution::from_iter(&self.interner, substitution)\n+        let substitution = &substs.as_slice(self.interner)[0..substs.len(self.interner) - 3];\n+        chalk_ir::Substitution::from_iter(self.interner, substitution)\n     }\n \n     fn generator_datum(\n@@ -691,7 +693,7 @@ impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<\n     ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n         let variances = self.interner.tcx.variances_of(def_id.0);\n         chalk_ir::Variances::from_iter(\n-            &self.interner,\n+            self.interner,\n             variances.iter().map(|v| match v {\n                 ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n                 ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n@@ -707,7 +709,7 @@ impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<\n     ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n         let variances = self.interner.tcx.variances_of(def_id.0.did);\n         chalk_ir::Variances::from_iter(\n-            &self.interner,\n+            self.interner,\n             variances.iter().map(|v| match v {\n                 ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n                 ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n@@ -752,7 +754,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n }\n \n fn binders_for<'tcx>(\n-    interner: &RustInterner<'tcx>,\n+    interner: RustInterner<'tcx>,\n     bound_vars: SubstsRef<'tcx>,\n ) -> chalk_ir::VariableKinds<RustInterner<'tcx>> {\n     chalk_ir::VariableKinds::from_iter("}, {"sha": "cc07bfc50081646ddad396cc7c70de0c53c7467b", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -46,26 +46,26 @@ use std::ops::ControlFlow;\n /// Essentially an `Into` with a `&RustInterner` parameter\n crate trait LowerInto<'tcx, T> {\n     /// Lower a rustc construct (e.g., `ty::TraitPredicate`) to a chalk type, consuming `self`.\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> T;\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> T;\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Substitution<RustInterner<'tcx>>> for SubstsRef<'tcx> {\n     fn lower_into(\n         self,\n-        interner: &RustInterner<'tcx>,\n+        interner: RustInterner<'tcx>,\n     ) -> chalk_ir::Substitution<RustInterner<'tcx>> {\n         chalk_ir::Substitution::from_iter(interner, self.iter().map(|s| s.lower_into(interner)))\n     }\n }\n \n impl<'tcx> LowerInto<'tcx, SubstsRef<'tcx>> for &chalk_ir::Substitution<RustInterner<'tcx>> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> SubstsRef<'tcx> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> SubstsRef<'tcx> {\n         interner.tcx.mk_substs(self.iter(interner).map(|subst| subst.lower_into(interner)))\n     }\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::AliasTy<RustInterner<'tcx>>> for ty::ProjectionTy<'tcx> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::AliasTy<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::AliasTy<RustInterner<'tcx>> {\n         chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n             associated_ty_id: chalk_ir::AssocTypeId(self.item_def_id),\n             substitution: self.substs.lower_into(interner),\n@@ -78,7 +78,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n {\n     fn lower_into(\n         self,\n-        interner: &RustInterner<'tcx>,\n+        interner: RustInterner<'tcx>,\n     ) -> chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'tcx>>> {\n         let clauses = self.environment.into_iter().map(|predicate| {\n             let (predicate, binders, _named_regions) =\n@@ -122,18 +122,18 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n             chalk_ir::ProgramClauseData(chalk_ir::Binders::new(binders, value)).intern(interner)\n         });\n \n-        let goal: chalk_ir::GoalData<RustInterner<'tcx>> = self.goal.lower_into(&interner);\n+        let goal: chalk_ir::GoalData<RustInterner<'tcx>> = self.goal.lower_into(interner);\n         chalk_ir::InEnvironment {\n             environment: chalk_ir::Environment {\n-                clauses: chalk_ir::ProgramClauses::from_iter(&interner, clauses),\n+                clauses: chalk_ir::ProgramClauses::from_iter(interner, clauses),\n             },\n-            goal: goal.intern(&interner),\n+            goal: goal.intern(interner),\n         }\n     }\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predicate<'tcx> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::GoalData<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::GoalData<RustInterner<'tcx>> {\n         let (predicate, binders, _named_regions) =\n             collect_bound_vars(interner, interner.tcx, self.kind());\n \n@@ -214,7 +214,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n impl<'tcx> LowerInto<'tcx, chalk_ir::TraitRef<RustInterner<'tcx>>>\n     for rustc_middle::ty::TraitRef<'tcx>\n {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::TraitRef<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::TraitRef<RustInterner<'tcx>> {\n         chalk_ir::TraitRef {\n             trait_id: chalk_ir::TraitId(self.def_id),\n             substitution: self.substs.lower_into(interner),\n@@ -225,7 +225,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::TraitRef<RustInterner<'tcx>>>\n impl<'tcx> LowerInto<'tcx, chalk_ir::AliasEq<RustInterner<'tcx>>>\n     for rustc_middle::ty::ProjectionPredicate<'tcx>\n {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::AliasEq<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::AliasEq<RustInterner<'tcx>> {\n         chalk_ir::AliasEq {\n             ty: self.ty.lower_into(interner),\n             alias: self.projection_ty.lower_into(interner),\n@@ -234,7 +234,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::AliasEq<RustInterner<'tcx>>>\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::Ty<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::Ty<RustInterner<'tcx>> {\n         let int = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(i));\n         let uint = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(i));\n         let float = |f| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Float(f));\n@@ -336,7 +336,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n }\n \n impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> Ty<'tcx> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> Ty<'tcx> {\n         use chalk_ir::TyKind;\n \n         let kind = match self.kind(interner) {\n@@ -429,7 +429,7 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'tcx> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::Lifetime<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::Lifetime<RustInterner<'tcx>> {\n         use rustc_middle::ty::RegionKind::*;\n \n         match self {\n@@ -459,7 +459,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n }\n \n impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'tcx>> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> Region<'tcx> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> Region<'tcx> {\n         let kind = match self.data(interner) {\n             chalk_ir::LifetimeData::BoundVar(var) => ty::RegionKind::ReLateBound(\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n@@ -487,7 +487,7 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Const<RustInterner<'tcx>>> for ty::Const<'tcx> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::Const<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::Const<RustInterner<'tcx>> {\n         let ty = self.ty.lower_into(interner);\n         let value = match self.val {\n             ty::ConstKind::Value(val) => {\n@@ -503,7 +503,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Const<RustInterner<'tcx>>> for ty::Const<'t\n }\n \n impl<'tcx> LowerInto<'tcx, ty::Const<'tcx>> for &chalk_ir::Const<RustInterner<'tcx>> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> ty::Const<'tcx> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> ty::Const<'tcx> {\n         let data = self.data(interner);\n         let ty = data.ty.lower_into(interner);\n         let val = match data.value {\n@@ -520,7 +520,7 @@ impl<'tcx> LowerInto<'tcx, ty::Const<'tcx>> for &chalk_ir::Const<RustInterner<'t\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::GenericArg<RustInterner<'tcx>>> for GenericArg<'tcx> {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::GenericArg<RustInterner<'tcx>> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::GenericArg<RustInterner<'tcx>> {\n         match self.unpack() {\n             ty::subst::GenericArgKind::Type(ty) => {\n                 chalk_ir::GenericArgData::Ty(ty.lower_into(interner))\n@@ -539,7 +539,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GenericArg<RustInterner<'tcx>>> for Generic\n impl<'tcx> LowerInto<'tcx, ty::subst::GenericArg<'tcx>>\n     for &chalk_ir::GenericArg<RustInterner<'tcx>>\n {\n-    fn lower_into(self, interner: &RustInterner<'tcx>) -> ty::subst::GenericArg<'tcx> {\n+    fn lower_into(self, interner: RustInterner<'tcx>) -> ty::subst::GenericArg<'tcx> {\n         match self.data(interner) {\n             chalk_ir::GenericArgData::Ty(ty) => {\n                 let t: Ty<'tcx> = ty.lower_into(interner);\n@@ -566,7 +566,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n {\n     fn lower_into(\n         self,\n-        interner: &RustInterner<'tcx>,\n+        interner: RustInterner<'tcx>,\n     ) -> Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n         let (predicate, binders, _named_regions) =\n             collect_bound_vars(interner, interner.tcx, self.kind());\n@@ -610,7 +610,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n {\n     fn lower_into(\n         self,\n-        interner: &RustInterner<'tcx>,\n+        interner: RustInterner<'tcx>,\n     ) -> chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<RustInterner<'tcx>>> {\n         // `Self` has one binder:\n         // Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>\n@@ -680,7 +680,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n impl<'tcx> LowerInto<'tcx, chalk_ir::FnSig<RustInterner<'tcx>>>\n     for ty::Binder<'tcx, ty::FnSig<'tcx>>\n {\n-    fn lower_into(self, _interner: &RustInterner<'_>) -> FnSig<RustInterner<'tcx>> {\n+    fn lower_into(self, _interner: RustInterner<'_>) -> FnSig<RustInterner<'tcx>> {\n         chalk_ir::FnSig {\n             abi: self.abi(),\n             safety: match self.unsafety() {\n@@ -700,7 +700,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n {\n     fn lower_into(\n         self,\n-        interner: &RustInterner<'tcx>,\n+        interner: RustInterner<'tcx>,\n     ) -> Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>> {\n         let (predicate, binders, _named_regions) =\n             collect_bound_vars(interner, interner.tcx, self.kind());\n@@ -737,7 +737,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::TraitBound<RustInterner<'tcx>>>\n {\n     fn lower_into(\n         self,\n-        interner: &RustInterner<'tcx>,\n+        interner: RustInterner<'tcx>,\n     ) -> chalk_solve::rust_ir::TraitBound<RustInterner<'tcx>> {\n         chalk_solve::rust_ir::TraitBound {\n             trait_id: chalk_ir::TraitId(self.def_id),\n@@ -747,7 +747,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::TraitBound<RustInterner<'tcx>>>\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Mutability> for ast::Mutability {\n-    fn lower_into(self, _interner: &RustInterner<'tcx>) -> chalk_ir::Mutability {\n+    fn lower_into(self, _interner: RustInterner<'tcx>) -> chalk_ir::Mutability {\n         match self {\n             rustc_ast::Mutability::Mut => chalk_ir::Mutability::Mut,\n             rustc_ast::Mutability::Not => chalk_ir::Mutability::Not,\n@@ -756,7 +756,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Mutability> for ast::Mutability {\n }\n \n impl<'tcx> LowerInto<'tcx, ast::Mutability> for chalk_ir::Mutability {\n-    fn lower_into(self, _interner: &RustInterner<'tcx>) -> ast::Mutability {\n+    fn lower_into(self, _interner: RustInterner<'tcx>) -> ast::Mutability {\n         match self {\n             chalk_ir::Mutability::Mut => ast::Mutability::Mut,\n             chalk_ir::Mutability::Not => ast::Mutability::Not,\n@@ -765,7 +765,7 @@ impl<'tcx> LowerInto<'tcx, ast::Mutability> for chalk_ir::Mutability {\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::Polarity> for ty::ImplPolarity {\n-    fn lower_into(self, _interner: &RustInterner<'tcx>) -> chalk_solve::rust_ir::Polarity {\n+    fn lower_into(self, _interner: RustInterner<'tcx>) -> chalk_solve::rust_ir::Polarity {\n         match self {\n             ty::ImplPolarity::Positive => chalk_solve::rust_ir::Polarity::Positive,\n             ty::ImplPolarity::Negative => chalk_solve::rust_ir::Polarity::Negative,\n@@ -780,7 +780,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>\n {\n     fn lower_into(\n         self,\n-        interner: &RustInterner<'tcx>,\n+        interner: RustInterner<'tcx>,\n     ) -> chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>> {\n         let (trait_ref, own_substs) = self.projection_ty.trait_ref_and_own_substs(interner.tcx);\n         chalk_solve::rust_ir::AliasEqBound {\n@@ -802,7 +802,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>\n /// late-bound regions, even outside of fn contexts, since this is the best way\n /// to prep types for chalk lowering.\n crate fn collect_bound_vars<'tcx, T: TypeFoldable<'tcx>>(\n-    interner: &RustInterner<'tcx>,\n+    interner: RustInterner<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     ty: Binder<'tcx, T>,\n ) -> (T, chalk_ir::VariableKinds<RustInterner<'tcx>>, BTreeMap<DefId, u32>) {"}, {"sha": "a4d844e2eb8ccb4478a4a16f506b4e9a0633e7e9", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -63,7 +63,7 @@ crate fn evaluate_goal<'tcx>(\n     > = chalk_ir::UCanonical {\n         canonical: chalk_ir::Canonical {\n             binders: chalk_ir::CanonicalVarKinds::from_iter(\n-                &interner,\n+                interner,\n                 obligation.variables.iter().map(|v| match v.kind {\n                     CanonicalVarKind::PlaceholderTy(_ty) => unimplemented!(),\n                     CanonicalVarKind::PlaceholderRegion(_ui) => unimplemented!(),\n@@ -89,7 +89,7 @@ crate fn evaluate_goal<'tcx>(\n                     CanonicalVarKind::PlaceholderConst(_pc) => unimplemented!(),\n                 }),\n             ),\n-            value: obligation.value.lower_into(&interner),\n+            value: obligation.value.lower_into(interner),\n         },\n         universes: max_universe + 1,\n     };\n@@ -110,11 +110,11 @@ crate fn evaluate_goal<'tcx>(\n         use rustc_middle::infer::canonical::CanonicalVarInfo;\n \n         let mut var_values: IndexVec<BoundVar, GenericArg<'tcx>> = IndexVec::new();\n-        subst.as_slice(&interner).iter().for_each(|p| {\n-            var_values.push(p.lower_into(&interner));\n+        subst.as_slice(interner).iter().for_each(|p| {\n+            var_values.push(p.lower_into(interner));\n         });\n         let variables: Vec<_> = binders\n-            .iter(&interner)\n+            .iter(interner)\n             .map(|var| {\n                 let kind = match var.kind {\n                     chalk_ir::VariableKind::Ty(ty_kind) => CanonicalVarKind::Ty(match ty_kind {\n@@ -134,8 +134,7 @@ crate fn evaluate_goal<'tcx>(\n                 CanonicalVarInfo { kind }\n             })\n             .collect();\n-        let max_universe =\n-            binders.iter(&interner).map(|v| v.skip_kind().counter).max().unwrap_or(0);\n+        let max_universe = binders.iter(interner).map(|v| v.skip_kind().counter).max().unwrap_or(0);\n         let sol = Canonical {\n             max_universe: ty::UniverseIndex::from_usize(max_universe),\n             variables: tcx.intern_canonical_var_infos(&variables),"}, {"sha": "3c9b6f5006d590f1c9ab7c8e58fa54561b4d7879", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -19,11 +19,11 @@ itertools = \"0.9\"\n regex = \"1\"\n rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n tracing = \"0.1\"\n-tracing-tree = \"0.1.9\"\n+tracing-tree = \"0.2.0\"\n tera = { version = \"1.10.0\", default-features = false }\n \n [dependencies.tracing-subscriber]\n-version = \"0.2.13\"\n+version = \"0.3.3\"\n default-features = false\n features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n "}, {"sha": "23e49539969a04633b24a24172cb5f99a1fb8a10", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -9,7 +9,7 @@ diff = \"0.1.10\"\n unified-diff = \"0.2.1\"\n getopts = \"0.2\"\n tracing = \"0.1\"\n-tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n+tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n regex = \"1.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\""}, {"sha": "edc6f52db3bbab52772d8d105028e01287352b0a", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d301bb29fd1b9f6f42de11d52015ae464cc8b2/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=c1d301bb29fd1b9f6f42de11d52015ae464cc8b2", "patch": "@@ -208,7 +208,6 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"tracing-attributes\",\n     \"tracing-core\",\n     \"tracing-log\",\n-    \"tracing-serde\",\n     \"tracing-subscriber\",\n     \"tracing-tree\",\n     \"typenum\","}]}