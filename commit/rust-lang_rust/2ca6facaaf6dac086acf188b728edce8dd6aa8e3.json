{"sha": "2ca6facaaf6dac086acf188b728edce8dd6aa8e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTZmYWNhYWY2ZGFjMDg2YWNmMTg4YjcyOGVkY2U4ZGQ2YWE4ZTM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-27T20:19:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-28T23:32:56Z"}, "message": "Optimize `TyCtxt::hygienic_eq`.\n\nIt's measurably faster to avoid the context comparison when possible.\n\nThe commit also adds `hygienic_eq` in one appropriate place.", "tree": {"sha": "47444c761fffebd26a2f71a47df48729ea037805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47444c761fffebd26a2f71a47df48729ea037805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca6facaaf6dac086acf188b728edce8dd6aa8e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca6facaaf6dac086acf188b728edce8dd6aa8e3", "html_url": "https://github.com/rust-lang/rust/commit/2ca6facaaf6dac086acf188b728edce8dd6aa8e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca6facaaf6dac086acf188b728edce8dd6aa8e3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4", "html_url": "https://github.com/rust-lang/rust/commit/caea42f6c8ba8f5cc5ed04557ec5d072b107e7b4"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "96bb05cedb6e8ee4c94ce8e4afb90e2f8222797c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ca6facaaf6dac086acf188b728edce8dd6aa8e3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca6facaaf6dac086acf188b728edce8dd6aa8e3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2ca6facaaf6dac086acf188b728edce8dd6aa8e3", "patch": "@@ -2886,7 +2886,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {\n         variant.fields.iter().position(|field| {\n-            self.adjust_ident(ident, variant.def_id, hir::DUMMY_HIR_ID).0 == field.ident.modern()\n+            self.hygienic_eq(ident, field.ident, variant.def_id)\n         })\n     }\n \n@@ -3085,7 +3085,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed\n     /// definition's parent/scope to perform comparison.\n     pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {\n-        self.adjust_ident(use_name, def_parent_def_id, hir::DUMMY_HIR_ID).0 == def_name.modern()\n+        // We could use `Ident::eq` here, but we deliberately don't. The name\n+        // comparison fails frequently, and we want to avoid the expensive\n+        // `modern()` calls required for the span comparison whenever possible.\n+        use_name.name == def_name.name &&\n+        self.adjust_ident(use_name, def_parent_def_id, hir::DUMMY_HIR_ID).0.span.ctxt() ==\n+            def_name.modern().span.ctxt()\n     }\n \n     pub fn adjust_ident(self, mut ident: Ident, scope: DefId, block: hir::HirId) -> (Ident, DefId) {"}]}