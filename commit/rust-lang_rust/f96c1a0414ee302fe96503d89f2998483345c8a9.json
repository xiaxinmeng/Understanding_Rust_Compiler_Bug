{"sha": "f96c1a0414ee302fe96503d89f2998483345c8a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NmMxYTA0MTRlZTMwMmZlOTY1MDNkODlmMjk5ODQ4MzM0NWM4YTk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-01T11:39:19Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-01T11:39:19Z"}, "message": "Implement per-edition preludes", "tree": {"sha": "6de19b3c128809cd56641f70873c35f17974aced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6de19b3c128809cd56641f70873c35f17974aced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96c1a0414ee302fe96503d89f2998483345c8a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96c1a0414ee302fe96503d89f2998483345c8a9", "html_url": "https://github.com/rust-lang/rust/commit/f96c1a0414ee302fe96503d89f2998483345c8a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96c1a0414ee302fe96503d89f2998483345c8a9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71117e6812f87e014bc8e984e195a75e222ac227", "url": "https://api.github.com/repos/rust-lang/rust/commits/71117e6812f87e014bc8e984e195a75e222ac227", "html_url": "https://github.com/rust-lang/rust/commit/71117e6812f87e014bc8e984e195a75e222ac227"}], "stats": {"total": 459, "additions": 318, "deletions": 141}, "files": [{"sha": "219ed4c0710cbea3ecbfcfd8c927e78010dc9b09", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -682,9 +682,11 @@ pub struct S;\n //- /main.rs crate:main deps:std\n $0\n //- /std.rs crate:std\n-pub mod prelude { pub struct S; }\n-#[prelude_import]\n-pub use prelude::*;\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct S;\n+    }\n+}\n         \"#,\n             \"S\",\n             \"S\",\n@@ -700,11 +702,11 @@ pub use prelude::*;\n $0\n //- /std.rs crate:std\n pub mod prelude {\n-    pub enum Option<T> { Some(T), None }\n-    pub use Option::*;\n+    pub mod rust_2018 {\n+        pub enum Option<T> { Some(T), None }\n+        pub use Option::*;\n+    }\n }\n-#[prelude_import]\n-pub use prelude::*;\n         \"#;\n         check_found_path(code, \"None\", \"None\", \"None\", \"None\");\n         check_found_path(code, \"Some\", \"Some\", \"Some\", \"Some\");\n@@ -1080,11 +1082,11 @@ fn f() {\n }\n //- /std.rs crate:std\n pub mod prelude {\n-    pub enum Option { None }\n-    pub use Option::*;\n+    pub mod rust_2018 {\n+        pub enum Option { None }\n+        pub use Option::*;\n+    }\n }\n-#[prelude_import]\n-pub use prelude::*;\n         \"#,\n             \"None\",\n             \"None\","}, {"sha": "5984243055cab086269fd6a19674276dd33f5135", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -5,13 +5,13 @@\n \n use std::iter;\n \n-use base_db::{CrateId, FileId, ProcMacroId};\n+use base_db::{CrateId, Edition, FileId, ProcMacroId};\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::{\n     ast_id_map::FileAstId,\n     builtin_derive::find_builtin_derive,\n     builtin_macro::find_builtin_macro,\n-    name::{AsName, Name},\n+    name::{name, AsName, Name},\n     proc_macro::ProcMacroExpander,\n     FragmentKind, HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n@@ -67,14 +67,6 @@ pub(super) fn collect_defs(\n             def_map\n                 .extern_prelude\n                 .insert(dep.as_name(), dep_def_map.module_id(dep_def_map.root).into());\n-\n-            // look for the prelude\n-            // If the dependency defines a prelude, we overwrite an already defined\n-            // prelude. This is necessary to import the \"std\" prelude if a crate\n-            // depends on both \"core\" and \"std\".\n-            if dep_def_map.prelude.is_some() {\n-                def_map.prelude = dep_def_map.prelude;\n-            }\n         }\n     }\n \n@@ -283,6 +275,8 @@ impl DefCollector<'_> {\n \n         let attrs = item_tree.top_level_attrs(self.db, self.def_map.krate);\n         if attrs.cfg().map_or(true, |cfg| self.cfg_options.check(&cfg) != Some(false)) {\n+            self.inject_prelude(&attrs);\n+\n             // Process other crate-level attributes.\n             for attr in &*attrs {\n                 let attr_name = match attr.path.as_ident() {\n@@ -460,6 +454,58 @@ impl DefCollector<'_> {\n         }\n     }\n \n+    fn inject_prelude(&mut self, crate_attrs: &Attrs) {\n+        // See compiler/rustc_builtin_macros/src/standard_library_imports.rs\n+\n+        if crate_attrs.by_key(\"no_core\").exists() {\n+            // libcore does not get a prelude.\n+            return;\n+        }\n+\n+        let krate = if crate_attrs.by_key(\"no_std\").exists() {\n+            name![core]\n+        } else {\n+            let std = name![std];\n+            if self.def_map.extern_prelude().any(|(name, _)| *name == std) {\n+                std\n+            } else {\n+                // If `std` does not exist for some reason, fall back to core. This mostly helps\n+                // keep r-a's own tests minimal.\n+                name![core]\n+            }\n+        };\n+\n+        let edition = match self.def_map.edition {\n+            Edition::Edition2015 => name![rust_2015],\n+            Edition::Edition2018 => name![rust_2018],\n+            Edition::Edition2021 => name![rust_2021],\n+        };\n+\n+        let path_kind = if self.def_map.edition == Edition::Edition2015 {\n+            PathKind::Plain\n+        } else {\n+            PathKind::Abs\n+        };\n+        let path =\n+            ModPath::from_segments(path_kind, [krate, name![prelude], edition].iter().cloned());\n+\n+        let (per_ns, _) =\n+            self.def_map.resolve_path(self.db, self.def_map.root, &path, BuiltinShadowMode::Other);\n+\n+        match &per_ns.types {\n+            Some((ModuleDefId::ModuleId(m), _)) => {\n+                self.def_map.prelude = Some(*m);\n+            }\n+            _ => {\n+                log::error!(\n+                    \"could not resolve prelude path `{}` to module (resolved to {:?})\",\n+                    path,\n+                    per_ns.types\n+                );\n+            }\n+        }\n+    }\n+\n     /// Adds a definition of procedural macro `name` to the root module.\n     ///\n     /// # Notes on procedural macro resolution\n@@ -718,6 +764,8 @@ impl DefCollector<'_> {\n             match def.take_types() {\n                 Some(ModuleDefId::ModuleId(m)) => {\n                     if import.is_prelude {\n+                        // Note: This dodgily overrides the injected prelude. The rustc\n+                        // implementation seems to work the same though.\n                         cov_mark::hit!(std_prelude);\n                         self.def_map.prelude = Some(m);\n                     } else if m.krate != self.def_map.krate {"}, {"sha": "58c01354a4a12cfc8c8a6c7aeff21b69f736289f", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 100, "deletions": 31, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -246,15 +246,16 @@ fn std_prelude() {\n     check(\n         r#\"\n //- /main.rs crate:main deps:test_crate\n+#[prelude_import]\n+use ::test_crate::prelude::*;\n+\n use Foo::*;\n \n //- /lib.rs crate:test_crate\n-mod prelude;\n-#[prelude_import]\n-use prelude::*;\n+pub mod prelude;\n \n //- /prelude.rs\n-pub enum Foo { Bar, Baz };\n+pub enum Foo { Bar, Baz }\n \"#,\n         expect![[r#\"\n             crate\n@@ -466,6 +467,74 @@ pub struct Bar;\n     );\n }\n \n+#[test]\n+fn no_std_prelude() {\n+    check(\n+        r#\"\n+        //- /main.rs crate:main deps:core,std\n+        #![cfg_attr(not(never), no_std)]\n+        use Rust;\n+\n+        //- /core.rs crate:core\n+        pub mod prelude {\n+            pud mod rust_2018 {\n+                pub struct Rust;\n+            }\n+        }\n+        //- /std.rs crate:std deps:core\n+        pub mod prelude {\n+            pud mod rust_2018 {\n+            }\n+        }\n+    \"#,\n+        expect![[r#\"\n+        crate\n+        Rust: t v\n+    \"#]],\n+    );\n+}\n+\n+#[test]\n+fn edition_specific_preludes() {\n+    // We can't test the 2015 prelude here since you can't reexport its contents with 2015's\n+    // absolute paths.\n+\n+    check(\n+        r#\"\n+        //- /main.rs edition:2018 crate:main deps:std\n+        use Rust2018;\n+\n+        //- /std.rs crate:std\n+        pub mod prelude {\n+            pud mod rust_2018 {\n+                pub struct Rust2018;\n+            }\n+        }\n+    \"#,\n+        expect![[r#\"\n+        crate\n+        Rust2018: t v\n+    \"#]],\n+    );\n+    check(\n+        r#\"\n+        //- /main.rs edition:2021 crate:main deps:std\n+        use Rust2021;\n+\n+        //- /std.rs crate:std\n+        pub mod prelude {\n+            pud mod rust_2021 {\n+                pub struct Rust2021;\n+            }\n+        }\n+    \"#,\n+        expect![[r#\"\n+        crate\n+        Rust2021: t v\n+    \"#]],\n+    );\n+}\n+\n #[test]\n fn std_prelude_takes_precedence_above_core_prelude() {\n     check(\n@@ -474,18 +543,18 @@ fn std_prelude_takes_precedence_above_core_prelude() {\n use {Foo, Bar};\n \n //- /std.rs crate:std deps:core\n-#[prelude_import]\n-pub use self::prelude::*;\n-mod prelude {\n-    pub struct Foo;\n-    pub use core::prelude::Bar;\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct Foo;\n+        pub use core::prelude::rust_2018::Bar;\n+    }\n }\n \n //- /core.rs crate:core\n-#[prelude_import]\n-pub use self::prelude::*;\n-mod prelude {\n-    pub struct Bar;\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct Bar;\n+    }\n }\n \"#,\n         expect![[r#\"\n@@ -504,15 +573,15 @@ fn cfg_not_test() {\n use {Foo, Bar, Baz};\n \n //- /lib.rs crate:std\n-#[prelude_import]\n-pub use self::prelude::*;\n-mod prelude {\n-    #[cfg(test)]\n-    pub struct Foo;\n-    #[cfg(not(test))]\n-    pub struct Bar;\n-    #[cfg(all(not(any()), feature = \"foo\", feature = \"bar\", opt = \"42\"))]\n-    pub struct Baz;\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        #[cfg(test)]\n+        pub struct Foo;\n+        #[cfg(not(test))]\n+        pub struct Bar;\n+        #[cfg(all(not(any()), feature = \"foo\", feature = \"bar\", opt = \"42\"))]\n+        pub struct Baz;\n+    }\n }\n \"#,\n         expect![[r#\"\n@@ -532,15 +601,15 @@ fn cfg_test() {\n use {Foo, Bar, Baz};\n \n //- /lib.rs crate:std cfg:test,feature=foo,feature=bar,opt=42\n-#[prelude_import]\n-pub use self::prelude::*;\n-mod prelude {\n-    #[cfg(test)]\n-    pub struct Foo;\n-    #[cfg(not(test))]\n-    pub struct Bar;\n-    #[cfg(all(not(any()), feature = \"foo\", feature = \"bar\", opt = \"42\"))]\n-    pub struct Baz;\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        #[cfg(test)]\n+        pub struct Foo;\n+        #[cfg(not(test))]\n+        pub struct Bar;\n+        #[cfg(all(not(any()), feature = \"foo\", feature = \"bar\", opt = \"42\"))]\n+        pub struct Baz;\n+    }\n }\n \"#,\n         expect![[r#\""}, {"sha": "37161843864a2974ccdf2b0eb4fd0001674ccd7c", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -264,7 +264,7 @@ fn prelude_is_macro_use() {\n     cov_mark::check!(prelude_is_macro_use);\n     check(\n         r#\"\n-//- /main.rs crate:main deps:foo\n+//- /main.rs crate:main deps:std\n structs!(Foo);\n structs_priv!(Bar);\n structs_outside!(Out);\n@@ -276,21 +276,20 @@ mod bar;\n structs!(Baz);\n crate::structs!(MacroNotResolved3);\n \n-//- /lib.rs crate:foo\n-#[prelude_import]\n-use self::prelude::*;\n-\n-mod prelude {\n-    #[macro_export]\n-    macro_rules! structs {\n-        ($i:ident) => { struct $i; }\n-    }\n-\n-    mod priv_mod {\n+//- /lib.rs crate:std\n+pub mod prelude {\n+    pub mod rust_2018 {\n         #[macro_export]\n-        macro_rules! structs_priv {\n+        macro_rules! structs {\n             ($i:ident) => { struct $i; }\n         }\n+\n+        mod priv_mod {\n+            #[macro_export]\n+            macro_rules! structs_priv {\n+                ($i:ident) => { struct $i; }\n+            }\n+        }\n     }\n }\n \n@@ -617,12 +616,11 @@ fn macro_dollar_crate_is_correct_in_indirect_deps() {\n foo!();\n \n //- /std.rs crate:std deps:core\n-#[prelude_import]\n-use self::prelude::*;\n-\n pub use core::foo;\n \n-mod prelude {}\n+pub mod prelude {\n+    pub mod rust_2018 {}\n+}\n \n #[macro_use]\n mod std_macros;"}, {"sha": "abc6753bf13ce1ee050be37e6e8b0839b1ec6c4a", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -176,6 +176,10 @@ pub mod known {\n         result,\n         boxed,\n         option,\n+        prelude,\n+        rust_2015,\n+        rust_2018,\n+        rust_2021,\n         // Components of known path (type name)\n         Iterator,\n         IntoIterator,"}, {"sha": "d14103aab145f1687cc425ecfc3f5511349318dd", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -982,14 +982,18 @@ fn test() {\n }         //^ S\n \n //- /lib.rs crate:core\n-#[prelude_import]\n-use clone::*;\n-mod clone {\n-    trait Clone {\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        #[rustc_builtin_macro]\n+        pub macro Clone {}\n+        pub use crate::clone::Clone;\n+    }\n+}\n+\n+pub mod clone {\n+    pub trait Clone {\n         fn clone(&self) -> Self;\n     }\n-    #[rustc_builtin_macro]\n-    macro Clone {}\n }\n \"#,\n     );\n@@ -1001,14 +1005,22 @@ fn infer_derive_clone_in_core() {\n         r#\"\n //- /lib.rs crate:core\n #[prelude_import]\n-use clone::*;\n-mod clone {\n-    trait Clone {\n+use prelude::rust_2018::*;\n+\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        #[rustc_builtin_macro]\n+        pub macro Clone {}\n+        pub use crate::clone::Clone;\n+    }\n+}\n+\n+pub mod clone {\n+    pub trait Clone {\n         fn clone(&self) -> Self;\n     }\n-    #[rustc_builtin_macro]\n-    macro Clone {}\n }\n+\n #[derive(Clone)]\n pub struct S;\n \n@@ -1037,14 +1049,18 @@ fn test() {\n }\n \n //- /lib.rs crate:core\n-#[prelude_import]\n-use clone::*;\n-mod clone {\n-    trait Clone {\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        #[rustc_builtin_macro]\n+        pub macro Clone {}\n+        pub use crate::clone::Clone;\n+    }\n+}\n+\n+pub mod clone {\n+    pub trait Clone {\n         fn clone(&self) -> Self;\n     }\n-    #[rustc_builtin_macro]\n-    macro Clone {}\n }\n \"#,\n     );"}, {"sha": "058eb91299d302a073d6db149990858832ce7e3e", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -796,7 +796,7 @@ fn test() {\n fn method_resolution_trait_from_prelude() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:other_crate\n+//- /main.rs crate:main deps:core\n struct S;\n impl Clone for S {}\n \n@@ -805,12 +805,12 @@ fn test() {\n           //^ S\n }\n \n-//- /lib.rs crate:other_crate\n-#[prelude_import] use foo::*;\n-\n-mod foo {\n-    trait Clone {\n-        fn clone(&self) -> Self;\n+//- /lib.rs crate:core\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub trait Clone {\n+            fn clone(&self) -> Self;\n+        }\n     }\n }\n \"#,"}, {"sha": "1019e783b54ad38918496d17730fc717107a304e", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -426,11 +426,12 @@ fn test() {\n \n //- /std.rs crate:std\n #[prelude_import]\n-use prelude::*;\n-\n+use self::prelude::rust_2018::*;\n pub mod prelude {\n-    pub use crate::iter::Iterator;\n-    pub use crate::option::Option;\n+    pub mod rust_2018 {\n+        pub use crate::iter::Iterator;\n+        pub use crate::option::Option;\n+    }\n }\n \n pub mod iter {"}, {"sha": "3418ed21e7c3b6ea65fdaa2a1521f6966f3baf90", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -2712,3 +2712,23 @@ fn main() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn prelude_2015() {\n+    check_types(\n+        r#\"\n+//- /main.rs edition:2015 crate:main deps:core\n+fn f() {\n+    Rust;\n+     //^ Rust\n+}\n+\n+//- /core.rs crate:core\n+pub mod prelude {\n+    pub mod rust_2015 {\n+        pub struct Rust;\n+    }\n+}\n+    \"#,\n+    );\n+}"}, {"sha": "588f0d1d41bbeabffec300d78b9d6e6b2a34865f", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -20,11 +20,12 @@ fn test() {\n } //^ u64\n \n //- /core.rs crate:core\n-#[prelude_import] use future::*;\n-mod future {\n-    #[lang = \"future_trait\"]\n-    trait Future {\n-        type Output;\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        #[lang = \"future_trait\"]\n+        pub trait Future {\n+            type Output;\n+        }\n     }\n }\n \"#,\n@@ -136,17 +137,15 @@ fn test() {\n } //^ i32\n \n //- /core.rs crate:core\n-#[prelude_import] use ops::*;\n-mod ops {\n-    trait Try {\n+pub mod ops {\n+    pub trait Try {\n         type Ok;\n         type Error;\n     }\n }\n \n-#[prelude_import] use result::*;\n-mod result {\n-    enum Result<O, E> {\n+pub mod result {\n+    pub enum Result<O, E> {\n         Ok(O),\n         Err(E)\n     }\n@@ -156,6 +155,12 @@ mod result {\n         type Error = E;\n     }\n }\n+\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub use crate::{result::*, ops::*};\n+    }\n+}\n \"#,\n     );\n }\n@@ -190,8 +195,7 @@ mov convert {\n     impl<T> From<T> for T {}\n }\n \n-#[prelude_import] use result::*;\n-mod result {\n+pub mod result {\n     use crate::convert::From;\n     use crate::ops::{Try, FromResidual};\n \n@@ -208,6 +212,12 @@ mod result {\n \n     impl<T, E, F: From<E>> FromResidual<Result<Infallible, E>> for Result<T, F> {}\n }\n+\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub use crate::result::*;\n+    }\n+}\n \"#,\n     );\n }\n@@ -217,6 +227,7 @@ fn infer_for_loop() {\n     check_types(\n         r#\"\n //- /main.rs crate:main deps:core,alloc\n+#![no_std]\n use alloc::collections::Vec;\n \n fn test() {\n@@ -228,14 +239,19 @@ fn test() {\n }\n \n //- /core.rs crate:core\n-#[prelude_import] use iter::*;\n-mod iter {\n-    trait IntoIterator {\n+pub mod iter {\n+    pub trait IntoIterator {\n         type Item;\n     }\n }\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub use crate::iter::*;\n+    }\n+}\n \n //- /alloc.rs crate:alloc deps:core\n+#![no_std]\n mod collections {\n     struct Vec<T> {}\n     impl<T> Vec<T> {"}, {"sha": "bd955aa85cc154e58744641e0528cd44a9dfdf77", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -385,10 +385,11 @@ fn foo() {\n fn foo() { let x: $0 }\n \n //- /std/lib.rs crate:std\n-#[prelude_import]\n-use prelude::*;\n-\n-mod prelude { struct Option; }\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct Option;\n+    }\n+}\n \"#,\n             expect![[r#\"\n                 fn foo()  fn()\n@@ -406,12 +407,10 @@ mod prelude { struct Option; }\n fn f() {$0}\n \n //- /std/lib.rs crate:std\n-#[prelude_import]\n-pub use prelude::*;\n-\n-#[macro_use]\n-mod prelude {\n-    pub use crate::concat;\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub use crate::concat;\n+    }\n }\n \n mod macros {\n@@ -436,16 +435,18 @@ mod macros {\n fn foo() { let x: $0 }\n \n //- /core/lib.rs crate:core\n-#[prelude_import]\n-use prelude::*;\n-\n-mod prelude { struct Option; }\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct Option;\n+    }\n+}\n \n //- /std/lib.rs crate:std deps:core\n-#[prelude_import]\n-use prelude::*;\n-\n-mod prelude { struct String; }\n+pub mod prelude {\n+    pub mod rust_2018 {\n+        pub struct String;\n+    }\n+}\n \"#,\n             expect![[r#\"\n                 fn foo()  fn()"}, {"sha": "3128519661f2f4e250c258ebe964b33f260f0daf", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96c1a0414ee302fe96503d89f2998483345c8a9/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=f96c1a0414ee302fe96503d89f2998483345c8a9", "patch": "@@ -128,17 +128,19 @@ pub mod option {\n }\n \n pub mod prelude {\n-    pub use crate::{\n-        cmp::Ord,\n-        convert::{From, Into},\n-        default::Default,\n-        iter::{IntoIterator, Iterator},\n-        ops::{Fn, FnMut, FnOnce},\n-        option::Option::{self, *},\n-    };\n+    pub mod rust_2018 {\n+        pub use crate::{\n+            cmp::Ord,\n+            convert::{From, Into},\n+            default::Default,\n+            iter::{IntoIterator, Iterator},\n+            ops::{Fn, FnMut, FnOnce},\n+            option::Option::{self, *},\n+        };\n+    }\n }\n #[prelude_import]\n-pub use prelude::*;\n+pub use prelude::rust_2018::*;\n //- /libstd.rs crate:std deps:core\n //! Signatures of traits, types and functions from the std lib for use in tests.\n \n@@ -148,4 +150,4 @@ mod return_keyword {}\n /// Docs for prim_str\n mod prim_str {}\n \n-pub use core::ops;\n\\ No newline at end of file\n+pub use core::ops;"}]}