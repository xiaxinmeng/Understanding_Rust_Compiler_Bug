{"sha": "8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjQyYmEwZmJkMDMyNmE4ZmZiZTZlYzJmZjBhYmZmYWZmYTFhOGY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-15T19:34:50Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-26T12:34:49Z"}, "message": "Make invalid integer operation messages consistent", "tree": {"sha": "31e563a5873cceb9977c1a5efc12c4a985a3bb62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e563a5873cceb9977c1a5efc12c4a985a3bb62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "html_url": "https://github.com/rust-lang/rust/commit/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "html_url": "https://github.com/rust-lang/rust/commit/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52"}], "stats": {"total": 642, "additions": 323, "deletions": 319}, "files": [{"sha": "f9d84bb852f3149d8be17011300384ff6429ed20", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -1300,49 +1300,49 @@ impl<O> AssertKind<O> {\n         match self {\n             BoundsCheck { ref len, ref index } => write!(\n                 f,\n-                \"\\\"index out of bounds: the len is {{}} but the index is {{}}\\\", {:?}, {:?}\",\n+                \"\\\"index out of bounds: the length is {{}} but the index is {{}}\\\", {:?}, {:?}\",\n                 len, index\n             ),\n \n             OverflowNeg(op) => {\n-                write!(f, \"\\\"attempt to negate {{}} which would overflow\\\", {:?}\", op)\n+                write!(f, \"\\\"attempt to negate `{{}}`, which would overflow\\\", {:?}\", op)\n             }\n-            DivisionByZero(op) => write!(f, \"\\\"attempt to divide {{}} by zero\\\", {:?}\", op),\n+            DivisionByZero(op) => write!(f, \"\\\"attempt to divide `{{}}` by zero\\\", {:?}\", op),\n             RemainderByZero(op) => write!(\n                 f,\n-                \"\\\"attempt to calculate the remainder of {{}} with a divisor of zero\\\", {:?}\",\n+                \"\\\"attempt to calculate the remainder of `{{}}` with a divisor of zero\\\", {:?}\",\n                 op\n             ),\n             Overflow(BinOp::Add, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} + {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} + {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Sub, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} - {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} - {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Mul, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} * {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} * {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Div, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute `{{}} / {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute `{{}} / {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Rem, l, r) => write!(\n                 f,\n-                \"\\\"attempt to compute the remainder of `{{}} % {{}}` which would overflow\\\", {:?}, {:?}\",\n+                \"\\\"attempt to compute the remainder of `{{}} % {{}}`, which would overflow\\\", {:?}, {:?}\",\n                 l, r\n             ),\n             Overflow(BinOp::Shr, _, r) => {\n-                write!(f, \"\\\"attempt to shift right by {{}} which would overflow\\\", {:?}\", r)\n+                write!(f, \"\\\"attempt to shift right by `{{}}`, which would overflow\\\", {:?}\", r)\n             }\n             Overflow(BinOp::Shl, _, r) => {\n-                write!(f, \"\\\"attempt to shift left by {{}} which would overflow\\\", {:?}\", r)\n+                write!(f, \"\\\"attempt to shift left by `{{}}`, which would overflow\\\", {:?}\", r)\n             }\n             _ => write!(f, \"\\\"{}\\\"\", self.description()),\n         }\n@@ -1353,36 +1353,40 @@ impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use AssertKind::*;\n         match self {\n-            BoundsCheck { ref len, ref index } => {\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index)\n-            }\n-            OverflowNeg(op) => write!(f, \"attempt to negate {:#?} which would overflow\", op),\n-            DivisionByZero(op) => write!(f, \"attempt to divide {:#?} by zero\", op),\n-            RemainderByZero(op) => {\n-                write!(f, \"attempt to calculate the remainder of {:#?} with a divisor of zero\", op)\n-            }\n+            BoundsCheck { ref len, ref index } => write!(\n+                f,\n+                \"index out of bounds: the length is {:?} but the index is {:?}\",\n+                len, index\n+            ),\n+            OverflowNeg(op) => write!(f, \"attempt to negate `{:#?}`, which would overflow\", op),\n+            DivisionByZero(op) => write!(f, \"attempt to divide `{:#?}` by zero\", op),\n+            RemainderByZero(op) => write!(\n+                f,\n+                \"attempt to calculate the remainder of `{:#?}` with a divisor of zero\",\n+                op\n+            ),\n             Overflow(BinOp::Add, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} + {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} + {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Sub, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} - {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} - {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Mul, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} * {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} * {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Div, l, r) => {\n-                write!(f, \"attempt to compute `{:#?} / {:#?}` which would overflow\", l, r)\n+                write!(f, \"attempt to compute `{:#?} / {:#?}`, which would overflow\", l, r)\n             }\n             Overflow(BinOp::Rem, l, r) => write!(\n                 f,\n-                \"attempt to compute the remainder of `{:#?} % {:#?}` which would overflow\",\n+                \"attempt to compute the remainder of `{:#?} % {:#?}`, which would overflow\",\n                 l, r\n             ),\n             Overflow(BinOp::Shr, _, r) => {\n-                write!(f, \"attempt to shift right by {:#?} which would overflow\", r)\n+                write!(f, \"attempt to shift right by `{:#?}`, which would overflow\", r)\n             }\n             Overflow(BinOp::Shl, _, r) => {\n-                write!(f, \"attempt to shift left by {:#?} which would overflow\", r)\n+                write!(f, \"attempt to shift left by `{:#?}`, which would overflow\", r)\n             }\n             _ => write!(f, \"{}\", self.description()),\n         }"}, {"sha": "4021dfcc6eb7d462d59c8c104b4d82ac71448b8c", "filename": "src/test/ui/array_const_index-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -1,6 +1,6 @@\n const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n-//~^ index out of bounds: the len is 0 but the index is 1\n+//~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n \n fn main() {"}, {"sha": "7ccc3aa087e1e4f48f30bb08a8634ce9bfb5d943", "filename": "src/test/ui/array_const_index-0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = (&A)[1];\n    | ---------------^^^^^^^-\n    |                |\n-   |                index out of bounds: the len is 0 but the index is 1\n+   |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "d0ee1796c0ffcdccb6f27c954f46651bcda654e1", "filename": "src/test/ui/array_const_index-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -1,6 +1,6 @@\n const A: [i32; 0] = [];\n const B: i32 = A[1];\n-//~^ index out of bounds: the len is 0 but the index is 1\n+//~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n \n fn main() {"}, {"sha": "37de61b9df01bb1fde86ee38dbcc27c20515f56d", "filename": "src/test/ui/array_const_index-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = A[1];\n    | ---------------^^^^-\n    |                |\n-   |                index out of bounds: the len is 0 but the index is 1\n+   |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "1497633c26af95196fcd00c2e11dca8249fde900", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const B: u8 = Self::A + 1;\n    |     --------------^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `u8::MAX + 1_u8` which would overflow\n+   |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.noopt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,53 +2,53 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide 1_i32 by zero\n+   |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide 1_i32 by zero\n+   |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n-   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,53 +2,53 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide 1_i32 by zero\n+   |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide 1_i32 by zero\n+   |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n-   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,53 +2,53 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n-   |                      ^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n-   |                                   ^^^^^^^^^^^ attempt to negate i32::MIN which would overflow\n+   |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n-   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n-   |                      ^^^^^ attempt to divide 1_i32 by zero\n+   |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n-   |                                   ^^^^^ attempt to divide 1_i32 by zero\n+   |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n-   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n   --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n-   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f95d6d2d5709ccaff427531ed56299fb5bca5ddb", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^^^^^ attempt to compute `0_usize - 1_usize` which would overflow\n+   |                                 ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "276fb716d4255e4f5873136ca9c5f762d51b29d5", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this operation will panic at runtime\n   --> $DIR/ice-assert-fail-div-by-zero.rs:11:5\n    |\n LL |     f.0 / 0;\n-   |     ^^^^^^^ attempt to divide _ by zero\n+   |     ^^^^^^^ attempt to divide `_` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/ice-assert-fail-div-by-zero.rs:5:9"}, {"sha": "5916ea6d323e603e9e039d775912d1bbd5b3952a", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this operation will panic at runtime\n   --> $DIR/array-literal-index-oob.rs:7:8\n    |\n LL |     &{ [1, 2, 3][4] };\n-   |        ^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 4\n+   |        ^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 4\n    |\n note: the lint level is defined here\n   --> $DIR/array-literal-index-oob.rs:4:20"}, {"sha": "db64ebe0c4ae094c8e9752038555bfcb9f113f30", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n    |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                                  |\n-   |                                  index out of bounds: the len is 1 but the index is 4\n+   |                                  index out of bounds: the length is 1 but the index is 4\n    |\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9"}, {"sha": "eca2fe18ab96acd8ac756fc30cc7da94b42fe4b2", "filename": "src/test/ui/consts/const-array-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -5,7 +5,7 @@ const BAR: usize = FOO[5]; // no error, because the error below occurs before re\n \n const BLUB: [u32; FOO[4]] = [5, 6];\n //~^ ERROR evaluation of constant value failed [E0080]\n-//~| index out of bounds: the len is 3 but the index is 4\n+//~| index out of bounds: the length is 3 but the index is 4\n \n fn main() {\n     let _ = BAR;"}, {"sha": "1aa3e88e5209702f4a60896c7df402d38523231c", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-array-oob.rs:6:19\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n-   |                   ^^^^^^ index out of bounds: the len is 3 but the index is 4\n+   |                   ^^^^^^ index out of bounds: the length is 3 but the index is 4\n \n error: aborting due to previous error\n "}, {"sha": "36b36db7c18bcea5febd2d528c29c837183d222a", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -std::i8::MIN;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to negate i8::MIN which would overflow\n+   |                   attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n@@ -18,31 +18,31 @@ error: any use of this value will cause an error\n LL | pub const B: u8 = 200u8 + 200u8;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `200_u8 + 200_u8` which would overflow\n+   |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n    | ------------------^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `200_u8 * 4_u8` which would overflow\n+   |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:6:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ------------------^^^^^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to compute `42_u8 - 43_u8` which would overflow\n+   |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const E: u8 = [5u8][1];\n    | ------------------^^^^^^^^-\n    |                   |\n-   |                   index out of bounds: the len is 1 but the index is 1\n+   |                   index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5b688d4c6d84c903ec83a100597f34108511e852", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -std::i8::MIN;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n-   |                   attempt to negate i8::MIN which would overflow\n+   |                   attempt to negate `i8::MIN`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9"}, {"sha": "693b74c2c2f61c209546db18239b50880e89fd4d", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | const FOO: u8 = [5u8][1];\n    | ----------------^^^^^^^^-\n    |                 |\n-   |                 index out of bounds: the len is 1 but the index is 1\n+   |                 index out of bounds: the length is 1 but the index is 1\n    |\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9"}, {"sha": "2473632cbc804a0e7cc881e4470ddb59e32da507", "filename": "src/test/ui/consts/const-err2.noopt.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,45 +2,45 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |              ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "2473632cbc804a0e7cc881e4470ddb59e32da507", "filename": "src/test/ui/consts/const-err2.opt.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,45 +2,45 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |              ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "2473632cbc804a0e7cc881e4470ddb59e32da507", "filename": "src/test/ui/consts/const-err2.opt_with_overflow_checks.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,45 +2,45 @@ error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate i8::MIN which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate i128::MIN which would overflow\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8` which would overflow\n+   |             ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX` which would overflow\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8` which would overflow\n+   |             ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |              ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "65dfbd8097e7635659e592250c6a6215f7782442", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | ------------------^^^^^---------------------------\n    |                   |\n-   |                   attempt to compute `5_u32 - 6_u32` which would overflow\n+   |                   attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9"}, {"sha": "0ae51786b36a5ac59b37a5c9be689965723038de", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-3.rs:20:11\n    |\n LL |     = [0; (i8::MAX + 1) as usize];\n-   |           ^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n+   |           ^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "e548fc266c2125e2ff99024270c81ef44a3e1acf", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-4.rs:13:13\n    |\n LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n+   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "51a810b8f3ba83e50d06ed4c729d962cb45c810a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "eec440fcb76a5f7dc200776099aedf6999a58c23", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX + 1,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX + 1,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "e44f94c202166445d19df3fec3ae4f7f1b1a9307", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n LL | |      );\n    | |_______-\n    |\n@@ -20,7 +20,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -40,7 +40,7 @@ error: any use of this value will cause an error\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -50,7 +50,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX * 2,\n-   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8` which would overflow\n+   | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -59,7 +59,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -68,7 +68,7 @@ error: any use of this value will cause an error\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n LL | |      );\n    | |_______-\n \n@@ -78,7 +78,7 @@ error: any use of this value will cause an error\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX * 2,\n-   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64` which would overflow\n+   | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n LL | |      );\n    | |_______-\n "}, {"sha": "7087a6f668c82986e50489910ac5fe9ef4557294", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this operation will panic at runtime\n   --> $DIR/erroneous-const.rs:6:22\n    |\n LL |     const VOID: () = [()][2];\n-   |                      ^^^^^^^ index out of bounds: the len is 1 but the index is 2\n+   |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:20\n@@ -16,7 +16,7 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     -----------------^^^^^^^-\n    |                      |\n-   |                      index out of bounds: the len is 1 but the index is 2\n+   |                      index out of bounds: the length is 1 but the index is 2\n    |\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9"}, {"sha": "8647da90a37d454b8d8e4db1d3098cc4732074cf", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     --------------------------------------------------------^^^^^---\n    |                                                             |\n-   |                                                             index out of bounds: the len is 0 but the index is 0\n+   |                                                             index out of bounds: the length is 0 but the index is 0\n    |\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9"}, {"sha": "8bb3a0c67d65b7a5bd8bb090c95f19193f808721", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/index_out_of_bounds.rs:1:19\n    |\n LL | static FOO: i32 = [][0];\n-   |                   ^^^^^ index out of bounds: the len is 0 but the index is 0\n+   |                   ^^^^^ index out of bounds: the length is 0 but the index is 0\n \n error: aborting due to previous error\n "}, {"sha": "d247d691dbb1b9c9b9f6ec0bac9217b8e443a407", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this operation will panic at runtime\n   --> $DIR/index_out_of_bounds_propagated.rs:5:5\n    |\n LL |     array[1];\n-   |     ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "27e067cedbb5c8237cc9bfebd4f136b2208662b3", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL |     const X: u32 = 0 - 1;\n    |     ---------------^^^^^-\n    |                    |\n-   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n@@ -18,7 +18,7 @@ warning: any use of this value will cause an error\n LL |     const Y: u32 = foo(0 - 1);\n    |     -------------------^^^^^--\n    |                        |\n-   |                        attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-43197.rs:14:23"}, {"sha": "ca8885e935090b3d2dad57dc22994d493f567cca", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |     -------------------^^^^^^^^^^^^^^^^^-\n    |                        |\n-   |                        index out of bounds: the len is 3 but the index is 42\n+   |                        index out of bounds: the length is 3 but the index is 42\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "7327138627648f40b1443ab8fcd5a75419ddf04b", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     ----------------^^^^^^^^^^^^^^^-\n    |                     |\n-   |                     attempt to compute `u8::MAX + u8::MAX` which would overflow\n+   |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ce83d8e9bb0c9bbd81dfaa8df99c93eb5d2bbcb4", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:12:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,13 +14,13 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -50,13 +50,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -74,7 +74,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: 10 warnings emitted\n "}, {"sha": "2c66b175cfc2b5ee48e29d2a1561a79b0292e500", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,7 +14,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -44,13 +44,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -68,7 +68,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: 9 warnings emitted\n "}, {"sha": "ce83d8e9bb0c9bbd81dfaa8df99c93eb5d2bbcb4", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:12:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -14,13 +14,13 @@ warning: this arithmetic operation will overflow\n   --> $DIR/promoted_errors.rs:14:14\n    |\n LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32` which would overflow\n+   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:16:20\n    |\n LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n@@ -50,13 +50,13 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:20:14\n    |\n LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n \n warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:22:20\n    |\n LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:22:20\n@@ -74,7 +74,7 @@ warning: this operation will panic at runtime\n   --> $DIR/promoted_errors.rs:26:14\n    |\n LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide 1_u32 by zero\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n \n warning: 10 warnings emitted\n "}, {"sha": "5be0fd96723dd3fe7f44a65f7e740dbe96883843", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | -------------------^^^^^-\n    |                    |\n-   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9"}, {"sha": "55f8a58ea9470aadc693372317f092c57a37b7e4", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | -------------------^^^^^-\n    |                    |\n-   |                    attempt to compute `0_u32 - 1_u32` which would overflow\n+   |                    attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9"}, {"sha": "e8d4076a61a24f56e9c255e75d54ecec47f5cc6e", "filename": "src/test/ui/consts/const-eval/shift_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/shift_overflow.rs:3:9\n    |\n LL |     X = 1 << ((u32::MAX as u64) + 1),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift left by 4294967296_u64 which would overflow\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift left by `4294967296_u64`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "0cb13790f2f53549e1322ec9f456f3cec8bf65cd", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const FOO: i32 = [][0];\n    | -----------------^^^^^-\n    |                  |\n-   |                  index out of bounds: the len is 0 but the index is 0\n+   |                  index out of bounds: the length is 0 but the index is 0\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "350e4b24de100f0d40265f05ff5926b7914b6697", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: any use of this value will cause an error\n   --> $DIR/const-external-macro-const-err.rs:12:5\n    |\n LL |     static_assert!(2 + 2 == 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "2ab6d0ffdef4c49b4e9b40254e3fd0d18ba1a8d4", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const LEN: usize = ONE - TWO;\n    | -------------------^^^^^^^^^-\n    |                    |\n-   |                    attempt to compute `1_usize - 2_usize` which would overflow\n+   |                    attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ed77e9078425ada9b373f7763924928c8f757081", "filename": "src/test/ui/consts/const-len-underflow-subspans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -7,5 +7,5 @@ const TWO: usize = 2;\n fn main() {\n     let a: [i8; ONE - TWO] = unimplemented!();\n     //~^ ERROR evaluation of constant value failed\n-    //~| attempt to compute `1_usize - 2_usize` which would overflow\n+    //~| attempt to compute `1_usize - 2_usize`, which would overflow\n }"}, {"sha": "68e958b378da727a918cee90accdfd5207bc1e44", "filename": "src/test/ui/consts/const-len-underflow-subspans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-subspans.rs:8:17\n    |\n LL |     let a: [i8; ONE - TWO] = unimplemented!();\n-   |                 ^^^^^^^^^ attempt to compute `1_usize - 2_usize` which would overflow\n+   |                 ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n \n error: aborting due to previous error\n "}, {"sha": "3bcf2b2de7bd7c01472e4b50a4d5216baec66f85", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this operation will panic at runtime\n   --> $DIR/const-prop-ice.rs:4:5\n    |\n LL |     [0; 3][3u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 3\n+   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 3\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "2b65ffc2db76058ae536c38470a1ad66a69bf435", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this operation will panic at runtime\n   --> $DIR/const-prop-ice2.rs:6:20\n    |\n LL |     println!(\"{}\", xs[Enum::One as usize]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n "}, {"sha": "70852f8f56929b140c963424b3d11ac827ff96a4", "filename": "src/test/ui/consts/const-slice-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@\n \n const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n-//~^ index out of bounds: the len is 3 but the index is 5\n+//~^ index out of bounds: the length is 3 but the index is 5\n //~| ERROR any use of this value will cause an error\n \n fn main() {"}, {"sha": "0077bafe9e628fe5bc42a6730cd43d4aae12a77a", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const BAR: u32 = FOO[5];\n    | -----------------^^^^^^-\n    |                  |\n-   |                  index out of bounds: the len is 3 but the index is 5\n+   |                  index out of bounds: the length is 3 but the index is 5\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ea3264b61b356fd51a89529c784809c27b4f44b1", "filename": "src/test/ui/error-codes/E0080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -1,6 +1,6 @@\n enum Enum {\n     X = (1 << 500), //~ ERROR E0080\n-    //~| attempt to shift left by 500_i32 which would overflow\n+    //~| attempt to shift left by `500_i32`, which would overflow\n     Y = (1 / 0) //~ ERROR E0080\n }\n "}, {"sha": "60ed9a4358f12c78c2d916b732d76a7b7e285459", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:2:9\n    |\n LL |     X = (1 << 500),\n-   |         ^^^^^^^^^^ attempt to shift left by 500_i32 which would overflow\n+   |         ^^^^^^^^^^ attempt to shift left by `500_i32`, which would overflow\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:4:9\n    |\n LL |     Y = (1 / 0)\n-   |         ^^^^^^^ attempt to divide 1_isize by zero\n+   |         ^^^^^^^ attempt to divide `1_isize` by zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "551f10e66e35b4963bfb8966ca6f928d65e33124", "filename": "src/test/ui/eval-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.rs?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -1,9 +1,9 @@\n enum Test {\n     DivZero = 1/0,\n-    //~^ attempt to divide 1_isize by zero\n+    //~^ attempt to divide `1_isize` by zero\n     //~| ERROR evaluation of constant value failed\n     RemZero = 1%0,\n-    //~^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+    //~^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n     //~| ERROR evaluation of constant value failed\n }\n "}, {"sha": "fb4d903489f7ff49a8d5f6bd48a27ce698a5e66d", "filename": "src/test/ui/eval-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Feval-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Feval-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/eval-enum.rs:2:15\n    |\n LL |     DivZero = 1/0,\n-   |               ^^^ attempt to divide 1_isize by zero\n+   |               ^^^ attempt to divide `1_isize` by zero\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/eval-enum.rs:5:15\n    |\n LL |     RemZero = 1%0,\n-   |               ^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |               ^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eb85f349843c42a16f8c3abeb7c55816c42e0ad4", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,15 +2,15 @@ error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:5:5\n    |\n LL |     [1][1.5 as usize];\n-   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:6:5\n    |\n LL |     [1][1u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: aborting due to 2 previous errors\n "}, {"sha": "739b5468743b22dda6a54495c896a1975f9ce5cb", "filename": "src/test/ui/issues/issue-8460-const.noopt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n+   |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n+   |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n+   |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "739b5468743b22dda6a54495c896a1975f9ce5cb", "filename": "src/test/ui/issues/issue-8460-const.opt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n+   |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n+   |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n+   |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "739b5468743b22dda6a54495c896a1975f9ce5cb", "filename": "src/test/ui/issues/issue-8460-const.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,149 +2,149 @@ error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to divide 1_isize by zero\n+   |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to divide 1_i8 by zero\n+   |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i16 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i32 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to divide 1_i64 by zero\n+   |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to divide 1_i128 by zero\n+   |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize` which would overflow\n+   |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8` which would overflow\n+   |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64` which would overflow\n+   |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128` which would overflow\n+   |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^ attempt to calculate the remainder of 1_isize with a divisor of zero\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^ attempt to calculate the remainder of 1_i8 with a divisor of zero\n+   |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i16 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^ attempt to calculate the remainder of 1_i64 with a divisor of zero\n+   |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^ attempt to calculate the remainder of 1_i128 with a divisor of zero\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero\n \n error: aborting due to 24 previous errors\n "}, {"sha": "173f3d0d7b7e66ddda2ff1cefc7ff66a1dca8b02", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n@@ -14,139 +14,139 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |             ^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n+   |               ^^^^^^^^^ attempt to shift left by `-8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `64_usize`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `64_usize`, which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "173f3d0d7b7e66ddda2ff1cefc7ff66a1dca8b02", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n@@ -14,139 +14,139 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |             ^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n+   |               ^^^^^^^^^ attempt to shift left by `-8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `64_usize`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `64_usize`, which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "173f3d0d7b7e66ddda2ff1cefc7ff66a1dca8b02", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:18:20\n    |\n LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |                    ^^^^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:10:9\n@@ -14,139 +14,139 @@ warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left by 42_i32 which would overflow\n+   |             ^^^^^^^ attempt to shift left by `42_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^ attempt to shift left by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^ attempt to shift right by 8_i32 which would overflow\n+   |               ^^^^^^^^ attempt to shift right by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^ attempt to shift right by 16_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `16_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n-   |               ^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^ attempt to shift left by -8_i32 which would overflow\n+   |               ^^^^^^^^^ attempt to shift left by `-8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^ attempt to shift left by 8_i32 which would overflow\n+   |               ^^^^^^^^^^^^ attempt to shift left by `8_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `64_usize`, which would overflow\n \n warning: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^ attempt to shift left by %BITS% which would overflow\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left by `64_usize`, which would overflow\n \n warning: 24 warnings emitted\n "}, {"sha": "0fe56f417251585e60b0abe84cc203ea62cf64c6", "filename": "src/test/ui/mir/mir_detects_invalid_ops.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,15 +2,15 @@ error: this operation will panic at runtime\n   --> $DIR/mir_detects_invalid_ops.rs:11:14\n    |\n LL |     let _z = 1 / y;\n-   |              ^^^^^ attempt to divide 1_i32 by zero\n+   |              ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/mir_detects_invalid_ops.rs:16:14\n    |\n LL |     let _z = 1 % y;\n-   |              ^^^^^ attempt to calculate the remainder of 1_i32 with a divisor of zero\n+   |              ^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d029939c7028402d3442907ea47c109fab67e40", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-1.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-1.rs:7:14\n    |\n LL |     let _x = 1_i32 << 32;\n-   |              ^^^^^^^^^^^ attempt to shift left by 32_i32 which would overflow\n+   |              ^^^^^^^^^^^ attempt to shift left by `32_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-1.rs:4:9"}, {"sha": "8598792e08043bf0684fb0ecbc0c242b09141667", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-2.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-2.rs:7:14\n    |\n LL |     let _x = 1 << -1;\n-   |              ^^^^^^^ attempt to shift left by -1_i32 which would overflow\n+   |              ^^^^^^^ attempt to shift left by `-1_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-2.rs:4:9"}, {"sha": "9c6f806f1d65cbc792c27c754020faabf34fbf7f", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-3.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-3.rs:7:14\n    |\n LL |     let _x = 1_u64 << 64;\n-   |              ^^^^^^^^^^^ attempt to shift left by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^ attempt to shift left by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-3.rs:4:9"}, {"sha": "08081a0b7876d469e01b19fecb4679995ad61a6f", "filename": "src/test/ui/numbers-arithmetic/overflowing-lsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-lsh-4.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-lsh-4.rs:11:13\n    |\n LL |     let x = 1_i8 << 17;\n-   |             ^^^^^^^^^^ attempt to shift left by 17_i32 which would overflow\n+   |             ^^^^^^^^^^ attempt to shift left by `17_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-lsh-4.rs:7:9"}, {"sha": "4d726fa7fec2143bdd7d3a37a76003057c459a87", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-1.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-1.rs:7:14\n    |\n LL |     let _x = -1_i32 >> 32;\n-   |              ^^^^^^^^^^^^ attempt to shift right by 32_i32 which would overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by `32_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-1.rs:4:9"}, {"sha": "9a8349d5ddb799cf3dabf55bf6211af8b2507fd2", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-2.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-2.rs:7:14\n    |\n LL |     let _x = -1_i32 >> -1;\n-   |              ^^^^^^^^^^^^ attempt to shift right by -1_i32 which would overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by `-1_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-2.rs:4:9"}, {"sha": "f48b7ff6de54be408f9f947089d45981753804e3", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-3.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-3.rs:7:14\n    |\n LL |     let _x = -1_i64 >> 64;\n-   |              ^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-3.rs:4:9"}, {"sha": "4816a389965d64403b08d1aac2d3810deccc8b4b", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-4.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-4.rs:11:13\n    |\n LL |     let x = 2_i8 >> 17;\n-   |             ^^^^^^^^^^ attempt to shift right by 17_i32 which would overflow\n+   |             ^^^^^^^^^^ attempt to shift right by `17_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-4.rs:7:9"}, {"sha": "cd36f543d68b34dd33d9f3ac29f0e329ec54af95", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-5.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-5.rs:7:14\n    |\n LL |     let _n = 1i64 >> [64][0];\n-   |              ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-5.rs:4:9"}, {"sha": "bec8b17df0b4c0561a5f174dd7535eaaf80819af", "filename": "src/test/ui/numbers-arithmetic/overflowing-rsh-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-rsh-6.stderr?ref=8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "patch": "@@ -2,7 +2,7 @@ error: this arithmetic operation will overflow\n   --> $DIR/overflowing-rsh-6.rs:7:14\n    |\n LL |     let _n = 1i64 >> [64][0];\n-   |              ^^^^^^^^^^^^^^^ attempt to shift right by 64_i32 which would overflow\n+   |              ^^^^^^^^^^^^^^^ attempt to shift right by `64_i32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/overflowing-rsh-6.rs:4:9"}]}