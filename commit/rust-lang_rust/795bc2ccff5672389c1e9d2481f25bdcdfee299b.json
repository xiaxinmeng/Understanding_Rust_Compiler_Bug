{"sha": "795bc2ccff5672389c1e9d2481f25bdcdfee299b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWJjMmNjZmY1NjcyMzg5YzFlOWQyNDgxZjI1YmRjZGZlZTI5OWI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-07T12:46:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-07T12:46:53Z"}, "message": "Rollup merge of #70201 - cuviper:clone_into, r=dtolnay\n\nSmall tweaks in ToOwned::clone_into\n\n- `<[T]>::clone_into` is slightly more optimized.\n- `CStr::clone_into` is new, letting it reuse its allocation.\n- `OsStr::clone_into` now forwards to the underlying slice/`Vec`.", "tree": {"sha": "102f79b2bf4261484fb3354568a648c92c2fc2ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/102f79b2bf4261484fb3354568a648c92c2fc2ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795bc2ccff5672389c1e9d2481f25bdcdfee299b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejHY+CRBK7hj4Ov3rIwAAdHIIAGjydBf99195S35coTdvD9EA\nezJkjTuQb2JqxhMOKH1WzTF0WFKw7WgWbn6la3gad10rKw/9qsp3IT3mA5XTXZYu\n9O9VC2Y/f43lYmhV6rwH1uUkVVcxwlqryJ1J7OCrhzw5W7IYGYEHsURRYP1pt9ik\nJs48yLnVGA22hsHgVZDnBErqe4DPCw7V4UQdlqAop2M9XJrlm2dHJ91kZYeCjtep\n7v7D9yxbJGkY7xksfqn1EhbubTAO0DjU02ipvR+X67OFQD3J/IkovcnFfVMpk4jq\n5snU6N6dCODzyEiIAK6XGtlr5YWC52Y98/Bl0FDCjrkyVd3kLX15paO4ntg138U=\n=NWkI\n-----END PGP SIGNATURE-----\n", "payload": "tree 102f79b2bf4261484fb3354568a648c92c2fc2ae\nparent 39b62533c7f9d0581a6ea9b9fc2cc51f21c3b5b0\nparent f854070bb820501d88d1b029660bfde663595530\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586263613 +0200\ncommitter GitHub <noreply@github.com> 1586263613 +0200\n\nRollup merge of #70201 - cuviper:clone_into, r=dtolnay\n\nSmall tweaks in ToOwned::clone_into\n\n- `<[T]>::clone_into` is slightly more optimized.\n- `CStr::clone_into` is new, letting it reuse its allocation.\n- `OsStr::clone_into` now forwards to the underlying slice/`Vec`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795bc2ccff5672389c1e9d2481f25bdcdfee299b", "html_url": "https://github.com/rust-lang/rust/commit/795bc2ccff5672389c1e9d2481f25bdcdfee299b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795bc2ccff5672389c1e9d2481f25bdcdfee299b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b62533c7f9d0581a6ea9b9fc2cc51f21c3b5b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b62533c7f9d0581a6ea9b9fc2cc51f21c3b5b0", "html_url": "https://github.com/rust-lang/rust/commit/39b62533c7f9d0581a6ea9b9fc2cc51f21c3b5b0"}, {"sha": "f854070bb820501d88d1b029660bfde663595530", "url": "https://api.github.com/repos/rust-lang/rust/commits/f854070bb820501d88d1b029660bfde663595530", "html_url": "https://github.com/rust-lang/rust/commit/f854070bb820501d88d1b029660bfde663595530"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "cd750d2558035f8ace5078b10cb5f10f70d6dfc0", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=795bc2ccff5672389c1e9d2481f25bdcdfee299b", "patch": "@@ -733,14 +733,14 @@ impl<T: Clone> ToOwned for [T] {\n     fn clone_into(&self, target: &mut Vec<T>) {\n         // drop anything in target that will not be overwritten\n         target.truncate(self.len());\n-        let len = target.len();\n-\n-        // reuse the contained values' allocations/resources.\n-        target.clone_from_slice(&self[..len]);\n \n         // target.len <= self.len due to the truncate above, so the\n-        // slice here is always in-bounds.\n-        target.extend_from_slice(&self[len..]);\n+        // slices here are always in-bounds.\n+        let (init, tail) = self.split_at(target.len());\n+\n+        // reuse the contained values' allocations/resources.\n+        target.clone_from_slice(init);\n+        target.extend_from_slice(tail);\n     }\n }\n "}, {"sha": "0a4802fb2c80dd7f8a87dfca09f8e179f0a03a0a", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=795bc2ccff5672389c1e9d2481f25bdcdfee299b", "patch": "@@ -1329,6 +1329,12 @@ impl ToOwned for CStr {\n     fn to_owned(&self) -> CString {\n         CString { inner: self.to_bytes_with_nul().into() }\n     }\n+\n+    fn clone_into(&self, target: &mut CString) {\n+        let mut b = Vec::from(mem::take(&mut target.inner));\n+        self.to_bytes_with_nul().clone_into(&mut b);\n+        target.inner = b.into_boxed_slice();\n+    }\n }\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n@@ -1510,6 +1516,17 @@ mod tests {\n         assert_eq!(boxed.to_bytes_with_nul(), &[0]);\n     }\n \n+    #[test]\n+    fn test_c_str_clone_into() {\n+        let mut c_string = CString::new(\"lorem\").unwrap();\n+        let c_ptr = c_string.as_ptr();\n+        let c_str = CStr::from_bytes_with_nul(b\"ipsum\\0\").unwrap();\n+        c_str.clone_into(&mut c_string);\n+        assert_eq!(c_str, c_string.as_c_str());\n+        // The exact same size shouldn't have needed to move its allocation\n+        assert_eq!(c_ptr, c_string.as_ptr());\n+    }\n+\n     #[test]\n     fn into_rc() {\n         let orig: &[u8] = b\"Hello, world!\\0\";"}, {"sha": "4fde33169733e60268a505f881a55962e596d3e2", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=795bc2ccff5672389c1e9d2481f25bdcdfee299b", "patch": "@@ -1120,8 +1120,7 @@ impl ToOwned for OsStr {\n         self.to_os_string()\n     }\n     fn clone_into(&self, target: &mut OsString) {\n-        target.clear();\n-        target.push(self);\n+        self.inner.clone_into(&mut target.inner)\n     }\n }\n "}, {"sha": "2f5fc72ab44c2553ede8bffee6c8e506ee94957a", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=795bc2ccff5672389c1e9d2481f25bdcdfee299b", "patch": "@@ -159,6 +159,10 @@ impl Slice {\n         Buf { inner: buf }\n     }\n \n+    pub fn clone_into(&self, buf: &mut Buf) {\n+        self.inner.clone_into(&mut buf.inner)\n+    }\n+\n     #[inline]\n     pub fn into_box(&self) -> Box<Slice> {\n         unsafe { mem::transmute(self.inner.into_box()) }"}, {"sha": "984c032e2a388829d5f0c0b13d6cd35c9d380a90", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=795bc2ccff5672389c1e9d2481f25bdcdfee299b", "patch": "@@ -173,6 +173,10 @@ impl Slice {\n         Buf { inner: self.inner.to_vec() }\n     }\n \n+    pub fn clone_into(&self, buf: &mut Buf) {\n+        self.inner.clone_into(&mut buf.inner)\n+    }\n+\n     #[inline]\n     pub fn into_box(&self) -> Box<Slice> {\n         let boxed: Box<[u8]> = self.inner.into();"}, {"sha": "a98407da44850f50bc0de5e684177172a748baa5", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795bc2ccff5672389c1e9d2481f25bdcdfee299b/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=795bc2ccff5672389c1e9d2481f25bdcdfee299b", "patch": "@@ -613,6 +613,10 @@ impl Wtf8 {\n         }\n     }\n \n+    pub fn clone_into(&self, buf: &mut Wtf8Buf) {\n+        self.bytes.clone_into(&mut buf.bytes)\n+    }\n+\n     /// Boxes this `Wtf8`.\n     #[inline]\n     pub fn into_box(&self) -> Box<Wtf8> {"}]}