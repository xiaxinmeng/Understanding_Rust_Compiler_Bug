{"sha": "d6f27401f12f02876aa6fe53139b030033f37e5e", "node_id": "C_kwDOAAsO6NoAKGQ2ZjI3NDAxZjEyZjAyODc2YWE2ZmU1MzEzOWIwMzAwMzNmMzdlNWU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-03-30T12:06:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-30T12:06:59Z"}, "message": "Rollup merge of #106985 - jofas:106746-fix, r=ChrisDenton\n\nEnhanced doucmentation of binary search methods for `slice` and `VecDeque` for unsorted instances\n\nFixes #106746. Issue #106746 raises the concern that the binary search methods for slices and deques aren't explicit enough about the fact that they are only applicable to sorted slices/deques. I changed the explanation for these methods. I took the relatively harsh description of the behaviour of binary search on unsorted collections (\"unspecified and meaningless\") from the description of the [`partition_point`](https://doc.rust-lang.org/std/primitive.slice.html#method.partition_point) method:\n\n> If this slice is not partitioned, the returned result is unspecified and meaningless, as this method performs a kind of binary search.", "tree": {"sha": "63144eade568434d6310ac9068fee7c871e43d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63144eade568434d6310ac9068fee7c871e43d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f27401f12f02876aa6fe53139b030033f37e5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJXtjCRBK7hj4Ov3rIwAA0RYIAANRimL8klBgjxWNavzOHj+2\nzUJSuSber7sH11p5e8B2ZiI+ewZTgXtD1XjXRL+FQYzZtyADpJAxlSkA5RuGLXGn\navCUGs3GS4LYJ8Vm5SKmNnH3gHe3X2+56Dtgb/7AccjxVzdGyuKI9bCmdzIpXiLI\nKAve16zwiEecl6/vCvq/4yVw4aGzYf5sQoP5S9tvBsK70AVmPDq5QuDYU4a8DEBl\nEAa3vqkLzOxe5YJGfSt42u9B1ZUlWbBSI33lSQU2nxYo5twVjiub7utgRyG9Jq6+\nBm8KN/tAXrPxHhPPhclqaHWLNPjqc2QvSNBAF/xAg8p2qjLVltk3jHSTBCI/PiI=\n=03Z4\n-----END PGP SIGNATURE-----\n", "payload": "tree 63144eade568434d6310ac9068fee7c871e43d76\nparent f2d9a3d0771504f1ae776226a5799dcb4408a91a\nparent b0850073133c548a53afee29400d3873fabb7985\nauthor Yuki Okushi <jtitor@2k36.org> 1680178019 +0900\ncommitter GitHub <noreply@github.com> 1680178019 +0900\n\nRollup merge of #106985 - jofas:106746-fix, r=ChrisDenton\n\nEnhanced doucmentation of binary search methods for `slice` and `VecDeque` for unsorted instances\n\nFixes #106746. Issue #106746 raises the concern that the binary search methods for slices and deques aren't explicit enough about the fact that they are only applicable to sorted slices/deques. I changed the explanation for these methods. I took the relatively harsh description of the behaviour of binary search on unsorted collections (\"unspecified and meaningless\") from the description of the [`partition_point`](https://doc.rust-lang.org/std/primitive.slice.html#method.partition_point) method:\n\n> If this slice is not partitioned, the returned result is unspecified and meaningless, as this method performs a kind of binary search.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f27401f12f02876aa6fe53139b030033f37e5e", "html_url": "https://github.com/rust-lang/rust/commit/d6f27401f12f02876aa6fe53139b030033f37e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f27401f12f02876aa6fe53139b030033f37e5e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d9a3d0771504f1ae776226a5799dcb4408a91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9a3d0771504f1ae776226a5799dcb4408a91a", "html_url": "https://github.com/rust-lang/rust/commit/f2d9a3d0771504f1ae776226a5799dcb4408a91a"}, {"sha": "b0850073133c548a53afee29400d3873fabb7985", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0850073133c548a53afee29400d3873fabb7985", "html_url": "https://github.com/rust-lang/rust/commit/b0850073133c548a53afee29400d3873fabb7985"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "05dbcdc904e056bcbca415fa22d2eb3c9aad1d46", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d6f27401f12f02876aa6fe53139b030033f37e5e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f27401f12f02876aa6fe53139b030033f37e5e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=d6f27401f12f02876aa6fe53139b030033f37e5e", "patch": "@@ -2394,7 +2394,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` for a given element.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n+    /// If the `VecDeque` is not sorted, the returned result is unspecified and\n+    /// meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2404,7 +2405,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: VecDeque::contains\n     /// [`binary_search_by`]: VecDeque::binary_search_by\n     /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n     /// [`partition_point`]: VecDeque::partition_point\n@@ -2450,12 +2450,13 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` with a comparator function.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n-    /// The comparator function should implement an order consistent\n-    /// with the sort order of the deque, returning an order code that\n-    /// indicates whether its argument is `Less`, `Equal` or `Greater`\n-    /// than the desired target.\n+    /// The comparator function should return an order code that indicates\n+    /// whether its argument is `Less`, `Equal` or `Greater` the desired\n+    /// target.\n+    /// If the `VecDeque` is not sorted or if the comparator function does not\n+    /// implement an order consistent with the sort order of the underlying\n+    /// `VecDeque`, the returned result is unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2465,7 +2466,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: VecDeque::contains\n     /// [`binary_search`]: VecDeque::binary_search\n     /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n     /// [`partition_point`]: VecDeque::partition_point\n@@ -2505,10 +2505,11 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Binary searches this `VecDeque` with a key extraction function.\n-    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n     /// Assumes that the deque is sorted by the key, for instance with\n     /// [`make_contiguous().sort_by_key()`] using the same key extraction function.\n+    /// If the deque is not sorted by the key, the returned result is\n+    /// unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2518,7 +2519,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///\n-    /// [`contains`]: VecDeque::contains\n     /// [`make_contiguous().sort_by_key()`]: VecDeque::make_contiguous\n     /// [`binary_search`]: VecDeque::binary_search\n     /// [`binary_search_by`]: VecDeque::binary_search_by"}, {"sha": "f541808a61836b1311efc0bfeaba0c853b2cf93f", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d6f27401f12f02876aa6fe53139b030033f37e5e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f27401f12f02876aa6fe53139b030033f37e5e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=d6f27401f12f02876aa6fe53139b030033f37e5e", "patch": "@@ -2387,7 +2387,8 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice for a given element.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n+    /// If the slice is not sorted, the returned result is unspecified and\n+    /// meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2399,7 +2400,6 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: slice::contains\n     /// [`binary_search_by`]: slice::binary_search_by\n     /// [`binary_search_by_key`]: slice::binary_search_by_key\n     /// [`partition_point`]: slice::partition_point\n@@ -2462,12 +2462,13 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice with a comparator function.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n-    /// The comparator function should implement an order consistent\n-    /// with the sort order of the underlying slice, returning an\n-    /// order code that indicates whether its argument is `Less`,\n-    /// `Equal` or `Greater` the desired target.\n+    /// The comparator function should return an order code that indicates\n+    /// whether its argument is `Less`, `Equal` or `Greater` the desired\n+    /// target.\n+    /// If the slice is not sorted or if the comparator function does not\n+    /// implement an order consistent with the sort order of the underlying\n+    /// slice, the returned result is unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2479,7 +2480,6 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`contains`]: slice::contains\n     /// [`binary_search`]: slice::binary_search\n     /// [`binary_search_by_key`]: slice::binary_search_by_key\n     /// [`partition_point`]: slice::partition_point\n@@ -2548,10 +2548,11 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice with a key extraction function.\n-    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n     /// Assumes that the slice is sorted by the key, for instance with\n     /// [`sort_by_key`] using the same key extraction function.\n+    /// If the slice is not sorted by the key, the returned result is\n+    /// unspecified and meaningless.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2563,7 +2564,6 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///\n-    /// [`contains`]: slice::contains\n     /// [`sort_by_key`]: slice::sort_by_key\n     /// [`binary_search`]: slice::binary_search\n     /// [`binary_search_by`]: slice::binary_search_by"}]}