{"sha": "8e9089e454b04b8bad5ed6678050f1cc290a74b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTA4OWU0NTRiMDRiOGJhZDVlZDY2NzgwNTBmMWNjMjkwYTc0YjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T23:24:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T23:24:53Z"}, "message": "Auto merge of #5110 - Aloso:patch-1, r=flip1995\n\nFix syntax highlighting of code fences\n\nThe documentation for RESULT_EXPECT_USED includes this code:\n\n    let res: Result<usize, ()> = Ok(1);\n    res?;\n    # Ok::<(), ()>(())\n\nBecause the code fence didn't start with `rust`, the code wasn't highlighted and the line starting with `#` was displayed on the website. This is now fixed.\n\nEDIT: I noticed that highlighting for some other lints is broken as well. It only works if the code fence looks like this:\n\n````markdown\n```rust\n// ..\n```\n````\n\nHowever, many code blocks were ignored. I un-ignored most code blocks and made them compile by adding hidden code with `#`. While doing so, I found two mistakes:\n\n```rust\nopt.map_or(None, |a| a + 1)\n// instead of\nopt.map_or(None, |a| Some(a + 1))\n```\nand\n\n```rust\nfn as_str(self) -> &str\n// instead of\nfn as_str(self) -> &'static str\n```\n\nchangelog: none", "tree": {"sha": "f11b96717422e2545019cf147597f0232654a0e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11b96717422e2545019cf147597f0232654a0e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9089e454b04b8bad5ed6678050f1cc290a74b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9089e454b04b8bad5ed6678050f1cc290a74b3", "html_url": "https://github.com/rust-lang/rust/commit/8e9089e454b04b8bad5ed6678050f1cc290a74b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9089e454b04b8bad5ed6678050f1cc290a74b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbef531518a3b4977a9c1f40808f950514b400fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbef531518a3b4977a9c1f40808f950514b400fc", "html_url": "https://github.com/rust-lang/rust/commit/bbef531518a3b4977a9c1f40808f950514b400fc"}, {"sha": "1f600f3f9a815efaf8c627d0a9af4eb836ffa7a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f600f3f9a815efaf8c627d0a9af4eb836ffa7a2", "html_url": "https://github.com/rust-lang/rust/commit/1f600f3f9a815efaf8c627d0a9af4eb836ffa7a2"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "f9efec87c3e7228a62b4dfb2961ff0c80e6d9345", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8e9089e454b04b8bad5ed6678050f1cc290a74b3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9089e454b04b8bad5ed6678050f1cc290a74b3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8e9089e454b04b8bad5ed6678050f1cc290a74b3", "patch": "@@ -114,10 +114,9 @@ declare_clippy_lint! {\n     ///\n     /// Better:\n     ///\n-    /// ```ignore\n+    /// ```rust,ignore\n     /// let opt = Some(1);\n     /// opt?;\n-    /// # Some::<()>(())\n     /// ```\n     pub OPTION_EXPECT_USED,\n     restriction,\n@@ -143,7 +142,7 @@ declare_clippy_lint! {\n     ///\n     /// Better:\n     ///\n-    /// ```\n+    /// ```rust\n     /// let res: Result<usize, ()> = Ok(1);\n     /// res?;\n     /// # Ok::<(), ()>(())\n@@ -168,11 +167,12 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n     /// struct X;\n     /// impl X {\n     ///     fn add(&self, other: &X) -> X {\n-    ///         ..\n+    ///         // ..\n+    /// # X\n     ///     }\n     /// }\n     /// ```\n@@ -200,10 +200,12 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # struct X;\n     /// impl X {\n-    ///     fn as_str(self) -> &str {\n-    ///         ..\n+    ///     fn as_str(self) -> &'static str {\n+    ///         // ..\n+    /// # \"\"\n     ///     }\n     /// }\n     /// ```\n@@ -245,7 +247,8 @@ declare_clippy_lint! {\n     /// **Known problems:** The error type needs to implement `Debug`\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # let x = Ok::<_, ()>(());\n     /// x.ok().expect(\"why did I do this again?\")\n     /// ```\n     pub OK_EXPECT,\n@@ -318,8 +321,10 @@ declare_clippy_lint! {\n     /// **Known problems:** The order of the arguments is not in execution order.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// opt.map_or(None, |a| a + 1)\n+    /// ```rust\n+    /// # let opt = Some(1);\n+    /// opt.map_or(None, |a| Some(a + 1))\n+    /// # ;\n     /// ```\n     pub OPTION_MAP_OR_NONE,\n     style,\n@@ -707,9 +712,12 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # struct Foo;\n+    /// # struct NotAFoo;\n     /// impl Foo {\n-    ///     fn new(..) -> NotAFoo {\n+    ///     fn new() -> NotAFoo {\n+    /// # NotAFoo\n     ///     }\n     /// }\n     /// ```\n@@ -744,14 +752,20 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # use std::ffi::CString;\n+    /// # fn call_some_ffi_func(_: *const i8) {}\n+    /// #\n     /// let c_str = CString::new(\"foo\").unwrap().as_ptr();\n     /// unsafe {\n     ///     call_some_ffi_func(c_str);\n     /// }\n     /// ```\n     /// Here `c_str` point to a freed address. The correct use would be:\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # use std::ffi::CString;\n+    /// # fn call_some_ffi_func(_: *const i8) {}\n+    /// #\n     /// let c_str = CString::new(\"foo\").unwrap();\n     /// unsafe {\n     ///     call_some_ffi_func(c_str.as_ptr());\n@@ -771,7 +785,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```should_panic\n+    /// ```rust,should_panic\n     /// for x in (0..100).step_by(0) {\n     ///     //..\n     /// }\n@@ -953,8 +967,10 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # let name = \"_\";\n     /// name.chars().last() == Some('_') || name.chars().next_back() == Some('-')\n+    /// # ;\n     /// ```\n     pub CHARS_LAST_CMP,\n     style,\n@@ -1147,7 +1163,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n     /// unsafe { (&() as *const ()).offset(1) };\n     /// ```\n     pub ZST_OFFSET,\n@@ -1165,24 +1181,30 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     ///\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # || {\n     /// let metadata = std::fs::metadata(\"foo.txt\")?;\n     /// let filetype = metadata.file_type();\n     ///\n     /// if filetype.is_file() {\n     ///     // read file\n     /// }\n+    /// # Ok::<_, std::io::Error>(())\n+    /// # };\n     /// ```\n     ///\n     /// should be written as:\n     ///\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # || {\n     /// let metadata = std::fs::metadata(\"foo.txt\")?;\n     /// let filetype = metadata.file_type();\n     ///\n     /// if !filetype.is_dir() {\n     ///     // read file\n     /// }\n+    /// # Ok::<_, std::io::Error>(())\n+    /// # };\n     /// ```\n     pub FILETYPE_IS_FILE,\n     restriction,\n@@ -1198,12 +1220,16 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust,ignore\n-    ///  opt.as_ref().map(String::as_str)\n+    /// ```rust\n+    /// # let opt = Some(\"\".to_string());\n+    /// opt.as_ref().map(String::as_str)\n+    /// # ;\n     /// ```\n     /// Can be written as\n-    /// ```rust,ignore\n-    ///  opt.as_deref()\n+    /// ```rust\n+    /// # let opt = Some(\"\".to_string());\n+    /// opt.as_deref()\n+    /// # ;\n     /// ```\n     pub OPTION_AS_REF_DEREF,\n     complexity,"}]}