{"sha": "a8c2332cc890ca73911ea0133457b10bf56aefdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YzIzMzJjYzg5MGNhNzM5MTFlYTAxMzM0NTdiMTBiZjU2YWVmZGM=", "commit": {"author": {"name": "iancormac84", "email": "wilnathan@gmail.com", "date": "2018-05-08T11:52:01Z"}, "committer": {"name": "iancormac84", "email": "wilnathan@gmail.com", "date": "2018-05-17T20:41:18Z"}, "message": "Removed use of TypeIdHasher in debuginfo and replaced it with StableHasher. Also corrected erroneous mention of TypeIdHasher in implementation of HashStable trait.", "tree": {"sha": "cb51a67b4334deb15cf858478a00792040ea8552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb51a67b4334deb15cf858478a00792040ea8552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8c2332cc890ca73911ea0133457b10bf56aefdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c2332cc890ca73911ea0133457b10bf56aefdc", "html_url": "https://github.com/rust-lang/rust/commit/a8c2332cc890ca73911ea0133457b10bf56aefdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8c2332cc890ca73911ea0133457b10bf56aefdc/comments", "author": {"login": "iancormac84", "id": 7167225, "node_id": "MDQ6VXNlcjcxNjcyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7167225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iancormac84", "html_url": "https://github.com/iancormac84", "followers_url": "https://api.github.com/users/iancormac84/followers", "following_url": "https://api.github.com/users/iancormac84/following{/other_user}", "gists_url": "https://api.github.com/users/iancormac84/gists{/gist_id}", "starred_url": "https://api.github.com/users/iancormac84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iancormac84/subscriptions", "organizations_url": "https://api.github.com/users/iancormac84/orgs", "repos_url": "https://api.github.com/users/iancormac84/repos", "events_url": "https://api.github.com/users/iancormac84/events{/privacy}", "received_events_url": "https://api.github.com/users/iancormac84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iancormac84", "id": 7167225, "node_id": "MDQ6VXNlcjcxNjcyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7167225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iancormac84", "html_url": "https://github.com/iancormac84", "followers_url": "https://api.github.com/users/iancormac84/followers", "following_url": "https://api.github.com/users/iancormac84/following{/other_user}", "gists_url": "https://api.github.com/users/iancormac84/gists{/gist_id}", "starred_url": "https://api.github.com/users/iancormac84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iancormac84/subscriptions", "organizations_url": "https://api.github.com/users/iancormac84/orgs", "repos_url": "https://api.github.com/users/iancormac84/repos", "events_url": "https://api.github.com/users/iancormac84/events{/privacy}", "received_events_url": "https://api.github.com/users/iancormac84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90463a6bdcd18c60e18a1cc810fc6453b96f7d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/90463a6bdcd18c60e18a1cc810fc6453b96f7d54", "html_url": "https://github.com/rust-lang/rust/commit/90463a6bdcd18c60e18a1cc810fc6453b96f7d54"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "eb672e9ed4b974f49967b673efef1a4bcb6e7bb2", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8c2332cc890ca73911ea0133457b10bf56aefdc/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c2332cc890ca73911ea0133457b10bf56aefdc/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=a8c2332cc890ca73911ea0133457b10bf56aefdc", "patch": "@@ -132,7 +132,7 @@ for ty::RegionKind {\n             ty::ReLateBound(..) |\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) => {\n-                bug!(\"TypeIdHasher: unexpected region {:?}\", *self)\n+                bug!(\"StableHasher: unexpected region {:?}\", *self)\n             }\n         }\n     }"}, {"sha": "4a68ac35deaa0f2222a7f66ccd7e56287fd52308", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8c2332cc890ca73911ea0133457b10bf56aefdc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c2332cc890ca73911ea0133457b10bf56aefdc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=a8c2332cc890ca73911ea0133457b10bf56aefdc", "patch": "@@ -26,9 +26,7 @@ use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor,\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n-use rustc::ty::fold::TypeVisitor;\n-use rustc::ty::util::TypeIdHasher;\n-use rustc::ich::Fingerprint;\n+use rustc::ich::{Fingerprint, NodeIdHashingMode};\n use rustc::ty::Instance;\n use common::CodegenCx;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n@@ -144,9 +142,15 @@ impl<'tcx> TypeMap<'tcx> {\n \n         // The hasher we are using to generate the UniqueTypeId. We want\n         // something that provides more than the 64 bits of the DefaultHasher.\n-        let mut type_id_hasher = TypeIdHasher::<Fingerprint>::new(cx.tcx);\n-        type_id_hasher.visit_ty(type_);\n-        let unique_type_id = type_id_hasher.finish().to_hex();\n+        let mut hasher = StableHasher::<Fingerprint>::new();\n+        let mut hcx = cx.tcx.create_stable_hashing_context();\n+        let type_ = cx.tcx.erase_regions(&type_);\n+        hcx.while_hashing_spans(false, |hcx| {\n+            hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                type_.hash_stable(hcx, &mut hasher);\n+            });\n+        });\n+        let unique_type_id = hasher.finish().to_hex();\n \n         let key = self.unique_id_interner.intern(&unique_type_id);\n         self.type_to_unique_id.insert(type_, UniqueTypeId(key));"}]}