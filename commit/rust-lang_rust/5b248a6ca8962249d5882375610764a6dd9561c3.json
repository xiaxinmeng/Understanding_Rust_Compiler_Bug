{"sha": "5b248a6ca8962249d5882375610764a6dd9561c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjQ4YTZjYTg5NjIyNDlkNTg4MjM3NTYxMDc2NGE2ZGQ5NTYxYzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T00:56:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T01:09:52Z"}, "message": "Remove CodeMap box typedef from codemap", "tree": {"sha": "dc78b1e5cf835a008f2ada3851d89d2d7c7d301d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc78b1e5cf835a008f2ada3851d89d2d7c7d301d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b248a6ca8962249d5882375610764a6dd9561c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b248a6ca8962249d5882375610764a6dd9561c3", "html_url": "https://github.com/rust-lang/rust/commit/5b248a6ca8962249d5882375610764a6dd9561c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b248a6ca8962249d5882375610764a6dd9561c3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385a4668e568e4379371bf065d071f6caf6d1c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/385a4668e568e4379371bf065d071f6caf6d1c3a", "html_url": "https://github.com/rust-lang/rust/commit/385a4668e568e4379371bf065d071f6caf6d1c3a"}], "stats": {"total": 98, "additions": 50, "deletions": 48}, "files": [{"sha": "86e45179cb033441782d7f097ef1f4df7360e738", "filename": "src/libfuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibfuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibfuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -225,7 +225,7 @@ fn as_str(f: fn@(+x: io::Writer)) -> ~str {\n     io::with_str_writer(f)\n }\n \n-fn check_variants_of_ast(crate: ast::crate, codemap: codemap::CodeMap,\n+fn check_variants_of_ast(crate: ast::crate, codemap: @codemap::CodeMap,\n                          filename: &Path, cx: context) {\n     let stolen = steal(crate, cx.mode);\n     let extra_exprs = vec::filter(common_exprs(),\n@@ -239,7 +239,7 @@ fn check_variants_of_ast(crate: ast::crate, codemap: codemap::CodeMap,\n \n fn check_variants_T<T: Copy>(\n   crate: ast::crate,\n-  codemap: codemap::CodeMap,\n+  codemap: @codemap::CodeMap,\n   filename: &Path,\n   thing_label: ~str,\n   things: ~[T],"}, {"sha": "f1c64a7e0995f42ce9ea446e8128726135d013d9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -574,7 +574,7 @@ fn build_session_options(binary: ~str,\n \n fn build_session(sopts: @session::options,\n                  demitter: diagnostic::emitter) -> Session {\n-    let codemap = codemap::new_codemap();\n+    let codemap = @codemap::new_codemap();\n     let diagnostic_handler =\n         diagnostic::mk_handler(Some(demitter));\n     let span_diagnostic_handler =\n@@ -583,7 +583,7 @@ fn build_session(sopts: @session::options,\n }\n \n fn build_session_(sopts: @session::options,\n-                  cm: codemap::CodeMap,\n+                  cm: @codemap::CodeMap,\n                   demitter: diagnostic::emitter,\n                   span_diagnostic_handler: diagnostic::span_handler)\n                -> Session {"}, {"sha": "d2a277e82fbd522f6b9c92df2cc32648c666dc81", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -131,7 +131,7 @@ type Session_ = {targ_cfg: @config,\n                  opts: @options,\n                  cstore: metadata::cstore::CStore,\n                  parse_sess: parse_sess,\n-                 codemap: codemap::CodeMap,\n+                 codemap: @codemap::CodeMap,\n                  // For a library crate, this is always none\n                  mut main_fn: Option<(node_id, codemap::span)>,\n                  span_diagnostic: diagnostic::span_handler,"}, {"sha": "c794b0189fc2eaa96bc0bf8b0a68ca4d9bff97ff", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -229,7 +229,7 @@ fn create_file(cx: @crate_ctxt, full_path: ~str) -> @metadata<file_md> {\n     return mdval;\n }\n \n-fn line_from_span(cm: codemap::CodeMap, sp: span) -> uint {\n+fn line_from_span(cm: @codemap::CodeMap, sp: span) -> uint {\n     codemap::lookup_char_pos(cm, sp.lo).line\n }\n "}, {"sha": "789c7ca7073a834652fd986a672d97e09c97d62f", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -193,7 +193,7 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n \n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function.\n-        let demitter = fn@(cmsp: Option<(codemap::CodeMap, codemap::span)>,\n+        let demitter = fn@(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n                            msg: &str, lvl: diagnostic::level) {\n             if lvl == diagnostic::fatal {\n                 comm::send(ch, fatal);"}, {"sha": "480fc6c3914b4b48830e1c280aeecd0187f787a6", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -120,7 +120,7 @@ fn build_ctxt(sess: Session,\n \n fn build_session() -> Session {\n     let sopts: @options = basic_options();\n-    let codemap = codemap::new_codemap();\n+    let codemap = @codemap::new_codemap();\n     let error_handlers = build_error_handlers(codemap);\n     let {emitter, span_handler} = error_handlers;\n \n@@ -137,7 +137,7 @@ type ErrorHandlers = {\n // Build a custom error handler that will allow us to ignore non-fatal\n // errors\n fn build_error_handlers(\n-    codemap: codemap::CodeMap\n+    codemap: @codemap::CodeMap\n ) -> ErrorHandlers {\n \n     type DiagnosticHandler = {\n@@ -156,13 +156,13 @@ fn build_error_handlers(\n         fn note(msg: &str) { self.inner.note(msg) }\n         fn bug(msg: &str) -> ! { self.inner.bug(msg) }\n         fn unimpl(msg: &str) -> ! { self.inner.unimpl(msg) }\n-        fn emit(cmsp: Option<(codemap::CodeMap, codemap::span)>,\n+        fn emit(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n                 msg: &str, lvl: diagnostic::level) {\n             self.inner.emit(cmsp, msg, lvl)\n         }\n     }\n \n-    let emitter = fn@(cmsp: Option<(codemap::CodeMap, codemap::span)>,\n+    let emitter = fn@(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n                        msg: &str, lvl: diagnostic::level) {\n         diagnostic::emit(cmsp, msg, lvl);\n     };"}, {"sha": "a616e73e54948a96d205aac9f9229e75051c335b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -86,19 +86,21 @@ impl filemap {\n     }\n }\n \n-struct CodeMap_ {\n+struct CodeMap {\n     files: DVec<@filemap>\n }\n \n-type CodeMap = @CodeMap_;\n-\n struct loc {\n     file: @filemap, line: uint, col: uint\n }\n \n-fn new_codemap() -> CodeMap { @CodeMap_ {files: DVec()} }\n+fn new_codemap() -> CodeMap {\n+    CodeMap {\n+        files: DVec()\n+    }\n+}\n \n-fn mk_substr_filename(cm: CodeMap, sp: span) -> ~str\n+fn mk_substr_filename(cm: @CodeMap, sp: span) -> ~str\n {\n     let pos = lookup_char_pos(cm, sp.lo);\n     return fmt!(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n@@ -110,7 +112,7 @@ fn next_line(file: @filemap, chpos: uint, byte_pos: uint) {\n \n type lookup_fn = pure fn(file_pos) -> uint;\n \n-fn lookup_line(map: CodeMap, pos: uint, lookup: lookup_fn)\n+fn lookup_line(map: @CodeMap, pos: uint, lookup: lookup_fn)\n     -> {fm: @filemap, line: uint}\n {\n     let len = map.files.len();\n@@ -133,22 +135,22 @@ fn lookup_line(map: CodeMap, pos: uint, lookup: lookup_fn)\n     return {fm: f, line: a};\n }\n \n-fn lookup_pos(map: CodeMap, pos: uint, lookup: lookup_fn) -> loc {\n+fn lookup_pos(map: @CodeMap, pos: uint, lookup: lookup_fn) -> loc {\n     let {fm: f, line: a} = lookup_line(map, pos, lookup);\n     return loc {file: f, line: a + 1u, col: pos - lookup(f.lines[a])};\n }\n \n-fn lookup_char_pos(map: CodeMap, pos: uint) -> loc {\n+fn lookup_char_pos(map: @CodeMap, pos: uint) -> loc {\n     pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n     return lookup_pos(map, pos, lookup);\n }\n \n-fn lookup_byte_pos(map: CodeMap, pos: uint) -> loc {\n+fn lookup_byte_pos(map: @CodeMap, pos: uint) -> loc {\n     pure fn lookup(pos: file_pos) -> uint { return pos.byte; }\n     return lookup_pos(map, pos, lookup);\n }\n \n-fn lookup_char_pos_adj(map: CodeMap, pos: uint)\n+fn lookup_char_pos_adj(map: @CodeMap, pos: uint)\n     -> {filename: ~str, line: uint, col: uint, file: Option<@filemap>}\n {\n     let loc = lookup_char_pos(map, pos);\n@@ -171,7 +173,7 @@ fn lookup_char_pos_adj(map: CodeMap, pos: uint)\n     }\n }\n \n-fn adjust_span(map: CodeMap, sp: span) -> span {\n+fn adjust_span(map: @CodeMap, sp: span) -> span {\n     pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n     let line = lookup_line(map, sp.lo, lookup);\n     match (line.fm.substr) {\n@@ -210,14 +212,14 @@ impl<D: Deserializer> span: Deserializable<D> {\n     }\n }\n \n-fn span_to_str_no_adj(sp: span, cm: CodeMap) -> ~str {\n+fn span_to_str_no_adj(sp: span, cm: @CodeMap) -> ~str {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n     return fmt!(\"%s:%u:%u: %u:%u\", lo.file.name,\n              lo.line, lo.col, hi.line, hi.col)\n }\n \n-fn span_to_str(sp: span, cm: CodeMap) -> ~str {\n+fn span_to_str(sp: span, cm: @CodeMap) -> ~str {\n     let lo = lookup_char_pos_adj(cm, sp.lo);\n     let hi = lookup_char_pos_adj(cm, sp.hi);\n     return fmt!(\"%s:%u:%u: %u:%u\", lo.filename,\n@@ -229,12 +231,12 @@ struct file_lines {\n     lines: ~[uint]\n }\n \n-fn span_to_filename(sp: span, cm: codemap::CodeMap) -> filename {\n+fn span_to_filename(sp: span, cm: @codemap::CodeMap) -> filename {\n     let lo = lookup_char_pos(cm, sp.lo);\n     return /* FIXME (#2543) */ copy lo.file.name;\n }\n \n-fn span_to_lines(sp: span, cm: codemap::CodeMap) -> @file_lines {\n+fn span_to_lines(sp: span, cm: @codemap::CodeMap) -> @file_lines {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);\n     let mut lines = ~[];\n@@ -253,7 +255,7 @@ fn get_line(fm: @filemap, line: int) -> ~str unsafe {\n     str::slice(*fm.src, begin, end)\n }\n \n-fn lookup_byte_offset(cm: codemap::CodeMap, chpos: uint)\n+fn lookup_byte_offset(cm: @codemap::CodeMap, chpos: uint)\n     -> {fm: @filemap, pos: uint} {\n     pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n     let {fm, line} = lookup_line(cm, chpos, lookup);\n@@ -263,20 +265,20 @@ fn lookup_byte_offset(cm: codemap::CodeMap, chpos: uint)\n     {fm: fm, pos: line_offset + col_offset}\n }\n \n-fn span_to_snippet(sp: span, cm: codemap::CodeMap) -> ~str {\n+fn span_to_snippet(sp: span, cm: @codemap::CodeMap) -> ~str {\n     let begin = lookup_byte_offset(cm, sp.lo);\n     let end = lookup_byte_offset(cm, sp.hi);\n     assert begin.fm.start_pos == end.fm.start_pos;\n     return str::slice(*begin.fm.src, begin.pos, end.pos);\n }\n \n-fn get_snippet(cm: codemap::CodeMap, fidx: uint, lo: uint, hi: uint) -> ~str\n+fn get_snippet(cm: @codemap::CodeMap, fidx: uint, lo: uint, hi: uint) -> ~str\n {\n     let fm = cm.files[fidx];\n     return str::slice(*fm.src, lo, hi)\n }\n \n-fn get_filemap(cm: CodeMap, filename: ~str) -> @filemap {\n+fn get_filemap(cm: @CodeMap, filename: ~str) -> @filemap {\n     for cm.files.each |fm| { if fm.name == filename { return *fm; } }\n     //XXjdm the following triggers a mismatched type bug\n     //      (or expected function, found _|_)"}, {"sha": "9335faed0c9872fe21c71a6dff61b9eaa033eb64", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -9,7 +9,7 @@ export codemap_span_handler, codemap_handler;\n export ice_msg;\n export expect;\n \n-type emitter = fn@(cmsp: Option<(codemap::CodeMap, span)>,\n+type emitter = fn@(cmsp: Option<(@codemap::CodeMap, span)>,\n                    msg: &str, lvl: level);\n \n \n@@ -33,7 +33,7 @@ trait handler {\n     fn note(msg: &str);\n     fn bug(msg: &str) -> !;\n     fn unimpl(msg: &str) -> !;\n-    fn emit(cmsp: Option<(codemap::CodeMap, span)>, msg: &str, lvl: level);\n+    fn emit(cmsp: Option<(@codemap::CodeMap, span)>, msg: &str, lvl: level);\n }\n \n type handler_t = @{\n@@ -43,7 +43,7 @@ type handler_t = @{\n \n type codemap_t = @{\n     handler: handler,\n-    cm: codemap::CodeMap\n+    cm: @codemap::CodeMap\n };\n \n impl codemap_t: span_handler {\n@@ -107,7 +107,7 @@ impl handler_t: handler {\n         self.fatal(ice_msg(msg));\n     }\n     fn unimpl(msg: &str) -> ! { self.bug(~\"unimplemented \" + msg); }\n-    fn emit(cmsp: Option<(codemap::CodeMap, span)>, msg: &str, lvl: level) {\n+    fn emit(cmsp: Option<(@codemap::CodeMap, span)>, msg: &str, lvl: level) {\n         self.emit(cmsp, msg, lvl);\n     }\n }\n@@ -116,7 +116,7 @@ fn ice_msg(msg: &str) -> ~str {\n     fmt!(\"internal compiler error: %s\", msg)\n }\n \n-fn mk_span_handler(handler: handler, cm: codemap::CodeMap) -> span_handler {\n+fn mk_span_handler(handler: handler, cm: @codemap::CodeMap) -> span_handler {\n     @{ handler: handler, cm: cm } as span_handler\n }\n \n@@ -125,7 +125,7 @@ fn mk_handler(emitter: Option<emitter>) -> handler {\n     let emit = match emitter {\n       Some(e) => e,\n       None => {\n-        let f = fn@(cmsp: Option<(codemap::CodeMap, span)>,\n+        let f = fn@(cmsp: Option<(@codemap::CodeMap, span)>,\n             msg: &str, t: level) {\n             emit(cmsp, msg, t);\n         };\n@@ -189,7 +189,7 @@ fn print_diagnostic(topic: ~str, lvl: level, msg: &str) {\n     io::stderr().write_str(fmt!(\" %s\\n\", msg));\n }\n \n-fn emit(cmsp: Option<(codemap::CodeMap, span)>, msg: &str, lvl: level) {\n+fn emit(cmsp: Option<(@codemap::CodeMap, span)>, msg: &str, lvl: level) {\n     match cmsp {\n       Some((cm, sp)) => {\n         let sp = codemap::adjust_span(cm,sp);\n@@ -205,7 +205,7 @@ fn emit(cmsp: Option<(codemap::CodeMap, span)>, msg: &str, lvl: level) {\n     }\n }\n \n-fn highlight_lines(cm: codemap::CodeMap, sp: span,\n+fn highlight_lines(cm: @codemap::CodeMap, sp: span,\n                    lines: @codemap::file_lines) {\n \n     let fm = lines.file;\n@@ -260,7 +260,7 @@ fn highlight_lines(cm: codemap::CodeMap, sp: span,\n     }\n }\n \n-fn print_macro_backtrace(cm: codemap::CodeMap, sp: span) {\n+fn print_macro_backtrace(cm: @codemap::CodeMap, sp: span) {\n     do option::iter(&sp.expn_info) |ei| {\n         let ss = option::map_default(&ei.callie.span, @~\"\",\n                                      |span| @codemap::span_to_str(*span, cm));"}, {"sha": "ffed726f1f854fa42f86fb6999e1fbb7c599a24f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -125,7 +125,7 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n // when a macro expansion occurs, the resulting nodes have the backtrace()\n // -> expn_info of their expansion context stored into their span.\n trait ext_ctxt {\n-    fn codemap() -> CodeMap;\n+    fn codemap() -> @CodeMap;\n     fn parse_sess() -> parse::parse_sess;\n     fn cfg() -> ast::crate_cfg;\n     fn print_backtrace();\n@@ -157,7 +157,7 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n                       mut mod_path: ~[ast::ident],\n                       mut trace_mac: bool};\n     impl ctxt_repr: ext_ctxt {\n-        fn codemap() -> CodeMap { self.parse_sess.cm }\n+        fn codemap() -> @CodeMap { self.parse_sess.cm }\n         fn parse_sess() -> parse::parse_sess { self.parse_sess }\n         fn cfg() -> ast::crate_cfg { self.cfg }\n         fn print_backtrace() { }"}, {"sha": "f93be9c7266c84d14be5d62476cb1b37f3a994fa", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -23,7 +23,7 @@ use parse::token::{ident_interner, mk_ident_interner};\n use codemap::filemap;\n \n type parse_sess = @{\n-    cm: codemap::CodeMap,\n+    cm: @codemap::CodeMap,\n     mut next_id: node_id,\n     span_diagnostic: span_handler,\n     interner: @ident_interner,\n@@ -33,15 +33,15 @@ type parse_sess = @{\n };\n \n fn new_parse_sess(demitter: Option<emitter>) -> parse_sess {\n-    let cm = codemap::new_codemap();\n+    let cm = @codemap::new_codemap();\n     return @{cm: cm,\n              mut next_id: 1,\n              span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n              interner: mk_ident_interner(),\n              mut chpos: 0u, mut byte_pos: 0u};\n }\n \n-fn new_parse_sess_special_handler(sh: span_handler, cm: codemap::CodeMap)\n+fn new_parse_sess_special_handler(sh: span_handler, cm: @codemap::CodeMap)\n     -> parse_sess {\n     return @{cm: cm,\n              mut next_id: 1,"}, {"sha": "f3e84a0cbf8eaaab528ac7813238fd414fbf05ff", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -232,7 +232,7 @@ fn consume_any_line_comment(rdr: string_reader)\n         }\n     } else if rdr.curr == '#' {\n         if nextch(rdr) == '!' {\n-            let cmap = codemap::new_codemap();\n+            let cmap = @codemap::new_codemap();\n             (*cmap).files.push(rdr.filemap);\n             let loc = codemap::lookup_char_pos_adj(cmap, rdr.chpos);\n             if loc.line == 1u && loc.col == 0u {"}, {"sha": "2bf9b826d6fae37cfbd54cb2ff4494eaf362df7e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b248a6ca8962249d5882375610764a6dd9561c3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5b248a6ca8962249d5882375610764a6dd9561c3", "patch": "@@ -25,7 +25,7 @@ fn no_ann() -> pp_ann {\n \n type ps =\n     @{s: pp::printer,\n-      cm: Option<CodeMap>,\n+      cm: Option<@CodeMap>,\n       intr: @token::ident_interner,\n       comments: Option<~[comments::cmnt]>,\n       literals: Option<~[comments::lit]>,\n@@ -46,7 +46,7 @@ fn end(s: ps) {\n \n fn rust_printer(writer: io::Writer, intr: @ident_interner) -> ps {\n     return @{s: pp::mk_printer(writer, default_columns),\n-             cm: None::<CodeMap>,\n+             cm: None::<@CodeMap>,\n              intr: intr,\n              comments: None::<~[comments::cmnt]>,\n              literals: None::<~[comments::lit]>,\n@@ -64,7 +64,7 @@ const default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-fn print_crate(cm: CodeMap, intr: @ident_interner,\n+fn print_crate(cm: @CodeMap, intr: @ident_interner,\n                span_diagnostic: diagnostic::span_handler,\n                crate: @ast::crate, filename: ~str, in: io::Reader,\n                out: io::Writer, ann: pp_ann, is_expanded: bool) {"}]}