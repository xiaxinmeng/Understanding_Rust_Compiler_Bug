{"sha": "576625f0a1c6e54075d173db7e691d75077ca677", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjYyNWYwYTFjNmU1NDA3NWQxNzNkYjdlNjkxZDc1MDc3Y2E2Nzc=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2019-01-23T21:22:10Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2019-01-23T21:32:04Z"}, "message": "Add way of getting docs from the code model and use for completion", "tree": {"sha": "72c1fadf48265e7f5355eb72586de4bcdab43cec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72c1fadf48265e7f5355eb72586de4bcdab43cec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576625f0a1c6e54075d173db7e691d75077ca677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576625f0a1c6e54075d173db7e691d75077ca677", "html_url": "https://github.com/rust-lang/rust/commit/576625f0a1c6e54075d173db7e691d75077ca677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576625f0a1c6e54075d173db7e691d75077ca677/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a6ce2bc959c346aed7a98c8509d1aa3d19ec8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6ce2bc959c346aed7a98c8509d1aa3d19ec8a9", "html_url": "https://github.com/rust-lang/rust/commit/6a6ce2bc959c346aed7a98c8509d1aa3d19ec8a9"}], "stats": {"total": 92, "additions": 72, "deletions": 20}, "files": [{"sha": "333d117f13da74680ad4f7eef4f2fed030cb0656", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=576625f0a1c6e54075d173db7e691d75077ca677", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use relative_path::RelativePathBuf;\n use ra_db::{CrateId, FileId};\n-use ra_syntax::{ast::{self, AstNode, DocCommentsOwner}, TreeArc, SyntaxNode};\n+use ra_syntax::{ast::self, TreeArc, SyntaxNode};\n \n use crate::{\n     Name, DefId, Path, PerNs, ScopesWithSyntaxMapping, Ty, HirFileId,\n@@ -14,6 +14,7 @@ use crate::{\n     adt::VariantData,\n     generics::GenericParams,\n     code_model_impl::def_id_to_ast,\n+    docs::{Documentation, Docs, docs_from_ast}\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -208,6 +209,12 @@ impl Struct {\n     }\n }\n \n+impl Docs for Struct {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Enum {\n     pub(crate) def_id: DefId,\n@@ -239,6 +246,12 @@ impl Enum {\n     }\n }\n \n+impl Docs for Enum {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n     pub(crate) def_id: DefId,\n@@ -281,6 +294,12 @@ impl EnumVariant {\n     }\n }\n \n+impl Docs for EnumVariant {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) def_id: DefId,\n@@ -352,19 +371,11 @@ impl Function {\n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n         db.generic_params(self.def_id)\n     }\n+}\n \n-    pub fn docs(&self, db: &impl HirDatabase) -> Option<String> {\n-        let def_loc = self.def_id.loc(db);\n-        let syntax = db.file_item(def_loc.source_item_id);\n-        let fn_def = ast::FnDef::cast(&syntax).expect(\"fn def should point to FnDef node\");\n-\n-        // doc_comment_text unconditionally returns a String\n-        let comments = fn_def.doc_comment_text();\n-        if comments.is_empty() {\n-            None\n-        } else {\n-            Some(comments)\n-        }\n+impl Docs for Function {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n     }\n }\n "}, {"sha": "330d8f8f456e414b573b6b7b5c840ede3b879411", "filename": "crates/ra_hir/src/docs.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=576625f0a1c6e54075d173db7e691d75077ca677", "patch": "@@ -0,0 +1,35 @@\n+use ra_syntax::ast;\n+\n+use crate::HirDatabase;\n+\n+#[derive(Debug, Clone)]\n+pub struct Documentation(String);\n+\n+impl Documentation {\n+    pub fn new(s: &str) -> Self {\n+        Self(s.into())\n+    }\n+\n+    pub fn contents(&self) -> &str {\n+        &self.0\n+    }\n+}\n+\n+impl Into<String> for Documentation {\n+    fn into(self) -> String {\n+        self.contents().into()\n+    }\n+}\n+\n+pub trait Docs {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation>;\n+}\n+\n+pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n+    let comments = node.doc_comment_text();\n+    if comments.is_empty() {\n+        None\n+    } else {\n+        Some(Documentation::new(&comments))\n+    }\n+}"}, {"sha": "f517f71e0c3938c61667d04e2becb20884c34be7", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=576625f0a1c6e54075d173db7e691d75077ca677", "patch": "@@ -23,6 +23,7 @@ mod ty;\n mod impl_block;\n mod expr;\n mod generics;\n+mod docs;\n \n mod code_model_api;\n mod code_model_impl;\n@@ -45,6 +46,7 @@ pub use self::{\n     ty::Ty,\n     impl_block::{ImplBlock, ImplItem},\n     code_model_impl::function::{FnScopes, ScopesWithSyntaxMapping},\n+    docs::{Docs, Documentation}\n };\n \n pub use self::code_model_api::{"}, {"sha": "aeb226847fb5b9ed559c55eb4a70dd6c11cf50c4", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=576625f0a1c6e54075d173db7e691d75077ca677", "patch": "@@ -2,6 +2,8 @@ use crate::{\n     completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext},\n };\n \n+use hir::Docs;\n+\n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let (path, module) = match (&ctx.path_prefix, &ctx.module) {\n         (Some(path), Some(module)) => (path.clone(), module),\n@@ -27,13 +29,14 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         hir::Def::Enum(e) => {\n             e.variants(ctx.db)\n                 .into_iter()\n-                .for_each(|(variant_name, _variant)| {\n+                .for_each(|(variant_name, variant)| {\n                     CompletionItem::new(\n                         CompletionKind::Reference,\n                         ctx.source_range(),\n                         variant_name.to_string(),\n                     )\n                     .kind(CompletionItemKind::EnumVariant)\n+                    .set_documentation(variant.docs(ctx.db))\n                     .add_to(acc)\n                 });\n         }"}, {"sha": "8e0be4c4b0079659da0df77cca16be91b8fee0e2", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576625f0a1c6e54075d173db7e691d75077ca677/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=576625f0a1c6e54075d173db7e691d75077ca677", "patch": "@@ -1,4 +1,4 @@\n-use hir::PerNs;\n+use hir::{Docs, Documentation, PerNs};\n \n use crate::completion::completion_context::CompletionContext;\n use ra_syntax::{\n@@ -19,7 +19,7 @@ pub struct CompletionItem {\n     label: String,\n     kind: Option<CompletionItemKind>,\n     detail: Option<String>,\n-    documentation: Option<String>,\n+    documentation: Option<Documentation>,\n     lookup: Option<String>,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -98,7 +98,7 @@ impl CompletionItem {\n     }\n     /// A doc-comment\n     pub fn documentation(&self) -> Option<&str> {\n-        self.documentation.as_ref().map(|it| it.as_str())\n+        self.documentation.as_ref().map(|it| it.contents())\n     }\n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n@@ -137,7 +137,7 @@ pub(crate) struct Builder {\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n     detail: Option<String>,\n-    documentation: Option<String>,\n+    documentation: Option<Documentation>,\n     lookup: Option<String>,\n     kind: Option<CompletionItemKind>,\n     text_edit: Option<TextEdit>,\n@@ -197,10 +197,10 @@ impl Builder {\n         self\n     }\n     #[allow(unused)]\n-    pub(crate) fn documentation(self, docs: impl Into<String>) -> Builder {\n+    pub(crate) fn documentation(self, docs: Documentation) -> Builder {\n         self.set_documentation(Some(docs))\n     }\n-    pub(crate) fn set_documentation(mut self, docs: Option<impl Into<String>>) -> Builder {\n+    pub(crate) fn set_documentation(mut self, docs: Option<Documentation>) -> Builder {\n         self.documentation = docs.map(Into::into);\n         self\n     }\n@@ -265,6 +265,7 @@ impl Builder {\n             }\n             self.insert_text_format = InsertTextFormat::Snippet;\n         }\n+\n         if let Some(docs) = function.docs(ctx.db) {\n             self.documentation = Some(docs);\n         }"}]}