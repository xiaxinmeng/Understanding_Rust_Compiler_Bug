{"sha": "0cfc3e101689d050432f600a35e953413b87147f", "node_id": "C_kwDOAAsO6NoAKDBjZmMzZTEwMTY4OWQwNTA0MzJmNjAwYTM1ZTk1MzQxM2I4NzE0N2Y", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-24T12:30:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-05T14:31:22Z"}, "message": "Remove build_helper\n\nThe majority of the code is only used by either rustbuild or\nrustc_llvm's build script. Rust_build is compiled once for rustbuild and\nonce for every stage. This means that the majority of the code in this\ncrate is needlessly compiled multiple times. By moving only the code\nactually used by the respective crates to rustbuild and rustc_llvm's\nbuild script, this needless duplicate compilation is avoided.", "tree": {"sha": "8050d0cd5246666cba6a61d1d1a08b9e18f222bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8050d0cd5246666cba6a61d1d1a08b9e18f222bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cfc3e101689d050432f600a35e953413b87147f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfc3e101689d050432f600a35e953413b87147f", "html_url": "https://github.com/rust-lang/rust/commit/0cfc3e101689d050432f600a35e953413b87147f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cfc3e101689d050432f600a35e953413b87147f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8a49fc90281d9a3227a547b5bac8e01d17325be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a49fc90281d9a3227a547b5bac8e01d17325be", "html_url": "https://github.com/rust-lang/rust/commit/c8a49fc90281d9a3227a547b5bac8e01d17325be"}], "stats": {"total": 210, "additions": 95, "deletions": 115}, "files": [{"sha": "2ee9a872d3ee244a0ab1e5b32175a2d3db2fc355", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -214,7 +214,6 @@ dependencies = [\n name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n- \"build_helper\",\n  \"cc\",\n  \"cmake\",\n  \"filetime\",\n@@ -256,10 +255,6 @@ dependencies = [\n  \"toml\",\n ]\n \n-[[package]]\n-name = \"build_helper\"\n-version = \"0.1.0\"\n-\n [[package]]\n name = \"bump-stage0\"\n version = \"0.1.0\"\n@@ -3891,7 +3886,6 @@ dependencies = [\n name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n- \"build_helper\",\n  \"cc\",\n  \"libc\",\n ]"}, {"sha": "34556df3c6d79e67e5004afbfdba234751caca68", "filename": "compiler/rustc_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/compiler%2Frustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/compiler%2Frustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2FCargo.toml?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -11,5 +11,4 @@ emscripten = []\n libc = \"0.2.73\"\n \n [build-dependencies]\n-build_helper = { path = \"../../src/build_helper\" }\n cc = \"1.0.69\""}, {"sha": "ac758c15cca7875fce627f5f92879c881d258307", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -1,8 +1,8 @@\n use std::env;\n+use std::ffi::{OsStr, OsString};\n+use std::fmt::Display;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n-\n-use build_helper::{output, tracked_env_var_os};\n+use std::process::{Command, Stdio};\n \n fn detect_llvm_link() -> (&'static str, &'static str) {\n     // Force the link mode we want, preferring static by default, but\n@@ -14,13 +14,74 @@ fn detect_llvm_link() -> (&'static str, &'static str) {\n     }\n }\n \n+// Because Cargo adds the compiler's dylib path to our library search path, llvm-config may\n+// break: the dylib path for the compiler, as of this writing, contains a copy of the LLVM\n+// shared library, which means that when our freshly built llvm-config goes to load it's\n+// associated LLVM, it actually loads the compiler's LLVM. In particular when building the first\n+// compiler (i.e., in stage 0) that's a problem, as the compiler's LLVM is likely different from\n+// the one we want to use. As such, we restore the environment to what bootstrap saw. This isn't\n+// perfect -- we might actually want to see something from Cargo's added library paths -- but\n+// for now it works.\n+fn restore_library_path() {\n+    let key = tracked_env_var_os(\"REAL_LIBRARY_PATH_VAR\").expect(\"REAL_LIBRARY_PATH_VAR\");\n+    if let Some(env) = tracked_env_var_os(\"REAL_LIBRARY_PATH\") {\n+        env::set_var(&key, &env);\n+    } else {\n+        env::remove_var(&key);\n+    }\n+}\n+\n+/// Reads an environment variable and adds it to dependencies.\n+/// Supposed to be used for all variables except those set for build scripts by cargo\n+/// <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts>\n+fn tracked_env_var_os<K: AsRef<OsStr> + Display>(key: K) -> Option<OsString> {\n+    println!(\"cargo:rerun-if-env-changed={}\", key);\n+    env::var_os(key)\n+}\n+\n+fn rerun_if_changed_anything_in_dir(dir: &Path) {\n+    let mut stack = dir\n+        .read_dir()\n+        .unwrap()\n+        .map(|e| e.unwrap())\n+        .filter(|e| &*e.file_name() != \".git\")\n+        .collect::<Vec<_>>();\n+    while let Some(entry) = stack.pop() {\n+        let path = entry.path();\n+        if entry.file_type().unwrap().is_dir() {\n+            stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+        } else {\n+            println!(\"cargo:rerun-if-changed={}\", path.display());\n+        }\n+    }\n+}\n+\n+#[track_caller]\n+fn output(cmd: &mut Command) -> String {\n+    let output = match cmd.stderr(Stdio::inherit()).output() {\n+        Ok(status) => status,\n+        Err(e) => {\n+            println!(\"\\n\\nfailed to execute command: {:?}\\nerror: {}\\n\\n\", cmd, e);\n+            std::process::exit(1);\n+        }\n+    };\n+    if !output.status.success() {\n+        panic!(\n+            \"command did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\",\n+            cmd, output.status\n+        );\n+    }\n+    String::from_utf8(output.stdout).unwrap()\n+}\n+\n fn main() {\n     if tracked_env_var_os(\"RUST_CHECK\").is_some() {\n         // If we're just running `check`, there's no need for LLVM to be built.\n         return;\n     }\n \n-    build_helper::restore_library_path();\n+    restore_library_path();\n \n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config =\n@@ -160,7 +221,7 @@ fn main() {\n         cfg.debug(false);\n     }\n \n-    build_helper::rerun_if_changed_anything_in_dir(Path::new(\"llvm-wrapper\"));\n+    rerun_if_changed_anything_in_dir(Path::new(\"llvm-wrapper\"));\n     cfg.file(\"llvm-wrapper/PassWrapper.cpp\")\n         .file(\"llvm-wrapper/RustWrapper.cpp\")\n         .file(\"llvm-wrapper/ArchiveWrapper.cpp\")"}, {"sha": "fe9d6a727ed1eceb86674ae0684c09b54f0218ed", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -34,7 +34,6 @@ path = \"bin/llvm-config-wrapper.rs\"\n test = false\n \n [dependencies]\n-build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.38\"\n filetime = \"0.2\"\n getopts = \"0.2.19\""}, {"sha": "320099102fc3893d020a8bf5dde4968ecf46de4e", "filename": "src/bootstrap/build_helper.rs", "status": "renamed", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fbuild_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fbuild_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild_helper.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -1,9 +1,7 @@\n-use std::ffi::{OsStr, OsString};\n-use std::fmt::Display;\n+use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::time::{SystemTime, UNIX_EPOCH};\n-use std::{env, fs};\n \n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n@@ -13,7 +11,6 @@ use std::{env, fs};\n ///\n /// This is currently used judiciously throughout the build system rather than\n /// using a `Result` with `try!`, but this may change one day...\n-#[macro_export]\n macro_rules! t {\n     ($e:expr) => {\n         match $e {\n@@ -29,31 +26,7 @@ macro_rules! t {\n         }\n     };\n }\n-\n-/// Reads an environment variable and adds it to dependencies.\n-/// Supposed to be used for all variables except those set for build scripts by cargo\n-/// <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts>\n-pub fn tracked_env_var_os<K: AsRef<OsStr> + Display>(key: K) -> Option<OsString> {\n-    println!(\"cargo:rerun-if-env-changed={}\", key);\n-    env::var_os(key)\n-}\n-\n-// Because Cargo adds the compiler's dylib path to our library search path, llvm-config may\n-// break: the dylib path for the compiler, as of this writing, contains a copy of the LLVM\n-// shared library, which means that when our freshly built llvm-config goes to load it's\n-// associated LLVM, it actually loads the compiler's LLVM. In particular when building the first\n-// compiler (i.e., in stage 0) that's a problem, as the compiler's LLVM is likely different from\n-// the one we want to use. As such, we restore the environment to what bootstrap saw. This isn't\n-// perfect -- we might actually want to see something from Cargo's added library paths -- but\n-// for now it works.\n-pub fn restore_library_path() {\n-    let key = tracked_env_var_os(\"REAL_LIBRARY_PATH_VAR\").expect(\"REAL_LIBRARY_PATH_VAR\");\n-    if let Some(env) = tracked_env_var_os(\"REAL_LIBRARY_PATH\") {\n-        env::set_var(&key, &env);\n-    } else {\n-        env::remove_var(&key);\n-    }\n-}\n+pub(crate) use t;\n \n pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n     if !try_run(cmd, print_cmd_on_fail) {\n@@ -130,23 +103,6 @@ pub fn output(cmd: &mut Command) -> String {\n     String::from_utf8(output.stdout).unwrap()\n }\n \n-pub fn rerun_if_changed_anything_in_dir(dir: &Path) {\n-    let mut stack = dir\n-        .read_dir()\n-        .unwrap()\n-        .map(|e| e.unwrap())\n-        .filter(|e| &*e.file_name() != \".git\")\n-        .collect::<Vec<_>>();\n-    while let Some(entry) = stack.pop() {\n-        let path = entry.path();\n-        if entry.file_type().unwrap().is_dir() {\n-            stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n-        } else {\n-            println!(\"cargo:rerun-if-changed={}\", path.display());\n-        }\n-    }\n-}\n-\n /// Returns the last-modified time for `path`, or zero if it doesn't exist.\n pub fn mtime(path: &Path) -> SystemTime {\n     fs::metadata(path).and_then(|f| f.modified()).unwrap_or(UNIX_EPOCH)", "previous_filename": "src/build_helper/lib.rs"}, {"sha": "531d9c27b473847969a3da544a21346bdad5b414", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -11,8 +11,7 @@ use std::path::{Component, Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n-use build_helper::{output, t};\n-\n+use crate::build_helper::{output, t};\n use crate::cache::{Cache, Interned, INTERNER};\n use crate::check;\n use crate::compile;"}, {"sha": "9b19e22e0d01eb2ee8b1360f03a90c8f17552346", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -26,8 +26,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::{env, iter};\n \n-use build_helper::output;\n-\n+use crate::build_helper::output;\n use crate::config::{Target, TargetSelection};\n use crate::{Build, CLang, GitRepo};\n "}, {"sha": "af5c2e1bcd6165bd4f95e1906c0e60429c8cd138", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -8,8 +8,7 @@\n use std::path::Path;\n use std::process::Command;\n \n-use build_helper::output;\n-\n+use crate::build_helper::output;\n use crate::Build;\n \n pub enum GitInfo {"}, {"sha": "249ddf9c731caa8f41bf334918512cf7c0e5696f", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -9,8 +9,7 @@ use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::Path;\n \n-use build_helper::t;\n-\n+use crate::build_helper::t;\n use crate::Build;\n \n pub fn clean(build: &Build, all: bool) {"}, {"sha": "b9a80ce2d11ec1e0183fb1d3bfa917fe2eebd3be", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -16,9 +16,9 @@ use std::path::{Path, PathBuf};\n use std::process::{exit, Command, Stdio};\n use std::str;\n \n-use build_helper::{output, t, up_to_date};\n use serde::Deserialize;\n \n+use crate::build_helper::{output, t, up_to_date};\n use crate::builder::Cargo;\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};"}, {"sha": "f7c69e1161e050c0c8e0212ab9aa45afb6395c26", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -12,13 +12,13 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n+use crate::build_helper::t;\n use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::exe;\n-use build_helper::t;\n use serde::Deserialize;\n \n macro_rules! check_ci_llvm {"}, {"sha": "c0489de42de1de6ceaa8d03719020cc90301141f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -14,8 +14,7 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use build_helper::{output, t};\n-\n+use crate::build_helper::{output, t};\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n@@ -635,14 +634,6 @@ impl Step for RustcDev {\n             &[],\n             &tarball.image_dir().join(\"lib/rustlib/rustc-src/rust\"),\n         );\n-        // This particular crate is used as a build dependency of the above.\n-        copy_src_dirs(\n-            builder,\n-            &builder.src,\n-            &[\"src/build_helper\"],\n-            &[],\n-            &tarball.image_dir().join(\"lib/rustlib/rustc-src/rust\"),\n-        );\n         for file in src_files {\n             tarball.add_file(builder.src.join(file), \"lib/rustlib/rustc-src/rust\", 0o644);\n         }"}, {"sha": "710bf2493ec240174550317cdffdbf94e1ed2d89", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -12,15 +12,14 @@ use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n \n-use crate::Mode;\n-use build_helper::{t, up_to_date};\n-\n+use crate::build_helper::{t, up_to_date};\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n use crate::config::{Config, TargetSelection};\n use crate::tool::{self, prepare_tool_cargo, SourceType, Tool};\n use crate::util::symlink_dir;\n+use crate::Mode;\n \n macro_rules! submodule_helper {\n     ($path:expr, submodule) => {"}, {"sha": "d523171d5b1c20b89dd8f1a7ed603c7c53a87b36", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -7,9 +7,9 @@ use std::env;\n use std::path::PathBuf;\n use std::process;\n \n-use build_helper::t;\n use getopts::Options;\n \n+use crate::build_helper::t;\n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n use crate::setup::Profile;"}, {"sha": "5774a8ecf0916cfcece4f64f23b118a809e17a33", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -1,7 +1,7 @@\n //! Runs rustfmt on the repository.\n \n+use crate::build_helper::{output, t};\n use crate::Build;\n-use build_helper::{output, t};\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};"}, {"sha": "5aa634ea3a75fcfdfb37ec23a305f8395f8f80ac", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -8,7 +8,7 @@ use std::fs;\n use std::path::{Component, PathBuf};\n use std::process::Command;\n \n-use build_helper::t;\n+use crate::build_helper::t;\n \n use crate::dist::{self, sanitize_sh};\n use crate::tarball::GeneratedTarball;"}, {"sha": "81b54c852cd896773095441517998746c254c766", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -116,13 +116,14 @@ use std::os::unix::fs::symlink as symlink_file;\n #[cfg(windows)]\n use std::os::windows::fs::symlink_file;\n \n-use build_helper::{mtime, output, run, run_suppressed, t, try_run, try_run_suppressed};\n use filetime::FileTime;\n \n+use crate::build_helper::{mtime, output, run, run_suppressed, t, try_run, try_run_suppressed};\n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::util::{exe, libdir, CiEnv};\n \n+mod build_helper;\n mod builder;\n mod cache;\n mod cc_detect;\n@@ -1301,13 +1302,10 @@ impl Build {\n                 }\n                 // Don't include optional deps if their features are not\n                 // enabled. Ideally this would be computed from `cargo\n-                // metadata --features \u2026`, but that is somewhat slow. Just\n-                // skip `build_helper` since there aren't any operations we\n-                // want to perform on it. In the future, we may want to\n-                // consider just filtering all build and dev dependencies in\n-                // metadata::build.\n+                // metadata --features \u2026`, but that is somewhat slow. In\n+                // the future, we may want to consider just filtering all\n+                // build and dev dependencies in metadata::build.\n                 if visited.insert(dep)\n-                    && dep != \"build_helper\"\n                     && (dep != \"profiler_builtins\"\n                         || target\n                             .map(|t| self.config.profiler_enabled(t))"}, {"sha": "08e2b22fc1bdce5379be7a3ad9c89a3c317fe0a3", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -1,9 +1,9 @@\n use std::path::PathBuf;\n use std::process::Command;\n \n-use build_helper::output;\n use serde::Deserialize;\n \n+use crate::build_helper::output;\n use crate::cache::INTERNER;\n use crate::{Build, Crate};\n "}, {"sha": "2d7c1ebed6da33ec4e670770391058327ca36fe5", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -16,13 +16,12 @@ use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use build_helper::{output, t};\n-\n+use crate::build_helper::up_to_date;\n+use crate::build_helper::{output, t};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::util::{self, exe};\n use crate::{CLang, GitRepo};\n-use build_helper::up_to_date;\n \n pub struct Meta {\n     stamp: HashStamp,"}, {"sha": "a9a784538b59a866a1cd88c869d2929e0399ea7d", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -1,7 +1,7 @@\n+use crate::build_helper::output;\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::dist::distdir;\n use crate::tool::Tool;\n-use build_helper::output;\n use std::process::Command;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "36c9ba011c427d8c318d221c7c562265ea2745f2", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -15,8 +15,7 @@ use std::fs;\n use std::path::PathBuf;\n use std::process::Command;\n \n-use build_helper::output;\n-\n+use crate::build_helper::output;\n use crate::cache::INTERNER;\n use crate::config::Target;\n use crate::Build;"}, {"sha": "923522b90be040d2acb6a53a02a650ee8d135ea0", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -3,8 +3,7 @@ use std::{\n     process::Command,\n };\n \n-use build_helper::t;\n-\n+use crate::build_helper::t;\n use crate::builder::Builder;\n \n #[derive(Copy, Clone)]"}, {"sha": "714a2df34a7412f38227bef8eb5f62f9dc99389e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -11,8 +11,7 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n-use build_helper::{self, output, t};\n-\n+use crate::build_helper::{self, output, t};\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n use crate::compile;"}, {"sha": "da2fbe4ef655aa7107c3d38c45dd73afebe63dd2", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -4,8 +4,7 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{exit, Command};\n \n-use build_helper::t;\n-\n+use crate::build_helper::t;\n use crate::builder::{Builder, Cargo as CargoCommand, RunConfig, ShouldRun, Step};\n use crate::channel::GitInfo;\n use crate::compile;"}, {"sha": "9880f413f04e6cc053d37192551a38d3bf312a53", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -1,5 +1,5 @@\n+use crate::build_helper::t;\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n-use build_helper::t;\n use serde::{Deserialize, Serialize};\n use std::collections::HashMap;\n use std::env;"}, {"sha": "358bbd198106d812bd0c9e14a6fa4d504cea9fbf", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cfc3e101689d050432f600a35e953413b87147f/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=0cfc3e101689d050432f600a35e953413b87147f", "patch": "@@ -11,8 +11,7 @@ use std::process::Command;\n use std::str;\n use std::time::Instant;\n \n-use build_helper::t;\n-\n+use crate::build_helper::t;\n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n "}, {"sha": "d88df0e08fab3e01ef9b596bcf58629a01710301", "filename": "src/build_helper/Cargo.toml", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8a49fc90281d9a3227a547b5bac8e01d17325be/src%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8a49fc90281d9a3227a547b5bac8e01d17325be/src%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2FCargo.toml?ref=c8a49fc90281d9a3227a547b5bac8e01d17325be", "patch": "@@ -1,7 +0,0 @@\n-[package]\n-name = \"build_helper\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-\n-[lib]\n-path = \"lib.rs\""}]}