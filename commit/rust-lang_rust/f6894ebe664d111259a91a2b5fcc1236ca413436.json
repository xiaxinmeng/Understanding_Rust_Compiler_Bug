{"sha": "f6894ebe664d111259a91a2b5fcc1236ca413436", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODk0ZWJlNjY0ZDExMTI1OWE5MWEyYjVmY2MxMjM2Y2E0MTM0MzY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-10T17:43:58Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-11T19:54:43Z"}, "message": "Clean up LLVM module naming (just use CodegenUnit names).", "tree": {"sha": "f7fc5009ff43b4913d58988b0efbd5eb9e0612ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fc5009ff43b4913d58988b0efbd5eb9e0612ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6894ebe664d111259a91a2b5fcc1236ca413436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6894ebe664d111259a91a2b5fcc1236ca413436", "html_url": "https://github.com/rust-lang/rust/commit/f6894ebe664d111259a91a2b5fcc1236ca413436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6894ebe664d111259a91a2b5fcc1236ca413436/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5cd9ce53d2d25041db0cb02b40ba460ffa8908", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5cd9ce53d2d25041db0cb02b40ba460ffa8908", "html_url": "https://github.com/rust-lang/rust/commit/2c5cd9ce53d2d25041db0cb02b40ba460ffa8908"}], "stats": {"total": 108, "additions": 39, "deletions": 69}, "files": [{"sha": "ee53d045441ef20ae86c80ebe849b7e43d47ea17", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=f6894ebe664d111259a91a2b5fcc1236ca413436", "patch": "@@ -45,13 +45,6 @@ use std::process::{Output, Stdio};\n use std::str;\n use syntax::attr;\n \n-/// The LLVM module name containing crate-metadata. This includes a `.` on\n-/// purpose, so it cannot clash with the name of a user-defined module.\n-pub const METADATA_MODULE_NAME: &'static str = \"crate.metadata\";\n-\n-// same as for metadata above, but for allocator shim\n-pub const ALLOCATOR_MODULE_NAME: &'static str = \"crate.allocator\";\n-\n pub use rustc_codegen_utils::link::{find_crate_name, filename_for_input, default_output_for_target,\n                                   invalid_output_for_target, build_link_meta, out_filename,\n                                   check_file_is_writeable};"}, {"sha": "a68f22b2651f9eee70f506b9bb85b2f8c1e83e27", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=f6894ebe664d111259a91a2b5fcc1236ca413436", "patch": "@@ -238,7 +238,7 @@ fn fat_lto(cgcx: &CodegenContext,\n         .expect(\"must be codegen'ing at least one module\");\n     let module = modules.remove(costliest_module);\n     let llmod = module.llvm().expect(\"can't lto pre-codegened modules\").llmod;\n-    info!(\"using {:?} as a base module\", module.llmod_id);\n+    info!(\"using {:?} as a base module\", module.name);\n \n     // For all other modules we codegened we'll need to link them into our own\n     // bitcode. All modules were codegened in their own LLVM context, however,\n@@ -248,7 +248,7 @@ fn fat_lto(cgcx: &CodegenContext,\n     for module in modules {\n         let llvm = module.llvm().expect(\"can't lto pre-codegened modules\");\n         let buffer = ModuleBuffer::new(llvm.llmod);\n-        let llmod_id = CString::new(&module.llmod_id[..]).unwrap();\n+        let llmod_id = CString::new(&module.name[..]).unwrap();\n         serialized_modules.push((SerializedModule::Local(buffer), llmod_id));\n     }\n \n@@ -376,9 +376,9 @@ fn thin_lto(cgcx: &CodegenContext,\n         //        the most expensive portion of this small bit of global\n         //        analysis!\n         for (i, module) in modules.iter().enumerate() {\n-            info!(\"local module: {} - {}\", i, module.llmod_id);\n+            info!(\"local module: {} - {}\", i, module.name);\n             let llvm = module.llvm().expect(\"can't lto precodegened module\");\n-            let name = CString::new(module.llmod_id.clone()).unwrap();\n+            let name = CString::new(module.name.clone()).unwrap();\n             let buffer = ThinBuffer::new(llvm.llmod);\n             thin_modules.push(llvm::ThinLTOModule {\n                 identifier: name.as_ptr(),\n@@ -387,7 +387,7 @@ fn thin_lto(cgcx: &CodegenContext,\n             });\n             thin_buffers.push(buffer);\n             module_names.push(name);\n-            timeline.record(&module.llmod_id);\n+            timeline.record(&module.name);\n         }\n \n         // FIXME: All upstream crates are deserialized internally in the\n@@ -676,7 +676,6 @@ impl ThinModule {\n                 llcx,\n                 tm,\n             }),\n-            llmod_id: self.name().to_string(),\n             name: self.name().to_string(),\n             kind: ModuleKind::Regular,\n         };"}, {"sha": "cc608f68ef81a74310b4099573bf2f9a7fc86f72", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=f6894ebe664d111259a91a2b5fcc1236ca413436", "patch": "@@ -696,7 +696,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n \n         if config.emit_bc_compressed {\n             let dst = bc_out.with_extension(RLIB_BYTECODE_EXTENSION);\n-            let data = bytecode::encode(&module.llmod_id, data);\n+            let data = bytecode::encode(&module.name, data);\n             if let Err(e) = fs::write(&dst, data) {\n                 diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n             }\n@@ -1308,7 +1308,6 @@ fn execute_work_item(cgcx: &CodegenContext,\n         assert_eq!(bytecode_compressed.is_some(), config.emit_bc_compressed);\n \n         Ok(WorkItemResult::Compiled(CompiledModule {\n-            llmod_id: module.llmod_id.clone(),\n             name: module_name,\n             kind: ModuleKind::Regular,\n             pre_existing: true,"}, {"sha": "b4ba06c30bee29acfcbdfc7c939a93bb8ad32e20", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=f6894ebe664d111259a91a2b5fcc1236ca413436", "patch": "@@ -739,15 +739,18 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let link_meta = link::build_link_meta(crate_hash);\n \n     // Codegen the metadata.\n-    let llmod_id = \"metadata\";\n+    let metadata_cgu_name = CodegenUnit::build_cgu_name(tcx,\n+                                                        LOCAL_CRATE,\n+                                                        &[\"crate\"],\n+                                                        Some(\"metadata\")).as_str()\n+                                                                         .to_string();\n     let (metadata_llcx, metadata_llmod, metadata) =\n         time(tcx.sess, \"write metadata\", || {\n-            write_metadata(tcx, llmod_id, &link_meta)\n+            write_metadata(tcx, &metadata_cgu_name, &link_meta)\n         });\n \n     let metadata_module = ModuleCodegen {\n-        name: link::METADATA_MODULE_NAME.to_string(),\n-        llmod_id: llmod_id.to_string(),\n+        name: metadata_cgu_name,\n         source: ModuleSource::Codegened(ModuleLlvm {\n             llcx: metadata_llcx,\n             llmod: metadata_llmod,\n@@ -810,26 +813,30 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Codegen an allocator shim, if any\n     let allocator_module = if let Some(kind) = *tcx.sess.allocator_kind.get() {\n-        unsafe {\n-            let llmod_id = \"allocator\";\n-            let (llcx, llmod) =\n-                context::create_context_and_module(tcx.sess, llmod_id);\n-            let modules = ModuleLlvm {\n-                llmod,\n-                llcx,\n-                tm: create_target_machine(tcx.sess, false),\n-            };\n-            time(tcx.sess, \"write allocator module\", || {\n+        let llmod_id = CodegenUnit::build_cgu_name(tcx,\n+                                                   LOCAL_CRATE,\n+                                                   &[\"crate\"],\n+                                                   Some(\"allocator\")).as_str()\n+                                                                     .to_string();\n+        let (llcx, llmod) = unsafe {\n+            context::create_context_and_module(tcx.sess, &llmod_id)\n+        };\n+        let modules = ModuleLlvm {\n+            llmod,\n+            llcx,\n+            tm: create_target_machine(tcx.sess, false),\n+        };\n+        time(tcx.sess, \"write allocator module\", || {\n+            unsafe {\n                 allocator::codegen(tcx, &modules, kind)\n-            });\n+            }\n+        });\n \n-            Some(ModuleCodegen {\n-                name: link::ALLOCATOR_MODULE_NAME.to_string(),\n-                llmod_id: llmod_id.to_string(),\n-                source: ModuleSource::Codegened(modules),\n-                kind: ModuleKind::Allocator,\n-            })\n-        }\n+        Some(ModuleCodegen {\n+            name: llmod_id,\n+            source: ModuleSource::Codegened(modules),\n+            kind: ModuleKind::Allocator,\n+        })\n     } else {\n         None\n     };\n@@ -872,21 +879,10 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // succeed it means that none of the dependencies has changed\n                 // and we can safely re-use.\n                 if let Some(dep_node_index) = tcx.dep_graph.try_mark_green(tcx, dep_node) {\n-                    // Append \".rs\" to LLVM module identifier.\n-                    //\n-                    // LLVM code generator emits a \".file filename\" directive\n-                    // for ELF backends. Value of the \"filename\" is set as the\n-                    // LLVM module identifier.  Due to a LLVM MC bug[1], LLVM\n-                    // crashes if the module identifier is same as other symbols\n-                    // such as a function name in the module.\n-                    // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n-                    let llmod_id = format!(\"{}.rs\", cgu.name());\n-\n                     let module = ModuleCodegen {\n                         name: cgu.name().to_string(),\n                         source: ModuleSource::Preexisting(buf),\n                         kind: ModuleKind::Regular,\n-                        llmod_id,\n                     };\n                     tcx.dep_graph.mark_loaded_from_cache(dep_node_index, true);\n                     write::submit_codegened_module_to_llvm(tcx, module, 0);\n@@ -1195,21 +1191,8 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     {\n         let cgu_name = cgu.name().to_string();\n \n-        // Append \".rs\" to LLVM module identifier.\n-        //\n-        // LLVM code generator emits a \".file filename\" directive\n-        // for ELF backends. Value of the \"filename\" is set as the\n-        // LLVM module identifier.  Due to a LLVM MC bug[1], LLVM\n-        // crashes if the module identifier is same as other symbols\n-        // such as a function name in the module.\n-        // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n-        let llmod_id = format!(\"{}-{}.rs\",\n-                               cgu.name(),\n-                               tcx.crate_disambiguator(LOCAL_CRATE)\n-                                   .to_fingerprint().to_hex());\n-\n         // Instantiate monomorphizations without filling out definitions yet...\n-        let cx = CodegenCx::new(tcx, cgu, &llmod_id);\n+        let cx = CodegenCx::new(tcx, cgu);\n         let module = {\n             let mono_items = cx.codegen_unit\n                                  .items_in_deterministic_order(cx.tcx);\n@@ -1267,7 +1250,6 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 name: cgu_name,\n                 source: ModuleSource::Codegened(llvm_module),\n                 kind: ModuleKind::Regular,\n-                llmod_id,\n             }\n         };\n "}, {"sha": "80187f939b4520d5ff4e7077cf3b26245bcb2533", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=f6894ebe664d111259a91a2b5fcc1236ca413436", "patch": "@@ -214,8 +214,7 @@ pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (Cont\n \n impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-               codegen_unit: Arc<CodegenUnit<'tcx>>,\n-               llmod_id: &str)\n+               codegen_unit: Arc<CodegenUnit<'tcx>>)\n                -> CodegenCx<'a, 'tcx> {\n         // An interesting part of Windows which MSVC forces our hand on (and\n         // apparently MinGW didn't) is the usage of `dllimport` and `dllexport`\n@@ -268,7 +267,7 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n \n         unsafe {\n             let (llcx, llmod) = create_context_and_module(&tcx.sess,\n-                                                          &llmod_id[..]);\n+                                                          &codegen_unit.name().as_str());\n \n             let dbg_cx = if tcx.sess.opts.debuginfo != NoDebugInfo {\n                 let dctx = debuginfo::CrateDebugContext::new(llmod);"}, {"sha": "ef77baa23fc0bf6aad7cf6f7211612b514df86a4", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6894ebe664d111259a91a2b5fcc1236ca413436/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f6894ebe664d111259a91a2b5fcc1236ca413436", "patch": "@@ -257,8 +257,8 @@ struct ModuleCodegen {\n     /// unique amongst **all** crates.  Therefore, it should contain\n     /// something unique to this crate (e.g., a module path) as well\n     /// as the crate name and disambiguator.\n+    /// We currently generate these names via CodegenUnit::build_cgu_name().\n     name: String,\n-    llmod_id: String,\n     source: ModuleSource,\n     kind: ModuleKind,\n }\n@@ -305,7 +305,6 @@ impl ModuleCodegen {\n         };\n \n         CompiledModule {\n-            llmod_id: self.llmod_id,\n             name: self.name.clone(),\n             kind: self.kind,\n             pre_existing,\n@@ -319,7 +318,6 @@ impl ModuleCodegen {\n #[derive(Debug)]\n struct CompiledModule {\n     name: String,\n-    llmod_id: String,\n     kind: ModuleKind,\n     pre_existing: bool,\n     object: Option<PathBuf>,"}]}