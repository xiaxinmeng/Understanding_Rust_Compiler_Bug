{"sha": "2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMjRjNzQxMGY0N2Q1YTY5YWI5YmQ2OWIwNmU0OTk5ZTBlNmJlYTM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-07T21:34:23Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-08T02:24:53Z"}, "message": "Expand NameBinding to better represent bindings from imports", "tree": {"sha": "ac9037b8d5d0a0330a30695865961170617123d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac9037b8d5d0a0330a30695865961170617123d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3", "html_url": "https://github.com/rust-lang/rust/commit/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e189ed57b27caa396da44ce4f273b9a0061dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e189ed57b27caa396da44ce4f273b9a0061dda", "html_url": "https://github.com/rust-lang/rust/commit/22e189ed57b27caa396da44ce4f273b9a0061dda"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "8654fa19c28a570d3734fa8c549121629cd75b6a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3", "patch": "@@ -19,7 +19,7 @@ use resolve_imports::ImportDirectiveSubclass::{self, SingleImport, GlobImport};\n use resolve_imports::ImportResolution;\n use Module;\n use Namespace::{self, TypeNS, ValueNS};\n-use {NameBinding, DefOrModule};\n+use {NameBinding, NameBindingKind};\n use {names_to_string, module_to_string};\n use ParentLink::{ModuleParentLink, BlockParentLink};\n use Resolver;\n@@ -82,8 +82,8 @@ impl<'a> ToNameBinding<'a> for (Module<'a>, Span) {\n \n impl<'a> ToNameBinding<'a> for (Def, Span, DefModifiers) {\n     fn to_name_binding(self) -> NameBinding<'a> {\n-        let def = DefOrModule::Def(self.0);\n-        NameBinding { modifiers: self.2, def_or_module: def, span: Some(self.1) }\n+        let kind = NameBindingKind::Def(self.0);\n+        NameBinding { modifiers: self.2, kind: kind, span: Some(self.1) }\n     }\n }\n "}, {"sha": "37cedb75ec52900e9a320beffbc0704921ab9017", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3", "patch": "@@ -951,21 +951,26 @@ bitflags! {\n         // We need to track them to prohibit reexports like `pub use PrivEnum::Variant`.\n         const PRIVATE_VARIANT = 1 << 2,\n         const PRELUDE = 1 << 3,\n+        const GLOB_IMPORTED = 1 << 4,\n     }\n }\n \n // Records a possibly-private value, type, or module definition.\n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct NameBinding<'a> {\n-    modifiers: DefModifiers, // see note in ImportResolution about how to use this\n-    def_or_module: DefOrModule<'a>,\n+    modifiers: DefModifiers,\n+    kind: NameBindingKind<'a>,\n     span: Option<Span>,\n }\n \n-#[derive(Clone, Debug)]\n-enum DefOrModule<'a> {\n+#[derive(Debug)]\n+enum NameBindingKind<'a> {\n     Def(Def),\n     Module(Module<'a>),\n+    Import {\n+        binding: &'a NameBinding<'a>,\n+        id: NodeId,\n+    },\n }\n \n impl<'a> NameBinding<'a> {\n@@ -976,20 +981,22 @@ impl<'a> NameBinding<'a> {\n             DefModifiers::empty()\n         } | DefModifiers::IMPORTABLE;\n \n-        NameBinding { modifiers: modifiers, def_or_module: DefOrModule::Module(module), span: span }\n+        NameBinding { modifiers: modifiers, kind: NameBindingKind::Module(module), span: span }\n     }\n \n     fn module(&self) -> Option<Module<'a>> {\n-        match self.def_or_module {\n-            DefOrModule::Module(ref module) => Some(module),\n-            DefOrModule::Def(_) => None,\n+        match self.kind {\n+            NameBindingKind::Module(module) => Some(module),\n+            NameBindingKind::Def(_) => None,\n+            NameBindingKind::Import { binding, .. } => binding.module(),\n         }\n     }\n \n     fn def(&self) -> Option<Def> {\n-        match self.def_or_module {\n-            DefOrModule::Def(def) => Some(def),\n-            DefOrModule::Module(ref module) => module.def,\n+        match self.kind {\n+            NameBindingKind::Def(def) => Some(def),\n+            NameBindingKind::Module(module) => module.def,\n+            NameBindingKind::Import { binding, .. } => binding.def(),\n         }\n     }\n \n@@ -1009,6 +1016,13 @@ impl<'a> NameBinding<'a> {\n     fn is_extern_crate(&self) -> bool {\n         self.module().map(|module| module.is_extern_crate).unwrap_or(false)\n     }\n+\n+    fn is_import(&self) -> bool {\n+        match self.kind {\n+            NameBindingKind::Import { .. } => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// Interns the names of the primitive types."}, {"sha": "9f0e9e1075213a13c945a190d8a1cd4f231557a2", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=2e24c7410f47d5a69ab9bd69b06e4999e0e6bea3", "patch": "@@ -11,10 +11,9 @@\n use self::ImportDirectiveSubclass::*;\n \n use DefModifiers;\n-use DefOrModule;\n use Module;\n use Namespace::{self, TypeNS, ValueNS};\n-use NameBinding;\n+use {NameBinding, NameBindingKind};\n use ResolveResult;\n use ResolveResult::*;\n use Resolver;\n@@ -82,11 +81,22 @@ impl ImportDirective {\n     // Given the binding to which this directive resolves in a particular namespace,\n     // this returns the binding for the name this directive defines in that namespace.\n     fn import<'a>(&self, binding: &'a NameBinding<'a>) -> NameBinding<'a> {\n-        let mut binding = binding.clone();\n+        let mut modifiers = match self.is_public {\n+            true => DefModifiers::PUBLIC | DefModifiers::IMPORTABLE,\n+            false => DefModifiers::empty(),\n+        };\n+        if let GlobImport = self.subclass {\n+            modifiers = modifiers | DefModifiers::GLOB_IMPORTED;\n+        }\n         if self.shadowable == Shadowable::Always {\n-            binding.modifiers = binding.modifiers | DefModifiers::PRELUDE;\n+            modifiers = modifiers | DefModifiers::PRELUDE;\n+        }\n+\n+        NameBinding {\n+            kind: NameBindingKind::Import { binding: binding, id: self.id },\n+            span: Some(self.span),\n+            modifiers: modifiers,\n         }\n-        binding\n     }\n }\n \n@@ -216,7 +226,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n                 let dummy_binding = self.resolver.new_name_binding(NameBinding {\n                     modifiers: DefModifiers::IMPORTABLE,\n-                    def_or_module: DefOrModule::Def(Def::Err),\n+                    kind: NameBindingKind::Def(Def::Err),\n                     span: None,\n                 });\n "}]}