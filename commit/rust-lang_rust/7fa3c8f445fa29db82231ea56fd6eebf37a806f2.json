{"sha": "7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTNjOGY0NDVmYTI5ZGI4MjIzMWVhNTZmZDZlZWJmMzdhODA2ZjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-23T17:12:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-23T17:28:14Z"}, "message": "eliminate the `Lrc` of a slice and just return the slice\n\nAlso, introduce `Clauses` and `Goals` type alises for readability.", "tree": {"sha": "132d3a199c555c93a52eb2fd950f4cbb38a13acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132d3a199c555c93a52eb2fd950f4cbb38a13acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "html_url": "https://github.com/rust-lang/rust/commit/7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294cae22ee473f34928f5b24ec977132011e3699", "url": "https://api.github.com/repos/rust-lang/rust/commits/294cae22ee473f34928f5b24ec977132011e3699", "html_url": "https://github.com/rust-lang/rust/commit/294cae22ee473f34928f5b24ec977132011e3699"}], "stats": {"total": 66, "additions": 32, "deletions": 34}, "files": [{"sha": "5bfea1631894b172f6516bfe88ed51b6365b0d63", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "patch": "@@ -282,14 +282,16 @@ pub enum QuantifierKind {\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Goal<'tcx> {\n-    Implies(&'tcx Slice<Clause<'tcx>>, &'tcx Goal<'tcx>),\n+    Implies(Clauses<'tcx>, &'tcx Goal<'tcx>),\n     And(&'tcx Goal<'tcx>, &'tcx Goal<'tcx>),\n     Not(&'tcx Goal<'tcx>),\n     DomainGoal(DomainGoal<'tcx>),\n     Quantified(QuantifierKind, ty::Binder<&'tcx Goal<'tcx>>),\n     CannotProve,\n }\n \n+pub type Goals<'tcx> = &'tcx Slice<Goal<'tcx>>;\n+\n impl<'tcx> Goal<'tcx> {\n     pub fn from_poly_domain_goal<'a>(\n         domain_goal: PolyDomainGoal<'tcx>,\n@@ -319,6 +321,9 @@ pub enum Clause<'tcx> {\n     ForAll(ty::Binder<ProgramClause<'tcx>>),\n }\n \n+/// Multiple clauses.\n+pub type Clauses<'tcx> = &'tcx Slice<Clause<'tcx>>;\n+\n /// A \"program clause\" has the form `D :- G1, ..., Gn`. It is saying\n /// that the domain goal `D` is true if `G1...Gn` are provable. This\n /// is equivalent to the implication `G1..Gn => D`; we usually write\n@@ -331,7 +336,7 @@ pub struct ProgramClause<'tcx> {\n     pub goal: DomainGoal<'tcx>,\n \n     /// ...if we can prove these hypotheses (there may be no hypotheses at all):\n-    pub hypotheses: &'tcx Slice<Goal<'tcx>>,\n+    pub hypotheses: Goals<'tcx>,\n }\n \n pub type Selection<'tcx> = Vtable<'tcx, PredicateObligation<'tcx>>;"}, {"sha": "56669243f273a071cffefb80062dde2157a2f459", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "patch": "@@ -38,7 +38,7 @@ use ty::subst::{Kind, Substs};\n use ty::ReprOptions;\n use ty::Instance;\n use traits;\n-use traits::{Clause, Goal};\n+use traits::{Clause, Clauses, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants, Slice};\n use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorInterior, Region, Const};\n@@ -2517,15 +2517,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn intern_clauses(self, ts: &[Clause<'tcx>]) -> &'tcx Slice<Clause<'tcx>> {\n+    pub fn intern_clauses(self, ts: &[Clause<'tcx>]) -> Clauses<'tcx> {\n         if ts.len() == 0 {\n             Slice::empty()\n         } else {\n             self._intern_clauses(ts)\n         }\n     }\n \n-    pub fn intern_goals(self, ts: &[Goal<'tcx>]) -> &'tcx Slice<Goal<'tcx>> {\n+    pub fn intern_goals(self, ts: &[Goal<'tcx>]) -> Goals<'tcx> {\n         if ts.len() == 0 {\n             Slice::empty()\n         } else {\n@@ -2579,13 +2579,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_substs(iter::once(s).chain(t.into_iter().cloned()).map(Kind::from))\n     }\n \n-    pub fn mk_clauses<I: InternAs<[Clause<'tcx>],\n-        &'tcx Slice<Clause<'tcx>>>>(self, iter: I) -> I::Output {\n+    pub fn mk_clauses<I: InternAs<[Clause<'tcx>], Clauses<'tcx>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|xs| self.intern_clauses(xs))\n     }\n \n-    pub fn mk_goals<I: InternAs<[Goal<'tcx>],\n-        &'tcx Slice<Goal<'tcx>>>>(self, iter: I) -> I::Output {\n+    pub fn mk_goals<I: InternAs<[Goal<'tcx>], Goals<'tcx>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|xs| self.intern_goals(xs))\n     }\n "}, {"sha": "92d23d4338f9d904a31332bd782dd01a2b773330", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "patch": "@@ -37,8 +37,8 @@ use traits::query::{CanonicalProjectionGoal, CanonicalTyGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n-use traits::Clause;\n-use ty::{self, CrateInherentImpls, ParamEnvAnd, Slice, Ty, TyCtxt};\n+use traits::Clauses;\n+use ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use ty::steal::Steal;\n use ty::subst::Substs;\n use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n@@ -445,11 +445,11 @@ define_maps! { <'tcx>\n \n     [] fn features_query: features_node(CrateNum) -> Lrc<feature_gate::Features>,\n \n-    [] fn program_clauses_for: ProgramClausesFor(DefId) -> Lrc<&'tcx Slice<Clause<'tcx>>>,\n+    [] fn program_clauses_for: ProgramClausesFor(DefId) -> Clauses<'tcx>,\n \n     [] fn program_clauses_for_env: ProgramClausesForEnv(\n         ty::ParamEnv<'tcx>\n-    ) -> Lrc<&'tcx Slice<Clause<'tcx>>>,\n+    ) -> Clauses<'tcx>,\n \n     [] fn wasm_custom_sections: WasmCustomSections(CrateNum) -> Lrc<Vec<DefId>>,\n     [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)"}, {"sha": "8acc77be60d4f9426d2eacd685e6b75b45993fc4", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa3c8f445fa29db82231ea56fd6eebf37a806f2/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=7fa3c8f445fa29db82231ea56fd6eebf37a806f2", "patch": "@@ -12,11 +12,11 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n-use rustc::traits::{Clause, DomainGoal, Goal, PolyDomainGoal, ProgramClause, WhereClauseAtom};\n+use rustc::traits::{Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause,\n+                    WhereClauseAtom};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use std::mem;\n use syntax::ast;\n \n@@ -122,19 +122,19 @@ impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n crate fn program_clauses_for<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+) -> Clauses<'tcx> {\n     match tcx.def_key(def_id).disambiguated_data.data {\n         DefPathData::Trait(_) => program_clauses_for_trait(tcx, def_id),\n         DefPathData::Impl => program_clauses_for_impl(tcx, def_id),\n         DefPathData::AssocTypeInImpl(..) => program_clauses_for_associated_type_value(tcx, def_id),\n-        _ => Lrc::new(Slice::empty()),\n+        _ => Slice::empty(),\n     }\n }\n \n crate fn program_clauses_for_env<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+) -> Clauses<'tcx> {\n     debug!(\"program_clauses_for_env(param_env={:?})\", param_env);\n \n     let mut last_round = FxHashSet();\n@@ -164,12 +164,10 @@ crate fn program_clauses_for_env<'a, 'tcx>(\n \n     debug!(\"program_clauses_for_env: closure = {:#?}\", closure);\n \n-    return Lrc::new(\n-        tcx.mk_clauses(\n-            closure\n-                .into_iter()\n-                .flat_map(|def_id| tcx.program_clauses_for(def_id).iter().cloned()),\n-        ),\n+    return tcx.mk_clauses(\n+        closure\n+            .into_iter()\n+            .flat_map(|def_id| tcx.program_clauses_for(def_id).iter().cloned()),\n     );\n \n     /// Given that `predicate` is in the environment, returns the\n@@ -196,7 +194,7 @@ crate fn program_clauses_for_env<'a, 'tcx>(\n fn program_clauses_for_trait<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+) -> Clauses<'tcx> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n \n     // Rule Implemented-From-Env (see rustc guide)\n@@ -243,7 +241,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n         .into_iter()\n         .map(|wc| implied_bound_from_trait(tcx, trait_pred, wc));\n \n-    Lrc::new(tcx.mk_clauses(clauses.chain(implied_bound_clauses)))\n+    tcx.mk_clauses(clauses.chain(implied_bound_clauses))\n }\n \n /// For a given `where_clause`, returns a clause `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`.\n@@ -262,12 +260,9 @@ fn implied_bound_from_trait<'a, 'tcx>(\n     }))\n }\n \n-fn program_clauses_for_impl<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_id: DefId,\n-) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     if let ImplPolarity::Negative = tcx.impl_polarity(def_id) {\n-        return Lrc::new(tcx.mk_clauses(iter::empty::<Clause>()));\n+        return Slice::empty();\n     }\n \n     // Rule Implemented-From-Impl (see rustc guide)\n@@ -295,13 +290,13 @@ fn program_clauses_for_impl<'a, 'tcx>(\n                 .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     item_id: DefId,\n-) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+) -> Clauses<'tcx> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n     // ```impl<P0..Pn> Trait<A1..An> for A0\n@@ -349,7 +344,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n                 .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n+    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n }\n \n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}]}