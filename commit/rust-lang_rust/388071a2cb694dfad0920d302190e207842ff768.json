{"sha": "388071a2cb694dfad0920d302190e207842ff768", "node_id": "C_kwDOAAsO6NoAKDM4ODA3MWEyY2I2OTRkZmFkMDkyMGQzMDIxOTBlMjA3ODQyZmY3Njg", "commit": {"author": {"name": "Jon\u00e1\u0161 Fiala", "email": "jonas.fiala@inf.ethz.ch", "date": "2023-04-29T14:57:50Z"}, "committer": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2023-05-23T11:11:23Z"}, "message": "Allow consumers to retrieve borrowck output", "tree": {"sha": "aeb2004dcc8c851318e32e092e93ff32f2ea1c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb2004dcc8c851318e32e092e93ff32f2ea1c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388071a2cb694dfad0920d302190e207842ff768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388071a2cb694dfad0920d302190e207842ff768", "html_url": "https://github.com/rust-lang/rust/commit/388071a2cb694dfad0920d302190e207842ff768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388071a2cb694dfad0920d302190e207842ff768/comments", "author": {"login": "JonasAlaif", "id": 13405042, "node_id": "MDQ6VXNlcjEzNDA1MDQy", "avatar_url": "https://avatars.githubusercontent.com/u/13405042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonasAlaif", "html_url": "https://github.com/JonasAlaif", "followers_url": "https://api.github.com/users/JonasAlaif/followers", "following_url": "https://api.github.com/users/JonasAlaif/following{/other_user}", "gists_url": "https://api.github.com/users/JonasAlaif/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonasAlaif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonasAlaif/subscriptions", "organizations_url": "https://api.github.com/users/JonasAlaif/orgs", "repos_url": "https://api.github.com/users/JonasAlaif/repos", "events_url": "https://api.github.com/users/JonasAlaif/events{/privacy}", "received_events_url": "https://api.github.com/users/JonasAlaif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda5becc27cbc7106646fbc40aacea5e7896d954", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda5becc27cbc7106646fbc40aacea5e7896d954", "html_url": "https://github.com/rust-lang/rust/commit/cda5becc27cbc7106646fbc40aacea5e7896d954"}], "stats": {"total": 159, "additions": 111, "deletions": 48}, "files": [{"sha": "6be20b0974ddb6c74e74650401b72dc2da8bf533", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=388071a2cb694dfad0920d302190e207842ff768", "patch": "@@ -30,7 +30,7 @@ pub struct BorrowSet<'tcx> {\n     /// Map from local to all the borrows on that local.\n     pub local_map: FxIndexMap<mir::Local, FxIndexSet<BorrowIndex>>,\n \n-    pub(crate) locals_state_at_exit: LocalsStateAtExit,\n+    pub locals_state_at_exit: LocalsStateAtExit,\n }\n \n impl<'tcx> Index<BorrowIndex> for BorrowSet<'tcx> {\n@@ -153,7 +153,7 @@ impl<'tcx> BorrowSet<'tcx> {\n         self.activation_map.get(&location).map_or(&[], |activations| &activations[..])\n     }\n \n-    pub(crate) fn len(&self) -> usize {\n+    pub fn len(&self) -> usize {\n         self.location_map.len()\n     }\n "}, {"sha": "ef2358301f205ff3bb0e85e66ef841135905129c", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=388071a2cb694dfad0920d302190e207842ff768", "patch": "@@ -9,16 +9,56 @@ use rustc_middle::mir::Body;\n use rustc_middle::ty::TyCtxt;\n \n pub use super::{\n+    dataflow::{calculate_borrows_out_of_scope_at_location, BorrowIndex, Borrows},\n     facts::{AllFacts as PoloniusInput, RustcFacts},\n     location::{LocationTable, RichLocation},\n     nll::PoloniusOutput,\n+    region_infer::RegionInferenceContext,\n     BodyWithBorrowckFacts,\n };\n \n-/// This function computes Polonius facts for the given body. It makes a copy of\n-/// the body because it needs to regenerate the region identifiers. This function\n-/// should never be invoked during a typical compilation session due to performance\n-/// issues with Polonius.\n+/// Options determining the output behavior of [`get_body_with_borrowck_facts`].\n+///\n+/// If executing under `-Z polonius` the choice here has no effect, and everything as if\n+/// [`PoloniusOutputFacts`](ConsumerOptions::PoloniusOutputFacts) had been selected\n+/// will be retrieved.\n+#[derive(Debug, Copy, Clone)]\n+pub enum ConsumerOptions {\n+    /// Retrieve the [`Body`] along with the [`BorrowSet`](super::borrow_set::BorrowSet)\n+    /// and [`RegionInferenceContext`]. If you would like the body only, use\n+    /// [`TyCtxt::mir_promoted`].\n+    ///\n+    /// These can be used in conjunction with [`calculate_borrows_out_of_scope_at_location`].\n+    RegionInferenceContext,\n+    /// The recommended option. Retrieves the maximal amount of information\n+    /// without significant slowdowns.\n+    ///\n+    /// Implies [`RegionInferenceContext`](ConsumerOptions::RegionInferenceContext),\n+    /// and additionally retrieve the [`LocationTable`] and [`PoloniusInput`] that\n+    /// would be given to Polonius. Critically, this does not run Polonius, which\n+    /// one may want to avoid due to performance issues on large bodies.\n+    PoloniusInputFacts,\n+    /// Implies [`PoloniusInputFacts`](ConsumerOptions::PoloniusInputFacts),\n+    /// and additionally runs Polonius to calculate the [`PoloniusOutput`].\n+    PoloniusOutputFacts,\n+}\n+\n+impl ConsumerOptions {\n+    /// Should the Polonius input facts be computed?\n+    pub(crate) fn polonius_input(&self) -> bool {\n+        matches!(self, Self::PoloniusInputFacts | Self::PoloniusOutputFacts)\n+    }\n+    /// Should we run Polonius and collect the output facts?\n+    pub(crate) fn polonius_output(&self) -> bool {\n+        matches!(self, Self::PoloniusOutputFacts)\n+    }\n+}\n+\n+/// This function computes borrowck facts for the given body. The [`ConsumerOptions`]\n+/// determine which facts are returned. This function makes a copy of the body because\n+/// it needs to regenerate the region identifiers. It should never be invoked during a\n+/// typical compilation session due to the unnecessary overhead of returning\n+/// [`BodyWithBorrowckFacts`].\n ///\n /// Note:\n /// *   This function will panic if the required body was already stolen. This\n@@ -28,10 +68,14 @@ pub use super::{\n ///     that shows how to do this at `tests/run-make/obtain-borrowck/`.\n ///\n /// *   Polonius is highly unstable, so expect regular changes in its signature or other details.\n-pub fn get_body_with_borrowck_facts(tcx: TyCtxt<'_>, def: LocalDefId) -> BodyWithBorrowckFacts<'_> {\n+pub fn get_body_with_borrowck_facts(\n+    tcx: TyCtxt<'_>,\n+    def: LocalDefId,\n+    options: ConsumerOptions,\n+) -> BodyWithBorrowckFacts<'_> {\n     let (input_body, promoted) = tcx.mir_promoted(def);\n     let infcx = tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bind(def)).build();\n     let input_body: &Body<'_> = &input_body.borrow();\n     let promoted: &IndexSlice<_, _> = &promoted.borrow();\n-    *super::do_mir_borrowck(&infcx, input_body, promoted, true).1.unwrap()\n+    *super::do_mir_borrowck(&infcx, input_body, promoted, Some(options)).1.unwrap()\n }"}, {"sha": "4fe4d7085d78ae733c086e678b38f2f2d9532a68", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=388071a2cb694dfad0920d302190e207842ff768", "patch": "@@ -231,27 +231,32 @@ impl<'tcx> OutOfScopePrecomputer<'_, 'tcx> {\n     }\n }\n \n+pub fn calculate_borrows_out_of_scope_at_location<'tcx>(\n+    body: &Body<'tcx>,\n+    regioncx: &RegionInferenceContext<'tcx>,\n+    borrow_set: &BorrowSet<'tcx>,\n+) -> FxIndexMap<Location, Vec<BorrowIndex>> {\n+    let mut prec = OutOfScopePrecomputer::new(body, regioncx);\n+    for (borrow_index, borrow_data) in borrow_set.iter_enumerated() {\n+        let borrow_region = borrow_data.region;\n+        let location = borrow_data.reserve_location;\n+\n+        prec.precompute_borrows_out_of_scope(borrow_index, borrow_region, location);\n+    }\n+\n+    prec.borrows_out_of_scope_at_location\n+}\n+\n impl<'a, 'tcx> Borrows<'a, 'tcx> {\n-    pub(crate) fn new(\n+    pub fn new(\n         tcx: TyCtxt<'tcx>,\n         body: &'a Body<'tcx>,\n         nonlexical_regioncx: &'a RegionInferenceContext<'tcx>,\n         borrow_set: &'a BorrowSet<'tcx>,\n     ) -> Self {\n-        let mut prec = OutOfScopePrecomputer::new(body, nonlexical_regioncx);\n-        for (borrow_index, borrow_data) in borrow_set.iter_enumerated() {\n-            let borrow_region = borrow_data.region;\n-            let location = borrow_data.reserve_location;\n-\n-            prec.precompute_borrows_out_of_scope(borrow_index, borrow_region, location);\n-        }\n-\n-        Borrows {\n-            tcx,\n-            body,\n-            borrow_set,\n-            borrows_out_of_scope_at_location: prec.borrows_out_of_scope_at_location,\n-        }\n+        let borrows_out_of_scope_at_location =\n+            calculate_borrows_out_of_scope_at_location(body, nonlexical_regioncx, borrow_set);\n+        Borrows { tcx, body, borrow_set, borrows_out_of_scope_at_location }\n     }\n \n     pub fn location(&self, idx: BorrowIndex) -> &Location {"}, {"sha": "dfab36dc0ed71962b8ea043f903f276e4f574b34", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=388071a2cb694dfad0920d302190e207842ff768", "patch": "@@ -62,6 +62,7 @@ use crate::session_diagnostics::VarNeedNotMut;\n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n+use consumers::ConsumerOptions;\n use facts::AllFacts;\n \n use self::path_utils::*;\n@@ -144,23 +145,23 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def: LocalDefId) -> &BorrowCheckResult<'_> {\n         tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id)).build();\n     let input_body: &Body<'_> = &input_body.borrow();\n     let promoted: &IndexSlice<_, _> = &promoted.borrow();\n-    let opt_closure_req = do_mir_borrowck(&infcx, input_body, promoted, false).0;\n+    let opt_closure_req = do_mir_borrowck(&infcx, input_body, promoted, None).0;\n     debug!(\"mir_borrowck done\");\n \n     tcx.arena.alloc(opt_closure_req)\n }\n \n /// Perform the actual borrow checking.\n ///\n-/// If `return_body_with_facts` is true, then return the body with non-erased\n-/// region ids on which the borrow checking was performed together with Polonius\n-/// facts.\n+/// Use `consumer_options: None` for the default behavior of returning\n+/// [`BorrowCheckResult`] only. Otherwise, return [`BodyWithBorrowckFacts`] according\n+/// to the given [`ConsumerOptions`].\n #[instrument(skip(infcx, input_body, input_promoted), fields(id=?input_body.source.def_id()), level = \"debug\")]\n fn do_mir_borrowck<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     input_body: &Body<'tcx>,\n     input_promoted: &IndexSlice<Promoted, Body<'tcx>>,\n-    return_body_with_facts: bool,\n+    consumer_options: Option<ConsumerOptions>,\n ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {\n     let def = input_body.source.def_id().expect_local();\n     debug!(?def);\n@@ -241,8 +242,6 @@ fn do_mir_borrowck<'tcx>(\n     let borrow_set =\n         Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));\n \n-    let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.unstable_opts.polonius;\n-\n     // Compute non-lexical lifetimes.\n     let nll::NllOutput {\n         regioncx,\n@@ -262,7 +261,7 @@ fn do_mir_borrowck<'tcx>(\n         &mdpe.move_data,\n         &borrow_set,\n         &upvars,\n-        use_polonius,\n+        consumer_options,\n     );\n \n     // Dump MIR results into a file, if that is enabled. This let us\n@@ -444,13 +443,15 @@ fn do_mir_borrowck<'tcx>(\n         tainted_by_errors,\n     };\n \n-    let body_with_facts = if return_body_with_facts {\n-        let output_facts = mbcx.polonius_output.expect(\"Polonius output was not computed\");\n+    let body_with_facts = if consumer_options.is_some() {\n+        let output_facts = mbcx.polonius_output;\n         Some(Box::new(BodyWithBorrowckFacts {\n             body: body_owned,\n-            input_facts: *polonius_input.expect(\"Polonius input facts were not generated\"),\n+            borrow_set,\n+            region_inference_context: regioncx,\n+            location_table: polonius_input.as_ref().map(|_| location_table_owned),\n+            input_facts: polonius_input,\n             output_facts,\n-            location_table: location_table_owned,\n         }))\n     } else {\n         None\n@@ -469,12 +470,20 @@ fn do_mir_borrowck<'tcx>(\n pub struct BodyWithBorrowckFacts<'tcx> {\n     /// A mir body that contains region identifiers.\n     pub body: Body<'tcx>,\n-    /// Polonius input facts.\n-    pub input_facts: AllFacts,\n-    /// Polonius output facts.\n-    pub output_facts: Rc<self::nll::PoloniusOutput>,\n-    /// The table that maps Polonius points to locations in the table.\n-    pub location_table: LocationTable,\n+    /// The set of borrows occurring in `body` with data about them.\n+    pub borrow_set: Rc<BorrowSet<'tcx>>,\n+    /// Context generated during borrowck, intended to be passed to\n+    /// [`OutOfScopePrecomputer`](dataflow::OutOfScopePrecomputer).\n+    pub region_inference_context: Rc<RegionInferenceContext<'tcx>>,\n+    /// The table that maps Polonius points to locations in the table. Populated\n+    /// when using [`ConsumerOptions::PoloniusInputFacts`] or above.\n+    pub location_table: Option<LocationTable>,\n+    /// Polonius input facts. Populated when using\n+    /// [`ConsumerOptions::PoloniusInputFacts`] or above.\n+    pub input_facts: Option<Box<AllFacts>>,\n+    /// Polonius output facts. Populated when using\n+    /// [`ConsumerOptions::PoloniusOutputFacts`] or above.\n+    pub output_facts: Option<Rc<self::nll::PoloniusOutput>>,\n }\n \n pub struct BorrowckInferCtxt<'cx, 'tcx> {"}, {"sha": "889acb3acbed7579183ead34a160356bab333fe1", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=388071a2cb694dfad0920d302190e207842ff768", "patch": "@@ -27,6 +27,7 @@ use rustc_mir_dataflow::ResultsCursor;\n use crate::{\n     borrow_set::BorrowSet,\n     constraint_generation,\n+    consumers::ConsumerOptions,\n     diagnostics::RegionErrors,\n     facts::{AllFacts, AllFactsExt, RustcFacts},\n     invalidation,\n@@ -165,10 +166,14 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n     move_data: &MoveData<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n     upvars: &[Upvar<'tcx>],\n-    use_polonius: bool,\n+    consumer_options: Option<ConsumerOptions>,\n ) -> NllOutput<'tcx> {\n+    let polonius_input = consumer_options.map(|c| c.polonius_input()).unwrap_or_default()\n+        || infcx.tcx.sess.opts.unstable_opts.polonius;\n+    let polonius_output = consumer_options.map(|c| c.polonius_output()).unwrap_or_default()\n+        || infcx.tcx.sess.opts.unstable_opts.polonius;\n     let mut all_facts =\n-        (use_polonius || AllFacts::enabled(infcx.tcx)).then_some(AllFacts::default());\n+        (polonius_input || AllFacts::enabled(infcx.tcx)).then_some(AllFacts::default());\n \n     let universal_regions = Rc::new(universal_regions);\n \n@@ -189,7 +194,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n             move_data,\n             elements,\n             upvars,\n-            use_polonius,\n+            polonius_input,\n         );\n \n     if let Some(all_facts) = &mut all_facts {\n@@ -284,7 +289,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n             all_facts.write_to_dir(dir_path, location_table).unwrap();\n         }\n \n-        if use_polonius {\n+        if polonius_output {\n             let algorithm =\n                 env::var(\"POLONIUS_ALGORITHM\").unwrap_or_else(|_| String::from(\"Hybrid\"));\n             let algorithm = Algorithm::from_str(&algorithm).unwrap();"}, {"sha": "d521d0db21323df8526d25c5309cf5302f122dc3", "filename": "compiler/rustc_borrowck/src/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs?ref=388071a2cb694dfad0920d302190e207842ff768", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::mir::{Body, Mutability, Place};\n use rustc_middle::ty::{self, TyCtxt};\n \n /// Extension methods for the `Place` type.\n-pub(crate) trait PlaceExt<'tcx> {\n+pub trait PlaceExt<'tcx> {\n     /// Returns `true` if we can safely ignore borrows of this place.\n     /// This is true whenever there is no action that the user can do\n     /// to the place `self` that would invalidate the borrow. This is true"}, {"sha": "25c485b814f4a1ae1220bce79757c8d2e5dab821", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388071a2cb694dfad0920d302190e207842ff768/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=388071a2cb694dfad0920d302190e207842ff768", "patch": "@@ -16,15 +16,15 @@ use std::iter;\n /// being run in the calling context, the conservative choice is to assume the compared indices\n /// are disjoint (and therefore, do not overlap).\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub(crate) enum PlaceConflictBias {\n+pub enum PlaceConflictBias {\n     Overlap,\n     NoOverlap,\n }\n \n /// Helper function for checking if places conflict with a mutable borrow and deep access depth.\n /// This is used to check for places conflicting outside of the borrow checking code (such as in\n /// dataflow).\n-pub(crate) fn places_conflict<'tcx>(\n+pub fn places_conflict<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     borrow_place: Place<'tcx>,"}]}