{"sha": "06d8b21372742234c95e1ea842e4d66aa9ee9dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDhiMjEzNzI3NDIyMzRjOTVlMWVhODQyZTRkNjZhYTllZTlkZDU=", "commit": {"author": {"name": "Tang Chenglong", "email": "ideami@outlook.com", "date": "2016-03-20T13:24:46Z"}, "committer": {"name": "Tang Chenglong", "email": "ideami@outlook.com", "date": "2016-03-20T13:24:46Z"}, "message": "docs: Correct an  improper description\n\nIn the example, we made a immutable borrow to `println!`, not a mutable one.", "tree": {"sha": "2618b35cff8dceca029279089a245a39bd4759fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2618b35cff8dceca029279089a245a39bd4759fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d8b21372742234c95e1ea842e4d66aa9ee9dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d8b21372742234c95e1ea842e4d66aa9ee9dd5", "html_url": "https://github.com/rust-lang/rust/commit/06d8b21372742234c95e1ea842e4d66aa9ee9dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d8b21372742234c95e1ea842e4d66aa9ee9dd5/comments", "author": {"login": "tclfs", "id": 14888862, "node_id": "MDQ6VXNlcjE0ODg4ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/14888862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tclfs", "html_url": "https://github.com/tclfs", "followers_url": "https://api.github.com/users/tclfs/followers", "following_url": "https://api.github.com/users/tclfs/following{/other_user}", "gists_url": "https://api.github.com/users/tclfs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tclfs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tclfs/subscriptions", "organizations_url": "https://api.github.com/users/tclfs/orgs", "repos_url": "https://api.github.com/users/tclfs/repos", "events_url": "https://api.github.com/users/tclfs/events{/privacy}", "received_events_url": "https://api.github.com/users/tclfs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tclfs", "id": 14888862, "node_id": "MDQ6VXNlcjE0ODg4ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/14888862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tclfs", "html_url": "https://github.com/tclfs", "followers_url": "https://api.github.com/users/tclfs/followers", "following_url": "https://api.github.com/users/tclfs/following{/other_user}", "gists_url": "https://api.github.com/users/tclfs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tclfs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tclfs/subscriptions", "organizations_url": "https://api.github.com/users/tclfs/orgs", "repos_url": "https://api.github.com/users/tclfs/repos", "events_url": "https://api.github.com/users/tclfs/events{/privacy}", "received_events_url": "https://api.github.com/users/tclfs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "015d3b70929a31af48d056a8e05d113e362339e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/015d3b70929a31af48d056a8e05d113e362339e9", "html_url": "https://github.com/rust-lang/rust/commit/015d3b70929a31af48d056a8e05d113e362339e9"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "a08d53f958ba3eddcaa139646e7df4ef91f4f06a", "filename": "src/doc/book/references-and-borrowing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d8b21372742234c95e1ea842e4d66aa9ee9dd5/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/06d8b21372742234c95e1ea842e4d66aa9ee9dd5/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md?ref=06d8b21372742234c95e1ea842e4d66aa9ee9dd5", "patch": "@@ -212,7 +212,7 @@ fn main() {\n \n In other words, the mutable borrow is held through the rest of our example. What\n we want is for the mutable borrow by `y` to end so that the resource can be\n-returned to the owner, `x`. `x` can then provide a mutable borrow to `println!`.\n+returned to the owner, `x`. `x` can then provide a immutable borrow to `println!`.\n In Rust, borrowing is tied to the scope that the borrow is valid for. And our\n scopes look like this:\n "}]}