{"sha": "d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYzdhOTNlZmY1YmQyNzYzMjEzMGNjNWJjZGFhYzU0YzMyYmNhMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-21T02:38:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-21T02:38:18Z"}, "message": "Auto merge of #29913 - tbu-:pr_windows_path_error_on_nul, r=alexcrichton\n\nOn Windows: Previously these paths were silently truncated at these NUL\ncharacters, now they fail with `ErrorKind::InvalidInput`.", "tree": {"sha": "2a4da2ccc5055bb3f5869722b8aefadeffdf701b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a4da2ccc5055bb3f5869722b8aefadeffdf701b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "html_url": "https://github.com/rust-lang/rust/commit/d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b7a9efa9ab8601a2609d621de45bf0e4b30ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b7a9efa9ab8601a2609d621de45bf0e4b30ce1", "html_url": "https://github.com/rust-lang/rust/commit/79b7a9efa9ab8601a2609d621de45bf0e4b30ce1"}, {"sha": "71dccf8706ab25f75667c1cbb85ce94f2decbb57", "url": "https://api.github.com/repos/rust-lang/rust/commits/71dccf8706ab25f75667c1cbb85ce94f2decbb57", "html_url": "https://github.com/rust-lang/rust/commit/71dccf8706ab25f75667c1cbb85ce94f2decbb57"}], "stats": {"total": 115, "additions": 85, "deletions": 30}, "files": [{"sha": "9db7ab534590ab23eb55f3e5826d9cdb03d385b1", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "patch": "@@ -22,7 +22,8 @@ use sync::Arc;\n use sys::handle::Handle;\n use sys::{c, cvt};\n use sys_common::FromInner;\n-use vec::Vec;\n+\n+use super::to_u16s;\n \n pub struct File { handle: Handle }\n \n@@ -226,7 +227,7 @@ impl File {\n     }\n \n     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {\n-        let path = to_utf16(path);\n+        let path = try!(to_u16s(path));\n         let handle = unsafe {\n             c::CreateFileW(path.as_ptr(),\n                            opts.get_desired_access(),\n@@ -377,10 +378,6 @@ impl fmt::Debug for File {\n     }\n }\n \n-pub fn to_utf16(s: &Path) -> Vec<u16> {\n-    s.as_os_str().encode_wide().chain(Some(0)).collect()\n-}\n-\n impl FileAttr {\n     pub fn size(&self) -> u64 {\n         ((self.data.nFileSizeHigh as u64) << 32) | (self.data.nFileSizeLow as u64)\n@@ -449,7 +446,7 @@ impl DirBuilder {\n     pub fn new() -> DirBuilder { DirBuilder }\n \n     pub fn mkdir(&self, p: &Path) -> io::Result<()> {\n-        let p = to_utf16(p);\n+        let p = try!(to_u16s(p));\n         try!(cvt(unsafe {\n             c::CreateDirectoryW(p.as_ptr(), ptr::null_mut())\n         }));\n@@ -460,7 +457,7 @@ impl DirBuilder {\n pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n     let root = p.to_path_buf();\n     let star = p.join(\"*\");\n-    let path = to_utf16(&star);\n+    let path = try!(to_u16s(&star));\n \n     unsafe {\n         let mut wfd = mem::zeroed();\n@@ -478,22 +475,22 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n }\n \n pub fn unlink(p: &Path) -> io::Result<()> {\n-    let p_utf16 = to_utf16(p);\n-    try!(cvt(unsafe { c::DeleteFileW(p_utf16.as_ptr()) }));\n+    let p_u16s = try!(to_u16s(p));\n+    try!(cvt(unsafe { c::DeleteFileW(p_u16s.as_ptr()) }));\n     Ok(())\n }\n \n pub fn rename(old: &Path, new: &Path) -> io::Result<()> {\n-    let old = to_utf16(old);\n-    let new = to_utf16(new);\n+    let old = try!(to_u16s(old));\n+    let new = try!(to_u16s(new));\n     try!(cvt(unsafe {\n         c::MoveFileExW(old.as_ptr(), new.as_ptr(), c::MOVEFILE_REPLACE_EXISTING)\n     }));\n     Ok(())\n }\n \n pub fn rmdir(p: &Path) -> io::Result<()> {\n-    let p = to_utf16(p);\n+    let p = try!(to_u16s(p));\n     try!(cvt(unsafe { c::RemoveDirectoryW(p.as_ptr()) }));\n     Ok(())\n }\n@@ -508,8 +505,8 @@ pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n }\n \n pub fn symlink_inner(src: &Path, dst: &Path, dir: bool) -> io::Result<()> {\n-    let src = to_utf16(src);\n-    let dst = to_utf16(dst);\n+    let src = try!(to_u16s(src));\n+    let dst = try!(to_u16s(dst));\n     let flags = if dir { c::SYMBOLIC_LINK_FLAG_DIRECTORY } else { 0 };\n     try!(cvt(unsafe {\n         c::CreateSymbolicLinkW(dst.as_ptr(), src.as_ptr(), flags) as c::BOOL\n@@ -518,8 +515,8 @@ pub fn symlink_inner(src: &Path, dst: &Path, dir: bool) -> io::Result<()> {\n }\n \n pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n-    let src = to_utf16(src);\n-    let dst = to_utf16(dst);\n+    let src = try!(to_u16s(src));\n+    let dst = try!(to_u16s(dst));\n     try!(cvt(unsafe {\n         c::CreateHardLinkW(dst.as_ptr(), src.as_ptr(), ptr::null_mut())\n     }));\n@@ -545,10 +542,10 @@ pub fn stat(p: &Path) -> io::Result<FileAttr> {\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n-    let utf16 = to_utf16(p);\n+    let u16s = try!(to_u16s(p));\n     unsafe {\n         let mut attr: FileAttr = mem::zeroed();\n-        try!(cvt(c::GetFileAttributesExW(utf16.as_ptr(),\n+        try!(cvt(c::GetFileAttributesExW(u16s.as_ptr(),\n                                          c::GetFileExInfoStandard,\n                                          &mut attr.data as *mut _ as *mut _)));\n         if attr.is_reparse_point() {\n@@ -562,7 +559,7 @@ pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n }\n \n pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {\n-    let p = to_utf16(p);\n+    let p = try!(to_u16s(p));\n     unsafe {\n         try!(cvt(c::SetFileAttributesW(p.as_ptr(), perm.attrs)));\n         Ok(())\n@@ -602,8 +599,8 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n         *(lpData as *mut i64) = TotalBytesTransferred;\n         c::PROGRESS_CONTINUE\n     }\n-    let pfrom = to_utf16(from);\n-    let pto = to_utf16(to);\n+    let pfrom = try!(to_u16s(from));\n+    let pto = try!(to_u16s(to));\n     let mut size = 0i64;\n     try!(cvt(unsafe {\n         c::CopyFileExW(pfrom.as_ptr(), pto.as_ptr(), Some(callback),\n@@ -617,6 +614,7 @@ fn directory_junctions_are_directories() {\n     use ffi::OsStr;\n     use env;\n     use rand::{self, StdRng, Rng};\n+    use vec::Vec;\n \n     macro_rules! t {\n         ($e:expr) => (match $e {"}, {"sha": "7e5342a3fd4733d2308a60a7205d24e3fc0a5f18", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "patch": "@@ -72,10 +72,17 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n-fn to_utf16_os(s: &OsStr) -> Vec<u16> {\n-    let mut v: Vec<_> = s.encode_wide().collect();\n-    v.push(0);\n-    v\n+pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> io::Result<Vec<u16>> {\n+    fn inner(s: &OsStr) -> io::Result<Vec<u16>> {\n+        let mut maybe_result: Vec<u16> = s.encode_wide().collect();\n+        if maybe_result.iter().any(|&u| u == 0) {\n+            return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                      \"strings passed to WinAPI cannot contain NULs\"));\n+        }\n+        maybe_result.push(0);\n+        Ok(maybe_result)\n+    }\n+    inner(s.as_ref())\n }\n \n // Many Windows APIs follow a pattern of where we hand a buffer and then they"}, {"sha": "4396b90a5ce9cd194b591e1e0e3b135435921be1", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "patch": "@@ -28,6 +28,8 @@ use slice;\n use sys::{c, cvt};\n use sys::handle::Handle;\n \n+use super::to_u16s;\n+\n pub fn errno() -> i32 {\n     unsafe { c::GetLastError() as i32 }\n }\n@@ -237,7 +239,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n }\n \n pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = super::to_utf16_os(k);\n+    let k = try!(to_u16s(k));\n     let res = super::fill_utf16_buf(|buf, sz| unsafe {\n         c::GetEnvironmentVariableW(k.as_ptr(), buf, sz)\n     }, |buf| {\n@@ -256,16 +258,16 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n-    let k = super::to_utf16_os(k);\n-    let v = super::to_utf16_os(v);\n+    let k = try!(to_u16s(k));\n+    let v = try!(to_u16s(v));\n \n     cvt(unsafe {\n         c::SetEnvironmentVariableW(k.as_ptr(), v.as_ptr())\n     }).map(|_| ())\n }\n \n pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n-    let v = super::to_utf16_os(n);\n+    let v = try!(to_u16s(n));\n     cvt(unsafe {\n         c::SetEnvironmentVariableW(v.as_ptr(), ptr::null())\n     }).map(|_| ())"}, {"sha": "2da3e59e54c58043210a5dd1caee973bd80d01e4", "filename": "src/test/run-pass/paths-containing-nul.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Ftest%2Frun-pass%2Fpaths-containing-nul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c7a93eff5bd27632130cc5bcdaac54c32bca08/src%2Ftest%2Frun-pass%2Fpaths-containing-nul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpaths-containing-nul.rs?ref=d1c7a93eff5bd27632130cc5bcdaac54c32bca08", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fs;\n+use std::io;\n+\n+fn assert_invalid_input<T>(on: &str, result: io::Result<T>) {\n+    fn inner(on: &str, result: io::Result<()>) {\n+        match result {\n+            Ok(()) => panic!(\"{} didn't return an error on a path with NUL\", on),\n+            Err(e) => assert!(e.kind() == io::ErrorKind::InvalidInput,\n+                              \"{} returned a strange {:?} on a path with NUL\", on, e.kind()),\n+        }\n+    }\n+    inner(on, result.map(|_| ()))\n+}\n+\n+fn main() {\n+    assert_invalid_input(\"File::open\", fs::File::open(\"\\0\"));\n+    assert_invalid_input(\"File::create\", fs::File::create(\"\\0\"));\n+    assert_invalid_input(\"remove_file\", fs::remove_file(\"\\0\"));\n+    assert_invalid_input(\"metadata\", fs::metadata(\"\\0\"));\n+    assert_invalid_input(\"symlink_metadata\", fs::symlink_metadata(\"\\0\"));\n+    assert_invalid_input(\"rename1\", fs::rename(\"\\0\", \"a\"));\n+    assert_invalid_input(\"rename2\", fs::rename(\"a\", \"\\0\"));\n+    assert_invalid_input(\"copy1\", fs::copy(\"\\0\", \"a\"));\n+    assert_invalid_input(\"copy2\", fs::copy(\"a\", \"\\0\"));\n+    assert_invalid_input(\"hard_link1\", fs::hard_link(\"\\0\", \"a\"));\n+    assert_invalid_input(\"hard_link2\", fs::hard_link(\"a\", \"\\0\"));\n+    assert_invalid_input(\"soft_link1\", fs::soft_link(\"\\0\", \"a\"));\n+    assert_invalid_input(\"soft_link2\", fs::soft_link(\"a\", \"\\0\"));\n+    assert_invalid_input(\"read_link\", fs::read_link(\"\\0\"));\n+    assert_invalid_input(\"canonicalize\", fs::canonicalize(\"\\0\"));\n+    assert_invalid_input(\"create_dir\", fs::create_dir(\"\\0\"));\n+    assert_invalid_input(\"create_dir_all\", fs::create_dir_all(\"\\0\"));\n+    assert_invalid_input(\"remove_dir\", fs::remove_dir(\"\\0\"));\n+    assert_invalid_input(\"remove_dir_all\", fs::remove_dir_all(\"\\0\"));\n+    assert_invalid_input(\"read_dir\", fs::read_dir(\"\\0\"));\n+    assert_invalid_input(\"set_permissions\",\n+                         fs::set_permissions(\"\\0\", fs::metadata(\".\").unwrap().permissions()));\n+}"}]}