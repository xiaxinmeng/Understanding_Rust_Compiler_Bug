{"sha": "d3e538638a3afb991aea4160986cf13e6f1da5ea", "node_id": "C_kwDOAAsO6NoAKGQzZTUzODYzOGEzYWZiOTkxYWVhNDE2MDk4NmNmMTNlNmYxZGE1ZWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-17T14:22:53Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-17T14:22:53Z"}, "message": "fix: Don't duplicate attribute completions", "tree": {"sha": "b2d53fb30041b32bd4a7179b9b8a33439cb0211b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d53fb30041b32bd4a7179b9b8a33439cb0211b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e538638a3afb991aea4160986cf13e6f1da5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e538638a3afb991aea4160986cf13e6f1da5ea", "html_url": "https://github.com/rust-lang/rust/commit/d3e538638a3afb991aea4160986cf13e6f1da5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e538638a3afb991aea4160986cf13e6f1da5ea/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f79f3db7b71b192dd2e387d2d7face7e27b3b3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79f3db7b71b192dd2e387d2d7face7e27b3b3bd", "html_url": "https://github.com/rust-lang/rust/commit/f79f3db7b71b192dd2e387d2d7face7e27b3b3bd"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "5e260880ffde71faffd4503eca21a7c65be6ede1", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=d3e538638a3afb991aea4160986cf13e6f1da5ea", "patch": "@@ -216,7 +216,7 @@ impl ItemTree {\n         self.attrs.get(&of).unwrap_or(&RawAttrs::EMPTY)\n     }\n \n-    pub fn attrs(&self, db: &dyn DefDatabase, krate: CrateId, of: AttrOwner) -> Attrs {\n+    pub(crate) fn attrs(&self, db: &dyn DefDatabase, krate: CrateId, of: AttrOwner) -> Attrs {\n         self.raw_attrs(of).clone().filter(db, krate)\n     }\n "}, {"sha": "9d19d7c1c015e35fb4c6a14fd2733a0ced74c1c6", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=d3e538638a3afb991aea4160986cf13e6f1da5ea", "patch": "@@ -94,10 +94,11 @@ pub(crate) fn hover(\n     let sema = &hir::Semantics::new(db);\n     let file = sema.parse(file_id).syntax().clone();\n \n-    if !range.is_empty() {\n+    let offset = if !range.is_empty() {\n         return hover_ranged(&file, range, sema, config);\n-    }\n-    let offset = range.start();\n+    } else {\n+        range.start()\n+    };\n \n     let original_token = pick_best_token(file.token_at_offset(offset), |kind| match kind {\n         IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,"}, {"sha": "d642c8bc4df18bc0d4d18cd91713ebf7ed4246ee", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=d3e538638a3afb991aea4160986cf13e6f1da5ea", "patch": "@@ -2,8 +2,8 @@\n //!\n //! This module uses a bit of static metadata to provide completions\n //! for built-in attributes.\n+//! Non-builtin attribute(excluding derives attributes) completions are done in [`super::unqualified_path`].\n \n-use hir::HasAttrs;\n use ide_db::{\n     helpers::{\n         generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS},\n@@ -93,23 +93,6 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n         None if is_inner => ATTRIBUTES.iter().for_each(add_completion),\n         None => ATTRIBUTES.iter().filter(|compl| !compl.prefer_inner).for_each(add_completion),\n     }\n-\n-    // FIXME: write a test for this when we can\n-    ctx.scope.process_all_names(&mut |name, scope_def| {\n-        if let hir::ScopeDef::MacroDef(mac) = scope_def {\n-            if mac.kind() == hir::MacroKind::Attr {\n-                let mut item = CompletionItem::new(\n-                    SymbolKind::Attribute,\n-                    ctx.source_range(),\n-                    name.to_smol_str(),\n-                );\n-                if let Some(docs) = mac.docs(ctx.sema.db) {\n-                    item.documentation(docs);\n-                }\n-                item.add_to(acc);\n-            }\n-        }\n-    });\n }\n \n struct AttrCompletion {"}, {"sha": "c2bd26e2d8ede2a1290d6c7881dcdc7258ca7399", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e538638a3afb991aea4160986cf13e6f1da5ea/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=d3e538638a3afb991aea4160986cf13e6f1da5ea", "patch": "@@ -283,7 +283,11 @@ fn attr_on_type_alias() {\n #[test]\n fn attr_on_struct() {\n     check(\n-        r#\"#[$0] struct Foo;\"#,\n+        r#\"\n+//- minicore:derive\n+#[$0]\n+struct Foo;\n+\"#,\n         expect![[r#\"\n             at allow(\u2026)\n             at cfg(\u2026)\n@@ -303,6 +307,8 @@ fn attr_on_struct() {\n             kw self\n             kw super\n             kw crate\n+            md core\n+            at derive           pub macro derive\n         \"#]],\n     );\n }"}]}