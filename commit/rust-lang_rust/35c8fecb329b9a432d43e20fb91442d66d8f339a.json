{"sha": "35c8fecb329b9a432d43e20fb91442d66d8f339a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YzhmZWNiMzI5YjlhNDMyZDQzZTIwZmI5MTQ0MmQ2NmQ4ZjMzOWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T22:15:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` `NameBindings::value_def`", "tree": {"sha": "4915aed63923841257875e56fde36fb5a368d2f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4915aed63923841257875e56fde36fb5a368d2f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35c8fecb329b9a432d43e20fb91442d66d8f339a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35c8fecb329b9a432d43e20fb91442d66d8f339a", "html_url": "https://github.com/rust-lang/rust/commit/35c8fecb329b9a432d43e20fb91442d66d8f339a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35c8fecb329b9a432d43e20fb91442d66d8f339a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45c9a5e2f2eb9930fe5ee94622f41441604c170", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45c9a5e2f2eb9930fe5ee94622f41441604c170", "html_url": "https://github.com/rust-lang/rust/commit/c45c9a5e2f2eb9930fe5ee94622f41441604c170"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "915e8e310d27b2d86b5c7c900e96b98adc75b068", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/35c8fecb329b9a432d43e20fb91442d66d8f339a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c8fecb329b9a432d43e20fb91442d66d8f339a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=35c8fecb329b9a432d43e20fb91442d66d8f339a", "patch": "@@ -497,6 +497,7 @@ struct TypeNsDef {\n }\n \n // Records a possibly-private value definition.\n+#[deriving(Clone)]\n struct ValueNsDef {\n     is_public: bool, // see note in ImportResolution about how to use this\n     def: Def,\n@@ -507,7 +508,7 @@ struct ValueNsDef {\n // bound to.\n struct NameBindings {\n     type_def: RefCell<Option<TypeNsDef>>,   //< Meaning in type namespace.\n-    value_def: Option<ValueNsDef>,  //< Meaning in value namespace.\n+    value_def: RefCell<Option<ValueNsDef>>, //< Meaning in value namespace.\n }\n \n /// Ways in which a trait can be referenced\n@@ -614,8 +615,11 @@ impl NameBindings {\n \n     /// Records a value definition.\n     fn define_value(&mut self, def: Def, sp: Span, is_public: bool) {\n-        self.value_def = Some(ValueNsDef { def: def, value_span: Some(sp),\n-                                           is_public: is_public });\n+        self.value_def.set(Some(ValueNsDef {\n+            def: def,\n+            value_span: Some(sp),\n+            is_public: is_public,\n+        }));\n     }\n \n     /// Returns the module node if applicable.\n@@ -644,7 +648,7 @@ impl NameBindings {\n     fn defined_in_namespace(&self, namespace: Namespace) -> bool {\n         match namespace {\n             TypeNS   => return self.type_def.get().is_some(),\n-            ValueNS  => return self.value_def.is_some()\n+            ValueNS  => return self.value_def.get().is_some()\n         }\n     }\n \n@@ -653,7 +657,7 @@ impl NameBindings {\n             TypeNS => match self.type_def.get() {\n                 Some(def) => def.is_public, None => false\n             },\n-            ValueNS => match self.value_def {\n+            ValueNS => match self.value_def.get() {\n                 Some(def) => def.is_public, None => false\n             }\n         }\n@@ -683,7 +687,7 @@ impl NameBindings {\n                 }\n             }\n             ValueNS => {\n-                match self.value_def {\n+                match self.value_def.get() {\n                     None => None,\n                     Some(value_def) => Some(value_def.def)\n                 }\n@@ -701,7 +705,7 @@ impl NameBindings {\n                     }\n                 }\n                 ValueNS => {\n-                    match self.value_def {\n+                    match self.value_def.get() {\n                         None => None,\n                         Some(value_def) => value_def.value_span\n                     }\n@@ -716,7 +720,7 @@ impl NameBindings {\n fn NameBindings() -> NameBindings {\n     NameBindings {\n         type_def: RefCell::new(None),\n-        value_def: None\n+        value_def: RefCell::new(None),\n     }\n }\n \n@@ -2220,7 +2224,7 @@ impl Resolver {\n                 type_def: None,\n                 type_span: None\n             })),\n-            value_def: None,\n+            value_def: RefCell::new(None),\n         }\n     }\n \n@@ -4534,8 +4538,9 @@ impl Resolver {\n             Success((target, _)) => {\n                 debug!(\"(resolve bare identifier pattern) succeeded in \\\n                          finding {} at {:?}\",\n-                        self.session.str_of(name), target.bindings.value_def);\n-                match target.bindings.value_def {\n+                        self.session.str_of(name),\n+                        target.bindings.value_def.get());\n+                match target.bindings.value_def.get() {\n                     None => {\n                         fail!(\"resolved name in the value namespace to a \\\n                               set of name bindings with no def?!\");"}]}