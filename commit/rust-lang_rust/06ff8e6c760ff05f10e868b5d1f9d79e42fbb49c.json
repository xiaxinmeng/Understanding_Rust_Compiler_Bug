{"sha": "06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZmY4ZTZjNzYwZmYwNWYxMGU4NjhiNWQxZjlkNzllNDJmYmI0OWM=", "commit": {"author": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-14T18:25:08Z"}, "committer": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-14T18:25:08Z"}, "message": "refactor requirements put forward mkladov", "tree": {"sha": "7c9c0502dfd402fa48296d17b09feac24a4031f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9c0502dfd402fa48296d17b09feac24a4031f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c", "html_url": "https://github.com/rust-lang/rust/commit/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c/comments", "author": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7899625e64262512c37b42da19fe520dd6c76f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7899625e64262512c37b42da19fe520dd6c76f2", "html_url": "https://github.com/rust-lang/rust/commit/e7899625e64262512c37b42da19fe520dd6c76f2"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "14cd583eaa8af084f01906a2510bd5045ba1c51f", "filename": "crates/ra_ide/src/completion/unstable_feature_descriptor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs?ref=06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c"}, {"sha": "1edb04c2f1f6bc292686e9c0bbd4f2a80364e3d9", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c", "patch": "@@ -42,6 +42,7 @@ const ASSISTS_TESTS: &str = \"crates/ra_assists/src/tests/generated.rs\";\n \n const REPOSITORY_URL: &str = \"https://github.com/rust-lang/rust\";\n const UNSTABLE_FEATURE: &str = \"crates/ra_ide/src/completion/unstable_feature_descriptor.rs\";\n+const REPO_PATH: &str = \"src/doc/unstable-book/src\";\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub enum Mode {"}, {"sha": "3f3beb5914f4daefec5385a054fd213bb80ba5aa", "filename": "xtask/src/codegen/gen_unstable_future_descriptor.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs?ref=06ff8e6c760ff05f10e868b5d1f9d79e42fbb49c", "patch": "@@ -2,27 +2,13 @@\n \n use crate::codegen::update;\n use crate::codegen::{self, project_root, Mode, Result};\n+use crate::not_bash::{fs2, pushd, run};\n+use proc_macro2::TokenStream;\n use quote::quote;\n-use std::fs;\n-use std::process::Command;\n+use std::path::PathBuf;\n use walkdir::WalkDir;\n \n-pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n-    let path = project_root().join(codegen::STORAGE);\n-    fs::create_dir_all(path.clone())?;\n-\n-    Command::new(\"git\").current_dir(path.clone()).arg(\"init\").output()?;\n-    Command::new(\"git\")\n-        .current_dir(path.clone())\n-        .args(&[\"remote\", \"add\", \"-f\", \"origin\", codegen::REPOSITORY_URL])\n-        .output()?;\n-    Command::new(\"git\")\n-        .current_dir(path.clone())\n-        .args(&[\"sparse-checkout\", \"set\", \"/src/doc/unstable-book/src/\"])\n-        .output()?;\n-    Command::new(\"git\").current_dir(path.clone()).args(&[\"pull\", \"origin\", \"master\"]).output()?;\n-\n-    let src_dir = path.join(\"src/doc/unstable-book/src\");\n+fn generate_descriptor(src_dir: PathBuf) -> Result<TokenStream> {\n     let files = WalkDir::new(src_dir.join(\"language-features\"))\n         .into_iter()\n         .chain(WalkDir::new(src_dir.join(\"library-features\")))\n@@ -49,13 +35,27 @@ pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n     let ts = quote! {\n         use crate::completion::LintCompletion;\n \n-        pub const UNSTABLE_FEATURE_DESCRIPTOR:  &[LintCompletion] = &[\n+        pub(crate) const UNSTABLE_FEATURE_DESCRIPTOR:  &[LintCompletion] = &[\n             #(#definitions),*\n         ];\n     };\n+    Ok(ts)\n+}\n+\n+pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n+    let path = project_root().join(codegen::STORAGE);\n+    fs2::create_dir_all(path.clone())?;\n+\n+    let _d = pushd(path.clone());\n+    run!(\"git init\")?;\n+    run!(\"git remote add -f origin {}\", codegen::REPOSITORY_URL)?;\n+    run!(\"git pull origin master\")?;\n+\n+    let src_dir = path.join(codegen::REPO_PATH);\n+    let content = generate_descriptor(src_dir)?.to_string();\n \n+    let contents = crate::reformat(content)?;\n     let destination = project_root().join(codegen::UNSTABLE_FEATURE);\n-    let contents = crate::reformat(ts.to_string())?;\n     update(destination.as_path(), &contents, mode)?;\n \n     Ok(())"}]}