{"sha": "f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZjZhYzM1NTRkMGI1ZTM4MDk4NWIxYTIwNzAwMDBiZmQ4ZWY3N2I=", "commit": {"author": {"name": "lf-", "email": "lf-@users.noreply.github.com", "date": "2020-12-30T09:17:25Z"}, "committer": {"name": "lf-", "email": "lf-@users.noreply.github.com", "date": "2020-12-30T12:51:07Z"}, "message": "Add an option for extra env vars in the Code extension", "tree": {"sha": "63d549ecaab44bccbcfc996660beeeb698951c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63d549ecaab44bccbcfc996660beeeb698951c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "html_url": "https://github.com/rust-lang/rust/commit/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7d2b5888b8a7e632ae9080108ccbc450316fd86", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d2b5888b8a7e632ae9080108ccbc450316fd86", "html_url": "https://github.com/rust-lang/rust/commit/e7d2b5888b8a7e632ae9080108ccbc450316fd86"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "587f11b902b26750eda78745755cb1a244a16b64", "filename": "editors/code/package.json", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "patch": "@@ -283,6 +283,14 @@\n                     \"default\": null,\n                     \"markdownDescription\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then `#rust-analyzer.updates.channel#` setting is not used\"\n                 },\n+                \"rust-analyzer.server.extraEnv\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"object\"\n+                    ],\n+                    \"default\": null,\n+                    \"markdownDescription\": \"Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging.\"\n+                },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\",\n                     \"scope\": \"window\","}, {"sha": "539e487ec966f03ea4cb6b03e9f51773e7f589e3", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "patch": "@@ -6,6 +6,10 @@ import { DocumentSemanticsTokensSignature, DocumentSemanticsTokensEditsSignature\n import { assert } from './util';\n import { WorkspaceEdit } from 'vscode';\n \n+export interface Env {\n+    [name: string]: string;\n+}\n+\n function renderCommand(cmd: ra.CommandLink) {\n     return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(JSON.stringify(cmd.arguments))} '${cmd.tooltip!}')`;\n }\n@@ -27,14 +31,17 @@ async function semanticHighlightingWorkaround<R, F extends (...args: any[]) => v\n     return res;\n }\n \n-export function createClient(serverPath: string, cwd: string): lc.LanguageClient {\n+export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n \n+    const newEnv = Object.assign({}, process.env);\n+    Object.assign(newEnv, extraEnv);\n+\n     const run: lc.Executable = {\n         command: serverPath,\n-        options: { cwd },\n+        options: { cwd, env: newEnv },\n     };\n     const serverOptions: lc.ServerOptions = {\n         run,"}, {"sha": "fe9f3b4a87b0b1dd4ec807b91eb70b066aeb387f", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "patch": "@@ -1,4 +1,5 @@\n import * as vscode from 'vscode';\n+import { Env } from './client';\n import { log } from \"./util\";\n \n export type UpdatesChannel = \"stable\" | \"nightly\";\n@@ -13,6 +14,7 @@ export class Config {\n     readonly rootSection = \"rust-analyzer\";\n     private readonly requiresReloadOpts = [\n         \"serverPath\",\n+        \"server\",\n         \"cargo\",\n         \"procMacro\",\n         \"files\",\n@@ -92,6 +94,7 @@ export class Config {\n     }\n \n     get serverPath() { return this.get<null | string>(\"serverPath\"); }\n+    get serverExtraEnv() { return this.get<Env | null>(\"server.extraEnv\") ?? {}; }\n     get channel() { return this.get<UpdatesChannel>(\"updates.channel\"); }\n     get askBeforeDownload() { return this.get<boolean>(\"updates.askBeforeDownload\"); }\n     get traceExtension() { return this.get<boolean>(\"trace.extension\"); }"}, {"sha": "e7585184bd439741100593a69fa4699e6f55295d", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f7f6ac3554d0b5e380985b1a2070000bfd8ef77b/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=f7f6ac3554d0b5e380985b1a2070000bfd8ef77b", "patch": "@@ -24,7 +24,7 @@ export class Ctx {\n         serverPath: string,\n         cwd: string,\n     ): Promise<Ctx> {\n-        const client = createClient(serverPath, cwd);\n+        const client = createClient(serverPath, cwd, config.serverExtraEnv);\n \n         const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n         extCtx.subscriptions.push(statusBar);"}]}