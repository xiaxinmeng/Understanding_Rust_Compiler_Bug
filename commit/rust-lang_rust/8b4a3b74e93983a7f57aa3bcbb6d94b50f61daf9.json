{"sha": "8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNGEzYjc0ZTkzOTgzYTdmNTdhYTNiY2JiNmQ5NGI1MGY2MWRhZjk=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2019-11-13T23:42:00Z"}, "committer": {"name": "areredify", "email": "areredify@localhost.localdomain", "date": "2019-12-22T19:06:48Z"}, "message": "move is_must_use_ty to utils", "tree": {"sha": "0d9a6ce05cfc16eca07168350548aaa76bce4b97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9a6ce05cfc16eca07168350548aaa76bce4b97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9", "html_url": "https://github.com/rust-lang/rust/commit/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d1225981177587fbb68d9c4902c770c3dbaafb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1225981177587fbb68d9c4902c770c3dbaafb0", "html_url": "https://github.com/rust-lang/rust/commit/6d1225981177587fbb68d9c4902c770c3dbaafb0"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "ae4f36dd34a9b94b7fc10be83c163ed62f6a602e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::{\n     attrs::is_proc_macro, iter_input_pats, match_def_path, qpath_res, return_ty, snippet, snippet_opt,\n     span_help_and_lint, span_lint, span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+    must_use_attr, is_must_use_ty,\n };\n use matches::matches;\n use rustc::hir::{self, def::Res, def_id::DefId, intravisit};\n@@ -466,15 +467,6 @@ fn check_must_use_candidate<'a, 'tcx>(\n     });\n }\n \n-fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n-    attrs.iter().find(|attr| {\n-        attr.ident().map_or(false, |ident| {\n-            let ident: &str = &ident.as_str();\n-            \"must_use\" == ident\n-        })\n-    })\n-}\n-\n fn returns_unit(decl: &hir::FnDecl) -> bool {\n     match decl.output {\n         hir::FunctionRetTy::DefaultReturn(_) => true,\n@@ -486,41 +478,6 @@ fn returns_unit(decl: &hir::FnDecl) -> bool {\n     }\n }\n \n-fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    use ty::TyKind::*;\n-    match ty.kind {\n-        Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n-        Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n-        Slice(ref ty) | Array(ref ty, _) | RawPtr(ty::TypeAndMut { ref ty, .. }) | Ref(_, ref ty, _) => {\n-            // for the Array case we don't need to care for the len == 0 case\n-            // because we don't want to lint functions returning empty arrays\n-            is_must_use_ty(cx, *ty)\n-        },\n-        Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n-        Opaque(ref def_id, _) => {\n-            for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n-                    if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        },\n-        Dynamic(binder, _) => {\n-            for predicate in binder.skip_binder().iter() {\n-                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n-                    if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        },\n-        _ => false,\n-    }\n-}\n-\n fn has_mutable_arg(cx: &LateContext<'_, '_>, body: &hir::Body<'_>) -> bool {\n     let mut tys = FxHashSet::default();\n     body.params.iter().any(|param| is_mutable_pat(cx, &param.pat, &mut tys))"}, {"sha": "b1edb4b448f1d1533596f5429509161a7819e97b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8b4a3b74e93983a7f57aa3bcbb6d94b50f61daf9", "patch": "@@ -41,7 +41,7 @@ use rustc::ty::{\n };\n use rustc_errors::Applicability;\n use smallvec::SmallVec;\n-use syntax::ast::{self, LitKind};\n+use syntax::ast::{self, LitKind, Attribute};\n use syntax::attr;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{kw, Symbol};\n@@ -1237,3 +1237,49 @@ pub fn parent_node_is_if_expr<'a, 'b>(expr: &Expr, cx: &LateContext<'a, 'b>) ->\n         _ => false,\n     }\n }\n+\n+pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n+    attrs.iter().find(|attr| {\n+        attr.ident().map_or(false, |ident| {\n+            let ident: &str = &ident.as_str();\n+            \"must_use\" == ident\n+        })\n+    })\n+}\n+\n+// Returns whether the type has #[must_use] attribute\n+pub fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    use ty::TyKind::*;\n+    match ty.kind {\n+        Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n+        Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n+        Slice(ref ty) | Array(ref ty, _) | RawPtr(ty::TypeAndMut { ref ty, .. }) | Ref(_, ref ty, _) => {\n+            // for the Array case we don't need to care for the len == 0 case\n+            // because we don't want to lint functions returning empty arrays\n+            is_must_use_ty(cx, *ty)\n+        },\n+        Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n+        Opaque(ref def_id, _) => {\n+            for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n+                if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n+                    if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n+                        return true;\n+                    }\n+                }\n+            }\n+            false\n+        },\n+        Dynamic(binder, _) => {\n+            for predicate in binder.skip_binder().iter() {\n+                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n+                        return true;\n+                    }\n+                }\n+            }\n+            false\n+        },\n+        _ => false,\n+    }\n+}\n+"}]}