{"sha": "61ff823c63d90f323872862053e928b5a9c874e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZmY4MjNjNjNkOTBmMzIzODcyODYyMDUzZTkyOGI1YTljODc0ZTQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-19T22:20:21Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-20T10:26:09Z"}, "message": "Test suite for overflowing shift operators.\n\nNote the tests have been revised to match new semantics for 8- and\n16-bit values.", "tree": {"sha": "e683a6a9833d247961e38190b6af08c8b87c05ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e683a6a9833d247961e38190b6af08c8b87c05ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61ff823c63d90f323872862053e928b5a9c874e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61ff823c63d90f323872862053e928b5a9c874e4", "html_url": "https://github.com/rust-lang/rust/commit/61ff823c63d90f323872862053e928b5a9c874e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61ff823c63d90f323872862053e928b5a9c874e4/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19fef72a8c14100029e5ce39cbc5472ab091dad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/19fef72a8c14100029e5ce39cbc5472ab091dad8", "html_url": "https://github.com/rust-lang/rust/commit/19fef72a8c14100029e5ce39cbc5472ab091dad8"}], "stats": {"total": 280, "additions": 280, "deletions": 0}, "files": [{"sha": "54159153382084a239a90c033b7d33100b639a1d", "filename": "src/test/run-fail/overflowing-lsh-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let _x = 1_i32 << id(32);\n+}"}, {"sha": "fd3e801457c2359912fe3ce1680796b25d137520", "filename": "src/test/run-fail/overflowing-lsh-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let _x = 1 << id(-1);\n+}"}, {"sha": "58914bab3fb15e248dee3dbf4e21d0035ce63b42", "filename": "src/test/run-fail/overflowing-lsh-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let _x = 1_u64 << id(64);\n+}"}, {"sha": "e7e5e6e6b9bd6d64554b76da23f15d798e60752d", "filename": "src/test/run-fail/overflowing-lsh-4.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// This function is checking that our automatic truncation does not\n+// sidestep the overflow checking.\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let x = 1_i8 << id(17); // signals overflow when checking is on\n+\n+    // ... but when checking is off, the fallback will truncate the\n+    // input to its lower three bits (= 1). Note that this is *not*\n+    // the behavior of the x86 processor for 8- and 16-bit types,\n+    // but it is necessary to avoid undefined behavior from LLVM.\n+    //\n+    // We check that here, by ensuring the result has only been\n+    // shifted by one place; if overflow checking is turned off, then\n+    // this assertion will pass (and the compiletest driver will\n+    // report that the test did not produce the error expected above).\n+    assert_eq!(x, 2_i8);\n+}"}, {"sha": "c36a16f18f86e963ee0a7e57d2a9b2397b61e069", "filename": "src/test/run-fail/overflowing-rsh-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let _x = -1_i32 >> id(32);\n+}"}, {"sha": "f619ebe9fb4a60ca9241d15f3133f2a420b9b739", "filename": "src/test/run-fail/overflowing-rsh-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let _x = -1_i32 >> id(-1);\n+}"}, {"sha": "c261e195fd71ebe3b39d72f35418aa05446639fc", "filename": "src/test/run-fail/overflowing-rsh-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let _x = -1_i64 >> id(64);\n+}"}, {"sha": "c8e6c918e9957967ac2a791efba33ec45c1018d4", "filename": "src/test/run-fail/overflowing-rsh-4.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+// This function is checking that our (type-based) automatic\n+// truncation does not sidestep the overflow checking.\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    let x = 2_i8 >> id(17); // signals overflow when checking is on\n+\n+    // ... but when checking is off, the fallback will truncate the\n+    // input to its lower three bits (= 1). Note that this is *not*\n+    // the behavior of the x86 processor for 8- and 16-bit types,\n+    // but it is necessary to avoid undefined behavior from LLVM.\n+    //\n+    // We check that here, by ensuring the result is not zero; if\n+    // overflow checking is turned off, then this assertion will pass\n+    // (and the compiletest driver will report that the test did not\n+    // produce the error expected above).\n+    assert_eq!(x, 1_i8);\n+}"}, {"sha": "c656fc00fc272734449ac9fc015d593952d37e1b", "filename": "src/test/run-pass/shift-near-oflo.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-pass%2Fshift-near-oflo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ff823c63d90f323872862053e928b5a9c874e4/src%2Ftest%2Frun-pass%2Fshift-near-oflo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshift-near-oflo.rs?ref=61ff823c63d90f323872862053e928b5a9c874e4", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C debug-assertions\n+\n+// Check that we do *not* overflow on a number of edge cases.\n+// (compare with test/run-fail/overflowing-{lsh,rsh}*.rs)\n+\n+// (Work around constant-evaluation)\n+fn id<T>(x: T) -> T { x }\n+\n+fn main() {\n+    test_left_shift();\n+    test_right_shift();\n+}\n+\n+fn test_left_shift() {\n+    // negative rhs can panic, but values in [0,N-1] are okay for iN\n+\n+    macro_rules! tests {\n+        ($iN:ty, $uN:ty, $max_rhs:expr, $expect_i:expr, $expect_u:expr) => { {\n+            let x = 1 as $iN << id(0);\n+            assert_eq!(x, 1);\n+            let x = 1 as $uN << id(0);\n+            assert_eq!(x, 1);\n+            let x = 1 as $iN << id($max_rhs);\n+            assert_eq!(x, $expect_i);\n+            let x = 1 as $uN << id($max_rhs);\n+            assert_eq!(x, $expect_u);\n+            // high-order bits on LHS are silently discarded without panic.\n+            let x = 3 as $iN << id($max_rhs);\n+            assert_eq!(x, $expect_i);\n+            let x = 3 as $uN << id($max_rhs);\n+            assert_eq!(x, $expect_u);\n+        } }\n+    }\n+\n+    let x = 1_i8 << id(0);\n+    assert_eq!(x, 1);\n+    let x = 1_u8 << id(0);\n+    assert_eq!(x, 1);\n+    let x = 1_i8 << id(7);\n+    assert_eq!(x, std::i8::MIN);\n+    let x = 1_u8 << id(7);\n+    assert_eq!(x, 0x80);\n+    // high-order bits on LHS are silently discarded without panic.\n+    let x = 3_i8 << id(7);\n+    assert_eq!(x, std::i8::MIN);\n+    let x = 3_u8 << id(7);\n+    assert_eq!(x, 0x80);\n+\n+    // above is (approximately) expanded from:\n+    tests!(i8, u8, 7, std::i8::MIN, 0x80_u8);\n+\n+    tests!(i16, u16, 15, std::i16::MIN, 0x8000_u16);\n+    tests!(i32, u32, 31, std::i32::MIN, 0x8000_0000_u32);\n+    tests!(i64, u64, 63, std::i64::MIN, 0x8000_0000_0000_0000_u64);\n+}\n+\n+fn test_right_shift() {\n+    // negative rhs can panic, but values in [0,N-1] are okay for iN\n+\n+    macro_rules! tests {\n+        ($iN:ty, $uN:ty, $max_rhs:expr,\n+         $signbit_i:expr, $highbit_i:expr, $highbit_u:expr) =>\n+        { {\n+            let x = 1 as $iN >> id(0);\n+            assert_eq!(x, 1);\n+            let x = 1 as $uN >> id(0);\n+            assert_eq!(x, 1);\n+            let x = $highbit_i >> id($max_rhs-1);\n+            assert_eq!(x, 1);\n+            let x = $highbit_u >> id($max_rhs);\n+            assert_eq!(x, 1);\n+            // sign-bit is carried by arithmetic right shift\n+            let x = $signbit_i >> id($max_rhs);\n+            assert_eq!(x, -1);\n+            // low-order bits on LHS are silently discarded without panic.\n+            let x = $highbit_i + 1 >> id($max_rhs-1);\n+            assert_eq!(x, 1);\n+            let x = $highbit_u + 1 >> id($max_rhs);\n+            assert_eq!(x, 1);\n+            let x = $signbit_i + 1 >> id($max_rhs);\n+            assert_eq!(x, -1);\n+        } }\n+    }\n+\n+    tests!(i8, u8, 7, std::i8::MIN, 0x40_i8, 0x80_u8);\n+    tests!(i16, u16, 15, std::i16::MIN, 0x4000_u16, 0x8000_u16);\n+    tests!(i32, u32, 31, std::i32::MIN, 0x4000_0000_u32, 0x8000_0000_u32);\n+    tests!(i64, u64, 63, std::i64::MIN,\n+           0x4000_0000_0000_0000_u64, 0x8000_0000_0000_0000_u64);\n+}"}]}