{"sha": "6b4ec73b7ed2522b837368a11863afb4b432b9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNGVjNzNiN2VkMjUyMmI4MzczNjhhMTE4NjNhZmI0YjQzMmI5YTQ=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-05T02:59:28Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-05T03:00:00Z"}, "message": "Clippy changes", "tree": {"sha": "3df753fe58ec1c3fccb48cc2c889fff36e360f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df753fe58ec1c3fccb48cc2c889fff36e360f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b4ec73b7ed2522b837368a11863afb4b432b9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4ec73b7ed2522b837368a11863afb4b432b9a4", "html_url": "https://github.com/rust-lang/rust/commit/6b4ec73b7ed2522b837368a11863afb4b432b9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b4ec73b7ed2522b837368a11863afb4b432b9a4/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f70a7293e7b24dedeec9a504763a1a3ef57675", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f70a7293e7b24dedeec9a504763a1a3ef57675", "html_url": "https://github.com/rust-lang/rust/commit/21f70a7293e7b24dedeec9a504763a1a3ef57675"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "deef166b565e4d1fb2b7e9254bb5365d8b36ed28", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=6b4ec73b7ed2522b837368a11863afb4b432b9a4", "patch": "@@ -23,27 +23,24 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     // We already have some match arms, so we don't provide any assists.\n     // Unless if there is only one trivial match arm possibly created\n     // by match postfix complete. Trivial match arm is the catch all arm.\n-    match match_expr.match_arm_list() {\n-        Some(arm_list) => {\n-            let mut arm_iter = arm_list.arms();\n-            let first = arm_iter.next();\n-\n-            match first {\n-                // If there arm list is empty or there is only one trivial arm, then proceed.\n-                Some(arm) if is_trivial_arm(arm) => {\n-                    if arm_iter.next() != None {\n-                        return None;\n-                    }\n-                }\n-                None => {}\n-\n-                _ => {\n+    if let Some(arm_list) = match_expr.match_arm_list() {\n+        let mut arm_iter = arm_list.arms();\n+        let first = arm_iter.next();\n+\n+        match first {\n+            // If there arm list is empty or there is only one trivial arm, then proceed.\n+            Some(arm) if is_trivial_arm(arm) => {\n+                if arm_iter.next() != None {\n                     return None;\n                 }\n             }\n+            None => {}\n+\n+            _ => {\n+                return None;\n+            }\n         }\n-        _ => {}\n-    }\n+    };\n \n     let expr = match_expr.expr()?;\n     let analyzer = hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, expr.syntax(), None);"}, {"sha": "99088d9a5f64ed179ed16fad1809d2759b84f126", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=6b4ec73b7ed2522b837368a11863afb4b432b9a4", "patch": "@@ -10,10 +10,7 @@ pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n     let path = ast::Path::cast(colon_colon.parent())?;\n     let top_path = successors(Some(path), |it| it.parent_path()).last()?;\n \n-    let use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast);\n-    if use_tree.is_none() {\n-        return None;\n-    }\n+    let _use_tree = top_path.syntax().ancestors().find_map(ast::UseTree::cast)?;\n \n     let l_curly = colon_colon.range().end();\n     let r_curly = match top_path.syntax().parent().and_then(ast::UseTree::cast) {"}, {"sha": "ad8e10c526d3d743546a17682443b0457efe60db", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=6b4ec73b7ed2522b837368a11863afb4b432b9a4", "patch": "@@ -131,7 +131,8 @@ impl CrateGraph {\n         if self.dfs_find(from, to, &mut FxHashSet::default()) {\n             return Err(CyclicDependencies);\n         }\n-        Ok(self.arena.get_mut(&from).unwrap().add_dep(name, to))\n+        self.arena.get_mut(&from).unwrap().add_dep(name, to);\n+        Ok(())\n     }\n \n     pub fn is_empty(&self) -> bool {"}, {"sha": "b3a4f4d632f2a6e5776b171bbc988995a9498bec", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6b4ec73b7ed2522b837368a11863afb4b432b9a4", "patch": "@@ -240,10 +240,10 @@ impl Module {\n     }\n \n     pub fn path_to_root(self, db: &impl HirDatabase) -> Vec<Module> {\n-        let mut res = vec![self.clone()];\n-        let mut curr = self.clone();\n+        let mut res = vec![self];\n+        let mut curr = self;\n         while let Some(next) = curr.parent(db) {\n-            res.push(next.clone());\n+            res.push(next);\n             curr = next\n         }\n         res"}, {"sha": "78aa76449e40a3cd2b3af39461515714d57d8329", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6b4ec73b7ed2522b837368a11863afb4b432b9a4", "patch": "@@ -529,7 +529,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 match matching_def {\n                     Some(_) => {\n                         self.write_assoc_resolution(id, item);\n-                        return matching_def;\n+                        matching_def\n                     }\n                     None => None,\n                 }"}, {"sha": "7eed6c663360fa7df7680650422908c555fc49dd", "filename": "crates/ra_syntax/src/validation/unescape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ec73b7ed2522b837368a11863afb4b432b9a4/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs?ref=6b4ec73b7ed2522b837368a11863afb4b432b9a4", "patch": "@@ -262,7 +262,7 @@ where\n \n fn byte_from_char(c: char) -> u8 {\n     let res = c as u32;\n-    assert!(res <= u8::max_value() as u32, \"guaranteed because of Mode::Byte\");\n+    assert!(res <= u32::from(u8::max_value()), \"guaranteed because of Mode::Byte\");\n     res as u8\n }\n "}]}