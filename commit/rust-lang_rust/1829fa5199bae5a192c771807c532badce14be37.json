{"sha": "1829fa5199bae5a192c771807c532badce14be37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjlmYTUxOTliYWU1YTE5MmM3NzE4MDdjNTMyYmFkY2UxNGJlMzc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-06-05T06:31:27Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-22T13:33:59Z"}, "message": "Hack for \"unsafety hygiene\" -- `push_unsafe!` and `pop_unsafe!`.\n\nEven after expansion, the generated expressions still track depth of\nsuch pushes (i.e. how often you have \"pushed\" without a corresponding\n\"pop\"), and we add a rule that in a context with a positive\n`push_unsafe!` depth, it is effectively an `unsafe` block context.\n\n(This way, we can inject code that uses `unsafe` features, but still\ncontains within it a sub-expression that should inherit the outer\nsafety checking setting, outside of the injected code.)\n\nThis is a total hack; it not only needs a feature-gate, but probably\nshould be feature-gated forever (if possible).\n\nignore-pretty in test/run-pass/pushpop-unsafe-okay.rs", "tree": {"sha": "83580d10f443b4af71c5722756e68ff1ac7526e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83580d10f443b4af71c5722756e68ff1ac7526e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1829fa5199bae5a192c771807c532badce14be37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1829fa5199bae5a192c771807c532badce14be37", "html_url": "https://github.com/rust-lang/rust/commit/1829fa5199bae5a192c771807c532badce14be37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1829fa5199bae5a192c771807c532badce14be37/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25281b121ff809f35a6abd7d2d115995436c3319", "url": "https://api.github.com/repos/rust-lang/rust/commits/25281b121ff809f35a6abd7d2d115995436c3319", "html_url": "https://github.com/rust-lang/rust/commit/25281b121ff809f35a6abd7d2d115995436c3319"}], "stats": {"total": 317, "additions": 301, "deletions": 16}, "files": [{"sha": "a2e42245bbef84cf9cc5aa6510078688a1589c19", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -10,7 +10,7 @@\n \n //! Enforces the Rust effect system. Currently there is just one effect,\n //! `unsafe`.\n-use self::UnsafeContext::*;\n+use self::RootUnsafeContext::*;\n \n use middle::def;\n use middle::ty::{self, Ty};\n@@ -21,8 +21,20 @@ use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n+#[derive(Copy, Clone)]\n+struct UnsafeContext {\n+    push_unsafe_count: usize,\n+    root: RootUnsafeContext,\n+}\n+\n+impl UnsafeContext {\n+    fn new(root: RootUnsafeContext) -> UnsafeContext {\n+        UnsafeContext { root: root, push_unsafe_count: 0 }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n-enum UnsafeContext {\n+enum RootUnsafeContext {\n     SafeContext,\n     UnsafeFn,\n     UnsafeBlock(ast::NodeId),\n@@ -44,7 +56,8 @@ struct EffectCheckVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n     fn require_unsafe(&mut self, span: Span, description: &str) {\n-        match self.unsafe_context {\n+        if self.unsafe_context.push_unsafe_count > 0 { return; }\n+        match self.unsafe_context.root {\n             SafeContext => {\n                 // Report an error.\n                 span_err!(self.tcx.sess, span, E0133,\n@@ -75,9 +88,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n \n         let old_unsafe_context = self.unsafe_context;\n         if is_unsafe_fn {\n-            self.unsafe_context = UnsafeFn\n+            self.unsafe_context = UnsafeContext::new(UnsafeFn)\n         } else if is_item_fn {\n-            self.unsafe_context = SafeContext\n+            self.unsafe_context = UnsafeContext::new(SafeContext)\n         }\n \n         visit::walk_fn(self, fn_kind, fn_decl, block, span);\n@@ -105,10 +118,18 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 // external blocks (e.g. `unsafe { println(\"\") }`,\n                 // expands to `unsafe { ... unsafe { ... } }` where\n                 // the inner one is compiler generated).\n-                if self.unsafe_context == SafeContext || source == ast::CompilerGenerated {\n-                    self.unsafe_context = UnsafeBlock(block.id)\n+                if self.unsafe_context.root == SafeContext || source == ast::CompilerGenerated {\n+                    self.unsafe_context.root = UnsafeBlock(block.id)\n                 }\n             }\n+            ast::PushUnsafeBlock(..) => {\n+                self.unsafe_context.push_unsafe_count =\n+                    self.unsafe_context.push_unsafe_count.saturating_add(1);\n+            }\n+            ast::PopUnsafeBlock(..) => {\n+                self.unsafe_context.push_unsafe_count =\n+                    self.unsafe_context.push_unsafe_count.saturating_sub(1);\n+            }\n         }\n \n         visit::walk_block(self, block);\n@@ -162,7 +183,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n pub fn check_crate(tcx: &ty::ctxt) {\n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n-        unsafe_context: SafeContext,\n+        unsafe_context: UnsafeContext::new(SafeContext),\n     };\n \n     visit::walk_crate(&mut visitor, tcx.map.krate());"}, {"sha": "d6afd72d3b4dbb429d48e64069469eb811bf7170", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -231,12 +231,13 @@ impl<'tcx> Expectation<'tcx> {\n pub struct UnsafetyState {\n     pub def: ast::NodeId,\n     pub unsafety: ast::Unsafety,\n+    pub unsafe_push_count: u32,\n     from_fn: bool\n }\n \n impl UnsafetyState {\n     pub fn function(unsafety: ast::Unsafety, def: ast::NodeId) -> UnsafetyState {\n-        UnsafetyState { def: def, unsafety: unsafety, from_fn: true }\n+        UnsafetyState { def: def, unsafety: unsafety, unsafe_push_count: 0, from_fn: true }\n     }\n \n     pub fn recurse(&mut self, blk: &ast::Block) -> UnsafetyState {\n@@ -248,13 +249,20 @@ impl UnsafetyState {\n             ast::Unsafety::Unsafe if self.from_fn => *self,\n \n             unsafety => {\n-                let (unsafety, def) = match blk.rules {\n-                    ast::UnsafeBlock(..) => (ast::Unsafety::Unsafe, blk.id),\n-                    ast::DefaultBlock => (unsafety, self.def),\n+                let (unsafety, def, count) = match blk.rules {\n+                    ast::PushUnsafeBlock(..) =>\n+                        (unsafety, blk.id, self.unsafe_push_count.saturating_add(1)),\n+                    ast::PopUnsafeBlock(..) =>\n+                        (unsafety, blk.id, self.unsafe_push_count.saturating_sub(1)),\n+                    ast::UnsafeBlock(..) =>\n+                        (ast::Unsafety::Unsafe, blk.id, self.unsafe_push_count),\n+                    ast::DefaultBlock =>\n+                        (unsafety, self.def, self.unsafe_push_count),\n                 };\n                 UnsafetyState{ def: def,\n-                             unsafety: unsafety,\n-                             from_fn: false }\n+                               unsafety: unsafety,\n+                               unsafe_push_count: count,\n+                               from_fn: false }\n             }\n         }\n     }"}, {"sha": "fba9db401dbb1a2423762c0980beccd87d74f67c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -810,6 +810,8 @@ pub type SpannedIdent = Spanned<Ident>;\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n+    PushUnsafeBlock(UnsafeSource),\n+    PopUnsafeBlock(UnsafeSource),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "409ae86db35d4ebe53404379c8a674e8b3e35c0f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -591,6 +591,12 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n     syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n+    syntax_expanders.insert(intern(\"push_unsafe\"),\n+                            builtin_normal_expander(\n+                                ext::pushpop_safe::expand_push_unsafe));\n+    syntax_expanders.insert(intern(\"pop_unsafe\"),\n+                            builtin_normal_expander(\n+                                ext::pushpop_safe::expand_pop_unsafe));\n     syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));"}, {"sha": "b540e0adeea87b0ea678a81236b556c4fcf1f273", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -1504,6 +1504,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_trace_macros = allow_trace_macros,\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n         fn enable_custom_derive = allow_custom_derive,\n+        fn enable_pushpop_unsafe = allow_pushpop_unsafe,\n     }\n }\n "}, {"sha": "fee445cd31af3ff2934967137c037a653f87eda4", "filename": "src/libsyntax/ext/pushpop_safe.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fext%2Fpushpop_safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fext%2Fpushpop_safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpushpop_safe.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*\n+ * The compiler code necessary to support the `push_unsafe!` and\n+ * `pop_unsafe!` macros.\n+ *\n+ * This is a hack to allow a kind of \"safety hygiene\", where a macro\n+ * can generate code with an interior expression that inherits the\n+ * safety of some outer context.\n+ *\n+ * For example, in:\n+ *\n+ * ```rust\n+ * fn foo() { push_unsafe!( { EXPR_1; pop_unsafe!( EXPR_2 ) } ) }\n+ * ```\n+ *\n+ * the `EXPR_1` is considered to be in an `unsafe` context,\n+ * but `EXPR_2` is considered to be in a \"safe\" (i.e. checked) context.\n+ *\n+ * For comparison, in:\n+ *\n+ * ```rust\n+ * fn foo() { unsafe { push_unsafe!( { EXPR_1; pop_unsafe!( EXPR_2 ) } ) } }\n+ * ```\n+ *\n+ * both `EXPR_1` and `EXPR_2` are considered to be in `unsafe`\n+ * contexts.\n+ *\n+ */\n+\n+use ast;\n+use codemap::Span;\n+use ext::base::*;\n+use ext::base;\n+use ext::build::AstBuilder;\n+use feature_gate;\n+use ptr::P;\n+\n+enum PushPop { Push, Pop }\n+\n+pub fn expand_push_unsafe<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n+                               -> Box<base::MacResult+'cx> {\n+    feature_gate::check_for_pushpop_syntax(\n+        cx.ecfg.features, &cx.parse_sess.span_diagnostic, sp);\n+    expand_pushpop_unsafe(cx, sp, tts, PushPop::Push)\n+}\n+\n+pub fn expand_pop_unsafe<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n+                               -> Box<base::MacResult+'cx> {\n+    feature_gate::check_for_pushpop_syntax(\n+        cx.ecfg.features, &cx.parse_sess.span_diagnostic, sp);\n+    expand_pushpop_unsafe(cx, sp, tts, PushPop::Pop)\n+}\n+\n+fn expand_pushpop_unsafe<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree],\n+                                  pp: PushPop) -> Box<base::MacResult+'cx> {\n+    let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n+        Some(exprs) => exprs.into_iter(),\n+        None => return DummyResult::expr(sp),\n+    };\n+    let expr = match (exprs.next(), exprs.next()) {\n+        (Some(expr), None) => expr,\n+        _ => {\n+            let msg = match pp {\n+                PushPop::Push => \"push_unsafe! takes 1 arguments\",\n+                PushPop::Pop => \"pop_unsafe! takes 1 arguments\",\n+            };\n+            cx.span_err(sp, msg);\n+            return DummyResult::expr(sp);\n+        }\n+    };\n+\n+    let source = ast::UnsafeSource::CompilerGenerated;\n+    let check_mode = match pp {\n+        PushPop::Push => ast::BlockCheckMode::PushUnsafeBlock(source),\n+        PushPop::Pop => ast::BlockCheckMode::PopUnsafeBlock(source),\n+    };\n+\n+    MacEager::expr(cx.expr_block(P(ast::Block {\n+        stmts: vec![],\n+        expr: Some(expr),\n+        id: ast::DUMMY_NODE_ID,\n+        rules: check_mode,\n+        span: sp\n+    })))\n+}"}, {"sha": "69d120cff601cacd2f1bcc024082dd7d983faee2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -80,6 +80,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"visible_private_types\", \"1.0.0\", Active),\n     (\"slicing_syntax\", \"1.0.0\", Accepted),\n     (\"box_syntax\", \"1.0.0\", Active),\n+    (\"pushpop_unsafe\", \"1.2.0\", Active),\n     (\"on_unimplemented\", \"1.0.0\", Active),\n     (\"simd_ffi\", \"1.0.0\", Active),\n     (\"allocator\", \"1.0.0\", Active),\n@@ -325,6 +326,7 @@ pub struct Features {\n     pub allow_trace_macros: bool,\n     pub allow_internal_unstable: bool,\n     pub allow_custom_derive: bool,\n+    pub allow_pushpop_unsafe: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n     pub negate_unsigned: bool,\n@@ -348,6 +350,7 @@ impl Features {\n             allow_trace_macros: false,\n             allow_internal_unstable: false,\n             allow_custom_derive: false,\n+            allow_pushpop_unsafe: false,\n             simd_ffi: false,\n             unmarked_api: false,\n             negate_unsigned: false,\n@@ -358,6 +361,13 @@ impl Features {\n     }\n }\n \n+pub fn check_for_pushpop_syntax(f: Option<&Features>, diag: &SpanHandler, span: Span) {\n+    if let Some(&Features { allow_pushpop_unsafe: true, .. }) = f {\n+        return;\n+    }\n+    emit_feature_err(diag, \"pushpop_unsafe\", span, EXPLAIN_PUSHPOP_UNSAFE);\n+}\n+\n struct Context<'a> {\n     features: Vec<&'static str>,\n     span_handler: &'a SpanHandler,\n@@ -787,6 +797,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         allow_trace_macros: cx.has_feature(\"trace_macros\"),\n         allow_internal_unstable: cx.has_feature(\"allow_internal_unstable\"),\n         allow_custom_derive: cx.has_feature(\"custom_derive\"),\n+        allow_pushpop_unsafe: cx.has_feature(\"pushpop_unsafe\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n         negate_unsigned: cx.has_feature(\"negate_unsigned\"),"}, {"sha": "5424c0b214a4ee980222d7b4fae62b73dfccb3e0", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -120,6 +120,7 @@ pub mod ext {\n     pub mod log_syntax;\n     pub mod mtwt;\n     pub mod quote;\n+    pub mod pushpop_safe;\n     pub mod source_util;\n     pub mod trace_macros;\n "}, {"sha": "448857389da6172b652d71a16b5704aa90c0164c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -1434,8 +1434,8 @@ impl<'a> State<'a> {\n                                       attrs: &[ast::Attribute],\n                                       close_box: bool) -> io::Result<()> {\n         match blk.rules {\n-            ast::UnsafeBlock(..) => try!(self.word_space(\"unsafe\")),\n-            ast::DefaultBlock => ()\n+            ast::UnsafeBlock(..) | ast::PushUnsafeBlock(..) => try!(self.word_space(\"unsafe\")),\n+            ast::DefaultBlock    | ast::PopUnsafeBlock(..) => ()\n         }\n         try!(self.maybe_print_comment(blk.span.lo));\n         try!(self.ann.pre(self, NodeBlock(blk)));"}, {"sha": "e317b4c7d4d2aa3f86368ac7c0da2feacc4c68c2", "filename": "src/test/compile-fail/feature-gate-pushpop-unsafe.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Ftest%2Fcompile-fail%2Ffeature-gate-pushpop-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Ftest%2Fcompile-fail%2Ffeature-gate-pushpop-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-pushpop-unsafe.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let c = push_unsafe!('c'); //~ ERROR push/pop_unsafe macros are experimental\n+    let c = pop_unsafe!('c'); //~ ERROR push/pop_unsafe macros are experimental\n+}"}, {"sha": "b009a670da1e13215d1ed9001a50d9ade95a2d0a", "filename": "src/test/compile-fail/pushpop-unsafe-rejects.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Ftest%2Fcompile-fail%2Fpushpop-unsafe-rejects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Ftest%2Fcompile-fail%2Fpushpop-unsafe-rejects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpushpop-unsafe-rejects.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic sanity check for `push_unsafe!(EXPR)` and\n+// `pop_unsafe!(EXPR)`: we can call unsafe code when there are a\n+// positive number of pushes in the stack, or if we are within a\n+// normal `unsafe` block, but otherwise cannot.\n+\n+static mut X: i32 = 0;\n+\n+unsafe fn f() { X += 1; return; }\n+fn g() { unsafe { X += 1_000; } return; }\n+\n+fn main() {\n+    push_unsafe!( {\n+        f(); pop_unsafe!({\n+            f() //~ ERROR: call to unsafe function\n+        })\n+    } );\n+\n+    push_unsafe!({\n+        f();\n+        pop_unsafe!({\n+            g();\n+            f(); //~ ERROR: call to unsafe function\n+        })\n+    } );\n+\n+    push_unsafe!({\n+        g(); pop_unsafe!({\n+            unsafe {\n+                f();\n+            }\n+            f(); //~ ERROR: call to unsafe function\n+        })\n+    });\n+\n+\n+    // Note: For implementation simplicity I have chosen to just have\n+    // the stack do \"saturated pop\", but perhaps we would prefer to\n+    // have cases like these two here be errors:\n+\n+    pop_unsafe!{ g() };\n+\n+    push_unsafe!({\n+        pop_unsafe!(pop_unsafe!{ g() })\n+    });\n+\n+\n+    // Okay, back to examples that do error, even in the presence of\n+    // \"saturated pop\"\n+\n+    push_unsafe!({\n+        g();\n+        pop_unsafe!(pop_unsafe!({\n+            f() //~ ERROR: call to unsafe function\n+        }))\n+    });\n+\n+    pop_unsafe!({\n+        f(); //~ ERROR: call to unsafe function\n+    })\n+\n+}"}, {"sha": "fc402d4136888489b92643ede0448396cf74a0e6", "filename": "src/test/run-pass/pushpop-unsafe-okay.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1829fa5199bae5a192c771807c532badce14be37/src%2Ftest%2Frun-pass%2Fpushpop-unsafe-okay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1829fa5199bae5a192c771807c532badce14be37/src%2Ftest%2Frun-pass%2Fpushpop-unsafe-okay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpushpop-unsafe-okay.rs?ref=1829fa5199bae5a192c771807c532badce14be37", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic sanity check for `push_unsafe!(EXPR)` and\n+// `pop_unsafe!(EXPR)`: we can call unsafe code when there are a\n+// positive number of pushes in the stack, or if we are within a\n+// normal `unsafe` block, but otherwise cannot.\n+\n+// ignore-pretty because the `push_unsafe!` and `pop_unsafe!` macros\n+// are not integrated with the pretty-printer.\n+\n+#![feature(pushpop_unsafe)]\n+\n+static mut X: i32 = 0;\n+\n+unsafe fn f() { X += 1; return; }\n+fn g() { unsafe { X += 1_000; } return; }\n+\n+fn check_reset_x(x: i32) -> bool {\n+    #![allow(unused_parens)] // dont you judge my style choices!\n+    unsafe {\n+        let ret = (x == X);\n+        X = 0;\n+        ret\n+    }\n+}\n+\n+fn main() {\n+    // double-check test infrastructure\n+    assert!(check_reset_x(0));\n+    unsafe { f(); }\n+    assert!(check_reset_x(1));\n+    assert!(check_reset_x(0));\n+    { g(); }\n+    assert!(check_reset_x(1000));\n+    assert!(check_reset_x(0));\n+    unsafe { f(); g(); g(); }\n+    assert!(check_reset_x(2001));\n+\n+    push_unsafe!( { f(); pop_unsafe!( g() ) } );\n+    assert!(check_reset_x(1_001));\n+    push_unsafe!( { g(); pop_unsafe!( unsafe { f(); f(); } ) } );\n+    assert!(check_reset_x(1_002));\n+\n+    unsafe { push_unsafe!( { f(); pop_unsafe!( { f(); f(); } ) } ); }\n+    assert!(check_reset_x(3));\n+    push_unsafe!( { f(); push_unsafe!( { pop_unsafe!( { f(); f(); f(); } ) } ); } );\n+    assert!(check_reset_x(4));\n+}"}]}