{"sha": "c305473d3c60d5b4590ef8c715468f718a7aad8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMDU0NzNkM2M2MGQ1YjQ1OTBlZjhjNzE1NDY4ZjcxOGE3YWFkOGY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-20T07:07:24Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-24T23:08:36Z"}, "message": "Add AttrId to Attribute_", "tree": {"sha": "b7b35aded387256555005b60a2faa16d9be3ad1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b35aded387256555005b60a2faa16d9be3ad1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c305473d3c60d5b4590ef8c715468f718a7aad8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c305473d3c60d5b4590ef8c715468f718a7aad8f", "html_url": "https://github.com/rust-lang/rust/commit/c305473d3c60d5b4590ef8c715468f718a7aad8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c305473d3c60d5b4590ef8c715468f718a7aad8f/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6304a27b80f3923a8ffc009418c302aa8b06fb93", "url": "https://api.github.com/repos/rust-lang/rust/commits/6304a27b80f3923a8ffc009418c302aa8b06fb93", "html_url": "https://github.com/rust-lang/rust/commit/6304a27b80f3923a8ffc009418c302aa8b06fb93"}], "stats": {"total": 124, "additions": 94, "deletions": 30}, "files": [{"sha": "9ad653498ba06f91b902677902d05e237f605b37", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -91,7 +91,12 @@ impl Svh {\n         // types and then use hash_content.  But, since all crate\n         // attributes should appear near beginning of the file, it is\n         // not such a big deal to be sensitive to their spans for now.\n-        krate.attrs.hash(&mut state);\n+        //\n+        // We hash only the MetaItems instead of the entire Attribute\n+        // to avoid hashing the AttrId\n+        for attr in krate.attrs.iter() {\n+            attr.node.value.hash(&mut state);\n+        }\n \n         let hash = state.result();\n         return Svh {"}, {"sha": "e380af7a4f01b98827c0d1b609238fe97a5b17a5", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -78,7 +78,7 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n                                          with_version(\"std\"),\n                                          ast::DUMMY_NODE_ID),\n             attrs: vec!(\n-                attr::mk_attr_outer(attr::mk_list_item(\n+                attr::mk_attr_outer(attr::mk_attr_id(), attr::mk_list_item(\n                         InternedString::new(\"phase\"),\n                         vec!(\n                             attr::mk_word_item(InternedString::new(\"syntax\")),\n@@ -110,7 +110,8 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n         // Add it during the prelude injection instead.\n \n         // Add #![feature(phase)] here, because we use #[phase] on extern crate std.\n-        let feat_phase_attr = attr::mk_attr_inner(attr::mk_list_item(\n+        let feat_phase_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n+                                                  attr::mk_list_item(\n                                   InternedString::new(\"feature\"),\n                                   vec![attr::mk_word_item(InternedString::new(\"phase\"))],\n                               ));\n@@ -138,15 +139,17 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n         // This must happen here and not in StandardLibraryInjector because this\n         // fold happens second.\n \n-        let no_std_attr = attr::mk_attr_inner(attr::mk_word_item(InternedString::new(\"no_std\")));\n+        let no_std_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n+                                              attr::mk_word_item(InternedString::new(\"no_std\")));\n         krate.attrs.push(no_std_attr);\n \n         if !no_prelude(krate.attrs.as_slice()) {\n             // only add `use std::prelude::*;` if there wasn't a\n             // `#![no_implicit_prelude]` at the crate level.\n \n             // fold_mod() will insert glob path.\n-            let globs_attr = attr::mk_attr_inner(attr::mk_list_item(\n+            let globs_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n+                                                 attr::mk_list_item(\n                 InternedString::new(\"feature\"),\n                 vec!(\n                     attr::mk_word_item(InternedString::new(\"globs\")),"}, {"sha": "d5e9192cd7496b73e6251a50890b0f941e835434", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -341,7 +341,8 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::Item {\n     // This attribute tells resolve to let us call unexported functions\n     let resolve_unexported_str = InternedString::new(\"!resolve_unexported\");\n     let resolve_unexported_attr =\n-        attr::mk_attr_inner(attr::mk_word_item(resolve_unexported_str));\n+        attr::mk_attr_inner(attr::mk_attr_id(),\n+                            attr::mk_word_item(resolve_unexported_str));\n \n     let item = ast::Item {\n         ident: token::str_to_ident(\"__test\"),"}, {"sha": "77c3d43bc095ae7b49346cbc3fc169421bcbff55", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -1056,6 +1056,7 @@ fn get_attributes(md: ebml::Doc) -> Vec<ast::Attribute> {\n             attrs.push(\n                 codemap::Spanned {\n                     node: ast::Attribute_ {\n+                        id: attr::mk_attr_id(),\n                         style: ast::AttrOuter,\n                         value: meta_item,\n                         is_sugared_doc: false,"}, {"sha": "a06c6e59ea1dea5645e0d2a8bc2f85364db8d4d8", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -1436,7 +1436,7 @@ fn synthesize_crate_attrs(ecx: &EncodeContext,\n     fn synthesize_crateid_attr(ecx: &EncodeContext) -> Attribute {\n         assert!(!ecx.link_meta.crateid.name.is_empty());\n \n-        attr::mk_attr_inner(\n+        attr::mk_attr_inner(attr::mk_attr_id(),\n             attr::mk_name_value_item_str(\n                 InternedString::new(\"crate_id\"),\n                 token::intern_and_get_ident(ecx.link_meta"}, {"sha": "4b769a5fdaef70fbcb5f6c0c32c0419f68dc295b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -228,8 +228,9 @@ fn get_extern_rust_fn(ccx: &CrateContext, fn_ty: ty::t, name: &str, did: ast::De\n     let f = decl_rust_fn(ccx, fn_ty, name);\n \n     csearch::get_item_attrs(&ccx.sess().cstore, did, |meta_items| {\n-        set_llvm_fn_attrs(meta_items.iter().map(|&x| attr::mk_attr_outer(x))\n-                                    .collect::<Vec<_>>().as_slice(), f)\n+        set_llvm_fn_attrs(meta_items.iter().map(|&x| {\n+            attr::mk_attr_outer(attr::mk_attr_id(), x)\n+        }).collect::<Vec<_>>().as_slice(), f)\n     });\n \n     ccx.externs.borrow_mut().insert(name.to_strbuf(), f);"}, {"sha": "e77d1faf05d89a0790e9908d3ef3b2bfb549aad6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -1024,9 +1024,13 @@ pub enum AttrStyle {\n     AttrInner,\n }\n \n+#[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n+pub struct AttrId(pub uint);\n+\n // doc-comments are promoted to attributes that have is_sugared_doc = true\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Attribute_ {\n+    pub id: AttrId,\n     pub style: AttrStyle,\n     pub value: @MetaItem,\n     pub is_sugared_doc: bool,"}, {"sha": "83ac2c08efb5e4b56595c7350397a003f5317856", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -11,7 +11,7 @@\n // Functions dealing with attributes and meta items\n \n use ast;\n-use ast::{Attribute, Attribute_, MetaItem, MetaWord, MetaNameValue, MetaList};\n+use ast::{AttrId, Attribute, Attribute_, MetaItem, MetaWord, MetaNameValue, MetaList};\n use codemap::{Span, Spanned, spanned, dummy_spanned};\n use codemap::BytePos;\n use diagnostic::SpanHandler;\n@@ -22,6 +22,18 @@ use crateid::CrateId;\n \n use collections::HashSet;\n \n+local_data_key!(used_attrs: HashSet<AttrId>)\n+\n+pub fn mark_used(attr: &Attribute) {\n+    let mut used = used_attrs.replace(None).unwrap_or_else(|| HashSet::new());\n+    used.insert(attr.node.id);\n+    used_attrs.replace(Some(used));\n+}\n+\n+pub fn is_used(attr: &Attribute) -> bool {\n+    used_attrs.get().map_or(false, |used| used.contains(&attr.node.id))\n+}\n+\n pub trait AttrMetaMethods {\n     // This could be changed to `fn check_name(&self, name: InternedString) ->\n     // bool` which would facilitate a side table recording which\n@@ -127,9 +139,9 @@ impl AttributeMethods for Attribute {\n                 token::intern_and_get_ident(strip_doc_comment_decoration(\n                         comment.get()).as_slice()));\n             if self.node.style == ast::AttrOuter {\n-                mk_attr_outer(meta)\n+                mk_attr_outer(self.node.id, meta)\n             } else {\n-                mk_attr_inner(meta)\n+                mk_attr_inner(self.node.id, meta)\n             }\n         } else {\n             *self\n@@ -158,29 +170,41 @@ pub fn mk_word_item(name: InternedString) -> @MetaItem {\n     @dummy_spanned(MetaWord(name))\n }\n \n+local_data_key!(next_attr_id: uint)\n+\n+pub fn mk_attr_id() -> AttrId {\n+    let id = next_attr_id.replace(None).unwrap_or(0);\n+    next_attr_id.replace(Some(id + 1));\n+    AttrId(id)\n+}\n+\n /// Returns an inner attribute with the given value.\n-pub fn mk_attr_inner(item: @MetaItem) -> Attribute {\n+pub fn mk_attr_inner(id: AttrId, item: @MetaItem) -> Attribute {\n     dummy_spanned(Attribute_ {\n+        id: id,\n         style: ast::AttrInner,\n         value: item,\n         is_sugared_doc: false,\n     })\n }\n \n /// Returns an outer attribute with the given value.\n-pub fn mk_attr_outer(item: @MetaItem) -> Attribute {\n+pub fn mk_attr_outer(id: AttrId, item: @MetaItem) -> Attribute {\n     dummy_spanned(Attribute_ {\n+        id: id,\n         style: ast::AttrOuter,\n         value: item,\n         is_sugared_doc: false,\n     })\n }\n \n-pub fn mk_sugared_doc_attr(text: InternedString, lo: BytePos, hi: BytePos)\n+pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos,\n+                           hi: BytePos)\n                            -> Attribute {\n     let style = doc_comment_style(text.get());\n     let lit = spanned(lo, hi, ast::LitStr(text, ast::CookedStr));\n     let attr = Attribute_ {\n+        id: id,\n         style: style,\n         value: @spanned(lo, hi, MetaNameValue(InternedString::new(\"doc\"),\n                                               lit)),"}, {"sha": "44c177d19ca2fbc234c00b473122f1eb73be5c92", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -231,7 +231,7 @@ pub trait AstBuilder {\n                     generics: Generics) -> @ast::Item;\n     fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> @ast::Item;\n \n-    fn attribute(&self, sp: Span, mi: @ast::MetaItem) -> ast::Attribute;\n+    fn attribute(&self, id: AttrId, sp: Span, mi: @ast::MetaItem) -> ast::Attribute;\n \n     fn meta_word(&self, sp: Span, w: InternedString) -> @ast::MetaItem;\n     fn meta_list(&self,\n@@ -925,8 +925,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.item_ty_poly(span, name, ty, ast_util::empty_generics())\n     }\n \n-    fn attribute(&self, sp: Span, mi: @ast::MetaItem) -> ast::Attribute {\n+    fn attribute(&self, id: ast::AttrId, sp: Span, mi: @ast::MetaItem)\n+                 -> ast::Attribute {\n         respan(sp, ast::Attribute_ {\n+            id: id,\n             style: ast::AttrOuter,\n             value: mi,\n             is_sugared_doc: false,"}, {"sha": "73bfe9c27b62fc86ece69b0da3a6476509259ba3", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use attr;\n use ast::{MetaItem, Item, Expr};\n use codemap::Span;\n use ext::base::ExtCtxt;\n@@ -21,7 +22,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              item: @Item,\n                              push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n+    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "31d6fcb9d6f7b2ecafbfb011873909a213d3a426", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -34,7 +35,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n     macro_rules! md (\n         ($name:expr, $f:ident) => { {\n             let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-            let attrs = vec!(cx.attribute(span, inline));\n+            let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),"}, {"sha": "3d79de4feb1da47a846be515e323238852ec057c", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -10,6 +10,7 @@\n \n use ast;\n use ast::{MetaItem, Item, Expr};\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -24,7 +25,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n     macro_rules! md (\n         ($name:expr, $op:expr, $equal:expr) => { {\n             let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-            let attrs = vec!(cx.attribute(span, inline));\n+            let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),"}, {"sha": "42bbf8e415af9d27c02f893b350060d91692edd4", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -37,8 +38,8 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let hidden = cx.meta_word(span, InternedString::new(\"hidden\"));\n     let doc = cx.meta_list(span, InternedString::new(\"doc\"), vec!(hidden));\n-    let attrs = vec!(cx.attribute(span, inline),\n-                     cx.attribute(span, doc));\n+    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline),\n+                     cx.attribute(attr::mk_attr_id(), span, doc));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "6413bdab3447660610dac4e1eca140ed30a69cdb", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -10,6 +10,7 @@\n \n use ast;\n use ast::{MetaItem, Item, Expr};\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -24,7 +25,7 @@ pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                                 item: @Item,\n                                 push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n+    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "a0499a2cc1ef2e7998f758a6268aea408f603586", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -21,7 +22,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                             item: @Item,\n                             push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n+    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "28595fecd89e914340e5d322f0d855097d573126", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -182,6 +182,7 @@ use std::cell::RefCell;\n use ast;\n use ast::{P, EnumDef, Expr, Ident, Generics, StructDef};\n use ast_util;\n+use attr;\n use attr::AttrMetaMethods;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -427,6 +428,7 @@ impl<'a> TraitDef<'a> {\n                         self_ty_params.into_vec()), None);\n \n         let attr = cx.attribute(\n+            attr::mk_attr_id(),\n             self.span,\n             cx.meta_word(self.span,\n                          InternedString::new(\"automatically_derived\")));"}, {"sha": "8b368968f49018ec3ffbfbcd07b6da6cf9666890", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -10,6 +10,7 @@\n \n use ast;\n use ast::{MetaItem, Item, Expr, MutMutable};\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -37,7 +38,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n          Path::new(vec!(\"std\", \"hash\", \"sip\", \"SipState\")))\n     };\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n+    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n     let hash_trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "e3621b51c4d6ff2a4a4b781062dc24147f2a96ae", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -10,6 +10,7 @@\n \n use ast::{MetaItem, Item, Expr};\n use ast;\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -22,7 +23,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       item: @Item,\n                                       push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n+    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "c60cdab90993ba4313a69ac27c7abd72e30ceaf5", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use ast::{MetaItem, Item, Expr};\n+use attr;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n@@ -21,7 +22,7 @@ pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                             item: @Item,\n                             push: |@Item|) {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n+    let attrs = vec!(cx.attribute(attr::mk_attr_id(), span, inline));\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),"}, {"sha": "83118df5e65cbbc076d1f72c7e1bd9034daec0a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -972,6 +972,7 @@ mod test {\n     use super::*;\n     use ast;\n     use ast::{Attribute_, AttrOuter, MetaWord};\n+    use attr;\n     use codemap;\n     use codemap::Spanned;\n     use ext::base::{CrateLoader, MacroCrate};\n@@ -1103,6 +1104,7 @@ mod test {\n         Spanned {\n             span:codemap::DUMMY_SP,\n             node: Attribute_ {\n+                id: attr::mk_attr_id(),\n                 style: AttrOuter,\n                 value: @Spanned {\n                     node: MetaWord(token::intern_and_get_ident(s)),"}, {"sha": "c3b3c4eed572ca95cbd7eefad171c71ac679af1e", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -10,6 +10,7 @@\n \n use ast;\n use ast::P;\n+use attr;\n use codemap::{Span, respan};\n use ext::base::*;\n use ext::base;\n@@ -382,15 +383,17 @@ impl<'a, 'b> Context<'a, 'b> {\n                           .meta_word(self.fmtsp,\n                                      InternedString::new(\n                                          \"address_insignificant\"));\n-        let unnamed = self.ecx.attribute(self.fmtsp, unnamed);\n+        let unnamed = self.ecx.attribute(attr::mk_attr_id(), self.fmtsp,\n+                                         unnamed);\n \n         // Do not warn format string as dead code\n         let dead_code = self.ecx.meta_word(self.fmtsp,\n                                            InternedString::new(\"dead_code\"));\n         let allow_dead_code = self.ecx.meta_list(self.fmtsp,\n                                                  InternedString::new(\"allow\"),\n                                                  vec!(dead_code));\n-        let allow_dead_code = self.ecx.attribute(self.fmtsp, allow_dead_code);\n+        let allow_dead_code = self.ecx.attribute(attr::mk_attr_id(), self.fmtsp,\n+                                                 allow_dead_code);\n         return vec!(unnamed, allow_dead_code);\n     }\n "}, {"sha": "ae5cf550bb9bc0bd00e5de08ddd1a2767be17cf8", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -360,6 +360,7 @@ fn fold_attribute_<T: Folder>(at: Attribute, fld: &mut T) -> Attribute {\n     Spanned {\n         span: fld.new_span(at.span),\n         node: ast::Attribute_ {\n+            id: at.node.id,\n             style: at.node.style,\n             value: fold_meta_item_(at.node.value, fld),\n             is_sugared_doc: at.node.is_sugared_doc"}, {"sha": "e86dcb3d3114697113e74d9620be06614e7325e2", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c305473d3c60d5b4590ef8c715468f718a7aad8f/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=c305473d3c60d5b4590ef8c715468f718a7aad8f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use attr;\n use ast;\n use codemap::{spanned, Spanned, mk_sp, Span};\n use parse::common::*; //resolve bug?\n@@ -39,6 +40,7 @@ impl<'a> ParserAttr for Parser<'a> {\n               }\n               token::DOC_COMMENT(s) => {\n                 let attr = ::attr::mk_sugared_doc_attr(\n+                    attr::mk_attr_id(),\n                     self.id_to_interned_str(s),\n                     self.span.lo,\n                     self.span.hi\n@@ -101,6 +103,7 @@ impl<'a> ParserAttr for Parser<'a> {\n         return Spanned {\n             span: span,\n             node: ast::Attribute_ {\n+                id: attr::mk_attr_id(),\n                 style: style,\n                 value: value,\n                 is_sugared_doc: false\n@@ -132,7 +135,10 @@ impl<'a> ParserAttr for Parser<'a> {\n                     // we need to get the position of this token before we bump.\n                     let Span { lo, hi, .. } = self.span;\n                     self.bump();\n-                    ::attr::mk_sugared_doc_attr(self.id_to_interned_str(s), lo, hi)\n+                    ::attr::mk_sugared_doc_attr(attr::mk_attr_id(),\n+                                                self.id_to_interned_str(s),\n+                                                lo,\n+                                                hi)\n                 }\n                 _ => {\n                     break;"}]}