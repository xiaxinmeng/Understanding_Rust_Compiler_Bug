{"sha": "94169ee504bf1a5e59530c1ab1f5f5550ae45914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MTY5ZWU1MDRiZjFhNWU1OTUzMGMxYWIxZjVmNTU1MGFlNDU5MTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:07:02Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:54:21Z"}, "message": "ItemTree: Use more boxed slices", "tree": {"sha": "2855ba8d1448779ae0e8079eac0add983c19e8b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2855ba8d1448779ae0e8079eac0add983c19e8b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94169ee504bf1a5e59530c1ab1f5f5550ae45914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94169ee504bf1a5e59530c1ab1f5f5550ae45914", "html_url": "https://github.com/rust-lang/rust/commit/94169ee504bf1a5e59530c1ab1f5f5550ae45914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94169ee504bf1a5e59530c1ab1f5f5550ae45914/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abdba92334f800d236c65e543377f75327f7307a", "url": "https://api.github.com/repos/rust-lang/rust/commits/abdba92334f800d236c65e543377f75327f7307a", "html_url": "https://github.com/rust-lang/rust/commit/abdba92334f800d236c65e543377f75327f7307a"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "f9e5701db2b37943f66f419d0f752d5823c4b0cb", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=94169ee504bf1a5e59530c1ab1f5f5550ae45914", "patch": "@@ -38,7 +38,7 @@ impl FunctionData {\n \n         Arc::new(FunctionData {\n             name: func.name.clone(),\n-            params: func.params.clone(),\n+            params: func.params.to_vec(),\n             ret_type: func.ret_type.clone(),\n             attrs: item_tree.attrs(loc.id.value.into()).clone(),\n             has_self_param: func.has_self_param,\n@@ -70,7 +70,7 @@ impl TypeAliasData {\n             name: typ.name.clone(),\n             type_ref: typ.type_ref.clone(),\n             visibility: item_tree[typ.visibility].clone(),\n-            bounds: typ.bounds.clone(),\n+            bounds: typ.bounds.to_vec(),\n         })\n     }\n }"}, {"sha": "5155b611118d390d72f4c6592e70df63c111ae39", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=94169ee504bf1a5e59530c1ab1f5f5550ae45914", "patch": "@@ -438,7 +438,7 @@ pub struct Function {\n     pub generic_params: GenericParamsId,\n     pub has_self_param: bool,\n     pub is_unsafe: bool,\n-    pub params: Vec<TypeRef>,\n+    pub params: Box<[TypeRef]>,\n     pub ret_type: TypeRef,\n     pub ast_id: FileAstId<ast::FnDef>,\n }\n@@ -505,7 +505,7 @@ pub struct Trait {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub auto: bool,\n-    pub items: Vec<AssocItem>,\n+    pub items: Box<[AssocItem]>,\n     pub ast_id: FileAstId<ast::TraitDef>,\n }\n \n@@ -515,7 +515,7 @@ pub struct Impl {\n     pub target_trait: Option<TypeRef>,\n     pub target_type: TypeRef,\n     pub is_negative: bool,\n-    pub items: Vec<AssocItem>,\n+    pub items: Box<[AssocItem]>,\n     pub ast_id: FileAstId<ast::ImplDef>,\n }\n \n@@ -524,7 +524,7 @@ pub struct TypeAlias {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n     /// Bounds on the type alias itself. Only valid in trait declarations, eg. `type Assoc: Copy;`.\n-    pub bounds: Vec<TypeBound>,\n+    pub bounds: Box<[TypeBound]>,\n     pub generic_params: GenericParamsId,\n     pub type_ref: Option<TypeRef>,\n     pub ast_id: FileAstId<ast::TypeAliasDef>,\n@@ -541,7 +541,7 @@ pub struct Mod {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum ModKind {\n     /// `mod m { ... }`\n-    Inline { items: Vec<ModItem> },\n+    Inline { items: Box<[ModItem]> },\n \n     /// `mod m;`\n     Outline {},"}, {"sha": "6e31266a2c6eed95fbbb86d958134bdf7f5bb1d1", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=94169ee504bf1a5e59530c1ab1f5f5550ae45914", "patch": "@@ -325,7 +325,7 @@ impl Ctx {\n             generic_params: GenericParamsId::EMPTY,\n             has_self_param,\n             is_unsafe: func.unsafe_token().is_some(),\n-            params,\n+            params: params.into_boxed_slice(),\n             ret_type,\n             ast_id,\n         };\n@@ -344,7 +344,14 @@ impl Ctx {\n         let bounds = self.lower_type_bounds(type_alias);\n         let generic_params = self.lower_generic_params(GenericsOwner::TypeAlias, type_alias);\n         let ast_id = self.source_ast_id_map.ast_id(type_alias);\n-        let res = TypeAlias { name, visibility, bounds, generic_params, type_ref, ast_id };\n+        let res = TypeAlias {\n+            name,\n+            visibility,\n+            bounds: bounds.into_boxed_slice(),\n+            generic_params,\n+            type_ref,\n+            ast_id,\n+        };\n         Some(id(self.data().type_aliases.alloc(res)))\n     }\n \n@@ -384,7 +391,7 @@ impl Ctx {\n                     })\n                     .unwrap_or_else(|| {\n                         mark::hit!(name_res_works_for_broken_modules);\n-                        Vec::new()\n+                        Box::new([]) as Box<[_]>\n                     }),\n             }\n         };\n@@ -552,7 +559,7 @@ impl Ctx {\n             GenericsOwner::Function(func) => {\n                 generics.fill(&self.body_ctx, sm, node);\n                 // lower `impl Trait` in arguments\n-                for param in &func.params {\n+                for param in &*func.params {\n                     generics.fill_implicit_impl_trait_args(param);\n                 }\n             }"}, {"sha": "cd4c8a19965b8eeae11949e927da1001dd7e3a20", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94169ee504bf1a5e59530c1ab1f5f5550ae45914/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=94169ee504bf1a5e59530c1ab1f5f5550ae45914", "patch": "@@ -31,7 +31,7 @@ fn test_inner_items(ra_fixture: &str) {\n             ModItem::TypeAlias(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n             ModItem::Mod(it) => {\n                 if let ModKind::Inline { items } = &tree[it].kind {\n-                    worklist.extend(items);\n+                    worklist.extend(&**items);\n                 }\n                 tree.source(&db, InFile::new(file_id, it)).into()\n             }\n@@ -125,14 +125,14 @@ fn fmt_mod_item(out: &mut String, tree: &ItemTree, item: ModItem) {\n         }\n         ModItem::Trait(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n-            for item in &tree[it].items {\n+            for item in &*tree[it].items {\n                 fmt_mod_item(&mut children, tree, ModItem::from(*item));\n                 format_to!(children, \"\\n\");\n             }\n         }\n         ModItem::Impl(it) => {\n             format_to!(out, \"{:?}\", tree[it]);\n-            for item in &tree[it].items {\n+            for item in &*tree[it].items {\n                 fmt_mod_item(&mut children, tree, ModItem::from(*item));\n                 format_to!(children, \"\\n\");\n             }\n@@ -144,7 +144,7 @@ fn fmt_mod_item(out: &mut String, tree: &ItemTree, item: ModItem) {\n             format_to!(out, \"{:?}\", tree[it]);\n             match &tree[it].kind {\n                 ModKind::Inline { items } => {\n-                    for item in items {\n+                    for item in &**items {\n                         fmt_mod_item(&mut children, tree, *item);\n                         format_to!(children, \"\\n\");\n                     }"}]}