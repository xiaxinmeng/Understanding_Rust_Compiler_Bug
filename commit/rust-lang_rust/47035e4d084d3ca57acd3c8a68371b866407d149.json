{"sha": "47035e4d084d3ca57acd3c8a68371b866407d149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MDM1ZTRkMDg0ZDNjYTU3YWNkM2M4YTY4MzcxYjg2NjQwN2QxNDk=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-10T03:28:20Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-10T03:28:20Z"}, "message": "Use FxHashMap", "tree": {"sha": "17edda5cba59e79ae0929e261f707d279a7cca52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17edda5cba59e79ae0929e261f707d279a7cca52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47035e4d084d3ca57acd3c8a68371b866407d149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47035e4d084d3ca57acd3c8a68371b866407d149", "html_url": "https://github.com/rust-lang/rust/commit/47035e4d084d3ca57acd3c8a68371b866407d149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47035e4d084d3ca57acd3c8a68371b866407d149/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "html_url": "https://github.com/rust-lang/rust/commit/0a3c6bb887dcd06730b0fe635d1c40067bf0e852"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "1c06690be3c6759f231e3ecfd528ff7a601251dd", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=47035e4d084d3ca57acd3c8a68371b866407d149", "patch": "@@ -85,7 +85,7 @@ pub struct RegionInferenceContext<'tcx> {\n         FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n \n     /// Map universe indexes to information on why we created it.\n-    universe_causes: IndexVec<ty::UniverseIndex, UniverseInfo<'tcx>>,\n+    universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n     /// Contains the minimum universe of any variable within the same\n     /// SCC. We will ensure that no SCC contains values that are not\n@@ -256,7 +256,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             Location,\n             FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n         >,\n-        universe_causes: IndexVec<ty::UniverseIndex, UniverseInfo<'tcx>>,\n+        universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n         type_tests: Vec<TypeTest<'tcx>>,\n         liveness_constraints: LivenessValues<RegionVid>,\n         elements: &Rc<RegionValueElements>,\n@@ -2149,7 +2149,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     crate fn universe_info(&self, universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {\n-        self.universe_causes[universe].clone()\n+        self.universe_causes[&universe].clone()\n     }\n }\n "}, {"sha": "18070164e82195f7430c297fe9926b07f86f5f15", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=47035e4d084d3ca57acd3c8a68371b866407d149", "patch": "@@ -50,9 +50,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 None => UniverseInfo::other(),\n             };\n             for u in old_universe..universe {\n-                let info_universe =\n-                    self.borrowck_context.constraints.universe_causes.push(universe_info.clone());\n-                assert_eq!(u.as_u32() + 1, info_universe.as_u32());\n+                self.borrowck_context\n+                    .constraints\n+                    .universe_causes\n+                    .insert(u + 1, universe_info.clone());\n             }\n         }\n \n@@ -70,9 +71,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let (instantiated, _) =\n             self.infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);\n \n-        for _ in 0..canonical.max_universe.as_u32() {\n+        for u in 0..canonical.max_universe.as_u32() {\n             let info = UniverseInfo::other();\n-            self.borrowck_context.constraints.universe_causes.push(info);\n+            self.borrowck_context\n+                .constraints\n+                .universe_causes\n+                .insert(ty::UniverseIndex::from_u32(u), info);\n         }\n \n         instantiated"}, {"sha": "46d30a188edb903ecfd6b2b5b235ef4f155d38dc", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=47035e4d084d3ca57acd3c8a68371b866407d149", "patch": "@@ -194,6 +194,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     b\n                 }\n             };\n+            // Note: if we have to introduce new placeholders during normalization above, then we won't have\n+            // added those universes to the universe info, which we would want in `relate_tys`.\n             if let Err(terr) =\n                 self.eq_types(a, b, Locations::All(span), ConstraintCategory::BoringNoLocation)\n             {"}, {"sha": "3e757827a5e6cff52c5d922973c634ac4dade462", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=47035e4d084d3ca57acd3c8a68371b866407d149", "patch": "@@ -136,6 +136,8 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     upvars: &[Upvar<'tcx>],\n ) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n+    let mut universe_causes = FxHashMap::default();\n+    universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());\n     let mut constraints = MirTypeckRegionConstraints {\n         placeholder_indices: PlaceholderIndices::default(),\n         placeholder_index_to_region: IndexVec::default(),\n@@ -144,7 +146,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         member_constraints: MemberConstraintSet::default(),\n         closure_bounds_mapping: Default::default(),\n         type_tests: Vec::default(),\n-        universe_causes: IndexVec::from_elem_n(UniverseInfo::other(), 1),\n+        universe_causes,\n     };\n \n     let CreateResult {\n@@ -159,9 +161,9 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &mut constraints,\n     );\n \n-    for _ in ty::UniverseIndex::ROOT..infcx.universe() {\n+    for u in ty::UniverseIndex::ROOT..infcx.universe() {\n         let info = UniverseInfo::other();\n-        constraints.universe_causes.push(info);\n+        constraints.universe_causes.insert(u, info);\n     }\n \n     let mut borrowck_context = BorrowCheckContext {\n@@ -924,7 +926,7 @@ crate struct MirTypeckRegionConstraints<'tcx> {\n     crate closure_bounds_mapping:\n         FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n \n-    crate universe_causes: IndexVec<ty::UniverseIndex, UniverseInfo<'tcx>>,\n+    crate universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n     crate type_tests: Vec<TypeTest<'tcx>>,\n }"}, {"sha": "de86d39cc3722e41b3ed67068269598d3da7220e", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47035e4d084d3ca57acd3c8a68371b866407d149/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=47035e4d084d3ca57acd3c8a68371b866407d149", "patch": "@@ -81,14 +81,10 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n \n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n         let universe = self.infcx.create_next_universe();\n-        // FIXME: If we relate tys after normalizing with late-bound regions, there will\n-        // be extra universes. A proper solution would be to somehow track those universes\n-        // during projection, but here we just treat those as \"other\"\n         self.borrowck_context\n             .constraints\n             .universe_causes\n-            .ensure_contains_elem(universe, || UniverseInfo::other());\n-        self.borrowck_context.constraints.universe_causes[universe] = self.universe_info.clone();\n+            .insert(universe, self.universe_info.clone());\n         universe\n     }\n "}]}