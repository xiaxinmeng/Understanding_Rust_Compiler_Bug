{"sha": "096670ca41a2aada11722acf4d0ab35a422448f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NjY3MGNhNDFhMmFhZGExMTcyMmFjZjRkMGFiMzVhNDIyNDQ4ZjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-22T20:04:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:02:56Z"}, "message": "Ignore various entire test modules on emscripten", "tree": {"sha": "fe992314b50cc45903dbb3760ee41ced71ad5d27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe992314b50cc45903dbb3760ee41ced71ad5d27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/096670ca41a2aada11722acf4d0ab35a422448f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/096670ca41a2aada11722acf4d0ab35a422448f6", "html_url": "https://github.com/rust-lang/rust/commit/096670ca41a2aada11722acf4d0ab35a422448f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/096670ca41a2aada11722acf4d0ab35a422448f6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525a798ca6513a204de8bd434bf260d79cbdfc9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/525a798ca6513a204de8bd434bf260d79cbdfc9f", "html_url": "https://github.com/rust-lang/rust/commit/525a798ca6513a204de8bd434bf260d79cbdfc9f"}], "stats": {"total": 136, "additions": 11, "deletions": 125}, "files": [{"sha": "2f2969b110db17a7687b81802ce6409013526277", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -1686,7 +1686,7 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use io::prelude::*;\n \n@@ -1745,7 +1745,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_io_smoke_test() {\n         let message = \"it's alright. have a good time\";\n         let tmpdir = tmpdir();\n@@ -1767,7 +1766,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn invalid_path_raises() {\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_that_does_not_exist.txt\");\n@@ -1782,7 +1780,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_iounlinking_invalid_path_should_raise_condition() {\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_another_file_that_does_not_exist.txt\");\n@@ -1798,7 +1795,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_io_non_positional_read() {\n         let message: &str = \"ten-four\";\n         let mut read_mem = [0; 8];\n@@ -1825,7 +1821,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_io_seek_and_tell_smoke_test() {\n         let message = \"ten-four\";\n         let mut read_mem = [0; 4];\n@@ -1853,7 +1848,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_io_seek_and_write() {\n         let initial_msg =   \"food-is-yummy\";\n         let overwrite_msg =    \"-the-bar!!\";\n@@ -1878,7 +1872,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_io_seek_shakedown() {\n         //                   01234567890123\n         let initial_msg =   \"qwer-asdf-zxcv\";\n@@ -1911,7 +1904,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_stat_is_correct_on_is_file() {\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_stat_correct_on_is_file.txt\");\n@@ -1933,7 +1925,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_stat_is_correct_on_is_dir() {\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_stat_correct_on_is_dir\");\n@@ -1946,7 +1937,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_fileinfo_false_when_checking_is_file_on_a_directory() {\n         let tmpdir = tmpdir();\n         let dir = &tmpdir.join(\"fileinfo_false_on_dir\");\n@@ -1956,7 +1946,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_fileinfo_check_exists_before_and_after_file_creation() {\n         let tmpdir = tmpdir();\n         let file = &tmpdir.join(\"fileinfo_check_exists_b_and_a.txt\");\n@@ -1967,7 +1956,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_directoryinfo_check_exists_before_and_after_mkdir() {\n         let tmpdir = tmpdir();\n         let dir = &tmpdir.join(\"before_and_after_dir\");\n@@ -1980,7 +1968,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_test_directoryinfo_readdir() {\n         let tmpdir = tmpdir();\n         let dir = &tmpdir.join(\"di_readdir\");\n@@ -2010,7 +1997,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_create_new_already_exists_error() {\n         let tmpdir = tmpdir();\n         let file = &tmpdir.join(\"file_create_new_error_exists\");\n@@ -2020,7 +2006,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn mkdir_path_already_exists_error() {\n         let tmpdir = tmpdir();\n         let dir = &tmpdir.join(\"mkdir_error_twice\");\n@@ -2030,7 +2015,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn recursive_mkdir() {\n         let tmpdir = tmpdir();\n         let dir = tmpdir.join(\"d1/d2\");\n@@ -2039,7 +2023,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn recursive_mkdir_failure() {\n         let tmpdir = tmpdir();\n         let dir = tmpdir.join(\"d1\");\n@@ -2054,13 +2037,11 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn recursive_mkdir_slash() {\n         check!(fs::create_dir_all(&Path::new(\"/\")));\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn recursive_rmdir() {\n         let tmpdir = tmpdir();\n         let d1 = tmpdir.join(\"d1\");\n@@ -2080,7 +2061,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn recursive_rmdir_of_symlink() {\n         // test we do not recursively delete a symlink but only dirs.\n         let tmpdir = tmpdir();\n@@ -2114,7 +2094,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn unicode_path_is_dir() {\n         assert!(Path::new(\".\").is_dir());\n         assert!(!Path::new(\"test/stdtest/fs.rs\").is_dir());\n@@ -2134,7 +2113,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn unicode_path_exists() {\n         assert!(Path::new(\".\").exists());\n         assert!(!Path::new(\"test/nonexistent-bogus-path\").exists());\n@@ -2148,7 +2126,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn copy_file_does_not_exist() {\n         let from = Path::new(\"test/nonexistent-bogus-path\");\n         let to = Path::new(\"test/other-bogus-path\");\n@@ -2163,7 +2140,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn copy_src_does_not_exist() {\n         let tmpdir = tmpdir();\n         let from = Path::new(\"test/nonexistent-bogus-path\");\n@@ -2177,7 +2153,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn copy_file_ok() {\n         let tmpdir = tmpdir();\n         let input = tmpdir.join(\"in.txt\");\n@@ -2194,7 +2169,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn copy_file_dst_dir() {\n         let tmpdir = tmpdir();\n         let out = tmpdir.join(\"out\");\n@@ -2206,7 +2180,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn copy_file_dst_exists() {\n         let tmpdir = tmpdir();\n         let input = tmpdir.join(\"in\");\n@@ -2222,7 +2195,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn copy_file_src_dir() {\n         let tmpdir = tmpdir();\n         let out = tmpdir.join(\"out\");\n@@ -2234,7 +2206,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn copy_file_preserves_perm_bits() {\n         let tmpdir = tmpdir();\n         let input = tmpdir.join(\"in.txt\");\n@@ -2263,7 +2234,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn symlinks_work() {\n         let tmpdir = tmpdir();\n         if !got_symlink_permission(&tmpdir) { return };\n@@ -2282,7 +2252,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn symlink_noexist() {\n         // Symlinks can point to things that don't exist\n         let tmpdir = tmpdir();\n@@ -2296,7 +2265,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn read_link() {\n         if cfg!(windows) {\n             // directory symlink\n@@ -2317,7 +2285,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn readlink_not_symlink() {\n         let tmpdir = tmpdir();\n         match fs::read_link(tmpdir.path()) {\n@@ -2327,7 +2294,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn links_work() {\n         let tmpdir = tmpdir();\n         let input = tmpdir.join(\"in.txt\");\n@@ -2356,7 +2322,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn chmod_works() {\n         let tmpdir = tmpdir();\n         let file = tmpdir.join(\"in.txt\");\n@@ -2380,7 +2345,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn sync_doesnt_kill_anything() {\n         let tmpdir = tmpdir();\n         let path = tmpdir.join(\"in.txt\");\n@@ -2394,7 +2358,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn truncate_works() {\n         let tmpdir = tmpdir();\n         let path = tmpdir.join(\"in.txt\");\n@@ -2429,7 +2392,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn open_flavors() {\n         use fs::OpenOptions as OO;\n         fn c<T: Clone>(t: &T) -> T { t.clone() }\n@@ -2549,7 +2511,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn binary_file() {\n         let mut bytes = [0; 1024];\n         StdRng::new().unwrap().fill_bytes(&mut bytes);\n@@ -2563,7 +2524,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn file_try_clone() {\n         let tmpdir = tmpdir();\n \n@@ -2586,7 +2546,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     #[cfg(not(windows))]\n     fn unlink_readonly() {\n         let tmpdir = tmpdir();\n@@ -2599,15 +2558,13 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn mkdir_trailing_slash() {\n         let tmpdir = tmpdir();\n         let path = tmpdir.join(\"file\");\n         check!(fs::create_dir_all(&path.join(\"a/\")));\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn canonicalize_works_simple() {\n         let tmpdir = tmpdir();\n         let tmpdir = fs::canonicalize(tmpdir.path()).unwrap();\n@@ -2617,7 +2574,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn realpath_works() {\n         let tmpdir = tmpdir();\n         if !got_symlink_permission(&tmpdir) { return };\n@@ -2643,7 +2599,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn realpath_works_tricky() {\n         let tmpdir = tmpdir();\n         if !got_symlink_permission(&tmpdir) { return };\n@@ -2673,7 +2628,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn dir_entry_methods() {\n         let tmpdir = tmpdir();\n \n@@ -2708,14 +2662,12 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn read_dir_not_found() {\n         let res = fs::read_dir(\"/path/that/does/not/exist\");\n         assert_eq!(res.err().unwrap().kind(), ErrorKind::NotFound);\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn create_dir_all_with_junctions() {\n         let tmpdir = tmpdir();\n         let target = tmpdir.join(\"target\");\n@@ -2743,7 +2695,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn metadata_access_times() {\n         let tmpdir = tmpdir();\n "}, {"sha": "58daa7dbf8dc4d843b9b5e49f2da0f860d0e85f8", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -533,7 +533,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn to_socket_addr_str_u16() {\n         let a = sa4(Ipv4Addr::new(77, 88, 21, 11), 24352);\n         assert_eq!(Ok(vec![a]), tsa((\"77.88.21.11\", 24352)));\n@@ -546,7 +545,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn to_socket_addr_str() {\n         let a = sa4(Ipv4Addr::new(77, 88, 21, 11), 24352);\n         assert_eq!(Ok(vec![a]), tsa(\"77.88.21.11:24352\"));\n@@ -561,7 +559,6 @@ mod tests {\n     // FIXME: figure out why this fails on openbsd and bitrig and fix it\n     #[test]\n     #[cfg(not(any(windows, target_os = \"openbsd\", target_os = \"bitrig\")))]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn to_socket_addr_str_bad() {\n         assert!(tsa(\"1200::AB00:1234::2552:7777:1313:34300\").is_err());\n     }"}, {"sha": "8d80f942ff75cb9f50c29919c75d7beaf6a21466", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -146,7 +146,7 @@ impl<T> Drop for Queue<T> {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::mpsc::channel;\n     use super::{Queue, Data, Empty, Inconsistent};\n@@ -161,7 +161,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test() {\n         let nthreads = 8;\n         let nmsgs = 1000;"}, {"sha": "5858e4b6ddb1f2ab35312aaa4a5406baa84ca29c", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -231,7 +231,7 @@ impl<T> Drop for Queue<T> {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::Arc;\n     use super::Queue;\n@@ -305,7 +305,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn stress() {\n         unsafe {\n             stress_bound(0);"}, {"sha": "812724c7a167eaf13e61801d079dd421222c9315", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -352,7 +352,7 @@ pub fn guard_poison<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Fla\n     &guard.__lock.poison\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::mpsc::channel;\n     use sync::{Arc, Mutex, Condvar};\n@@ -375,7 +375,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn lots_and_lots() {\n         const J: u32 = 1000;\n         const K: u32 = 3;\n@@ -436,7 +435,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_into_inner_poison() {\n         let m = Arc::new(Mutex::new(NonCopy(10)));\n         let m2 = m.clone();\n@@ -460,7 +458,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_get_mut_poison() {\n         let m = Arc::new(Mutex::new(NonCopy(10)));\n         let m2 = m.clone();\n@@ -477,7 +474,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_mutex_arc_condvar() {\n         let packet = Packet(Arc::new((Mutex::new(false), Condvar::new())));\n         let packet2 = Packet(packet.0.clone());\n@@ -501,7 +497,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_arc_condvar_poison() {\n         let packet = Packet(Arc::new((Mutex::new(1), Condvar::new())));\n         let packet2 = Packet(packet.0.clone());\n@@ -531,7 +526,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_mutex_arc_poison() {\n         let arc = Arc::new(Mutex::new(1));\n         assert!(!arc.is_poisoned());\n@@ -545,7 +539,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_mutex_arc_nested() {\n         // Tests nested mutexes and access\n         // to underlying data.\n@@ -562,7 +555,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_mutex_arc_access_in_unwind() {\n         let arc = Arc::new(Mutex::new(1));\n         let arc2 = arc.clone();"}, {"sha": "ad9d0b375442200be9ecf0cf59fb04d64dcfdd44", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -367,7 +367,7 @@ impl OnceState {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use panic;\n     use sync::mpsc::channel;\n@@ -385,7 +385,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn stampede_once() {\n         static O: Once = Once::new();\n         static mut run: bool = false;\n@@ -448,7 +447,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn wait_for_force_to_finish() {\n         static O: Once = Once::new();\n "}, {"sha": "48ecae185f95c37e9e9a54a3e24c121587bb5fcc", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -380,7 +380,7 @@ impl<'a, T: ?Sized> Drop for RwLockWriteGuard<'a, T> {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     #![allow(deprecated)] // rand\n \n@@ -403,7 +403,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn frob() {\n         const N: usize = 10;\n         const M: usize = 1000;\n@@ -431,7 +430,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_rw_arc_poison_wr() {\n         let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n@@ -443,7 +441,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_rw_arc_poison_ww() {\n         let arc = Arc::new(RwLock::new(1));\n         assert!(!arc.is_poisoned());\n@@ -457,7 +454,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_rw_arc_no_poison_rr() {\n         let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n@@ -469,7 +465,6 @@ mod tests {\n         assert_eq!(*lock, 1);\n     }\n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_rw_arc_no_poison_rw() {\n         let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n@@ -482,7 +477,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_rw_arc() {\n         let arc = Arc::new(RwLock::new(0));\n         let arc2 = arc.clone();\n@@ -521,7 +515,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_rw_arc_access_in_unwind() {\n         let arc = Arc::new(RwLock::new(1));\n         let arc2 = arc.clone();\n@@ -594,7 +587,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_into_inner_poison() {\n         let m = Arc::new(RwLock::new(NonCopy(10)));\n         let m2 = m.clone();\n@@ -618,7 +610,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_get_mut_poison() {\n         let m = Arc::new(RwLock::new(NonCopy(10)));\n         let m2 = m.clone();"}, {"sha": "47cec4ef5c2762a7c6e2601e28f88c84bb728974", "filename": "src/libstd/sys/common/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -50,7 +50,7 @@ pub unsafe fn read_to_end_uninitialized(r: &mut Read, buf: &mut Vec<u8>) -> io::\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n pub mod test {\n     use path::{Path, PathBuf};\n     use env;"}, {"sha": "4d0407ccf6c8903bb20eee0059b492319a94d81f", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -156,7 +156,7 @@ impl<'a, T> Drop for ReentrantMutexGuard<'a, T> {\n }\n \n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n     use cell::RefCell;\n@@ -181,7 +181,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn is_mutex() {\n         let m = Arc::new(ReentrantMutex::new(RefCell::new(0)));\n         let m2 = m.clone();\n@@ -199,7 +198,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn trylock_works() {\n         let m = Arc::new(ReentrantMutex::new(()));\n         let m2 = m.clone();\n@@ -220,7 +218,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn poison_works() {\n         let m = Arc::new(ReentrantMutex::new(RefCell::new(0)));\n         let mc = m.clone();"}, {"sha": "40fe24cf10e281626d97a14e6da9f540bd3a5776", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -786,7 +786,7 @@ impl IntoRawFd for UnixDatagram {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod test {\n     use thread;\n     use io;\n@@ -806,7 +806,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn basic() {\n         let dir = tmpdir();\n         let socket_path = dir.path().join(\"sock\");\n@@ -835,7 +834,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn pair() {\n         let msg1 = b\"hello\";\n         let msg2 = b\"world!\";\n@@ -859,7 +857,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn try_clone() {\n         let dir = tmpdir();\n         let socket_path = dir.path().join(\"sock\");\n@@ -886,7 +883,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn iter() {\n         let dir = tmpdir();\n         let socket_path = dir.path().join(\"sock\");\n@@ -909,7 +905,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn long_path() {\n         let dir = tmpdir();\n         let socket_path = dir.path()\n@@ -935,7 +930,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn timeouts() {\n         let dir = tmpdir();\n         let socket_path = dir.path().join(\"sock\");\n@@ -963,7 +957,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_read_timeout() {\n         let dir = tmpdir();\n         let socket_path = dir.path().join(\"sock\");\n@@ -979,7 +972,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_read_with_timeout() {\n         let dir = tmpdir();\n         let socket_path = dir.path().join(\"sock\");\n@@ -1001,7 +993,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_unix_datagram() {\n         let dir = tmpdir();\n         let path1 = dir.path().join(\"sock1\");\n@@ -1018,7 +1009,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_unnamed_unix_datagram() {\n         let dir = tmpdir();\n         let path1 = dir.path().join(\"sock1\");\n@@ -1036,7 +1026,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_connect_unix_datagram() {\n         let dir = tmpdir();\n         let path1 = dir.path().join(\"sock1\");\n@@ -1063,7 +1052,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_unix_datagram_recv() {\n         let dir = tmpdir();\n         let path1 = dir.path().join(\"sock1\");\n@@ -1081,7 +1069,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn datagram_pair() {\n         let msg1 = b\"hello\";\n         let msg2 = b\"world!\";"}, {"sha": "a333a7d967d240fa11f757543fe50f068c529cad", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -524,7 +524,7 @@ pub mod os {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use sync::mpsc::{channel, Sender};\n     use cell::{Cell, UnsafeCell};\n@@ -541,7 +541,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn smoke_no_dtor() {\n         thread_local!(static FOO: Cell<i32> = Cell::new(1));\n \n@@ -564,7 +563,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn states() {\n         struct Foo;\n         impl Drop for Foo {\n@@ -588,7 +586,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn smoke_dtor() {\n         thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));\n \n@@ -603,7 +600,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn circular() {\n         struct S1;\n         struct S2;\n@@ -644,7 +640,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn self_referential() {\n         struct S1;\n         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));\n@@ -666,7 +661,6 @@ mod tests {\n     // test on OSX.\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn dtors_in_dtors_in_dtors() {\n         struct S1(Sender<()>);\n         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));"}, {"sha": "775dfababc680939491bc81ddd1dad0d393517b7", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096670ca41a2aada11722acf4d0ab35a422448f6/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=096670ca41a2aada11722acf4d0ab35a422448f6", "patch": "@@ -741,7 +741,7 @@ fn _assert_sync_and_send() {\n // Tests\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use any::Any;\n     use sync::mpsc::{channel, Sender};\n@@ -755,15 +755,13 @@ mod tests {\n     // !!! instead of exiting cleanly. This might wedge the buildbots.       !!!\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_unnamed_thread() {\n         thread::spawn(move|| {\n             assert!(thread::current().name().is_none());\n         }).join().ok().unwrap();\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_named_thread() {\n         Builder::new().name(\"ada lovelace\".to_string()).spawn(move|| {\n             assert!(thread::current().name().unwrap() == \"ada lovelace\".to_string());\n@@ -772,13 +770,11 @@ mod tests {\n \n     #[test]\n     #[should_panic]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_invalid_named_thread() {\n         let _ = Builder::new().name(\"ada l\\0velace\".to_string()).spawn(|| {});\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_run_basic() {\n         let (tx, rx) = channel();\n         thread::spawn(move|| {\n@@ -788,7 +784,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_join_panic() {\n         match thread::spawn(move|| {\n             panic!()\n@@ -799,7 +794,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_spawn_sched() {\n         let (tx, rx) = channel();\n \n@@ -819,7 +813,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_spawn_sched_childs_on_default_sched() {\n         let (tx, rx) = channel();\n \n@@ -848,15 +841,13 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_avoid_copying_the_body_spawn() {\n         avoid_copying_the_body(|v| {\n             thread::spawn(move || v());\n         });\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_avoid_copying_the_body_thread_spawn() {\n         avoid_copying_the_body(|f| {\n             thread::spawn(move|| {\n@@ -866,7 +857,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_avoid_copying_the_body_join() {\n         avoid_copying_the_body(|f| {\n             let _ = thread::spawn(move|| {\n@@ -876,7 +866,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_child_doesnt_ref_parent() {\n         // If the child refcounts the parent thread, this will stack overflow when\n         // climbing the thread tree to dereference each ancestor. (See #1789)\n@@ -894,13 +883,11 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_simple_newsched_spawn() {\n         thread::spawn(move || {});\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_try_panic_message_static_str() {\n         match thread::spawn(move|| {\n             panic!(\"static string\");\n@@ -915,7 +902,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_try_panic_message_owned_str() {\n         match thread::spawn(move|| {\n             panic!(\"owned string\".to_string());\n@@ -930,7 +916,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_try_panic_message_any() {\n         match thread::spawn(move|| {\n             panic!(box 413u16 as Box<Any + Send>);\n@@ -947,7 +932,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_try_panic_message_unit_struct() {\n         struct Juju;\n \n@@ -960,7 +944,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_park_timeout_unpark_before() {\n         for _ in 0..10 {\n             thread::current().unpark();\n@@ -969,15 +952,13 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_park_timeout_unpark_not_called() {\n         for _ in 0..10 {\n             thread::park_timeout(Duration::from_millis(10));\n         }\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_park_timeout_unpark_called_other_thread() {\n         for _ in 0..10 {\n             let th = thread::current();"}]}