{"sha": "c98f0cb3627fbdc2f1e56cfe1aad20a96730d208", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OGYwY2IzNjI3ZmJkYzJmMWU1NmNmZTFhYWQyMGE5NjczMGQyMDg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-17T23:34:53Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-18T01:53:23Z"}, "message": "vec: add an external iterator", "tree": {"sha": "d7100f411640949a07479f2ebba2a627f7b2593e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7100f411640949a07479f2ebba2a627f7b2593e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c98f0cb3627fbdc2f1e56cfe1aad20a96730d208", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c98f0cb3627fbdc2f1e56cfe1aad20a96730d208", "html_url": "https://github.com/rust-lang/rust/commit/c98f0cb3627fbdc2f1e56cfe1aad20a96730d208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c98f0cb3627fbdc2f1e56cfe1aad20a96730d208/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f5a87cdd79e5531b751749827d2e8a3d269c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f5a87cdd79e5531b751749827d2e8a3d269c9e", "html_url": "https://github.com/rust-lang/rust/commit/c2f5a87cdd79e5531b751749827d2e8a3d269c9e"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "0403ae64f0205cf5c0710319b32c8828cedda7c4", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c98f0cb3627fbdc2f1e56cfe1aad20a96730d208/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98f0cb3627fbdc2f1e56cfe1aad20a96730d208/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=c98f0cb3627fbdc2f1e56cfe1aad20a96730d208", "patch": "@@ -18,6 +18,10 @@ use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use iter::BaseIter;\n use iter;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+use iterator::Iterator;\n use kinds::Copy;\n use libc;\n use option::{None, Option, Some};\n@@ -1919,6 +1923,7 @@ impl<'self,T> ImmutableVector<T> for &'self [T] {\n #[cfg(stage3)]\n pub trait ImmutableVector<'self, T> {\n     fn slice(&self, start: uint, end: uint) -> &'self [T];\n+    fn iter(self) -> VecIterator<'self, T>;\n     fn head(&self) -> &'self T;\n     fn head_opt(&self) -> Option<&'self T>;\n     fn tail(&self) -> &'self [T];\n@@ -1949,6 +1954,15 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         slice(*self, start, end)\n     }\n \n+    #[inline]\n+    fn iter(self) -> VecIterator<'self, T> {\n+        unsafe {\n+            let p = vec::raw::to_ptr(self);\n+            VecIterator{ptr: p, end: p.offset(self.len()),\n+                        lifetime: cast::transmute(p)}\n+        }\n+    }\n+\n     /// Returns the first element of a vector, failing if the vector is empty.\n     #[inline]\n     fn head(&self) -> &'self T { head(*self) }\n@@ -2795,7 +2809,33 @@ impl<A:Clone> Clone for ~[A] {\n     }\n }\n \n-// ___________________________________________________________________________\n+// could be implemented with &[T] with .slice(), but this avoids bounds checks\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+pub struct VecIterator<'self, T> {\n+    priv ptr: *T,\n+    priv end: *T,\n+    priv lifetime: &'self T // FIXME: #5922\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+impl<'self, T> Iterator<&'self T> for VecIterator<'self, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self T> {\n+        unsafe {\n+            if self.ptr == self.end {\n+                None\n+            } else {\n+                let old = self.ptr;\n+                self.ptr = self.ptr.offset(1);\n+                Some(cast::transmute(old))\n+            }\n+        }\n+    }\n+}\n \n #[cfg(test)]\n mod tests {\n@@ -4421,6 +4461,19 @@ mod tests {\n         [1, 2, 3, 4, 5, 5, 5, 5].cmp(& &[1, 2, 3, 4, 5, 6]) == Less;\n         [2, 2].cmp(& &[1, 2, 3, 4]) == Greater;\n     }\n+\n+    #[test]\n+    fn test_iterator() {\n+        use iterator::*;\n+        let xs = [1, 2, 5, 10, 11];\n+        let ys = [1, 2, 5, 10, 11, 19];\n+        let mut it = xs.iter();\n+        let mut i = 0;\n+        for it.advance |&x| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+    }\n }\n \n // Local Variables:"}]}