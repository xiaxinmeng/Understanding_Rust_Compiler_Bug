{"sha": "9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYmNkMGJmMjliMDAyMjZkODNhMWJiOGI0OGVlOTg3MmNiNjc4NDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-26T22:31:35Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-26T23:03:59Z"}, "message": "More macro checks", "tree": {"sha": "94d1b666717ed19bf286f574dc99709871ddefc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94d1b666717ed19bf286f574dc99709871ddefc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "html_url": "https://github.com/rust-lang/rust/commit/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a1082d91659ebfa044d84ad06876bbdc4915d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1082d91659ebfa044d84ad06876bbdc4915d97", "html_url": "https://github.com/rust-lang/rust/commit/7a1082d91659ebfa044d84ad06876bbdc4915d97"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "bcdd527e407c9ae94ff5c834384c587d5b78f263", "filename": "src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "patch": "@@ -4,7 +4,7 @@ use syntax::codemap::Span;\n \n use consts::{constant, is_negative};\n use consts::Constant::ConstantInt;\n-use utils::{span_lint, snippet};\n+use utils::{span_lint, snippet, in_external_macro};\n \n declare_lint! { pub IDENTITY_OP, Warn,\n                 \"using identity operations, e.g. `x + 0` or `y / 1`\" }\n@@ -53,6 +53,7 @@ fn check(cx: &Context, e: &Expr, m: i8, span: Span, arg: Span) {\n                 1 => !is_negative(ty) && v == 1,\n                 _ => unreachable!(),\n             } {\n+                if in_external_macro(cx, e.span) {return;}\n                 span_lint(cx, IDENTITY_OP, span, &format!(\n                     \"the operation is ineffective. Consider reducing it to `{}`\",\n                    snippet(cx, arg, \"..\")));"}, {"sha": "1afb61e9b9e6ca23a8bbf0757e4601e41fcb5112", "filename": "src/matches.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "patch": "@@ -3,7 +3,8 @@ use syntax::ast;\n use syntax::ast::*;\n use std::borrow::Cow;\n \n-use utils::{snippet, snippet_block, span_lint, span_help_and_lint};\n+use utils::{snippet, snippet_block};\n+use utils::{span_lint, span_help_and_lint, in_external_macro};\n \n declare_lint!(pub SINGLE_MATCH, Warn,\n               \"a match statement with a single nontrivial arm (i.e, where the other arm \\\n@@ -36,6 +37,7 @@ impl LintPass for MatchPass {\n                 // finally, we don't want any content in the second arm (unit or empty block)\n                 is_unit_expr(&arms[1].body)\n             {\n+                if in_external_macro(cx, expr.span) {return;}\n                 let body_code = snippet_block(cx, arms[0].body.span, \"..\");\n                 let body_code = if let ExprBlock(_) = arms[0].body.node {\n                     body_code"}, {"sha": "29749b29435eb663696590cf07428bf75c14b1c9", "filename": "src/returns.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "patch": "@@ -3,7 +3,7 @@ use syntax::ast::*;\n use syntax::codemap::{Span, Spanned};\n use syntax::visit::FnKind;\n \n-use utils::{span_lint, snippet, match_path};\n+use utils::{span_lint, snippet, match_path, in_external_macro};\n \n declare_lint!(pub NEEDLESS_RETURN, Warn,\n               \"using a return statement like `return expr;` where an expression would suffice\");\n@@ -58,6 +58,7 @@ impl ReturnPass {\n     }\n \n     fn emit_return_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n+        if in_external_macro(cx, spans.1) {return;}\n         span_lint(cx, NEEDLESS_RETURN, spans.0, &format!(\n             \"unneeded return statement. Consider using `{}` \\\n              without the return and trailing semicolon\",\n@@ -84,6 +85,7 @@ impl ReturnPass {\n     }\n \n     fn emit_let_lint(&mut self, cx: &Context, lint_span: Span, note_span: Span) {\n+        if in_external_macro(cx, note_span) {return;}\n         span_lint(cx, LET_AND_RETURN, lint_span,\n                   \"returning the result of a let binding. \\\n                    Consider returning the expression directly.\");"}, {"sha": "12f31ae89ddbb66fa0242f92aea5c1d6ae21ee37", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "patch": "@@ -5,9 +5,8 @@ use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::Span;\n use syntax::visit::{FnKind, Visitor, walk_ty};\n use rustc::middle::ty;\n-use syntax::codemap::ExpnInfo;\n \n-use utils::{in_macro, match_type, snippet, span_lint, span_help_and_lint, in_external_macro};\n+use utils::{match_type, snippet, span_lint, span_help_and_lint, in_external_macro};\n use utils::{LL_PATH, VEC_PATH};\n \n /// Handles all the linting of funky types\n@@ -55,11 +54,11 @@ declare_lint!(pub LET_UNIT_VALUE, Warn,\n               \"creating a let binding to a value of unit type, which usually can't be used afterwards\");\n \n \n-fn check_let_unit(cx: &Context, decl: &Decl, info: Option<&ExpnInfo>) {\n-    if in_macro(cx, info) { return; }\n+fn check_let_unit(cx: &Context, decl: &Decl) {\n     if let DeclLocal(ref local) = decl.node {\n         let bindtype = &cx.tcx.pat_ty(&local.pat).sty;\n         if *bindtype == ty::TyTuple(vec![]) {\n+            if in_external_macro(cx, decl.span) { return; }\n             span_lint(cx, LET_UNIT_VALUE, decl.span, &format!(\n                 \"this let-binding has unit value. Consider omitting `let {} =`\",\n                 snippet(cx, local.pat.span, \"..\")));\n@@ -73,9 +72,7 @@ impl LintPass for LetPass {\n     }\n \n     fn check_decl(&mut self, cx: &Context, decl: &Decl) {\n-        cx.sess().codemap().with_expn_info(\n-            decl.span.expn_id,\n-            |info| check_let_unit(cx, decl, info));\n+        check_let_unit(cx, decl)\n     }\n }\n "}, {"sha": "ece1eee9050bc5eb008dab1dc1ea5afb6b40233b", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ebcd0bf29b00226d83a1bb8b48ee9872cb67848/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=9ebcd0bf29b00226d83a1bb8b48ee9872cb67848", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use syntax::ast::*;\n-use syntax::codemap::{ExpnInfo, Span};\n+use syntax::codemap::{ExpnInfo, Span, ExpnFormat};\n use rustc::ast_map::Node::NodeExpr;\n use rustc::middle::def_id::DefId;\n use rustc::middle::ty;\n@@ -18,6 +18,14 @@ pub const LL_PATH:     [&'static str; 3] = [\"collections\", \"linked_list\", \"Linke\n pub fn in_macro(cx: &Context, opt_info: Option<&ExpnInfo>) -> bool {\n     // no ExpnInfo = no macro\n     opt_info.map_or(false, |info| {\n+        if info.callee.format == ExpnFormat::CompilerExpansion {\n+            if info.callee.name == \"closure expansion\" {\n+                return false;\n+            }\n+        } else if info.callee.format == ExpnFormat::MacroAttribute {\n+            // these are all plugins\n+            return true;\n+        }\n         // no span for the callee = external macro\n         info.callee.span.map_or(true, |span| {\n             // no snippet = external macro or compiler-builtin expansion\n@@ -31,6 +39,7 @@ pub fn in_macro(cx: &Context, opt_info: Option<&ExpnInfo>) -> bool {\n }\n \n /// invokes in_macro with the expansion info of the given span\n+/// slightly heavy, try to use this after other checks have already happened\n pub fn in_external_macro(cx: &Context, span: Span) -> bool {\n     cx.sess().codemap().with_expn_info(span.expn_id,\n             |info| in_macro(cx, info))"}]}