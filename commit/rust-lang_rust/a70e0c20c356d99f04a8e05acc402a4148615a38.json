{"sha": "a70e0c20c356d99f04a8e05acc402a4148615a38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MGUwYzIwYzM1NmQ5OWYwNGE4ZTA1YWNjNDAyYTQxNDg2MTVhMzg=", "commit": {"author": {"name": "Hameer Abbasi", "email": "einstein.edison@gmail.com", "date": "2020-11-04T15:32:18Z"}, "committer": {"name": "Hameer Abbasi", "email": "einstein.edison@gmail.com", "date": "2020-11-04T16:04:32Z"}, "message": "Fix issue 78654.", "tree": {"sha": "8b26f527d669fa9704497ae183928daef563c25c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b26f527d669fa9704497ae183928daef563c25c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70e0c20c356d99f04a8e05acc402a4148615a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70e0c20c356d99f04a8e05acc402a4148615a38", "html_url": "https://github.com/rust-lang/rust/commit/a70e0c20c356d99f04a8e05acc402a4148615a38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70e0c20c356d99f04a8e05acc402a4148615a38/comments", "author": {"login": "hameerabbasi", "id": 2190658, "node_id": "MDQ6VXNlcjIxOTA2NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2190658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hameerabbasi", "html_url": "https://github.com/hameerabbasi", "followers_url": "https://api.github.com/users/hameerabbasi/followers", "following_url": "https://api.github.com/users/hameerabbasi/following{/other_user}", "gists_url": "https://api.github.com/users/hameerabbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hameerabbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hameerabbasi/subscriptions", "organizations_url": "https://api.github.com/users/hameerabbasi/orgs", "repos_url": "https://api.github.com/users/hameerabbasi/repos", "events_url": "https://api.github.com/users/hameerabbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/hameerabbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hameerabbasi", "id": 2190658, "node_id": "MDQ6VXNlcjIxOTA2NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2190658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hameerabbasi", "html_url": "https://github.com/hameerabbasi", "followers_url": "https://api.github.com/users/hameerabbasi/followers", "following_url": "https://api.github.com/users/hameerabbasi/following{/other_user}", "gists_url": "https://api.github.com/users/hameerabbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hameerabbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hameerabbasi/subscriptions", "organizations_url": "https://api.github.com/users/hameerabbasi/orgs", "repos_url": "https://api.github.com/users/hameerabbasi/repos", "events_url": "https://api.github.com/users/hameerabbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/hameerabbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601c13c6fda6a7db423c974797e36c79a9a0c0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/601c13c6fda6a7db423c974797e36c79a9a0c0ac", "html_url": "https://github.com/rust-lang/rust/commit/601c13c6fda6a7db423c974797e36c79a9a0c0ac"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "2ba05071c05000f5e046c10014c1fc356dd66a6f", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a70e0c20c356d99f04a8e05acc402a4148615a38/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70e0c20c356d99f04a8e05acc402a4148615a38/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=a70e0c20c356d99f04a8e05acc402a4148615a38", "patch": "@@ -605,6 +605,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ret_ty = self.inh.infcx.shallow_resolve(ret_ty);\n         let ret_vid = match *ret_ty.kind() {\n             ty::Infer(ty::TyVar(ret_vid)) => ret_vid,\n+            ty::Error(_) => return None,\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n                 \"async fn generator return type not an inference variable\""}, {"sha": "ff0260523db3b6665fdf283bd39c2e1b347ff646", "filename": "src/test/ui/async-await/issues/issue-78654.full.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a70e0c20c356d99f04a8e05acc402a4148615a38/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a70e0c20c356d99f04a8e05acc402a4148615a38/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr?ref=a70e0c20c356d99f04a8e05acc402a4148615a38", "patch": "@@ -0,0 +1,19 @@\n+error[E0573]: expected type, found built-in attribute `feature`\n+  --> $DIR/issue-78654.rs:10:15\n+   |\n+LL | impl<const H: feature> Foo {\n+   |               ^^^^^^^ not a type\n+\n+error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-78654.rs:10:12\n+   |\n+LL | impl<const H: feature> Foo {\n+   |            ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0207, E0573.\n+For more information about an error, try `rustc --explain E0207`."}, {"sha": "ff0260523db3b6665fdf283bd39c2e1b347ff646", "filename": "src/test/ui/async-await/issues/issue-78654.min.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a70e0c20c356d99f04a8e05acc402a4148615a38/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a70e0c20c356d99f04a8e05acc402a4148615a38/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr?ref=a70e0c20c356d99f04a8e05acc402a4148615a38", "patch": "@@ -0,0 +1,19 @@\n+error[E0573]: expected type, found built-in attribute `feature`\n+  --> $DIR/issue-78654.rs:10:15\n+   |\n+LL | impl<const H: feature> Foo {\n+   |               ^^^^^^^ not a type\n+\n+error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-78654.rs:10:12\n+   |\n+LL | impl<const H: feature> Foo {\n+   |            ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0207, E0573.\n+For more information about an error, try `rustc --explain E0207`."}, {"sha": "b57ed35f8e369c69b2cfe491bf8ad5801c26fe70", "filename": "src/test/ui/async-await/issues/issue-78654.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a70e0c20c356d99f04a8e05acc402a4148615a38/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70e0c20c356d99f04a8e05acc402a4148615a38/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs?ref=a70e0c20c356d99f04a8e05acc402a4148615a38", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct Foo;\n+\n+impl<const H: feature> Foo {\n+//~^ ERROR: expected type, found built-in attribute `feature`\n+//~^^ ERROR: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n+    async fn biz() {}\n+}\n+\n+fn main() {}"}]}