{"sha": "3e947ef031ae05c4ed56bbd6b3380bef644923f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTQ3ZWYwMzFhZTA1YzRlZDU2YmJkNmIzMzgwYmVmNjQ0OTIzZjE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-21T15:12:19Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-21T15:12:19Z"}, "message": "Declare unsafe functions that can no longer handle shared roots", "tree": {"sha": "3c8fc64e3bc1517056a142a535cb7dc8c7845e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c8fc64e3bc1517056a142a535cb7dc8c7845e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e947ef031ae05c4ed56bbd6b3380bef644923f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e947ef031ae05c4ed56bbd6b3380bef644923f1", "html_url": "https://github.com/rust-lang/rust/commit/3e947ef031ae05c4ed56bbd6b3380bef644923f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e947ef031ae05c4ed56bbd6b3380bef644923f1/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b800a567165ab4395daa82e215eaed84be5c8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b800a567165ab4395daa82e215eaed84be5c8dc", "html_url": "https://github.com/rust-lang/rust/commit/1b800a567165ab4395daa82e215eaed84be5c8dc"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d9cdebb4f73542495f1cac6c69ad6a72fc4090bf", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e947ef031ae05c4ed56bbd6b3380bef644923f1/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e947ef031ae05c4ed56bbd6b3380bef644923f1/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=3e947ef031ae05c4ed56bbd6b3380bef644923f1", "patch": "@@ -386,7 +386,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     /// Borrows a view into the keys stored in the node.\n     /// The caller must ensure that the node is not the shared root.\n-    pub fn keys(&self) -> &[K] {\n+    pub unsafe fn keys(&self) -> &[K] {\n         self.reborrow().into_key_slice()\n     }\n \n@@ -521,10 +521,10 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n \n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n     /// The caller must ensure that the node is not the shared root.\n-    fn into_key_slice(self) -> &'a [K] {\n+    unsafe fn into_key_slice(self) -> &'a [K] {\n         debug_assert!(!self.is_shared_root());\n         // We cannot be the shared root, so `as_leaf` is okay.\n-        unsafe { slice::from_raw_parts(MaybeUninit::first_ptr(&self.as_leaf().keys), self.len()) }\n+        slice::from_raw_parts(MaybeUninit::first_ptr(&self.as_leaf().keys), self.len())\n     }\n \n     /// The caller must ensure that the node is not the shared root.\n@@ -537,7 +537,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n     /// The caller must ensure that the node is not the shared root.\n     fn into_slices(self) -> (&'a [K], &'a [V]) {\n         let k = unsafe { ptr::read(&self) };\n-        (k.into_key_slice(), self.into_val_slice())\n+        (unsafe { k.into_key_slice() }, self.into_val_slice())\n     }\n }\n "}, {"sha": "579624cdd2b6a8d2ab47d6ce41a3adc43be8325e", "filename": "src/liballoc/collections/btree/search.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e947ef031ae05c4ed56bbd6b3380bef644923f1/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e947ef031ae05c4ed56bbd6b3380bef644923f1/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=3e947ef031ae05c4ed56bbd6b3380bef644923f1", "patch": "@@ -64,9 +64,9 @@ where\n     // Using `keys()` is fine here even if BorrowType is mutable, as all we return\n     // is an index -- not a reference.\n     let len = node.len();\n-    // Skip search for empty nodes because `keys()` does not work on shared roots.\n     if len > 0 {\n-        for (i, k) in node.keys().iter().enumerate() {\n+        let keys = unsafe { node.keys() }; // safe because a non-empty node cannot be the shared root\n+        for (i, k) in keys.iter().enumerate() {\n             match key.cmp(k.borrow()) {\n                 Ordering::Greater => {}\n                 Ordering::Equal => return (i, true),"}]}