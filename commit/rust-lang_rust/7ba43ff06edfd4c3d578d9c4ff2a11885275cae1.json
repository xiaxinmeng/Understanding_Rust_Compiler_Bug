{"sha": "7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTQzZmYwNmVkZmQ0YzNkNTc4ZDljNGZmMmExMTg4NTI3NWNhZTE=", "commit": {"author": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-15T01:52:07Z"}, "committer": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-15T01:52:07Z"}, "message": "Finished implementing impl and trait type/const", "tree": {"sha": "4e0a7d19ecc5748347a99b1b261de23346747eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e0a7d19ecc5748347a99b1b261de23346747eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "html_url": "https://github.com/rust-lang/rust/commit/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1/comments", "author": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3163071c75bff08e3ea1b4ed0928933415377ca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3163071c75bff08e3ea1b4ed0928933415377ca4", "html_url": "https://github.com/rust-lang/rust/commit/3163071c75bff08e3ea1b4ed0928933415377ca4"}], "stats": {"total": 142, "additions": 107, "deletions": 35}, "files": [{"sha": "ccf99c5dae7290ba798e89235913cf4e1daf4b9e", "filename": "src/items.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "patch": "@@ -23,7 +23,7 @@ use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n use syntax::codemap;\n \n-use syntax::{ast, abi};\n+use syntax::{ast, abi, ptr};\n use syntax::codemap::{Span, BytePos, mk_sp};\n use syntax::parse::token;\n use syntax::ast::ImplItem;\n@@ -640,7 +640,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         if offset.width() + result.len() + trait_bound_str.len() > context.config.max_width {\n             result.push('\\n');\n-            let width = context.block_indent.width() + context.config.tab_spaces - 1;\n+            let width = context.block_indent.width() + context.config.tab_spaces;\n             let trait_indent = Indent::new(0, width);\n             result.push_str(&trait_indent.to_string(context.config));\n         }\n@@ -1021,6 +1021,75 @@ pub fn rewrite_static(prefix: &str,\n     rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent).map(|s| s + \";\")\n }\n \n+pub fn rewrite_associated_type(prefix: &str,\n+                               ident: ast::Ident,\n+                               ty_opt: Option<&ptr::P<ast::Ty>>,\n+                               ty_param_bounds_opt: Option<&ast::TyParamBounds>,\n+                               context: &RewriteContext,\n+                               indent: Indent)\n+                               -> Option<String> {\n+    let prefix = format!(\"{} {}\", prefix, ident);\n+\n+    let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n+        let bounds: &[_] = &ty_param_bounds.as_slice();\n+        let bound_str = bounds.iter()\n+                              .filter_map(|ty_bound| {\n+                                  ty_bound.rewrite(context,\n+                                                   context.config.max_width,\n+                                                   indent)\n+                              })\n+                              .collect::<Vec<String>>()\n+                              .join(\" + \");\n+        if bounds.len() > 0 {\n+            format!(\": {}\", bound_str)\n+        } else {\n+            String::new()\n+        }\n+    } else {\n+        String::new()\n+    };\n+\n+    if let Some(ty) = ty_opt {\n+        let ty_str = try_opt!(ty.rewrite(context,\n+                                         context.config.max_width - context.block_indent.width() -\n+                                         prefix.len() - 2,\n+                                         context.block_indent));\n+        Some(format!(\"{} = {};\", prefix, ty_str))\n+    } else {\n+        Some(format!(\"{}{};\", prefix, type_bounds_str))\n+    }\n+}\n+\n+pub fn rewrite_associated_static(prefix: &str,\n+                                 vis: ast::Visibility,\n+                                 ident: ast::Ident,\n+                                 ty: &ast::Ty,\n+                                 mutability: ast::Mutability,\n+                                 expr_opt: &Option<ptr::P<ast::Expr>>,\n+                                 context: &RewriteContext)\n+                                 -> Option<String> {\n+    let prefix = format!(\"{}{} {}{}: \",\n+                         format_visibility(vis),\n+                         prefix,\n+                         format_mutability(mutability),\n+                         ident);\n+    // 2 = \" =\".len()\n+    let ty_str = try_opt!(ty.rewrite(context,\n+                                     context.config.max_width - context.block_indent.width() -\n+                                     prefix.len() - 2,\n+                                     context.block_indent));\n+\n+    if let &Some(ref expr) = expr_opt {\n+        let lhs = format!(\"{}{} =\", prefix, ty_str);\n+        // 1 = ;\n+        let remaining_width = context.config.max_width - context.block_indent.width() - 1;\n+        rewrite_assign_rhs(context, lhs, expr, remaining_width, context.block_indent).map(|s| s + \";\")\n+    } else {\n+        let lhs = format!(\"{}{};\", prefix, ty_str);\n+        Some(lhs)\n+    }\n+}\n+\n impl Rewrite for ast::FunctionRetTy {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match *self {\n@@ -1671,6 +1740,7 @@ fn rewrite_where_clause(context: &RewriteContext,\n         config: context.config,\n     };\n     let preds_str = try_opt!(write_list(&item_vec, &fmt));\n+    println!(\"{:?}\", preds_str);\n \n     let end_length = if terminator == \"{\" {\n         // If the brace is on the next line we don't need to count it otherwise it needs two"}, {"sha": "2339a47dd21a4dfb89c4e2423a7c145db707aab5", "filename": "src/visitor.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba43ff06edfd4c3d578d9c4ff2a11885275cae1/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=7ba43ff06edfd4c3d578d9c4ff2a11885275cae1", "patch": "@@ -21,7 +21,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::{rewrite_static, rewrite_type_alias, format_impl, format_trait};\n+use items::{rewrite_static, rewrite_associated_static, rewrite_associated_type, rewrite_type_alias, format_impl, format_trait};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -207,7 +207,6 @@ impl<'a> FmtVisitor<'a> {\n                     self.last_pos = item.span.hi;\n                 }\n             }\n-            // FIXME(#78): format traits.\n             ast::ItemKind::Trait(..) => {\n                 self.format_missing_with_indent(item.span.lo);\n                 if let Some(trait_str) = format_trait(&self.get_context(),\n@@ -216,11 +215,6 @@ impl<'a> FmtVisitor<'a> {\n                     self.buffer.push_str(&trait_str);\n                     self.last_pos = item.span.hi;\n                 }\n-                // self.block_indent = self.block_indent.block_indent(self.config);\n-                // for item in trait_items {\n-                //     self.visit_trait_item(&item);\n-                // }\n-                // self.block_indent = self.block_indent.block_unindent(self.config);\n             }\n             ast::ItemKind::ExternCrate(_) => {\n                 self.format_missing_with_indent(item.span.lo);\n@@ -320,8 +314,15 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         match ti.node {\n-            ast::TraitItemKind::Const(..) => {\n-                // FIXME: Implement\n+            ast::TraitItemKind::Const(ref ty, ref expr) => {\n+                let rewrite = rewrite_associated_static(\"const\",\n+                                             ast::Visibility::Inherited,\n+                                             ti.ident,\n+                                             ty,\n+                                             ast::Mutability::Immutable,\n+                                             expr,\n+                                             &self.get_context());\n+                self.push_rewrite(ti.span, rewrite);\n             }\n             ast::TraitItemKind::Method(ref sig, None) => {\n                 let indent = self.block_indent;\n@@ -336,25 +337,13 @@ impl<'a> FmtVisitor<'a> {\n                               ti.id);\n             }\n             ast::TraitItemKind::Type(ref type_param_bounds, _) => {\n-                let indent = self.block_indent;\n-                let mut result = String::new();\n-                result.push_str(&format!(\"type {}\", ti.ident));\n-\n-                let bounds: &[_] = &type_param_bounds.as_slice();\n-                let bound_str = bounds.iter()\n-                                      .filter_map(|ty_bound| {\n-                                          ty_bound.rewrite(&self.get_context(),\n-                                                           self.config.max_width,\n-                                                           indent)\n-                                      })\n-                                      .collect::<Vec<String>>()\n-                                      .join(\" + \");\n-                if bounds.len() > 0 {\n-                    result.push_str(&format!(\": {}\", bound_str));\n-                }\n-\n-                result.push(';');\n-                self.push_rewrite(ti.span, Some(result));\n+                let rewrite = rewrite_associated_type(\"type\",\n+                                                      ti.ident,\n+                                                      None,\n+                                                      Some(type_param_bounds),\n+                                                      &self.get_context(),\n+                                                      self.block_indent);\n+                self.push_rewrite(ti.span, rewrite);\n             }\n         }\n     }\n@@ -372,11 +361,24 @@ impl<'a> FmtVisitor<'a> {\n                               ii.span,\n                               ii.id);\n             }\n-            ast::ImplItemKind::Const(..) => {\n-                // FIXME: Implement\n-            }\n-            ast::ImplItemKind::Type(_) => {\n-                // FIXME: Implement\n+            ast::ImplItemKind::Const(ref ty, ref expr) => {\n+                let rewrite = rewrite_static(\"const\",\n+                                             ast::Visibility::Inherited,\n+                                             ii.ident,\n+                                             ty,\n+                                             ast::Mutability::Immutable,\n+                                             &expr,\n+                                             &self.get_context());\n+                self.push_rewrite(ii.span, rewrite);\n+            }\n+            ast::ImplItemKind::Type(ref ty) => {\n+                let rewrite = rewrite_associated_type(\"type\",\n+                                                      ii.ident,\n+                                                      Some(ty),\n+                                                      None,\n+                                                      &self.get_context(),\n+                                                      self.block_indent);\n+                self.push_rewrite(ii.span, rewrite);\n             }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.format_missing_with_indent(ii.span.lo);"}]}