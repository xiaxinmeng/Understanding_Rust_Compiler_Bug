{"sha": "5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf", "node_id": "C_kwDOAAsO6NoAKDViM2EwNmEzYzI1ODRkMzAzY2I0MDYzN2E1MGE0YmMzZjBkOGNlZGY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-17T14:44:24Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-23T12:36:00Z"}, "message": "Call fully_solve_obligations instead of repeating code", "tree": {"sha": "f3808fa6a54a5959ca0778fb52a2f14459a1e5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3808fa6a54a5959ca0778fb52a2f14459a1e5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmN+E7EACgkQgTGiTgx5\n768yXw/+I6/TJE1MQmkm1SDzkrXLS7XACmxqTHOGUALsc8IXlitdqnj9YtzezcGc\nh3Zg2SfjSTFVa7cGa/wVWsPkacJ2lQguSOAxDQuBiqUZqFgZadSt551X/AZXJO2h\n8ruvz0cRvrw5fJywYW8yiCM6rGK0SyZgKfQVI4m0kGrB/y6SkAoIg6v7sYktFGF5\nxgYJ61mlitUsmhjdv/sx9oQeeNAhcPJGRQ39+6sKaGoi5kF0hWqpWE7fQGsEsv8u\n5CNih/JEdYNrI+unfNn56J6iJbiPQbw9Vh5DTLYJdMOZHEl2eF6tRt1u3YZHze0f\nfe84UqSnrkX+e0JUbTBikHSub1hc3ObEwitHNPaC75JJ290MiQqp43p4wD3c9YDJ\naMk7wCNDEhM3oMPZLnH4Jn5BL3931Macp7ibyoJR5sxgdGXXtKjCIoqgG+vUpBQk\nSY02/LDfd8WsuEqDWEjIXlVOkCoFCFWLj2AsQo9e2tg499yn/2XvO6w5USylE2jf\nWEbvuJ1bUuGOo7uc7owGlodhbJjHxeQ+HVK8HYZ8SEbcZxgYU/JaBaR8W881XIw0\ncIyIBjA0nNS8ohzt5Oa6JFORRZKbInUpmtgSirPjdL2KMO3nR6uWG9uz3E3nTn7R\nr39da14J5t/vZf9l2xfBLiI9uxC+ziGdFrd4pX35M7CKnW+1Xyo=\n=jfKN\n-----END PGP SIGNATURE-----", "payload": "tree f3808fa6a54a5959ca0778fb52a2f14459a1e5e7\nparent ad094cdcebde8336d4f63d5323db5843e27def40\nauthor Santiago Pastorino <spastorino@gmail.com> 1668696264 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669206960 -0300\n\nCall fully_solve_obligations instead of repeating code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf", "html_url": "https://github.com/rust-lang/rust/commit/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad094cdcebde8336d4f63d5323db5843e27def40", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad094cdcebde8336d4f63d5323db5843e27def40", "html_url": "https://github.com/rust-lang/rust/commit/ad094cdcebde8336d4f63d5323db5843e27def40"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "548ca1c1d7faa4abe86ab5dc9050f0c58e2e07c3", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=5b3a06a3c2584d303cb40637a50a4bc3f0d8cedf", "patch": "@@ -402,9 +402,7 @@ pub fn fully_solve_obligation<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     obligation: PredicateObligation<'tcx>,\n ) -> Vec<FulfillmentError<'tcx>> {\n-    let ocx = ObligationCtxt::new(infcx);\n-    ocx.register_obligation(obligation);\n-    ocx.select_all_or_error()\n+    fully_solve_obligations(infcx, [obligation])\n }\n \n /// Process a set of obligations (and any nested obligations that come from them)\n@@ -428,9 +426,16 @@ pub fn fully_solve_bound<'tcx>(\n     ty: Ty<'tcx>,\n     bound: DefId,\n ) -> Vec<FulfillmentError<'tcx>> {\n-    let ocx = ObligationCtxt::new(infcx);\n-    ocx.register_bound(cause, param_env, ty, bound);\n-    ocx.select_all_or_error()\n+    let tcx = infcx.tcx;\n+    let trait_ref = ty::TraitRef { def_id: bound, substs: tcx.mk_substs_trait(ty, []) };\n+    let obligation = Obligation {\n+        cause,\n+        recursion_depth: 0,\n+        param_env,\n+        predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n+    };\n+\n+    fully_solve_obligation(infcx, obligation)\n }\n \n /// Normalizes the predicates and checks whether they hold in an empty environment. If this"}]}