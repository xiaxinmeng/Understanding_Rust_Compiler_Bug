{"sha": "5eafae22ceb0e4fae835a5eb7518a55e75061e20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYWZhZTIyY2ViMGU0ZmFlODM1YTVlYjc1MThhNTVlNzUwNjFlMjA=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-12-07T14:18:38Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-12-13T09:07:58Z"}, "message": "Remove confusing comment about ideally using `!` for `c_void`\n\nUsing `!` for `c_void` would have the problem that pointers and\npotentially references to an uninhabited type would be created, and at\nleast for references this is UB.\n\nAlso document in addition that newtype wrappers around `c_void` are not\nrecommended for representing opaque types (as a workaround for `extern\ntype` not being stable) but instead refer to the Nomicon.", "tree": {"sha": "f6622fb7b5d7e18166cfb1521517d7ac9a1f39f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6622fb7b5d7e18166cfb1521517d7ac9a1f39f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eafae22ceb0e4fae835a5eb7518a55e75061e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eafae22ceb0e4fae835a5eb7518a55e75061e20", "html_url": "https://github.com/rust-lang/rust/commit/5eafae22ceb0e4fae835a5eb7518a55e75061e20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eafae22ceb0e4fae835a5eb7518a55e75061e20/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8fc7dc06dea00afbd365468cf4804f68a3531c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8fc7dc06dea00afbd365468cf4804f68a3531c", "html_url": "https://github.com/rust-lang/rust/commit/dd8fc7dc06dea00afbd365468cf4804f68a3531c"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "02e92af853452f14316925d017813c8bbb484fc6", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5eafae22ceb0e4fae835a5eb7518a55e75061e20/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eafae22ceb0e4fae835a5eb7518a55e75061e20/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=5eafae22ceb0e4fae835a5eb7518a55e75061e20", "patch": "@@ -13,11 +13,12 @@ use ::fmt;\n /// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n /// *not* the same as C's `void` return type, which is Rust's `()` type.\n ///\n-/// Ideally, this type would be equivalent to [`!`], but currently it may\n-/// be more ideal to use `c_void` for FFI purposes.\n+/// To model pointers to opaque types in FFI, until `extern type` is\n+/// stabilized, it is recommended to use a newtype wrapper around an empty\n+/// byte array. See the [Nomicon] for details.\n ///\n-/// [`!`]: ../../std/primitive.never.html\n /// [pointer]: ../../std/primitive.pointer.html\n+/// [Nomicon]: https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs\n // N.B., for LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse"}]}