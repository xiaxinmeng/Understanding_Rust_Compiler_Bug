{"sha": "d6fa4070bea1cf94b6fbab5028057d5604c600ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZmE0MDcwYmVhMWNmOTRiNmZiYWI1MDI4MDU3ZDU2MDRjNjAwZWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-11T11:23:08Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T07:52:35Z"}, "message": "Fix rebase fallout", "tree": {"sha": "4aa227f1712fc61f98f02049df4daad30d6a08c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aa227f1712fc61f98f02049df4daad30d6a08c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6fa4070bea1cf94b6fbab5028057d5604c600ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fa4070bea1cf94b6fbab5028057d5604c600ee", "html_url": "https://github.com/rust-lang/rust/commit/d6fa4070bea1cf94b6fbab5028057d5604c600ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6fa4070bea1cf94b6fbab5028057d5604c600ee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b52f6f4ca8a2d04abf2f6481530303c2eabaef18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b52f6f4ca8a2d04abf2f6481530303c2eabaef18", "html_url": "https://github.com/rust-lang/rust/commit/b52f6f4ca8a2d04abf2f6481530303c2eabaef18"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a7aee9407a495220d693a7cd39c56cb29da80217", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa4070bea1cf94b6fbab5028057d5604c600ee/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa4070bea1cf94b6fbab5028057d5604c600ee/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=d6fa4070bea1cf94b6fbab5028057d5604c600ee", "patch": "@@ -6,7 +6,7 @@\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{Ty, TyCtxt, ParamEnv, self};\n use rustc::mir::interpret::{\n-    EvalResult, ErrorHandled,\n+    InterpResult, ErrorHandled,\n };\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -63,7 +63,7 @@ impl<'rt, 'a, 'mir, 'tcx> InternVisitor<'rt, 'a, 'mir, 'tcx> {\n         &mut self,\n         ptr: Pointer,\n         mutability: Mutability,\n-    ) -> EvalResult<'tcx, Option<IsStaticOrFn>> {\n+    ) -> InterpResult<'tcx, Option<IsStaticOrFn>> {\n         trace!(\n             \"InternVisitor::intern {:?} with {:?}\",\n             ptr, mutability,\n@@ -117,8 +117,8 @@ for\n     fn visit_aggregate(\n         &mut self,\n         mplace: MPlaceTy<'tcx>,\n-        fields: impl Iterator<Item=EvalResult<'tcx, Self::V>>,\n-    ) -> EvalResult<'tcx> {\n+        fields: impl Iterator<Item=InterpResult<'tcx, Self::V>>,\n+    ) -> InterpResult<'tcx> {\n         if let Some(def) = mplace.layout.ty.ty_adt_def() {\n             if Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type() {\n                 // We are crossing over an `UnsafeCell`, we can mutate again\n@@ -138,7 +138,7 @@ for\n         self.walk_aggregate(mplace, fields)\n     }\n \n-    fn visit_primitive(&mut self, mplace: MPlaceTy<'tcx>) -> EvalResult<'tcx> {\n+    fn visit_primitive(&mut self, mplace: MPlaceTy<'tcx>) -> InterpResult<'tcx> {\n         // Handle Reference types, as these are the only relocations supported by const eval.\n         // Raw pointers (and boxes) are handled by the `leftover_relocations` logic.\n         let ty = mplace.layout.ty;\n@@ -245,7 +245,7 @@ pub fn intern_const_alloc_recursive(\n     // FIXME(oli-obk): can we scrap the param env? I think we can, the final value of a const eval\n     // must always be monomorphic, right?\n     param_env: ty::ParamEnv<'tcx>,\n-) -> EvalResult<'tcx> {\n+) -> InterpResult<'tcx> {\n     let tcx = ecx.tcx;\n     let (mutability, base_intern_mode) = match tcx.static_mutability(def_id) {\n         Some(hir::Mutability::MutImmutable) => (Mutability::Immutable, InternMode::Static),"}, {"sha": "1285549015cdd3ff1c0ba8febe3defbebcca0de6", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa4070bea1cf94b6fbab5028057d5604c600ee/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa4070bea1cf94b6fbab5028057d5604c600ee/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=d6fa4070bea1cf94b6fbab5028057d5604c600ee", "patch": "@@ -677,7 +677,7 @@ where\n \n         if M::enforce_validity(self) {\n             // Data got changed, better make sure it matches the type!\n-            self.validate_operand(dest.into(), vec![], None, /*const_mode*/ false)?;\n+            self.validate_operand(dest.into(), vec![], None)?;\n         }\n \n         Ok(())"}, {"sha": "5b567512a7b6fb55143ad80e837903398576cec4", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa4070bea1cf94b6fbab5028057d5604c600ee/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa4070bea1cf94b6fbab5028057d5604c600ee/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d6fa4070bea1cf94b6fbab5028057d5604c600ee", "patch": "@@ -567,7 +567,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         });\n \n         if let Some(Ok(imm)) = imm {\n-            match imm {\n+            match *imm {\n                 interpret::Immediate::Scalar(ScalarMaybeUndef::Scalar(scalar)) => {\n                     *rval = Rvalue::Use(\n                         self.operand_from_scalar(scalar, value.layout.ty, source_info.span));"}]}