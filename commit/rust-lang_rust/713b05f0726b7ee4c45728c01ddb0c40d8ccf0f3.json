{"sha": "713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxM2IwNWYwNzI2YjdlZTRjNDU3MjhjMDFkZGIwYzQwZDhjY2YwZjM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-02-21T17:20:09Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-02-21T17:21:26Z"}, "message": "rustc_data_structures: add missing #[inline].", "tree": {"sha": "ee98c52b372f7af4dc7ae8c880bd17a655b2ba3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee98c52b372f7af4dc7ae8c880bd17a655b2ba3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3", "html_url": "https://github.com/rust-lang/rust/commit/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "2678861be0634e3588510406bc2f403ac40a5c6e", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3", "patch": "@@ -24,6 +24,7 @@ pub trait BitSlice {\n \n impl BitSlice for [Word] {\n     /// Clears bit at `idx` to 0; returns true iff this changed `self.`\n+    #[inline]\n     fn clear_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"clear_bit: words={} idx={}\",\n@@ -37,6 +38,7 @@ impl BitSlice for [Word] {\n     }\n \n     /// Sets bit at `idx` to 1; returns true iff this changed `self.`\n+    #[inline]\n     fn set_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"set_bit: words={} idx={}\",\n@@ -50,6 +52,7 @@ impl BitSlice for [Word] {\n     }\n \n     /// Extracts value of bit at `idx` in `self`.\n+    #[inline]\n     fn get_bit(&self, idx: usize) -> bool {\n         let words = self;\n         let BitLookup { word, bit_mask, .. } = bit_lookup(idx);"}, {"sha": "14626f9d5a0fd8d5e96eb60833249690417d0003", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=713b05f0726b7ee4c45728c01ddb0c40d8ccf0f3", "patch": "@@ -29,12 +29,16 @@ pub trait Idx: Copy + 'static + Eq + Debug {\n }\n \n impl Idx for usize {\n+    #[inline]\n     fn new(idx: usize) -> Self { idx }\n+    #[inline]\n     fn index(self) -> usize { self }\n }\n \n impl Idx for u32 {\n+    #[inline]\n     fn new(idx: usize) -> Self { assert!(idx <= u32::MAX as usize); idx as u32 }\n+    #[inline]\n     fn index(self) -> usize { self as usize }\n }\n \n@@ -73,11 +77,13 @@ macro_rules! newtype_index {\n         pub struct $type($($pub)* u32);\n \n         impl Idx for $type {\n+            #[inline]\n             fn new(value: usize) -> Self {\n                 assert!(value < ($max) as usize);\n                 $type(value as u32)\n             }\n \n+            #[inline]\n             fn index(self) -> usize {\n                 self.0 as usize\n             }"}]}