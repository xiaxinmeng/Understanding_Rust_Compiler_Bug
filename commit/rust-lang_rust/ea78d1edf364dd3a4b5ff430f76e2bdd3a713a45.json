{"sha": "ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzhkMWVkZjM2NGRkM2E0YjVmZjQzMGY3NmUyYmRkM2E3MTNhNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T13:05:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T13:05:57Z"}, "message": "Auto merge of #85737 - scottmcm:vec-calloc-option-nonzero, r=m-ou-se\n\nEnable Vec's calloc optimization for Option<NonZero>\n\nSomeone on discord noticed that `vec![None::<NonZeroU32>; N]` wasn't getting the optimization, so here's a PR \ud83d\ude43\n\nWe can certainly do this in the standard library because we know for sure this is ok, but I think it's also a necessary consequence of documented guarantees like those in https://doc.rust-lang.org/std/option/#representation and https://doc.rust-lang.org/core/num/struct.NonZeroU32.html\n\nIt feels weird to do this without adding a test, but I wasn't sure where that would belong.  Is it worth adding codegen tests for these?", "tree": {"sha": "833d19a86e0ddd53516c2907505bd37876afdabe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/833d19a86e0ddd53516c2907505bd37876afdabe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45", "html_url": "https://github.com/rust-lang/rust/commit/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1e3d3b74fa80ce14af6ec143f061897684582b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e3d3b74fa80ce14af6ec143f061897684582b", "html_url": "https://github.com/rust-lang/rust/commit/8d1e3d3b74fa80ce14af6ec143f061897684582b"}, {"sha": "04d34a97d1d47676331479e24e5afaf2583cb8e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/04d34a97d1d47676331479e24e5afaf2583cb8e5", "html_url": "https://github.com/rust-lang/rust/commit/04d34a97d1d47676331479e24e5afaf2583cb8e5"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "6fade636df9e22ba752fe9ed5675bf7c0bc733ee", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=ea78d1edf364dd3a4b5ff430f76e2bdd3a713a45", "patch": "@@ -69,3 +69,36 @@ unsafe impl<T: ?Sized> IsZero for Option<Box<T>> {\n         self.is_none()\n     }\n }\n+\n+// `Option<num::NonZeroU32>` and similar have a representation guarantee that\n+// they're the same size as the corresponding `u32` type, as well as a guarantee\n+// that transmuting between `NonZeroU32` and `Option<num::NonZeroU32>` works.\n+// While the documentation officially makes in UB to transmute from `None`,\n+// we're the standard library so we can make extra inferences, and we know that\n+// the only niche available to represent `None` is the one that's all zeros.\n+\n+macro_rules! impl_is_zero_option_of_nonzero {\n+    ($($t:ident,)+) => {$(\n+        unsafe impl IsZero for Option<core::num::$t> {\n+            #[inline]\n+            fn is_zero(&self) -> bool {\n+                self.is_none()\n+            }\n+        }\n+    )+};\n+}\n+\n+impl_is_zero_option_of_nonzero!(\n+    NonZeroU8,\n+    NonZeroU16,\n+    NonZeroU32,\n+    NonZeroU64,\n+    NonZeroU128,\n+    NonZeroI8,\n+    NonZeroI16,\n+    NonZeroI32,\n+    NonZeroI64,\n+    NonZeroI128,\n+    NonZeroUsize,\n+    NonZeroIsize,\n+);"}]}