{"sha": "30532884f83c4346f736dee5df03e812bde94ddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNTMyODg0ZjgzYzQzNDZmNzM2ZGVlNWRmMDNlODEyYmRlOTRkZGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T18:41:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T22:56:33Z"}, "message": "Test fixes and rebase conflicts, round 2", "tree": {"sha": "26e7ae049d0edb282e07f98b3a5eb9367e42f022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e7ae049d0edb282e07f98b3a5eb9367e42f022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30532884f83c4346f736dee5df03e812bde94ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30532884f83c4346f736dee5df03e812bde94ddc", "html_url": "https://github.com/rust-lang/rust/commit/30532884f83c4346f736dee5df03e812bde94ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30532884f83c4346f736dee5df03e812bde94ddc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "554946c81eeb4fcfceda782f6c5af394ab3fe8d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/554946c81eeb4fcfceda782f6c5af394ab3fe8d3", "html_url": "https://github.com/rust-lang/rust/commit/554946c81eeb4fcfceda782f6c5af394ab3fe8d3"}], "stats": {"total": 171, "additions": 80, "deletions": 91}, "files": [{"sha": "2fe769b73f5cc00619e11b0d2f771eb3b05bd717", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -213,7 +213,7 @@ impl<'a, B: ?Sized> Cow<'a, B> where B: ToOwned {\n     ///\n     /// let hello = cow.to_mut();\n     ///\n-    /// assert_eq!(&[1, 2, 3], hello);\n+    /// assert_eq!(hello, &[1, 2, 3]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_mut(&mut self) -> &mut <B as ToOwned>::Owned {"}, {"sha": "4a99f1a756a7c3e8ac31317a0a2eee8374fc06d3", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -95,13 +95,6 @@ impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U> {\n //     }\n // }\n \n-// From itself is always itself\n-impl<T> From<T> for T {\n-    fn from(t: T) -> T {\n-        t\n-    }\n-}\n-\n // From implies Into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, U> Into<U> for T where U: From<T> {"}, {"sha": "1328b1a3ba92f705cbfb2df94b48d14dff0e75b6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 71, "deletions": 51, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -12,25 +12,26 @@\n //!\n //! # The `Iterator` trait\n //!\n-//! This module defines Rust's core iteration trait. The `Iterator` trait has one\n-//! unimplemented method, `next`. All other methods are derived through default\n-//! methods to perform operations such as `zip`, `chain`, `enumerate`, and `fold`.\n+//! This module defines Rust's core iteration trait. The `Iterator` trait has\n+//! one unimplemented method, `next`. All other methods are derived through\n+//! default methods to perform operations such as `zip`, `chain`, `enumerate`,\n+//! and `fold`.\n //!\n //! The goal of this module is to unify iteration across all containers in Rust.\n-//! An iterator can be considered as a state machine which is used to track which\n-//! element will be yielded next.\n+//! An iterator can be considered as a state machine which is used to track\n+//! which element will be yielded next.\n //!\n-//! There are various extensions also defined in this module to assist with various\n-//! types of iteration, such as the `DoubleEndedIterator` for iterating in reverse,\n-//! the `FromIterator` trait for creating a container from an iterator, and much\n-//! more.\n+//! There are various extensions also defined in this module to assist with\n+//! various types of iteration, such as the `DoubleEndedIterator` for iterating\n+//! in reverse, the `FromIterator` trait for creating a container from an\n+//! iterator, and much more.\n //!\n //! ## Rust's `for` loop\n //!\n //! The special syntax used by rust's `for` loop is based around the `Iterator`\n-//! trait defined in this module. For loops can be viewed as a syntactical expansion\n-//! into a `loop`, for example, the `for` loop in this example is essentially\n-//! translated to the `loop` below.\n+//! trait defined in this module. For loops can be viewed as a syntactical\n+//! expansion into a `loop`, for example, the `for` loop in this example is\n+//! essentially translated to the `loop` below.\n //!\n //! ```\n //! let values = vec![1, 2, 3];\n@@ -64,8 +65,8 @@ use cmp::Ord;\n use default::Default;\n use marker;\n use mem;\n-use num::{Int, Zero, One, ToPrimitive};\n-use ops::{Add, Sub, FnMut, RangeFrom};\n+use num::{Int, Zero, One};\n+use ops::{self, Add, Sub, FnMut, RangeFrom};\n use option::Option::{self, Some, None};\n use marker::Sized;\n use usize;\n@@ -84,21 +85,22 @@ fn _assert_is_object_safe(_: &Iterator) {}\n /// else.\n #[lang=\"iterator\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar \\\n-                            method\"]\n+#[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling \\\n+                            `.iter()` or a similar method\"]\n pub trait Iterator {\n     /// The type of the elements being iterated\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n \n-    /// Advance the iterator and return the next value. Return `None` when the end is reached.\n+    /// Advance the iterator and return the next value. Return `None` when the\n+    /// end is reached.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next(&mut self) -> Option<Self::Item>;\n \n     /// Returns a lower and upper bound on the remaining length of the iterator.\n     ///\n-    /// An upper bound of `None` means either there is no known upper bound, or the upper bound\n-    /// does not fit within a `usize`.\n+    /// An upper bound of `None` means either there is no known upper bound, or\n+    /// the upper bound does not fit within a `usize`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }\n@@ -274,7 +276,8 @@ pub trait Iterator {\n     /// iterator plus the current index of iteration.\n     ///\n     /// `enumerate` keeps its count as a `usize`. If you want to count by a\n-    /// different sized integer, the `zip` function provides similar functionality.\n+    /// different sized integer, the `zip` function provides similar\n+    /// functionality.\n     ///\n     /// # Examples\n     ///\n@@ -612,7 +615,8 @@ pub trait Iterator {\n         true\n     }\n \n-    /// Tests whether any element of an iterator satisfies the specified predicate.\n+    /// Tests whether any element of an iterator satisfies the specified\n+    /// predicate.\n     ///\n     /// Does not consume the iterator past the first found element.\n     ///\n@@ -776,7 +780,8 @@ pub trait Iterator {\n     ///    element in the iterator and all elements are equal.\n     ///\n     /// On an iterator of length `n`, `min_max` does `1.5 * n` comparisons,\n-    /// and so is faster than calling `min` and `max` separately which does `2 * n` comparisons.\n+    /// and so is faster than calling `min` and `max` separately which does `2 *\n+    /// n` comparisons.\n     ///\n     /// # Examples\n     ///\n@@ -810,10 +815,11 @@ pub trait Iterator {\n         };\n \n         loop {\n-            // `first` and `second` are the two next elements we want to look at.\n-            // We first compare `first` and `second` (#1). The smaller one is then compared to\n-            // current minimum (#2). The larger one is compared to current maximum (#3). This\n-            // way we do 3 comparisons for 2 elements.\n+            // `first` and `second` are the two next elements we want to look\n+            // at.  We first compare `first` and `second` (#1). The smaller one\n+            // is then compared to current minimum (#2). The larger one is\n+            // compared to current maximum (#3). This way we do 3 comparisons\n+            // for 2 elements.\n             let first = match self.next() {\n                 None => break,\n                 Some(x) => x\n@@ -1038,7 +1044,8 @@ pub trait FromIterator<A> {\n     /// assert_eq!(colors_set.len(), 3);\n     /// ```\n     ///\n-    /// `FromIterator` is more commonly used implicitly via the `Iterator::collect` method:\n+    /// `FromIterator` is more commonly used implicitly via the\n+    /// `Iterator::collect` method:\n     ///\n     /// ```\n     /// use std::collections::HashSet;\n@@ -1105,12 +1112,13 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n \n /// An object implementing random access indexing by `usize`\n ///\n-/// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n-/// Calling `next()` or `next_back()` on a `RandomAccessIterator`\n-/// reduces the indexable range accordingly. That is, `it.idx(1)` will become `it.idx(0)`\n-/// after `it.next()` is called.\n+/// A `RandomAccessIterator` should be either infinite or a\n+/// `DoubleEndedIterator`.  Calling `next()` or `next_back()` on a\n+/// `RandomAccessIterator` reduces the indexable range accordingly. That is,\n+/// `it.idx(1)` will become `it.idx(0)` after `it.next()` is called.\n #[unstable(feature = \"core\",\n-           reason = \"not widely used, may be better decomposed into Index and ExactSizeIterator\")]\n+           reason = \"not widely used, may be better decomposed into Index \\\n+                     and ExactSizeIterator\")]\n pub trait RandomAccessIterator: Iterator {\n     /// Return the number of indexable elements. At most `std::usize::MAX`\n     /// elements are indexable, even if the iterator represents a longer range.\n@@ -1155,13 +1163,15 @@ impl<I: ExactSizeIterator, F> ExactSizeIterator for Inspect<I, F> where\n     F: FnMut(&I::Item),\n {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ExactSizeIterator for Rev<I> where I: ExactSizeIterator + DoubleEndedIterator {}\n+impl<I> ExactSizeIterator for Rev<I>\n+    where I: ExactSizeIterator + DoubleEndedIterator {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B, I: ExactSizeIterator, F> ExactSizeIterator for Map<I, F> where\n     F: FnMut(I::Item) -> B,\n {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B> ExactSizeIterator for Zip<A, B> where A: ExactSizeIterator, B: ExactSizeIterator {}\n+impl<A, B> ExactSizeIterator for Zip<A, B>\n+    where A: ExactSizeIterator, B: ExactSizeIterator {}\n \n /// An double-ended iterator with the direction inverted\n #[derive(Clone)]\n@@ -1188,7 +1198,9 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n }\n \n #[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-impl<I> RandomAccessIterator for Rev<I> where I: DoubleEndedIterator + RandomAccessIterator {\n+impl<I> RandomAccessIterator for Rev<I>\n+    where I: DoubleEndedIterator + RandomAccessIterator\n+{\n     #[inline]\n     fn indexable(&self) -> usize { self.iter.indexable() }\n     #[inline]\n@@ -1291,7 +1303,8 @@ impl_multiplicative! { usize, 1 }\n impl_multiplicative! { f32,  1.0 }\n impl_multiplicative! { f64,  1.0 }\n \n-/// `MinMaxResult` is an enum returned by `min_max`. See `Iterator::min_max` for more detail.\n+/// `MinMaxResult` is an enum returned by `min_max`. See `Iterator::min_max` for\n+/// more detail.\n #[derive(Clone, PartialEq, Debug)]\n #[unstable(feature = \"core\",\n            reason = \"unclear whether such a fine-grained result is widely useful\")]\n@@ -1302,15 +1315,17 @@ pub enum MinMaxResult<T> {\n     /// Iterator with one element, so the minimum and maximum are the same\n     OneElement(T),\n \n-    /// More than one element in the iterator, the first element is not larger than the second\n+    /// More than one element in the iterator, the first element is not larger\n+    /// than the second\n     MinMax(T, T)\n }\n \n impl<T: Clone> MinMaxResult<T> {\n-    /// `into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n-    /// `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n-    /// `Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\n-    /// performing this operation will make one clone of `x`.\n+    /// `into_option` creates an `Option` of type `(T,T)`. The returned `Option`\n+    /// has variant `None` if and only if the `MinMaxResult` has variant\n+    /// `NoElements`. Otherwise variant `Some(x,y)` is returned where `x <= y`.\n+    /// If `MinMaxResult` has variant `OneElement(x)`, performing this operation\n+    /// will make one clone of `x`.\n     ///\n     /// # Examples\n     ///\n@@ -2522,7 +2537,7 @@ impl<A: Step> RangeFrom<A> {\n }\n \n #[allow(deprecated)]\n-impl<A: Step> ::ops::Range<A> {\n+impl<A: Step> ops::Range<A> {\n     /// Creates an iterator with the same range, but stepping by the\n     /// given amount at each iteration.\n     ///\n@@ -2588,7 +2603,9 @@ pub struct RangeInclusive<A> {\n #[inline]\n #[unstable(feature = \"core\",\n            reason = \"likely to be replaced by range notation and adapters\")]\n-pub fn range_inclusive<A: Int>(start: A, stop: A) -> RangeInclusive<A> {\n+pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n+    where A: Step + One + Clone\n+{\n     RangeInclusive {\n         range: start..stop,\n         done: false,\n@@ -2597,7 +2614,7 @@ pub fn range_inclusive<A: Int>(start: A, stop: A) -> RangeInclusive<A> {\n \n #[unstable(feature = \"core\",\n            reason = \"likely to be replaced by range notation and adapters\")]\n-impl<A: Int + ToPrimitive> Iterator for RangeInclusive<A> {\n+impl<A: Step + One + Clone> Iterator for RangeInclusive<A> {\n     type Item = A;\n \n     #[inline]\n@@ -2633,12 +2650,15 @@ impl<A: Int + ToPrimitive> Iterator for RangeInclusive<A> {\n \n #[unstable(feature = \"core\",\n            reason = \"likely to be replaced by range notation and adapters\")]\n-impl<A: Int + ToPrimitive> DoubleEndedIterator for RangeInclusive<A> {\n+impl<A> DoubleEndedIterator for RangeInclusive<A>\n+    where A: Step + One + Clone,\n+          for<'a> &'a A: Sub<Output=A>\n+{\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         if self.range.end > self.range.start {\n             let result = self.range.end.clone();\n-            self.range.end = self.range.end - A::one();\n+            self.range.end = &self.range.end - &A::one();\n             Some(result)\n         } else if !self.done && self.range.start == self.range.end {\n             self.done = true;\n@@ -2651,7 +2671,7 @@ impl<A: Int + ToPrimitive> DoubleEndedIterator for RangeInclusive<A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n-impl<A: Step + Zero + Clone> Iterator for StepBy<A, ::ops::Range<A>> {\n+impl<A: Step + Zero + Clone> Iterator for StepBy<A, ops::Range<A>> {\n     type Item = A;\n \n     #[inline]\n@@ -2754,13 +2774,13 @@ impl<A: Int> Iterator for RangeStepInclusive<A> {\n macro_rules! range_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl ExactSizeIterator for ::ops::Range<$t> { }\n+        impl ExactSizeIterator for ops::Range<$t> { }\n     )*)\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n-impl<A: Step + One + Clone> Iterator for ::ops::Range<A> {\n+impl<A: Step + One + Clone> Iterator for ops::Range<A> {\n     type Item = A;\n \n     #[inline]\n@@ -2799,7 +2819,7 @@ range_exact_iter_impl!(usize u8 u16 u32 isize i8 i16 i32);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n-impl<A: Step + One + Clone> DoubleEndedIterator for ::ops::Range<A> where\n+impl<A: Step + One + Clone> DoubleEndedIterator for ops::Range<A> where\n     for<'a> &'a A: Sub<&'a A, Output = A>\n {\n     #[inline]\n@@ -2815,7 +2835,7 @@ impl<A: Step + One + Clone> DoubleEndedIterator for ::ops::Range<A> where\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n-impl<A: Step + One> Iterator for ::ops::RangeFrom<A> {\n+impl<A: Step + One> Iterator for ops::RangeFrom<A> {\n     type Item = A;\n \n     #[inline]"}, {"sha": "a4829ed96b3530d6e81096d6f59594eed1a45381", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -46,7 +46,7 @@ use str::{FromStr, StrExt};\n /// intended to have wrapping semantics.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug)]\n-pub struct Wrapping<T>(pub T);\n+pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n \n #[unstable(feature = \"core\", reason = \"may be removed or relocated\")]\n pub mod wrapping;"}, {"sha": "b3ad96c4b5f167d7d68856d96bf1e69634829c1e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -37,7 +37,6 @@\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(std_misc)]\n-#![feature(io)]\n #![feature(path_ext)]\n #![feature(str_words)]\n #![feature(str_char)]"}, {"sha": "450c8eb66c85d3ada97a866ee54cd8d8430f86f9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -27,7 +27,6 @@\n \n #![feature(box_syntax)]\n #![feature(collections)]\n-#![feature(core)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "550959fb2b390fdb6fdf0e3cacebd70593f11756", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -30,7 +30,6 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(staged_api)]\n-#![cfg_attr(unix, feature(convert))]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;"}, {"sha": "760fa329fd9866808f68a7570a4bd2ba48b19c99", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -195,8 +195,8 @@ mod imp {\n \n     impl Lock {\n         pub fn new(p: &Path) -> Lock {\n-            let p: &OsStr = p.as_ref();\n-            let mut p_16: Vec<_> = p.encode_wide().collect();\n+            let os: &OsStr = p.as_ref();\n+            let mut p_16: Vec<_> = os.encode_wide().collect();\n             p_16.push(0);\n             let handle = unsafe {\n                 libc::CreateFileW(p_16.as_ptr(),"}, {"sha": "1ff3411f8fc14368809ab1f5339c68dbc4421b5e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -23,7 +23,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(collections)]\n-#![feature(core)]\n #![feature(exit_status)]\n #![feature(set_stdio)]\n #![feature(libc)]"}, {"sha": "42ea50bff776876df0494f7ac08169db9a45d00b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -10,7 +10,7 @@\n \n #![unstable(feature = \"std_misc\")]\n \n-use convert::Into;\n+use convert::{Into, From};\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use error::Error;\n use fmt;"}, {"sha": "312e1c814dc58e730c588e446da5dbcd877879ce", "filename": "src/libstd/old_io/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fold_io%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fold_io%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftest.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -141,22 +141,22 @@ mod darwin_fd_limit {\n         // sysctl value, and bump the soft resource limit for maxfiles up to the sysctl value.\n         use ptr::null_mut;\n         use mem::size_of_val;\n-        use os::last_os_error;\n+        use io;\n \n         // Fetch the kern.maxfilesperproc value\n         let mut mib: [libc::c_int; 2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n         let mut maxfiles: libc::c_int = 0;\n         let mut size: libc::size_t = size_of_val(&maxfiles) as libc::size_t;\n         if sysctl(&mut mib[0], 2, &mut maxfiles as *mut libc::c_int as *mut libc::c_void, &mut size,\n                   null_mut(), 0) != 0 {\n-            let err = last_os_error();\n+            let err = io::Error::last_os_error();\n             panic!(\"raise_fd_limit: error calling sysctl: {}\", err);\n         }\n \n         // Fetch the current resource limits\n         let mut rlim = rlimit{rlim_cur: 0, rlim_max: 0};\n         if getrlimit(RLIMIT_NOFILE, &mut rlim) != 0 {\n-            let err = last_os_error();\n+            let err = io::Error::last_os_error();\n             panic!(\"raise_fd_limit: error calling getrlimit: {}\", err);\n         }\n \n@@ -165,7 +165,7 @@ mod darwin_fd_limit {\n \n         // Set our newly-increased resource limit\n         if setrlimit(RLIMIT_NOFILE, &rlim) != 0 {\n-            let err = last_os_error();\n+            let err = io::Error::last_os_error();\n             panic!(\"raise_fd_limit: error calling setrlimit: {}\", err);\n         }\n     }"}, {"sha": "7aba40dc6be89908d07accb551d74aa20469cd0e", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -254,7 +254,6 @@ mod imp {\n     use io;\n     use mem;\n     use old_io::{IoResult, IoError};\n-    use os;\n     use rand::Rng;\n     use libc::types::os::arch::extra::{LONG_PTR};\n     use libc::{DWORD, BYTE, LPCSTR, BOOL};"}, {"sha": "f534a33d8cc62a23da74522159d759dbf7c2f917", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -135,13 +135,6 @@ impl FileDesc {\n             _ => Err(super::last_error()),\n         }\n     }\n-\n-    /// Extract the actual filedescriptor without closing it.\n-    pub fn unwrap(self) -> fd_t {\n-        let fd = self.fd;\n-        unsafe { mem::forget(self) };\n-        fd\n-    }\n }\n \n impl Drop for FileDesc {"}, {"sha": "414083bc41f4b9b2957c84f61ca5205d1aad724b", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -24,7 +24,6 @@ use old_io::process::{ProcessExit, ExitStatus};\n use old_io::{IoResult, IoError};\n use old_io;\n use fs::PathExt;\n-use os;\n use old_path::{BytesContainer, GenericPath};\n use ptr;\n use str;"}, {"sha": "4a977fe02c4335200e60f33ef438402c6b970482", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30532884f83c4346f736dee5df03e812bde94ddc/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=30532884f83c4346f736dee5df03e812bde94ddc", "patch": "@@ -161,10 +161,6 @@ enum Status {\n     /// currently being considered for addition/removal.\n     Active,\n \n-    /// Represents a feature gate that is temporarily enabling deprecated behavior.\n-    /// This gate will never be accepted.\n-    Deprecated,\n-\n     /// Represents a feature which has since been removed (it was once Active)\n     Removed,\n \n@@ -699,13 +695,6 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n                         Some(&(name, _, Active)) => {\n                             cx.features.push(name);\n                         }\n-                        Some(&(name, _, Deprecated)) => {\n-                            cx.features.push(name);\n-                            span_handler.span_warn(\n-                                mi.span,\n-                                \"feature is deprecated and will only be available \\\n-                                 for a limited time, please rewrite code that relies on it\");\n-                        }\n                         Some(&(_, _, Removed)) => {\n                             span_handler.span_err(mi.span, \"feature has been removed\");\n                         }"}]}