{"sha": "2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMjFkZjhhM2ZkN2E2OGJhOWY1MjM4OWVhZDdmMDZmMTMxOTBjMTI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-01-22T00:47:57Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-01-26T15:02:08Z"}, "message": "Workaround presence of LLVM library in stage0/lib\n\nThis commit works around the newly-introduced LLVM shared library.\n\nThis is needed such that llvm-config run from\nlibrustc_llvm's build script can correctly locate it's own LLVM, not the\none in stage0/lib. The LLVM build system uses the DT_RUNPATH/RUNPATH\nheader within the llvm-config binary, which we want to use, but because\nCargo always adds the host compiler's \"libdir\" (stage0/lib in our\ncase) to the dynamic linker's search path, we weren't properly finding\nthe freshly-built LLVM in llvm/lib. By restoring the environment\nvariable setting the search path to what bootstrap sees, the problem is\nresolved and librustc_llvm correctly links and finds the appropriate\nLLVM.\n\nSeveral run-make-fulldeps tests are also updated with similar handling.", "tree": {"sha": "c8226fed3da77b0c51cd998e6dac74201109a6ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8226fed3da77b0c51cd998e6dac74201109a6ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "html_url": "https://github.com/rust-lang/rust/commit/2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f030e114186890612872c89498cbc914c0220f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f030e114186890612872c89498cbc914c0220f", "html_url": "https://github.com/rust-lang/rust/commit/b7f030e114186890612872c89498cbc914c0220f"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "f742bce180c05e82040394dc2fdfe929d1d3715f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -21,7 +21,7 @@ use crate::install;\n use crate::native;\n use crate::test;\n use crate::tool;\n-use crate::util::{add_lib_path, exe, libdir};\n+use crate::util::{self, add_lib_path, exe, libdir};\n use crate::{Build, DocTests, Mode, GitRepo};\n \n pub use crate::Compiler;\n@@ -791,6 +791,13 @@ impl<'a> Builder<'a> {\n             .env(\"CARGO_TARGET_DIR\", out_dir)\n             .arg(cmd);\n \n+        // See comment in librustc_llvm/build.rs for why this is necessary, largely llvm-config\n+        // needs to not accidentally link to libLLVM in stage0/lib.\n+        cargo.env(\"REAL_LIBRARY_PATH_VAR\", &util::dylib_path_var());\n+        if let Some(e) = env::var_os(util::dylib_path_var()) {\n+            cargo.env(\"REAL_LIBRARY_PATH\", e);\n+        }\n+\n         if cmd != \"install\" {\n             cargo.arg(\"--target\")\n                  .arg(target);"}, {"sha": "ec04dee6c32f0cc2d75da588394292bce7fcc781", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -712,6 +712,7 @@ pub fn build_codegen_backend(builder: &Builder,\n             if builder.is_rust_llvm(target) && backend != \"emscripten\" {\n                 cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n             }\n+\n             cargo.env(\"LLVM_CONFIG\", &llvm_config);\n             if backend != \"emscripten\" {\n                 let target_config = builder.config.target_config.get(&target);"}, {"sha": "37c6c040da8e8e28b848e9d5c59ed0b2da281d6e", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -70,7 +70,11 @@ pub fn dylib_path_var() -> &'static str {\n /// Parses the `dylib_path_var()` environment variable, returning a list of\n /// paths that are members of this lookup path.\n pub fn dylib_path() -> Vec<PathBuf> {\n-    env::split_paths(&env::var_os(dylib_path_var()).unwrap_or_default()).collect()\n+    let var = match env::var_os(dylib_path_var()) {\n+        Some(v) => v,\n+        None => return vec![],\n+    };\n+    env::split_paths(&var).collect()\n }\n \n /// `push` all components to `buf`. On windows, append `.exe` to the last component."}, {"sha": "c66c5c9249087ba6134efaca46c03ee0a81b13bc", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -23,6 +23,25 @@ macro_rules! t {\n     };\n }\n \n+// Because Cargo adds the compiler's dylib path to our library search path, llvm-config may\n+// break: the dylib path for the compiler, as of this writing, contains a copy of the LLVM\n+// shared library, which means that when our freshly built llvm-config goes to load it's\n+// associated LLVM, it actually loads the compiler's LLVM. In particular when building the first\n+// compiler (i.e., in stage 0) that's a problem, as the compiler's LLVM is likely different from\n+// the one we want to use. As such, we restore the environment to what bootstrap saw. This isn't\n+// perfect -- we might actually want to see something from Cargo's added library paths -- but\n+// for now it works.\n+pub fn restore_library_path() {\n+    println!(\"cargo:rerun-if-env-changed=REAL_LIBRARY_PATH_VAR\");\n+    println!(\"cargo:rerun-if-env-changed=REAL_LIBRARY_PATH\");\n+    let key = env::var_os(\"REAL_LIBRARY_PATH_VAR\").expect(\"REAL_LIBRARY_PATH_VAR\");\n+    if let Some(env) = env::var_os(\"REAL_LIBRARY_PATH\") {\n+        env::set_var(&key, &env);\n+    } else {\n+        env::remove_var(&key);\n+    }\n+}\n+\n pub fn run(cmd: &mut Command) {\n     println!(\"running: {:?}\", cmd);\n     run_silent(cmd);"}, {"sha": "b42d775deb393f45b70c8904cf3ea5bd1814ddb0", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"asan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "cd91fcb2995eeb41ab50471cc2f9d05f9b31a7fe", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -24,6 +24,8 @@ fn main() {\n         return;\n     }\n \n+    build_helper::restore_library_path();\n+\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n         .map(PathBuf::from)"}, {"sha": "ad528bb03902c8f39d963de6af07297e89adc943", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"lsan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "085514b5a01084d15e25d7d2c73c4e3254962cb3", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"msan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "0db3db392dddcd1bd19292316099eb3206119e02", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"tsan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "6992dab1a1bf12898be8bc9040ff1fa78679e018", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -9,7 +9,7 @@ all: staticlib.rs upstream.rs\n \n \t# Check No LTO\n \t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n \t# Make sure the upstream object file was included\n \tls $(TMPDIR)/upstream.*.rcgu.o\n \n@@ -19,5 +19,5 @@ all: staticlib.rs upstream.rs\n \t# Check ThinLTO\n \t$(RUSTC) upstream.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin\n \t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n \tls $(TMPDIR)/upstream.*.rcgu.o"}, {"sha": "4d1fb7b9537397830e4e6b56c3746cc36b243471", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2d21df8a3fd7a68ba9f52389ead7f06f13190c12/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=2d21df8a3fd7a68ba9f52389ead7f06f13190c12", "patch": "@@ -5,8 +5,9 @@\n # LLVM bitcode files (as used by linker LTO plugins) when compiling with\n # -Z cross-lang-lto.\n \n-ASSERT_IS_BITCODE_OBJ=llvm-bcanalyzer # this only succeeds for bitcode files\n-EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; llvm-ar x $(1))\n+# this only succeeds for bitcode files\n+ASSERT_IS_BITCODE_OBJ=($(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-bcanalyzer $(1))\n+EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x $(1))\n \n BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1\n BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1 --emit=obj\n@@ -16,31 +17,31 @@ all: staticlib staticlib-fat-lto staticlib-thin-lto rlib exe cdylib rdylib\n staticlib: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib.a\n \t$(call EXTRACT_OBJS, liblib.a)\n-\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n staticlib-fat-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-fat-lto.a -Clto=fat\n \t$(call EXTRACT_OBJS, liblib-fat-lto.a)\n-\tfor file in $(TMPDIR)/liblib-fat-lto.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib-fat-lto.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n staticlib-thin-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-thin-lto.a -Clto=thin\n \t$(call EXTRACT_OBJS, liblib-thin-lto.a)\n-\tfor file in $(TMPDIR)/liblib-thin-lto.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib-thin-lto.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n rlib: lib.rs\n \t$(BUILD_LIB) --crate-type=rlib -o $(TMPDIR)/liblib.rlib\n \t$(call EXTRACT_OBJS, liblib.rlib)\n-\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n cdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=cdylib --emit=obj -o $(TMPDIR)/cdylib.o\n-\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/cdylib.o\n+\t$(call ASSERT_IS_BITCODE_OBJ, $(TMPDIR)/cdylib.o)\n \n rdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=dylib --emit=obj -o $(TMPDIR)/rdylib.o\n-\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/rdylib.o\n+\t$(call ASSERT_IS_BITCODE_OBJ, $(TMPDIR)/rdylib.o)\n \n exe: lib.rs\n \t$(BUILD_EXE) -o $(TMPDIR)/exe.o\n-\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/exe.o\n+\t$(call ASSERT_IS_BITCODE_OBJ, $(TMPDIR)/exe.o)"}]}