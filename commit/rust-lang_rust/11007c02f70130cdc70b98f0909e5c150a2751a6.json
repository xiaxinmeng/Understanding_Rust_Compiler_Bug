{"sha": "11007c02f70130cdc70b98f0909e5c150a2751a6", "node_id": "C_kwDOAAsO6NoAKDExMDA3YzAyZjcwMTMwY2RjNzBiOThmMDkwOWU1YzE1MGEyNzUxYTY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-25T19:42:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-25T19:42:58Z"}, "message": "Use fma(f) libm function for simd_fma intrinsic", "tree": {"sha": "49cc2c670ef21603890d8a4e782e76f08139f134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cc2c670ef21603890d8a4e782e76f08139f134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11007c02f70130cdc70b98f0909e5c150a2751a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11007c02f70130cdc70b98f0909e5c150a2751a6", "html_url": "https://github.com/rust-lang/rust/commit/11007c02f70130cdc70b98f0909e5c150a2751a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11007c02f70130cdc70b98f0909e5c150a2751a6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c030e2425bb1fdb165ac87797076072ec991970", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c030e2425bb1fdb165ac87797076072ec991970", "html_url": "https://github.com/rust-lang/rust/commit/3c030e2425bb1fdb165ac87797076072ec991970"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "54e13b090abda43a8d66147207b16c09c27dae64", "filename": "patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11007c02f70130cdc70b98f0909e5c150a2751a6/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/11007c02f70130cdc70b98f0909e5c150a2751a6/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=11007c02f70130cdc70b98f0909e5c150a2751a6", "patch": "@@ -102,26 +102,6 @@ index 6a8ecd3..68fcb49 100644\n          }\n      }\n  }\n-diff --git a/crates/core_simd/tests/ops_macros.rs b/crates/core_simd/tests/ops_macros.rs\n-index 31b7ee2..bd04b3c 100644\n---- a/crates/core_simd/tests/ops_macros.rs\n-+++ b/crates/core_simd/tests/ops_macros.rs\n-@@ -604,6 +606,7 @@ macro_rules! impl_float_tests {\n-                         )\n-                     }\n- \n-+                    /*\n-                     fn mul_add<const LANES: usize>() {\n-                         test_helpers::test_ternary_elementwise(\n-                             &Vector::<LANES>::mul_add,\n-@@ -611,6 +614,7 @@ macro_rules! impl_float_tests {\n-                             &|_, _, _| true,\n-                         )\n-                     }\n-+                    */\n-                 }\n-             }\n-         }\n -- \n 2.26.2.7.g19db9cfb68\n "}, {"sha": "d1ca9edf2e0f1bb578889566bc8384c5bf5bfc1c", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/11007c02f70130cdc70b98f0909e5c150a2751a6/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11007c02f70130cdc70b98f0909e5c150a2751a6/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=11007c02f70130cdc70b98f0909e5c150a2751a6", "patch": "@@ -322,20 +322,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n             assert_eq!(a.layout(), b.layout());\n             assert_eq!(a.layout(), c.layout());\n-            let layout = a.layout();\n+            assert_eq!(a.layout(), ret.layout());\n \n-            let (lane_count, _lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n-            let (ret_lane_count, ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n-            assert_eq!(lane_count, ret_lane_count);\n-            let ret_lane_layout = fx.layout_of(ret_lane_ty);\n+            let layout = a.layout();\n+            let (lane_count, lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n \n             for lane in 0..lane_count {\n-                let a_lane = a.value_lane(fx, lane).load_scalar(fx);\n-                let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n-                let c_lane = c.value_lane(fx, lane).load_scalar(fx);\n+                let a_lane = a.value_lane(fx, lane);\n+                let b_lane = b.value_lane(fx, lane);\n+                let c_lane = c.value_lane(fx, lane);\n \n-                let mul_lane = fx.bcx.ins().fmul(a_lane, b_lane);\n-                let res_lane = CValue::by_val(fx.bcx.ins().fadd(mul_lane, c_lane), ret_lane_layout);\n+                let res_lane = match lane_ty.kind() {\n+                    ty::Float(FloatTy::F32) => fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty),\n+                    ty::Float(FloatTy::F64) => fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty),\n+                    _ => unreachable!(),\n+                };\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }"}]}