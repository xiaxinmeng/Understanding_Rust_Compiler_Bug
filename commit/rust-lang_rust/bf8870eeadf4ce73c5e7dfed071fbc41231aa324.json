{"sha": "bf8870eeadf4ce73c5e7dfed071fbc41231aa324", "node_id": "C_kwDOAAsO6NoAKGJmODg3MGVlYWRmNGNlNzNjNWU3ZGZlZDA3MWZiYzQxMjMxYWEzMjQ", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-18T19:06:06Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-18T19:06:06Z"}, "message": "further refactor of `needless_return`", "tree": {"sha": "833bbc88c850f612da84f7bb30d01da79d7ce52b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/833bbc88c850f612da84f7bb30d01da79d7ce52b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf8870eeadf4ce73c5e7dfed071fbc41231aa324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8870eeadf4ce73c5e7dfed071fbc41231aa324", "html_url": "https://github.com/rust-lang/rust/commit/bf8870eeadf4ce73c5e7dfed071fbc41231aa324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf8870eeadf4ce73c5e7dfed071fbc41231aa324/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1dbdcf332e1a91666999d25ee6a0900512dda82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dbdcf332e1a91666999d25ee6a0900512dda82", "html_url": "https://github.com/rust-lang/rust/commit/d1dbdcf332e1a91666999d25ee6a0900512dda82"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "e4692a8d84beb12d3c9676a1a87f6f365717fa53", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bf8870eeadf4ce73c5e7dfed071fbc41231aa324/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8870eeadf4ce73c5e7dfed071fbc41231aa324/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=bf8870eeadf4ce73c5e7dfed071fbc41231aa324", "patch": "@@ -78,7 +78,6 @@ impl RetReplacement {\n             Self::Empty => \"remove `return`\",\n             Self::Block => \"replace `return` with an empty block\",\n             Self::Unit => \"replace `return` with a unit value\",\n-\n         }\n     }\n }\n@@ -161,37 +160,33 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, body.value, Some(body.value.span), replacement);\n+                check_final_expr(cx, body.value, body.value.span, replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                if let ExprKind::Block(block, _) = body.value.kind {\n-                    check_block_return(cx, block);\n-                }\n+                check_block_return(cx, &body.value.kind);\n             },\n         }\n     }\n }\n \n-fn check_block_return<'tcx>(cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n-    if let Some(expr) = block.expr {\n-        check_final_expr(cx, expr, Some(expr.span), RetReplacement::Empty);\n-    } else if let Some(stmt) = block.stmts.iter().last() {\n-        match stmt.kind {\n-            StmtKind::Expr(expr) | StmtKind::Semi(expr) => {\n-                check_final_expr(cx, expr, Some(stmt.span), RetReplacement::Empty);\n-            },\n-            _ => (),\n+// if `expr` is a block, check if there are needless returns in it\n+fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>) {\n+    if let ExprKind::Block(block, _) = expr_kind {\n+        if let Some(block_expr) = block.expr {\n+            check_final_expr(cx, block_expr, block_expr.span, RetReplacement::Empty);\n+        } else if let Some(stmt) = block.stmts.iter().last() {\n+            match stmt.kind {\n+                StmtKind::Expr(expr) | StmtKind::Semi(expr) => {\n+                    check_final_expr(cx, expr, stmt.span, RetReplacement::Empty);\n+                },\n+                _ => (),\n+            }\n         }\n     }\n }\n \n-fn check_final_expr<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx Expr<'tcx>,\n-    span: Option<Span>,\n-    replacement: RetReplacement,\n-) {\n-    match expr.kind {\n+fn check_final_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, span: Span, replacement: RetReplacement) {\n+    match &expr.peel_drop_temps().kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n             if cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n@@ -200,23 +195,17 @@ fn check_final_expr<'tcx>(\n                     emit_return_lint(\n                         cx,\n                         inner.map_or(expr.hir_id, |inner| inner.hir_id),\n-                        span.expect(\"`else return` is not possible\"),\n+                        span,\n                         inner.as_ref().map(|i| i.span),\n                         replacement,\n                     );\n                 }\n             }\n         },\n-        // a whole block? check it!\n-        ExprKind::Block(block, _) => {\n-            check_block_return(cx, block);\n-        },\n         ExprKind::If(_, then, else_clause_opt) => {\n-            if let ExprKind::Block(ifblock, _) = then.kind {\n-                check_block_return(cx, ifblock);\n-            }\n+            check_block_return(cx, &then.kind);\n             if let Some(else_clause) = else_clause_opt {\n-                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n+                check_block_return(cx, &else_clause.kind)\n             }\n         },\n         // a match expr, check all arms\n@@ -225,11 +214,11 @@ fn check_final_expr<'tcx>(\n         // (except for unit type functions) so we don't match it\n         ExprKind::Match(_, arms, MatchSource::Normal) => {\n             for arm in arms.iter() {\n-                check_final_expr(cx, arm.body, Some(arm.body.span), RetReplacement::Unit);\n+                check_final_expr(cx, arm.body, arm.body.span, RetReplacement::Unit);\n             }\n         },\n-        ExprKind::DropTemps(expr) => check_final_expr(cx, expr, None, RetReplacement::Empty),\n-        _ => (),\n+        // if it's a whole block, check it\n+        other_expr_kind => check_block_return(cx, &other_expr_kind),\n     }\n }\n "}]}