{"sha": "249b6fee9120efb6d6bb8f559524c478b2ab4b74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OWI2ZmVlOTEyMGVmYjZkNmJiOGY1NTk1MjRjNDc4YjJhYjRiNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-03T09:23:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-03T09:23:48Z"}, "message": "Auto merge of #6415 - flip1995:rollup-fz7872l, r=flip1995\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #6308 (add `internal-lints` feature to enable clippys internal lints (off by default))\n - #6395 (switch Version/VersionReq usages to RustcVersion )\n - #6402 (Add Collapsible match lint)\n - #6407 (CONTRIBUTING: update bors queue url from buildbot2.rlo to bors.rlo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup\n\nchangelog: rollup", "tree": {"sha": "7c8821786ade5fbc492042c8aa70274a3f8cb719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8821786ade5fbc492042c8aa70274a3f8cb719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/249b6fee9120efb6d6bb8f559524c478b2ab4b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/249b6fee9120efb6d6bb8f559524c478b2ab4b74", "html_url": "https://github.com/rust-lang/rust/commit/249b6fee9120efb6d6bb8f559524c478b2ab4b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/249b6fee9120efb6d6bb8f559524c478b2ab4b74/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4785da6e37ae0a85f71fe200e5a2aa82f4fec85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4785da6e37ae0a85f71fe200e5a2aa82f4fec85f", "html_url": "https://github.com/rust-lang/rust/commit/4785da6e37ae0a85f71fe200e5a2aa82f4fec85f"}, {"sha": "c9da8667566a37cd2808892009cd770ea0ae4a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9da8667566a37cd2808892009cd770ea0ae4a79", "html_url": "https://github.com/rust-lang/rust/commit/c9da8667566a37cd2808892009cd770ea0ae4a79"}], "stats": {"total": 1279, "additions": 1041, "deletions": 238}, "files": [{"sha": "784463fe0df9e71a3e22b871c006c106329673ee", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -128,14 +128,14 @@ jobs:\n         SYSROOT=$(rustc --print sysroot)\n         echo \"$SYSROOT/bin\" >> $GITHUB_PATH\n \n-    - name: Build\n-      run: cargo build --features deny-warnings\n+    - name: Build with internal lints\n+      run: cargo build --features deny-warnings,internal-lints\n \n-    - name: Test\n-      run: cargo test --features deny-warnings\n+    - name: Test with internal lints\n+      run: cargo test --features deny-warnings,internal-lints\n \n-    - name: Test clippy_lints\n-      run: cargo test --features deny-warnings\n+    - name: Test clippy_lints with internal lints\n+      run: cargo test --features deny-warnings,internal-lints\n       working-directory: clippy_lints\n \n     - name: Test rustc_tools_util"}, {"sha": "e65e7cc639f7a256860ffe4f3066f263111a31a9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -1770,6 +1770,7 @@ Released 2018-09-13\n [`cmp_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\n [`cognitive_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n+[`collapsible_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator"}, {"sha": "f8c26e2d456d73bdfa0512fdb76f59bdc58bd31d", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -14,11 +14,16 @@ All contributors are expected to follow the [Rust Code of Conduct].\n \n - [Contributing to Clippy](#contributing-to-clippy)\n   - [Getting started](#getting-started)\n+    - [High level approach](#high-level-approach)\n     - [Finding something to fix/improve](#finding-something-to-fiximprove)\n   - [Writing code](#writing-code)\n   - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n   - [How Clippy works](#how-clippy-works)\n   - [Fixing build failures caused by Rust](#fixing-build-failures-caused-by-rust)\n+    - [Patching git-subtree to work with big repos](#patching-git-subtree-to-work-with-big-repos)\n+    - [Performing the sync](#performing-the-sync)\n+    - [Syncing back changes in Clippy to [`rust-lang/rust`]](#syncing-back-changes-in-clippy-to-rust-langrust)\n+    - [Defining remotes](#defining-remotes)\n   - [Issue and PR triage](#issue-and-pr-triage)\n   - [Bors and Homu](#bors-and-homu)\n   - [Contributions](#contributions)\n@@ -320,8 +325,8 @@ commands [here][homu_instructions].\n [l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash\n [l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug\n [homu]: https://github.com/rust-lang/homu\n-[homu_instructions]: https://buildbot2.rust-lang.org/homu/\n-[homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n+[homu_instructions]: https://bors.rust-lang.org/\n+[homu_queue]: https://bors.rust-lang.org/queue/clippy\n \n ## Contributions\n "}, {"sha": "a765390c6032d4c83694367683988b4b1c5e3bc0", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -32,7 +32,7 @@ path = \"src/driver.rs\"\n clippy_lints = { version = \"0.0.212\", path = \"clippy_lints\" }\n # end automatic update\n semver = \"0.11\"\n-rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n+rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n tempfile = { version = \"3.1.0\", optional = true }\n \n [dev-dependencies]\n@@ -49,8 +49,9 @@ derive-new = \"0.5\"\n rustc-workspace-hack = \"1.0.0\"\n \n [build-dependencies]\n-rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n+rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n \n [features]\n deny-warnings = []\n integration = [\"tempfile\"]\n+internal-lints = [\"clippy_lints/internal-lints\"]"}, {"sha": "f51c45e9eb5931a170c16c0dd187364fc2d510c7", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -146,16 +146,30 @@ pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String>\n }\n \n #[must_use]\n-pub fn gen_register_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    let pre = \"    store.register_lints(&[\".to_string();\n-    let post = \"    ]);\".to_string();\n-    let mut inner = lints\n+pub fn gen_register_lint_list<'a>(\n+    internal_lints: impl Iterator<Item = &'a Lint>,\n+    usable_lints: impl Iterator<Item = &'a Lint>,\n+) -> Vec<String> {\n+    let header = \"    store.register_lints(&[\".to_string();\n+    let footer = \"    ]);\".to_string();\n+    let internal_lints = internal_lints\n+        .sorted_by_key(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n+        .map(|l| {\n+            format!(\n+                \"        #[cfg(feature = \\\"internal-lints\\\")]\\n        &{}::{},\",\n+                l.module,\n+                l.name.to_uppercase()\n+            )\n+        });\n+    let other_lints = usable_lints\n+        .sorted_by_key(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n         .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n-        .sorted()\n-        .collect::<Vec<String>>();\n-    inner.insert(0, pre);\n-    inner.push(post);\n-    inner\n+        .sorted();\n+    let mut lint_list = vec![header];\n+    lint_list.extend(internal_lints);\n+    lint_list.extend(other_lints);\n+    lint_list.push(footer);\n+    lint_list\n }\n \n /// Gathers all files in `src/clippy_lints` and gathers all lints inside"}, {"sha": "edf6c5f57a49766d44f8a353c55937ac0b015354", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -68,7 +68,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end register lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(usable_lints.iter().chain(internal_lints.iter())),\n+        || gen_register_lint_list(internal_lints.iter(), usable_lints.iter()),\n     )\n     .changed;\n "}, {"sha": "7697eba650aca9499c95b1adf6e885ec9f885797", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -28,6 +28,7 @@ smallvec = { version = \"1\", features = [\"union\"] }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n semver = \"0.11\"\n+rustc-semver=\"1.1.0\"\n # NOTE: cargo requires serde feat in its url dep\n # see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n url = { version =  \"2.1.0\", features = [\"serde\"] }\n@@ -36,3 +37,5 @@ syn = { version = \"1\", features = [\"full\"] }\n \n [features]\n deny-warnings = []\n+# build clippy with internal lints enabled, off by default\n+internal-lints = []"}, {"sha": "a34ba2d00a8c7bc71873bcb692b8ad7498542543", "filename": "clippy_lints/src/collapsible_match.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -0,0 +1,172 @@\n+use crate::utils::visitors::LocalUsedVisitor;\n+use crate::utils::{span_lint_and_then, SpanlessEq};\n+use if_chain::if_chain;\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{MultiSpan, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Finds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together\n+    /// without adding any branches.\n+    ///\n+    /// Note that this lint is not intended to find _all_ cases where nested match patterns can be merged, but only\n+    /// cases where merging would most likely make the code more readable.\n+    ///\n+    /// **Why is this bad?** It is unnecessarily verbose and complex.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn func(opt: Option<Result<u64, String>>) {\n+    ///     let n = match opt {\n+    ///         Some(n) => match n {\n+    ///             Ok(n) => n,\n+    ///             _ => return,\n+    ///         }\n+    ///         None => return,\n+    ///     };\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn func(opt: Option<Result<u64, String>>) {\n+    ///     let n = match opt {\n+    ///         Some(Ok(n)) => n,\n+    ///         _ => return,\n+    ///     };\n+    /// }\n+    /// ```\n+    pub COLLAPSIBLE_MATCH,\n+    style,\n+    \"Nested `match` or `if let` expressions where the patterns may be \\\"collapsed\\\" together.\"\n+}\n+\n+declare_lint_pass!(CollapsibleMatch => [COLLAPSIBLE_MATCH]);\n+\n+impl<'tcx> LateLintPass<'tcx> for CollapsibleMatch {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n+        if let ExprKind::Match(_expr, arms, _source) = expr.kind {\n+            if let Some(wild_arm) = arms.iter().rfind(|arm| arm_is_wild_like(arm, cx.tcx)) {\n+                for arm in arms {\n+                    check_arm(arm, wild_arm, cx);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n+    if_chain! {\n+        let expr = strip_singleton_blocks(arm.body);\n+        if let ExprKind::Match(expr_in, arms_inner, _) = expr.kind;\n+        // the outer arm pattern and the inner match\n+        if expr_in.span.ctxt() == arm.pat.span.ctxt();\n+        // there must be no more than two arms in the inner match for this lint\n+        if arms_inner.len() == 2;\n+        // no if guards on the inner match\n+        if arms_inner.iter().all(|arm| arm.guard.is_none());\n+        // match expression must be a local binding\n+        // match <local> { .. }\n+        if let ExprKind::Path(QPath::Resolved(None, path)) = expr_in.kind;\n+        if let Res::Local(binding_id) = path.res;\n+        // one of the branches must be \"wild-like\"\n+        if let Some(wild_inner_arm_idx) = arms_inner.iter().rposition(|arm_inner| arm_is_wild_like(arm_inner, cx.tcx));\n+        let (wild_inner_arm, non_wild_inner_arm) =\n+            (&arms_inner[wild_inner_arm_idx], &arms_inner[1 - wild_inner_arm_idx]);\n+        if !pat_contains_or(non_wild_inner_arm.pat);\n+        // the binding must come from the pattern of the containing match arm\n+        // ..<local>.. => match <local> { .. }\n+        if let Some(binding_span) = find_pat_binding(arm.pat, binding_id);\n+        // the \"wild-like\" branches must be equal\n+        if SpanlessEq::new(cx).eq_expr(wild_inner_arm.body, wild_outer_arm.body);\n+        // the binding must not be used in the if guard\n+        if !matches!(arm.guard, Some(Guard::If(guard)) if LocalUsedVisitor::new(binding_id).check_expr(guard));\n+        // ...or anywhere in the inner match\n+        if !arms_inner.iter().any(|arm| LocalUsedVisitor::new(binding_id).check_arm(arm));\n+        then {\n+            span_lint_and_then(\n+                cx,\n+                COLLAPSIBLE_MATCH,\n+                expr.span,\n+                \"Unnecessary nested match\",\n+                |diag| {\n+                    let mut help_span = MultiSpan::from_spans(vec![binding_span, non_wild_inner_arm.pat.span]);\n+                    help_span.push_span_label(binding_span, \"Replace this binding\".into());\n+                    help_span.push_span_label(non_wild_inner_arm.pat.span, \"with this pattern\".into());\n+                    diag.span_help(help_span, \"The outer pattern can be modified to include the inner pattern.\");\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+fn strip_singleton_blocks<'hir>(mut expr: &'hir Expr<'hir>) -> &'hir Expr<'hir> {\n+    while let ExprKind::Block(block, _) = expr.kind {\n+        match (block.stmts, block.expr) {\n+            ([stmt], None) => match stmt.kind {\n+                StmtKind::Expr(e) | StmtKind::Semi(e) => expr = e,\n+                _ => break,\n+            },\n+            ([], Some(e)) => expr = e,\n+            _ => break,\n+        }\n+    }\n+    expr\n+}\n+\n+/// A \"wild-like\" pattern is wild (\"_\") or `None`.\n+/// For this lint to apply, both the outer and inner match expressions\n+/// must have \"wild-like\" branches that can be combined.\n+fn arm_is_wild_like(arm: &Arm<'_>, tcx: TyCtxt<'_>) -> bool {\n+    if arm.guard.is_some() {\n+        return false;\n+    }\n+    match arm.pat.kind {\n+        PatKind::Binding(..) | PatKind::Wild => true,\n+        PatKind::Path(QPath::Resolved(None, path)) if is_none_ctor(path.res, tcx) => true,\n+        _ => false,\n+    }\n+}\n+\n+fn find_pat_binding(pat: &Pat<'_>, hir_id: HirId) -> Option<Span> {\n+    let mut span = None;\n+    pat.walk_short(|p| match &p.kind {\n+        // ignore OR patterns\n+        PatKind::Or(_) => false,\n+        PatKind::Binding(_bm, _, _ident, _) => {\n+            let found = p.hir_id == hir_id;\n+            if found {\n+                span = Some(p.span);\n+            }\n+            !found\n+        },\n+        _ => true,\n+    });\n+    span\n+}\n+\n+fn pat_contains_or(pat: &Pat<'_>) -> bool {\n+    let mut result = false;\n+    pat.walk(|p| {\n+        let is_or = matches!(p.kind, PatKind::Or(_));\n+        result |= is_or;\n+        !is_or\n+    });\n+    result\n+}\n+\n+fn is_none_ctor(res: Res, tcx: TyCtxt<'_>) -> bool {\n+    if let Some(none_id) = tcx.lang_items().option_none_variant() {\n+        if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Const), id) = res {\n+            if let Some(variant_id) = tcx.parent(id) {\n+                return variant_id == none_id;\n+            }\n+        }\n+    }\n+    false\n+}"}, {"sha": "f69f6f1412af97d0c35cfc044b887dd6111def9e", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -280,8 +280,7 @@ fn field_reassigned_by_stmt<'tcx>(this: &Stmt<'tcx>, binding_name: Symbol) -> Op\n         // only take assignments to fields where the left-hand side field is a field of\n         // the same binding as the previous statement\n         if let ExprKind::Field(ref binding, field_ident) = assign_lhs.kind;\n-        if let ExprKind::Path(ref qpath) = binding.kind;\n-        if let QPath::Resolved(_, path) = qpath;\n+        if let ExprKind::Path(QPath::Resolved(_, path)) = binding.kind;\n         if let Some(second_binding_name) = path.segments.last();\n         if second_binding_name.ident.name == binding_name;\n         then {"}, {"sha": "1194bd7e55e2566e5ad5c20f741d8888829e5e5f", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -41,8 +41,7 @@ declare_lint_pass!(OkIfLet => [IF_LET_SOME_RESULT]);\n impl<'tcx> LateLintPass<'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n-            if let ExprKind::Match(ref op, ref body, source) = expr.kind; //test if expr is a match\n-            if let MatchSource::IfLetDesugar { .. } = source; //test if it is an If Let\n+            if let ExprKind::Match(ref op, ref body, MatchSource::IfLetDesugar { .. }) = expr.kind; //test if expr is if let\n             if let ExprKind::MethodCall(_, ok_span, ref result_types, _) = op.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;"}, {"sha": "03e95c9e27f6ae241627945d537a629306da4d73", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -68,8 +68,7 @@ fn expr_match(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 if_chain! {\n                     if let StmtKind::Semi(expr, ..) = &stmt.kind;\n                     // make sure it's a break, otherwise we want to skip\n-                    if let ExprKind::Break(.., break_expr) = &expr.kind;\n-                    if let Some(break_expr) = break_expr;\n+                    if let ExprKind::Break(.., Some(break_expr)) = &expr.kind;\n                     then {\n                             lint(cx, expr.span, break_expr.span, LINT_BREAK);\n                     }"}, {"sha": "3a01acd8fdc97a94e779a93ce6b3123d43fd4662", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -59,8 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n             if let Some(target) = subtracts_one(cx, e);\n \n             // Extracting out the variable name\n-            if let ExprKind::Path(ref assign_path) = target.kind;\n-            if let QPath::Resolved(_, ref ares_path) = assign_path;\n+            if let ExprKind::Path(QPath::Resolved(_, ref ares_path)) = target.kind;\n \n             then {\n                 // Handle symmetric conditions in the if statement"}, {"sha": "a76595ed0897dd85ffa73afc66bfe79211d4392b", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -52,8 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(val) = cst.val;\n-            if let ConstValue::Scalar(element_count) = val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "9a448ab125686cf2ce405a7ca9c1a84416b800c7", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -43,8 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(val) = cst.val;\n-            if let ConstValue::Scalar(element_count) = val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "0d2d95324c4f7556f400230f5b33e852f9b2099c", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -1,12 +1,11 @@\n+use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::intravisit;\n use rustc_hir::BindingAnnotation;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -66,10 +65,10 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(ref if_) = expr.kind;\n                 if let Some((ref cond, ref then, ref else_)) = higher::if_block(&if_);\n-                if !used_in_expr(cx, canonical_id, cond);\n+                if !LocalUsedVisitor::new(canonical_id).check_expr(cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.kind;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);\n-                if !used_in_expr(cx, canonical_id, value);\n+                if !LocalUsedVisitor::new(canonical_id).check_expr(value);\n                 then {\n                     let span = stmt.span.to(if_.span);\n \n@@ -136,32 +135,6 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n     }\n }\n \n-struct UsedVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    id: hir::HirId,\n-    used: bool,\n-}\n-\n-impl<'a, 'tcx> intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n-        if_chain! {\n-            if let hir::ExprKind::Path(ref qpath) = expr.kind;\n-            if let Res::Local(local_id) = qpath_res(self.cx, qpath, expr.hir_id);\n-            if self.id == local_id;\n-            then {\n-                self.used = true;\n-                return;\n-            }\n-        }\n-        intravisit::walk_expr(self, expr);\n-    }\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n-}\n-\n fn check_assign<'tcx>(\n     cx: &LateContext<'tcx>,\n     decl: hir::HirId,\n@@ -176,18 +149,10 @@ fn check_assign<'tcx>(\n         if let Res::Local(local_id) = qpath_res(cx, qpath, var.hir_id);\n         if decl == local_id;\n         then {\n-            let mut v = UsedVisitor {\n-                cx,\n-                id: decl,\n-                used: false,\n-            };\n-\n-            for s in block.stmts.iter().take(block.stmts.len()-1) {\n-                intravisit::walk_stmt(&mut v, s);\n+            let mut v = LocalUsedVisitor::new(decl);\n \n-                if v.used {\n-                    return None;\n-                }\n+            if block.stmts.iter().take(block.stmts.len()-1).any(|stmt| v.check_stmt(stmt)) {\n+                return None;\n             }\n \n             return Some(value);\n@@ -196,9 +161,3 @@ fn check_assign<'tcx>(\n \n     None\n }\n-\n-fn used_in_expr<'tcx>(cx: &LateContext<'tcx>, id: hir::HirId, expr: &'tcx hir::Expr<'_>) -> bool {\n-    let mut v = UsedVisitor { cx, id, used: false };\n-    intravisit::walk_expr(&mut v, expr);\n-    v.used\n-}"}, {"sha": "167e5b6b87fed21fa4d9f167fe8089becd77dfb7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -172,6 +172,7 @@ mod cargo_common_metadata;\n mod checked_conversions;\n mod cognitive_complexity;\n mod collapsible_if;\n+mod collapsible_match;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n@@ -498,6 +499,24 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n     store.register_lints(&[\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::DEFAULT_LINT,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::INVALID_PATHS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::PRODUCE_ICE,\n         &approx_const::APPROX_CONSTANT,\n         &arithmetic::FLOAT_ARITHMETIC,\n         &arithmetic::INTEGER_ARITHMETIC,\n@@ -531,6 +550,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &checked_conversions::CHECKED_CONVERSIONS,\n         &cognitive_complexity::COGNITIVE_COMPLEXITY,\n         &collapsible_if::COLLAPSIBLE_IF,\n+        &collapsible_match::COLLAPSIBLE_MATCH,\n         &comparison_chain::COMPARISON_CHAIN,\n         &copies::IFS_SAME_COND,\n         &copies::IF_SAME_THEN_ELSE,\n@@ -904,15 +924,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap_in_result::UNWRAP_IN_RESULT,\n         &use_self::USE_SELF,\n         &useless_conversion::USELESS_CONVERSION,\n-        &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n-        &utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n-        &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n-        &utils::internal_lints::DEFAULT_LINT,\n-        &utils::internal_lints::INVALID_PATHS,\n-        &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        &utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n-        &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n-        &utils::internal_lints::PRODUCE_ICE,\n         &vec::USELESS_VEC,\n         &vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n         &verbose_file_reads::VERBOSE_FILE_READS,\n@@ -930,14 +941,23 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n+\n+    // all the internal lints\n+    #[cfg(feature = \"internal-lints\")]\n+    {\n+        store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n+        store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n+        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n+        store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n+        store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n+        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n+        store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n+        store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n+        store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n+    }\n+    store.register_late_pass(|| box utils::author::Author);\n     store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n     store.register_late_pass(|| box serde_api::SerdeAPI);\n-    store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n-    store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n-    store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n-    store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n-    store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n-    store.register_late_pass(|| box utils::author::Author);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     store.register_late_pass(move || box types::Types::new(vec_box_size_threshold));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n@@ -960,28 +980,24 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box len_zero::LenZero);\n     store.register_late_pass(|| box attrs::Attributes);\n     store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n+    store.register_late_pass(|| box collapsible_match::CollapsibleMatch);\n     store.register_late_pass(|| box unicode::Unicode);\n     store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n \n-    let parsed_msrv = conf.msrv.as_ref().and_then(|s| {\n+    let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n             sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n             None\n         })\n     });\n \n-    let msrv = parsed_msrv.clone();\n-    store.register_late_pass(move || box methods::Methods::new(msrv.clone()));\n-    let msrv = parsed_msrv.clone();\n-    store.register_late_pass(move || box matches::Matches::new(msrv.clone()));\n-    let msrv = parsed_msrv.clone();\n-    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv.clone()));\n-    let msrv = parsed_msrv;\n-    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv.clone()));\n-\n+    store.register_late_pass(move || box methods::Methods::new(msrv));\n+    store.register_late_pass(move || box matches::Matches::new(msrv));\n+    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n+    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n@@ -1122,7 +1138,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n-    store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n@@ -1136,7 +1151,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n     store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n-    store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n     store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n     store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n@@ -1152,15 +1166,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box dereference::Dereferencing);\n     store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n-    store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n     store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n     store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n-\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n@@ -1177,7 +1189,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n-    store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n@@ -1186,7 +1197,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StrToString);\n     store.register_late_pass(|| box strings::StringToString);\n \n-\n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n         LintId::of(&arithmetic::INTEGER_ARITHMETIC),\n@@ -1318,6 +1328,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n     ]);\n \n+    #[cfg(feature = \"internal-lints\")]\n     store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n         LintId::of(&utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n         LintId::of(&utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n@@ -1351,6 +1362,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n+        LintId::of(&collapsible_match::COLLAPSIBLE_MATCH),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n@@ -1617,6 +1629,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n         LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n+        LintId::of(&collapsible_match::COLLAPSIBLE_MATCH),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&default::FIELD_REASSIGN_WITH_DEFAULT),\n         LintId::of(&doc::MISSING_SAFETY_DOC),"}, {"sha": "400148ab81dd997d20050228c4e6d2a39ebf0d69", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -2,6 +2,7 @@ use crate::consts::constant;\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n+use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n@@ -1919,8 +1920,7 @@ fn check_for_single_element_loop<'tcx>(\n     if_chain! {\n         if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arg_expr) = arg.kind;\n         if let PatKind::Binding(.., target, _) = pat.kind;\n-        if let ExprKind::Array(ref arg_expr_list) = arg_expr.kind;\n-        if let [arg_expression] = arg_expr_list;\n+        if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n         if let ExprKind::Path(ref list_item) = arg_expression.kind;\n         if let Some(list_item_name) = single_segment_path(list_item).map(|ps| ps.ident.name);\n         if let ExprKind::Block(ref block, _) = body.kind;\n@@ -2025,8 +2025,7 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n                 let node_str = cx.tcx.hir().get(hir_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n-                    if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                    if let BindingAnnotation::Mutable = bind_ann;\n+                    if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n                     then {\n                         return Some(hir_id);\n                     }\n@@ -2071,28 +2070,6 @@ fn pat_is_wild<'tcx>(pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n     }\n }\n \n-struct LocalUsedVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    local: HirId,\n-    used: bool,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if same_var(self.cx, expr, self.local) {\n-            self.used = true;\n-        } else {\n-            walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n struct VarVisitor<'a, 'tcx> {\n     /// context reference\n     cx: &'a LateContext<'tcx>,\n@@ -2126,11 +2103,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n             then {\n                 let index_used_directly = same_var(self.cx, idx, self.var);\n                 let indexed_indirectly = {\n-                    let mut used_visitor = LocalUsedVisitor {\n-                        cx: self.cx,\n-                        local: self.var,\n-                        used: false,\n-                    };\n+                    let mut used_visitor = LocalUsedVisitor::new(self.var);\n                     walk_expr(&mut used_visitor, idx);\n                     used_visitor.used\n                 };"}, {"sha": "91849e748878f645b6453e1571cf8357f0fab61f", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -4,17 +4,11 @@ use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantDat\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n-use semver::{Version, VersionReq};\n \n-const MANUAL_NON_EXHAUSTIVE_MSRV: Version = Version {\n-    major: 1,\n-    minor: 40,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const MANUAL_NON_EXHAUSTIVE_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n@@ -66,12 +60,12 @@ declare_clippy_lint! {\n \n #[derive(Clone)]\n pub struct ManualNonExhaustive {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n }\n \n impl ManualNonExhaustive {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }"}, {"sha": "3c4368a3545a9f71b5a432b700a630e652b70250", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -13,18 +13,12 @@ use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n-use semver::{Version, VersionReq};\n \n-const MANUAL_STRIP_MSRV: Version = Version {\n-    major: 1,\n-    minor: 45,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -61,12 +55,12 @@ declare_clippy_lint! {\n }\n \n pub struct ManualStrip {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n }\n \n impl ManualStrip {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }\n@@ -225,8 +219,7 @@ fn find_stripping<'tcx>(\n                 if is_ref_str(self.cx, ex);\n                 let unref = peel_ref(ex);\n                 if let ExprKind::Index(indexed, index) = &unref.kind;\n-                if let Some(range) = higher::range(index);\n-                if let higher::Range { start, end, .. } = range;\n+                if let Some(higher::Range { start, end, .. }) = higher::range(index);\n                 if let ExprKind::Path(path) = &indexed.kind;\n                 if qpath_res(self.cx, path, ex.hir_id) == self.target;\n                 then {"}, {"sha": "274d20cfa8005b772f3aabeb9866b524d67fed95", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -20,10 +20,10 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::{sym, Symbol};\n-use semver::{Version, VersionReq};\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n use std::collections::Bound;\n@@ -535,13 +535,13 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct Matches {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n     infallible_destructuring_match_linted: bool,\n }\n \n impl Matches {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self {\n             msrv,\n             ..Matches::default()\n@@ -568,13 +568,7 @@ impl_lint_pass!(Matches => [\n     MATCH_SAME_ARMS,\n ]);\n \n-const MATCH_LIKE_MATCHES_MACRO_MSRV: Version = Version {\n-    major: 1,\n-    minor: 42,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const MATCH_LIKE_MATCHES_MACRO_MSRV: RustcVersion = RustcVersion::new(1, 42, 0);\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -652,8 +646,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         if_chain! {\n             if !in_external_macro(cx.sess(), pat.span);\n             if !in_macro(pat.span);\n-            if let PatKind::Struct(ref qpath, fields, true) = pat.kind;\n-            if let QPath::Resolved(_, ref path) = qpath;\n+            if let PatKind::Struct(QPath::Resolved(_, ref path), fields, true) = pat.kind;\n             if let Some(def_id) = path.res.opt_def_id();\n             let ty = cx.tcx.type_of(def_id);\n             if let ty::Adt(def, _) = ty.kind();\n@@ -962,16 +955,14 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 if let QPath::Resolved(_, p) = path {\n                     missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                 }\n-            } else if let PatKind::TupleStruct(ref path, ref patterns, ..) = arm.pat.kind {\n-                if let QPath::Resolved(_, p) = path {\n-                    // Some simple checks for exhaustive patterns.\n-                    // There is a room for improvements to detect more cases,\n-                    // but it can be more expensive to do so.\n-                    let is_pattern_exhaustive =\n-                        |pat: &&Pat<'_>| matches!(pat.kind, PatKind::Wild | PatKind::Binding(.., None));\n-                    if patterns.iter().all(is_pattern_exhaustive) {\n-                        missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n-                    }\n+            } else if let PatKind::TupleStruct(QPath::Resolved(_, p), ref patterns, ..) = arm.pat.kind {\n+                // Some simple checks for exhaustive patterns.\n+                // There is a room for improvements to detect more cases,\n+                // but it can be more expensive to do so.\n+                let is_pattern_exhaustive =\n+                    |pat: &&Pat<'_>| matches!(pat.kind, PatKind::Wild | PatKind::Binding(.., None));\n+                if patterns.iter().all(is_pattern_exhaustive) {\n+                    missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                 }\n             }\n         }\n@@ -1446,8 +1437,7 @@ fn is_ref_some_arm(arm: &Arm<'_>) -> Option<BindingAnnotation> {\n         if let ExprKind::Call(ref e, ref args) = remove_blocks(&arm.body).kind;\n         if let ExprKind::Path(ref some_path) = e.kind;\n         if match_qpath(some_path, &paths::OPTION_SOME) && args.len() == 1;\n-        if let ExprKind::Path(ref qpath) = args[0].kind;\n-        if let &QPath::Resolved(_, ref path2) = qpath;\n+        if let ExprKind::Path(QPath::Resolved(_, ref path2)) = args[0].kind;\n         if path2.segments.len() == 1 && ident.name == path2.segments[0].ident.name;\n         then {\n             return Some(rb)"}, {"sha": "44c974b9d98577c2add2c02bedb8f8e1feea592e", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -90,8 +90,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n     if_chain! {\n         if let hir::ExprKind::Call(func, args) = &expr.kind;\n         if args.is_empty();\n-        if let hir::ExprKind::Path(path) = &func.kind;\n-        if let hir::QPath::TypeRelative(_, segment) = path;\n+        if let hir::ExprKind::Path(hir::QPath::TypeRelative(_, segment)) = &func.kind;\n         then {\n             match &*segment.ident.as_str() {\n                 \"max_value\" => return Some(MinMax::Max),"}, {"sha": "8002c27a5e91b7e27b92818a5b51f47275832761", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -18,6 +18,7 @@ use rustc_hir::{TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n+use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n@@ -33,7 +34,6 @@ use crate::utils::{\n     snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n     walk_ptrs_ty_depth, SpanlessEq,\n };\n-use semver::{Version, VersionReq};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n@@ -1405,12 +1405,12 @@ declare_clippy_lint! {\n }\n \n pub struct Methods {\n-    msrv: Option<VersionReq>,\n+    msrv: Option<RustcVersion>,\n }\n \n impl Methods {\n     #[must_use]\n-    pub fn new(msrv: Option<VersionReq>) -> Self {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n         Self { msrv }\n     }\n }\n@@ -3470,13 +3470,7 @@ fn lint_suspicious_map(cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n     );\n }\n \n-const OPTION_AS_REF_DEREF_MSRV: Version = Version {\n-    major: 1,\n-    minor: 40,\n-    patch: 0,\n-    pre: Vec::new(),\n-    build: Vec::new(),\n-};\n+const OPTION_AS_REF_DEREF_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n \n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n fn lint_option_as_ref_deref<'tcx>(\n@@ -3485,7 +3479,7 @@ fn lint_option_as_ref_deref<'tcx>(\n     as_ref_args: &[hir::Expr<'_>],\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n-    msrv: Option<&VersionReq>,\n+    msrv: Option<&RustcVersion>,\n ) {\n     if !meets_msrv(msrv, &OPTION_AS_REF_DEREF_MSRV) {\n         return;"}, {"sha": "42f97b2ac497aa3151bda4f96da00c3a190b9930", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -6,7 +6,6 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     higher, is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg,\n };\n-use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n@@ -198,13 +197,9 @@ struct ExpressionInfoWithSpan {\n }\n \n fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n-    if_chain! {\n-        if let ExprKind::Unary(unop, operand) = e.kind;\n-        if let UnOp::UnNot = unop;\n-        then {\n-            return (true, operand.span);\n-        }\n-    };\n+    if let ExprKind::Unary(UnOp::UnNot, operand) = e.kind {\n+        return (true, operand.span);\n+    }\n     (false, e.span)\n }\n "}, {"sha": "b91233ac582808dd7916039fe4c219bf4862634d", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -176,8 +176,7 @@ impl QuestionMark {\n             if block.stmts.len() == 1;\n             if let Some(expr) = block.stmts.iter().last();\n             if let StmtKind::Semi(ref expr) = expr.kind;\n-            if let ExprKind::Ret(ret_expr) = expr.kind;\n-            if let Some(ret_expr) = ret_expr;\n+            if let ExprKind::Ret(Some(ret_expr)) = expr.kind;\n \n             then {\n                 return Some(ret_expr);"}, {"sha": "77e790733789c23c061436734afb9b15b5073d2c", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -222,8 +222,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if method_names[0] == sym!(as_bytes);\n \n             // Check for slicer\n-            if let ExprKind::Struct(ref path, _, _) = right.kind;\n-            if let QPath::LangItem(LangItem::Range, _) = path;\n+            if let ExprKind::Struct(QPath::LangItem(LangItem::Range, _), _, _) = right.kind;\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "daff5f81e8c34c926a830089025eff5294a7d540", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -168,8 +168,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n             if !in_macro(bound_predicate.span);\n-            if let TyKind::Path(ref path) = bound_predicate.bounded_ty.kind;\n-            if let QPath::Resolved(_, Path { ref segments, .. }) = path;\n+            if let TyKind::Path(QPath::Resolved(_, Path { ref segments, .. })) = bound_predicate.bounded_ty.kind;\n             if let Some(segment) = segments.first();\n             if let Some(trait_resolutions_direct) = map.get(&segment.ident);\n             then {"}, {"sha": "6b171a0fa1af2ef2058f402837237f957153908f", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -48,8 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n                 if_chain! {\n                     if let ExprKind::Path(ref _qpath) = args[0].kind;\n                     let x = const_eval_context.expr(&args[0]);\n-                    if let Some(constant) = x;\n-                    if let Constant::RawPtr(0) = constant;\n+                    if let Some(Constant::RawPtr(0)) = x;\n                     then {\n                         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }"}, {"sha": "74ba53e6a9a02fbd9c7f90b63ed72e8d58ea00c9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -738,8 +738,7 @@ fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id: HirId) -> Option<GenericBounds<'tcx>> {\n     if_chain! {\n         if let Some(did) = qpath_res(cx, qpath, id).opt_def_id();\n-        if let Some(node) = cx.tcx.hir().get_if_local(did);\n-        if let Node::GenericParam(generic_param) = node;\n+        if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n         if synthetic == Some(SyntheticTyParamKind::ImplTrait);\n         then {\n@@ -1470,8 +1469,7 @@ fn check_loss_of_sign(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast\n     // don't lint for positive constants\n     let const_val = constant(cx, &cx.typeck_results(), op);\n     if_chain! {\n-        if let Some((const_val, _)) = const_val;\n-        if let Constant::Int(n) = const_val;\n+        if let Some((Constant::Int(n), _)) = const_val;\n         if let ty::Int(ity) = *cast_from.kind();\n         if sext(cx.tcx, n, ity) >= 0;\n         then {"}, {"sha": "a7a6b5855b754948957f7ce187261ac685303f37", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -186,7 +186,9 @@ pub fn span_lint_hir_and_then(\n ///     |\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// ```\n-#[allow(clippy::collapsible_span_lint_calls)]\n+\n+#[allow(clippy::unknown_clippy_lints)]\n+#[cfg_attr(feature = \"internal-lints\", allow(clippy::collapsible_span_lint_calls))]\n pub fn span_lint_and_sugg<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,"}, {"sha": "01ffac5b5599d547dee26056a8f549b574e3a799", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -162,8 +162,7 @@ pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<\n         if let hir::Block { expr: Some(expr), .. } = &**block;\n         if let hir::ExprKind::Match(cond, arms, hir::MatchSource::WhileDesugar) = &expr.kind;\n         if let hir::ExprKind::DropTemps(cond) = &cond.kind;\n-        if let [arm, ..] = &arms[..];\n-        if let hir::Arm { body, .. } = arm;\n+        if let [hir::Arm { body, .. }, ..] = &arms[..];\n         then {\n             return Some((cond, body));\n         }"}, {"sha": "d847d22275e831df1ff791418da5a2e02891cf22", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             }\n         }\n \n-        match (&left.kind, &right.kind) {\n+        match (&reduce_exprkind(&left.kind), &reduce_exprkind(&right.kind)) {\n             (&ExprKind::AddrOf(lb, l_mut, ref le), &ExprKind::AddrOf(rb, r_mut, ref re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n@@ -306,6 +306,32 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n }\n \n+/// Some simple reductions like `{ return }` => `return`\n+fn reduce_exprkind<'hir>(kind: &'hir ExprKind<'hir>) -> &ExprKind<'hir> {\n+    if let ExprKind::Block(block, _) = kind {\n+        match (block.stmts, block.expr) {\n+            // `{}` => `()`\n+            ([], None) => &ExprKind::Tup(&[]),\n+            ([], Some(expr)) => match expr.kind {\n+                // `{ return .. }` => `return ..`\n+                ExprKind::Ret(..) => &expr.kind,\n+                _ => kind,\n+            },\n+            ([stmt], None) => match stmt.kind {\n+                StmtKind::Expr(expr) | StmtKind::Semi(expr) => match expr.kind {\n+                    // `{ return ..; }` => `return ..`\n+                    ExprKind::Ret(..) => &expr.kind,\n+                    _ => kind,\n+                },\n+                _ => kind,\n+            },\n+            _ => kind,\n+        }\n+    } else {\n+        kind\n+    }\n+}\n+\n fn swap_binop<'a>(\n     binop: BinOpKind,\n     lhs: &'a Expr<'a>,"}, {"sha": "3a6b64c90e8f65ef4634ecc7197f2275af7017c9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -14,6 +14,7 @@ pub mod eager_or_lazy;\n pub mod higher;\n mod hir_utils;\n pub mod inspector;\n+#[cfg(feature = \"internal-lints\")]\n pub mod internal_lints;\n pub mod numeric_literal;\n pub mod paths;\n@@ -51,6 +52,7 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n+use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n@@ -59,13 +61,12 @@ use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n-use semver::{Version, VersionReq};\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n \n-pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<VersionReq> {\n-    if let Ok(version) = VersionReq::parse(msrv) {\n+pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {\n+    if let Ok(version) = RustcVersion::parse(msrv) {\n         return Some(version);\n     } else if let Some(sess) = sess {\n         if let Some(span) = span {\n@@ -75,8 +76,8 @@ pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Opt\n     None\n }\n \n-pub fn meets_msrv(msrv: Option<&VersionReq>, lint_msrv: &Version) -> bool {\n-    msrv.map_or(true, |msrv| !msrv.matches(lint_msrv))\n+pub fn meets_msrv(msrv: Option<&RustcVersion>, lint_msrv: &RustcVersion) -> bool {\n+    msrv.map_or(true, |msrv| msrv.meets(*lint_msrv))\n }\n \n macro_rules! extract_msrv_attr {"}, {"sha": "16e6a016c9ed80debd34e8bcc4de427899a79e45", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -31,6 +31,7 @@ pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n@@ -61,8 +62,10 @@ pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V6\"];\n pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n@@ -133,6 +136,7 @@ pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];"}, {"sha": "28b3e79d7a6d6d9646edbb7804d1ddf6fad3a3d3", "filename": "clippy_lints/src/utils/visitors.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -1,5 +1,7 @@\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::def::Res;\n+use rustc_hir::intravisit::{self, walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::{Arm, Expr, ExprKind, HirId, QPath, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n \n@@ -123,3 +125,54 @@ where\n         !ret_finder.failed\n     }\n }\n+\n+pub struct LocalUsedVisitor {\n+    pub local_hir_id: HirId,\n+    pub used: bool,\n+}\n+\n+impl LocalUsedVisitor {\n+    pub fn new(local_hir_id: HirId) -> Self {\n+        Self {\n+            local_hir_id,\n+            used: false,\n+        }\n+    }\n+\n+    fn check<T>(&mut self, t: T, visit: fn(&mut Self, T)) -> bool {\n+        visit(self, t);\n+        std::mem::replace(&mut self.used, false)\n+    }\n+\n+    pub fn check_arm(&mut self, arm: &Arm<'_>) -> bool {\n+        self.check(arm, Self::visit_arm)\n+    }\n+\n+    pub fn check_expr(&mut self, expr: &Expr<'_>) -> bool {\n+        self.check(expr, Self::visit_expr)\n+    }\n+\n+    pub fn check_stmt(&mut self, stmt: &Stmt<'_>) -> bool {\n+        self.check(stmt, Self::visit_stmt)\n+    }\n+}\n+\n+impl<'v> Visitor<'v> for LocalUsedVisitor {\n+    type Map = Map<'v>;\n+\n+    fn visit_expr(&mut self, expr: &'v Expr<'v>) {\n+        if let ExprKind::Path(QPath::Resolved(None, path)) = expr.kind {\n+            if let Res::Local(id) = path.res {\n+                if id == self.local_hir_id {\n+                    self.used = true;\n+                    return;\n+                }\n+            }\n+        }\n+        walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "ec3af94b9ca910dd293b807638ddd015f49dd336", "filename": "tests/compile-test.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -12,6 +12,9 @@ use std::path::{Path, PathBuf};\n \n mod cargo;\n \n+// whether to run internal tests or not\n+const RUN_INTERNAL_TESTS: bool = cfg!(feature = \"internal-lints\");\n+\n fn host_lib() -> PathBuf {\n     option_env!(\"HOST_LIBS\").map_or(cargo::CARGO_TARGET_DIR.join(env!(\"PROFILE\")), PathBuf::from)\n }\n@@ -96,6 +99,16 @@ fn run_mode(cfg: &mut compiletest::Config) {\n     compiletest::run_tests(&cfg);\n }\n \n+fn run_internal_tests(cfg: &mut compiletest::Config) {\n+    // only run internal tests with the internal-tests feature\n+    if !RUN_INTERNAL_TESTS {\n+        return;\n+    }\n+    cfg.mode = TestMode::Ui;\n+    cfg.src_base = Path::new(\"tests\").join(\"ui-internal\");\n+    compiletest::run_tests(&cfg);\n+}\n+\n fn run_ui_toml(config: &mut compiletest::Config) {\n     fn run_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n         let mut result = true;\n@@ -199,7 +212,6 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n                         Some(\"main.rs\") => {},\n                         _ => continue,\n                     }\n-\n                     let paths = compiletest::common::TestPaths {\n                         file: file_path,\n                         base: config.src_base.clone(),\n@@ -253,4 +265,5 @@ fn compile_test() {\n     run_mode(&mut config);\n     run_ui_toml(&mut config);\n     run_ui_cargo(&mut config);\n+    run_internal_tests(&mut config);\n }"}, {"sha": "a6163a83d768709a562ca5a59a98b4eb92857bf4", "filename": "tests/dogfood.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -18,7 +18,8 @@ fn dogfood_clippy() {\n     }\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n-    let output = Command::new(&*CLIPPY_PATH)\n+    let mut command = Command::new(&*CLIPPY_PATH);\n+    command\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n@@ -27,11 +28,16 @@ fn dogfood_clippy() {\n         .arg(\"--all-features\")\n         .arg(\"--\")\n         .args(&[\"-D\", \"clippy::all\"])\n-        .args(&[\"-D\", \"clippy::internal\"])\n         .args(&[\"-D\", \"clippy::pedantic\"])\n-        .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-        .output()\n-        .unwrap();\n+        .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n+\n+    // internal lints only exist if we build with the internal-lints feature\n+    if cfg!(feature = \"internal-lints\") {\n+        command.args(&[\"-D\", \"clippy::internal\"]);\n+    }\n+\n+    let output = command.output().unwrap();\n+\n     println!(\"status: {}\", output.status);\n     println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n     println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));"}, {"sha": "e588c23345e2fdd8ad010e05a0db259589f7bade", "filename": "tests/ui-internal/collapsible_span_lint_calls.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcollapsible_span_lint_calls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcollapsible_span_lint_calls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcollapsible_span_lint_calls.fixed?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/collapsible_span_lint_calls.fixed"}, {"sha": "d5dd3bb562b429d9265f3ba1d5c80a4c977a4dc2", "filename": "tests/ui-internal/collapsible_span_lint_calls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcollapsible_span_lint_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcollapsible_span_lint_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcollapsible_span_lint_calls.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/collapsible_span_lint_calls.rs"}, {"sha": "874d4a9f255c27dcaa542325be407d65d25cfabd", "filename": "tests/ui-internal/collapsible_span_lint_calls.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcollapsible_span_lint_calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcollapsible_span_lint_calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcollapsible_span_lint_calls.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/collapsible_span_lint_calls.stderr"}, {"sha": "5b30c9d5721ca5a0dcf8c7fe0ef200c2339d50f2", "filename": "tests/ui-internal/custom_ice_message.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/custom_ice_message.rs"}, {"sha": "a1b8e2ee162cf67eb3722946e1884415b768149c", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/custom_ice_message.stderr"}, {"sha": "053faae02ce3e0d3aa457083224bb9d32b20ba30", "filename": "tests/ui-internal/default_lint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fdefault_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fdefault_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fdefault_lint.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/default_lint.rs"}, {"sha": "5c5836a7d297e82a0ae0c18b819d73ef39b3caf9", "filename": "tests/ui-internal/default_lint.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fdefault_lint.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/default_lint.stderr"}, {"sha": "01e28ae5e9d3581c0995e1b88abb0fd738494052", "filename": "tests/ui-internal/invalid_paths.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_paths.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/invalid_paths.rs"}, {"sha": "bd69d661b714fe8bd29e553588d2736e3eb22fc3", "filename": "tests/ui-internal/invalid_paths.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Finvalid_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Finvalid_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_paths.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/invalid_paths.stderr"}, {"sha": "beaef79a340afad2c371352f2dda86f385c95d8c", "filename": "tests/ui-internal/lint_without_lint_pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Flint_without_lint_pass.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/lint_without_lint_pass.rs"}, {"sha": "1257dae96d71cc17c0261ff5f66efcea3575c165", "filename": "tests/ui-internal/lint_without_lint_pass.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Flint_without_lint_pass.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/lint_without_lint_pass.stderr"}, {"sha": "fe950b0aa7c7004c729c33cc7b6dab3392d1260a", "filename": "tests/ui-internal/match_type_on_diag_item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/match_type_on_diag_item.rs"}, {"sha": "82465dbaf6ecc9d9e61b5f99e25f62948da7ebc7", "filename": "tests/ui-internal/match_type_on_diag_item.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/match_type_on_diag_item.stderr"}, {"sha": "b0b3498f057f7f7d05eb87124c4acb68a45aa7e6", "filename": "tests/ui-internal/outer_expn_data.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fouter_expn_data.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fouter_expn_data.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fouter_expn_data.fixed?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/outer_expn_data.fixed"}, {"sha": "55a3fed00d075dfa5a4d7360fa9b9f0a85ece34f", "filename": "tests/ui-internal/outer_expn_data.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fouter_expn_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fouter_expn_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fouter_expn_data.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/outer_expn_data.rs"}, {"sha": "56b6ce1f78ea4de38c7f1b1d0ffb666565c1f05a", "filename": "tests/ui-internal/outer_expn_data.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fouter_expn_data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui-internal%2Fouter_expn_data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fouter_expn_data.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "previous_filename": "tests/ui/outer_expn_data.stderr"}, {"sha": "a83e6c77b12e5bc38dc8b76a76611d539160d91a", "filename": "tests/ui/collapsible_match.rs", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -0,0 +1,239 @@\n+#![warn(clippy::collapsible_match)]\n+#![allow(clippy::needless_return, clippy::no_effect, clippy::single_match)]\n+\n+fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {\n+    // match without block\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // match with block\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // if let, if let\n+    if let Ok(val) = res_opt {\n+        if let Some(n) = val {\n+            take(n);\n+        }\n+    }\n+\n+    // if let else, if let else\n+    if let Ok(val) = res_opt {\n+        if let Some(n) = val {\n+            take(n);\n+        } else {\n+            return;\n+        }\n+    } else {\n+        return;\n+    }\n+\n+    // if let, match\n+    if let Ok(val) = res_opt {\n+        match val {\n+            Some(n) => foo(n),\n+            _ => (),\n+        }\n+    }\n+\n+    // match, if let\n+    match res_opt {\n+        Ok(val) => {\n+            if let Some(n) = val {\n+                take(n);\n+            }\n+        },\n+        _ => {},\n+    }\n+\n+    // if let else, match\n+    if let Ok(val) = res_opt {\n+        match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        }\n+    } else {\n+        return;\n+    }\n+\n+    // match, if let else\n+    match res_opt {\n+        Ok(val) => {\n+            if let Some(n) = val {\n+                take(n);\n+            } else {\n+                return;\n+            }\n+        },\n+        _ => return,\n+    }\n+\n+    // None in inner match same as outer wild branch\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            None => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // None in outer match same as inner wild branch\n+    match opt_opt {\n+        Some(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        None => return,\n+    }\n+}\n+\n+fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {\n+    // no wild pattern in outer match\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        Err(_) => return,\n+    }\n+\n+    // inner branch is not wild or None\n+    match res_res {\n+        Ok(val) => match val {\n+            Ok(n) => foo(n),\n+            Err(_) => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // statement before inner match\n+    match res_opt {\n+        Ok(val) => {\n+            \"hi buddy\";\n+            match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            }\n+        },\n+        _ => return,\n+    }\n+\n+    // statement after inner match\n+    match res_opt {\n+        Ok(val) => {\n+            match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            }\n+            \"hi buddy\";\n+        },\n+        _ => return,\n+    }\n+\n+    // wild branches do not match\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(n) => foo(n),\n+            _ => {\n+                \"sup\";\n+                return;\n+            },\n+        },\n+        _ => return,\n+    }\n+\n+    // binding used in if guard\n+    match res_opt {\n+        Ok(val) if val.is_some() => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // binding used in inner match body\n+    match res_opt {\n+        Ok(val) => match val {\n+            Some(_) => take(val),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+\n+    // if guard on inner match\n+    {\n+        match res_opt {\n+            Ok(val) => match val {\n+                Some(n) if make() => foo(n),\n+                _ => return,\n+            },\n+            _ => return,\n+        }\n+        match res_opt {\n+            Ok(val) => match val {\n+                _ => make(),\n+                _ if make() => return,\n+            },\n+            _ => return,\n+        }\n+    }\n+\n+    // differing macro contexts\n+    {\n+        macro_rules! mac {\n+            ($val:ident) => {\n+                match $val {\n+                    Some(n) => foo(n),\n+                    _ => return,\n+                }\n+            };\n+        }\n+        match res_opt {\n+            Ok(val) => mac!(val),\n+            _ => return,\n+        }\n+    }\n+\n+    // OR pattern\n+    enum E<T> {\n+        A(T),\n+        B(T),\n+        C(T),\n+    };\n+    match make::<E<Option<u32>>>() {\n+        E::A(val) | E::B(val) => match val {\n+            Some(n) => foo(n),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+    match make::<Option<E<u32>>>() {\n+        Some(val) => match val {\n+            E::A(val) | E::B(val) => foo(val),\n+            _ => return,\n+        },\n+        _ => return,\n+    }\n+}\n+\n+fn make<T>() -> T {\n+    unimplemented!()\n+}\n+\n+fn foo<T, U>(t: T) -> U {\n+    unimplemented!()\n+}\n+\n+fn take<T>(t: T) {}\n+\n+fn main() {}"}, {"sha": "63ac6a1613dc648ce44a90a139d768d18e2a7788", "filename": "tests/ui/collapsible_match.stderr", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -0,0 +1,179 @@\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:7:20\n+   |\n+LL |           Ok(val) => match val {\n+   |  ____________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         },\n+   | |_________^\n+   |\n+   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:7:12\n+   |\n+LL |         Ok(val) => match val {\n+   |            ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:16:20\n+   |\n+LL |           Ok(val) => match val {\n+   |  ____________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:16:12\n+   |\n+LL |         Ok(val) => match val {\n+   |            ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:25:9\n+   |\n+LL | /         if let Some(n) = val {\n+LL | |             take(n);\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:24:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         if let Some(n) = val {\n+   |                ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:32:9\n+   |\n+LL | /         if let Some(n) = val {\n+LL | |             take(n);\n+LL | |         } else {\n+LL | |             return;\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:31:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         if let Some(n) = val {\n+   |                ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:43:9\n+   |\n+LL | /         match val {\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => (),\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:42:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         match val {\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:52:13\n+   |\n+LL | /             if let Some(n) = val {\n+LL | |                 take(n);\n+LL | |             }\n+   | |_____________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:51:12\n+   |\n+LL |         Ok(val) => {\n+   |            ^^^ Replace this binding\n+LL |             if let Some(n) = val {\n+   |                    ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:61:9\n+   |\n+LL | /         match val {\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         }\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:60:15\n+   |\n+LL |     if let Ok(val) = res_opt {\n+   |               ^^^ Replace this binding\n+LL |         match val {\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:72:13\n+   |\n+LL | /             if let Some(n) = val {\n+LL | |                 take(n);\n+LL | |             } else {\n+LL | |                 return;\n+LL | |             }\n+   | |_____________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:71:12\n+   |\n+LL |         Ok(val) => {\n+   |            ^^^ Replace this binding\n+LL |             if let Some(n) = val {\n+   |                    ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:83:20\n+   |\n+LL |           Ok(val) => match val {\n+   |  ____________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             None => return,\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:83:12\n+   |\n+LL |         Ok(val) => match val {\n+   |            ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match.rs:92:22\n+   |\n+LL |           Some(val) => match val {\n+   |  ______________________^\n+LL | |             Some(n) => foo(n),\n+LL | |             _ => return,\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match.rs:92:14\n+   |\n+LL |         Some(val) => match val {\n+   |              ^^^ Replace this binding\n+LL |             Some(n) => foo(n),\n+   |             ^^^^^^^ with this pattern\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "d571ac4ab693e3cc1415cfe200b840c41617c92d", "filename": "tests/ui/collapsible_match2.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -0,0 +1,53 @@\n+#![warn(clippy::collapsible_match)]\n+#![allow(clippy::needless_return, clippy::no_effect, clippy::single_match)]\n+\n+fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {\n+    // if guards on outer match\n+    {\n+        match res_opt {\n+            Ok(val) if make() => match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            },\n+            _ => return,\n+        }\n+        match res_opt {\n+            Ok(val) => match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            },\n+            _ if make() => return,\n+            _ => return,\n+        }\n+    }\n+\n+    // macro\n+    {\n+        macro_rules! mac {\n+            ($outer:expr => $pat:pat, $e:expr => $inner_pat:pat, $then:expr) => {\n+                match $outer {\n+                    $pat => match $e {\n+                        $inner_pat => $then,\n+                        _ => return,\n+                    },\n+                    _ => return,\n+                }\n+            };\n+        }\n+        // Lint this since the patterns are not defined by the macro.\n+        // Allows the lint to work on if_chain! for example.\n+        // Fixing the lint requires knowledge of the specific macro, but we optimistically assume that\n+        // there is still a better way to write this.\n+        mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+    }\n+}\n+\n+fn make<T>() -> T {\n+    unimplemented!()\n+}\n+\n+fn foo<T, U>(t: T) -> U {\n+    unimplemented!()\n+}\n+\n+fn main() {}"}, {"sha": "490d82d12cd59d3099b750d112174c034e1bc013", "filename": "tests/ui/collapsible_match2.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -0,0 +1,61 @@\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:8:34\n+   |\n+LL |               Ok(val) if make() => match val {\n+   |  __________________________________^\n+LL | |                 Some(n) => foo(n),\n+LL | |                 _ => return,\n+LL | |             },\n+   | |_____________^\n+   |\n+   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:8:16\n+   |\n+LL |             Ok(val) if make() => match val {\n+   |                ^^^ Replace this binding\n+LL |                 Some(n) => foo(n),\n+   |                 ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:15:24\n+   |\n+LL |               Ok(val) => match val {\n+   |  ________________________^\n+LL | |                 Some(n) => foo(n),\n+LL | |                 _ => return,\n+LL | |             },\n+   | |_____________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:15:16\n+   |\n+LL |             Ok(val) => match val {\n+   |                ^^^ Replace this binding\n+LL |                 Some(n) => foo(n),\n+   |                 ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:29:29\n+   |\n+LL |                       $pat => match $e {\n+   |  _____________________________^\n+LL | |                         $inner_pat => $then,\n+LL | |                         _ => return,\n+LL | |                     },\n+   | |_____________________^\n+...\n+LL |           mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+   |           ------------------------------------------------- in this macro invocation\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:41:28\n+   |\n+LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+   |                            ^^^          ^^^^^^^ with this pattern\n+   |                            |\n+   |                            Replace this binding\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1026cc40d3b0e20ce6824f1735472e02fbf8a1ca", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -35,7 +35,7 @@ fn match_same_arms2() {\n     };\n }\n \n-fn manual_strip_msrv() {\n+pub fn manual_strip_msrv() {\n     let s = \"hello, world!\";\n     if s.starts_with(\"hello, \") {\n         assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n@@ -49,3 +49,39 @@ fn main() {\n     match_same_arms2();\n     manual_strip_msrv();\n }\n+\n+mod meets_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.45.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}\n+\n+mod just_under_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.46.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}\n+\n+mod just_above_msrv {\n+    #![feature(custom_inner_attributes)]\n+    #![clippy::msrv = \"1.44.0\"]\n+\n+    fn main() {\n+        let s = \"hello, world!\";\n+        if s.starts_with(\"hello, \") {\n+            assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+        }\n+    }\n+}"}, {"sha": "3e1af046e7a2795127d85fdd27bcaf4f16c5e7f8", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -0,0 +1,37 @@\n+error: stripping a prefix manually\n+  --> $DIR/min_rust_version_attr.rs:60:24\n+   |\n+LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::manual-strip` implied by `-D warnings`\n+note: the prefix was tested here\n+  --> $DIR/min_rust_version_attr.rs:59:9\n+   |\n+LL |         if s.starts_with(\"hello, \") {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the `strip_prefix` method\n+   |\n+LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n+LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+   |\n+\n+error: stripping a prefix manually\n+  --> $DIR/min_rust_version_attr.rs:72:24\n+   |\n+LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the prefix was tested here\n+  --> $DIR/min_rust_version_attr.rs:71:9\n+   |\n+LL |         if s.starts_with(\"hello, \") {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the `strip_prefix` method\n+   |\n+LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n+LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "98fffe1e3512b9c41750f598f0787ce56329eade", "filename": "tests/ui/min_rust_version_no_patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fmin_rust_version_no_patch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249b6fee9120efb6d6bb8f559524c478b2ab4b74/tests%2Fui%2Fmin_rust_version_no_patch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_no_patch.rs?ref=249b6fee9120efb6d6bb8f559524c478b2ab4b74", "patch": "@@ -1,6 +1,6 @@\n #![allow(clippy::redundant_clone)]\n #![feature(custom_inner_attributes)]\n-#![clippy::msrv = \"^1.0\"]\n+#![clippy::msrv = \"1.0\"]\n \n fn manual_strip_msrv() {\n     let s = \"hello, world!\";"}]}