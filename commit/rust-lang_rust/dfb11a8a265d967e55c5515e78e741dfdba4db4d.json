{"sha": "dfb11a8a265d967e55c5515e78e741dfdba4db4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjExYThhMjY1ZDk2N2U1NWM1NTE1ZTc4ZTc0MWRmZGJhNGRiNGQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-10T11:12:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-20T13:57:56Z"}, "message": "Add helper function to `InferCtxt` that generates inference vars for unresolved associated types", "tree": {"sha": "553fcdd71f8b94b3c7a97a8b4c543ed0437acb02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/553fcdd71f8b94b3c7a97a8b4c543ed0437acb02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb11a8a265d967e55c5515e78e741dfdba4db4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb11a8a265d967e55c5515e78e741dfdba4db4d", "html_url": "https://github.com/rust-lang/rust/commit/dfb11a8a265d967e55c5515e78e741dfdba4db4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb11a8a265d967e55c5515e78e741dfdba4db4d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1fb85cff63ad5fffe435e17128f99f9e1d970c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1fb85cff63ad5fffe435e17128f99f9e1d970c", "html_url": "https://github.com/rust-lang/rust/commit/db1fb85cff63ad5fffe435e17128f99f9e1d970c"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "43d3730c04931a46aa1b28bec3b7bdcc9aa1c0fe", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfb11a8a265d967e55c5515e78e741dfdba4db4d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb11a8a265d967e55c5515e78e741dfdba4db4d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=dfb11a8a265d967e55c5515e78e741dfdba4db4d", "patch": "@@ -64,6 +64,7 @@ mod lub;\n pub mod nll_relate;\n pub mod opaque_types;\n pub mod outlives;\n+mod projection;\n pub mod region_constraints;\n pub mod resolve;\n mod sub;"}, {"sha": "aa0fddf9b6f84304d581a785afc0f53f1b67fc56", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dfb11a8a265d967e55c5515e78e741dfdba4db4d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb11a8a265d967e55c5515e78e741dfdba4db4d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=dfb11a8a265d967e55c5515e78e741dfdba4db4d", "patch": "@@ -0,0 +1,33 @@\n+use rustc_middle::traits::ObligationCause;\n+use rustc_middle::ty::{self, ToPredicate, Ty};\n+\n+use crate::traits::{Obligation, PredicateObligation};\n+\n+use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use super::InferCtxt;\n+\n+impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+    pub fn infer_projection(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        projection_ty: ty::ProjectionTy<'tcx>,\n+        cause: ObligationCause<'tcx>,\n+        recursion_depth: usize,\n+        obligations: &mut Vec<PredicateObligation<'tcx>>,\n+    ) -> Ty<'tcx> {\n+        let def_id = projection_ty.item_def_id;\n+        let ty_var = self.next_ty_var(TypeVariableOrigin {\n+            kind: TypeVariableOriginKind::NormalizeProjectionType,\n+            span: self.tcx.def_span(def_id),\n+        });\n+        let projection = ty::Binder::dummy(ty::ProjectionPredicate { projection_ty, ty: ty_var });\n+        let obligation = Obligation::with_depth(\n+            cause,\n+            recursion_depth,\n+            param_env,\n+            projection.to_predicate(self.tcx),\n+        );\n+        obligations.push(obligation);\n+        ty_var\n+    }\n+}"}, {"sha": "873c058c55c18f906a3e63ad503f7a3ad39ab62a", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfb11a8a265d967e55c5515e78e741dfdba4db4d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb11a8a265d967e55c5515e78e741dfdba4db4d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=dfb11a8a265d967e55c5515e78e741dfdba4db4d", "patch": "@@ -810,17 +810,7 @@ pub fn normalize_projection_type<'a, 'b, 'tcx>(\n         // and a deferred predicate to resolve this when more type\n         // information is available.\n \n-        let tcx = selcx.infcx().tcx;\n-        let def_id = projection_ty.item_def_id;\n-        let ty_var = selcx.infcx().next_ty_var(TypeVariableOrigin {\n-            kind: TypeVariableOriginKind::NormalizeProjectionType,\n-            span: tcx.def_span(def_id),\n-        });\n-        let projection = ty::Binder::dummy(ty::ProjectionPredicate { projection_ty, ty: ty_var });\n-        let obligation =\n-            Obligation::with_depth(cause, depth + 1, param_env, projection.to_predicate(tcx));\n-        obligations.push(obligation);\n-        ty_var\n+        selcx.infcx().infer_projection(param_env, projection_ty, cause, depth + 1, obligations)\n     })\n }\n "}]}