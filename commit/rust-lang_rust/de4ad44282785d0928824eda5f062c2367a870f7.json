{"sha": "de4ad44282785d0928824eda5f062c2367a870f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNGFkNDQyODI3ODVkMDkyODgyNGVkYTVmMDYyYzIzNjdhODcwZjc=", "commit": {"author": {"name": "Lucas Spits", "email": "spits.lucas@gmail.com", "date": "2019-03-11T19:41:48Z"}, "committer": {"name": "Lucas Spits", "email": "spits.lucas@gmail.com", "date": "2019-03-11T19:41:48Z"}, "message": "Merge branch 'master' of https://github.com/LDSpits/rust-analyzer into feature/workspace-directory", "tree": {"sha": "b89261aa34f9216d61e8f3751a009735ec139323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89261aa34f9216d61e8f3751a009735ec139323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de4ad44282785d0928824eda5f062c2367a870f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEErhLcgc5oH9QhwlPzriXfe2RaorAFAlyGufwACgkQriXfe2Ra\norC3pg/9Ehcw/ksvU+MzFlN5YmbfjkrFXzK8SqArSe467TJYPFq2pOXr2RfuPneC\nJOoedhlXpI9v5F2fDZVV43f+bYjvW/EgtqCG+SeRROZ1YAEq3Wir4VXqyH7kOkAz\naQyHTc1ek5WQ6LLEUhyNPMlvQRu2bgkZJmfRjwEqnilO8bLlOJ/sHU7gOcHXfWJ8\numtFwzgL0Dzvat0N6hk3HvGx3vnZWJeetWPebbhHdj/EdSkke6AkSAMa2JOEWqAg\nGJqzhGXjArwtpF508HIpQsqFyRtpZ+XfuY9iDawDE8+4hKIWMToby9q0oT558MJc\nkXGBplWxNWwgFr+H0C6Q5wyZdlyIs+VTK1AdujTIfumpaw8rFBOf5WQ9zdZqjK/0\njR90i+Wc0oW4wGPOMh7NSQ3XWO3oomkgbNeF+brwYCC8eakznE7c6kPG8a4GAR2z\nWjLlawx65vAVtdSN2d71Q9Mfb6bZCEv/uZrLKPSPL7xK+J2seEu3U1fI1CC2qie/\n3xT/vuHv347hatC5IJ98NDfDAuWuL/H9hwKJJYc5talpF4KWFy2fmJqQjNfYGxG9\nBhmMCd2UWgsSQmWR9biKUxpL0tKmiv7+2q0YkCEOQK06z/dG0Nq3V/Hgzmct4ANm\nq2mi71ayL8HZF9RxqrTN0PHClzgZLKdDG24OkfJPSWi02aaV0sU=\n=Agy0\n-----END PGP SIGNATURE-----", "payload": "tree b89261aa34f9216d61e8f3751a009735ec139323\nparent 7185c594fe1b6c282c432c1fbb57e8e6e23421ed\nparent f96df105ea6d27f295cc1c0a6cdb6c50979f67ed\nauthor Lucas Spits <spits.lucas@gmail.com> 1552333308 +0100\ncommitter Lucas Spits <spits.lucas@gmail.com> 1552333308 +0100\n\nMerge branch 'master' of https://github.com/LDSpits/rust-analyzer into feature/workspace-directory\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de4ad44282785d0928824eda5f062c2367a870f7", "html_url": "https://github.com/rust-lang/rust/commit/de4ad44282785d0928824eda5f062c2367a870f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de4ad44282785d0928824eda5f062c2367a870f7/comments", "author": {"login": "LDSpits", "id": 11315167, "node_id": "MDQ6VXNlcjExMzE1MTY3", "avatar_url": "https://avatars.githubusercontent.com/u/11315167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LDSpits", "html_url": "https://github.com/LDSpits", "followers_url": "https://api.github.com/users/LDSpits/followers", "following_url": "https://api.github.com/users/LDSpits/following{/other_user}", "gists_url": "https://api.github.com/users/LDSpits/gists{/gist_id}", "starred_url": "https://api.github.com/users/LDSpits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LDSpits/subscriptions", "organizations_url": "https://api.github.com/users/LDSpits/orgs", "repos_url": "https://api.github.com/users/LDSpits/repos", "events_url": "https://api.github.com/users/LDSpits/events{/privacy}", "received_events_url": "https://api.github.com/users/LDSpits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LDSpits", "id": 11315167, "node_id": "MDQ6VXNlcjExMzE1MTY3", "avatar_url": "https://avatars.githubusercontent.com/u/11315167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LDSpits", "html_url": "https://github.com/LDSpits", "followers_url": "https://api.github.com/users/LDSpits/followers", "following_url": "https://api.github.com/users/LDSpits/following{/other_user}", "gists_url": "https://api.github.com/users/LDSpits/gists{/gist_id}", "starred_url": "https://api.github.com/users/LDSpits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LDSpits/subscriptions", "organizations_url": "https://api.github.com/users/LDSpits/orgs", "repos_url": "https://api.github.com/users/LDSpits/repos", "events_url": "https://api.github.com/users/LDSpits/events{/privacy}", "received_events_url": "https://api.github.com/users/LDSpits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7185c594fe1b6c282c432c1fbb57e8e6e23421ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/7185c594fe1b6c282c432c1fbb57e8e6e23421ed", "html_url": "https://github.com/rust-lang/rust/commit/7185c594fe1b6c282c432c1fbb57e8e6e23421ed"}, {"sha": "f96df105ea6d27f295cc1c0a6cdb6c50979f67ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96df105ea6d27f295cc1c0a6cdb6c50979f67ed", "html_url": "https://github.com/rust-lang/rust/commit/f96df105ea6d27f295cc1c0a6cdb6c50979f67ed"}], "stats": {"total": 243, "additions": 174, "deletions": 69}, "files": [{"sha": "063cbd174713a27f9b8a0980c41f27bc152c8eb3", "filename": ".vscode/tasks.json", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/.vscode%2Ftasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/.vscode%2Ftasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Ftasks.json?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -10,38 +10,51 @@\n       \"problemMatcher\": {\n         \"owner\": \"typescript\",\n         \"pattern\": \"$tsc\",\n-        \"fileLocation\": [\"relative\", \"${workspaceRoot}/editors/code\"]\n+        \"fileLocation\": [\n+          \"relative\",\n+          \"${workspaceRoot}/editors/code\"\n+        ]\n       },\n       \"path\": \"editors/code/\"\n     },\n     {\n       \"label\": \"Build Lsp\",\n       \"type\": \"shell\",\n       \"command\": \"cargo build\",\n-      \"problemMatcher\": {\n-        \"owner\": \"rust\",\n-        \"fileLocation\": [\"relative\", \"${workspaceRoot}\"],\n-        \"pattern\": [\n-          {\n-            \"regexp\": \"^(warning|warn|error)(?:\\\\[(.*?)\\\\])?: (.*)$\",\n-            \"severity\": 1,\n-            \"code\": 2,\n-            \"message\": 3\n-          },\n-          {\n-            \"regexp\": \"^[\\\\s->=]*(.*?):(\\\\d*):(\\\\d*)\\\\s*$\",\n-            \"file\": 1,\n-            \"line\": 2,\n-            \"column\": 3\n-          }\n-        ]\n-      }\n+      \"problemMatcher\": \"$rustc\"\n     },\n     {\n       \"label\": \"Build All\",\n       \"group\": \"build\",\n-      \"dependsOn\": [\"Build Extension\", \"Build Lsp\"],\n+      \"dependsOn\": [\n+        \"Build Extension\",\n+        \"Build Lsp\"\n+      ],\n       \"problemMatcher\": []\n+    },\n+    {\n+      \"label\": \"cargo watch\",\n+      \"group\": \"build\",\n+      \"isBackground\": true,\n+      \"type\": \"shell\",\n+      \"command\": \"cargo\",\n+      \"args\": [\n+        \"watch\"\n+      ],\n+      \"problemMatcher\": \"$rustc-watch\"\n+    },\n+    {\n+      \"label\": \"cargo watch tests\",\n+      \"group\": \"build\",\n+      \"isBackground\": true,\n+      \"type\": \"shell\",\n+      \"command\": \"cargo\",\n+      \"args\": [\n+        \"watch\",\n+        \"-x\",\n+        \"check --tests\"\n+      ],\n+      \"problemMatcher\": \"$rustc-watch\"\n     }\n   ]\n-}\n+}\n\\ No newline at end of file"}, {"sha": "66a625c6c12c12b6570c1852f1b7d3178abb8b29", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -550,7 +550,7 @@ The Some variant\n     fn test_hover_infer_associated_method_result() {\n         let (analysis, position) = single_file_with_position(\n             \"\n-            struct Thing { x: u32 };\n+            struct Thing { x: u32 }\n \n             impl Thing {\n                 fn new() -> Thing {\n@@ -616,7 +616,7 @@ The Some variant\n     fn test_hover_self() {\n         let (analysis, position) = single_file_with_position(\n             \"\n-            struct Thing { x: u32 };\n+            struct Thing { x: u32 }\n             impl Thing {\n                 fn new() -> Self {\n                     Self<|> { x: 0 }\n@@ -630,7 +630,7 @@ The Some variant\n \n         let (analysis, position) = single_file_with_position(\n             \"\n-            struct Thing { x: u32 };\n+            struct Thing { x: u32 }\n             impl Thing {\n                 fn new() -> Self<|> {\n                     Self { x: 0 }\n@@ -644,7 +644,7 @@ The Some variant\n \n         let (analysis, position) = single_file_with_position(\n             \"\n-            enum Thing { A };\n+            enum Thing { A }\n             impl Thing {\n                 pub fn new() -> Self<|> {\n                     Thing::A\n@@ -658,7 +658,7 @@ The Some variant\n \n         let (analysis, position) = single_file_with_position(\n             \"\n-            enum Thing { A };\n+            enum Thing { A }\n             impl Thing {\n                 pub fn thing(a: Self<|>) {\n                 }"}, {"sha": "1b77e0312579743671f64be8d4b4d862ebb7d6dc", "filename": "crates/ra_lsp_server/src/init.rs", "status": "modified", "additions": 61, "deletions": 39, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_lsp_server%2Fsrc%2Finit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_lsp_server%2Fsrc%2Finit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Finit.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -1,39 +1,61 @@\n-use serde::{Deserialize, Deserializer};\r\n-\r\n-/// Client provided initialization options\r\n-#[derive(Deserialize, Clone, Copy, Debug)]\r\n-#[serde(rename_all = \"camelCase\")]\r\n-pub struct InitializationOptions {\r\n-    /// Whether the client supports our custom highlighting publishing decorations.\r\n-    /// This is different to the highlightingOn setting, which is whether the user\r\n-    /// wants our custom highlighting to be used.\r\n-    ///\r\n-    /// Defaults to `true`\r\n-    #[serde(default = \"bool_true\", deserialize_with = \"nullable_bool_true\")]\r\n-    pub publish_decorations: bool,\r\n-\r\n-    /// Whether or not the workspace loaded notification should be sent\r\n-    ///\r\n-    /// Defaults to `true`\r\n-    #[serde(default = \"bool_true\", deserialize_with = \"nullable_bool_true\")]\r\n-    pub show_workspace_loaded: bool,\r\n-}\r\n-\r\n-impl Default for InitializationOptions {\r\n-    fn default() -> InitializationOptions {\r\n-        InitializationOptions { publish_decorations: true, show_workspace_loaded: true }\r\n-    }\r\n-}\r\n-\r\n-fn bool_true() -> bool {\r\n-    true\r\n-}\r\n-\r\n-/// Deserializes a null value to a bool true by default\r\n-fn nullable_bool_true<'de, D>(deserializer: D) -> Result<bool, D::Error>\r\n-where\r\n-    D: Deserializer<'de>,\r\n-{\r\n-    let opt = Option::deserialize(deserializer)?;\r\n-    Ok(opt.unwrap_or(true))\r\n-}\r\n+use serde::{Deserialize, Deserializer};\n+\n+/// Client provided initialization options\n+#[derive(Deserialize, Clone, Copy, Debug, PartialEq, Eq)]\n+#[serde(rename_all = \"camelCase\", default)]\n+pub struct InitializationOptions {\n+    /// Whether the client supports our custom highlighting publishing decorations.\n+    /// This is different to the highlightingOn setting, which is whether the user\n+    /// wants our custom highlighting to be used.\n+    ///\n+    /// Defaults to `false`\n+    #[serde(deserialize_with = \"nullable_bool_false\")]\n+    pub publish_decorations: bool,\n+\n+    /// Whether or not the workspace loaded notification should be sent\n+    ///\n+    /// Defaults to `true`\n+    #[serde(deserialize_with = \"nullable_bool_true\")]\n+    pub show_workspace_loaded: bool,\n+}\n+\n+impl Default for InitializationOptions {\n+    fn default() -> InitializationOptions {\n+        InitializationOptions { publish_decorations: false, show_workspace_loaded: true }\n+    }\n+}\n+\n+/// Deserializes a null value to a bool false by default\n+fn nullable_bool_false<'de, D>(deserializer: D) -> Result<bool, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let opt = Option::deserialize(deserializer)?;\n+    Ok(opt.unwrap_or(false))\n+}\n+\n+/// Deserializes a null value to a bool true by default\n+fn nullable_bool_true<'de, D>(deserializer: D) -> Result<bool, D::Error>\n+where\n+    D: Deserializer<'de>,\n+{\n+    let opt = Option::deserialize(deserializer)?;\n+    Ok(opt.unwrap_or(true))\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn deserialize_init_options_defaults() {\n+        // check that null == default for both fields\n+        let default = InitializationOptions::default();\n+        assert_eq!(default, serde_json::from_str(r#\"{}\"#).unwrap());\n+        assert_eq!(\n+            default,\n+            serde_json::from_str(r#\"{\"publishDecorations\":null, \"showWorkspaceLoaded\":null}\"#)\n+                .unwrap()\n+        );\n+    }\n+}"}, {"sha": "53bb26c5ff6e4a7b50bc744ab3b797f20d47eae0", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -93,6 +93,11 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             }\n         }\n \n+        ASYNC_KW if la == L_CURLY => {\n+            let m = p.start();\n+            p.bump();\n+            block_expr(p, Some(m))\n+        }\n         MATCH_KW => match_expr(p),\n         UNSAFE_KW if la == L_CURLY => {\n             let m = p.start();"}, {"sha": "a057c81675631b5f04c88e62bc7d0fa9fc4ea16a", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -86,9 +86,15 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n     }\n \n     let mut has_mods = false;\n+\n     // modifiers\n+    // test_err async_without_semicolon\n+    // fn foo() { let _ = async {} }\n     has_mods |= p.eat(CONST_KW);\n-\n+    if p.at(ASYNC_KW) && p.nth(1) != L_CURLY {\n+        p.eat(ASYNC_KW);\n+        has_mods = true;\n+    }\n     // test_err unsafe_block_in_mod\n     // fn foo(){} unsafe { } fn bar(){}\n     if p.at(UNSAFE_KW) && p.nth(1) != L_CURLY {\n@@ -110,6 +116,9 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n \n     // items\n     let kind = match p.current() {\n+        // test async_fn\n+        // async fn foo() {}\n+\n         // test extern_fn\n         // extern fn foo() {}\n "}, {"sha": "03247ae38cd323c254ce65f06f1ad9770f8e328f", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -66,6 +66,7 @@ pub enum SyntaxKind {\n     SHR,\n     SHLEQ,\n     SHREQ,\n+    ASYNC_KW,\n     USE_KW,\n     FN_KW,\n     STRUCT_KW,\n@@ -233,6 +234,7 @@ use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n         match self {\n+            | ASYNC_KW\n             | USE_KW\n             | FN_KW\n             | STRUCT_KW\n@@ -403,6 +405,7 @@ impl SyntaxKind {\n             SHR => &SyntaxInfo { name: \"SHR\" },\n             SHLEQ => &SyntaxInfo { name: \"SHLEQ\" },\n             SHREQ => &SyntaxInfo { name: \"SHREQ\" },\n+            ASYNC_KW => &SyntaxInfo { name: \"ASYNC_KW\" },\n             USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n             FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n             STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -570,6 +573,7 @@ impl SyntaxKind {\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n         let kw = match ident {\n+            \"async\" => ASYNC_KW,\n             \"use\" => USE_KW,\n             \"fn\" => FN_KW,\n             \"struct\" => STRUCT_KW,"}, {"sha": "66f1339c10937a156aea98d76f7218e1df0c25a4", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -59,6 +59,7 @@ Grammar(\n         [\">>=\", \"SHREQ\"],\n     ],\n     keywords: [\n+        \"async\",\n         \"use\",\n         \"fn\",\n         \"struct\","}, {"sha": "1e91bff4e7d83b662f500d05976d24f37fff0d3e", "filename": "crates/ra_syntax/tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -1,3 +1,3 @@\n-fn use struct trait enum impl true false as extern crate\n+async fn use struct trait enum impl true false as extern crate\n mod pub self super in where for loop while if match const\n static mut type ref let else move return"}, {"sha": "22c00eefb62bd818bc9c99029b999064d33f6224", "filename": "crates/ra_syntax/tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Flexer%2F0011_keywords.txt?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -1,3 +1,5 @@\n+ASYNC_KW 5 \"async\"\n+WHITESPACE 1 \" \"\n FN_KW 2 \"fn\"\n WHITESPACE 1 \" \"\n USE_KW 3 \"use\""}, {"sha": "9a423248c2747e2b87cec11a0cadb586683ca6c5", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0007_async_without_semicolon.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -0,0 +1 @@\n+fn foo() { let _ = async {} }"}, {"sha": "bb9a2d0295da02b4df5f5a6a283df3700b9799ed", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0007_async_without_semicolon.txt", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -0,0 +1,31 @@\n+SOURCE_FILE@[0; 30)\n+  FN_DEF@[0; 29)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 29)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      LET_STMT@[11; 27)\n+        LET_KW@[11; 14)\n+        WHITESPACE@[14; 15)\n+        PLACEHOLDER_PAT@[15; 16)\n+          UNDERSCORE@[15; 16)\n+        WHITESPACE@[16; 17)\n+        EQ@[17; 18)\n+        WHITESPACE@[18; 19)\n+        BLOCK_EXPR@[19; 27)\n+          ASYNC_KW@[19; 24)\n+          WHITESPACE@[24; 25)\n+          BLOCK@[25; 27)\n+            L_CURLY@[25; 26)\n+            R_CURLY@[26; 27)\n+            err: `expected SEMI`\n+      WHITESPACE@[27; 28)\n+      R_CURLY@[28; 29)\n+  WHITESPACE@[29; 30)"}, {"sha": "f4adcb62b3b828b2ed2972ab2e40e63b402e4850", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0124_async_fn.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.rs?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -0,0 +1 @@\n+async fn foo() {}"}, {"sha": "d1a706ecc355ce253ce2968ab970c0bedfde49bd", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0124_async_fn.txt", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0124_async_fn.txt?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -0,0 +1,16 @@\n+SOURCE_FILE@[0; 18)\n+  FN_DEF@[0; 17)\n+    ASYNC_KW@[0; 5)\n+    WHITESPACE@[5; 6)\n+    FN_KW@[6; 8)\n+    WHITESPACE@[8; 9)\n+    NAME@[9; 12)\n+      IDENT@[9; 12) \"foo\"\n+    PARAM_LIST@[12; 14)\n+      L_PAREN@[12; 13)\n+      R_PAREN@[13; 14)\n+    WHITESPACE@[14; 15)\n+    BLOCK@[15; 17)\n+      L_CURLY@[15; 16)\n+      R_CURLY@[16; 17)\n+  WHITESPACE@[17; 18)"}, {"sha": "0a1e84b4ab340472a926eb09626d571901a5d369", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de4ad44282785d0928824eda5f062c2367a870f7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/de4ad44282785d0928824eda5f062c2367a870f7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=de4ad44282785d0928824eda5f062c2367a870f7", "patch": "@@ -215,8 +215,8 @@\n                     \"${workspaceRoot}\"\n                 ],\n                 \"background\": {\n-                    \"beginsPattern\": \"^\\\\[Running \",\n-                    \"endsPattern\": \"^(\\\\[Finished running\\\\]|To learn more, run the command again with --verbose\\\\.)$\"\n+                    \"beginsPattern\": \"^\\\\[Running\\\\b\",\n+                    \"endsPattern\": \"^\\\\[Finished running\\\\b\"\n                 },\n                 \"pattern\": \"$rustc\"\n             }"}]}