{"sha": "3ae0c5911ab50ee209179ee4329b0551abe6fc48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZTBjNTkxMWFiNTBlZTIwOTE3OWVlNDMyOWIwNTUxYWJlNmZjNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T13:44:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T13:44:38Z"}, "message": "Merge #9312\n\n9312: internal: Move out item specific completion tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8c8fb1436a64a6bfd56558f41b734a966aa5725e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8fb1436a64a6bfd56558f41b734a966aa5725e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae0c5911ab50ee209179ee4329b0551abe6fc48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy1HGCRBK7hj4Ov3rIwAA468IAA/jdFUX2DMN/ppgIFnD0GL0\nlrI4L762+rI6zW+lPpRZjC4UUSa5HoHGQJvFF3Flq9UQuYFrShFiukRTFKNdt+fR\nj7xLXVb/8Ky3SqKTPL1wvZOeqo83wJ1+JDTpPon5eu3Z6eLdgKjkCg3jf8Mm9nU1\njPoEsDPIIXLGTUx9NsPipYemJUby7uKDpSfLz36PhP7lpsgMuHlzv9CbVvdWBa1A\n+YBsKwB6zVozLqMjzFaii+em1wO0pOPt796XCr+D7RbkOqvfLKzHOdp24Va9qlcp\nkNiv488F9K1L6YN/x4cb+AFIq2ADri79bSHXADudkQcSU1dkzpcHfDQ/QWOkjgs=\n=fJE+\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c8fb1436a64a6bfd56558f41b734a966aa5725e\nparent c82a9141abe6b6cbf5b55710dc8a315a3839081b\nparent 2a48b532208de413e4e5d39e81c33a4644ecaa22\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623937478 +0000\ncommitter GitHub <noreply@github.com> 1623937478 +0000\n\nMerge #9312\n\n9312: internal: Move out item specific completion tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae0c5911ab50ee209179ee4329b0551abe6fc48", "html_url": "https://github.com/rust-lang/rust/commit/3ae0c5911ab50ee209179ee4329b0551abe6fc48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae0c5911ab50ee209179ee4329b0551abe6fc48/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82a9141abe6b6cbf5b55710dc8a315a3839081b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82a9141abe6b6cbf5b55710dc8a315a3839081b", "html_url": "https://github.com/rust-lang/rust/commit/c82a9141abe6b6cbf5b55710dc8a315a3839081b"}, {"sha": "2a48b532208de413e4e5d39e81c33a4644ecaa22", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a48b532208de413e4e5d39e81c33a4644ecaa22", "html_url": "https://github.com/rust-lang/rust/commit/2a48b532208de413e4e5d39e81c33a4644ecaa22"}], "stats": {"total": 413, "additions": 242, "deletions": 171}, "files": [{"sha": "f3b11e72dd1bd894accc385858a11c66819ddf95", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -322,7 +322,7 @@ mod tests {\n \n     use expect_test::{expect, Expect};\n \n-    use crate::{tests::filtered_completion_list, CompletionKind};\n+    use crate::tests::completion_list;\n \n     #[test]\n     fn attributes_are_sorted() {\n@@ -341,7 +341,7 @@ mod tests {\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = filtered_completion_list(ra_fixture, CompletionKind::Attribute);\n+        let actual = completion_list(ra_fixture);\n         expect.assert_eq(&actual);\n     }\n \n@@ -786,6 +786,7 @@ mod tests {\n                 at target_feature = \"\u2026\"\n                 at test\n                 at track_caller\n+                kw return\n             \"#]],\n         );\n     }\n@@ -801,6 +802,7 @@ mod tests {\n                 at deny(\u2026)\n                 at forbid(\u2026)\n                 at warn(\u2026)\n+                kw return\n             \"#]],\n         );\n     }"}, {"sha": "6fe41e0d6d138fd182c518da4d6367eb95cd7ff4", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -82,7 +82,7 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{tests::filtered_completion_list, CompletionKind};\n+    use crate::tests::completion_list;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let builtin_derives = r#\"\n@@ -106,10 +106,7 @@ pub macro PartialOrd {}\n pub macro Ord {}\n \n \"#;\n-        let actual = filtered_completion_list(\n-            &format!(\"{} {}\", builtin_derives, ra_fixture),\n-            CompletionKind::Attribute,\n-        );\n+        let actual = completion_list(&format!(\"{} {}\", builtin_derives, ra_fixture));\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "1ddc389868b8d1e937c450dc678aa59175190269", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -33,7 +33,6 @@ pub(super) fn complete_lint(\n \n #[cfg(test)]\n mod tests {\n-\n     use crate::tests::check_edit;\n \n     #[test]"}, {"sha": "c99fdef05c0b73e2e0b935a3c99b65bbe859aace", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 16, "deletions": 43, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -37,17 +37,6 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n             }\n         };\n     }\n-\n-    // Suggest .await syntax for types that implement Future trait\n-    if let Some(receiver) = ctx.dot_receiver() {\n-        if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n-            if ty.impls_future(ctx.db) {\n-                let mut item = kw_completion(\"await\");\n-                item.detail(\"expr.await\");\n-                item.add_to(acc);\n-            }\n-        };\n-    }\n }\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -59,6 +48,19 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         cov_mark::hit!(no_keyword_completion_in_record_lit);\n         return;\n     }\n+\n+    // Suggest .await syntax for types that implement Future trait\n+    if let Some(receiver) = ctx.dot_receiver() {\n+        if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n+            if ty.impls_future(ctx.db) {\n+                let mut item =\n+                    CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\");\n+                item.kind(CompletionItemKind::Keyword).detail(\"expr.await\");\n+                item.add_to(acc);\n+            }\n+        };\n+    }\n+\n     let mut add_keyword = |kw, snippet| add_keyword(ctx, acc, kw, snippet);\n \n     let expects_assoc_item = ctx.expects_assoc_item();\n@@ -67,6 +69,9 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n \n     if ctx.has_impl_or_trait_prev_sibling() {\n         add_keyword(\"where\", \"where \");\n+        if ctx.has_impl_prev_sibling() {\n+            add_keyword(\"for\", \"for \");\n+        }\n         return;\n     }\n     if ctx.previous_token_is(T![unsafe]) {\n@@ -385,22 +390,6 @@ fn quux() -> i32 {\n         );\n     }\n \n-    #[test]\n-    fn test_where_keyword() {\n-        check(\n-            r\"trait A $0\",\n-            expect![[r#\"\n-                kw where\n-            \"#]],\n-        );\n-        check(\n-            r\"impl A $0\",\n-            expect![[r#\"\n-                kw where\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn no_keyword_completion_in_comments() {\n         cov_mark::check!(no_keyword_completion_in_comments);\n@@ -477,22 +466,6 @@ fn foo() {\n         )\n     }\n \n-    #[test]\n-    fn before_field() {\n-        check(\n-            r#\"\n-struct Foo {\n-    $0\n-    pub f: i32,\n-}\n-\"#,\n-            expect![[r#\"\n-                kw pub(crate)\n-                kw pub\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn skip_struct_initializer() {\n         cov_mark::check!(no_keyword_completion_in_record_lit);"}, {"sha": "abf6935c940eadd259b9dc92f4a7dc81076953ab", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -49,19 +49,11 @@ pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{\n-        tests::{check_edit, filtered_completion_list_with_config, TEST_CONFIG},\n-        CompletionConfig, CompletionKind,\n-    };\n+    use crate::tests::{check_edit, completion_list};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        check_with_config(TEST_CONFIG, ra_fixture, expect);\n-    }\n-\n-    fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n-        let actual =\n-            filtered_completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n-        expect.assert_eq(&actual)\n+        let actual = completion_list(ra_fixture);\n+        expect.assert_eq(&actual);\n     }\n \n     #[test]"}, {"sha": "1c864c0e708b60bbd8968b68bbbab7a91df76b0e", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -141,29 +141,29 @@ fn module_chain_to_containing_module_file(\n \n #[cfg(test)]\n mod tests {\n-    use crate::{tests::filtered_completion_list, CompletionKind};\n+    use crate::tests::completion_list;\n     use expect_test::{expect, Expect};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = completion_list(ra_fixture);\n         expect.assert_eq(&actual);\n     }\n \n     #[test]\n     fn lib_module_completion() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod $0\n-            //- /foo.rs\n-            fn foo() {}\n-            //- /foo/ignored_foo.rs\n-            fn ignored_foo() {}\n-            //- /bar/mod.rs\n-            fn bar() {}\n-            //- /bar/ignored_bar.rs\n-            fn ignored_bar() {}\n-        \"#,\n+//- /lib.rs\n+mod $0\n+//- /foo.rs\n+fn foo() {}\n+//- /foo/ignored_foo.rs\n+fn ignored_foo() {}\n+//- /bar/mod.rs\n+fn bar() {}\n+//- /bar/ignored_bar.rs\n+fn ignored_bar() {}\n+\"#,\n             expect![[r#\"\n                 md foo;\n                 md bar;\n@@ -175,13 +175,13 @@ mod tests {\n     fn no_module_completion_with_module_body() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod $0 {\n+//- /lib.rs\n+mod $0 {\n \n-            }\n-            //- /foo.rs\n-            fn foo() {}\n-        \"#,\n+}\n+//- /foo.rs\n+fn foo() {}\n+\"#,\n             expect![[r#\"\"#]],\n         );\n     }\n@@ -190,17 +190,17 @@ mod tests {\n     fn main_module_completion() {\n         check(\n             r#\"\n-            //- /main.rs\n-            mod $0\n-            //- /foo.rs\n-            fn foo() {}\n-            //- /foo/ignored_foo.rs\n-            fn ignored_foo() {}\n-            //- /bar/mod.rs\n-            fn bar() {}\n-            //- /bar/ignored_bar.rs\n-            fn ignored_bar() {}\n-        \"#,\n+//- /main.rs\n+mod $0\n+//- /foo.rs\n+fn foo() {}\n+//- /foo/ignored_foo.rs\n+fn ignored_foo() {}\n+//- /bar/mod.rs\n+fn bar() {}\n+//- /bar/ignored_bar.rs\n+fn ignored_bar() {}\n+\"#,\n             expect![[r#\"\n                 md foo;\n                 md bar;\n@@ -212,13 +212,13 @@ mod tests {\n     fn main_test_module_completion() {\n         check(\n             r#\"\n-            //- /main.rs\n-            mod tests {\n-                mod $0;\n-            }\n-            //- /tests/foo.rs\n-            fn foo() {}\n-        \"#,\n+//- /main.rs\n+mod tests {\n+    mod $0;\n+}\n+//- /tests/foo.rs\n+fn foo() {}\n+\"#,\n             expect![[r#\"\n                 md foo\n             \"#]],\n@@ -229,19 +229,19 @@ mod tests {\n     fn directly_nested_module_completion() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod foo;\n-            //- /foo.rs\n-            mod $0;\n-            //- /foo/bar.rs\n-            fn bar() {}\n-            //- /foo/bar/ignored_bar.rs\n-            fn ignored_bar() {}\n-            //- /foo/baz/mod.rs\n-            fn baz() {}\n-            //- /foo/moar/ignored_moar.rs\n-            fn ignored_moar() {}\n-        \"#,\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+mod $0;\n+//- /foo/bar.rs\n+fn bar() {}\n+//- /foo/bar/ignored_bar.rs\n+fn ignored_bar() {}\n+//- /foo/baz/mod.rs\n+fn baz() {}\n+//- /foo/moar/ignored_moar.rs\n+fn ignored_moar() {}\n+\"#,\n             expect![[r#\"\n                 md bar\n                 md baz\n@@ -253,15 +253,15 @@ mod tests {\n     fn nested_in_source_module_completion() {\n         check(\n             r#\"\n-            //- /lib.rs\n-            mod foo;\n-            //- /foo.rs\n-            mod bar {\n-                mod $0\n-            }\n-            //- /foo/bar/baz.rs\n-            fn baz() {}\n-        \"#,\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+mod bar {\n+    mod $0\n+}\n+//- /foo/bar/baz.rs\n+fn baz() {}\n+\"#,\n             expect![[r#\"\n                 md baz;\n             \"#]],\n@@ -299,16 +299,16 @@ mod tests {\n     fn already_declared_bin_module_completion_omitted() {\n         check(\n             r#\"\n-            //- /src/bin.rs crate:main\n-            fn main() {}\n-            //- /src/bin/foo.rs\n-            mod $0\n-            //- /src/bin/bar.rs\n-            mod foo;\n-            fn bar() {}\n-            //- /src/bin/bar/bar_ignored.rs\n-            fn bar_ignored() {}\n-        \"#,\n+//- /src/bin.rs crate:main\n+fn main() {}\n+//- /src/bin/foo.rs\n+mod $0\n+//- /src/bin/bar.rs\n+mod foo;\n+fn bar() {}\n+//- /src/bin/bar/bar_ignored.rs\n+fn bar_ignored() {}\n+\"#,\n             expect![[r#\"\"#]],\n         );\n     }"}, {"sha": "88f4d940d0a04a6f9c2316fca3c0c4d90c3fe810", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -555,26 +555,6 @@ fn f() {m::$0}\n         );\n     }\n \n-    #[test]\n-    fn completes_in_assoc_item_list() {\n-        check(\n-            r#\"\n-#[macro_export]\n-macro_rules! foo { () => {} }\n-mod bar {}\n-\n-struct MyStruct {}\n-impl MyStruct {\n-    crate::$0\n-}\n-\"#,\n-            expect![[r##\"\n-                md bar\n-                ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            \"##]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_reexported_items_under_correct_name() {\n         check("}, {"sha": "cbc20cc2c39717c722a460e80b6cf3ef03d36dba", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -36,7 +36,11 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.expects_item() || ctx.previous_token_is(T![unsafe]) || ctx.path_qual().is_some() {\n+    if !ctx.expects_item()\n+        || ctx.previous_token_is(T![unsafe])\n+        || ctx.path_qual().is_some()\n+        || ctx.has_impl_or_trait_prev_sibling()\n+    {\n         return;\n     }\n     if ctx.has_visibility_prev_sibling() {"}, {"sha": "8ea5a2d5b9b7ba0253552cbd3e0321968029fa9d", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -6,7 +6,7 @@ use syntax::{ast, AstNode};\n use crate::{patterns::ImmediateLocation, CompletionContext, Completions};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() || !ctx.is_trivial_path() {\n+    if ctx.is_path_disallowed() || !ctx.is_trivial_path() || ctx.has_impl_or_trait_prev_sibling() {\n         return;\n     }\n \n@@ -68,6 +68,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             return;\n         }\n         let add_resolution = match res {\n+            ScopeDef::ImplSelfType(_) => {\n+                !ctx.previous_token_is(syntax::T![impl]) && !ctx.previous_token_is(syntax::T![for])\n+            }\n             // Don't suggest attribute macros and derives.\n             ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n             // no values in type places\n@@ -712,23 +715,6 @@ fn f() {}\n         )\n     }\n \n-    #[test]\n-    fn completes_target_type_or_trait_in_impl_block() {\n-        check(\n-            r#\"\n-trait MyTrait {}\n-struct MyStruct {}\n-\n-impl My$0\n-\"#,\n-            expect![[r#\"\n-                sp Self\n-                tt MyTrait\n-                st MyStruct\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn completes_types_and_const_in_arg_list() {\n         check("}, {"sha": "d7a7e9cca84519916d9ba786fb9b09b71d70a916", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -305,6 +305,10 @@ impl<'a> CompletionContext<'a> {\n         )\n     }\n \n+    pub(crate) fn has_impl_prev_sibling(&self) -> bool {\n+        matches!(self.prev_sibling, Some(ImmediatePrevSibling::ImplDefType))\n+    }\n+\n     pub(crate) fn has_visibility_prev_sibling(&self) -> bool {\n         matches!(self.prev_sibling, Some(ImmediatePrevSibling::Visibility))\n     }"}, {"sha": "1ea6017ce44193b5005aa20dfc23b66fbc36cf78", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -1,5 +1,12 @@\n+//! Tests and test utilities for completions.\n+//!\n+//! Most tests live in this module or its submodules unless for very specific completions like\n+//! `attributes` or `lifetimes` where the completed concept is a distinct thing.\n+//! Notable examples for completions that are being tested in this module's submodule are paths.\n+\n mod item_list;\n mod use_tree;\n+mod items;\n \n use hir::{PrefixKind, Semantics};\n use ide_db::{\n@@ -32,7 +39,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     },\n };\n \n-fn completion_list(code: &str) -> String {\n+pub(crate) fn completion_list(code: &str) -> String {\n     completion_list_with_config(TEST_CONFIG, code)\n }\n "}, {"sha": "8dfb8221bda95c7c63f817be8eb28b501c035abe", "filename": "crates/ide_completion/src/tests/items.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae0c5911ab50ee209179ee4329b0551abe6fc48/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs?ref=3ae0c5911ab50ee209179ee4329b0551abe6fc48", "patch": "@@ -0,0 +1,127 @@\n+//! Completions tests for item specifics overall.\n+//!\n+//! Except for use items which are tested in [super::use_tree] and mod declarations with are tested\n+//! in [crate::completions::mod_].\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let base = r#\"#[rustc_builtin_macro]\n+pub macro Clone {}\n+enum Enum { Variant }\n+struct Struct {}\n+#[macro_export]\n+macro_rules! foo {}\n+mod bar {}\n+const CONST: () = ();\n+trait Trait {}\n+\"#;\n+    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn target_type_or_trait_in_impl_block() {\n+    check(\n+        r#\"\n+impl Tra$0\n+\"#,\n+        expect![[r##\"\n+            tt Trait\n+            en Enum\n+            st Struct\n+            md bar\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            bt u32\n+            bt bool\n+            bt u8\n+            bt isize\n+            bt u16\n+            bt u64\n+            bt u128\n+            bt f32\n+            bt i128\n+            bt i16\n+            bt str\n+            bt i64\n+            bt char\n+            bt f64\n+            bt i32\n+            bt i8\n+            bt usize\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn target_type_in_trait_impl_block() {\n+    check(\n+        r#\"\n+impl Trait for Str$0\n+\"#,\n+        expect![[r##\"\n+            tt Trait\n+            en Enum\n+            st Struct\n+            md bar\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            bt u32\n+            bt bool\n+            bt u8\n+            bt isize\n+            bt u16\n+            bt u64\n+            bt u128\n+            bt f32\n+            bt i128\n+            bt i16\n+            bt str\n+            bt i64\n+            bt char\n+            bt f64\n+            bt i32\n+            bt i8\n+            bt usize\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn after_trait_name_in_trait_def() {\n+    check(\n+        r\"trait A $0\",\n+        expect![[r#\"\n+            kw where\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn after_trait_or_target_name_in_impl() {\n+    check(\n+        r\"impl Trait $0\",\n+        expect![[r#\"\n+            kw where\n+            kw for\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn before_record_field() {\n+    check(\n+        r#\"\n+struct Foo {\n+    $0\n+    pub f: i32,\n+}\n+\"#,\n+        expect![[r#\"\n+            kw pub(crate)\n+            kw pub\n+        \"#]],\n+    )\n+}"}]}