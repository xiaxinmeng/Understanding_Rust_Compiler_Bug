{"sha": "e83378b55f15d3b200111c9de066ea80f51c1b80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzM3OGI1NWYxNWQzYjIwMDExMWM5ZGUwNjZlYTgwZjUxYzFiODA=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-03-07T22:08:22Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-03-07T22:08:22Z"}, "message": "vec![0;4] is a fast path.\n\nAfter much tweaking found a way to get similar asm size as the\nu8 to_string implementation.", "tree": {"sha": "4d6b31e4bc1e1d243660e4041bda416910b99856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6b31e4bc1e1d243660e4041bda416910b99856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e83378b55f15d3b200111c9de066ea80f51c1b80", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElfpt1fswGixBWxap34UWHa4P82sFAmBFTtYACgkQ34UWHa4P\n82t7tRAAmWoepfqPWQMpNSnirVuwlWVhf328kDryv9s8VIbUNasgedT7Tvy68mII\nrFB0RLJREL6nBjHXspTOEFpsVuhMloiC+XAj7jm8lVdOWRmMmaWFVFmFckFeBM7m\nT7KvN9XeFyuE69lvcBxK4o190ertRNLB1nrorse6oK9I8E08lcoVIijEDEvQlRBe\n4muwn+OP8t5GKR1F5ka/UqGMcy0lQqfrxEFcDNTnaoWreKWJXsjnE5MsN9FDTgLI\nuMwlh0moBCkA0srN9f0spCZXX2n+mUmsFbO1tCKtAsnj7aHRE99aPELk98Wjv9KF\n2SD2JYeSl+6QPjfc22AVy6mhMJ9FN3QM0GdVM7tIbCiCialRBtx+42RSuH+m2aN5\nLZGnw74rMW7hFfCZN40kLB/YMKBAcQIcxQvf0iqb7sCaL/Z0rgVog4hnhF247mY6\nxU+O9dVvxdEZY/Pw8Ho8KkCO5azNLPL/Tk/6sBmnpgTFqJ859Ycdcn4LV2n1uVTD\nsqmpZKa+W7vfJHLqUqwXRH5byinHFZ5hDtsQRuS1EYCozf22PSOZWBiVXq2wKuQ6\nYu2Hz/HfP/cREBqnPv03boVAoCDQ4hqVMr+uVAIkRHE16RkNjiLdDChBITAeURTN\ne+pw2IWW+0DABHtxt61Xc2aj2/ESVa7WaCAAJRpFNVo2vLgnMoo=\n=VgDN\n-----END PGP SIGNATURE-----", "payload": "tree 4d6b31e4bc1e1d243660e4041bda416910b99856\nparent a678b9a2ae6fdca2bfa7aed8f73723a7cf238d16\nauthor Giles Cope <gilescope@gmail.com> 1615154902 +0000\ncommitter Giles Cope <gilescope@gmail.com> 1615154902 +0000\n\nvec![0;4] is a fast path.\n\nAfter much tweaking found a way to get similar asm size as the\nu8 to_string implementation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e83378b55f15d3b200111c9de066ea80f51c1b80", "html_url": "https://github.com/rust-lang/rust/commit/e83378b55f15d3b200111c9de066ea80f51c1b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e83378b55f15d3b200111c9de066ea80f51c1b80/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a678b9a2ae6fdca2bfa7aed8f73723a7cf238d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/a678b9a2ae6fdca2bfa7aed8f73723a7cf238d16", "html_url": "https://github.com/rust-lang/rust/commit/a678b9a2ae6fdca2bfa7aed8f73723a7cf238d16"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "14bf6eead05403f828ce6170888c580094499ce5", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e83378b55f15d3b200111c9de066ea80f51c1b80/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83378b55f15d3b200111c9de066ea80f51c1b80/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=e83378b55f15d3b200111c9de066ea80f51c1b80", "patch": "@@ -2243,39 +2243,37 @@ impl ToString for u8 {\n     }\n }\n \n-// 2 digit decimal look up table\n-static DEC_DIGITS_LUT: &[u8; 200] = b\"0001020304050607080910111213141516171819\\\n-      2021222324252627282930313233343536373839\\\n-      4041424344454647484950515253545556575859\\\n-      6061626364656667686970717273747576777879\\\n-      8081828384858687888990919293949596979899\";\n-\n #[stable(feature = \"i8_to_string_specialization\", since = \"1.999.0\")]\n impl ToString for i8 {\n     #[inline]\n     fn to_string(&self) -> String {\n-        let mut n = *self;\n-        let mut vec: Vec<u8> = if n < 0 {\n-            // convert the negative num to positive by summing 1 to it's 2 complement\n-            // ( -128u8.abs() would panic )\n-            n = (!n).wrapping_add(1);\n-            let mut v = Vec::with_capacity(4);\n-            v.push(b'-');\n-            v\n+        let mut vec = vec![0; 4];\n+        let n = *self;\n+        let mut free = 0;\n+        let mut n: u8 = if n.is_negative() {\n+            vec[free] = b'-';\n+            free += 1;\n+            i8::unsigned_abs(n)\n         } else {\n-            Vec::with_capacity(3)\n+            n as u8\n         };\n-        let mut n = n as u8;\n         if n >= 10 {\n             if n >= 100 {\n                 n -= 100;\n-                vec.push(b'1');\n+                vec[free] = b'1';\n+                free += 1;\n             }\n-            let nn = n * 2;\n-            vec.extend_from_slice(&DEC_DIGITS_LUT[nn as usize..=nn as usize + 1]);\n-        } else {\n-            vec.push(b'0' + (n as u8));\n+            debug_assert!(n < 100);\n+            vec[free] = b'0' + n / 10;\n+            free += 1;\n+            n %= 10;\n         }\n+        debug_assert!(n < 10);\n+        vec[free] = b'0' + n;\n+        free += 1;\n+        vec.truncate(free);\n+\n+        // SAFETY: Vec only contains ascii so valid utf8\n         unsafe { String::from_utf8_unchecked(vec) }\n     }\n }"}]}