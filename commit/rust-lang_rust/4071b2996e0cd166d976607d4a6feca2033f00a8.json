{"sha": "4071b2996e0cd166d976607d4a6feca2033f00a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNzFiMjk5NmUwY2QxNjZkOTc2NjA3ZDRhNmZlY2EyMDMzZjAwYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-19T08:46:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-19T08:46:43Z"}, "message": "Auto merge of #4099 - flip1995:ul_4094, r=oli-obk\n\nAdd macro check for unreadable_literal lint\n\nCloses #4094\n\nchangelog: Disable `unreadable_literal` lint inside macros", "tree": {"sha": "192af855e61837848b744740c0985395ccd017b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/192af855e61837848b744740c0985395ccd017b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4071b2996e0cd166d976607d4a6feca2033f00a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4071b2996e0cd166d976607d4a6feca2033f00a8", "html_url": "https://github.com/rust-lang/rust/commit/4071b2996e0cd166d976607d4a6feca2033f00a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4071b2996e0cd166d976607d4a6feca2033f00a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4de90491914b2452fdd305f9e814f786d84a075", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4de90491914b2452fdd305f9e814f786d84a075", "html_url": "https://github.com/rust-lang/rust/commit/f4de90491914b2452fdd305f9e814f786d84a075"}, {"sha": "3543f58c8449431f072316175da9dbf0a9c68ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3543f58c8449431f072316175da9dbf0a9c68ee4", "html_url": "https://github.com/rust-lang/rust/commit/3543f58c8449431f072316175da9dbf0a9c68ee4"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "c2892a278d495d6d9d4e96c76d0c856af6a5010b", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4071b2996e0cd166d976607d4a6feca2033f00a8/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4071b2996e0cd166d976607d4a6feca2033f00a8/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=4071b2996e0cd166d976607d4a6feca2033f00a8", "patch": "@@ -1,7 +1,7 @@\n //! Lints concerned with the grouping of digits with underscores in integral or\n //! floating-point literal expressions.\n \n-use crate::utils::{snippet_opt, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet_opt, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n@@ -355,6 +355,7 @@ impl EarlyLintPass for LiteralDigitGrouping {\n \n impl LiteralDigitGrouping {\n     fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n+        let in_macro = in_macro(lit.span);\n         match lit.node {\n             LitKind::Int(..) => {\n                 // Lint integral literals.\n@@ -364,7 +365,7 @@ impl LiteralDigitGrouping {\n                     if char::to_digit(firstch, 10).is_some();\n                     then {\n                         let digit_info = DigitInfo::new(&src, false);\n-                        let _ = Self::do_lint(digit_info.digits, digit_info.suffix).map_err(|warning_type| {\n+                        let _ = Self::do_lint(digit_info.digits, digit_info.suffix, in_macro).map_err(|warning_type| {\n                             warning_type.display(&digit_info.grouping_hint(), cx, lit.span)\n                         });\n                     }\n@@ -386,12 +387,12 @@ impl LiteralDigitGrouping {\n \n                         // Lint integral and fractional parts separately, and then check consistency of digit\n                         // groups if both pass.\n-                        let _ = Self::do_lint(parts[0], digit_info.suffix)\n+                        let _ = Self::do_lint(parts[0], digit_info.suffix, in_macro)\n                             .map(|integral_group_size| {\n                                 if parts.len() > 1 {\n                                     // Lint the fractional part of literal just like integral part, but reversed.\n                                     let fractional_part = &parts[1].chars().rev().collect::<String>();\n-                                    let _ = Self::do_lint(fractional_part, None)\n+                                    let _ = Self::do_lint(fractional_part, None, in_macro)\n                                         .map(|fractional_group_size| {\n                                             let consistent = Self::parts_consistent(integral_group_size,\n                                                                                     fractional_group_size,\n@@ -436,7 +437,7 @@ impl LiteralDigitGrouping {\n \n     /// Performs lint on `digits` (no decimal point) and returns the group\n     /// size on success or `WarningType` when emitting a warning.\n-    fn do_lint(digits: &str, suffix: Option<&str>) -> Result<usize, WarningType> {\n+    fn do_lint(digits: &str, suffix: Option<&str>, in_macro: bool) -> Result<usize, WarningType> {\n         if let Some(suffix) = suffix {\n             if is_mistyped_suffix(suffix) {\n                 return Err(WarningType::MistypedLiteralSuffix);\n@@ -452,7 +453,7 @@ impl LiteralDigitGrouping {\n \n         if underscore_positions.is_empty() {\n             // Check if literal needs underscores.\n-            if digits.len() > 5 {\n+            if !in_macro && digits.len() > 5 {\n                 Err(WarningType::UnreadableLiteral)\n             } else {\n                 Ok(0)"}, {"sha": "679b962756ca41f4fb5eb00145ee9df582c59afa", "filename": "tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4071b2996e0cd166d976607d4a6feca2033f00a8/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4071b2996e0cd166d976607d4a6feca2033f00a8/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=4071b2996e0cd166d976607d4a6feca2033f00a8", "patch": "@@ -1,5 +1,13 @@\n // run-rustfix\n \n+struct Foo(u64);\n+\n+macro_rules! foo {\n+    () => {\n+        Foo(123123123123)\n+    };\n+}\n+\n #[warn(clippy::unreadable_literal)]\n #[allow(unused_variables)]\n fn main() {\n@@ -22,4 +30,6 @@ fn main() {\n     let fail10: u32 = 0xBAFE_BAFE;\n     let fail11 = 0x0abc_deff;\n     let fail12: i128 = 0x00ab_cabc_abca_bcab_cabc;\n+\n+    let _ = foo!();\n }"}, {"sha": "9922f01aa00f94cf09c7229371ed435aa79bc230", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4071b2996e0cd166d976607d4a6feca2033f00a8/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4071b2996e0cd166d976607d4a6feca2033f00a8/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=4071b2996e0cd166d976607d4a6feca2033f00a8", "patch": "@@ -1,5 +1,13 @@\n // run-rustfix\n \n+struct Foo(u64);\n+\n+macro_rules! foo {\n+    () => {\n+        Foo(123123123123)\n+    };\n+}\n+\n #[warn(clippy::unreadable_literal)]\n #[allow(unused_variables)]\n fn main() {\n@@ -22,4 +30,6 @@ fn main() {\n     let fail10: u32 = 0xBAFEBAFE;\n     let fail11 = 0xabcdeff;\n     let fail12: i128 = 0xabcabcabcabcabcabc;\n+\n+    let _ = foo!();\n }"}, {"sha": "a31ff75955ca6f7e2e1d8d83ee511c7169f60538", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4071b2996e0cd166d976607d4a6feca2033f00a8/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4071b2996e0cd166d976607d4a6feca2033f00a8/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=4071b2996e0cd166d976607d4a6feca2033f00a8", "patch": "@@ -1,55 +1,55 @@\n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:17:16\n+  --> $DIR/unreadable_literal.rs:25:16\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:17:30\n+  --> $DIR/unreadable_literal.rs:25:30\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                              ^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:17:51\n+  --> $DIR/unreadable_literal.rs:25:51\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                                                   ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:17:63\n+  --> $DIR/unreadable_literal.rs:25:63\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                                                               ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:19:19\n+  --> $DIR/unreadable_literal.rs:27:19\n    |\n LL |     let bad_sci = 1.123456e1;\n    |                   ^^^^^^^^^^ help: consider: `1.123_456e1`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:21:17\n+  --> $DIR/unreadable_literal.rs:29:17\n    |\n LL |     let fail9 = 0xabcdef;\n    |                 ^^^^^^^^ help: consider: `0x00ab_cdef`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:22:23\n+  --> $DIR/unreadable_literal.rs:30:23\n    |\n LL |     let fail10: u32 = 0xBAFEBAFE;\n    |                       ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:23:18\n+  --> $DIR/unreadable_literal.rs:31:18\n    |\n LL |     let fail11 = 0xabcdeff;\n    |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:24:24\n+  --> $DIR/unreadable_literal.rs:32:24\n    |\n LL |     let fail12: i128 = 0xabcabcabcabcabcabc;\n    |                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`"}]}