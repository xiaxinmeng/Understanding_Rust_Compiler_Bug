{"sha": "b73535f1e9c46a698527fab51b1cc9fad3f53412", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MzUzNWYxZTljNDZhNjk4NTI3ZmFiNTFiMWNjOWZhZDNmNTM0MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-09T13:20:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-09T13:20:14Z"}, "message": "Auto merge of #53031 - michaelwoerister:cross-lto, r=alexcrichton\n\nApply some fixes to cross-language LTO (especially when targeting MSVC)\n\nThis PR contains a few fixes that were needed in order to get Firefox compiling with Rust/C++ cross-language ThinLTO on Windows. The commits are self-contained and should be self-explanatory.\n\nr? @alexcrichton", "tree": {"sha": "6ea236ea46239ee0a06dd2a36543f442b29aac80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea236ea46239ee0a06dd2a36543f442b29aac80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73535f1e9c46a698527fab51b1cc9fad3f53412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73535f1e9c46a698527fab51b1cc9fad3f53412", "html_url": "https://github.com/rust-lang/rust/commit/b73535f1e9c46a698527fab51b1cc9fad3f53412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73535f1e9c46a698527fab51b1cc9fad3f53412/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb6275f4fd6cf774e1789fabfacae7248c45021", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb6275f4fd6cf774e1789fabfacae7248c45021", "html_url": "https://github.com/rust-lang/rust/commit/fbb6275f4fd6cf774e1789fabfacae7248c45021"}, {"sha": "49972e93ffdd6d70ddfef8486d1642cec69bfaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/49972e93ffdd6d70ddfef8486d1642cec69bfaeb", "html_url": "https://github.com/rust-lang/rust/commit/49972e93ffdd6d70ddfef8486d1642cec69bfaeb"}], "stats": {"total": 227, "additions": 203, "deletions": 24}, "files": [{"sha": "dddf921aec68c232ac664de80e8aaef21c2ed5af", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -831,7 +831,7 @@ macro_rules! options {\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n         pub const parse_cross_lang_lto: Option<&'static str> =\n-            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `no-link`, \\\n+            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n     }\n \n@@ -2006,13 +2006,6 @@ pub fn build_session_options_and_crate_config(\n         (&None, &None) => None,\n     }.map(|m| PathBuf::from(m));\n \n-    if cg.lto != Lto::No && incremental.is_some() {\n-        early_error(\n-            error_format,\n-            \"can't perform LTO when compiling incrementally\",\n-        );\n-    }\n-\n     if debugging_opts.profile && incremental.is_some() {\n         early_error(\n             error_format,"}, {"sha": "9a3ce50fcbdce90afe83140e8a1d03e178b19b6a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -20,7 +20,7 @@ use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{OutputType};\n+use session::config::{OutputType, Lto};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -1189,9 +1189,34 @@ pub fn build_session_(\n         driver_lint_caps: FxHashMap(),\n     };\n \n+    validate_commandline_args_with_session_available(&sess);\n+\n     sess\n }\n \n+// If it is useful to have a Session available already for validating a\n+// commandline argument, you can do so here.\n+fn validate_commandline_args_with_session_available(sess: &Session) {\n+\n+    if sess.lto() != Lto::No && sess.opts.incremental.is_some() {\n+        sess.err(\"can't perform LTO when compiling incrementally\");\n+    }\n+\n+    // Since we don't know if code in an rlib will be linked to statically or\n+    // dynamically downstream, rustc generates `__imp_` symbols that help the\n+    // MSVC linker deal with this lack of knowledge (#27438). Unfortunately,\n+    // these manually generated symbols confuse LLD when it tries to merge\n+    // bitcode during ThinLTO. Therefore we disallow dynamic linking on MSVC\n+    // when compiling for LLD ThinLTO. This way we can validly just not generate\n+    // the `dllimport` attributes and `__imp_` symbols in that case.\n+    if sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+       sess.opts.cg.prefer_dynamic &&\n+       sess.target.target.options.is_like_msvc {\n+        sess.err(\"Linker plugin based LTO is not supported together with \\\n+                  `-C prefer-dynamic` when targeting MSVC\");\n+    }\n+}\n+\n /// Hash value constructed out of all the `-C metadata` arguments passed to the\n /// compiler. Together with the crate-name forms a unique global identifier for\n /// the crate."}, {"sha": "714e8914e48c53961adc6a2f2e356057a6416bbd", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -123,6 +123,15 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n         .filter(|l| !l.is_empty())\n }\n \n+pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n+    let target_cpu = CString::new(cx.tcx.sess.target_cpu().to_string()).unwrap();\n+    llvm::AddFunctionAttrStringValue(\n+            llfn,\n+            llvm::AttributePlace::Function,\n+            cstr(\"target-cpu\\0\"),\n+            target_cpu.as_c_str());\n+}\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n /// attributes.\n pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n@@ -167,6 +176,15 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n         Some(true) | None => {}\n     }\n \n+    // Always annotate functions with the target-cpu they are compiled for.\n+    // Without this, ThinLTO won't inline Rust functions into Clang generated\n+    // functions (because Clang annotates functions this way too).\n+    // NOTE: For now we just apply this if -Zcross-lang-lto is specified, since\n+    //       it introduce a little overhead and isn't really necessary otherwise.\n+    if cx.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() {\n+        apply_target_cpu_attr(cx, llfn);\n+    }\n+\n     let features = llvm_target_features(cx.tcx.sess)\n         .map(|s| s.to_string())\n         .chain("}, {"sha": "50d41d76986fbc4c6c4e2918b37d7591fdebc469", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -563,7 +563,7 @@ fn link_staticlib(sess: &Session,\n         });\n         ab.add_rlib(path,\n                     &name.as_str(),\n-                    is_full_lto_enabled(sess) &&\n+                    are_upstream_rust_objects_already_included(sess) &&\n                         !ignored_for_lto(sess, &codegen_results.crate_info, cnum),\n                     skip_object_files).unwrap();\n \n@@ -1446,7 +1446,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n             lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib)\n         });\n \n-        if (!is_full_lto_enabled(sess) ||\n+        if (!are_upstream_rust_objects_already_included(sess) ||\n             ignored_for_lto(sess, &codegen_results.crate_info, cnum)) &&\n            crate_type != config::CrateType::Dylib &&\n            !skip_native {\n@@ -1500,7 +1500,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n                 // file, then we don't need the object file as it's part of the\n                 // LTO module. Note that `#![no_builtins]` is excluded from LTO,\n                 // though, so we let that object file slide.\n-                let skip_because_lto = is_full_lto_enabled(sess) &&\n+                let skip_because_lto = are_upstream_rust_objects_already_included(sess) &&\n                     is_rust_object &&\n                     (sess.target.target.options.no_builtins ||\n                      !codegen_results.crate_info.is_no_builtins.contains(&cnum));\n@@ -1537,7 +1537,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n     fn add_dynamic_crate(cmd: &mut dyn Linker, sess: &Session, cratepath: &Path) {\n         // If we're performing LTO, then it should have been previously required\n         // that all upstream rust dependencies were available in an rlib format.\n-        assert!(!is_full_lto_enabled(sess));\n+        assert!(!are_upstream_rust_objects_already_included(sess));\n \n         // Just need to tell the linker about where the library lives and\n         // what its name is\n@@ -1623,11 +1623,15 @@ fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n     }\n }\n \n-fn is_full_lto_enabled(sess: &Session) -> bool {\n+fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n     match sess.lto() {\n         Lto::Yes |\n-        Lto::Thin |\n         Lto::Fat => true,\n+        Lto::Thin => {\n+            // If we defer LTO to the linker, we haven't run LTO ourselves, so\n+            // any upstream object files have not been copied yet.\n+            !sess.opts.debugging_opts.cross_lang_lto.enabled()\n+        }\n         Lto::No |\n         Lto::ThinLocal => false,\n     }"}, {"sha": "d7741230327bbf907676503e3b0c0b8af1982d9c", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -195,6 +195,10 @@ pub(crate) fn run(cgcx: &CodegenContext,\n         }\n         Lto::Thin |\n         Lto::ThinLocal => {\n+            if cgcx.opts.debugging_opts.cross_lang_lto.enabled() {\n+                unreachable!(\"We should never reach this case if the LTO step \\\n+                              is deferred to the linker\");\n+            }\n             thin_lto(&diag_handler, modules, upstream_modules, &arr, timeline)\n         }\n         Lto::No => unreachable!(),"}, {"sha": "640e1c1f3d4f112cdb18158e3b9e73a4d5ecefab", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -552,7 +552,8 @@ unsafe fn optimize(cgcx: &CodegenContext,\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n                 let opt_level = config.opt_level.unwrap_or(llvm::CodeGenOptLevel::None);\n-                let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal;\n+                let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n+                    (cgcx.lto != Lto::Fat && cgcx.opts.debugging_opts.cross_lang_lto.enabled());\n                 have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n                 if using_thin_buffers && !prepare_for_thin_lto {\n                     assert!(addpass(\"name-anon-globals\"));\n@@ -1351,6 +1352,8 @@ fn execute_work_item(cgcx: &CodegenContext,\n         unsafe {\n             optimize(cgcx, &diag_handler, &module, config, timeline)?;\n \n+            let linker_does_lto = cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n+\n             // After we've done the initial round of optimizations we need to\n             // decide whether to synchronously codegen this module or ship it\n             // back to the coordinator thread for further LTO processing (which\n@@ -1361,6 +1364,11 @@ fn execute_work_item(cgcx: &CodegenContext,\n             let needs_lto = match cgcx.lto {\n                 Lto::No => false,\n \n+                // If the linker does LTO, we don't have to do it. Note that we\n+                // keep doing full LTO, if it is requested, as not to break the\n+                // assumption that the output will be a single module.\n+                Lto::Thin | Lto::ThinLocal if linker_does_lto => false,\n+\n                 // Here we've got a full crate graph LTO requested. We ignore\n                 // this, however, if the crate type is only an rlib as there's\n                 // no full crate graph to process, that'll happen later.\n@@ -1391,11 +1399,6 @@ fn execute_work_item(cgcx: &CodegenContext,\n             // settings.\n             let needs_lto = needs_lto && module.kind != ModuleKind::Metadata;\n \n-            // Don't run LTO passes when cross-lang LTO is enabled. The linker\n-            // will do that for us in this case.\n-            let needs_lto = needs_lto &&\n-                !cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n-\n             if needs_lto {\n                 Ok(WorkItemResult::NeedsLTO(module))\n             } else {\n@@ -2375,8 +2378,18 @@ pub(crate) fn submit_codegened_module_to_llvm(tcx: TyCtxt,\n }\n \n fn msvc_imps_needed(tcx: TyCtxt) -> bool {\n+    // This should never be true (because it's not supported). If it is true,\n+    // something is wrong with commandline arg validation.\n+    assert!(!(tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+              tcx.sess.target.target.options.is_like_msvc &&\n+              tcx.sess.opts.cg.prefer_dynamic));\n+\n     tcx.sess.target.target.options.is_like_msvc &&\n-        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateType::Rlib)\n+        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateType::Rlib) &&\n+    // ThinLTO can't handle this workaround in all cases, so we don't\n+    // emit the `__imp_` symbols. Instead we make them unnecessary by disallowing\n+    // dynamic linking when cross-language LTO is enabled.\n+    !tcx.sess.opts.debugging_opts.cross_lang_lto.enabled()\n }\n \n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`."}, {"sha": "54ff5d219b39acfa6e0204a81448bbd10383203b", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -596,6 +596,7 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n \n         // `main` should respect same config for frame pointer elimination as rest of code\n         attributes::set_frame_pointer_elimination(cx, llfn);\n+        attributes::apply_target_cpu_attr(cx, llfn);\n \n         let bx = Builder::new_block(cx, llfn, \"top\");\n "}, {"sha": "fafc0e723225d34eb54406870b0e92d1528b1ecb", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -189,7 +189,20 @@ pub fn get_static(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll Value {\n             llvm::set_thread_local_mode(g, cx.tls_model);\n         }\n \n-        if cx.use_dll_storage_attrs && !cx.tcx.is_foreign_item(def_id) {\n+        let needs_dll_storage_attr =\n+            cx.use_dll_storage_attrs && !cx.tcx.is_foreign_item(def_id) &&\n+            // ThinLTO can't handle this workaround in all cases, so we don't\n+            // emit the attrs. Instead we make them unnecessary by disallowing\n+            // dynamic linking when cross-language LTO is enabled.\n+            !cx.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled();\n+\n+        // If this assertion triggers, there's something wrong with commandline\n+        // argument validation.\n+        debug_assert!(!(cx.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+                        cx.tcx.sess.target.target.options.is_like_msvc &&\n+                        cx.tcx.sess.opts.cg.prefer_dynamic));\n+\n+        if needs_dll_storage_attr {\n             // This item is external but not foreign, i.e. it originates from an external Rust\n             // crate. Since we don't know whether this crate will be linked dynamically or\n             // statically in the final application, we always mark such symbols as 'dllimport'."}, {"sha": "7a308bb6e882385e34390a843a61cf38629fc3f9", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use attributes;\n use common;\n use llvm;\n use rustc::dep_graph::DepGraphSafe;\n@@ -381,6 +382,7 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n                 declare::declare_cfn(self, name, fty)\n             }\n         };\n+        attributes::apply_target_cpu_attr(self, llfn);\n         self.eh_personality.set(Some(llfn));\n         llfn\n     }\n@@ -412,6 +414,7 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n \n         let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", ty);\n         attributes::unwind(llfn, true);\n+        attributes::apply_target_cpu_attr(self, llfn);\n         unwresume.set(Some(llfn));\n         llfn\n     }"}, {"sha": "0d5d02206a6326ba35d2d158fb4eec967f26f1c5", "filename": "src/test/codegen/no-dllimport-w-cross-lang-lto.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test makes sure that functions get annotated with the proper\n+// \"target-cpu\" attribute in LLVM.\n+\n+// no-prefer-dynamic\n+// only-msvc\n+// compile-flags: -Z cross-lang-lto\n+\n+#![crate_type = \"rlib\"]\n+\n+// CHECK-NOT: @{{.*}}__imp_{{.*}}GLOBAL{{.*}} = global i8*\n+\n+pub static GLOBAL: u32 = 0;\n+pub static mut GLOBAL2: u32 = 0;"}, {"sha": "cd7d061c0de3d2d3ef7c4e18c75bca8ee9582e1f", "filename": "src/test/codegen/target-cpu-on-functions.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test makes sure that functions get annotated with the proper\n+// \"target-cpu\" attribute in LLVM.\n+\n+// no-prefer-dynamic\n+// ignore-tidy-linelength\n+// compile-flags: -C no-prepopulate-passes -C panic=abort -Z cross-lang-lto -Cpasses=name-anon-globals\n+\n+#![crate_type = \"staticlib\"]\n+\n+// CHECK-LABEL: define {{.*}} @exported() {{.*}} #0\n+#[no_mangle]\n+pub extern fn exported() {\n+    not_exported();\n+}\n+\n+// CHECK-LABEL: define {{.*}} @_ZN23target_cpu_on_functions12not_exported{{.*}}() {{.*}} #0\n+fn not_exported() {}\n+\n+// CHECK: attributes #0 = {{.*}} \"target-cpu\"=\"{{.*}}\""}, {"sha": "0a6f226a027f3cc0ef2804db4656287310e2154e", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/Makefile", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -0,0 +1,23 @@\n+\n+-include ../tools.mk\n+\n+# This test makes sure that we don't loose upstream object files when compiling\n+# staticlibs with -Zcross-lang-lto\n+\n+all: staticlib.rs upstream.rs\n+\t$(RUSTC) upstream.rs -Z cross-lang-lto -Ccodegen-units=1\n+\n+\t# Check No LTO\n+\t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n+\t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n+\t# Make sure the upstream object file was included\n+\tls $(TMPDIR)/upstream.*.rcgu.o\n+\n+\t# Cleanup\n+\trm $(TMPDIR)/*\n+\n+\t# Check ThinLTO\n+\t$(RUSTC) upstream.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin\n+\t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n+\t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n+\tls $(TMPDIR)/upstream.*.rcgu.o"}, {"sha": "b370b7b859d87b592a557d02b6063919910acdf5", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/staticlib.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fstaticlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fstaticlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fstaticlib.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"staticlib\"]\n+\n+extern crate upstream;\n+\n+#[no_mangle]\n+pub extern fn bar() {\n+    upstream::foo();\n+}"}, {"sha": "a79b9bf08fc6549fe63f628092e1c70af8a172a4", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/upstream.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fupstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fupstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fupstream.rs?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+pub fn foo() {}"}, {"sha": "6d06fade35296b379dd42f28ba921a4aa670c39b", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b73535f1e9c46a698527fab51b1cc9fad3f53412/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=b73535f1e9c46a698527fab51b1cc9fad3f53412", "patch": "@@ -1,4 +1,3 @@\n-# ignore-msvc\n \n -include ../tools.mk\n "}]}