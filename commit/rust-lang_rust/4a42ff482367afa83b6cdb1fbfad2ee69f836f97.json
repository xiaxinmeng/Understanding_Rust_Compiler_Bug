{"sha": "4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNDJmZjQ4MjM2N2FmYTgzYjZjZGIxZmJmYWQyZWU2OWY4MzZmOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T02:05:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T02:05:54Z"}, "message": "Auto merge of #43445 - zackmdavis:rustdoc_major_section_self-links, r=GuillaumeGomez\n\nrustdoc: make major section headers self-links\n\nThe sidebar already has links to these h2's ids, but for convenience,\nthe h2 itself should also be a link (retaining its present appearance).\n\n![doc_sec_self-links](https://user-images.githubusercontent.com/1076988/28503806-cdce4e00-6fc1-11e7-832a-2ed1fc62808f.png)\n\nThis should address most of #24484.", "tree": {"sha": "4da29a597827b52ac9eb0a47822d423e0db9ed36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da29a597827b52ac9eb0a47822d423e0db9ed36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "html_url": "https://github.com/rust-lang/rust/commit/4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a42ff482367afa83b6cdb1fbfad2ee69f836f97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddaab61101e48f0a58ce176b5a6aff11ae36c986", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddaab61101e48f0a58ce176b5a6aff11ae36c986", "html_url": "https://github.com/rust-lang/rust/commit/ddaab61101e48f0a58ce176b5a6aff11ae36c986"}, {"sha": "09fc36e3b5ca245d31f9dbddeb41006ac457273e", "url": "https://api.github.com/repos/rust-lang/rust/commits/09fc36e3b5ca245d31f9dbddeb41006ac457273e", "html_url": "https://github.com/rust-lang/rust/commit/09fc36e3b5ca245d31f9dbddeb41006ac457273e"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "e89bd7aae9bf12f53713d47f651353d2206f89eb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4a42ff482367afa83b6cdb1fbfad2ee69f836f97/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a42ff482367afa83b6cdb1fbfad2ee69f836f97/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4a42ff482367afa83b6cdb1fbfad2ee69f836f97", "patch": "@@ -2141,7 +2141,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     if !types.is_empty() {\n         write!(w, \"\n-            <h2 id='associated-types'>Associated Types</h2>\n+            <h2 id='associated-types' class='section-header'>\n+              <a href='#associated-types'>Associated Types</a>\n+            </h2>\n             <div class='methods'>\n         \")?;\n         for t in &types {\n@@ -2152,7 +2154,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     if !consts.is_empty() {\n         write!(w, \"\n-            <h2 id='associated-const'>Associated Constants</h2>\n+            <h2 id='associated-const' class='section-header'>\n+              <a href='#associated-const'>Associated Constants</a>\n+            </h2>\n             <div class='methods'>\n         \")?;\n         for t in &consts {\n@@ -2164,7 +2168,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     // Output the documentation for each function individually\n     if !required.is_empty() {\n         write!(w, \"\n-            <h2 id='required-methods'>Required Methods</h2>\n+            <h2 id='required-methods' class='section-header'>\n+              <a href='#required-methods'>Required Methods</a>\n+            </h2>\n             <div class='methods'>\n         \")?;\n         for m in &required {\n@@ -2174,7 +2180,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n     if !provided.is_empty() {\n         write!(w, \"\n-            <h2 id='provided-methods'>Provided Methods</h2>\n+            <h2 id='provided-methods' class='section-header'>\n+              <a href='#provided-methods'>Provided Methods</a>\n+            </h2>\n             <div class='methods'>\n         \")?;\n         for m in &provided {\n@@ -2188,7 +2196,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     let cache = cache();\n     write!(w, \"\n-        <h2 id='implementors'>Implementors</h2>\n+        <h2 id='implementors' class='section-header'>\n+          <a href='#implementors'>Implementors</a>\n+        </h2>\n         <ul class='item-list' id='implementors-list'>\n     \")?;\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n@@ -2419,7 +2429,8 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }).peekable();\n     if let doctree::Plain = s.struct_type {\n         if fields.peek().is_some() {\n-            write!(w, \"<h2 id='fields' class='fields'>Fields</h2>\")?;\n+            write!(w, \"<h2 id='fields' class='fields section-header'>\n+                       <a href='#fields'>Fields</a></h2>\")?;\n             for (field, ty) in fields {\n                 let id = derive_id(format!(\"{}.{}\",\n                                            ItemType::StructField,\n@@ -2467,7 +2478,8 @@ fn item_union(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         }\n     }).peekable();\n     if fields.peek().is_some() {\n-        write!(w, \"<h2 id='fields' class='fields'>Fields</h2>\")?;\n+        write!(w, \"<h2 id='fields' class='fields section-header'>\n+                   <a href='#fields'>Fields</a></h2>\")?;\n         for (field, ty) in fields {\n             write!(w, \"<span id='{shortty}.{name}' class=\\\"{shortty}\\\"><code>{name}: {ty}</code>\n                        </span>\",\n@@ -2539,7 +2551,8 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     document(w, cx, it)?;\n     if !e.variants.is_empty() {\n-        write!(w, \"<h2 id='variants' class='variants'>Variants</h2>\\n\")?;\n+        write!(w, \"<h2 id='variants' class='variants section-header'>\n+                   <a href='#variants'>Variants</a></h2>\\n\")?;\n         for variant in &e.variants {\n             let id = derive_id(format!(\"{}.{}\",\n                                        ItemType::Variant,\n@@ -2810,12 +2823,19 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n     if !non_trait.is_empty() {\n         let render_mode = match what {\n             AssocItemRender::All => {\n-                write!(w, \"<h2 id='methods'>Methods</h2>\")?;\n+                write!(w, \"\n+                    <h2 id='methods' class='section-header'>\n+                      <a href='#methods'>Methods</a>\n+                    </h2>\n+                \")?;\n                 RenderMode::Normal\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n-                write!(w, \"<h2 id='deref-methods'>Methods from \\\n-                               {}&lt;Target = {}&gt;</h2>\", trait_, type_)?;\n+                write!(w, \"\n+                    <h2 id='deref-methods' class='section-header'>\n+                      <a href='#deref-methods'>Methods from {}&lt;Target = {}&gt;</a>\n+                    </h2>\n+                \", trait_, type_)?;\n                 RenderMode::ForDeref { mut_: deref_mut_ }\n             }\n         };\n@@ -2837,8 +2857,11 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             }).is_some();\n             render_deref_methods(w, cx, impl_, containing_item, has_deref_mut)?;\n         }\n-        write!(w, \"<h2 id='implementations'>Trait \\\n-                   Implementations</h2>\")?;\n+        write!(w, \"\n+            <h2 id='implementations' class='section-header'>\n+              <a href='#implementations'>Trait Implementations</a>\n+            </h2>\n+        \")?;\n         for i in &traits {\n             let did = i.trait_did().unwrap();\n             let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);"}]}