{"sha": "c35c46821a69af14e6b38e0238f70e22433a3e8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNWM0NjgyMWE2OWFmMTRlNmIzOGUwMjM4ZjcwZTIyNDMzYTNlOGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-30T13:40:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T15:23:45Z"}, "message": "Fallout in public-facing and semi-public-facing libs", "tree": {"sha": "7ac8c7a22194415f47c035622f5df59517f8b5bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac8c7a22194415f47c035622f5df59517f8b5bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c35c46821a69af14e6b38e0238f70e22433a3e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c35c46821a69af14e6b38e0238f70e22433a3e8e", "html_url": "https://github.com/rust-lang/rust/commit/c35c46821a69af14e6b38e0238f70e22433a3e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c35c46821a69af14e6b38e0238f70e22433a3e8e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "html_url": "https://github.com/rust-lang/rust/commit/49b76a087bbbca3771c8b98125ecb59f7bfe80e6"}], "stats": {"total": 515, "additions": 273, "deletions": 242}, "files": [{"sha": "cc90a69fd2ae7d2b1f1147565abdddd73f64c0d1", "filename": "src/doc/reference.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -1648,7 +1648,7 @@ specific type.\n Implementations are defined with the keyword `impl`.\n \n ```\n-# #[derive(Copy)]\n+# #[derive(Copy, Clone)]\n # struct Point {x: f64, y: f64};\n # type Surface = i32;\n # struct BoundingBox {x: f64, y: f64, width: f64, height: f64};\n@@ -1661,6 +1661,10 @@ struct Circle {\n \n impl Copy for Circle {}\n \n+impl Clone for Circle {\n+    fn clone(&self) -> Circle { *self }\n+}\n+\n impl Shape for Circle {\n     fn draw(&self, s: Surface) { do_draw_circle(s, *self); }\n     fn bounding_box(&self) -> BoundingBox {"}, {"sha": "3804874a650f6c065e23c78043bbfc8b1c35a168", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -30,7 +30,7 @@\n //! use std::collections::BinaryHeap;\n //! use std::usize;\n //!\n-//! #[derive(Copy, Eq, PartialEq)]\n+//! #[derive(Copy, Clone, Eq, PartialEq)]\n //! struct State {\n //!     cost: usize,\n //!     position: usize,"}, {"sha": "26c57256049cb87553ccb5a660893b81c6c8d4b1", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -526,7 +526,7 @@ impl<K: Clone, V: Clone> Clone for Node<K, V> {\n ///     println!(\"Uninitialized memory: {:?}\", handle.into_kv());\n /// }\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Handle<NodeRef, Type, NodeType> {\n     node: NodeRef,\n     index: usize,"}, {"sha": "0b206d381ddacde5216e2d6c99f7033b97b1ce62", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -21,7 +21,7 @@ use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash)]\n /// A specialized set implementation to use enum types.\n ///\n /// It is a logic error for an item to be modified in such a way that the transformation of the\n@@ -37,6 +37,10 @@ pub struct EnumSet<E> {\n \n impl<E> Copy for EnumSet<E> {}\n \n+impl<E> Clone for EnumSet<E> {\n+    fn clone(&self) -> EnumSet<E> { *self }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<E:CLike + fmt::Debug> fmt::Debug for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "0a1eb0bcfa8879cb801191d5e6532f65fda60f40", "filename": "src/libcollectionstest/enum_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollectionstest%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcollectionstest%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fenum_set.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -14,7 +14,7 @@ use collections::enum_set::{CLike, EnumSet};\n \n use self::Foo::*;\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(usize)]\n enum Foo {\n     A, B, C\n@@ -218,7 +218,7 @@ fn test_operators() {\n #[should_panic]\n fn test_overflow() {\n     #[allow(dead_code)]\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     #[repr(usize)]\n     enum Bar {\n         V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,"}, {"sha": "da93ae6dd2a6be87604643f4357206b53fa40361", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -122,7 +122,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// Rust's memory orderings are [the same as\n /// C++'s](http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "22e622d32084f06ce194a2add152bdc6be7e65e6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -15,6 +15,7 @@\n use any;\n use cell::{Cell, RefCell, Ref, RefMut, BorrowState};\n use char::CharExt;\n+use clone::Clone;\n use iter::Iterator;\n use marker::{Copy, PhantomData, Sized};\n use mem;\n@@ -54,7 +55,7 @@ pub type Result = result::Result<(), Error>;\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Error;\n \n /// A collection of methods that are required to format a message into a stream.\n@@ -141,6 +142,12 @@ pub struct ArgumentV1<'a> {\n     formatter: fn(&Void, &mut Formatter) -> Result,\n }\n \n+impl<'a> Clone for ArgumentV1<'a> {\n+    fn clone(&self) -> ArgumentV1<'a> {\n+        *self\n+    }\n+}\n+\n impl<'a> ArgumentV1<'a> {\n     #[inline(never)]\n     fn show_usize(x: &usize, f: &mut Formatter) -> Result {\n@@ -175,7 +182,7 @@ impl<'a> ArgumentV1<'a> {\n }\n \n // flags available in the v1 format of format_args\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[allow(dead_code)] // SignMinus isn't currently used\n enum FlagV1 { SignPlus, SignMinus, Alternate, SignAwareZeroPad, }\n \n@@ -222,7 +229,7 @@ impl<'a> Arguments<'a> {\n /// macro validates the format string at compile-time so usage of the `write`\n /// and `format` functions can be safely performed.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Arguments<'a> {\n     // Format string pieces to print.\n     pieces: &'a [&'a str],"}, {"sha": "76c975902aabb0df47a9b16b0611517b3e6b9b78", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -139,7 +139,7 @@ impl GenericRadix for Radix {\n /// A helper type for formatting radixes.\n #[unstable(feature = \"core\",\n            reason = \"may be renamed or move to a different module\")]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct RadixFmt<T, R>(T, R);\n \n /// Constructs a radix formatter in the range of `2..36`."}, {"sha": "d56ec6a74d4494b59c7d0fe758784d3f621379f0", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -16,7 +16,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Argument {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -25,7 +25,7 @@ pub struct Argument {\n     pub format: FormatSpec,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct FormatSpec {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -41,7 +41,7 @@ pub struct FormatSpec {\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n@@ -58,7 +58,7 @@ pub enum Alignment {\n     Unknown,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Count {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -71,7 +71,7 @@ pub enum Count {\n     Implied,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Position {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a89dbcdf2cee333b001faa9c2792837f2051777e", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -75,7 +75,7 @@ pub trait Sized : MarkerTrait {\n ///\n /// ```\n /// // we can just derive a `Copy` implementation\n-/// #[derive(Debug, Copy)]\n+/// #[derive(Debug, Copy, Clone)]\n /// struct Foo;\n ///\n /// let x = Foo;\n@@ -124,7 +124,7 @@ pub trait Sized : MarkerTrait {\n /// There are two ways to implement `Copy` on your type:\n ///\n /// ```\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct MyStruct;\n /// ```\n ///\n@@ -133,6 +133,7 @@ pub trait Sized : MarkerTrait {\n /// ```\n /// struct MyStruct;\n /// impl Copy for MyStruct {}\n+/// impl Clone for MyStruct { fn clone(&self) -> MyStruct { *self } }\n /// ```\n ///\n /// There is a small difference between the two: the `derive` strategy will also place a `Copy`"}, {"sha": "26f5c7c58c65df4e1b10cb13e9023e549264f152", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -2425,7 +2425,7 @@ impl_num_cast! { f32,   to_f32 }\n impl_num_cast! { f64,   to_f64 }\n \n /// Used for representing the classification of floating point numbers\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum FpCategory {\n     /// \"Not a Number\", often obtained by dividing by zero"}, {"sha": "956df7ee7868ff8df0ffe9f161fb9b6a46f51fb1", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -165,7 +165,7 @@ macro_rules! forward_ref_binop {\n /// ```\n /// use std::ops::Add;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Add for Foo {\n@@ -219,7 +219,7 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Sub;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Sub for Foo {\n@@ -273,7 +273,7 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Mul;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Mul for Foo {\n@@ -327,7 +327,7 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Div;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Div for Foo {\n@@ -381,7 +381,7 @@ div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Rem;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Rem for Foo {\n@@ -454,7 +454,7 @@ rem_float_impl! { f64, fmod }\n /// ```\n /// use std::ops::Neg;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Neg for Foo {\n@@ -511,7 +511,7 @@ neg_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Not;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Not for Foo {\n@@ -565,7 +565,7 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitAnd;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitAnd for Foo {\n@@ -619,7 +619,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitOr;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitOr for Foo {\n@@ -673,7 +673,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitXor;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitXor for Foo {\n@@ -727,7 +727,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::Shl;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Shl<Foo> for Foo {\n@@ -799,7 +799,7 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// ```\n /// use std::ops::Shr;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Shr<Foo> for Foo {\n@@ -871,7 +871,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// ```\n /// use std::ops::Index;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n /// struct Bar;\n ///\n@@ -912,7 +912,7 @@ pub trait Index<Idx: ?Sized> {\n /// ```\n /// use std::ops::{Index, IndexMut};\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n /// struct Bar;\n ///"}, {"sha": "b072b0a9646edd16c94cf70cf13bae9eb2e8a347", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -18,7 +18,6 @@\n //!\n //! Their definition should always match the ABI defined in `rustc::back::abi`.\n \n-use marker::Copy;\n use mem;\n \n /// The representation of a slice like `&[T]`.\n@@ -63,6 +62,9 @@ pub struct Slice<T> {\n }\n \n impl<T> Copy for Slice<T> {}\n+impl<T> Clone for Slice<T> {\n+    fn clone(&self) -> Slice<T> { *self }\n+}\n \n /// The representation of a trait object like `&SomeTrait`.\n ///\n@@ -136,7 +138,7 @@ impl<T> Copy for Slice<T> {}\n /// assert_eq!(synthesized.bar(), 457);\n /// ```\n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TraitObject {\n     pub data: *mut (),\n     pub vtable: *mut (),"}, {"sha": "7b55ba49a07f779e83766b417cc4b35861dbdafb", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -38,7 +38,7 @@\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n@@ -47,26 +47,26 @@ pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i64x2(pub i64, pub i64);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n@@ -75,31 +75,31 @@ pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u64x2(pub u64, pub u64);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct f64x2(pub f64, pub f64);"}, {"sha": "625673d6d90d8f94778bfad0aa547bc09289c6af", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -1123,7 +1123,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n /// Struct that contains a `char` and the index of the first byte of\n /// the next `char` in a string.  This can be used as a data structure\n /// for iterating over the UTF-8 bytes of a string.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[unstable(feature = \"str_char\",\n            reason = \"existence of this struct is uncertain as it is frequently \\\n                      able to be replaced with char.len_utf8() and/or \\"}, {"sha": "4cf93ab2645df79a91a9087f9c77c6c9a997925c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -40,7 +40,7 @@ use std::string;\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n@@ -50,7 +50,7 @@ pub enum Piece<'a> {\n }\n \n /// Representation of an argument specification.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position<'a>,\n@@ -59,7 +59,7 @@ pub struct Argument<'a> {\n }\n \n /// Specification for the formatting of an argument in the format string.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with\n     pub fill: Option<char>,\n@@ -78,7 +78,7 @@ pub struct FormatSpec<'a> {\n }\n \n /// Enum describing where an argument for a format can be located.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Position<'a> {\n     /// The argument will be in the next position. This is the default.\n     ArgumentNext,\n@@ -89,7 +89,7 @@ pub enum Position<'a> {\n }\n \n /// Enum of alignments which are supported.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Alignment {\n     /// The value will be aligned to the left.\n     AlignLeft,\n@@ -103,7 +103,7 @@ pub enum Alignment {\n \n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Flag {\n     /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n@@ -119,7 +119,7 @@ pub enum Flag {\n \n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Count<'a> {\n     /// The count is specified explicitly.\n     CountIs(usize),"}, {"sha": "5c10641e8515e288d083bc0f87a2ed56c63d5d4f", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -213,7 +213,7 @@ pub enum Fail {\n }\n \n /// The type of failure that occurred.\n-#[derive(Copy, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[allow(missing_docs)]\n pub enum FailType {\n     ArgumentMissing_,\n@@ -843,18 +843,18 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n     line\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum SplitWithinState {\n     A,  // leading whitespace, initial state\n     B,  // words\n     C,  // internal and trailing whitespace\n }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Whitespace {\n     Ws, // current char is whitespace\n     Cr  // current char is not whitespace\n }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum LengthLimit {\n     UnderLim, // current char makes current substring still fit in limit\n     OverLim   // current char makes current substring no longer fit in limit"}, {"sha": "95b78e1cbfd039a1b4d1e5665a0e4d4b0dd12830", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -524,7 +524,7 @@ pub trait GraphWalk<'a, N, E> {\n     fn target(&'a self, edge: &E) -> N;\n }\n \n-#[derive(Copy, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum RenderOption {\n     NoEdgeLabels,\n     NoNodeLabels,"}, {"sha": "d2ddbd088a9dc330c683f575b82ba23ea1429f82", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 148, "deletions": 141, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -227,7 +227,7 @@ pub mod types {\n                 pub type rlim_t = u64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc: size_t,\n                     pub gl_pathv: *mut *mut c_char,\n                     pub gl_offs:  size_t,\n@@ -240,23 +240,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -269,7 +269,7 @@ pub mod types {\n                 // This is also specified in POSIX 2001, but only has two fields. All implementors\n                 // implement BSD 4.3 version.\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -291,6 +291,7 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n+                use core::clone::Clone;\n                 use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_int, c_uint};\n \n@@ -299,7 +300,7 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n@@ -312,41 +313,44 @@ pub mod types {\n                     #[cfg(target_pointer_width = \"64\")]\n                     pub __ss_pad2: [u8; 128 - 2 * 8],\n                 }\n+                impl Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -372,9 +376,12 @@ pub mod types {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n+                impl Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -465,7 +472,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub __pad1: c_short,\n                     pub st_ino: ino_t,\n@@ -489,13 +496,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -510,7 +517,7 @@ pub mod types {\n                 pub type blkcnt_t = u32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: c_ulonglong,\n                     pub __pad0: [c_uchar; 4],\n                     pub __st_ino: ino_t,\n@@ -533,13 +540,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -556,7 +563,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: c_ulong,\n                     pub st_pad1: [c_long; 3],\n                     pub st_ino: ino_t,\n@@ -580,13 +587,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -595,7 +602,7 @@ pub mod types {\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_ll {\n+                #[derive(Copy, Clone)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -667,7 +674,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n@@ -689,13 +696,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u64; 7]\n                 }\n             }\n@@ -711,7 +718,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n@@ -734,13 +741,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u64; 8]\n                 }\n             }\n@@ -750,7 +757,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n-                #[derive(Copy)] pub struct sockaddr_ll {\n+                #[derive(Copy, Clone)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -777,7 +784,7 @@ pub mod types {\n                 pub type rlim_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -794,23 +801,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                #[derive(Copy, Clone)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -821,7 +828,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -851,33 +858,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -886,21 +893,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -911,13 +918,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -984,7 +991,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n@@ -1010,7 +1017,7 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1039,7 +1046,7 @@ pub mod types {\n                 pub type rlim_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -1056,23 +1063,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                #[derive(Copy, Clone)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -1083,7 +1090,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -1113,33 +1120,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -1148,21 +1155,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1173,13 +1180,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1246,7 +1253,7 @@ pub mod types {\n                 pub type fflags_t = u32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n                     pub st_dev: dev_t,\n@@ -1271,7 +1278,7 @@ pub mod types {\n                     pub st_qspare2: int64_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1301,7 +1308,7 @@ pub mod types {\n \n                 #[cfg(target_os = \"bitrig\")]\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  c_int,\n                     pub gl_matchc: c_int,\n                     pub gl_offs:   c_int,\n@@ -1318,7 +1325,7 @@ pub mod types {\n \n                 #[cfg(target_os = \"openbsd\")]\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  c_int,\n                     pub __unused1: c_int,\n                     pub gl_offs:   c_int,\n@@ -1336,23 +1343,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                #[derive(Copy, Clone)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -1363,7 +1370,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -1393,33 +1400,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_pad2: i64,\n                     pub __ss_pad3: [u8; 240],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -1428,21 +1435,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1453,13 +1460,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1526,7 +1533,7 @@ pub mod types {\n                 pub type fflags_t = u32; // type not declared, but struct stat have u_int32_t\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_mode: mode_t,\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n@@ -1549,7 +1556,7 @@ pub mod types {\n                     pub st_birthtime_nsec: c_long,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1576,7 +1583,7 @@ pub mod types {\n                 // pub Note: this is the struct called stat64 in Windows. Not stat,\n                 // nor stati64.\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: u16,\n@@ -1592,24 +1599,24 @@ pub mod types {\n \n                 // note that this is called utimbuf64 in Windows\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time64_t,\n                     pub modtime: time64_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: c_long,\n                     pub tv_usec: c_long,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                #[derive(Copy, Clone)] pub enum timezone {}\n             }\n \n             pub mod bsd44 {\n@@ -1622,52 +1629,52 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1678,7 +1685,7 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n@@ -1807,7 +1814,7 @@ pub mod types {\n                 pub type LPCH = *mut CHAR;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct SECURITY_ATTRIBUTES {\n+                #[derive(Copy, Clone)] pub struct SECURITY_ATTRIBUTES {\n                     pub nLength: DWORD,\n                     pub lpSecurityDescriptor: LPVOID,\n                     pub bInheritHandle: BOOL,\n@@ -1831,7 +1838,7 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct STARTUPINFO {\n+                #[derive(Copy, Clone)] pub struct STARTUPINFO {\n                     pub cb: DWORD,\n                     pub lpReserved: LPWSTR,\n                     pub lpDesktop: LPWSTR,\n@@ -1854,7 +1861,7 @@ pub mod types {\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct PROCESS_INFORMATION {\n+                #[derive(Copy, Clone)] pub struct PROCESS_INFORMATION {\n                     pub hProcess: HANDLE,\n                     pub hThread: HANDLE,\n                     pub dwProcessId: DWORD,\n@@ -1863,7 +1870,7 @@ pub mod types {\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct SYSTEM_INFO {\n+                #[derive(Copy, Clone)] pub struct SYSTEM_INFO {\n                     pub wProcessorArchitecture: WORD,\n                     pub wReserved: WORD,\n                     pub dwPageSize: DWORD,\n@@ -1879,7 +1886,7 @@ pub mod types {\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct MEMORY_BASIC_INFORMATION {\n+                #[derive(Copy, Clone)] pub struct MEMORY_BASIC_INFORMATION {\n                     pub BaseAddress: LPVOID,\n                     pub AllocationBase: LPVOID,\n                     pub AllocationProtect: DWORD,\n@@ -1891,7 +1898,7 @@ pub mod types {\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct OVERLAPPED {\n+                #[derive(Copy, Clone)] pub struct OVERLAPPED {\n                     pub Internal: *mut c_ulong,\n                     pub InternalHigh: *mut c_ulong,\n                     pub Offset: DWORD,\n@@ -1902,31 +1909,31 @@ pub mod types {\n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct FILETIME {\n+                #[derive(Copy, Clone)] pub struct FILETIME {\n                     pub dwLowDateTime: DWORD,\n                     pub dwHighDateTime: DWORD,\n                 }\n \n                 pub type LPFILETIME = *mut FILETIME;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct GUID {\n+                #[derive(Copy, Clone)] pub struct GUID {\n                     pub Data1: DWORD,\n                     pub Data2: WORD,\n                     pub Data3: WORD,\n                     pub Data4: [BYTE; 8],\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct WSAPROTOCOLCHAIN {\n+                #[derive(Copy, Clone)] pub struct WSAPROTOCOLCHAIN {\n                     pub ChainLen: c_int,\n                     pub ChainEntries: [DWORD; MAX_PROTOCOL_CHAIN as usize],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct WSAPROTOCOL_INFO {\n+                #[derive(Copy, Clone)] pub struct WSAPROTOCOL_INFO {\n                     pub dwServiceFlags1: DWORD,\n                     pub dwServiceFlags2: DWORD,\n                     pub dwServiceFlags3: DWORD,\n@@ -1954,7 +1961,7 @@ pub mod types {\n                 pub type GROUP = c_uint;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct WIN32_FIND_DATAW {\n+                #[derive(Copy, Clone)] pub struct WIN32_FIND_DATAW {\n                     pub dwFileAttributes: DWORD,\n                     pub ftCreationTime: FILETIME,\n                     pub ftLastAccessTime: FILETIME,\n@@ -1985,7 +1992,7 @@ pub mod types {\n                 pub type rlim_t = u64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: c_int,\n                     pub gl_offs:   size_t,\n@@ -2002,23 +2009,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                #[derive(Copy, Clone)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -2029,7 +2036,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -2059,14 +2066,14 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n@@ -2075,7 +2082,7 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n@@ -2084,12 +2091,12 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -2099,24 +2106,24 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -2128,14 +2135,14 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -2200,7 +2207,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -2226,13 +2233,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 36]\n                 }\n@@ -2243,7 +2250,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct mach_timebase_info {\n+                #[derive(Copy, Clone)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }\n@@ -2306,7 +2313,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -2332,13 +2339,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 56]\n                 }\n@@ -2349,7 +2356,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct mach_timebase_info {\n+                #[derive(Copy, Clone)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }"}, {"sha": "453d087196b1318c57b95e19c202c2f3e2dc7b56", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -239,7 +239,7 @@ pub trait Logger {\n struct DefaultLogger { handle: Stderr }\n \n /// Wraps the log level with fmt implementations.\n-#[derive(Copy, PartialEq, PartialOrd, Debug)]\n+#[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]\n pub struct LogLevel(pub u32);\n \n impl fmt::Display for LogLevel {\n@@ -355,7 +355,7 @@ pub struct LogRecord<'a> {\n }\n \n #[doc(hidden)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct LogLocation {\n     pub module_path: &'static str,\n     pub file: &'static str,"}, {"sha": "2ba3164e1b0617125244ad53d3d60baacda3b697", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -29,7 +29,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Exp1(pub f64);\n \n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n@@ -68,7 +68,7 @@ impl Rand for Exp1 {\n /// let v = exp.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from a Exp(2) distribution\", v);\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by.\n     lambda_inverse: f64"}, {"sha": "fa41c3edfe5ac4e49655f7119ad985c375950ac6", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -28,7 +28,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct StandardNormal(pub f64);\n \n impl Rand for StandardNormal {\n@@ -85,7 +85,7 @@ impl Rand for StandardNormal {\n /// let v = normal.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Normal {\n     mean: f64,\n     std_dev: f64,\n@@ -134,7 +134,7 @@ impl IndependentSample<f64> for Normal {\n /// let v = log_normal.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct LogNormal {\n     norm: Normal\n }"}, {"sha": "98d1bbf5af9da0b54ccdceac90c230fc30722e07", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -134,7 +134,7 @@ pub trait Reseeder<R> {\n \n /// Reseed an RNG using a `Default` instance. This reseeds by\n /// replacing the RNG with the result of a `Default::default` call.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ReseedWithDefault;\n \n impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {"}, {"sha": "e2875ac8ca529479ab904f06a0c843375c880b6e", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -175,7 +175,7 @@ pub struct TaggedDoc<'a> {\n     pub doc: Doc<'a>,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum EbmlEncoderTag {\n     // tags 00..1f are reserved for auto-serialization.\n     // first NUM_IMPLICIT_TAGS tags are implicitly sized and lengths are not encoded.\n@@ -265,7 +265,7 @@ pub mod reader {\n         )\n     }\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct Res {\n         pub val: usize,\n         pub next: usize"}, {"sha": "ed37b973f787ec16e4d9f9497f89732351789657", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -30,19 +30,19 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnsafetySpace(pub ast::Unsafety);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MutableSpace(pub clean::Mutability);\n /// Similar to VisSpace, but used for mutability\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for properly emitting the stability level.\n pub struct Stability<'a>(pub &'a Option<clean::Stability>);"}, {"sha": "ac097d051b28673aad0bf492abf01a75a4a05778", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -225,7 +225,7 @@ struct Source<'a>(&'a str);\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Item<'a> {\n     cx: &'a Context,\n     item: &'a clean::Item,"}, {"sha": "3e4f6896ee68db2181121dd351b79ae33ee65ed2", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -27,7 +27,7 @@ use html::render::cache;\n \n #[derive(RustcEncodable, RustcDecodable, PartialEq, Eq)]\n /// The counts for each stability level.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Counts {\n     pub deprecated: u64,\n     pub unstable: u64,"}, {"sha": "0676edf81696f5647048681cccddb38ad175c81c", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -62,7 +62,7 @@ pub trait FromHex {\n }\n \n /// Errors that can occur when decoding a hex encoded string\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, usize),"}, {"sha": "5890bdec8c1bcdbcc66524c324095a7ceb91fd77", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -278,7 +278,7 @@ pub enum DecoderError {\n     ApplicationError(string::String)\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum EncoderError {\n     FmtError(fmt::Error),\n     BadHashmapKey,"}, {"sha": "dec6d1e2209ad9b982f695ce6f06b2efb50ecd32", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -87,6 +87,9 @@ struct RawBucket<K, V> {\n }\n \n impl<K,V> Copy for RawBucket<K,V> {}\n+impl<K,V> Clone for RawBucket<K,V> {\n+    fn clone(&self) -> RawBucket<K, V> { *self }\n+}\n \n pub struct Bucket<K, V, M> {\n     raw:   RawBucket<K, V>,\n@@ -95,6 +98,9 @@ pub struct Bucket<K, V, M> {\n }\n \n impl<K,V,M:Copy> Copy for Bucket<K,V,M> {}\n+impl<K,V,M:Copy> Clone for Bucket<K,V,M> {\n+    fn clone(&self) -> Bucket<K,V,M> { *self }\n+}\n \n pub struct EmptyBucket<K, V, M> {\n     raw:   RawBucket<K, V>,\n@@ -129,7 +135,7 @@ struct GapThenFull<K, V, M> {\n \n /// A hash that is not zero, since we use a hash of zero to represent empty\n /// buckets.\n-#[derive(PartialEq, Copy)]\n+#[derive(PartialEq, Copy, Clone)]\n pub struct SafeHash {\n     hash: u64,\n }"}, {"sha": "ea869ebae100a9ca15294e1ed3da6d0d0b32f482", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -25,7 +25,7 @@ use string::String;\n use vec::Vec;\n \n /// A flag that specifies whether to use exponential (scientific) notation.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ExponentFormat {\n     /// Do not use exponential notation.\n     ExpNone,\n@@ -40,7 +40,7 @@ pub enum ExponentFormat {\n \n /// The number of digits used for emitting the fractional part of a number, if\n /// any.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SignificantDigits {\n     /// All calculable digits will be printed.\n     ///\n@@ -57,7 +57,7 @@ pub enum SignificantDigits {\n }\n \n /// How to emit the sign of a number.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SignFormat {\n     /// No sign will be printed. The exponent sign will also be emitted.\n     SignNone,"}, {"sha": "98ff6e82c6f7f1437014d2968f8d19389fd73fac", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -391,7 +391,7 @@ impl Error for IoError {\n }\n \n /// A list specifying general categories of I/O error.\n-#[derive(Copy, PartialEq, Eq, Clone, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum IoErrorKind {\n     /// Any I/O error not part of this list.\n     OtherIoError,\n@@ -1553,7 +1553,7 @@ impl<T: Buffer> BufferPrelude for T {\n \n /// When seeking, the resulting cursor is offset from a base by the offset given\n /// to the `seek` function. The base used is specified by this enumeration.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SeekStyle {\n     /// Seek from the beginning of the stream\n     SeekSet,\n@@ -1744,7 +1744,7 @@ pub enum FileType {\n ///\n /// println!(\"byte size: {}\", info.size);\n /// ```\n-#[derive(Copy, Hash)]\n+#[derive(Copy, Clone, Hash)]\n pub struct FileStat {\n     /// The size of the file, in bytes\n     pub size: u64,\n@@ -1783,7 +1783,7 @@ pub struct FileStat {\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable(feature = \"io\")]\n-#[derive(Copy, Hash)]\n+#[derive(Copy, Clone, Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file.\n     pub device: u64,"}, {"sha": "c5fa775ab4e6f11a5f49103de549fa6db5fc2e00", "filename": "src/libstd/old_io/net/addrinfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -29,7 +29,7 @@ use sys;\n use vec::Vec;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum SocketType {\n     Stream, Datagram, Raw\n }\n@@ -38,7 +38,7 @@ pub enum SocketType {\n /// to manipulate how a query is performed.\n ///\n /// The meaning of each of these flags can be found with `man -s 3 getaddrinfo`\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Flag {\n     AddrConfig,\n     All,\n@@ -51,7 +51,7 @@ pub enum Flag {\n \n /// A transport protocol associated with either a hint or a return value of\n /// `lookup`\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Protocol {\n     TCP, UDP\n }\n@@ -61,15 +61,15 @@ pub enum Protocol {\n ///\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Hint {\n     pub family: usize,\n     pub socktype: Option<SocketType>,\n     pub protocol: Option<Protocol>,\n     pub flags: usize,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Info {\n     pub address: SocketAddr,\n     pub family: usize,"}, {"sha": "818c8e76d6087aff50dbe3ae3e3675159bc5b0dd", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -90,7 +90,7 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[deprecated(since = \"1.0.0\", reason = \"use std::io::sink() instead\")]\n #[unstable(feature = \"old_io\")]\n pub struct NullWriter;\n@@ -103,7 +103,7 @@ impl Writer for NullWriter {\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[deprecated(since = \"1.0.0\", reason = \"use std::io::repeat(0) instead\")]\n #[unstable(feature = \"old_io\")]\n pub struct ZeroReader;\n@@ -130,7 +130,7 @@ impl Buffer for ZeroReader {\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[deprecated(since = \"1.0.0\", reason = \"use std::io::empty() instead\")]\n #[unstable(feature = \"old_io\")]\n pub struct NullReader;"}, {"sha": "4b754bd5f589f22ac3d957986a6fcc536769d9bf", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -25,7 +25,7 @@ use libc;\n \n #[cfg(any(not(target_arch = \"arm\"), target_os = \"ios\"))]\n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum _Unwind_Action {\n     _UA_SEARCH_PHASE = 1,\n     _UA_CLEANUP_PHASE = 2,"}, {"sha": "acd6970f113731a95dd79b8c7d662bee55e50010", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -197,7 +197,7 @@ macro_rules! __thread_local_inner {\n /// Indicator of the state of a thread local storage key.\n #[unstable(feature = \"std_misc\",\n            reason = \"state querying was recently added\")]\n-#[derive(Eq, PartialEq, Copy)]\n+#[derive(Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n     /// transition to the `Valid` state once the first call to `with` happens"}, {"sha": "74ec3406f73bc3a735f640dfdb9375a9566acd25", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -184,7 +184,7 @@ pub mod attr {\n     /// Most attributes can only be turned on and must be turned off with term.reset().\n     /// The ones that can be turned off explicitly take a boolean value.\n     /// Color is also represented as an attribute for convenience.\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub enum Attr {\n         /// Bold (or possibly bright) mode\n         Bold,"}, {"sha": "01586b8f36ed0b35467b446c35fa01d19a1234d5", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -18,7 +18,7 @@ use std::ascii::OwnedAsciiExt;\n use std::mem::replace;\n use std::iter::repeat;\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum States {\n     Nothing,\n     Percent,\n@@ -35,7 +35,7 @@ enum States {\n     SeekIfEndPercent(isize)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum FormatState {\n     FormatStateFlags,\n     FormatStateWidth,\n@@ -444,7 +444,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n     Ok(output)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n struct Flags {\n     width: usize,\n     precision: usize,\n@@ -461,7 +461,7 @@ impl Flags {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum FormatOp {\n     FormatDigit,\n     FormatOctal,"}, {"sha": "521961215dd592d48a73b517fc863d602ebbcaf0", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35c46821a69af14e6b38e0238f70e22433a3e8e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c35c46821a69af14e6b38e0238f70e22433a3e8e", "patch": "@@ -193,7 +193,7 @@ impl fmt::Debug for TestFn {\n /// This is fed into functions marked with `#[bench]` to allow for\n /// set-up & tear-down before running a piece of code repeatedly via a\n /// call to `iter`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Bencher {\n     iterations: u64,\n     dur: Duration,\n@@ -280,7 +280,7 @@ pub fn test_main_static(args: env::Args, tests: &[TestDescAndFn]) {\n     test_main(&args, owned_tests)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ColorConfig {\n     AutoColor,\n     AlwaysColor,"}]}