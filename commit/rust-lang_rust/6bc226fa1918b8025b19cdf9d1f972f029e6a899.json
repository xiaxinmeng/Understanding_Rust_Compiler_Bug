{"sha": "6bc226fa1918b8025b19cdf9d1f972f029e6a899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzIyNmZhMTkxOGI4MDI1YjE5Y2RmOWQxZjk3MmYwMjllNmE4OTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-16T09:15:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-16T09:15:29Z"}, "message": "Merge #3602\n\n3602: ra_ide: remove dead code, migrate from readonly String -> &str r=matklad a=Veetaha\n\nhttps://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/190671355\n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "a9262bafd9f615f14297e13506853d3ec44a860d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9262bafd9f615f14297e13506853d3ec44a860d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc226fa1918b8025b19cdf9d1f972f029e6a899", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeb0OxCRBK7hj4Ov3rIwAAdHIIAIfDzaPH82dQpgTwuzCj0N2J\noJZr4SV7WzOwg+4F37wXmlAKM1Fajg4/DdVoWMKllWGFKYm9SgGPUBZkCEGgw//S\nxgWqwANxuqRsBwhUBfLD7MxYhb/ybmYqJ3tlvMMvliQaq+cX1wjkyoEOwihox1Om\np6WvKks+NxNzSbA+hwHPUkWI4nL/k4qlZoqF7+r6gOObmWo6uDp7TIj+w9NcSASp\nX6xXK7wmW2Jw1kNfV74lmGzInYnJjMiXL1QModt5xWuQo5a33lkMNKaBvwYZtxoQ\nbuu7sDCO0LJnpxyltiEDFtGRFMaxvx/Z5T4O4iULLgxA9OG7o3INUz6SoKTiGgY=\n=MEfT\n-----END PGP SIGNATURE-----\n", "payload": "tree a9262bafd9f615f14297e13506853d3ec44a860d\nparent af8097f7775e59fd2d61298b6d682788e870c2f9\nparent 98c34b725f6d154092e408a067f41663148b1ee1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584350129 +0000\ncommitter GitHub <noreply@github.com> 1584350129 +0000\n\nMerge #3602\n\n3602: ra_ide: remove dead code, migrate from readonly String -> &str r=matklad a=Veetaha\n\nhttps://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/hover/near/190671355\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc226fa1918b8025b19cdf9d1f972f029e6a899", "html_url": "https://github.com/rust-lang/rust/commit/6bc226fa1918b8025b19cdf9d1f972f029e6a899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc226fa1918b8025b19cdf9d1f972f029e6a899/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8097f7775e59fd2d61298b6d682788e870c2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8097f7775e59fd2d61298b6d682788e870c2f9", "html_url": "https://github.com/rust-lang/rust/commit/af8097f7775e59fd2d61298b6d682788e870c2f9"}, {"sha": "98c34b725f6d154092e408a067f41663148b1ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c34b725f6d154092e408a067f41663148b1ee1", "html_url": "https://github.com/rust-lang/rust/commit/98c34b725f6d154092e408a067f41663148b1ee1"}], "stats": {"total": 99, "additions": 33, "deletions": 66}, "files": [{"sha": "c395057a794a3ef4065664b6e1dcd32fe2613f10", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6bc226fa1918b8025b19cdf9d1f972f029e6a899/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc226fa1918b8025b19cdf9d1f972f029e6a899/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=6bc226fa1918b8025b19cdf9d1f972f029e6a899", "patch": "@@ -6,6 +6,8 @@ mod navigation_target;\n mod structure;\n mod short_label;\n \n+use std::fmt::{Display, Write};\n+\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n     SyntaxKind::{ATTR, COMMENT},\n@@ -67,24 +69,27 @@ pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n     format!(\"{}macro_rules! {}\", vis, name)\n }\n \n-pub(crate) fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n-    rust_code_markup_with_doc::<_, &str>(val, None, None)\n+pub(crate) fn rust_code_markup(code: &impl Display) -> String {\n+    rust_code_markup_with_doc(code, None, None)\n }\n \n-pub(crate) fn rust_code_markup_with_doc<CODE, DOC>(\n-    val: CODE,\n-    doc: Option<DOC>,\n-    mod_path: Option<String>,\n-) -> String\n-where\n-    CODE: AsRef<str>,\n-    DOC: AsRef<str>,\n-{\n-    let mod_path =\n-        mod_path.filter(|path| !path.is_empty()).map(|path| path + \"\\n\").unwrap_or_default();\n+pub(crate) fn rust_code_markup_with_doc(\n+    code: &impl Display,\n+    doc: Option<&str>,\n+    mod_path: Option<&str>,\n+) -> String {\n+    let mut markup = \"```rust\\n\".to_owned();\n+\n+    if let Some(mod_path) = mod_path {\n+        if !mod_path.is_empty() {\n+            write!(markup, \"{}\\n\", mod_path).unwrap();\n+        }\n+    }\n+    write!(markup, \"{}\\n```\", code).unwrap();\n+\n     if let Some(doc) = doc {\n-        format!(\"```rust\\n{}{}\\n```\\n\\n{}\", mod_path, val.as_ref(), doc.as_ref())\n-    } else {\n-        format!(\"```rust\\n{}{}\\n```\", mod_path, val.as_ref())\n+        write!(markup, \"\\n\\n{}\", doc).unwrap();\n     }\n+\n+    markup\n }"}, {"sha": "3bdd61a2e3a9999e5e1619c5565b24b87b1e07b4", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 12, "deletions": 50, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6bc226fa1918b8025b19cdf9d1f972f029e6a899/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc226fa1918b8025b19cdf9d1f972f029e6a899/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=6bc226fa1918b8025b19cdf9d1f972f029e6a899", "patch": "@@ -1,4 +1,5 @@\n-//! FIXME: write short doc here\n+//! Logic for computing info that is displayed when the user hovers over any\n+//! source code items (e.g. function call, struct field, variable symbol...)\n \n use hir::{\n     Adt, AsAssocItem, AssocItemContainer, FieldSource, HasSource, HirDisplay, ModuleDef,\n@@ -24,35 +25,20 @@ use itertools::Itertools;\n use std::iter::once;\n \n /// Contains the results when hovering over an item\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Default)]\n pub struct HoverResult {\n     results: Vec<String>,\n-    exact: bool,\n-}\n-\n-impl Default for HoverResult {\n-    fn default() -> Self {\n-        HoverResult::new()\n-    }\n }\n \n impl HoverResult {\n     pub fn new() -> HoverResult {\n-        HoverResult {\n-            results: Vec::new(),\n-            // We assume exact by default\n-            exact: true,\n-        }\n+        Self::default()\n     }\n \n     pub fn extend(&mut self, item: Option<String>) {\n         self.results.extend(item);\n     }\n \n-    pub fn is_exact(&self) -> bool {\n-        self.exact\n-    }\n-\n     pub fn is_empty(&self) -> bool {\n         self.results.is_empty()\n     }\n@@ -72,20 +58,7 @@ impl HoverResult {\n     /// Returns the results converted into markup\n     /// for displaying in a UI\n     pub fn to_markup(&self) -> String {\n-        let mut markup = if !self.exact {\n-            let mut msg = String::from(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support traits.\");\n-            if !self.results.is_empty() {\n-                msg.push_str(\"  \\nThese items were found instead:\");\n-            }\n-            msg.push_str(\"\\n\\n---\\n\");\n-            msg\n-        } else {\n-            String::new()\n-        };\n-\n-        markup.push_str(&self.results.join(\"\\n\\n---\\n\"));\n-\n-        markup\n+        self.results.join(\"\\n\\n---\\n\")\n     }\n }\n \n@@ -94,10 +67,10 @@ fn hover_text(\n     desc: Option<String>,\n     mod_path: Option<String>,\n ) -> Option<String> {\n-    match (desc, docs, mod_path) {\n-        (Some(desc), docs, mod_path) => Some(rust_code_markup_with_doc(desc, docs, mod_path)),\n-        (None, Some(docs), _) => Some(docs),\n-        _ => None,\n+    if let Some(desc) = desc {\n+        Some(rust_code_markup_with_doc(&desc, docs.as_deref(), mod_path.as_deref()))\n+    } else {\n+        docs\n     }\n }\n \n@@ -133,7 +106,7 @@ fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n             .flatten()\n             .join(\"::\")\n     });\n-    mod_path\n+    mod_path // FIXME: replace dashes with underscores in crate display name\n }\n \n fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<String> {\n@@ -170,9 +143,7 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n             ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n             ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        Definition::Local(it) => {\n-            Some(rust_code_markup(it.ty(db).display_truncated(db, None).to_string()))\n-        }\n+        Definition::Local(it) => Some(rust_code_markup(&it.ty(db).display_truncated(db, None))),\n         Definition::TypeParam(_) | Definition::SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n@@ -237,7 +208,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n     }?;\n \n-    res.extend(Some(rust_code_markup(ty.display_truncated(db, None).to_string())));\n+    res.extend(Some(rust_code_markup(&ty.display_truncated(db, None))));\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }\n@@ -595,7 +566,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"wrapper::Thing\\nfn new() -> Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -618,7 +588,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"const C: u32\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -635,7 +604,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n-        assert_eq!(hover.info.is_exact(), true);\n \n         /* FIXME: revive these tests\n                 let (analysis, position) = single_file_with_position(\n@@ -651,7 +619,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n-                assert_eq!(hover.info.is_exact(), true);\n \n                 let (analysis, position) = single_file_with_position(\n                     \"\n@@ -665,7 +632,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n-                assert_eq!(hover.info.is_exact(), true);\n \n                 let (analysis, position) = single_file_with_position(\n                     \"\n@@ -678,7 +644,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n-                assert_eq!(hover.info.is_exact(), true);\n         */\n     }\n \n@@ -696,7 +661,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -714,7 +678,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"macro_rules! foo\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]\n@@ -726,7 +689,6 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n-        assert_eq!(hover.info.is_exact(), true);\n     }\n \n     #[test]"}]}