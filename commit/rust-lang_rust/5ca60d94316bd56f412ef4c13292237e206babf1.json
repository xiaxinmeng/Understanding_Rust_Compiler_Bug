{"sha": "5ca60d94316bd56f412ef4c13292237e206babf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTYwZDk0MzE2YmQ1NmY0MTJlZjRjMTMyOTIyMzdlMjA2YmFiZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T20:42:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T20:42:56Z"}, "message": "Auto merge of #28608 - eddyb:no-place-for-an-old-box, r=pnkfelix\n\nWhile this is technically a [breaking-change], there is no excuse for touching `HEAP`.\r\nr? @pnkfelix", "tree": {"sha": "87330551f028eabf5e5a480524dcd6880087915f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87330551f028eabf5e5a480524dcd6880087915f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca60d94316bd56f412ef4c13292237e206babf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca60d94316bd56f412ef4c13292237e206babf1", "html_url": "https://github.com/rust-lang/rust/commit/5ca60d94316bd56f412ef4c13292237e206babf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca60d94316bd56f412ef4c13292237e206babf1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2187414a8c25f485dc788088b4466f595a7dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2187414a8c25f485dc788088b4466f595a7dd9", "html_url": "https://github.com/rust-lang/rust/commit/6a2187414a8c25f485dc788088b4466f595a7dd9"}, {"sha": "f293ea28b4beb5821feedc862619ec539f742cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f293ea28b4beb5821feedc862619ec539f742cc3", "html_url": "https://github.com/rust-lang/rust/commit/f293ea28b4beb5821feedc862619ec539f742cc3"}], "stats": {"total": 399, "additions": 117, "deletions": 282}, "files": [{"sha": "3239677fc0cc9af9f24be6d06fa5cd63ce1693dd", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -80,11 +80,10 @@ use core::raw::{TraitObject};\n /// use std::boxed::HEAP;\n ///\n /// fn main() {\n-///     let foo = box(HEAP) 5;\n+///     let foo: Box<i32> = in HEAP { 5 };\n ///     let foo = box 5;\n /// }\n /// ```\n-#[lang = \"exchange_heap\"]\n #[unstable(feature = \"box_heap\",\n            reason = \"may be renamed; uncertain about custom allocator design\",\n            issue = \"27779\")]"}, {"sha": "cc69d0789f82b4ccd8be52c6d003a221e946f7e9", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -344,13 +344,12 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.straightline(expr, pred, [r, l].iter().map(|&e| &**e))\n             }\n \n-            hir::ExprBox(Some(ref l), ref r) |\n             hir::ExprIndex(ref l, ref r) |\n             hir::ExprBinary(_, ref l, ref r) => { // NB: && and || handled earlier\n                 self.straightline(expr, pred, [l, r].iter().map(|&e| &**e))\n             }\n \n-            hir::ExprBox(None, ref e) |\n+            hir::ExprBox(ref e) |\n             hir::ExprAddrOf(_, ref e) |\n             hir::ExprCast(ref e, _) |\n             hir::ExprUnary(_, ref e) |"}, {"sha": "c6ff38d0f093d554211c07c1d91c02c9e88d0fcd", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -568,8 +568,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                             \"user-defined operators are not allowed in {}s\", v.msg());\n             }\n         }\n-        hir::ExprBox(..) |\n-        hir::ExprUnary(hir::UnUniq, _) => {\n+        hir::ExprBox(_) => {\n             v.add_qualif(ConstQualif::NOT_CONST);\n             if v.mode != Mode::Var {\n                 span_err!(v.tcx.sess, e.span, E0010,"}, {"sha": "9a5b21be72892d07bea0915c4375ff6575c8fd8d", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -280,13 +280,11 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                typer: &'t infer::InferCtxt<'a, 'tcx>)\n                -> ExprUseVisitor<'d,'t,'a,'tcx>\n     {\n-        let result = ExprUseVisitor {\n+        ExprUseVisitor {\n             typer: typer,\n             mc: mc::MemCategorizationContext::new(typer),\n             delegate: delegate,\n-        };\n-\n-        result\n+        }\n     }\n \n     pub fn walk_fn(&mut self,\n@@ -544,17 +542,8 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 self.walk_captures(expr)\n             }\n \n-            hir::ExprBox(ref place, ref base) => {\n-                match *place {\n-                    Some(ref place) => self.consume_expr(&**place),\n-                    None => {}\n-                }\n+            hir::ExprBox(ref base) => {\n                 self.consume_expr(&**base);\n-                if place.is_some() {\n-                    self.tcx().sess.span_bug(\n-                        expr.span,\n-                        \"box with explicit place remains after expansion\");\n-                }\n             }\n         }\n     }"}, {"sha": "85e51512bca31dc241873dd78072f4305163253d", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -341,7 +341,6 @@ lets_do_this! {\n     EhUnwindResumeLangItem,          \"eh_unwind_resume\",        eh_unwind_resume;\n     MSVCTryFilterLangItem,           \"msvc_try_filter\",         msvc_try_filter;\n \n-    ExchangeHeapLangItem,            \"exchange_heap\",           exchange_heap;\n     OwnedBoxLangItem,                \"owned_box\",               owned_box;\n \n     PhantomDataItem,                 \"phantom_data\",            phantom_data;"}, {"sha": "71a2091cc1460b119703a93ccf536190a228459e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -1147,8 +1147,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           }\n \n           hir::ExprIndex(ref l, ref r) |\n-          hir::ExprBinary(_, ref l, ref r) |\n-          hir::ExprBox(Some(ref l), ref r) => {\n+          hir::ExprBinary(_, ref l, ref r) => {\n             let r_succ = self.propagate_through_expr(&**r, succ);\n             self.propagate_through_expr(&**l, r_succ)\n           }\n@@ -1158,7 +1157,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             e1.as_ref().map_or(succ, |e| self.propagate_through_expr(&**e, succ))\n           }\n \n-          hir::ExprBox(None, ref e) |\n+          hir::ExprBox(ref e) |\n           hir::ExprAddrOf(_, ref e) |\n           hir::ExprCast(ref e, _) |\n           hir::ExprUnary(_, ref e) => {"}, {"sha": "c76cc18395f1c46d375d867e5586cee78be3815d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -994,9 +994,6 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n                         visitor, &**subexpr, blk_id);\n                 }\n             }\n-            hir::ExprUnary(hir::UnUniq, ref subexpr) => {\n-                record_rvalue_scope_if_borrow_expr(visitor, &**subexpr, blk_id);\n-            }\n             hir::ExprCast(ref subexpr, _) => {\n                 record_rvalue_scope_if_borrow_expr(visitor, &**subexpr, blk_id)\n             }"}, {"sha": "c2ce7cd701d036756974dda81b6e17aa71b70238", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -1040,8 +1040,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n     Expr {\n         id: folder.new_id(id),\n         node: match node {\n-            ExprBox(p, e) => {\n-                ExprBox(p.map(|e|folder.fold_expr(e)), folder.fold_expr(e))\n+            ExprBox(e) => {\n+                ExprBox(folder.fold_expr(e))\n             }\n             ExprVec(exprs) => {\n                 ExprVec(exprs.move_map(|x| folder.fold_expr(x)))"}, {"sha": "077567893079287a12e8a2ca86ae747bd90adc84", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -491,8 +491,6 @@ pub type BinOp = Spanned<BinOp_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum UnOp {\n-    /// The `box` operator\n-    UnUniq,\n     /// The `*` operator for dereferencing\n     UnDeref,\n     /// The `!` operator for logical inversion\n@@ -595,8 +593,8 @@ impl fmt::Debug for Expr {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Expr_ {\n-    /// First expr is the place; second expr is the value.\n-    ExprBox(Option<P<Expr>>, P<Expr>),\n+    /// A `box x` expression.\n+    ExprBox(P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     ExprVec(Vec<P<Expr>>),\n     /// A function call"}, {"sha": "4b11e8b91e898cb27b9b61c9fdff724462987fbd", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -605,7 +605,6 @@ pub fn lower_constness(c: Constness) -> hir::Constness {\n \n pub fn lower_unop(u: UnOp) -> hir::UnOp {\n     match u {\n-        UnUniq => hir::UnUniq,\n         UnDeref => hir::UnDeref,\n         UnNot => hir::UnNot,\n         UnNeg => hir::UnNeg,\n@@ -694,8 +693,8 @@ pub fn lower_expr(e: &Expr) -> P<hir::Expr> {\n     P(hir::Expr {\n             id: e.id,\n             node: match e.node {\n-                ExprBox(ref p, ref e) => {\n-                    hir::ExprBox(p.as_ref().map(|e| lower_expr(e)), lower_expr(e))\n+                ExprBox(ref e) => {\n+                    hir::ExprBox(lower_expr(e))\n                 }\n                 ExprVec(ref exprs) => {\n                     hir::ExprVec(exprs.iter().map(|x| lower_expr(x)).collect())\n@@ -818,6 +817,7 @@ pub fn lower_expr(e: &Expr) -> P<hir::Expr> {\n                 ExprParen(ref ex) => {\n                     return lower_expr(ex);\n                 }\n+                ExprInPlace(..) |\n                 ExprIfLet(..) |\n                 ExprWhileLet(..) |\n                 ExprForLoop(..) |"}, {"sha": "e9508009d9d0c712c24f9f0323546edef30c4dd8", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -1182,16 +1182,6 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    fn print_expr_box(&mut self,\n-                      place: &Option<P<hir::Expr>>,\n-                      expr: &hir::Expr) -> io::Result<()> {\n-        try!(word(&mut self.s, \"box\"));\n-        try!(word(&mut self.s, \"(\"));\n-        try!(place.as_ref().map_or(Ok(()), |e|self.print_expr(&**e)));\n-        try!(self.word_space(\")\"));\n-        self.print_expr(expr)\n-    }\n-\n     fn print_expr_vec(&mut self, exprs: &[P<hir::Expr>]) -> io::Result<()> {\n         try!(self.ibox(indent_unit));\n         try!(word(&mut self.s, \"[\"));\n@@ -1311,8 +1301,9 @@ impl<'a> State<'a> {\n         try!(self.ibox(indent_unit));\n         try!(self.ann.pre(self, NodeExpr(expr)));\n         match expr.node {\n-            hir::ExprBox(ref place, ref expr) => {\n-                try!(self.print_expr_box(place, &**expr));\n+            hir::ExprBox(ref expr) => {\n+                try!(self.word_space(\"box\"));\n+                try!(self.print_expr(expr));\n             }\n             hir::ExprVec(ref exprs) => {\n                 try!(self.print_expr_vec(&exprs[..]));"}, {"sha": "4d1a34621d0efcf634cd480400453eb6cf01cffa", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -128,10 +128,9 @@ pub fn is_by_value_unop(u: UnOp) -> bool {\n \n pub fn unop_to_string(op: UnOp) -> &'static str {\n     match op {\n-      UnUniq => \"box() \",\n-      UnDeref => \"*\",\n-      UnNot => \"!\",\n-      UnNeg => \"-\",\n+        UnDeref => \"*\",\n+        UnNot => \"!\",\n+        UnNeg => \"-\",\n     }\n }\n "}, {"sha": "1453b1b1bc259ea5eceb4b9ea9541cacec263153", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -722,8 +722,7 @@ pub fn walk_exprs<'v, V: Visitor<'v>>(visitor: &mut V, expressions: &'v [P<Expr>\n \n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n     match expression.node {\n-        ExprBox(ref place, ref subexpression) => {\n-            place.as_ref().map(|e|visitor.visit_expr(&**e));\n+        ExprBox(ref subexpression) => {\n             visitor.visit_expr(&**subexpression)\n         }\n         ExprVec(ref subexpressions) => {"}, {"sha": "f9f3e3a430811b57ec0b4ee654868b6745b6e8a4", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -442,7 +442,7 @@ impl LintPass for UnusedAllocation {\n impl LateLintPass for UnusedAllocation {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         match e.node {\n-            hir::ExprUnary(hir::UnUniq, _) => (),\n+            hir::ExprBox(_) => {}\n             _ => return\n         }\n "}, {"sha": "0f0303525e37a3914b26a672a09a6c3346fff72a", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -67,7 +67,7 @@ impl<H:Hair> Builder<H> {\n                 let arg = unpack!(block = this.as_operand(block, arg));\n                 block.and(Rvalue::UnaryOp(op, arg))\n             }\n-            ExprKind::Box { place: _, value } => {\n+            ExprKind::Box { value } => {\n                 let value = this.hir.mirror(value);\n                 let value_ty = value.ty.clone();\n                 let result = this.temp(value_ty.clone());"}, {"sha": "823958fdab40dcfdfa30d929ded73c0da313e310", "filename": "src/librustc_mir/hair.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_mir%2Fhair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_mir%2Fhair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -171,7 +171,7 @@ pub struct Expr<H:Hair> {\n #[derive(Clone, Debug)]\n pub enum ExprKind<H:Hair> {\n     Scope { extent: H::CodeExtent, value: ExprRef<H> },\n-    Box { place: Option<ExprRef<H>>, value: ExprRef<H> },\n+    Box { value: ExprRef<H> },\n     Call { fun: ExprRef<H>, args: Vec<ExprRef<H>> },\n     Deref { arg: ExprRef<H> }, // NOT overloaded!\n     Binary { op: BinOp, lhs: ExprRef<H>, rhs: ExprRef<H> }, // NOT overloaded!"}, {"sha": "94e8b57a5879e620938c70f037deebdf277d6cb5", "filename": "src/librustc_mir/tcx/expr.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -140,11 +140,6 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for &'tcx hir::Expr {\n                 }\n             }\n \n-            hir::ExprUnary(hir::UnOp::UnUniq, ref arg) => {\n-                assert!(!cx.tcx.is_method_call(self.id));\n-                ExprKind::Box { place: None, value: arg.to_ref() }\n-            }\n-\n             hir::ExprUnary(op, ref arg) => {\n                 if cx.tcx.is_method_call(self.id) {\n                     overloaded_operator(cx, self, ty::MethodCall::expr(self.id),\n@@ -154,10 +149,10 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for &'tcx hir::Expr {\n                     let op = match op {\n                         hir::UnOp::UnNot => UnOp::Not,\n                         hir::UnOp::UnNeg => UnOp::Neg,\n-                        hir::UnOp::UnUniq | hir::UnOp::UnDeref => {\n+                        hir::UnOp::UnDeref => {\n                             cx.tcx.sess.span_bug(\n                                 self.span,\n-                                &format!(\"operator should have been handled elsewhere {:?}\", op));\n+                                \"UnDeref should have been handled elsewhere\");\n                         }\n                     };\n                     ExprKind::Unary { op: op, arg: arg.to_ref() }\n@@ -296,8 +291,8 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for &'tcx hir::Expr {\n                                   name: Field::Indexed(ident.node) },\n             hir::ExprCast(ref source, _) =>\n                 ExprKind::Cast { source: source.to_ref() },\n-            hir::ExprBox(ref place, ref value) =>\n-                ExprKind::Box { place: place.to_ref(), value: value.to_ref() },\n+            hir::ExprBox(ref value) =>\n+                ExprKind::Box { value: value.to_ref() },\n             hir::ExprVec(ref fields) =>\n                 ExprKind::Vec { fields: fields.to_ref() },\n             hir::ExprTup(ref fields) =>"}, {"sha": "f8b8c41a034e6ac0c7b7bc5f5e997387ac1af093", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -564,10 +564,10 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             let is_float = ty.is_fp();\n             unsafe { match u {\n-                hir::UnUniq | hir::UnDeref => const_deref(cx, te, ty).0,\n-                hir::UnNot                 => llvm::LLVMConstNot(te),\n-                hir::UnNeg if is_float     => llvm::LLVMConstFNeg(te),\n-                hir::UnNeg                 => llvm::LLVMConstNeg(te),\n+                hir::UnDeref           => const_deref(cx, te, ty).0,\n+                hir::UnNot             => llvm::LLVMConstNot(te),\n+                hir::UnNeg if is_float => llvm::LLVMConstFNeg(te),\n+                hir::UnNeg             => llvm::LLVMConstNeg(te),\n             } }\n         },\n         hir::ExprField(ref base, field) => {"}, {"sha": "313ff7cd37d6016e7d5799076bdd14dd9f374c5e", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -325,9 +325,7 @@ fn walk_expr(cx: &CrateContext,\n         hir::ExprTupField(ref sub_exp, _) =>\n             walk_expr(cx, &**sub_exp, scope_stack, scope_map),\n \n-        hir::ExprBox(ref place, ref sub_expr) => {\n-            place.as_ref().map(\n-                |e| walk_expr(cx, &**e, scope_stack, scope_map));\n+        hir::ExprBox(ref sub_expr) => {\n             walk_expr(cx, &**sub_expr, scope_stack, scope_map);\n         }\n "}, {"sha": "35686ebaa9689f6ca0041a125242be343e7ddad9", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -673,7 +673,7 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         hir::ExprIndex(ref base, ref idx) => {\n             trans_index(bcx, expr, &**base, &**idx, MethodCall::expr(expr.id))\n         }\n-        hir::ExprBox(_, ref contents) => {\n+        hir::ExprBox(ref contents) => {\n             // Special case for `Box<T>`\n             let box_ty = expr_ty(bcx, expr);\n             let contents_ty = expr_ty(bcx, &**contents);\n@@ -1649,9 +1649,6 @@ fn trans_unary<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             };\n             immediate_rvalue_bcx(bcx, llneg, un_ty).to_expr_datumblock()\n         }\n-        hir::UnUniq => {\n-            trans_uniq_expr(bcx, expr, un_ty, sub_expr, expr_ty(bcx, sub_expr))\n-        }\n         hir::UnDeref => {\n             let datum = unpack_datum!(bcx, trans(bcx, sub_expr));\n             deref_once(bcx, expr, datum, method_call)\n@@ -2769,24 +2766,11 @@ fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n \n         hir::ExprLit(_) | // Note: LitStr is carved out above\n         hir::ExprUnary(..) |\n-        hir::ExprBox(None, _) |\n+        hir::ExprBox(_) |\n         hir::ExprAddrOf(..) |\n         hir::ExprBinary(..) |\n         hir::ExprCast(..) => {\n             ExprKind::RvalueDatum\n         }\n-\n-        hir::ExprBox(Some(ref place), _) => {\n-            // Special case `Box<T>` for now:\n-            let def_id = match tcx.def_map.borrow().get(&place.id) {\n-                Some(def) => def.def_id(),\n-                None => panic!(\"no def for place\"),\n-            };\n-            if tcx.lang_items.exchange_heap() == Some(def_id) {\n-                ExprKind::RvalueDatum\n-            } else {\n-                ExprKind::RvalueDps\n-            }\n-        }\n     }\n }"}, {"sha": "dec2e49272b48aa9f80cb6647876d8d57ea749d1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 45, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -3212,31 +3212,16 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n     let tcx = fcx.ccx.tcx;\n     let id = expr.id;\n     match expr.node {\n-      hir::ExprBox(ref opt_place, ref subexpr) => {\n-          opt_place.as_ref().map(|place|check_expr(fcx, &**place));\n-          check_expr(fcx, &**subexpr);\n-\n-          let mut checked = false;\n-          opt_place.as_ref().map(|place| match place.node {\n-              hir::ExprPath(None, ref path) => {\n-                  // FIXME(pcwalton): For now we hardcode the only permissible\n-                  // place: the exchange heap.\n-                  let definition = lookup_full_def(tcx, path.span, place.id);\n-                  let def_id = definition.def_id();\n-                  let referent_ty = fcx.expr_ty(&**subexpr);\n-                  if tcx.lang_items.exchange_heap() == Some(def_id) {\n-                      fcx.write_ty(id, tcx.mk_box(referent_ty));\n-                      checked = true\n-                  }\n-              }\n-              _ => {}\n-          });\n-\n-          if !checked {\n-              span_err!(tcx.sess, expr.span, E0066,\n-                  \"only the exchange heap is currently supported\");\n-              fcx.write_ty(id, tcx.types.err);\n-          }\n+      hir::ExprBox(ref subexpr) => {\n+        let expected_inner = expected.to_option(fcx).map_or(NoExpectation, |ty| {\n+            match ty.sty {\n+                ty::TyBox(ty) => Expectation::rvalue_hint(tcx, ty),\n+                _ => NoExpectation\n+            }\n+        });\n+        check_expr_with_expectation(fcx, subexpr, expected_inner);\n+        let referent_ty = fcx.expr_ty(&**subexpr);\n+        fcx.write_ty(id, tcx.mk_box(referent_ty));\n       }\n \n       hir::ExprLit(ref lit) => {\n@@ -3250,24 +3235,14 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         op::check_binop_assign(fcx, expr, op, lhs, rhs);\n       }\n       hir::ExprUnary(unop, ref oprnd) => {\n-        let expected_inner = expected.to_option(fcx).map_or(NoExpectation, |ty| {\n-            match unop {\n-                hir::UnUniq => match ty.sty {\n-                    ty::TyBox(ty) => {\n-                        Expectation::rvalue_hint(tcx, ty)\n-                    }\n-                    _ => {\n-                        NoExpectation\n-                    }\n-                },\n-                hir::UnNot | hir::UnNeg => {\n-                    expected\n-                }\n-                hir::UnDeref => {\n-                    NoExpectation\n-                }\n+        let expected_inner = match unop {\n+            hir::UnNot | hir::UnNeg => {\n+                expected\n             }\n-        });\n+            hir::UnDeref => {\n+                NoExpectation\n+            }\n+        };\n         let lvalue_pref = match unop {\n             hir::UnDeref => lvalue_pref,\n             _ => NoPreference\n@@ -3278,9 +3253,6 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n         if !oprnd_t.references_error() {\n             match unop {\n-                hir::UnUniq => {\n-                    oprnd_t = tcx.mk_box(oprnd_t);\n-                }\n                 hir::UnDeref => {\n                     oprnd_t = structurally_resolved_type(fcx, expr.span, oprnd_t);\n                     oprnd_t = match oprnd_t.builtin_deref(true, NoPreference) {"}, {"sha": "db7d77e5454c25cf63b41a19aba0d621ba7731c7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -680,8 +680,6 @@ pub type BinOp = Spanned<BinOp_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum UnOp {\n-    /// The `box` operator\n-    UnUniq,\n     /// The `*` operator for dereferencing\n     UnDeref,\n     /// The `!` operator for logical inversion\n@@ -799,8 +797,10 @@ impl fmt::Debug for Expr {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Expr_ {\n+    /// A `box x` expression.\n+    ExprBox(P<Expr>),\n     /// First expr is the place; second expr is the value.\n-    ExprBox(Option<P<Expr>>, P<Expr>),\n+    ExprInPlace(P<Expr>, P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     ExprVec(Vec<P<Expr>>),\n     /// A function call"}, {"sha": "545c69cafffed030977d2fe076b621137a0cee35", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -101,10 +101,9 @@ pub fn is_by_value_unop(u: UnOp) -> bool {\n \n pub fn unop_to_string(op: UnOp) -> &'static str {\n     match op {\n-      UnUniq => \"box() \",\n-      UnDeref => \"*\",\n-      UnNot => \"!\",\n-      UnNeg => \"-\",\n+        UnDeref => \"*\",\n+        UnNot => \"!\",\n+        UnNeg => \"-\",\n     }\n }\n "}, {"sha": "e14e48c022d1aee80be8a4b00538088b267398d7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -94,8 +94,8 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             })\n         }\n \n-        // Desugar ExprBox: `in (PLACE) EXPR`\n-        ast::ExprBox(Some(placer), value_expr) => {\n+        // Desugar ExprInPlace: `in PLACE { EXPR }`\n+        ast::ExprInPlace(placer, value_expr) => {\n             // to:\n             //\n             // let p = PLACE;"}, {"sha": "eaf964a3c64f1da1761ac37cfdd81b0a77594757", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -707,11 +707,11 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n         // But we keep these checks as a pre-expansion check to catch\n         // uses in e.g. conditionalized code.\n \n-        if let ast::ExprBox(None, _) = e.node {\n+        if let ast::ExprBox(_) = e.node {\n             self.context.gate_feature(\"box_syntax\", e.span, EXPLAIN_BOX_SYNTAX);\n         }\n \n-        if let ast::ExprBox(Some(_), _) = e.node {\n+        if let ast::ExprInPlace(..) = e.node {\n             self.context.gate_feature(\"placement_in_syntax\", e.span, EXPLAIN_PLACEMENT_IN);\n         }\n \n@@ -860,7 +860,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprBox(..) | ast::ExprUnary(ast::UnOp::UnUniq, _) => {\n+            ast::ExprBox(_) => {\n                 self.gate_feature(\"box_syntax\",\n                                   e.span,\n                                   \"box expression syntax is experimental; \\"}, {"sha": "914b08265feeb77fcc35918c7f8e6e7a8c3f7cb1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -1188,8 +1188,11 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n     Expr {\n         id: folder.new_id(id),\n         node: match node {\n-            ExprBox(p, e) => {\n-                ExprBox(p.map(|e|folder.fold_expr(e)), folder.fold_expr(e))\n+            ExprBox(e) => {\n+                ExprBox(folder.fold_expr(e))\n+            }\n+            ExprInPlace(p, e) => {\n+                ExprInPlace(folder.fold_expr(p), folder.fold_expr(e))\n             }\n             ExprVec(exprs) => {\n                 ExprVec(exprs.move_map(|x| folder.fold_expr(x)))"}, {"sha": "60e0f2d32a43dfdc5520f18f3b68b889be920485", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 68, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -22,7 +22,7 @@ use ast::{Decl, DeclItem, DeclLocal, DefaultBlock, DefaultReturn};\n use ast::{UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n-use ast::{ExprBreak, ExprCall, ExprCast};\n+use ast::{ExprBreak, ExprCall, ExprCast, ExprInPlace};\n use ast::{ExprField, ExprTupField, ExprClosure, ExprIf, ExprIfLet, ExprIndex};\n use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n use ast::{ExprMethodCall, ExprParen, ExprPath};\n@@ -54,7 +54,7 @@ use ast::{TupleVariantKind, Ty, Ty_, TypeBinding};\n use ast::{TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr};\n-use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n+use ast::{TyRptr, TyTup, TyU32, TyVec};\n use ast::{TypeImplItem, TypeTraitItem};\n use ast::{UnnamedField, UnsafeBlock};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n@@ -2617,76 +2617,19 @@ impl<'a> Parser<'a> {\n             hi = e.span.hi;\n             ex = ExprAddrOf(m, e);\n           }\n-          token::Ident(_, _) => {\n-            if !self.check_keyword(keywords::Box) && !self.check_keyword(keywords::In) {\n-                return self.parse_dot_or_call_expr();\n-            }\n-\n-            let lo = self.span.lo;\n-            let keyword_hi = self.span.hi;\n-\n-            let is_in = self.token.is_keyword(keywords::In);\n-            try!(self.bump());\n-\n-            if is_in {\n+          token::Ident(..) if self.token.is_keyword(keywords::In) => {\n+              try!(self.bump());\n               let place = try!(self.parse_expr_res(Restrictions::RESTRICTION_NO_STRUCT_LITERAL));\n               let blk = try!(self.parse_block());\n               hi = blk.span.hi;\n               let blk_expr = self.mk_expr(blk.span.lo, blk.span.hi, ExprBlock(blk));\n-              ex = ExprBox(Some(place), blk_expr);\n-              return Ok(self.mk_expr(lo, hi, ex));\n-            }\n-\n-            // FIXME (#22181) Remove `box (PLACE) EXPR` support\n-            // entirely after next release (enabling `(box (EXPR))`),\n-            // since it will be replaced by `in PLACE { EXPR }`, ...\n-            //\n-            // ... but for now: check for a place: `box(PLACE) EXPR`.\n-\n-            if try!(self.eat(&token::OpenDelim(token::Paren))) {\n-                let box_span = mk_sp(lo, self.last_span.hi);\n-                self.span_warn(box_span,\n-                    \"deprecated syntax; use the `in` keyword now \\\n-                           (e.g. change `box (<expr>) <expr>` to \\\n-                                        `in <expr> { <expr> }`)\");\n-\n-                // Continue supporting `box () EXPR` (temporarily)\n-                if !try!(self.eat(&token::CloseDelim(token::Paren))) {\n-                    let place = try!(self.parse_expr_nopanic());\n-                    try!(self.expect(&token::CloseDelim(token::Paren)));\n-                    // Give a suggestion to use `box()` when a parenthesised expression is used\n-                    if !self.token.can_begin_expr() {\n-                        let span = self.span;\n-                        let this_token_to_string = self.this_token_to_string();\n-                        self.span_err(span,\n-                                      &format!(\"expected expression, found `{}`\",\n-                                              this_token_to_string));\n-\n-                        // Spanning just keyword avoids constructing\n-                        // printout of arg expression (which starts\n-                        // with parenthesis, as established above).\n-\n-                        let box_span = mk_sp(lo, keyword_hi);\n-                        self.span_suggestion(box_span,\n-                                             \"try using `box ()` instead:\",\n-                                             format!(\"box ()\"));\n-                        self.abort_if_errors();\n-                    }\n-                    let subexpression = try!(self.parse_prefix_expr());\n-                    hi = subexpression.span.hi;\n-                    ex = ExprBox(Some(place), subexpression);\n-                    return Ok(self.mk_expr(lo, hi, ex));\n-                }\n-            }\n-\n-            // Otherwise, we use the unique pointer default.\n-            let subexpression = try!(self.parse_prefix_expr());\n-            hi = subexpression.span.hi;\n-\n-            // FIXME (pnkfelix): After working out kinks with box\n-            // desugaring, should be `ExprBox(None, subexpression)`\n-            // instead.\n-            ex = self.mk_unary(UnUniq, subexpression);\n+              ex = ExprInPlace(place, blk_expr);\n+          }\n+          token::Ident(..) if self.token.is_keyword(keywords::Box) => {\n+              try!(self.bump());\n+              let subexpression = try!(self.parse_prefix_expr());\n+              hi = subexpression.span.hi;\n+              ex = ExprBox(subexpression);\n           }\n           _ => return self.parse_dot_or_call_expr()\n         }"}, {"sha": "6d3f036894f3657ac58ea34bf9106ae0c6ec37f2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -1811,13 +1811,12 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    fn print_expr_box(&mut self,\n-                      place: &Option<P<ast::Expr>>,\n-                      expr: &ast::Expr) -> io::Result<()> {\n-        try!(word(&mut self.s, \"box\"));\n-        try!(word(&mut self.s, \"(\"));\n-        try!(place.as_ref().map_or(Ok(()), |e|self.print_expr(&**e)));\n-        try!(self.word_space(\")\"));\n+    fn print_expr_in_place(&mut self,\n+                           place: &ast::Expr,\n+                           expr: &ast::Expr) -> io::Result<()> {\n+        try!(self.word_space(\"in\"));\n+        try!(self.print_expr(place));\n+        try!(space(&mut self.s));\n         self.print_expr(expr)\n     }\n \n@@ -1948,8 +1947,12 @@ impl<'a> State<'a> {\n         try!(self.ibox(indent_unit));\n         try!(self.ann.pre(self, NodeExpr(expr)));\n         match expr.node {\n-            ast::ExprBox(ref place, ref expr) => {\n-                try!(self.print_expr_box(place, &**expr));\n+            ast::ExprBox(ref expr) => {\n+                try!(self.word_space(\"box\"));\n+                try!(self.print_expr(expr));\n+            }\n+            ast::ExprInPlace(ref place, ref expr) => {\n+                try!(self.print_expr_in_place(place, expr));\n             }\n             ast::ExprVec(ref exprs) => {\n                 try!(self.print_expr_vec(&exprs[..]));"}, {"sha": "23c02905cf728ef7558218f63a1edc904d56f819", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -735,8 +735,11 @@ pub fn walk_mac<'v, V: Visitor<'v>>(_: &mut V, _: &'v Mac) {\n \n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n     match expression.node {\n-        ExprBox(ref place, ref subexpression) => {\n-            place.as_ref().map(|e|visitor.visit_expr(&**e));\n+        ExprBox(ref subexpression) => {\n+            visitor.visit_expr(&**subexpression)\n+        }\n+        ExprInPlace(ref place, ref subexpression) => {\n+            visitor.visit_expr(&**place);\n             visitor.visit_expr(&**subexpression)\n         }\n         ExprVec(ref subexpressions) => {"}, {"sha": "cfebc4abaaa6150d0c8689c82c5bb7368812b278", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -22,5 +22,5 @@ pub trait i<T>\n pub fn f<T>() -> Box<i<T>+'static> {\n     impl<T> i<T> for () { }\n \n-    box() () as Box<i<T>+'static>\n+    box () as Box<i<T>+'static>\n }"}, {"sha": "a6ce36a5507f2a79096553bdb795cbdf16a4fb5f", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -23,8 +23,7 @@ fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n-    *v = box() (**v + 1);\n-    //~^ WARN deprecated syntax\n+    *v = box (**v + 1);\n }\n \n fn pre_freeze_cond() {"}, {"sha": "f09e7ffd7e4b791c4b51472ca9db8013b79e0659", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -22,8 +22,7 @@ fn cond() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n-    *v = box() (**v + 1);\n-    //~^ WARN deprecated syntax\n+    *v = box (**v + 1);\n }\n \n fn loop_overarching_alias_mut() {"}, {"sha": "1ed779cfaac7153a450d5fab13c4733720877205", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -23,8 +23,7 @@ fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n-    *v = box() (**v + 1);\n-    //~^ WARN deprecated syntax\n+    *v = box (**v + 1);\n }\n \n fn pre_freeze() {"}, {"sha": "a9079cfc27d83accd55023ac708d0611bd581022", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -22,8 +22,7 @@ impl Add for foo {\n     fn add(self, f: foo) -> foo {\n         let foo(box i) = self;\n         let foo(box j) = f;\n-        foo(box() (i + j))\n-        //~^ WARN deprecated syntax\n+        foo(box (i + j))\n     }\n }\n "}, {"sha": "f1bb5c0dea21d64104f100b9878007236bd1fe8a", "filename": "src/test/compile-fail/feature-gate-box-expr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -19,8 +19,4 @@\n fn main() {\n     let x = box 'c'; //~ ERROR box expression syntax is experimental\n     println!(\"x: {}\", x);\n-\n-    let x = box () 'c'; //~ ERROR box expression syntax is experimental\n-    //~^ WARN deprecated syntax\n-    println!(\"x: {}\", x);\n }"}, {"sha": "47a25bf637c5f70167fdc5f04f49f46b90ad6905", "filename": "src/test/compile-fail/feature-gate-placement-expr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -19,10 +19,6 @@\n fn main() {\n     use std::boxed::HEAP;\n \n-    let x = box (HEAP) 'c'; //~ ERROR placement-in expression syntax is experimental\n-    //~^ WARN deprecated syntax\n-    println!(\"x: {}\", x);\n-\n     let x = in HEAP { 'c' }; //~ ERROR placement-in expression syntax is experimental\n     println!(\"x: {}\", x);\n }"}, {"sha": "b2863202ef0cf1624a8f7b662269b25d182f5cdd", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -12,8 +12,7 @@\n #![feature(placement_in_syntax)]\n \n fn main() {\n-    box ( () ) 0;\n+    in () { 0 };\n     //~^ ERROR: the trait `core::ops::Placer<_>` is not implemented\n     //~| ERROR: the trait `core::ops::Placer<_>` is not implemented\n-    //~| WARN deprecated syntax\n }"}, {"sha": "a4d3e3ee02f570bd29c076ceaa93db8485364f0a", "filename": "src/test/compile-fail/moves-based-on-type-tuple.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -11,8 +11,7 @@\n #![feature(box_syntax)]\n \n fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n-    box() (x, x) //~ ERROR use of moved value\n-    //~^ WARN deprecated syntax\n+    box (x, x) //~ ERROR use of moved value\n }\n fn main() {\n     dup(box 3);"}, {"sha": "e3da3934f6d696de39fbb11bcc77a697da6296f8", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -50,7 +50,7 @@ fn main() {\n     let stack_val_ref: &(i16, f32) = &stack_val;\n     let ref_to_unnamed: &(i16, f32) = &(-15, -20f32);\n \n-    let unique_val: Box<(i16, f32)> = box() (-17, -22f32);\n+    let unique_val: Box<(i16, f32)> = box (-17, -22f32);\n     let unique_val_ref: &(i16, f32) = &*unique_val;\n \n     zzz(); // #break"}, {"sha": "106d0b243eb2608c7107243b93d143ec87adda0e", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -37,7 +37,7 @@\n \n fn main() {\n     let a = box 1;\n-    let b = box() (2, 3.5f64);\n+    let b = box (2, 3.5f64);\n \n     zzz(); // #break\n }"}, {"sha": "954a7abe6323cbddef769a9164838f5ec1832393", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -433,7 +433,7 @@ fn main() {\n     managed_box(&(34, 35));\n     borrowed_pointer(&(36, 37));\n     contained_borrowed_pointer((&38, 39));\n-    unique_pointer(box() (40, 41, 42));\n+    unique_pointer(box (40, 41, 42));\n     ref_binding((43, 44, 45));\n     ref_binding_in_tuple((46, (47, 48)));\n     ref_binding_in_struct(Struct { a: 49, b: 50 });"}, {"sha": "a43e4546d4f8f86c5af18eff12c71b4d493adfd6", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -304,7 +304,7 @@ fn main() {\n     let (&cc, _) = (&38, 39);\n \n     // unique pointer\n-    let box dd = box() (40, 41, 42);\n+    let box dd = box (40, 41, 42);\n \n     // ref binding\n     let ref ee = (43, 44, 45);"}, {"sha": "3cf3685d5bd0413c78f2b918428c9e2cb960573a", "filename": "src/test/parse-fail/parenthesized-box-expr-message.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a2187414a8c25f485dc788088b4466f595a7dd9/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2187414a8c25f485dc788088b4466f595a7dd9/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs?ref=6a2187414a8c25f485dc788088b4466f595a7dd9", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-fn main() {\n-    box (1 + 1)\n-    //~^ HELP try using `box ()` instead:\n-    //~| SUGGESTION box () (1 + 1)\n-    //~| WARN deprecated syntax\n-    ; //~ ERROR expected expression, found `;`\n-}"}, {"sha": "5c5364de6a86b59d63c66aee92ed80057ea9834d", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -21,6 +21,6 @@ impl double for usize {\n }\n \n pub fn main() {\n-    let x: Box<_> = box() (box 3usize as Box<double>);\n+    let x: Box<_> = box (box 3usize as Box<double>);\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "028b3f43e2ae8ba44fea79ca1db254a471283600", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -24,7 +24,7 @@ extern crate crate_method_reexport_grrrrrrr2;\n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n-    let x: Box<_> = box () ();\n+    let x: Box<_> = box ();\n     x.cx();\n     let y = ();\n     y.add(\"hi\".to_string());"}, {"sha": "b5ef6020b57d0fdcfa6755f1014df5c34b197e6a", "filename": "src/test/run-pass/issue-10767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10767.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -16,5 +16,5 @@\n pub fn main() {\n     fn f() {\n     };\n-    let _: Box<fn()> = box() (f as fn());\n+    let _: Box<fn()> = box (f as fn());\n }"}, {"sha": "511344a792f46c43a05d3040bd7718a684153272", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n   //   let y = box ({a: 4});\n   //    let z = box ({a: 4} as it);\n   //    let z = box ({a: true} as it);\n-    let z: Box<_> = box () (box true as Box<it>);\n+    let z: Box<_> = box (box true as Box<it>);\n     //  x.f();\n     // y.f();\n     // (*z).f();"}, {"sha": "34687c6ca1de31b40b56b9e5011d62ca476a7355", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -31,10 +31,10 @@ struct Structure {\n }\n \n pub fn main() {\n-    let x: Box<isize> = box(HEAP) 2;\n+    let x: Box<isize> = in HEAP { 2 };\n     let y: Box<isize> = box 2;\n-    let b: Box<isize> = box()(1 + 2);\n-    let c = box()(3 + 4);\n+    let b: Box<isize> = box (1 + 2);\n+    let c = box (3 + 4);\n \n     let s: Box<Structure> = box Structure {\n         x: 3,"}, {"sha": "4ba04aa7091a8c93b2fd6c534a4d05eadd36ed12", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -83,7 +83,7 @@ impl<'s> Trait<'s> for (isize,isize) {\n \n impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n     fn mk() -> Box<Trait<'t>+'static> {\n-        let tup: Box<(isize, isize)> = box() (4,5);\n+        let tup: Box<(isize, isize)> = box (4,5);\n         tup as Box<Trait>\n     }\n }"}, {"sha": "33bee3ea06f4dbab6fe53414abe0b2d76ba42d17", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca60d94316bd56f412ef4c13292237e206babf1/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=5ca60d94316bd56f412ef4c13292237e206babf1", "patch": "@@ -49,6 +49,6 @@ impl<V> Trait<u8,V> for () {\n }\n \n pub fn main() {\n-    let a = box() () as Box<Trait<u8, u8>>;\n+    let a = box () as Box<Trait<u8, u8>>;\n     assert_eq!(a.method(Type::Constant((1, 2))), 0);\n }"}]}