{"sha": "596235281c1a8a44389f675bf78ac3e5f9a2bb84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NjIzNTI4MWMxYThhNDQzODlmNjc1YmY3OGFjM2U1ZjlhMmJiODQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-14T00:30:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T00:30:34Z"}, "message": "Rollup merge of #77765 - amshafer:master, r=petrochenkov\n\nAdd LLVM flags to limit DWARF version to 2 on BSD\n\nThis has been a thorn in my side for a while, I can finally generate flamegraphs of rust programs on bsd again. This fixes dtrace profiling on freebsd, I think it might help with lldb as well but I can't test that because my current rust-lldb setup is messed up.\n\nI'm limiting the dwarf version to 2 on all bsd's (netbsd/openbsd/freebsd) since it looks like this applies to all of them, but I have only tested on freebsd.\n\nLet me know if there's anything I can improve!\n\n---\nCurrently on FreeBSD dtrace profiling does not work and shows jumbled/incorrect\nsymbols in the backtraces. FreeBSD does not support the latest versions of DWARF\nin dtrace (and lldb?) yet, and needs to be limited to DWARF2 in the same way as macos.\n\nThis adds an is_like_bsd flag since it was missing. NetBSD/OpenBSD/FreeBSD all\nmatch this.\n\nThis effectively copies #11864 but targets FreeBSD instead of macos.", "tree": {"sha": "b9718990209df35e19943a413eab98b30abbbb22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9718990209df35e19943a413eab98b30abbbb22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/596235281c1a8a44389f675bf78ac3e5f9a2bb84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhkaqCRBK7hj4Ov3rIwAAdHIIAGT2bg94CkMb2kygrf+HTLlT\nbG6K+5EgS1jiwdfaCp0WhyM0l7lJzBDMjQ2KPY7yl1ERjGZWyjC05ojn0yLTceDx\n+va85MDpOeOpKtPixEHyFovIFO4RIp2KwVvPxiPVKlczKM3EQICB65en0fT8cJLL\nOWCp3GMhoytBDmzArVMdEdQ63lY3BPjoPzzLMj5g077Lvwu4cWSwj1uauBvN/LXQ\nyAcXjhRnwxrAv6H26BE/2sNAIa7b05NDv5VWYTWk0OYqLNMol7DC8+WKh3iibEis\nbmfJRccBWNdX1/qmCsOO42b3xUOVHfzvvuykU2K40qIndTTy35EI3TupfaD6up8=\n=sAMe\n-----END PGP SIGNATURE-----\n", "payload": "tree b9718990209df35e19943a413eab98b30abbbb22\nparent f243a2ad904705a1e340a08639dca105605b4175\nparent 4511f8b9f3fc31af6bb96794c3940db911193003\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602635434 +0200\ncommitter GitHub <noreply@github.com> 1602635434 +0200\n\nRollup merge of #77765 - amshafer:master, r=petrochenkov\n\nAdd LLVM flags to limit DWARF version to 2 on BSD\n\nThis has been a thorn in my side for a while, I can finally generate flamegraphs of rust programs on bsd again. This fixes dtrace profiling on freebsd, I think it might help with lldb as well but I can't test that because my current rust-lldb setup is messed up.\n\nI'm limiting the dwarf version to 2 on all bsd's (netbsd/openbsd/freebsd) since it looks like this applies to all of them, but I have only tested on freebsd.\n\nLet me know if there's anything I can improve!\n\n---\nCurrently on FreeBSD dtrace profiling does not work and shows jumbled/incorrect\nsymbols in the backtraces. FreeBSD does not support the latest versions of DWARF\nin dtrace (and lldb?) yet, and needs to be limited to DWARF2 in the same way as macos.\n\nThis adds an is_like_bsd flag since it was missing. NetBSD/OpenBSD/FreeBSD all\nmatch this.\n\nThis effectively copies #11864 but targets FreeBSD instead of macos.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/596235281c1a8a44389f675bf78ac3e5f9a2bb84", "html_url": "https://github.com/rust-lang/rust/commit/596235281c1a8a44389f675bf78ac3e5f9a2bb84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/596235281c1a8a44389f675bf78ac3e5f9a2bb84/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f243a2ad904705a1e340a08639dca105605b4175", "url": "https://api.github.com/repos/rust-lang/rust/commits/f243a2ad904705a1e340a08639dca105605b4175", "html_url": "https://github.com/rust-lang/rust/commit/f243a2ad904705a1e340a08639dca105605b4175"}, {"sha": "4511f8b9f3fc31af6bb96794c3940db911193003", "url": "https://api.github.com/repos/rust-lang/rust/commits/4511f8b9f3fc31af6bb96794c3940db911193003", "html_url": "https://github.com/rust-lang/rust/commit/4511f8b9f3fc31af6bb96794c3940db911193003"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "6516869e47b6f594496d17828abd72a44a389df6", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -120,10 +120,8 @@ pub fn finalize(cx: &CodegenCx<'_, '_>) {\n         // for macOS to understand. For more info see #11352\n         // This can be overridden using --llvm-opts -dwarf-version,N.\n         // Android has the same issue (#22398)\n-        if cx.sess().target.target.options.is_like_osx\n-            || cx.sess().target.target.options.is_like_android\n-        {\n-            llvm::LLVMRustAddModuleFlag(cx.llmod, \"Dwarf Version\\0\".as_ptr().cast(), 2)\n+        if let Some(version) = cx.sess().target.target.options.dwarf_version {\n+            llvm::LLVMRustAddModuleFlag(cx.llmod, \"Dwarf Version\\0\".as_ptr().cast(), version)\n         }\n \n         // Indicate that we want CodeView debug information on MSVC"}, {"sha": "0824bc3035828b048b1220a97c9016119350376b", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -9,6 +9,7 @@ pub fn opts() -> TargetOptions {\n         .unwrap()\n         .push(\"-Wl,--allow-multiple-definition\".to_string());\n     base.is_like_android = true;\n+    base.dwarf_version = Some(2);\n     base.position_independent_executables = true;\n     base.has_elf_tls = false;\n     base.requires_uwtable = true;"}, {"sha": "2e3c835c0e5ec28054d87012e216218136631f2d", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -23,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         is_like_osx: true,\n+        dwarf_version: Some(2),\n         has_rpath: true,\n         dll_prefix: \"lib\".to_string(),\n         dll_suffix: \".dylib\".to_string(),"}, {"sha": "82dc5f5465921e981b41d7e717928ada25078584", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -24,6 +24,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n+        dwarf_version: Some(2),\n         ..Default::default()\n     }\n }"}, {"sha": "051325a8df6878f2e1972ed53063c05db9618f46", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -26,6 +26,7 @@ pub fn opts() -> TargetOptions {\n         eliminate_frame_pointer: false, // FIXME 43575\n         relro_level: RelroLevel::Full,\n         abi_return_struct_as_int: true,\n+        dwarf_version: Some(2),\n         ..Default::default()\n     }\n }"}, {"sha": "6f400854ec6808ec69edfd494bed942191dda6a6", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -816,6 +816,9 @@ pub struct TargetOptions {\n     pub is_like_emscripten: bool,\n     /// Whether the target toolchain is like Fuchsia's.\n     pub is_like_fuchsia: bool,\n+    /// Version of DWARF to use if not using the default.\n+    /// Useful because some platforms (osx, bsd) only want up to DWARF2.\n+    pub dwarf_version: Option<u32>,\n     /// Whether the linker support GNU-like arguments such as -O. Defaults to false.\n     pub linker_is_gnu: bool,\n     /// The MinGW toolchain has a known issue that prevents it from correctly\n@@ -1012,6 +1015,7 @@ impl Default for TargetOptions {\n             is_like_emscripten: false,\n             is_like_msvc: false,\n             is_like_fuchsia: false,\n+            dwarf_version: None,\n             linker_is_gnu: false,\n             allows_weak_linkage: true,\n             has_rpath: false,\n@@ -1165,6 +1169,15 @@ impl Target {\n                     base.options.$key_name = s;\n                 }\n             } );\n+            ($key_name:ident, Option<u32>) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                if let Some(s) = obj.find(&name).and_then(Json::as_u64) {\n+                    if s < 1 || s > 5 {\n+                        return Err(\"Not a valid DWARF version number\".to_string());\n+                    }\n+                    base.options.$key_name = Some(s as u32);\n+                }\n+            } );\n             ($key_name:ident, Option<u64>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_u64) {\n@@ -1417,6 +1430,7 @@ impl Target {\n         key!(is_like_emscripten, bool);\n         key!(is_like_android, bool);\n         key!(is_like_fuchsia, bool);\n+        key!(dwarf_version, Option<u32>);\n         key!(linker_is_gnu, bool);\n         key!(allows_weak_linkage, bool);\n         key!(has_rpath, bool);\n@@ -1654,6 +1668,7 @@ impl ToJson for Target {\n         target_option_val!(is_like_emscripten);\n         target_option_val!(is_like_android);\n         target_option_val!(is_like_fuchsia);\n+        target_option_val!(dwarf_version);\n         target_option_val!(linker_is_gnu);\n         target_option_val!(allows_weak_linkage);\n         target_option_val!(has_rpath);"}, {"sha": "d7baf81fce36caa6265a356540d98de7189722b0", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -24,6 +24,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n         use_ctors_section: true,\n+        dwarf_version: Some(2),\n         ..Default::default()\n     }\n }"}, {"sha": "92a382e826b999088941156c3202b8a6659d7a07", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596235281c1a8a44389f675bf78ac3e5f9a2bb84/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=596235281c1a8a44389f675bf78ac3e5f9a2bb84", "patch": "@@ -26,6 +26,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         eliminate_frame_pointer: false, // FIXME 43575\n         relro_level: RelroLevel::Full,\n+        dwarf_version: Some(2),\n         ..Default::default()\n     }\n }"}]}