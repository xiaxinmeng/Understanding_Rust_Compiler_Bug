{"sha": "7850c28a5ff0c21f658b869138d3b8658b21a554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NTBjMjhhNWZmMGMyMWY2NThiODY5MTM4ZDNiODY1OGIyMWE1NTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T03:05:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T03:05:09Z"}, "message": "Auto merge of #81578 - jonas-schievink:rollup-yhiyowl, r=jonas-schievink\n\nRollup of 18 pull requests\n\nSuccessful merges:\n\n - #78044 (Implement io::Seek for io::Empty)\n - #79285 (Stabilize Arc::{increment,decrement}_strong_count)\n - #80053 (stabilise `cargo test -- --include-ignored`)\n - #80279 (Implement missing `AsMut<str>` for `str`)\n - #80470 (Stabilize by-value `[T; N]` iterator `core::array::IntoIter`)\n - #80945 (Add Box::downcast() for dyn Any + Send + Sync)\n - #81048 (Stabilize `core::slice::fill_with`)\n - #81198 (Remove requirement that forces symmetric and transitive PartialEq impls to exist)\n - #81422 (Account for existing `_` field pattern when suggesting `..`)\n - #81472 (Clone entire `TokenCursor` when collecting tokens)\n - #81484 (Optimize decimal formatting of 128-bit integers)\n - #81491 (Balance sidebar `Deref` cycle check with main content)\n - #81509 (Add a regression test for ICE of bad_placeholder_type)\n - #81547 (Edit rustc_typeck top-level docs)\n - #81550 (Replace predecessor with range in collections documentation)\n - #81558 (Fix ascii art text wrapping in mobile)\n - #81562 (Clarify that InPlaceIterable guarantees extend to all advancing iterator methods.)\n - #81563 (Improve docblock readability on small screen)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3db651c094d64a56272738c2f5dcfda11c4bef66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3db651c094d64a56272738c2f5dcfda11c4bef66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7850c28a5ff0c21f658b869138d3b8658b21a554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7850c28a5ff0c21f658b869138d3b8658b21a554", "html_url": "https://github.com/rust-lang/rust/commit/7850c28a5ff0c21f658b869138d3b8658b21a554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7850c28a5ff0c21f658b869138d3b8658b21a554/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3897e3d1302391ed02efbac1dce8073646b8173", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3897e3d1302391ed02efbac1dce8073646b8173", "html_url": "https://github.com/rust-lang/rust/commit/b3897e3d1302391ed02efbac1dce8073646b8173"}, {"sha": "8b281d9cd7dac7a2bd3a40027c93f5c74d2f9c24", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b281d9cd7dac7a2bd3a40027c93f5c74d2f9c24", "html_url": "https://github.com/rust-lang/rust/commit/8b281d9cd7dac7a2bd3a40027c93f5c74d2f9c24"}], "stats": {"total": 402, "additions": 284, "deletions": 118}, "files": [{"sha": "651f4c6fabd0e660eedde744dca708916b9b00c9", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -11,11 +11,9 @@\n     html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     test(no_crate_inject, attr(deny(warnings)))\n )]\n-#![feature(array_value_iter_slice)]\n #![feature(dropck_eyepatch)]\n #![feature(new_uninit)]\n #![feature(maybe_uninit_slice)]\n-#![feature(array_value_iter)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "8f2e49e299c8be0896ea0be401b4f51a899d1a5f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -30,7 +30,6 @@\n //! get confused if the spans from leaf AST nodes occur in multiple places\n //! in the HIR, especially for multiple identifiers.\n \n-#![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "efc516a662fb7e0df57a0e167e37fb51d1944058", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -2,7 +2,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n-#![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]"}, {"sha": "e2af63d1744ec3b1b1c226fe7c64d060975452e4", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -1254,15 +1254,7 @@ impl<'a> Parser<'a> {\n         f: impl FnOnce(&mut Self) -> PResult<'a, (R, TrailingToken)>,\n     ) -> PResult<'a, R> {\n         let start_token = (self.token.clone(), self.token_spacing);\n-        let cursor_snapshot = TokenCursor {\n-            frame: self.token_cursor.frame.clone(),\n-            // We only ever capture tokens within our current frame,\n-            // so we can just use an empty frame stack\n-            stack: vec![],\n-            desugar_doc_comments: self.token_cursor.desugar_doc_comments,\n-            num_next_calls: self.token_cursor.num_next_calls,\n-            append_unglued_token: self.token_cursor.append_unglued_token.clone(),\n-        };\n+        let cursor_snapshot = self.token_cursor.clone();\n \n         let (mut ret, trailing_token) = f(self)?;\n "}, {"sha": "e1f8d59991f21128b28967453c4ef13da2a7424a", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -11,7 +11,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(array_value_iter)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]"}, {"sha": "dc3e3b4e738392b99938667b32ae5cc8dc9eed3b", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -52,13 +52,13 @@ The types of top-level items, which never contain unbound type\n variables, are stored directly into the `tcx` typeck_results.\n \n N.B., a type variable is not the same thing as a type parameter.  A\n-type variable is rather an \"instance\" of a type parameter: that is,\n-given a generic function `fn foo<T>(t: T)`: while checking the\n+type variable is an instance of a type parameter. That is,\n+given a generic function `fn foo<T>(t: T)`, while checking the\n function `foo`, the type `ty_param(0)` refers to the type `T`, which\n-is treated in abstract.  When `foo()` is called, however, `T` will be\n+is treated in abstract. However, when `foo()` is called, `T` will be\n substituted for a fresh type variable `N`.  This variable will\n eventually be resolved to some concrete type (which might itself be\n-type parameter).\n+a type parameter).\n \n */\n "}, {"sha": "d7e69668e5eae409e558f1c9c902012e3884fb21", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -1041,12 +1041,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 vec![(left, \"(\".to_string()), (right.shrink_to_hi(), \")\".to_string())],\n                 Applicability::MachineApplicable,\n             );\n-        } else if fields.len() > subpats.len() {\n-            let after_fields_span = if pat_span == DUMMY_SP {\n-                pat_span\n-            } else {\n-                pat_span.with_hi(pat_span.hi() - BytePos(1)).shrink_to_hi()\n-            };\n+        } else if fields.len() > subpats.len() && pat_span != DUMMY_SP {\n+            let after_fields_span = pat_span.with_hi(pat_span.hi() - BytePos(1)).shrink_to_hi();\n             let all_fields_span = match subpats {\n                 [] => after_fields_span,\n                 [field] => field.span,\n@@ -1055,7 +1051,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Check if all the fields in the pattern are wildcards.\n             let all_wildcards = subpats.iter().all(|pat| matches!(pat.kind, PatKind::Wild));\n+            let first_tail_wildcard =\n+                subpats.iter().enumerate().fold(None, |acc, (pos, pat)| match (acc, &pat.kind) {\n+                    (None, PatKind::Wild) => Some(pos),\n+                    (Some(_), PatKind::Wild) => acc,\n+                    _ => None,\n+                });\n+            let tail_span = match first_tail_wildcard {\n+                None => after_fields_span,\n+                Some(0) => subpats[0].span.to(after_fields_span),\n+                Some(pos) => subpats[pos - 1].span.shrink_to_hi().to(after_fields_span),\n+            };\n \n+            // FIXME: heuristic-based suggestion to check current types for where to add `_`.\n             let mut wildcard_sugg = vec![\"_\"; fields.len() - subpats.len()].join(\", \");\n             if !subpats.is_empty() {\n                 wildcard_sugg = String::from(\", \") + &wildcard_sugg;\n@@ -1080,7 +1088,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 } else {\n                     err.span_suggestion_verbose(\n-                        after_fields_span,\n+                        tail_span,\n                         \"use `..` to ignore the rest of the fields\",\n                         String::from(\", ..\"),\n                         Applicability::MaybeIncorrect,"}, {"sha": "fd44bafab6f76ea19abb763bd0a474d0c778cad7", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -7,9 +7,9 @@ The type checker is responsible for:\n 1. Determining the type of each expression.\n 2. Resolving methods and traits.\n 3. Guaranteeing that most type rules are met. (\"Most?\", you say, \"why most?\"\n-   Well, dear reader, read on)\n+   Well, dear reader, read on.)\n \n-The main entry point is `check_crate()`. Type checking operates in\n+The main entry point is [`check_crate()`]. Type checking operates in\n several major phases:\n \n 1. The collect phase first passes over all items and determines their\n@@ -25,7 +25,7 @@ several major phases:\n    containing function).  Inference is used to supply types wherever\n    they are unknown. The actual checking of a function itself has\n    several phases (check, regionck, writeback), as discussed in the\n-   documentation for the `check` module.\n+   documentation for the [`check`] module.\n \n The type checker is defined into various submodules which are documented\n independently:\n@@ -56,7 +56,6 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(array_value_iter)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "949079e5b699c032aad6972e84c918d1c1f59ad2", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -1372,6 +1372,39 @@ impl<A: Allocator> Box<dyn Any + Send, A> {\n     }\n }\n \n+impl<A: Allocator> Box<dyn Any + Send + Sync, A> {\n+    #[inline]\n+    #[stable(feature = \"box_send_sync_any_downcast\", since = \"1.51.0\")]\n+    /// Attempt to downcast the box to a concrete type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn print_if_string(value: Box<dyn Any + Send + Sync>) {\n+    ///     if let Ok(string) = value.downcast::<String>() {\n+    ///         println!(\"String ({}): {}\", string.len(), string);\n+    ///     }\n+    /// }\n+    ///\n+    /// let my_string = \"Hello World\".to_string();\n+    /// print_if_string(Box::new(my_string));\n+    /// print_if_string(Box::new(0i8));\n+    /// ```\n+    pub fn downcast<T: Any>(self) -> Result<Box<T, A>, Self> {\n+        if self.is::<T>() {\n+            unsafe {\n+                let (raw, alloc): (*mut (dyn Any + Send + Sync), _) =\n+                    Box::into_raw_with_allocator(self);\n+                Ok(Box::from_raw_in(raw as *mut T, alloc))\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Display + ?Sized, A: Allocator> fmt::Display for Box<T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "13f4d902d3b2ad0edb6d9141427979233315a2d1", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -78,7 +78,6 @@\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n #![feature(array_methods)]\n-#![feature(array_value_iter)]\n #![feature(array_windows)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]"}, {"sha": "461ca85c0305d646891118869b9a8d5cd268a74a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -962,15 +962,13 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_mutate_strong_count)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n     ///\n     /// unsafe {\n     ///     let ptr = Arc::into_raw(five);\n-    ///     Arc::incr_strong_count(ptr);\n+    ///     Arc::increment_strong_count(ptr);\n     ///\n     ///     // This assertion is deterministic because we haven't shared\n     ///     // the `Arc` between threads.\n@@ -979,8 +977,8 @@ impl<T: ?Sized> Arc<T> {\n     /// }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n-    pub unsafe fn incr_strong_count(ptr: *const T) {\n+    #[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]\n+    pub unsafe fn increment_strong_count(ptr: *const T) {\n         // Retain Arc, but don't touch refcount by wrapping in ManuallyDrop\n         let arc = unsafe { mem::ManuallyDrop::new(Arc::<T>::from_raw(ptr)) };\n         // Now increase refcount, but don't drop new refcount either\n@@ -1001,27 +999,25 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_mutate_strong_count)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n     ///\n     /// unsafe {\n     ///     let ptr = Arc::into_raw(five);\n-    ///     Arc::incr_strong_count(ptr);\n+    ///     Arc::increment_strong_count(ptr);\n     ///\n     ///     // Those assertions are deterministic because we haven't shared\n     ///     // the `Arc` between threads.\n     ///     let five = Arc::from_raw(ptr);\n     ///     assert_eq!(2, Arc::strong_count(&five));\n-    ///     Arc::decr_strong_count(ptr);\n+    ///     Arc::decrement_strong_count(ptr);\n     ///     assert_eq!(1, Arc::strong_count(&five));\n     /// }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n-    pub unsafe fn decr_strong_count(ptr: *const T) {\n+    #[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]\n+    pub unsafe fn decrement_strong_count(ptr: *const T) {\n         unsafe { mem::drop(Arc::from_raw(ptr)) };\n     }\n "}, {"sha": "a80550a96531aaae58bb33a270fd47770ab586e7", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -62,7 +62,7 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n     // Increment the reference count of the arc to clone it.\n     unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n-        unsafe { Arc::incr_strong_count(waker as *const W) };\n+        unsafe { Arc::increment_strong_count(waker as *const W) };\n         RawWaker::new(\n             waker as *const (),\n             &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n@@ -83,7 +83,7 @@ fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n \n     // Decrement the reference count of the Arc on drop\n     unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n-        unsafe { Arc::decr_strong_count(waker as *const W) };\n+        unsafe { Arc::decrement_strong_count(waker as *const W) };\n     }\n \n     RawWaker::new("}, {"sha": "535291471b1d0e9b33a6b1399a65a4e2965bbfdf", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -11,7 +11,7 @@ use crate::{\n /// A by-value [array] iterator.\n ///\n /// [array]: ../../std/primitive.array.html\n-#[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n+#[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n pub struct IntoIter<T, const N: usize> {\n     /// This is the array we are iterating over.\n     ///\n@@ -38,10 +38,21 @@ pub struct IntoIter<T, const N: usize> {\n impl<T, const N: usize> IntoIter<T, N> {\n     /// Creates a new iterator over the given `array`.\n     ///\n-    /// *Note*: this method might never get stabilized and/or removed in the\n-    /// future as there will likely be another, preferred way of obtaining this\n-    /// iterator (either via `IntoIterator` for arrays or via another way).\n-    #[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n+    /// *Note*: this method might be deprecated in the future,\n+    /// after [`IntoIterator` is implemented for arrays][array-into-iter].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::array;\n+    ///\n+    /// for value in array::IntoIter::new([1, 2, 3, 4, 5]) {\n+    ///     // The type of `value` is a `i32` here, instead of `&i32`\n+    ///     let _: i32 = value;\n+    /// }\n+    /// ```\n+    /// [array-into-iter]: https://github.com/rust-lang/rust/pull/65819\n+    #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n     pub fn new(array: [T; N]) -> Self {\n         // SAFETY: The transmute here is actually safe. The docs of `MaybeUninit`\n         // promise:\n@@ -69,7 +80,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n \n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet.\n-    #[unstable(feature = \"array_value_iter_slice\", issue = \"65798\")]\n+    #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n     pub fn as_slice(&self) -> &[T] {\n         // SAFETY: We know that all elements within `alive` are properly initialized.\n         unsafe {\n@@ -79,7 +90,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     }\n \n     /// Returns a mutable slice of all elements that have not been yielded yet.\n-    #[unstable(feature = \"array_value_iter_slice\", issue = \"65798\")]\n+    #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         // SAFETY: We know that all elements within `alive` are properly initialized.\n         unsafe {"}, {"sha": "d13061d220389558e5857b3bd88d6d17aef69c43", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -18,7 +18,7 @@ use crate::slice::{Iter, IterMut};\n \n mod iter;\n \n-#[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n+#[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n pub use iter::IntoIter;\n \n /// Converts a reference to `T` into a reference to an array of length 1 (without copying)."}, {"sha": "4a15b185a83e7747d9ff400940fffda5b3da7092", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -31,14 +31,18 @@ use self::Ordering::*;\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n /// so floating point types implement `PartialEq` but not [`trait@Eq`].\n ///\n-/// Formally, the equality must be (for all `a`, `b` and `c`):\n+/// Formally, the equality must be (for all `a`, `b`, `c` of type `A`, `B`,\n+/// `C`):\n ///\n-/// - symmetric: `a == b` implies `b == a`; and\n-/// - transitive: `a == b` and `b == c` implies `a == c`.\n+/// - **Symmetric**: if `A: PartialEq<B>` and `B: PartialEq<A>`, then **`a == b`\n+///   implies `b == a`**; and\n+///\n+/// - **Transitive**: if `A: PartialEq<B>` and `B: PartialEq<C>` and `A:\n+///   PartialEq<C>`, then **`a == b` and `b == c` implies `a == c`**.\n ///\n-/// Note that these requirements mean that the trait itself must be implemented\n-/// symmetrically and transitively: if `T: PartialEq<U>` and `U: PartialEq<V>`\n-/// then `U: PartialEq<T>` and `T: PartialEq<V>`.\n+/// Note that the `B: PartialEq<A>` (symmetric) and `A: PartialEq<C>`\n+/// (transitive) impls are not forced to exist, but these requirements apply\n+/// whenever they do exist.\n ///\n /// ## Derivable\n ///"}, {"sha": "e1b19e4b73cc950bee783ccd2f163449e4e3e84b", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -616,6 +616,14 @@ impl AsRef<str> for str {\n     }\n }\n \n+#[stable(feature = \"as_mut_str_for_str\", since = \"1.51.0\")]\n+impl AsMut<str> for str {\n+    #[inline]\n+    fn as_mut(&mut self) -> &mut str {\n+        self\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // THE NO-ERROR ERROR TYPE\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "cdd731fdd4d4e34aa65ef93f84c86a9d6247777c", "filename": "library/core/src/fmt/num.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -643,25 +643,42 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n }\n \n /// Partition of `n` into n > 1e19 and rem <= 1e19\n+///\n+/// Integer division algorithm is based on the following paper:\n+///\n+///   T. Granlund and P. Montgomery, \u201cDivision by Invariant Integers Using Multiplication\u201d\n+///   in Proc. of the SIGPLAN94 Conference on Programming Language Design and\n+///   Implementation, 1994, pp. 61\u201372\n+///\n fn udiv_1e19(n: u128) -> (u128, u64) {\n     const DIV: u64 = 1e19 as u64;\n-    let high = (n >> 64) as u64;\n-    if high == 0 {\n-        let low = n as u64;\n-        return ((low / DIV) as u128, low % DIV);\n-    }\n-    let sr = 65 - high.leading_zeros();\n-    let mut q = n << (128 - sr);\n-    let mut r = n >> sr;\n-    let mut carry = 0;\n-\n-    for _ in 0..sr {\n-        r = (r << 1) | (q >> 127);\n-        q = (q << 1) | carry as u128;\n-\n-        let s = (DIV as u128).wrapping_sub(r).wrapping_sub(1) as i128 >> 127;\n-        carry = (s & 1) as u64;\n-        r -= (DIV as u128) & s as u128;\n-    }\n-    ((q << 1) | carry as u128, r as u64)\n+    const FACTOR: u128 = 156927543384667019095894735580191660403;\n+\n+    let quot = if n < 1 << 83 {\n+        ((n >> 19) as u64 / (DIV >> 19)) as u128\n+    } else {\n+        u128_mulhi(n, FACTOR) >> 62\n+    };\n+\n+    let rem = (n - quot * DIV as u128) as u64;\n+    (quot, rem)\n+}\n+\n+/// Multiply unsigned 128 bit integers, return upper 128 bits of the result\n+#[inline]\n+fn u128_mulhi(x: u128, y: u128) -> u128 {\n+    let x_lo = x as u64;\n+    let x_hi = (x >> 64) as u64;\n+    let y_lo = y as u64;\n+    let y_hi = (y >> 64) as u64;\n+\n+    // handle possibility of overflow\n+    let carry = (x_lo as u128 * y_lo as u128) >> 64;\n+    let m = x_lo as u128 * y_hi as u128 + carry;\n+    let high1 = m >> 64;\n+\n+    let m_lo = m as u64;\n+    let high2 = (x_hi as u128 * y_lo as u128 + m_lo as u128) >> 64;\n+\n+    x_hi as u128 * y_hi as u128 + high1 + high2\n }"}, {"sha": "c4e21b84863df911e928571c69cd13b0d65e2bf5", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -43,12 +43,14 @@ unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n /// An iterator that when yielding an item will have taken at least one element\n /// from its underlying [`SourceIter`].\n ///\n-/// Calling [`next()`] guarantees that at least one value of the iterator's underlying source\n-/// has been moved out and the result of the iterator chain could be inserted in its place,\n-/// assuming structural constraints of the source allow such an insertion.\n+/// Calling any method that advances the iterator, e.g.  [`next()`] or [`try_fold()`],\n+/// guarantees that for each step at least one value of the iterator's underlying source\n+/// has been moved out and the result of the iterator chain could be inserted\n+/// in its place, assuming structural constraints of the source allow such an insertion.\n /// In other words this trait indicates that an iterator pipeline can be collected in place.\n ///\n /// [`SourceIter`]: crate::iter::SourceIter\n /// [`next()`]: Iterator::next\n+/// [`try_fold()`]: Iterator::try_fold\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub unsafe trait InPlaceIterable: Iterator {}"}, {"sha": "19a3b45e568c039de8b90ebbfc0f8426c5df36e1", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -2852,13 +2852,12 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_fill_with)]\n-    ///\n     /// let mut buf = vec![1; 10];\n     /// buf.fill_with(Default::default);\n     /// assert_eq!(buf, vec![0; 10]);\n     /// ```\n-    #[unstable(feature = \"slice_fill_with\", issue = \"79221\")]\n+    #[doc(alias = \"memset\")]\n+    #[stable(feature = \"slice_fill_with\", since = \"1.51.0\")]\n     pub fn fill_with<F>(&mut self, mut f: F)\n     where\n         F: FnMut() -> T,"}, {"sha": "bc0e3e059c9172ff86d26d106828740b4015c329", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -50,7 +50,6 @@\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]\n-#![feature(array_value_iter)]\n #![feature(iter_advance_by)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_intersperse)]"}, {"sha": "80a13d52a2a27ef30e3706676fb3b2755cf7f500", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -110,10 +110,10 @@\n //!\n //! For Sets, all operations have the cost of the equivalent Map operation.\n //!\n-//! |              | get       | insert    | remove    | predecessor | append |\n-//! |--------------|-----------|-----------|-----------|-------------|--------|\n-//! | [`HashMap`]  | O(1)~     | O(1)~*    | O(1)~     | N/A         | N/A    |\n-//! | [`BTreeMap`] | O(log(n)) | O(log(n)) | O(log(n)) | O(log(n))   | O(n+m) |\n+//! |              | get       | insert    | remove    | range     | append |\n+//! |--------------|-----------|-----------|-----------|-----------|--------|\n+//! | [`HashMap`]  | O(1)~     | O(1)~*    | O(1)~     | N/A       | N/A    |\n+//! | [`BTreeMap`] | O(log(n)) | O(log(n)) | O(log(n)) | O(log(n)) | O(n+m) |\n //!\n //! # Correct and Efficient Usage of Collections\n //!"}, {"sha": "e43ce4cdb4b8e3b5d51d3c98ab3e71534d51d7a0", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -4,7 +4,7 @@\n mod tests;\n \n use crate::fmt;\n-use crate::io::{self, BufRead, Initializer, IoSlice, IoSliceMut, Read, Write};\n+use crate::io::{self, BufRead, Initializer, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\n \n /// A reader which is always at EOF.\n ///\n@@ -58,6 +58,21 @@ impl BufRead for Empty {\n     fn consume(&mut self, _n: usize) {}\n }\n \n+#[stable(feature = \"empty_seek\", since = \"1.51.0\")]\n+impl Seek for Empty {\n+    fn seek(&mut self, _pos: SeekFrom) -> io::Result<u64> {\n+        Ok(0)\n+    }\n+\n+    fn stream_len(&mut self) -> io::Result<u64> {\n+        Ok(0)\n+    }\n+\n+    fn stream_position(&mut self) -> io::Result<u64> {\n+        Ok(0)\n+    }\n+}\n+\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Empty {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "df34e27d1361bce267530ec0ab421f05d952b419", "filename": "library/std/src/io/util/tests.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -1,5 +1,5 @@\n use crate::io::prelude::*;\n-use crate::io::{copy, empty, repeat, sink, Empty, Repeat, Sink};\n+use crate::io::{copy, empty, repeat, sink, Empty, Repeat, SeekFrom, Sink};\n \n #[test]\n fn copy_copies() {\n@@ -29,6 +29,26 @@ fn empty_reads() {\n     assert_eq!(e.by_ref().read(&mut [0; 1024]).unwrap(), 0);\n }\n \n+#[test]\n+fn empty_seeks() {\n+    let mut e = empty();\n+    assert!(matches!(e.seek(SeekFrom::Start(0)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::Start(1)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::Start(u64::MAX)), Ok(0)));\n+\n+    assert!(matches!(e.seek(SeekFrom::End(i64::MIN)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::End(-1)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::End(0)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::End(1)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::End(i64::MAX)), Ok(0)));\n+\n+    assert!(matches!(e.seek(SeekFrom::Current(i64::MIN)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::Current(-1)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::Current(0)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::Current(1)), Ok(0)));\n+    assert!(matches!(e.seek(SeekFrom::Current(i64::MAX)), Ok(0)));\n+}\n+\n #[test]\n fn repeat_repeats() {\n     let mut r = repeat(4);"}, {"sha": "02c529252e029a1e2dceb884985599dba6775010", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -230,9 +230,9 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n     // Unstable flags\n     let force_run_in_process = unstable_optflag!(matches, allow_unstable, \"force-run-in-process\");\n     let exclude_should_panic = unstable_optflag!(matches, allow_unstable, \"exclude-should-panic\");\n-    let include_ignored = unstable_optflag!(matches, allow_unstable, \"include-ignored\");\n     let time_options = get_time_options(&matches, allow_unstable)?;\n \n+    let include_ignored = matches.opt_present(\"include-ignored\");\n     let quiet = matches.opt_present(\"quiet\");\n     let exact = matches.opt_present(\"exact\");\n     let list = matches.opt_present(\"list\");"}, {"sha": "99e12c973c4a2a1c6cc1c454502e3a2b118ad3c0", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -391,12 +391,7 @@ fn parse_show_output_flag() {\n \n #[test]\n fn parse_include_ignored_flag() {\n-    let args = vec![\n-        \"progname\".to_string(),\n-        \"filter\".to_string(),\n-        \"-Zunstable-options\".to_string(),\n-        \"--include-ignored\".to_string(),\n-    ];\n+    let args = vec![\"progname\".to_string(), \"filter\".to_string(), \"--include-ignored\".to_string()];\n     let opts = parse_opts(&args).unwrap().unwrap();\n     assert_eq!(opts.run_ignored, RunIgnored::Yes);\n }"}, {"sha": "6909ab870db61a82556b15aebaf0ef2954a34580", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -3510,6 +3510,7 @@ fn render_assoc_items(\n                     \"deref-methods-{:#}\",\n                     type_.print(cx.cache())\n                 )));\n+                debug!(\"Adding {} to deref id map\", type_.print(cx.cache()));\n                 cx.deref_id_map\n                     .borrow_mut()\n                     .insert(type_.def_id_full(cx.cache()).unwrap(), id.clone());\n@@ -3626,6 +3627,7 @@ fn render_deref_methods(\n             _ => None,\n         })\n         .expect(\"Expected associated type binding\");\n+    debug!(\"Render deref methods for {:#?}, target {:#?}\", impl_.inner_impl().for_, target);\n     let what =\n         AssocItemRender::DerefFor { trait_: deref_type, type_: real_target, deref_mut_: deref_mut };\n     if let Some(did) = target.def_id_full(cx.cache()) {\n@@ -4416,6 +4418,15 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n         })\n     {\n         debug!(\"found target, real_target: {:?} {:?}\", target, real_target);\n+        if let Some(did) = target.def_id_full(cx.cache()) {\n+            if let Some(type_did) = impl_.inner_impl().for_.def_id_full(cx.cache()) {\n+                // `impl Deref<Target = S> for S`\n+                if did == type_did {\n+                    // Avoid infinite cycles\n+                    return;\n+                }\n+            }\n+        }\n         let deref_mut = v\n             .iter()\n             .filter(|i| i.inner_impl().trait_.is_some())\n@@ -4464,13 +4475,6 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n                     .filter(|i| i.inner_impl().trait_.is_some())\n                     .find(|i| i.inner_impl().trait_.def_id_full(cx.cache()) == c.deref_trait_did)\n                 {\n-                    if let Some(type_did) = impl_.inner_impl().for_.def_id_full(cx.cache()) {\n-                        // `impl Deref<Target = S> for S`\n-                        if target_did == type_did {\n-                            // Avoid infinite cycles\n-                            return;\n-                        }\n-                    }\n                     sidebar_deref_methods(cx, out, target_deref_impl, target_impls);\n                 }\n             }"}, {"sha": "cb16dc588d3831076d8ef105d4a774d83256b72f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -156,6 +156,7 @@ code, pre, a.test-arrow {\n }\n .docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n \tpadding: 0;\n+\tpadding-right: 1ex;\n }\n .docblock code.spotlight :last-child {\n \tpadding-bottom: 0.6em;\n@@ -404,7 +405,7 @@ nav.sub {\n \ttext-overflow: ellipsis;\n \tmargin: 0;\n }\n-.docblock code, .docblock-short code {\n+.docblock-short code {\n \twhite-space: pre-wrap;\n }\n \n@@ -1624,6 +1625,10 @@ h4 > .notable-traits {\n \t#settings-menu {\n \t\ttop: 7px;\n \t}\n+\n+\t.docblock {\n+\t\tmargin-left: 12px;\n+\t}\n }\n \n h3.notable {"}, {"sha": "bc64beb1b939d9207588c6a9f1edca81d1ac8b7e", "filename": "src/test/rustdoc-ui/deref-generic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Frustdoc-ui%2Fderef-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Frustdoc-ui%2Fderef-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fderef-generic.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// #81395: Fix ICE when recursing into Deref target only differing in type args\n+\n+pub struct Generic<T>(T);\n+\n+impl<'a> std::ops::Deref for Generic<&'a mut ()> {\n+    type Target = Generic<&'a ()>;\n+    fn deref(&self) -> &Self::Target {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<'a> Generic<&'a ()> {\n+    pub fn some_method(&self) {}\n+}"}, {"sha": "6ba1b2813a177e4ad2ca3e9bfe6ff34ab55c6066", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(array_value_iter)]\n #![feature(trusted_len)]\n \n use std::{"}, {"sha": "deafde2912bb722e2949706a358cf9db1674f30b", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-33.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(array_value_iter)]\n #![feature(trusted_len)]\n \n use std::{"}, {"sha": "70c21dbafe9fc160bce1b2bd5069c2eab5beb96f", "filename": "src/test/ui/pattern/pat-tuple-underfield.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -122,8 +122,8 @@ LL |         Point4(   a   ,     _    , _, _) => {}\n    |                                  ^^^^^^\n help: use `..` to ignore the rest of the fields\n    |\n-LL |         Point4(   a   ,     _    , ..) => {}\n-   |                                  ^^^^\n+LL |         Point4(   a, ..) => {}\n+   |                    ^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "a6903283aa108e7d3512da81ba636d1e16984aad", "filename": "src/test/ui/proc-macro/auxiliary/nonterminal-recollect-attr.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnonterminal-recollect-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnonterminal-recollect-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnonterminal-recollect-attr.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -0,0 +1,23 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_quote)]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, quote};\n+\n+#[proc_macro_attribute]\n+pub fn first_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    let recollected: TokenStream = input.into_iter().collect();\n+    quote! {\n+        #[second_attr]\n+        $recollected\n+    }\n+}\n+\n+#[proc_macro_attribute]\n+pub fn second_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    let _recollected: TokenStream = input.into_iter().collect();\n+    TokenStream::new()\n+}"}, {"sha": "5d4649b78c270a96c5517cf2d98752c0a1d22000", "filename": "src/test/ui/proc-macro/nonterminal-recollect-attr.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// aux-build:nonterminal-recollect-attr.rs\n+\n+extern crate nonterminal_recollect_attr;\n+use nonterminal_recollect_attr::*;\n+\n+macro_rules! my_macro {\n+    ($v:ident) => {\n+        #[first_attr]\n+        $v struct Foo {\n+            field: u8\n+        }\n+    }\n+}\n+\n+my_macro!(pub);\n+fn main() {}"}, {"sha": "0c890f88c60dca2530554a8030b06935d8bb0b41", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -10,15 +10,18 @@ const TEST2: _ = 42u32;\n const TEST3: _ = Some(42);\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-trait Test4 {\n-    const TEST4: _ = 42;\n+const TEST4: fn() -> _ = 42;\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+trait Test5 {\n+    const TEST5: _ = 42;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n-struct Test5;\n+struct Test6;\n \n-impl Test5 {\n-    const TEST5: _ = 13;\n+impl Test6 {\n+    const TEST6: _ = 13;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n "}, {"sha": "0121e18631676c7d3a791d7aa21cd79d5542cec7", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7850c28a5ff0c21f658b869138d3b8658b21a554/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=7850c28a5ff0c21f658b869138d3b8658b21a554", "patch": "@@ -26,23 +26,32 @@ LL | const TEST3: _ = Some(42);\n    |              help: replace `_` with the correct type: `Option<i32>`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item_help.rs:14:18\n+  --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n    |\n-LL |     const TEST4: _ = 42;\n+LL | const TEST4: fn() -> _ = 42;\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: use type parameters instead: `T`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:17:18\n+   |\n+LL |     const TEST5: _ = 42;\n    |                  ^\n    |                  |\n    |                  not allowed in type signatures\n    |                  help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item_help.rs:21:18\n+  --> $DIR/typeck_type_placeholder_item_help.rs:24:18\n    |\n-LL |     const TEST5: _ = 13;\n+LL |     const TEST6: _ = 13;\n    |                  ^\n    |                  |\n    |                  not allowed in type signatures\n    |                  help: replace `_` with the correct type: `i32`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}]}