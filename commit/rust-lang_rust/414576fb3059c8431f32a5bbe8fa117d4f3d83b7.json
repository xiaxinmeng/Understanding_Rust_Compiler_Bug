{"sha": "414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNDU3NmZiMzA1OWM4NDMxZjMyYTViYmU4ZmExMTdkNGYzZDgzYjc=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-07T16:17:54Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-21T06:55:40Z"}, "message": "Add extract_module_to_file assist", "tree": {"sha": "854a26aa9e1f51610b569bbead6bbb2e0f096f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/854a26aa9e1f51610b569bbead6bbb2e0f096f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "html_url": "https://github.com/rust-lang/rust/commit/414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/414576fb3059c8431f32a5bbe8fa117d4f3d83b7/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f5792a365414e0233d72b34ee33c849c0b9ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f5792a365414e0233d72b34ee33c849c0b9ed6", "html_url": "https://github.com/rust-lang/rust/commit/c8f5792a365414e0233d72b34ee33c849c0b9ed6"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "5fc190fa67d6f12cd28a348e81b97c45651d7f75", "filename": "crates/assists/src/handlers/extract_module_to_file.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/414576fb3059c8431f32a5bbe8fa117d4f3d83b7/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414576fb3059c8431f32a5bbe8fa117d4f3d83b7/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_module_to_file.rs?ref=414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "patch": "@@ -0,0 +1,170 @@\n+use ast::edit::IndentLevel;\n+use ide_db::base_db::{AnchoredPathBuf, SourceDatabaseExt};\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit, NameOwner},\n+    AstNode,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: extract_module_to_file\n+//\n+// This assist extract module to file.\n+//\n+// ```\n+// mod foo {<|>\n+//     fn t() {}\n+// }\n+// ```\n+// ->\n+// ```\n+// mod foo;\n+// ```\n+pub(crate) fn extract_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let assist_id = AssistId(\"extract_module_to_file\", AssistKind::RefactorExtract);\n+    let assist_label = \"Extract module to file\";\n+    let db = ctx.db();\n+    let module_ast = ctx.find_node_at_offset::<ast::Module>()?;\n+    let module_items = module_ast.item_list()?;\n+    let dedent_module_items_text = module_items.dedent(IndentLevel(1)).to_string();\n+    let module_name = module_ast.name()?;\n+    let target = module_ast.syntax().text_range();\n+    let anchor_file_id = ctx.frange.file_id;\n+    let sr = db.file_source_root(anchor_file_id);\n+    let sr = db.source_root(sr);\n+    let file_path = sr.path_for_file(&anchor_file_id)?;\n+    let (file_name, file_ext) = file_path.name_and_extension()?;\n+    acc.add(assist_id, assist_label, target, |builder| {\n+        builder.replace(target, format!(\"mod {};\", module_name));\n+        let path = if is_main_or_lib(file_name) {\n+            format!(\"./{}.{}\", module_name, file_ext.unwrap())\n+        } else {\n+            format!(\"./{}/{}.{}\", file_name, module_name, file_ext.unwrap())\n+        };\n+        let dst = AnchoredPathBuf { anchor: anchor_file_id, path };\n+        let contents = update_module_items_string(dedent_module_items_text);\n+        builder.create_file(dst, contents);\n+    })\n+}\n+fn is_main_or_lib(file_name: &str) -> bool {\n+    file_name == \"main\".to_string() || file_name == \"lib\".to_string()\n+}\n+fn update_module_items_string(items_str: String) -> String {\n+    let mut items_string_lines: Vec<&str> = items_str.lines().collect();\n+    items_string_lines.pop(); // Delete last line\n+    items_string_lines.reverse();\n+    items_string_lines.pop(); // Delete first line\n+    items_string_lines.reverse();\n+\n+    let string = items_string_lines.join(\"\\n\");\n+    format!(\"{}\", string)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn extract_module_to_file_with_basic_module() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /foo.rs crate:foo\n+mod tests {<|>\n+    #[test] fn t() {}\n+}\n+\"#,\n+            r#\"\n+//- /foo.rs\n+mod tests;\n+//- /foo/tests.rs\n+#[test] fn t() {}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_module_to_file_with_file_path() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /src/foo.rs crate:foo\n+mod bar {<|>\n+    fn f() {\n+\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\"#,\n+            r#\"\n+//- /src/foo.rs\n+mod bar;\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+//- /src/foo/bar.rs\n+fn f() {\n+\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_module_to_file_with_main_filw() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /main.rs\n+mod foo {<|>\n+    fn f() {\n+\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\"#,\n+            r#\"\n+//- /main.rs\n+mod foo;\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+//- /foo.rs\n+fn f() {\n+\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_module_to_file_with_lib_file() {\n+        check_assist(\n+            extract_module_to_file,\n+            r#\"\n+//- /lib.rs\n+mod foo {<|>\n+    fn f() {\n+\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\"#,\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+//- /foo.rs\n+fn f() {\n+\n+}\"#,\n+        )\n+    }\n+}"}, {"sha": "6b89b2d044397385732fa959f415666919253907", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/414576fb3059c8431f32a5bbe8fa117d4f3d83b7/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414576fb3059c8431f32a5bbe8fa117d4f3d83b7/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "patch": "@@ -129,6 +129,7 @@ mod handlers {\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n+    mod extract_module_to_file;\n     mod extract_struct_from_enum_variant;\n     mod extract_variable;\n     mod fill_match_arms;\n@@ -179,6 +180,7 @@ mod handlers {\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n+            extract_module_to_file::extract_module_to_file,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_variable::extract_variable,\n             fill_match_arms::fill_match_arms,"}, {"sha": "e9093ec536122f034189dbc1c7faadbdc3686317", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/414576fb3059c8431f32a5bbe8fa117d4f3d83b7/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414576fb3059c8431f32a5bbe8fa117d4f3d83b7/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=414576fb3059c8431f32a5bbe8fa117d4f3d83b7", "patch": "@@ -235,6 +235,21 @@ fn qux(bar: Bar, baz: Baz) {}\n     )\n }\n \n+#[test]\n+fn doctest_extract_module_to_file() {\n+    check_doc_test(\n+        \"extract_module_to_file\",\n+        r#####\"\n+mod foo {<|>\n+    fn t() {}\n+}\n+\"#####,\n+        r#####\"\n+mod foo;\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_extract_struct_from_enum_variant() {\n     check_doc_test("}]}