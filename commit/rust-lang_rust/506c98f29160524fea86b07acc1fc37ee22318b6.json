{"sha": "506c98f29160524fea86b07acc1fc37ee22318b6", "node_id": "C_kwDOAAsO6NoAKDUwNmM5OGYyOTE2MDUyNGZlYTg2YjA3YWNjMWZjMzdlZTIyMzE4YjY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-31T13:38:28Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-31T13:38:28Z"}, "message": "Suggest wrapping expressions in single-field record variants", "tree": {"sha": "3b773fd41d004fb90189bb1f07e048b3d6f37de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b773fd41d004fb90189bb1f07e048b3d6f37de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/506c98f29160524fea86b07acc1fc37ee22318b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/506c98f29160524fea86b07acc1fc37ee22318b6", "html_url": "https://github.com/rust-lang/rust/commit/506c98f29160524fea86b07acc1fc37ee22318b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/506c98f29160524fea86b07acc1fc37ee22318b6/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5682615bb4fdb90e3a37b810a1b7bded2a1199e", "html_url": "https://github.com/rust-lang/rust/commit/e5682615bb4fdb90e3a37b810a1b7bded2a1199e"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "7cc7e4f513ba9b8db0ae5457d60c64066bdde16c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/506c98f29160524fea86b07acc1fc37ee22318b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506c98f29160524fea86b07acc1fc37ee22318b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=506c98f29160524fea86b07acc1fc37ee22318b6", "patch": "@@ -363,11 +363,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            let compatible_variants: Vec<(String, Option<String>)> = expected_adt\n+            let compatible_variants: Vec<(String, _, _, Option<String>)> = expected_adt\n                 .variants()\n                 .iter()\n                 .filter(|variant| {\n-                    variant.fields.len() == 1 && variant.ctor_kind == hir::def::CtorKind::Fn\n+                    variant.fields.len() == 1\n                 })\n                 .filter_map(|variant| {\n                     let sole_field = &variant.fields[0];\n@@ -391,9 +391,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\")\n                             && let Some((_, path)) = path.split_once(\"::\")\n                         {\n-                            return Some((path.to_string(), note_about_variant_field_privacy));\n+                            return Some((path.to_string(), variant.ctor_kind, sole_field.name, note_about_variant_field_privacy));\n                         }\n-                        Some((variant_path, note_about_variant_field_privacy))\n+                        Some((variant_path, variant.ctor_kind, sole_field.name, note_about_variant_field_privacy))\n                     } else {\n                         None\n                     }\n@@ -405,18 +405,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 None => String::new(),\n             };\n \n+            fn brackets_for(\n+                ctor: hir::def::CtorKind,\n+                field_name: Symbol,\n+            ) -> (String, &'static str) {\n+                match ctor {\n+                    hir::def::CtorKind::Fn => (\"(\".to_owned(), \")\"),\n+                    hir::def::CtorKind::Fictive => (format!(\" {{ {field_name}: \"), \" }\"),\n+                    hir::def::CtorKind::Const => unreachable!(),\n+                }\n+            }\n+\n             match &compatible_variants[..] {\n                 [] => { /* No variants to format */ }\n-                [(variant, note)] => {\n+                [(variant, ctor_kind, field_name, note)] => {\n+                    let (open, close) = brackets_for(*ctor_kind, *field_name);\n+\n                     // Just a single matching variant.\n                     err.multipart_suggestion_verbose(\n                         &format!(\n                             \"try wrapping the expression in `{variant}`{note}\",\n                             note = note.as_deref().unwrap_or(\"\")\n                         ),\n                         vec![\n-                            (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n-                            (expr.span.shrink_to_hi(), \")\".to_string()),\n+                            (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}{open}\")),\n+                            (expr.span.shrink_to_hi(), close.to_owned()),\n                         ],\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -428,12 +441,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"try wrapping the expression in a variant of `{}`\",\n                             self.tcx.def_path_str(expected_adt.did())\n                         ),\n-                        compatible_variants.into_iter().map(|(variant, _)| {\n-                            vec![\n-                                (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n-                                (expr.span.shrink_to_hi(), \")\".to_string()),\n-                            ]\n-                        }),\n+                        compatible_variants.into_iter().map(\n+                            |(variant, ctor_kind, field_name, _)| {\n+                                let (open, close) = brackets_for(ctor_kind, field_name);\n+\n+                                vec![\n+                                    (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}{open}\")),\n+                                    (expr.span.shrink_to_hi(), close.to_owned()),\n+                                ]\n+                            },\n+                        ),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }"}]}