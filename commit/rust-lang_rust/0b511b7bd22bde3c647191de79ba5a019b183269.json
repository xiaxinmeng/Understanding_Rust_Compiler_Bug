{"sha": "0b511b7bd22bde3c647191de79ba5a019b183269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNTExYjdiZDIyYmRlM2M2NDcxOTFkZTc5YmE1YTAxOWIxODMyNjk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-01-03T21:46:46Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-01-03T23:50:35Z"}, "message": "implement a hack to make traitobject 0.1.0 compile", "tree": {"sha": "55d717471c2a1f48a03b4d228c4b884e63145eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55d717471c2a1f48a03b4d228c4b884e63145eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b511b7bd22bde3c647191de79ba5a019b183269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b511b7bd22bde3c647191de79ba5a019b183269", "html_url": "https://github.com/rust-lang/rust/commit/0b511b7bd22bde3c647191de79ba5a019b183269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b511b7bd22bde3c647191de79ba5a019b183269/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb444e4f18d50e48868861010b3d87d741d1218", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb444e4f18d50e48868861010b3d87d741d1218", "html_url": "https://github.com/rust-lang/rust/commit/7eb444e4f18d50e48868861010b3d87d741d1218"}], "stats": {"total": 568, "additions": 478, "deletions": 90}, "files": [{"sha": "3156f17e0c4c5e6b15261e353c1b8a655214c320", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -492,6 +492,7 @@ define_dep_nodes!( <'tcx>\n     [] AdtDefOfItem(DefId),\n     [] ImplTraitRef(DefId),\n     [] ImplPolarity(DefId),\n+    [] Issue33140SelfTy(DefId),\n     [] FnSignature(DefId),\n     [] CoerceUnsizedInfo(DefId),\n "}, {"sha": "b42d742b7f84139baa982af89134866fbefd245f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -56,6 +56,8 @@ pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n pub use self::specialize::find_associated_item;\n+pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n+pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::engine::{TraitEngine, TraitEngineExt};\n pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n pub use self::util::{supertraits, supertrait_def_ids, transitive_bounds,"}, {"sha": "6db6fe31fba70b9349ebd56230859cf398c346fb", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -2260,7 +2260,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         ImplCandidate(victim_def) => {\n                             let tcx = self.tcx().global_tcx();\n                             return tcx.specializes((other_def, victim_def))\n-                                || tcx.impls_are_allowed_to_overlap(other_def, victim_def);\n+                                || tcx.impls_are_allowed_to_overlap(\n+                                    other_def, victim_def).is_some();\n                         }\n                         ParamCandidate(ref cand) => {\n                             // Prefer the impl to a global where clause candidate."}, {"sha": "e5ed16e7558601a28ee1e387eaa3f142118a4bc5", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -14,11 +14,10 @@ pub mod specialization_graph;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use lint;\n-use traits::coherence;\n+use traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::DUMMY_SP;\n-use traits::{self, ObligationCause, TraitEngine};\n use traits::select::IntercrateAmbiguityCause;\n use ty::{self, TyCtxt, TypeFoldable};\n use ty::subst::{Subst, Substs};\n@@ -27,6 +26,7 @@ use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;\n \n /// Information pertinent to an overlapping impl error.\n+#[derive(Debug)]\n pub struct OverlapError {\n     pub with_impl: DefId,\n     pub trait_desc: String,\n@@ -310,8 +310,9 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n             let insert_result = sg.insert(tcx, impl_def_id);\n             // Report error if there was one.\n             let (overlap, used_to_be_allowed) = match insert_result {\n-                Err(overlap) => (Some(overlap), false),\n-                Ok(opt_overlap) => (opt_overlap, true)\n+                Err(overlap) => (Some(overlap), None),\n+                Ok(Some(overlap)) => (Some(overlap.error), Some(overlap.kind)),\n+                Ok(None) => (None, None)\n             };\n \n             if let Some(overlap) = overlap {\n@@ -321,14 +322,20 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n                         String::new(), |ty| {\n                             format!(\" for type `{}`\", ty)\n                         }),\n-                    if used_to_be_allowed { \" (E0119)\" } else { \"\" }\n+                    if used_to_be_allowed.is_some() { \" (E0119)\" } else { \"\" }\n                 );\n                 let impl_span = tcx.sess.source_map().def_span(\n                     tcx.span_of_impl(impl_def_id).unwrap()\n                 );\n-                let mut err = if used_to_be_allowed {\n+                let mut err = if let Some(kind) = used_to_be_allowed {\n+                    let lint = match kind {\n+                        FutureCompatOverlapErrorKind::Issue43355 =>\n+                            lint::builtin::INCOHERENT_FUNDAMENTAL_IMPLS,\n+                        FutureCompatOverlapErrorKind::Issue33140 =>\n+                            lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS,\n+                    };\n                     tcx.struct_span_lint_node(\n-                        lint::builtin::INCOHERENT_FUNDAMENTAL_IMPLS,\n+                        lint,\n                         tcx.hir().as_local_node_id(impl_def_id).unwrap(),\n                         impl_span,\n                         &msg)"}, {"sha": "e5780a26a19186647a4c2d065ecf761427a95759", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -58,10 +58,22 @@ struct Children {\n     blanket_impls: Vec<DefId>,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum FutureCompatOverlapErrorKind {\n+    Issue43355,\n+    Issue33140,\n+}\n+\n+#[derive(Debug)]\n+pub struct FutureCompatOverlapError {\n+    pub error: OverlapError,\n+    pub kind: FutureCompatOverlapErrorKind\n+}\n+\n /// The result of attempting to insert an impl into a group of children.\n enum Inserted {\n     /// The impl was inserted as a new child in this group of children.\n-    BecameNewSibling(Option<OverlapError>),\n+    BecameNewSibling(Option<FutureCompatOverlapError>),\n \n     /// The impl should replace existing impls [X1, ..], because the impl specializes X1, X2, etc.\n     ReplaceChildren(Vec<DefId>),\n@@ -162,7 +174,19 @@ impl<'a, 'gcx, 'tcx> Children {\n                 impl_def_id,\n                 traits::IntercrateMode::Issue43355,\n                 |overlap| {\n-                    if tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling) {\n+                    if let Some(overlap_kind) =\n+                        tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling)\n+                    {\n+                        match overlap_kind {\n+                            ty::ImplOverlapKind::Permitted => {}\n+                            ty::ImplOverlapKind::Issue33140 => {\n+                                last_lint = Some(FutureCompatOverlapError {\n+                                    error: overlap_error(overlap),\n+                                    kind: FutureCompatOverlapErrorKind::Issue33140\n+                                });\n+                            }\n+                        }\n+\n                         return Ok((false, false));\n                     }\n \n@@ -190,13 +214,23 @@ impl<'a, 'gcx, 'tcx> Children {\n \n                 replace_children.push(possible_sibling);\n             } else {\n-                if !tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling) {\n+                if let None = tcx.impls_are_allowed_to_overlap(\n+                    impl_def_id, possible_sibling)\n+                {\n+                    // do future-compat checks for overlap. Have issue #33140\n+                    // errors overwrite issue #43355 errors when both are present.\n+\n                     traits::overlapping_impls(\n                         tcx,\n                         possible_sibling,\n                         impl_def_id,\n                         traits::IntercrateMode::Fixed,\n-                        |overlap| last_lint = Some(overlap_error(overlap)),\n+                        |overlap| {\n+                            last_lint = Some(FutureCompatOverlapError {\n+                                error: overlap_error(overlap),\n+                                kind: FutureCompatOverlapErrorKind::Issue43355\n+                            });\n+                        },\n                         || (),\n                     );\n                 }\n@@ -263,7 +297,7 @@ impl<'a, 'gcx, 'tcx> Graph {\n     pub fn insert(&mut self,\n                   tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                   impl_def_id: DefId)\n-                  -> Result<Option<OverlapError>, OverlapError> {\n+                  -> Result<Option<FutureCompatOverlapError>, OverlapError> {\n         assert!(impl_def_id.is_local());\n \n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();"}, {"sha": "aa3ff5e4a2dc2246a5fc4b9900331229e6824f63", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 120, "deletions": 2, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -2637,6 +2637,45 @@ impl<'gcx> ::std::ops::Deref for Attributes<'gcx> {\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq)]\n+pub enum ImplOverlapKind {\n+    /// These impls are always allowed to overlap.\n+    Permitted,\n+    /// These impls are allowed to overlap, but that raises\n+    /// an issue #33140 future-compatibility warning.\n+    ///\n+    /// Some background: in Rust 1.0, the trait-object types `Send + Sync` (today's\n+    /// `dyn Send + Sync`) and `Sync + Send` (now `dyn Sync + Send`) were different.\n+    ///\n+    /// The widely-used version 0.1.0 of the crate `traitobject` had accidentally relied\n+    /// that difference, making what reduces to the following set of impls:\n+    ///\n+    /// ```\n+    /// trait Trait {}\n+    /// impl Trait for dyn Send + Sync {}\n+    /// impl Trait for dyn Sync + Send {}\n+    /// ```\n+    ///\n+    /// Obviously, once we made these types be identical, that code causes a coherence\n+    /// error and a fairly big headache for us. However, luckily for us, the trait\n+    /// `Trait` used in this case is basically a marker trait, and therefore having\n+    /// overlapping impls for it is sound.\n+    ///\n+    /// To handle this, we basically regard the trait as a marker trait, with an additional\n+    /// future-compatibility warning. To avoid accidentally \"stabilizing\" this feature,\n+    /// it has the following restrictions:\n+    ///\n+    /// 1. The trait must indeed be a marker-like trait (i.e., no items), and must be\n+    /// positive impls.\n+    /// 2. The trait-ref of both impls must be equal.\n+    /// 3. The trait-ref of both impls must be a trait object type consisting only of\n+    /// marker traits.\n+    /// 4. Neither of the impls can have any where-clauses.\n+    ///\n+    /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.\n+    Issue33140\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn body_tables(self, body: hir::BodyId) -> &'gcx TypeckTables<'gcx> {\n         self.typeck_tables_of(self.hir().body_owner_def_id(body))\n@@ -2788,8 +2827,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns `true` if the impls are the same polarity and the trait either\n     /// has no items or is annotated #[marker] and prevents item overrides.\n-    pub fn impls_are_allowed_to_overlap(self, def_id1: DefId, def_id2: DefId) -> bool {\n-        if self.features().overlapping_marker_traits {\n+    pub fn impls_are_allowed_to_overlap(self, def_id1: DefId, def_id2: DefId)\n+                                        -> Option<ImplOverlapKind>\n+    {\n+        let is_legit = if self.features().overlapping_marker_traits {\n             let trait1_is_empty = self.impl_trait_ref(def_id1)\n                 .map_or(false, |trait_ref| {\n                     self.associated_item_def_ids(trait_ref.def_id).is_empty()\n@@ -2811,6 +2852,29 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 && is_marker_impl(def_id2)\n         } else {\n             false\n+        };\n+\n+        if is_legit {\n+            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted)\",\n+                  def_id1, def_id2);\n+            Some(ImplOverlapKind::Permitted)\n+        } else {\n+            if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {\n+                if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {\n+                    if self_ty1 == self_ty2 {\n+                        debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK\",\n+                               def_id1, def_id2);\n+                        return Some(ImplOverlapKind::Issue33140);\n+                    } else {\n+                        debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) - found {:?} != {:?}\",\n+                              def_id1, def_id2, self_ty1, self_ty2);\n+                    }\n+                }\n+            }\n+\n+            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = None\",\n+                  def_id1, def_id2);\n+            None\n         }\n     }\n \n@@ -3203,6 +3267,59 @@ fn instance_def_size_estimate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n+/// If `def_id` is an issue 33140 hack impl, return its self type. Otherwise\n+/// return None.\n+///\n+/// See ImplOverlapKind::Issue33140 for more details.\n+fn issue33140_self_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                def_id: DefId)\n+                                -> Option<Ty<'tcx>>\n+{\n+    debug!(\"issue33140_self_ty({:?})\", def_id);\n+\n+    let trait_ref = tcx.impl_trait_ref(def_id).unwrap_or_else(|| {\n+        bug!(\"issue33140_self_ty called on inherent impl {:?}\", def_id)\n+    });\n+\n+    debug!(\"issue33140_self_ty({:?}), trait-ref={:?}\", def_id, trait_ref);\n+\n+    let is_marker_like =\n+        tcx.impl_polarity(def_id) == hir::ImplPolarity::Positive &&\n+        tcx.associated_item_def_ids(trait_ref.def_id).is_empty();\n+\n+    // Check whether these impls would be ok for a marker trait.\n+    if !is_marker_like {\n+        debug!(\"issue33140_self_ty - not marker-like!\");\n+        return None;\n+    }\n+\n+    // impl must be `impl Trait for dyn Marker1 + Marker2 + ...`\n+    if trait_ref.substs.len() != 1 {\n+        debug!(\"issue33140_self_ty - impl has substs!\");\n+        return None;\n+    }\n+\n+    let predicates = tcx.predicates_of(def_id);\n+    if predicates.parent.is_some() || !predicates.predicates.is_empty() {\n+        debug!(\"issue33140_self_ty - impl has predicates {:?}!\", predicates);\n+        return None;\n+    }\n+\n+    let self_ty = trait_ref.self_ty();\n+    let self_ty_matches = match self_ty.sty {\n+        ty::Dynamic(ref data, ty::ReStatic) => data.principal().is_none(),\n+        _ => false\n+    };\n+\n+    if self_ty_matches {\n+        debug!(\"issue33140_self_ty - MATCHES!\");\n+        Some(self_ty)\n+    } else {\n+        debug!(\"issue33140_self_ty - non-matching self type\");\n+        None\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n@@ -3221,6 +3338,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         crate_hash,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         instance_def_size_estimate,\n+        issue33140_self_ty,\n         ..*providers\n     };\n }"}, {"sha": "99dd3569491bc2772f8a469cd91f8b7c3bb6bda8", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -202,6 +202,8 @@ define_queries! { <'tcx>\n \n         [] fn impl_trait_ref: ImplTraitRef(DefId) -> Option<ty::TraitRef<'tcx>>,\n         [] fn impl_polarity: ImplPolarity(DefId) -> hir::ImplPolarity,\n+\n+        [] fn issue33140_self_ty: Issue33140SelfTy(DefId) -> Option<ty::Ty<'tcx>>,\n     },\n \n     TypeChecking {"}, {"sha": "9a1ab559688a834ca2ff9f2a85e4216ae45c6d93", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -1275,6 +1275,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::AdtDefOfItem => { force!(adt_def, def_id!()); }\n         DepKind::ImplTraitRef => { force!(impl_trait_ref, def_id!()); }\n         DepKind::ImplPolarity => { force!(impl_polarity, def_id!()); }\n+        DepKind::Issue33140SelfTy => { force!(issue33140_self_ty, def_id!()); }\n         DepKind::FnSignature => { force!(fn_sig, def_id!()); }\n         DepKind::CoerceUnsizedInfo => { force!(coerce_unsized_info, def_id!()); }\n         DepKind::ItemVariances => { force!(variances_of, def_id!()); }"}, {"sha": "4d91af2fb19ca86152f699e384856a3b04ce1542", "filename": "src/test/run-pass/issues/issue-33140.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7eb444e4f18d50e48868861010b3d87d741d1218/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb444e4f18d50e48868861010b3d87d741d1218/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33140.rs?ref=7eb444e4f18d50e48868861010b3d87d741d1218", "patch": "@@ -1,47 +0,0 @@\n-#![allow(order_dependent_trait_objects)]\n-\n-trait Trait {\n-    fn xyz() -> bool;\n-}\n-\n-impl Trait for dyn Send + Sync {\n-    fn xyz() -> bool { false }\n-}\n-\n-impl Trait for dyn Sync + Send {\n-    fn xyz() -> bool { true }\n-}\n-\n-trait Trait2 {\n-    fn uvw() -> bool;\n-}\n-\n-impl Trait2 for dyn Send + Sync {\n-    fn uvw() -> bool { false }\n-}\n-\n-impl Trait2 for dyn Sync + Send + Sync {\n-    fn uvw() -> bool { true }\n-}\n-\n-struct Foo<T: ?Sized>(T);\n-impl Foo<dyn Send + Sync> {\n-    fn abc() -> bool {\n-        false\n-    }\n-}\n-\n-impl Foo<dyn Sync + Send> {\n-    fn abc() -> bool {\n-        true\n-    }\n-}\n-\n-fn main() {\n-    assert_eq!(<dyn Send+Sync>::xyz(), false);\n-    assert_eq!(<dyn Sync+Send>::xyz(), true);\n-    assert_eq!(<dyn Send+Sync>::uvw(), false);\n-    assert_eq!(<dyn Sync+Send+Sync>::uvw(), true);\n-    assert_eq!(<Foo<dyn Send+Sync>>::abc(), false);\n-    assert_eq!(<Foo<dyn Sync+Send>>::abc(), true);\n-}"}, {"sha": "fbdef51c13255255e06592294f46758bdcdbda24", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -0,0 +1,80 @@\n+#![feature(optin_builtin_traits)]\n+#![allow(order_dependent_trait_objects)]\n+\n+// Check that the issue #33140 hack does not allow unintended things.\n+\n+// OK\n+trait Trait0 {\n+}\n+\n+impl Trait0 for dyn Send {}\n+impl Trait0 for dyn Send {}\n+\n+// Problem 1: associated types\n+trait Trait1 {\n+    fn my_fn(&self) {}\n+}\n+\n+impl Trait1 for dyn Send {}\n+impl Trait1 for dyn Send {}\n+//~^ ERROR E0119\n+\n+// Problem 2: negative impl\n+trait Trait2 {\n+}\n+\n+impl Trait2 for dyn Send {}\n+impl !Trait2 for dyn Send {}\n+//~^ ERROR E0119\n+\n+\n+// Problem 3: type parameter\n+trait Trait3<T: ?Sized> {\n+}\n+\n+impl Trait3<dyn Sync> for dyn Send {}\n+impl Trait3<dyn Sync> for dyn Send {}\n+//~^ ERROR E0119\n+\n+// Problem 4a: not a trait object - generic\n+trait Trait4a {\n+}\n+\n+impl<T: ?Sized> Trait4a for T {}\n+impl Trait4a for dyn Send {}\n+//~^ ERROR E0119\n+\n+// Problem 4b: not a trait object - misc\n+trait Trait4b {\n+}\n+\n+impl Trait4b for () {}\n+impl Trait4b for () {}\n+//~^ ERROR E0119\n+\n+// Problem 4c: not a principal-less trait object\n+trait Trait4c {\n+}\n+\n+impl Trait4c for dyn Trait1 + Send {}\n+impl Trait4c for dyn Trait1 + Send {}\n+//~^ ERROR E0119\n+\n+// Problem 4d: lifetimes\n+trait Trait4d {\n+}\n+\n+impl<'a> Trait4d for dyn Send + 'a {}\n+impl<'a> Trait4d for dyn Send + 'a {}\n+//~^ ERROR E0119\n+\n+\n+// Problem 5: where-clauses\n+trait Trait5 {\n+}\n+\n+impl Trait5 for dyn Send {}\n+impl Trait5 for dyn Send where u32: Copy {}\n+//~^ ERROR E0119\n+\n+fn main() {}"}, {"sha": "95aaa55ba7c67b199f326da15663a73cc6a58eb0", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -0,0 +1,67 @@\n+error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:19:1\n+   |\n+LL | impl Trait1 for dyn Send {}\n+   | ------------------------ first implementation here\n+LL | impl Trait1 for dyn Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+\n+error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:27:1\n+   |\n+LL | impl Trait2 for dyn Send {}\n+   | ------------------------ first implementation here\n+LL | impl !Trait2 for dyn Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+\n+error[E0119]: conflicting implementations of trait `Trait3<(dyn std::marker::Sync + 'static)>` for type `(dyn std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:36:1\n+   |\n+LL | impl Trait3<dyn Sync> for dyn Send {}\n+   | ---------------------------------- first implementation here\n+LL | impl Trait3<dyn Sync> for dyn Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+\n+error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:44:1\n+   |\n+LL | impl<T: ?Sized> Trait4a for T {}\n+   | ----------------------------- first implementation here\n+LL | impl Trait4a for dyn Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+\n+error[E0119]: conflicting implementations of trait `Trait4b` for type `()`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:52:1\n+   |\n+LL | impl Trait4b for () {}\n+   | ------------------- first implementation here\n+LL | impl Trait4b for () {}\n+   | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n+\n+error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:60:1\n+   |\n+LL | impl Trait4c for dyn Trait1 + Send {}\n+   | ---------------------------------- first implementation here\n+LL | impl Trait4c for dyn Trait1 + Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + std::marker::Send + 'static)`\n+\n+error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn std::marker::Send`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:68:1\n+   |\n+LL | impl<'a> Trait4d for dyn Send + 'a {}\n+   | ---------------------------------- first implementation here\n+LL | impl<'a> Trait4d for dyn Send + 'a {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn std::marker::Send`\n+\n+error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:77:1\n+   |\n+LL | impl Trait5 for dyn Send {}\n+   | ------------------------ first implementation here\n+LL | impl Trait5 for dyn Send where u32: Copy {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "2b644817df1158272ad890c6a34bf0c2fc3664d6", "filename": "src/test/ui/issues/issue-33140-traitobject-crate.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -0,0 +1,101 @@\n+// compile-pass\n+\n+#![warn(order_dependent_trait_objects)]\n+\n+// Check that traitobject 0.1.0 compiles\n+\n+//! # traitobject\n+//!\n+//! Unsafe helpers for working with raw TraitObjects.\n+\n+/// A trait implemented for all trait objects.\n+///\n+/// Implementations for all traits in std are provided.\n+pub unsafe trait Trait {}\n+\n+unsafe impl Trait for ::std::any::Any + Send { }\n+unsafe impl Trait for ::std::any::Any + Sync { }\n+unsafe impl Trait for ::std::any::Any + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::borrow::Borrow<T> + Send { }\n+unsafe impl<T: ?Sized> Trait for ::std::borrow::Borrow<T> + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::borrow::Borrow<T> + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::borrow::BorrowMut<T> + Send { }\n+unsafe impl<T: ?Sized> Trait for ::std::borrow::BorrowMut<T> + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::borrow::BorrowMut<T> + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::convert::AsMut<T> + Send { }\n+unsafe impl<T: ?Sized> Trait for ::std::convert::AsMut<T> + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::convert::AsMut<T> + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::convert::AsRef<T> + Send { }\n+unsafe impl<T: ?Sized> Trait for ::std::convert::AsRef<T> + Sync { }\n+unsafe impl<T: ?Sized> Trait for ::std::convert::AsRef<T> + Send + Sync { }\n+unsafe impl Trait for ::std::error::Error + Send { }\n+unsafe impl Trait for ::std::error::Error + Sync { }\n+unsafe impl Trait for ::std::error::Error + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::Binary + Send { }\n+unsafe impl Trait for ::std::fmt::Binary + Sync { }\n+unsafe impl Trait for ::std::fmt::Binary + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::Debug + Send { }\n+unsafe impl Trait for ::std::fmt::Debug + Sync { }\n+unsafe impl Trait for ::std::fmt::Debug + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::Display + Send { }\n+unsafe impl Trait for ::std::fmt::Display + Sync { }\n+unsafe impl Trait for ::std::fmt::Display + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::LowerExp + Send { }\n+unsafe impl Trait for ::std::fmt::LowerExp + Sync { }\n+unsafe impl Trait for ::std::fmt::LowerExp + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::LowerHex + Send { }\n+unsafe impl Trait for ::std::fmt::LowerHex + Sync { }\n+unsafe impl Trait for ::std::fmt::LowerHex + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::Octal + Send { }\n+unsafe impl Trait for ::std::fmt::Octal + Sync { }\n+unsafe impl Trait for ::std::fmt::Octal + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::Pointer + Send { }\n+unsafe impl Trait for ::std::fmt::Pointer + Sync { }\n+unsafe impl Trait for ::std::fmt::Pointer + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::UpperExp + Send { }\n+unsafe impl Trait for ::std::fmt::UpperExp + Sync { }\n+unsafe impl Trait for ::std::fmt::UpperExp + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::UpperHex + Send { }\n+unsafe impl Trait for ::std::fmt::UpperHex + Sync { }\n+unsafe impl Trait for ::std::fmt::UpperHex + Send + Sync { }\n+unsafe impl Trait for ::std::fmt::Write + Send { }\n+unsafe impl Trait for ::std::fmt::Write + Sync { }\n+unsafe impl Trait for ::std::fmt::Write + Send + Sync { }\n+unsafe impl Trait for ::std::hash::Hasher + Send { }\n+unsafe impl Trait for ::std::hash::Hasher + Sync { }\n+unsafe impl Trait for ::std::hash::Hasher + Send + Sync { }\n+unsafe impl Trait for ::std::io::BufRead + Send { }\n+unsafe impl Trait for ::std::io::BufRead + Sync { }\n+unsafe impl Trait for ::std::io::BufRead + Send + Sync { }\n+unsafe impl Trait for ::std::io::Read + Send { }\n+unsafe impl Trait for ::std::io::Read + Sync { }\n+unsafe impl Trait for ::std::io::Read + Send + Sync { }\n+unsafe impl Trait for ::std::io::Seek + Send { }\n+unsafe impl Trait for ::std::io::Seek + Sync { }\n+unsafe impl Trait for ::std::io::Seek + Send + Sync { }\n+unsafe impl Trait for ::std::io::Write + Send { }\n+unsafe impl Trait for ::std::io::Write + Sync { }\n+unsafe impl Trait for ::std::io::Write + Send + Sync { }\n+unsafe impl<T, I> Trait for ::std::iter::IntoIterator<IntoIter=I, Item=T> { }\n+unsafe impl<T> Trait for ::std::iter::Iterator<Item=T> + Send { }\n+unsafe impl<T> Trait for ::std::iter::Iterator<Item=T> + Sync { }\n+unsafe impl<T> Trait for ::std::iter::Iterator<Item=T> + Send + Sync { }\n+unsafe impl Trait for ::std::marker::Send + Send { }\n+unsafe impl Trait for ::std::marker::Send + Sync { }\n+unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n+unsafe impl Trait for ::std::marker::Sync + Send { }\n+unsafe impl Trait for ::std::marker::Sync + Sync { }\n+unsafe impl Trait for ::std::marker::Sync + Send + Sync { }\n+unsafe impl Trait for ::std::ops::Drop + Send { }\n+unsafe impl Trait for ::std::ops::Drop + Sync { }\n+unsafe impl Trait for ::std::ops::Drop + Send + Sync { }\n+unsafe impl Trait for ::std::string::ToString + Send { }\n+unsafe impl Trait for ::std::string::ToString + Sync { }\n+unsafe impl Trait for ::std::string::ToString + Send + Sync { }\n+fn assert_trait<T: Trait + ?Sized>() {}\n+\n+fn main() {\n+    assert_trait::<dyn Send>();\n+    assert_trait::<dyn Sync>();\n+    assert_trait::<dyn Send + Sync>();\n+}"}, {"sha": "28193b0eeb9922af1f32e074a18afd603956e2b3", "filename": "src/test/ui/issues/issue-33140-traitobject-crate.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -0,0 +1,39 @@\n+warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Sync + std::marker::Send + 'static)`: (E0119)\n+  --> $DIR/issue-33140-traitobject-crate.rs:85:1\n+   |\n+LL | unsafe impl Trait for ::std::marker::Send + Sync { }\n+   | ------------------------------------------------ first implementation here\n+LL | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Sync + std::marker::Send + 'static)`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-33140-traitobject-crate.rs:3:9\n+   |\n+LL | #![warn(order_dependent_trait_objects)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+\n+warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Sync + std::marker::Send + 'static)`: (E0119)\n+  --> $DIR/issue-33140-traitobject-crate.rs:86:1\n+   |\n+LL | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n+   | ------------------------------------------------------- first implementation here\n+LL | unsafe impl Trait for ::std::marker::Sync + Send { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Sync + std::marker::Send + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+\n+warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Sync + std::marker::Send + 'static)`: (E0119)\n+  --> $DIR/issue-33140-traitobject-crate.rs:88:1\n+   |\n+LL | unsafe impl Trait for ::std::marker::Sync + Send { }\n+   | ------------------------------------------------ first implementation here\n+LL | unsafe impl Trait for ::std::marker::Sync + Sync { }\n+LL | unsafe impl Trait for ::std::marker::Sync + Send + Sync { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Sync + std::marker::Send + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+"}, {"sha": "930e24218ac72a49319065d5ac344c6be2f05363", "filename": "src/test/ui/issues/issue-33140.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140.rs?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -1,5 +1,3 @@\n-#![deny(order_dependent_trait_objects)]\n-\n trait Trait {\n     fn xyz() -> bool;\n }\n@@ -10,7 +8,6 @@ impl Trait for dyn Send + Sync {\n \n impl Trait for dyn Sync + Send {\n //~^ ERROR conflicting implementations\n-//~| hard error\n     fn xyz() -> bool { true }\n }\n \n@@ -24,14 +21,12 @@ impl Trait2 for dyn Send + Sync {\n \n impl Trait2 for dyn Sync + Send + Sync {\n //~^ ERROR conflicting implementations\n-//~| hard error\n     fn uvw() -> bool { true }\n }\n \n struct Foo<T: ?Sized>(T);\n impl Foo<dyn Send + Sync> {\n     fn abc() -> bool { //~ ERROR duplicate definitions with name `abc`\n-                       //~| hard error\n         false\n     }\n }"}, {"sha": "6e63828f5f7f5320f2044e91975c1980843a3c02", "filename": "src/test/ui/issues/issue-33140.stderr", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b511b7bd22bde3c647191de79ba5a019b183269/src%2Ftest%2Fui%2Fissues%2Fissue-33140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140.stderr?ref=0b511b7bd22bde3c647191de79ba5a019b183269", "patch": "@@ -1,37 +1,25 @@\n-error: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/issue-33140.rs:11:1\n+error[E0119]: conflicting implementations of trait `Trait` for type `(dyn std::marker::Sync + std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140.rs:9:1\n    |\n LL | impl Trait for dyn Send + Sync {\n    | ------------------------------ first implementation here\n ...\n LL | impl Trait for dyn Sync + Send {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-33140.rs:1:9\n-   |\n-LL | #![deny(order_dependent_trait_objects)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Sync + std::marker::Send + 'static)`\n \n-error: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/issue-33140.rs:25:1\n+error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Sync + std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140.rs:22:1\n    |\n LL | impl Trait2 for dyn Send + Sync {\n    | ------------------------------- first implementation here\n ...\n LL | impl Trait2 for dyn Sync + Send + Sync {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Sync + std::marker::Send + 'static)`\n \n-error: duplicate definitions with name `abc` (E0592)\n-  --> $DIR/issue-33140.rs:33:5\n+error[E0592]: duplicate definitions with name `abc`\n+  --> $DIR/issue-33140.rs:29:5\n    |\n LL | /     fn abc() -> bool { //~ ERROR duplicate definitions with name `abc`\n-LL | |                        //~| hard error\n LL | |         false\n LL | |     }\n    | |_____^ duplicate definitions for `abc`\n@@ -40,9 +28,8 @@ LL | /     fn abc() -> bool {\n LL | |         true\n LL | |     }\n    | |_____- other definition for `abc`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: aborting due to 3 previous errors\n \n+Some errors occurred: E0119, E0592.\n+For more information about an error, try `rustc --explain E0119`."}]}