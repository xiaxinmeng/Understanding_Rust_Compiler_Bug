{"sha": "f8caccacf49520d85ce790a83b9899f85bdd74c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Y2FjY2FjZjQ5NTIwZDg1Y2U3OTBhODNiOTg5OWY4NWJkZDc0YzU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-02T08:56:36Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-03T07:04:02Z"}, "message": "rustc/ty: simplify some patterns", "tree": {"sha": "97c4778b1fb10ae48a45724dae06772b680372d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c4778b1fb10ae48a45724dae06772b680372d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8caccacf49520d85ce790a83b9899f85bdd74c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8caccacf49520d85ce790a83b9899f85bdd74c5", "html_url": "https://github.com/rust-lang/rust/commit/f8caccacf49520d85ce790a83b9899f85bdd74c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8caccacf49520d85ce790a83b9899f85bdd74c5/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187bcb9bd18069896761d350e264953ede1eea04", "url": "https://api.github.com/repos/rust-lang/rust/commits/187bcb9bd18069896761d350e264953ede1eea04", "html_url": "https://github.com/rust-lang/rust/commit/187bcb9bd18069896761d350e264953ede1eea04"}], "stats": {"total": 161, "additions": 66, "deletions": 95}, "files": [{"sha": "dd7099a406446c2bebe2b5c82a3cb4d2552b9caf", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -780,11 +780,10 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n-        match *r {\n-            ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {\n+        if let ty::ReLateBound(debruijn, br) = *r {\n+             if debruijn == self.current_index {\n                 self.regions.insert(br);\n             }\n-            _ => { }\n         }\n         false\n     }"}, {"sha": "380f5a5866550834c27ac1e6105f0efb10bcb322", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -861,24 +861,22 @@ pub struct GenericParamDef {\n \n impl GenericParamDef {\n     pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n-        match self.kind {\n-            GenericParamDefKind::Lifetime => {\n-                ty::EarlyBoundRegion {\n-                    def_id: self.def_id,\n-                    index: self.index,\n-                    name: self.name,\n-                }\n+        if let GenericParamDefKind::Lifetime = self.kind {\n+            ty::EarlyBoundRegion {\n+                def_id: self.def_id,\n+                index: self.index,\n+                name: self.name,\n             }\n-            _ => bug!(\"cannot convert a non-lifetime parameter def to an early bound region\")\n+        } else {\n+            bug!(\"cannot convert a non-lifetime parameter def to an early bound region\")\n         }\n     }\n \n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n-        match self.kind {\n-            GenericParamDefKind::Lifetime => {\n-                self.to_early_bound_region_data().to_bound_region()\n-            }\n-            _ => bug!(\"cannot convert a non-lifetime parameter def to an early bound region\")\n+        if let GenericParamDefKind::Lifetime = self.kind {\n+            self.to_early_bound_region_data().to_bound_region()\n+        } else {\n+            bug!(\"cannot convert a non-lifetime parameter def to an early bound region\")\n         }\n     }\n }"}, {"sha": "082c1bd5fea441be7f8d46f01d92b1dbb2f109ee", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -332,7 +332,7 @@ impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {\n                            -> RelateResult<'tcx, GeneratorWitness<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n-        assert!(a.0.len() == b.0.len());\n+        assert_eq!(a.0.len(), b.0.len());\n         let tcx = relation.tcx();\n         let types = tcx.mk_type_list(a.0.iter().zip(b.0).map(|(a, b)| relation.relate(a, b)))?;\n         Ok(GeneratorWitness(types))\n@@ -479,27 +479,24 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                     ConstValue::Unevaluated(def_id, substs) => {\n                         // FIXME(eddyb) get the right param_env.\n                         let param_env = ty::ParamEnv::empty();\n-                        match tcx.lift_to_global(&substs) {\n-                            Some(substs) => {\n-                                let instance = ty::Instance::resolve(\n-                                    tcx.global_tcx(),\n-                                    param_env,\n-                                    def_id,\n-                                    substs,\n-                                );\n-                                if let Some(instance) = instance {\n-                                    let cid = GlobalId {\n-                                        instance,\n-                                        promoted: None\n-                                    };\n-                                    if let Some(s) = tcx.const_eval(param_env.and(cid))\n-                                                        .ok()\n-                                                        .map(|c| c.unwrap_usize(tcx)) {\n-                                        return Ok(s)\n-                                    }\n+                        if let Some(substs) = tcx.lift_to_global(&substs) {\n+                            let instance = ty::Instance::resolve(\n+                                tcx.global_tcx(),\n+                                param_env,\n+                                def_id,\n+                                substs,\n+                            );\n+                            if let Some(instance) = instance {\n+                                let cid = GlobalId {\n+                                    instance,\n+                                    promoted: None\n+                                };\n+                                if let Some(s) = tcx.const_eval(param_env.and(cid))\n+                                                    .ok()\n+                                                    .map(|c| c.unwrap_usize(tcx)) {\n+                                    return Ok(s)\n                                 }\n-                            },\n-                            None => {}\n+                            }\n                         }\n                         tcx.sess.delay_span_bug(tcx.def_span(def_id),\n                             \"array length could not be evaluated\");"}, {"sha": "729a05eb5d43aa463c15a8f769e11b3bddb1e67e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -816,22 +816,16 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         use ty::InstanceDef::*;\n         self.substs.visit_with(visitor) ||\n         match self.def {\n-            Item(did) => did.visit_with(visitor),\n-            Intrinsic(did) => did.visit_with(visitor),\n-            FnPtrShim(did, ty) => {\n-                did.visit_with(visitor) ||\n-                ty.visit_with(visitor)\n+            Item(did) | Intrinsic(did) | Virtual(did, _) => {\n+                did.visit_with(visitor)\n             },\n-            Virtual(did, _) => did.visit_with(visitor),\n-            ClosureOnceShim { call_once } => call_once.visit_with(visitor),\n-            DropGlue(did, ty) => {\n-                did.visit_with(visitor) ||\n-                ty.visit_with(visitor)\n+            FnPtrShim(did, ty) | CloneShim(did, ty) => {\n+                did.visit_with(visitor) || ty.visit_with(visitor)\n             },\n-            CloneShim(did, ty) => {\n-                did.visit_with(visitor) ||\n-                ty.visit_with(visitor)\n+            DropGlue(did, ty) => {\n+                did.visit_with(visitor) || ty.visit_with(visitor)\n             },\n+            ClosureOnceShim { call_once } => call_once.visit_with(visitor),\n         }\n     }\n }"}, {"sha": "bc5186b08b8643ca22b48c46b9d7b9544075047e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -987,11 +987,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n         // FIXME(#50125): Ignoring `Self` with `idx != 0` might lead to weird behavior elsewhere,\n         // but this should only be possible when using `-Z continue-parse-after-error` like\n         // `compile-fail/issue-36638.rs`.\n-        if self.name == keywords::SelfType.name().as_str() && self.idx == 0 {\n-            true\n-        } else {\n-            false\n-        }\n+        self.name == keywords::SelfType.name().as_str() && self.idx == 0\n     }\n }\n \n@@ -2021,18 +2017,14 @@ impl<'tcx> Const<'tcx> {\n         tcx: TyCtxt<'_, '_, '_>,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> u128 {\n-        match self.assert_bits(tcx, ty) {\n-            Some(val) => val,\n-            None => bug!(\"expected bits of {}, got {:#?}\", ty.value, self),\n-        }\n+        self.assert_bits(tcx, ty).unwrap_or_else(||\n+            bug!(\"expected bits of {}, got {:#?}\", ty.value, self))\n     }\n \n     #[inline]\n     pub fn unwrap_usize(&self, tcx: TyCtxt<'_, '_, '_>) -> u64 {\n-        match self.assert_usize(tcx) {\n-            Some(val) => val,\n-            None => bug!(\"expected constant usize, got {:#?}\", self),\n-        }\n+        self.assert_usize(tcx).unwrap_or_else(||\n+            bug!(\"expected constant usize, got {:#?}\", self))\n     }\n }\n "}, {"sha": "72d720b138aac7566dc45fea257f9245d85f333e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -205,10 +205,9 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         Substs::for_item(tcx, def_id, |param, substs| {\n-            match self.get(param.index as usize) {\n-                Some(&kind) => kind,\n-                None => mk_kind(param, substs),\n-            }\n+            self.get(param.index as usize)\n+                .cloned()\n+                .unwrap_or_else(|| mk_kind(param, substs))\n         })\n     }\n "}, {"sha": "af678c3e9924b7d20fca9cfb46225b3a7c8d3f90", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -138,10 +138,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n         } else {\n-            for v in impls.non_blanket_impls.values() {\n-                for &impl_def_id in v {\n-                    f(impl_def_id);\n-                }\n+            for &impl_def_id in impls.non_blanket_impls.values().flatten() {\n+                f(impl_def_id);\n             }\n         }\n     }"}, {"sha": "4e2c9cceab6344e8f89231c319e75a381315d426", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -257,16 +257,13 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n-        match ty.sty {\n-            ty::Adt(def, substs) => {\n-                for field in def.all_fields() {\n-                    let field_ty = field.ty(self, substs);\n-                    if let Error = field_ty.sty {\n-                        return true;\n-                    }\n+        if let ty::Adt(def, substs) = ty.sty {\n+            for field in def.all_fields() {\n+                let field_ty = field.ty(self, substs);\n+                if let Error = field_ty.sty {\n+                    return true;\n                 }\n             }\n-            _ => (),\n         }\n         false\n     }\n@@ -421,7 +418,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let ty = self.type_of(adt_did);\n         self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item) = self.associated_items(impl_did).next() {\n-                if let Ok(()) = validate(self, impl_did) {\n+                if validate(self, impl_did).is_ok() {\n                     dtor_did = Some(item.def_id);\n                 }\n             }\n@@ -906,20 +903,17 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (param_env, ty) = query.into_parts();\n \n     let needs_drop = |ty: Ty<'tcx>| -> bool {\n-        match tcx.try_needs_drop_raw(DUMMY_SP, param_env.and(ty)) {\n-            Ok(v) => v,\n-            Err(mut bug) => {\n-                // Cycles should be reported as an error by `check_representable`.\n-                //\n-                // Consider the type as not needing drop in the meanwhile to\n-                // avoid further errors.\n-                //\n-                // In case we forgot to emit a bug elsewhere, delay our\n-                // diagnostic to get emitted as a compiler bug.\n-                bug.delay_as_bug();\n-                false\n-            }\n-        }\n+        tcx.try_needs_drop_raw(DUMMY_SP, param_env.and(ty)).unwrap_or_else(|mut bug| {\n+            // Cycles should be reported as an error by `check_representable`.\n+            //\n+            // Consider the type as not needing drop in the meanwhile to\n+            // avoid further errors.\n+            //\n+            // In case we forgot to emit a bug elsewhere, delay our\n+            // diagnostic to get emitted as a compiler bug.\n+            bug.delay_as_bug();\n+            false\n+        })\n     };\n \n     assert!(!ty.needs_infer());"}, {"sha": "540765dfaafcfe61ff95cb7243b090f0cfb05fe0", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8caccacf49520d85ce790a83b9899f85bdd74c5/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=f8caccacf49520d85ce790a83b9899f85bdd74c5", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n         debug!(\"next(): stack={:?}\", self.stack);\n         match self.stack.pop() {\n             None => {\n-                return None;\n+                None\n             }\n             Some(ty) => {\n                 self.last_subtree = self.stack.len();"}]}