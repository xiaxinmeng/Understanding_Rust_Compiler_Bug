{"sha": "deb93ca060220e411e69788810a1da07da4bd72e", "node_id": "C_kwDOAAsO6NoAKGRlYjkzY2EwNjAyMjBlNDExZTY5Nzg4ODEwYTFkYTA3ZGE0YmQ3MmU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-10-09T15:09:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-09T15:09:43Z"}, "message": "Rollup merge of #102834 - compiler-errors:unnecessary-lift, r=jyn514\n\nRemove unnecessary `lift`/`lift_to_tcx` calls from rustdoc\n\nNot sure why they were here in the first place", "tree": {"sha": "1bd05e5a3c24369bf55cf8b35e5ced3794960a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bd05e5a3c24369bf55cf8b35e5ced3794960a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb93ca060220e411e69788810a1da07da4bd72e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQuQ3CRBK7hj4Ov3rIwAALy0IADA2ApS6EA8faeiFIsAo6Lc0\ncp515J/KSWRUpOnSIbks3q7eH/9nxwp5cBLwTDq4V7TKbeWm5vzE9gaXtCEOqSs6\nGfurbta/mGB6AFrSd367SU6fnubxzML8c4v+8tngnz6aJETCNTZngCyty4AxLixC\nGV7WTO41tMCBTWXn2vovIsHtC1iIwXVQnB2u4X2mSIYIG0ATQoLHIw0sD7chGFZT\nOEq8IMcAXaI8J6PywA/jp6BT+MpMhChpIvf5wYqaqdd0PaakN9aHfi9H22aUnVXr\nkBEYEIeNqOAYAPQht6cJd8SRPIeh/97k5/FONWHq9vhICk9t+PXg94YFwY6+4As=\n=e2NU\n-----END PGP SIGNATURE-----\n", "payload": "tree 1bd05e5a3c24369bf55cf8b35e5ced3794960a3f\nparent 0a9b09f9fd6435d1e4a90941a1d7ffcd910dddd7\nparent 9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7\nauthor Yuki Okushi <jtitor@2k36.org> 1665328183 +0900\ncommitter GitHub <noreply@github.com> 1665328183 +0900\n\nRollup merge of #102834 - compiler-errors:unnecessary-lift, r=jyn514\n\nRemove unnecessary `lift`/`lift_to_tcx` calls from rustdoc\n\nNot sure why they were here in the first place\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb93ca060220e411e69788810a1da07da4bd72e", "html_url": "https://github.com/rust-lang/rust/commit/deb93ca060220e411e69788810a1da07da4bd72e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb93ca060220e411e69788810a1da07da4bd72e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a9b09f9fd6435d1e4a90941a1d7ffcd910dddd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9b09f9fd6435d1e4a90941a1d7ffcd910dddd7", "html_url": "https://github.com/rust-lang/rust/commit/0a9b09f9fd6435d1e4a90941a1d7ffcd910dddd7"}, {"sha": "9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7", "html_url": "https://github.com/rust-lang/rust/commit/9a4d4d5e6b0d68fbacc41e42fc8cb4bde3c2aea7"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "8d556a962d9f56a508f88be67bb3ac1c6b288b7c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/deb93ca060220e411e69788810a1da07da4bd72e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb93ca060220e411e69788810a1da07da4bd72e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=deb93ca060220e411e69788810a1da07da4bd72e", "patch": "@@ -22,7 +22,7 @@ use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::InternalSubsts;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Lift, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -176,8 +176,6 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n     poly_trait_ref: ty::PolyTraitRef<'tcx>,\n     bindings: ThinVec<TypeBinding>,\n ) -> GenericBound {\n-    let poly_trait_ref = poly_trait_ref.lift_to_tcx(cx.tcx).unwrap();\n-\n     // collect any late bound regions\n     let late_bound_regions: Vec<_> = cx\n         .tcx\n@@ -417,8 +415,7 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n-    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), ThinVec::new());\n+    let trait_ = clean_trait_ref_with_bindings(cx, ty.trait_ref(cx.tcx), ThinVec::new());\n     let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n@@ -1552,7 +1549,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n }\n \n /// Returns `None` if the type could not be normalized\n-fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n+fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n     if !cx.tcx.sess.opts.unstable_opts.normalize_docs {\n         return None;\n@@ -1563,11 +1560,10 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n     use rustc_middle::traits::ObligationCause;\n \n     // Try to normalize `<X as Y>::T` to a type\n-    let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n     let infcx = cx.tcx.infer_ctxt().build();\n     let normalized = infcx\n         .at(&ObligationCause::dummy(), cx.param_env)\n-        .normalize(lifted)\n+        .normalize(ty)\n         .map(|resolved| infcx.resolve_vars_if_possible(resolved.value));\n     match normalized {\n         Ok(normalized_value) => {\n@@ -1597,8 +1593,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Float(float_ty) => Primitive(float_ty.into()),\n         ty::Str => Primitive(PrimitiveType::Str),\n         ty::Slice(ty) => Slice(Box::new(clean_middle_ty(ty, cx, None))),\n-        ty::Array(ty, n) => {\n-            let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n+        ty::Array(ty, mut n) => {\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n             Array(Box::new(clean_middle_ty(ty, cx, None)), n)\n@@ -1667,8 +1662,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 .map(|pb| TypeBinding {\n                     assoc: projection_to_path_segment(\n                         pb.skip_binder()\n-                            .lift_to_tcx(cx.tcx)\n-                            .unwrap()\n                             // HACK(compiler-errors): Doesn't actually matter what self\n                             // type we put here, because we're only using the GAT's substs.\n                             .with_self_ty(cx.tcx, cx.tcx.types.self_param)\n@@ -1701,7 +1694,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Opaque(def_id, substs) => {\n             // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n             // by looking up the bounds associated with the def_id.\n-            let substs = cx.tcx.lift(substs).expect(\"Opaque lift failed\");\n             let bounds = cx\n                 .tcx\n                 .explicit_item_bounds(def_id)"}, {"sha": "4572a712258abf582b8fe7a1c76b0c0282b8e074", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/deb93ca060220e411e69788810a1da07da4bd72e/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb93ca060220e411e69788810a1da07da4bd72e/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=deb93ca060220e411e69788810a1da07da4bd72e", "patch": "@@ -304,9 +304,9 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(\n-    tcx: TyCtxt<'_>,\n-    ct: mir::ConstantKind<'_>,\n+fn print_const_with_custom_print_scalar<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ct: mir::ConstantKind<'tcx>,\n     underscores_and_type: bool,\n ) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n@@ -320,7 +320,7 @@ fn print_const_with_custom_print_scalar(\n             }\n         }\n         (mir::ConstantKind::Val(ConstValue::Scalar(int), _), ty::Int(i)) => {\n-            let ty = tcx.lift(ct.ty()).unwrap();\n+            let ty = ct.ty();\n             let size = tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n             let data = int.assert_bits(size);\n             let sign_extended_data = size.sign_extend(data) as i128;"}]}