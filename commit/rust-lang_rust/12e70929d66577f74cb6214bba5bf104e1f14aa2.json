{"sha": "12e70929d66577f74cb6214bba5bf104e1f14aa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZTcwOTI5ZDY2NTc3Zjc0Y2I2MjE0YmJhNWJmMTA0ZTFmMTRhYTI=", "commit": {"author": {"name": "Alessandro Decina", "email": "alessandro.d@gmail.com", "date": "2020-11-30T19:41:57Z"}, "committer": {"name": "Alessandro Decina", "email": "alessandro.d@gmail.com", "date": "2021-05-23T08:03:27Z"}, "message": "Add BPF target\n\nThis change adds the bpfel-unknown-none and bpfeb-unknown-none targets\nwhich can be used to generate little endian and big endian BPF", "tree": {"sha": "140448195cdbf393d03330a6ee276a42b2ca8156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140448195cdbf393d03330a6ee276a42b2ca8156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e70929d66577f74cb6214bba5bf104e1f14aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e70929d66577f74cb6214bba5bf104e1f14aa2", "html_url": "https://github.com/rust-lang/rust/commit/12e70929d66577f74cb6214bba5bf104e1f14aa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e70929d66577f74cb6214bba5bf104e1f14aa2/comments", "author": {"login": "alessandrod", "id": 62002, "node_id": "MDQ6VXNlcjYyMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/62002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alessandrod", "html_url": "https://github.com/alessandrod", "followers_url": "https://api.github.com/users/alessandrod/followers", "following_url": "https://api.github.com/users/alessandrod/following{/other_user}", "gists_url": "https://api.github.com/users/alessandrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/alessandrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alessandrod/subscriptions", "organizations_url": "https://api.github.com/users/alessandrod/orgs", "repos_url": "https://api.github.com/users/alessandrod/repos", "events_url": "https://api.github.com/users/alessandrod/events{/privacy}", "received_events_url": "https://api.github.com/users/alessandrod/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alessandrod", "id": 62002, "node_id": "MDQ6VXNlcjYyMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/62002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alessandrod", "html_url": "https://github.com/alessandrod", "followers_url": "https://api.github.com/users/alessandrod/followers", "following_url": "https://api.github.com/users/alessandrod/following{/other_user}", "gists_url": "https://api.github.com/users/alessandrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/alessandrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alessandrod/subscriptions", "organizations_url": "https://api.github.com/users/alessandrod/orgs", "repos_url": "https://api.github.com/users/alessandrod/repos", "events_url": "https://api.github.com/users/alessandrod/events{/privacy}", "received_events_url": "https://api.github.com/users/alessandrod/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92418ce65aa9d45fd1af355136d65493254a344a", "url": "https://api.github.com/repos/rust-lang/rust/commits/92418ce65aa9d45fd1af355136d65493254a344a", "html_url": "https://github.com/rust-lang/rust/commit/92418ce65aa9d45fd1af355136d65493254a344a"}], "stats": {"total": 253, "additions": 250, "deletions": 3}, "files": [{"sha": "49475fe2469edc191a7ce2a0f81a512973a4b21a", "filename": "compiler/rustc_codegen_cranelift/src/toolchain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -67,6 +67,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\",\n                     LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n+                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n                 }),\n                 flavor,\n             )),"}, {"sha": "8b280ab64018ec75300054e9b91bdd86193e6387", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -989,6 +989,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\",\n                     LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n+                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n                 }),\n                 flavor,\n             )),"}, {"sha": "35146d22e6896e611eb70cc55954545445e205ed", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -84,6 +84,7 @@ impl LinkerInfo {\n             LinkerFlavor::PtxLinker => {\n                 Box::new(PtxLinker { cmd, sess, info: self }) as Box<dyn Linker>\n             }\n+            LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess, info: self }) as Box<dyn Linker>\n         }\n     }\n }\n@@ -1431,3 +1432,124 @@ impl<'a> Linker for PtxLinker<'a> {\n \n     fn linker_plugin_lto(&mut self) {}\n }\n+\n+pub struct BpfLinker<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+    info: &'a LinkerInfo,\n+}\n+\n+impl<'a> Linker for BpfLinker<'a> {\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n+    fn set_output_kind(&mut self, _output_kind: LinkOutputKind, _out_filename: &Path) {}\n+\n+    fn link_rlib(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn link_whole_rlib(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+\n+    fn debuginfo(&mut self, _strip: Strip) {\n+        self.cmd.arg(\"--debug\");\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn optimize(&mut self) {\n+        self.cmd.arg(match self.sess.opts.optimize {\n+            OptLevel::No => \"-O0\",\n+            OptLevel::Less => \"-O1\",\n+            OptLevel::Default => \"-O2\",\n+            OptLevel::Aggressive => \"-O3\",\n+            OptLevel::Size => \"-Os\",\n+            OptLevel::SizeMin => \"-Oz\",\n+        });\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn finalize(&mut self) {\n+        self.cmd.arg(\"--cpu\").arg(match self.sess.opts.cg.target_cpu {\n+            Some(ref s) => s,\n+            None => &self.sess.target.options.cpu,\n+        });\n+    }\n+\n+    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+        panic!(\"external dylibs not supported\")\n+    }\n+\n+    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n+        panic!(\"external dylibs not supported\")\n+    }\n+\n+    fn link_staticlib(&mut self, _lib: Symbol, _verbatim: bool) {\n+        panic!(\"staticlibs not supported\")\n+    }\n+\n+    fn link_whole_staticlib(&mut self, _lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+        panic!(\"staticlibs not supported\")\n+    }\n+\n+    fn framework_path(&mut self, _path: &Path) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn full_relro(&mut self) {}\n+\n+    fn partial_relro(&mut self) {}\n+\n+    fn no_relro(&mut self) {}\n+\n+    fn gc_sections(&mut self, _keep_metadata: bool) {}\n+\n+    fn no_gc_sections(&mut self) {}\n+\n+    fn pgo_gen(&mut self) {}\n+\n+    fn no_crt_objects(&mut self) {}\n+\n+    fn no_default_libraries(&mut self) {}\n+\n+    fn control_flow_guard(&mut self) {}\n+\n+    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n+        let path = tmpdir.join(\"symbols\");\n+        let res: io::Result<()> = try {\n+            let mut f = BufWriter::new(File::create(&path)?);\n+            for sym in self.info.exports[&crate_type].iter() {\n+                writeln!(f, \"{}\", sym)?;\n+            }\n+        };\n+        if let Err(e) = res {\n+            self.sess.fatal(&format!(\"failed to write symbols file: {}\", e));\n+        } else {\n+            self.cmd.arg(\"--export-symbols\").arg(&path);\n+        }\n+    }\n+\n+    fn subsystem(&mut self, _subsystem: &str) {}\n+\n+    fn group_start(&mut self) {}\n+\n+    fn group_end(&mut self) {}\n+\n+    fn linker_plugin_lto(&mut self) {}\n+}"}, {"sha": "452d1b19a18a84b18e861736f51505a437a0170a", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -86,6 +86,7 @@ fn main() {\n         \"nvptx\",\n         \"hexagon\",\n         \"riscv\",\n+        \"bpf\",\n     ];\n \n     let required_components = &["}, {"sha": "122627eb500ada1b69f2d38924d63e9f4069dcc9", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -167,4 +167,12 @@ pub fn initialize_available_targets() {\n         LLVMInitializeWebAssemblyAsmPrinter,\n         LLVMInitializeWebAssemblyAsmParser\n     );\n+    init_target!(\n+        llvm_component = \"bpf\",\n+        LLVMInitializeBPFTargetInfo,\n+        LLVMInitializeBPFTarget,\n+        LLVMInitializeBPFTargetMC,\n+        LLVMInitializeBPFAsmPrinter,\n+        LLVMInitializeBPFAsmParser\n+    );\n }"}, {"sha": "79af0150e21f405779104a4c0f6624a389eb6344", "filename": "compiler/rustc_target/src/abi/call/bpf.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fbpf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fbpf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fbpf.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -0,0 +1,31 @@\n+// see BPFCallingConv.td\n+use crate::abi::call::{ArgAbi, FnAbi};\n+\n+fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n+    if ret.layout.is_aggregate() || ret.layout.size.bits() > 64 {\n+        ret.make_indirect();\n+    } else {\n+        ret.extend_integer_width_to(64);\n+    }\n+}\n+\n+fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n+    if arg.layout.is_aggregate() || arg.layout.size.bits() > 64 {\n+        arg.make_indirect();\n+    } else {\n+        arg.extend_integer_width_to(64);\n+    }\n+}\n+\n+pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n+    if !fn_abi.ret.is_ignore() {\n+        classify_ret(&mut fn_abi.ret);\n+    }\n+\n+    for arg in &mut fn_abi.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg(arg);\n+    }\n+}"}, {"sha": "864b4fe5f08d738da194a0155f8fb5568f3b2760", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -6,6 +6,7 @@ mod aarch64;\n mod amdgpu;\n mod arm;\n mod avr;\n+mod bpf;\n mod hexagon;\n mod mips;\n mod mips64;\n@@ -654,6 +655,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n                 }\n             }\n             \"asmjs\" => wasm::compute_c_abi_info(cx, self),\n+            \"bpfel\" | \"bpfeb\" => bpf::compute_abi_info(self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n         }\n "}, {"sha": "0853255999c8e1070fd368d58dfc6af54ea5fdd7", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -0,0 +1,37 @@\n+use crate::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, TargetOptions};\n+use crate::{abi::Endian, spec::abi::Abi};\n+\n+pub fn opts(endian: Endian) -> TargetOptions {\n+    TargetOptions {\n+        endian,\n+        linker_flavor: LinkerFlavor::BpfLinker,\n+        atomic_cas: false,\n+        executables: true,\n+        dynamic_linking: true,\n+        no_builtins: true,\n+        panic_strategy: PanicStrategy::Abort,\n+        position_independent_executables: true,\n+        merge_functions: MergeFunctions::Disabled,\n+        obj_is_bitcode: true,\n+        requires_lto: false,\n+        singlethread: true,\n+        max_atomic_width: Some(64),\n+        unsupported_abis: vec![\n+            Abi::Cdecl,\n+            Abi::Stdcall { unwind: false },\n+            Abi::Stdcall { unwind: true },\n+            Abi::Fastcall,\n+            Abi::Vectorcall,\n+            Abi::Thiscall { unwind: false },\n+            Abi::Thiscall { unwind: true },\n+            Abi::Aapcs,\n+            Abi::Win64,\n+            Abi::SysV64,\n+            Abi::PtxKernel,\n+            Abi::Msp430Interrupt,\n+            Abi::X86Interrupt,\n+            Abi::AmdGpuKernel,\n+        ],\n+        ..Default::default()\n+    }\n+}"}, {"sha": "cb3e4bbece43feeb49db7178341693122701c72c", "filename": "compiler/rustc_target/src/spec/bpfeb_unknown_none.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -0,0 +1,12 @@\n+use crate::spec::Target;\n+use crate::{abi::Endian, spec::bpf_base};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"bpfeb\".to_string(),\n+        data_layout: \"E-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n+        pointer_width: 64,\n+        arch: \"bpfeb\".to_string(),\n+        options: bpf_base::opts(Endian::Big),\n+    }\n+}"}, {"sha": "92840306f898d00612d09a810e1d7f708df281b2", "filename": "compiler/rustc_target/src/spec/bpfel_unknown_none.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -0,0 +1,12 @@\n+use crate::spec::Target;\n+use crate::{abi::Endian, spec::bpf_base};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"bpfel\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n+        pointer_width: 64,\n+        arch: \"bpfel\".to_string(),\n+        options: bpf_base::opts(Endian::Little),\n+    }\n+}"}, {"sha": "52b0b64280268f62e4adbd6d011c8860f65e4d78", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -57,6 +57,7 @@ mod apple_base;\n mod apple_sdk_base;\n mod arm_base;\n mod avr_gnu_base;\n+mod bpf_base;\n mod dragonfly_base;\n mod freebsd_base;\n mod fuchsia_base;\n@@ -93,6 +94,7 @@ pub enum LinkerFlavor {\n     Msvc,\n     Lld(LldFlavor),\n     PtxLinker,\n+    BpfLinker,\n }\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n@@ -161,6 +163,7 @@ flavor_mappings! {\n     ((LinkerFlavor::Ld), \"ld\"),\n     ((LinkerFlavor::Msvc), \"msvc\"),\n     ((LinkerFlavor::PtxLinker), \"ptx-linker\"),\n+    ((LinkerFlavor::BpfLinker), \"bpf-linker\"),\n     ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n     ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n     ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n@@ -897,6 +900,9 @@ supported_targets! {\n     (\"aarch64_be-unknown-linux-gnu\", aarch64_be_unknown_linux_gnu),\n     (\"aarch64-unknown-linux-gnu_ilp32\", aarch64_unknown_linux_gnu_ilp32),\n     (\"aarch64_be-unknown-linux-gnu_ilp32\", aarch64_be_unknown_linux_gnu_ilp32),\n+\n+    (\"bpfeb-unknown-none\", bpfeb_unknown_none),\n+    (\"bpfel-unknown-none\", bpfel_unknown_none),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "3d35a32b3f1716996bfbdfdf0718211a31e26846", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -268,7 +268,9 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n \n     if builder.no_std(target) == Some(true) {\n         let mut features = \"compiler-builtins-mem\".to_string();\n-        features.push_str(compiler_builtins_c_feature);\n+        if !target.starts_with(\"bpf\") {\n+            features.push_str(compiler_builtins_c_feature);\n+        }\n \n         // for no-std targets we only compile a few no_std crates\n         cargo"}, {"sha": "49bbcb4d6129d4aa9b54af49301b5e75ae4d0480", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -236,7 +236,7 @@ impl Step for Llvm {\n             Some(s) => s,\n             None => {\n                 \"AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n-                     Sparc;SystemZ;WebAssembly;X86\"\n+                     Sparc;SystemZ;WebAssembly;X86;BPF\"\n             }\n         };\n "}, {"sha": "cd010b750aa7a94a321841338f5c42d841621298", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -306,5 +306,6 @@ pub fn use_host_linker(target: TargetSelection) -> bool {\n         || target.contains(\"wasm32\")\n         || target.contains(\"nvptx\")\n         || target.contains(\"fortanix\")\n-        || target.contains(\"fuchsia\"))\n+        || target.contains(\"fuchsia\")\n+        || target.contains(\"bpf\"))\n }"}, {"sha": "7d86d4b0acdbf0ab6ee5baa1f744cac0e6fb0ec4", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -234,6 +234,8 @@ flavor. Valid options are:\n * `ptx-linker`: use\n   [`rust-ptx-linker`](https://github.com/denzp/rust-ptx-linker) for Nvidia\n   NVPTX GPGPU support.\n+* `bpf-linker`: use\n+  [`bpf-linker`](https://github.com/alessandrod/bpf-linker) for eBPF support.\n * `wasm-ld`: use the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html)\n   executable, a port of LLVM `lld` for WebAssembly.\n * `ld64.lld`: use the LLVM `lld` executable with the [`-flavor darwin`"}, {"sha": "1e19b7b21d8bf0fe387029852b8afa4d6df12add", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -85,6 +85,8 @@ static TARGETS: &[&str] = &[\n     \"armv7r-none-eabihf\",\n     \"armv7s-apple-ios\",\n     \"asmjs-unknown-emscripten\",\n+    \"bpfeb-unknown-none\",\n+    \"bpfel-unknown-none\",\n     \"i386-apple-ios\",\n     \"i586-pc-windows-msvc\",\n     \"i586-unknown-linux-gnu\","}, {"sha": "f5095486d1a79bf799cec25d85307dba7987b08b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -1835,6 +1835,7 @@ impl<'test> TestCx<'test> {\n             || self.config.target.contains(\"nvptx\")\n             || self.is_vxworks_pure_static()\n             || self.config.target.contains(\"sgx\")\n+            || self.config.target.contains(\"bpf\")\n         {\n             // We primarily compile all auxiliary libraries as dynamic libraries\n             // to avoid code size bloat and large binaries as much as possible\n@@ -2310,6 +2311,10 @@ impl<'test> TestCx<'test> {\n                 // No extra flags needed.\n             }\n \n+            Some(\"bpf-linker\") => {\n+                rustc.arg(\"-Clink-args=--emit=asm\");\n+            }\n+\n             Some(_) => self.fatal(\"unknown 'assembly-output' header\"),\n             None => self.fatal(\"missing 'assembly-output' header\"),\n         }"}, {"sha": "238f4f7ae66588f60912f5495159b7e8eb4f0892", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e70929d66577f74cb6214bba5bf104e1f14aa2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=12e70929d66577f74cb6214bba5bf104e1f14aa2", "patch": "@@ -48,6 +48,8 @@ const ARCH_TABLE: &[(&str, &str)] = &[\n     (\"armv7s\", \"arm\"),\n     (\"asmjs\", \"asmjs\"),\n     (\"avr\", \"avr\"),\n+    (\"bpfeb\", \"bpfeb\"),\n+    (\"bpfel\", \"bpfel\"),\n     (\"hexagon\", \"hexagon\"),\n     (\"i386\", \"x86\"),\n     (\"i586\", \"x86\"),"}]}