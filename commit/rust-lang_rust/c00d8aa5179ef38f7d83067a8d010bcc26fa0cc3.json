{"sha": "c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMGQ4YWE1MTc5ZWYzOGY3ZDgzMDY3YThkMDEwYmNjMjZmYTBjYzM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2020-02-05T08:28:13Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2020-02-05T08:28:13Z"}, "message": "Reorder declarations of Result::export/unwrap to match Option", "tree": {"sha": "cc6b233e2980bfef35e4e80ce89bc17bbeab7a7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc6b233e2980bfef35e4e80ce89bc17bbeab7a7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3", "html_url": "https://github.com/rust-lang/rust/commit/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "html_url": "https://github.com/rust-lang/rust/commit/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "3361ab6c97d80f2b56ebcf31c9a11b129da50ce8", "filename": "src/libcore/result.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c00d8aa5179ef38f7d83067a8d010bcc26fa0cc3", "patch": "@@ -935,8 +935,8 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an [`Err`], with a panic message provided by the\n-    /// [`Err`]'s value.\n+    /// Panics if the value is an [`Err`], with a panic message including the\n+    /// passed message, and the content of the [`Err`].\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n@@ -945,31 +945,26 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     ///\n     /// Basic usage:\n     ///\n-    /// ```\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.unwrap(), 2);\n-    /// ```\n-    ///\n     /// ```{.should_panic}\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n-    /// x.unwrap(); // panics with `emergency failure`\n+    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap(self) -> T {\n+    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n+    pub fn expect(self, msg: &str) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n+            Err(e) => unwrap_failed(msg, &e),\n         }\n     }\n \n     /// Unwraps a result, yielding the content of an [`Ok`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an [`Err`], with a panic message including the\n-    /// passed message, and the content of the [`Err`].\n+    /// Panics if the value is an [`Err`], with a panic message provided by the\n+    /// [`Err`]'s value.\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n@@ -978,17 +973,22 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     ///\n     /// Basic usage:\n     ///\n+    /// ```\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.unwrap(), 2);\n+    /// ```\n+    ///\n     /// ```{.should_panic}\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n-    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n+    /// x.unwrap(); // panics with `emergency failure`\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n-    pub fn expect(self, msg: &str) -> T {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => unwrap_failed(msg, &e),\n+            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n         }\n     }\n }"}]}