{"sha": "b269ce278228918b95f803e1951fa60e3ef48a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjljZTI3ODIyODkxOGI5NWY4MDNlMTk1MWZhNjBlM2VmNDhhMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-07T01:48:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-07T01:48:39Z"}, "message": "auto merge of #5255 : jbclements/rust/remove-parse-value-ident, r=graydon\n\nAfter the removal of the \"restricted keyword\" feature in 0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29 , there's no longer any difference between parse_ident() and parse_value_ident(), and therefore no difference between parse parse_path_without_tps() and parse_value_path().  I've collapsed all of these, removing the redundant functions and eliminating the need for two higher-order arguments.", "tree": {"sha": "56effed36fd1ba26ae19bcd5f889dcf6582d6466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56effed36fd1ba26ae19bcd5f889dcf6582d6466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b269ce278228918b95f803e1951fa60e3ef48a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b269ce278228918b95f803e1951fa60e3ef48a0a", "html_url": "https://github.com/rust-lang/rust/commit/b269ce278228918b95f803e1951fa60e3ef48a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b269ce278228918b95f803e1951fa60e3ef48a0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c07479dd9c7a0438a749638987deb15977cd92", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c07479dd9c7a0438a749638987deb15977cd92", "html_url": "https://github.com/rust-lang/rust/commit/95c07479dd9c7a0438a749638987deb15977cd92"}, {"sha": "8bb537e68daf2a2794bacfe4bd39ac7fad6314fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa", "html_url": "https://github.com/rust-lang/rust/commit/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "e75bff3fec2a032cb8a37e6d408ef1b1cd2110b8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b269ce278228918b95f803e1951fa60e3ef48a0a", "patch": "@@ -105,6 +105,10 @@ pub struct Lifetime {\n     ident: ident\n }\n \n+// a \"Path\" is essentially Rust's notion of a name;\n+// for instance: core::cmp::Eq  .  It's represented\n+// as a sequence of identifiers, along with a bunch\n+// of supporting information.\n #[auto_encode]\n #[auto_decode]\n #[deriving_eq]"}, {"sha": "589b7693f9e3a4d5ea66cacdaa9a60d59d452fe1", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=b269ce278228918b95f803e1951fa60e3ef48a0a", "patch": "@@ -36,6 +36,7 @@ struct TtFrame {\n pub struct TtReader {\n     sp_diag: span_handler,\n     interner: @ident_interner,\n+    // the unzipped tree:\n     cur: @mut TtFrame,\n     /* for MBE-style macro transcription */\n     interpolations: std::oldmap::HashMap<ident, @named_match>,"}, {"sha": "7af2204fafd099333884073c8ad1d5407c0619d2", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=b269ce278228918b95f803e1951fa60e3ef48a0a", "patch": "@@ -119,10 +119,6 @@ pub impl Parser {\n                                                 id: self.get_id() })\n     }\n \n-    fn parse_value_ident(&self) -> ast::ident {\n-        return self.parse_ident();\n-    }\n-\n     // consume token 'tok' if it exists. Returns true if the given\n     // token was present, false otherwise.\n     fn eat(&self, tok: &token::Token) -> bool {"}, {"sha": "eb9831cd9f3d3dae6c66c7752290de3e6569465d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b269ce278228918b95f803e1951fa60e3ef48a0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b269ce278228918b95f803e1951fa60e3ef48a0a", "patch": "@@ -457,7 +457,7 @@ pub impl Parser {\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n-            let ident = p.parse_method_name();\n+            let ident = p.parse_ident();\n \n             let generics = p.parse_generics();\n \n@@ -899,16 +899,9 @@ pub impl Parser {\n         codemap::spanned { node: lit, span: mk_sp(lo, self.last_span.hi) }\n     }\n \n-    fn parse_path_without_tps(&self) -> @path {\n-        self.parse_path_without_tps_(|p| p.parse_ident(),\n-                                     |p| p.parse_ident())\n-    }\n-\n-    fn parse_path_without_tps_(\n-        &self,\n-        parse_ident: fn(&Parser) -> ident,\n-        parse_last_ident: fn(&Parser) -> ident\n-    ) -> @path {\n+    // parse a path that doesn't have type parameters attached\n+    fn parse_path_without_tps(&self)\n+        -> @ast::path {\n         maybe_whole!(self, nt_path);\n         let lo = self.span.lo;\n         let global = self.eat(&token::MOD_SEP);\n@@ -919,10 +912,10 @@ pub impl Parser {\n                 && self.look_ahead(1u) == token::MOD_SEP;\n \n             if is_not_last {\n-                ids.push(parse_ident(self));\n+                ids.push(self.parse_ident());\n                 self.expect(&token::MOD_SEP);\n             } else {\n-                ids.push(parse_last_ident(self));\n+                ids.push(self.parse_ident());\n                 break;\n             }\n         }\n@@ -933,12 +926,7 @@ pub impl Parser {\n                      types: ~[] }\n     }\n \n-    fn parse_value_path(&self) -> @path {\n-        self.parse_path_without_tps_(|p| p.parse_ident(),\n-                                     |p| p.parse_value_ident())\n-    }\n-\n-    fn parse_path_with_tps(&self, colons: bool) -> @path {\n+    fn parse_path_with_tps(&self, colons: bool) -> @ast::path {\n         debug!(\"parse_path_with_tps(colons=%b)\", colons);\n \n         maybe_whole!(self, nt_path);\n@@ -2134,11 +2122,7 @@ pub impl Parser {\n             }\n \n             let lo1 = self.last_span.lo;\n-            let fieldname = if self.look_ahead(1u) == token::COLON {\n-                self.parse_ident()\n-            } else {\n-                self.parse_value_ident()\n-            };\n+            let fieldname = self.parse_ident();\n             let hi1 = self.last_span.lo;\n             let fieldpath = ast_util::ident_to_path(mk_sp(lo1, hi1),\n                                                     fieldname);\n@@ -2302,7 +2286,7 @@ pub impl Parser {\n                 }\n \n                 if is_plain_ident(&*self.token) && cannot_be_enum_or_struct {\n-                    let name = self.parse_value_path();\n+                    let name = self.parse_path_without_tps();\n                     let sub;\n                     if self.eat(&token::AT) {\n                         sub = Some(self.parse_pat(refutable));\n@@ -2375,7 +2359,7 @@ pub impl Parser {\n                 *self.last_span,\n                 ~\"expected identifier, found path\");\n         }\n-        let name = self.parse_value_path();\n+        let name = self.parse_path_without_tps();\n         let sub = if self.eat(&token::AT) {\n             Some(self.parse_pat(refutable))\n         } else { None };\n@@ -2473,7 +2457,7 @@ pub impl Parser {\n \n             // Potential trouble: if we allow macros with paths instead of\n             // idents, we'd need to look ahead past the whole path here...\n-            let pth = self.parse_value_path();\n+            let pth = self.parse_path_without_tps();\n             self.bump();\n \n             let id = if *self.token == token::LPAREN {\n@@ -2982,7 +2966,7 @@ pub impl Parser {\n     }\n \n     fn parse_fn_header(&self) -> (ident, ast::Generics) {\n-        let id = self.parse_value_ident();\n+        let id = self.parse_ident();\n         let generics = self.parse_generics();\n         (id, generics)\n     }\n@@ -3005,10 +2989,6 @@ pub impl Parser {\n         (ident, item_fn(decl, purity, generics, body), Some(inner_attrs))\n     }\n \n-    fn parse_method_name(&self) -> ident {\n-        self.parse_value_ident()\n-    }\n-\n     fn parse_method(&self) -> @method {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n@@ -3018,7 +2998,7 @@ pub impl Parser {\n \n         let visa = self.parse_visibility();\n         let pur = self.parse_fn_purity();\n-        let ident = self.parse_method_name();\n+        let ident = self.parse_ident();\n         let generics = self.parse_generics();\n         let (self_ty, decl) = do self.parse_fn_decl_with_self() |p| {\n             p.parse_arg()\n@@ -3142,7 +3122,7 @@ pub impl Parser {\n     }\n \n     fn parse_item_struct(&self) -> item_info {\n-        let class_name = self.parse_value_ident();\n+        let class_name = self.parse_ident();\n         self.parse_region_param();\n         let generics = self.parse_generics();\n         if self.eat(&token::COLON) {\n@@ -3370,7 +3350,7 @@ pub impl Parser {\n     }\n \n     fn parse_item_const(&self) -> item_info {\n-        let id = self.parse_value_ident();\n+        let id = self.parse_ident();\n         self.expect(&token::COLON);\n         let ty = self.parse_ty(false);\n         self.expect(&token::EQ);\n@@ -3768,7 +3748,7 @@ pub impl Parser {\n                 kind = enum_variant_kind(nested_enum_def);\n                 needs_comma = false;\n             } else {\n-                ident = self.parse_value_ident();\n+                ident = self.parse_ident();\n                 if self.eat(&token::LBRACE) {\n                     // Parse a struct variant.\n                     all_nullary = false;"}]}