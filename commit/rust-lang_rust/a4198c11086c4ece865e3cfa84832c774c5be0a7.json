{"sha": "a4198c11086c4ece865e3cfa84832c774c5be0a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MTk4YzExMDg2YzRlY2U4NjVlM2NmYTg0ODMyYzc3NGM1YmUwYTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-10-03T16:45:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-03T16:45:23Z"}, "message": "Merge pull request #1255 from Manishearth/cov\n\nImprove test coverage", "tree": {"sha": "4c73ca3ad08adace9e2654b19c77b47a41789b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c73ca3ad08adace9e2654b19c77b47a41789b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4198c11086c4ece865e3cfa84832c774c5be0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4198c11086c4ece865e3cfa84832c774c5be0a7", "html_url": "https://github.com/rust-lang/rust/commit/a4198c11086c4ece865e3cfa84832c774c5be0a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4198c11086c4ece865e3cfa84832c774c5be0a7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d003416a2a41c8aaab46a1a0ef2d5d3aed2e2dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d003416a2a41c8aaab46a1a0ef2d5d3aed2e2dc", "html_url": "https://github.com/rust-lang/rust/commit/8d003416a2a41c8aaab46a1a0ef2d5d3aed2e2dc"}, {"sha": "6800111c8edcaaf705f16a8b2f4b0497eeea1c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6800111c8edcaaf705f16a8b2f4b0497eeea1c52", "html_url": "https://github.com/rust-lang/rust/commit/6800111c8edcaaf705f16a8b2f4b0497eeea1c52"}], "stats": {"total": 240, "additions": 194, "deletions": 46}, "files": [{"sha": "19149671e5b07b3dfdd571355024ec4b4e51a61e", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -54,27 +54,16 @@ pub enum Constant {\n }\n \n impl Constant {\n-    /// convert to u64 if possible\n+    /// Convert to `u64` if possible.\n     ///\n     /// # panics\n     ///\n-    /// if the constant could not be converted to u64 losslessly\n+    /// If the constant could not be converted to `u64` losslessly.\n     fn as_u64(&self) -> u64 {\n         if let Constant::Int(val) = *self {\n-            val.to_u64().expect(\"negative constant can't be casted to u64\")\n+            val.to_u64().expect(\"negative constant can't be casted to `u64`\")\n         } else {\n-            panic!(\"Could not convert a {:?} to u64\", self);\n-        }\n-    }\n-\n-    /// convert this constant to a f64, if possible\n-    #[allow(cast_precision_loss, cast_possible_wrap)]\n-    pub fn as_float(&self) -> Option<f64> {\n-        match *self {\n-            Constant::Float(ref s, _) => s.parse().ok(),\n-            Constant::Int(i) if i.is_negative() => Some(i.to_u64_unchecked() as i64 as f64),\n-            Constant::Int(i) => Some(i.to_u64_unchecked() as f64),\n-            _ => None,\n+            panic!(\"Could not convert a `{:?}` to `u64`\", self);\n         }\n     }\n }"}, {"sha": "a6e40bd05c06a196446fa914b43168d34ed6d948", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -81,7 +81,7 @@ pub fn get_argument_fmtstr_parts<'a, 'b>(cx: &LateContext<'a, 'b>, expr: &'a Exp\n         let Some(NodeItem(decl)) = cx.tcx.map.find(decl.id),\n         decl.name.as_str() == \"__STATIC_FMTSTR\",\n         let ItemStatic(_, _, ref expr) = decl.node,\n-        let ExprAddrOf(_, ref expr) = expr.node, // &[\"\"]\n+        let ExprAddrOf(_, ref expr) = expr.node, // &[\"\u2026\", \"\u2026\", \u2026]\n         let ExprVec(ref exprs) = expr.node,\n     ], {\n         let mut result = Vec::new();\n@@ -99,7 +99,7 @@ pub fn get_argument_fmtstr_parts<'a, 'b>(cx: &LateContext<'a, 'b>, expr: &'a Exp\n \n /// Checks if the expressions matches\n /// ```rust\n-/// { static __STATIC_FMTSTR: &[\"\"] = _; __STATIC_FMTSTR }\n+/// { static __STATIC_FMTSTR: \u2026 = &[\"\u2026\", \"\u2026\", \u2026]; __STATIC_FMTSTR }\n /// ```\n fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n     if let Some(expr) = get_argument_fmtstr_parts(cx, expr) {"}, {"sha": "2794cd14304b3f0e960f89f0afa8c0d3e082005e", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -262,7 +262,7 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, pattern_span: Span,\n         span_lint_and_then(cx,\n                            SHADOW_UNRELATED,\n                            span,\n-                           &format!(\"{} shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n+                           &format!(\"`{}` shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n                            |db| { db.span_note(prev_span, \"previous binding is here\"); });\n     }\n }"}, {"sha": "bb9d0583ab1c6e4c3a4fb09bbbb1c0582f8097e0", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -37,8 +37,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         match (&left.node, &right.node) {\n             (&StmtDecl(ref l, _), &StmtDecl(ref r, _)) => {\n                 if let (&DeclLocal(ref l), &DeclLocal(ref r)) = (&l.node, &r.node) {\n-                    // TODO: tys\n-                    l.ty.is_none() && r.ty.is_none() && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n+                    both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) &&\n+                    both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                 } else {\n                     false\n                 }\n@@ -85,7 +85,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprCall(ref l_fun, ref l_args), &ExprCall(ref r_fun, ref r_args)) => {\n                 !self.ignore_fn && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             }\n-            (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) => self.eq_expr(lx, rx) && self.eq_ty(lt, rt),\n+            (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) |\n+            (&ExprType(ref lx, ref lt), &ExprType(ref rx, ref rt)) => {\n+                self.eq_expr(lx, rx) && self.eq_ty(lt, rt)\n+            }\n             (&ExprField(ref l_f_exp, ref l_f_ident), &ExprField(ref r_f_exp, ref r_f_ident)) => {\n                 l_f_ident.node == r_f_ident.node && self.eq_expr(l_f_exp, r_f_exp)\n             }\n@@ -106,8 +109,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             }\n             (&ExprMethodCall(ref l_name, ref l_tys, ref l_args),\n              &ExprMethodCall(ref r_name, ref r_tys, ref r_args)) => {\n-                // TODO: tys\n-                !self.ignore_fn && l_name.node == r_name.node && l_tys.is_empty() && r_tys.is_empty() &&\n+                !self.ignore_fn && l_name.node == r_name.node &&\n+                over(l_tys, r_tys, |l, r| self.eq_ty(l, r)) &&\n                 self.eq_exprs(l_args, r_args)\n             }\n             (&ExprRepeat(ref le, ref ll), &ExprRepeat(ref re, ref rl)) => self.eq_expr(le, re) && self.eq_expr(ll, rl),\n@@ -138,6 +141,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         left.name.node == right.name.node && self.eq_expr(&left.expr, &right.expr)\n     }\n \n+    fn eq_lifetime(&self, left: &Lifetime, right: &Lifetime) -> bool {\n+        left.name == right.name\n+    }\n+\n     /// Check whether two patterns are the same.\n     pub fn eq_pat(&self, left: &Pat, right: &Pat) -> bool {\n         match (&left.node, &right.node) {\n@@ -169,12 +176,33 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     }\n \n     fn eq_path(&self, left: &Path, right: &Path) -> bool {\n+        left.global == right.global &&\n+        over(&left.segments, &right.segments, |l, r| self.eq_path_segment(l, r))\n+    }\n+\n+    fn eq_path_parameters(&self, left: &PathParameters, right: &PathParameters) -> bool {\n+        match (left, right) {\n+            (&AngleBracketedParameters(ref left), &AngleBracketedParameters(ref right)) => {\n+                over(&left.lifetimes, &right.lifetimes, |l, r| self.eq_lifetime(l, r)) &&\n+                over(&left.types, &right.types, |l, r| self.eq_ty(l, r)) &&\n+                over(&left.bindings, &right.bindings, |l, r| self.eq_type_binding(l, r))\n+            }\n+            (&ParenthesizedParameters(ref left), &ParenthesizedParameters(ref right)) => {\n+                over(&left.inputs, &right.inputs, |l, r| self.eq_ty(l, r)) &&\n+                both(&left.output, &right.output, |l, r| self.eq_ty(l, r))\n+            }\n+            (&AngleBracketedParameters(_), &ParenthesizedParameters(_)) |\n+            (&ParenthesizedParameters(_), &AngleBracketedParameters(_)) => {\n+                false\n+            }\n+        }\n+    }\n+\n+    fn eq_path_segment(&self, left: &PathSegment, right: &PathSegment) -> bool {\n         // The == of idents doesn't work with different contexts,\n         // we have to be explicit about hygiene\n-        left.global == right.global &&\n-        over(&left.segments,\n-             &right.segments,\n-             |l, r| l.name.as_str() == r.name.as_str() && l.parameters == r.parameters)\n+        left.name.as_str() == right.name.as_str() &&\n+        self.eq_path_parameters(&left.parameters, &right.parameters)\n     }\n \n     fn eq_qself(&self, left: &QSelf, right: &QSelf) -> bool {\n@@ -199,6 +227,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             _ => false,\n         }\n     }\n+\n+    fn eq_type_binding(&self, left: &TypeBinding, right: &TypeBinding) -> bool {\n+        left.name == right.name && self.eq_ty(&left.ty, &right.ty)\n+    }\n }\n \n fn swap_binop<'a>(binop: BinOp_, lhs: &'a Expr, rhs: &'a Expr) -> Option<(BinOp_, &'a Expr, &'a Expr)> {\n@@ -445,10 +477,11 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(le);\n                 li.node.hash(&mut self.s);\n             }\n-            ExprType(_, _) => {\n+            ExprType(ref e, ref _ty) => {\n                 let c: fn(_, _) -> _ = ExprType;\n                 c.hash(&mut self.s);\n-                // what\u2019s an ExprType anyway?\n+                self.hash_expr(e);\n+                // TODO: _ty\n             }\n             ExprUnary(lop, ref le) => {\n                 let c: fn(_, _) -> _ = ExprUnary;\n@@ -495,10 +528,15 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_stmt(&mut self, b: &Stmt) {\n         match b.node {\n-            StmtDecl(ref _decl, _) => {\n+            StmtDecl(ref decl, _) => {\n                 let c: fn(_, _) -> _ = StmtDecl;\n                 c.hash(&mut self.s);\n-                // TODO: decl\n+\n+                if let DeclLocal(ref local) = decl.node {\n+                    if let Some(ref init) = local.init {\n+                        self.hash_expr(init);\n+                    }\n+                }\n             }\n             StmtExpr(ref expr, _) => {\n                 let c: fn(_, _) -> _ = StmtExpr;"}, {"sha": "6abe5a3bbc2737feba84d51919176142eb8c7fd4", "filename": "tests/aux/conf_french_blacklisted_name.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Faux%2Fconf_french_blacklisted_name.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Faux%2Fconf_french_blacklisted_name.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Faux%2Fconf_french_blacklisted_name.toml?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "previous_filename": "tests/compile-fail/conf_french_blacklisted_name.toml"}, {"sha": "554b87cc50be176bd8cb1920fbc26b11d0e557a0", "filename": "tests/aux/conf_unknown_key.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Faux%2Fconf_unknown_key.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Faux%2Fconf_unknown_key.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Faux%2Fconf_unknown_key.toml?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "previous_filename": "tests/compile-fail/conf_unknown_key.toml"}, {"sha": "9f87de20baff36866965bccd7c4ef87774789645", "filename": "tests/aux/conf_whitelisted.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Faux%2Fconf_whitelisted.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Faux%2Fconf_whitelisted.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Faux%2Fconf_whitelisted.toml?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "previous_filename": "tests/run-pass/conf_unknown_key.toml"}, {"sha": "c69144fe292045106ba9c8f6c7296839840768aa", "filename": "tests/compile-fail/array_indexing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     &x[1..5]; //~ERROR: range is out of bounds\n     &x[0..3];\n     &x[0...4]; //~ERROR: range is out of bounds\n+    &x[...4]; //~ERROR: range is out of bounds\n     &x[..];\n     &x[1..];\n     &x[4..];\n@@ -26,15 +27,18 @@ fn main() {\n     &y[1..2]; //~ERROR: slicing may panic\n     &y[..];\n     &y[0...4]; //~ERROR: slicing may panic\n+    &y[...4]; //~ERROR: slicing may panic\n \n     let empty: [i8; 0] = [];\n     empty[0]; //~ERROR: const index is out of bounds\n     &empty[1..5]; //~ERROR: range is out of bounds\n     &empty[0...4]; //~ERROR: range is out of bounds\n+    &empty[...4]; //~ERROR: range is out of bounds\n     &empty[..];\n     &empty[0..];\n     &empty[0..0];\n     &empty[0...0]; //~ERROR: range is out of bounds\n+    &empty[...0]; //~ERROR: range is out of bounds\n     &empty[..0];\n     &empty[1..]; //~ERROR: range is out of bounds\n     &empty[..4]; //~ERROR: range is out of bounds"}, {"sha": "b5ea6d96ef58a5be9dafcb54b158bc3b4af272d8", "filename": "tests/compile-fail/conf_bad_toml.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_bad_toml.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: error reading Clippy's configuration file\n+\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_bad_toml.toml\"))]\n+\n+fn main() {}"}, {"sha": "823e01a33b96172e13855c6c023599f2852e71f9", "filename": "tests/compile-fail/conf_bad_toml.toml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_toml.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_toml.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_bad_toml.toml?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -0,0 +1,2 @@\n+fn this_is_obviously(not: a, toml: file) {\n+}"}, {"sha": "8dc3e4ec2e675c61c5c8bffa38b4521db5cdb4a6", "filename": "tests/compile-fail/conf_bad_type.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_bad_type.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a `Vec < String >` but is a `integer`\n+\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_bad_type.toml\"))]\n+\n+fn main() {}"}, {"sha": "168675394d7f45124940fcfa3433aab378c1fbd8", "filename": "tests/compile-fail/conf_bad_type.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_type.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_bad_type.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_bad_type.toml?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -0,0 +1 @@\n+blacklisted-names = 42"}, {"sha": "716b338e1a4382432c729de1676ada03044509a3", "filename": "tests/compile-fail/conf_french_blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_french_blacklisted_name.toml\"))]\n+#![plugin(clippy(conf_file=\"./tests/aux/conf_french_blacklisted_name.toml\"))]\n \n #![allow(dead_code)]\n #![allow(single_match)]"}, {"sha": "0a31fb16147b4edc59535584fc4697ee838940b5", "filename": "tests/compile-fail/conf_non_existant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_non_existant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_non_existant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_non_existant.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file\n \n #![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/compile-fail/non_existant_conf.toml\"))]\n+#![plugin(clippy(conf_file=\"./tests/aux/non_existant_conf.toml\"))]\n \n fn main() {}"}, {"sha": "f26f581f5c014d1e8b710a4ba9ec0f838623d062", "filename": "tests/compile-fail/conf_path_non_string.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_path_non_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_path_non_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_path_non_string.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -0,0 +1,6 @@\n+#![feature(attr_literals)]\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=42))]\n+//~^ ERROR `conf_file` value must be a string\n+\n+fn main() {}"}, {"sha": "e6041d8ed1c36680564f907768ef35ae4479b8a8", "filename": "tests/compile-fail/conf_unknown_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_unknown_key.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file: unknown key `foobar`\n \n #![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_unknown_key.toml\"))]\n+#![plugin(clippy(conf_file=\"./tests/aux/conf_unknown_key.toml\"))]\n \n fn main() {}"}, {"sha": "dba653a148ffcc5832f2c72f4f3145086823385b", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -48,6 +48,13 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         Foo { bar: 43 };\n     }\n \n+    if true {\n+        ();\n+    }\n+    else {\n+        ()\n+    }\n+\n     if true {\n         0..10;\n     }\n@@ -63,14 +70,27 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         foo();\n     }\n \n-    let _ = if true {\n-        //~^NOTE same as this\n-        foo();\n-        42\n-    }\n-    else { //~ERROR this `if` has identical blocks\n-        foo();\n-        42\n+    let _ = match 42 {\n+        42 => {\n+            //~^ NOTE same as this\n+            //~| NOTE refactoring\n+            foo();\n+            let mut a = 42 + [23].len() as i32;\n+            if true {\n+                a += 7;\n+            }\n+            a = -31-a;\n+            a\n+        }\n+        _ => { //~ERROR this `match` has identical arm bodies\n+            foo();\n+            let mut a = 42 + [23].len() as i32;\n+            if true {\n+                a += 7;\n+            }\n+            a = -31-a;\n+            a\n+        }\n     };\n \n     if true {\n@@ -85,6 +105,28 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         42\n     };\n \n+    if true {\n+        //~^NOTE same as this\n+        for _ in &[42] {\n+            let foo: &Option<_> = &Some::<u8>(42);\n+            if true {\n+                break;\n+            } else {\n+                continue;\n+            }\n+        }\n+    }\n+    else { //~ERROR this `if` has identical blocks\n+        for _ in &[42] {\n+            let foo: &Option<_> = &Some::<u8>(42);\n+            if true {\n+                break;\n+            } else {\n+                continue;\n+            }\n+        }\n+    }\n+\n     if true {\n         //~^NOTE same as this\n         let bar = if true {\n@@ -167,6 +209,20 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         if let (.., 1, 3) = (1, 2, 3) {}\n     }\n \n+    if true {\n+        if let Some(42) = None {}\n+    }\n+    else {\n+        if let Option::Some(42) = None {}\n+    }\n+\n+    if true {\n+        if let Some(42) = None::<u8> {}\n+    }\n+    else {\n+        if let Some(42) = None {}\n+    }\n+\n     if true {\n         if let Some(a) = Some(42) {}\n     }"}, {"sha": "bf0bdd81863203d4d5b4c86cb29f65ad0e4f09cf", "filename": "tests/compile-fail/shadow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Fcompile-fail%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshadow.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -20,6 +20,9 @@ fn main() {\n     let y = 1;\n     let x = y; //~ERROR `x` is shadowed by `y`\n \n+    let x; //~ERROR `x` shadows a previous declaration\n+    x = 42;\n+\n     let o = Some(1_u8);\n \n     if let Some(p) = o { assert_eq!(1, p); }"}, {"sha": "bb186d476300ef39a3f8b828470ed11b4a7f3504", "filename": "tests/run-pass/conf_unknown_key.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d003416a2a41c8aaab46a1a0ef2d5d3aed2e2dc/tests%2Frun-pass%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d003416a2a41c8aaab46a1a0ef2d5d3aed2e2dc/tests%2Frun-pass%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconf_unknown_key.rs?ref=8d003416a2a41c8aaab46a1a0ef2d5d3aed2e2dc", "patch": "@@ -1,4 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/run-pass/conf_unknown_key.toml\"))]\n-\n-fn main() {}"}, {"sha": "9b4bb4155d3f8fccdaa83effd501a3e86f172de9", "filename": "tests/run-pass/conf_whitelisted.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Frun-pass%2Fconf_whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/tests%2Frun-pass%2Fconf_whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconf_whitelisted.rs?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -0,0 +1,4 @@\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=\"./tests/aux/conf_whitelisted.toml\"))]\n+\n+fn main() {}"}, {"sha": "3f9a6b06f7255d4aaa201a129c895de2e588f326", "filename": "util/cov.sh", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a4198c11086c4ece865e3cfa84832c774c5be0a7/util%2Fcov.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a4198c11086c4ece865e3cfa84832c774c5be0a7/util%2Fcov.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fcov.sh?ref=a4198c11086c4ece865e3cfa84832c774c5be0a7", "patch": "@@ -0,0 +1,37 @@\n+#!/usr/bin/bash\n+\n+# This run `kcov` on Clippy. The coverage report will be at\n+# `./target/cov/index.html`.\n+# `compile-test` is special. `kcov` does not work directly on it so these files\n+# are compiled manually.\n+\n+tests=$(find tests/ -maxdepth 1 -name '*.rs' ! -name compile-test.rs -exec basename {} .rs \\;)\n+tmpdir=$(mktemp -d)\n+\n+cargo test --no-run --verbose\n+\n+for t in $tests; do\n+  kcov \\\n+    --verify \\\n+    --include-path=\"$(pwd)/src,$(pwd)/clippy_lints/src\" \\\n+    \"$tmpdir/$t\" \\\n+    cargo test --test \"$t\"\n+done\n+\n+for t in ./tests/compile-fail/*.rs; do\n+  kcov \\\n+    --verify \\\n+    --include-path=\"$(pwd)/src,$(pwd)/clippy_lints/src\" \\\n+    \"$tmpdir/compile-fail-$(basename \"$t\")\" \\\n+    cargo run -- -L target/debug -L target/debug/deps -Z no-trans \"$t\"\n+done\n+\n+for t in ./tests/run-pass/*.rs; do\n+  kcov \\\n+    --verify \\\n+    --include-path=\"$(pwd)/src,$(pwd)/clippy_lints/src\" \\\n+    \"$tmpdir/run-pass-$(basename \"$t\")\" \\\n+    cargo run -- -L target/debug -L target/debug/deps -Z no-trans \"$t\"\n+done\n+\n+kcov --verify --merge target/cov \"$tmpdir\"/*"}]}