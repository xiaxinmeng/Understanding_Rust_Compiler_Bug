{"sha": "7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNWZkMWYzZjNjNGE4ZjY0NDA3ZjliZDA4YTNkNWU3Zjc5NDE3ZTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-20T17:39:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-20T17:39:00Z"}, "message": "Merge #2328\n\n2328: Move generic_params query to HIR r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5a16aa6fbc213909a5d7be3c852fa2a6b9c62299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a16aa6fbc213909a5d7be3c852fa2a6b9c62299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1Xo0CRBK7hj4Ov3rIwAAdHIIAIuoixMEhjwqy1GFuktta+zW\nnMkyiia7zdS9UEDiI0UpikjXupNdR6JbOIXCdfU8w5FauD/03as9kFI0wXWwJFGW\njPcSRMsoral/aXY3J2OYqZSbHjZkm8SN0VBPYOmSbEUFeLd+fGPaUz4uXMILctvP\nl0+r/x/BeZvwSiJWPTnCQ1/XqNw0TYbGPmHnRf+RIvf317mB4+dfuo8+I7hc2Uh/\nRp8ZiQQO4DYN8ZdgIQfgrAZKcFh14ay/5c6LUK3K+DgnjS4Xgo05EBGqjWloHOQM\nBTmssf2BLhJKOWbbU/i92RBToJGJnm+B43St4mGiEcEZIeHPb5NfsaHmbs7CgNc=\n=Kb78\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a16aa6fbc213909a5d7be3c852fa2a6b9c62299\nparent c51dcb1c4bdd71f9f17de508bd0d47e3c06ae1d5\nparent cb642fc578100c0945088accb85acb8f03d2e1fd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574271540 +0000\ncommitter GitHub <noreply@github.com> 1574271540 +0000\n\nMerge #2328\n\n2328: Move generic_params query to HIR r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "html_url": "https://github.com/rust-lang/rust/commit/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51dcb1c4bdd71f9f17de508bd0d47e3c06ae1d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51dcb1c4bdd71f9f17de508bd0d47e3c06ae1d5", "html_url": "https://github.com/rust-lang/rust/commit/c51dcb1c4bdd71f9f17de508bd0d47e3c06ae1d5"}, {"sha": "cb642fc578100c0945088accb85acb8f03d2e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb642fc578100c0945088accb85acb8f03d2e1fd", "html_url": "https://github.com/rust-lang/rust/commit/cb642fc578100c0945088accb85acb8f03d2e1fd"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "a9982a70f6d5e96416d17aeb8e610f0696246300", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::SmolStr;\n \n use crate::{\n     debug::HirDebugDatabase,\n-    generics::{GenericDef, GenericParams},\n+    generics::GenericDef,\n     ids,\n     lang_item::{LangItemTarget, LangItems},\n     ty::{\n@@ -24,8 +24,9 @@ use crate::{\n \n pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, CrateDefMapQuery, DefDatabase2, DefDatabase2Storage,\n-    EnumDataQuery, ExprScopesQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n-    RawItemsQuery, RawItemsWithSourceMapQuery, StructDataQuery, TraitDataQuery,\n+    EnumDataQuery, ExprScopesQuery, GenericParamsQuery, ImplDataQuery, InternDatabase,\n+    InternDatabaseStorage, RawItemsQuery, RawItemsWithSourceMapQuery, StructDataQuery,\n+    TraitDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -36,9 +37,6 @@ pub use hir_expand::db::{\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n-    #[salsa::invoke(crate::generics::generic_params_query)]\n-    fn generic_params(&self, def: GenericDef) -> Arc<GenericParams>;\n-\n     #[salsa::invoke(FnData::fn_data_query)]\n     fn fn_data(&self, func: Function) -> Arc<FnData>;\n "}, {"sha": "54ed03642a0c86e3d8b465db65b33ffe9cab1e3e", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "patch": "@@ -2,7 +2,7 @@\n use std::sync::Arc;\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{DefDatabase, HirDatabase},\n     Adt, Const, Container, Enum, EnumVariant, Function, ImplBlock, Struct, Trait, TypeAlias, Union,\n };\n \n@@ -31,21 +31,6 @@ impl_froms!(\n     Const\n );\n \n-pub(crate) fn generic_params_query(\n-    db: &(impl DefDatabase + AstDatabase),\n-    def: GenericDef,\n-) -> Arc<GenericParams> {\n-    let parent = match def {\n-        GenericDef::Function(it) => it.container(db).map(GenericDef::from),\n-        GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n-        GenericDef::Const(it) => it.container(db).map(GenericDef::from),\n-        GenericDef::EnumVariant(it) => Some(it.parent_enum(db).into()),\n-        GenericDef::Adt(_) | GenericDef::Trait(_) => None,\n-        GenericDef::ImplBlock(_) => None,\n-    };\n-    Arc::new(GenericParams::new(db, def.into(), parent.map(|it| db.generic_params(it))))\n-}\n-\n impl GenericDef {\n     pub(crate) fn resolver(&self, db: &impl HirDatabase) -> crate::Resolver {\n         match self {\n@@ -78,6 +63,6 @@ where\n     T: Into<GenericDef> + Copy,\n {\n     fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params(self.into())\n+        db.generic_params(self.into().into())\n     }\n }"}, {"sha": "844f8bbe88bab24df14e069a695509ea95b3b83f", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "patch": "@@ -8,13 +8,14 @@ use ra_syntax::ast;\n use crate::{\n     adt::{EnumData, StructData},\n     body::{scope::ExprScopes, Body, BodySourceMap},\n+    generics::GenericParams,\n     impls::ImplData,\n     nameres::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n     traits::TraitData,\n-    DefWithBodyId, EnumId, ImplId, ItemLoc, StructOrUnionId, TraitId,\n+    DefWithBodyId, EnumId, GenericDefId, ImplId, ItemLoc, StructOrUnionId, TraitId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -71,4 +72,7 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n \n     #[salsa::invoke(ExprScopes::expr_scopes_query)]\n     fn expr_scopes(&self, def: DefWithBodyId) -> Arc<ExprScopes>;\n+\n+    #[salsa::invoke(GenericParams::generic_params_query)]\n+    fn generic_params(&self, def: GenericDefId) -> Arc<GenericParams>;\n }"}, {"sha": "f794eefbcdcd2fd2afc745fff3111ea3ae429a23", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=7a5fd1f3f3c4a8f64407f9bd08a3d5e7f79417e0", "patch": "@@ -5,13 +5,12 @@\n use std::sync::Arc;\n \n use hir_expand::name::{self, AsName, Name};\n-\n use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n     db::DefDatabase2,\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, GenericDefId, HasSource, Lookup,\n+    AdtId, AstItemDef, ContainerId, GenericDefId, HasSource, Lookup,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -43,7 +42,15 @@ pub struct WherePredicate {\n }\n \n impl GenericParams {\n-    pub fn new(\n+    pub(crate) fn generic_params_query(\n+        db: &impl DefDatabase2,\n+        def: GenericDefId,\n+    ) -> Arc<GenericParams> {\n+        let parent_generics = parent_generic_def(db, def).map(|it| db.generic_params(it));\n+        Arc::new(GenericParams::new(db, def.into(), parent_generics))\n+    }\n+\n+    fn new(\n         db: &impl DefDatabase2,\n         def: GenericDefId,\n         parent_params: Option<Arc<GenericParams>>,\n@@ -161,3 +168,19 @@ impl GenericParams {\n         vec\n     }\n }\n+\n+fn parent_generic_def(db: &impl DefDatabase2, def: GenericDefId) -> Option<GenericDefId> {\n+    let container = match def {\n+        GenericDefId::FunctionId(it) => it.lookup(db).container,\n+        GenericDefId::TypeAliasId(it) => it.lookup(db).container,\n+        GenericDefId::ConstId(it) => it.lookup(db).container,\n+        GenericDefId::EnumVariantId(it) => return Some(it.parent.into()),\n+        GenericDefId::AdtId(_) | GenericDefId::TraitId(_) | GenericDefId::ImplId(_) => return None,\n+    };\n+\n+    match container {\n+        ContainerId::ImplId(it) => Some(it.into()),\n+        ContainerId::TraitId(it) => Some(it.into()),\n+        ContainerId::ModuleId(_) => None,\n+    }\n+}"}]}