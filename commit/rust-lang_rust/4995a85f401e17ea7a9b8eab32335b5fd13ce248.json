{"sha": "4995a85f401e17ea7a9b8eab32335b5fd13ce248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OTVhODVmNDAxZTE3ZWE3YTliOGVhYjMyMzM1YjVmZDEzY2UyNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T01:46:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T01:46:53Z"}, "message": "auto merge of #12448 : alexcrichton/rust/smaller-rust, r=brson\n\nTwo optimizations:\r\n\r\n1. Compress `foo.bc` in each rlib with `flate`. These are just taking up space and are only used with LTO, no need for LTO to be speedy.\r\n2. Stop install `librustc.rlib` and friends, this is a *huge* source of bloat. There's no need for us to install static libraries for these components.\r\n\r\ncc #12440", "tree": {"sha": "b14f5367835f027143cc50efe514900d65837f62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b14f5367835f027143cc50efe514900d65837f62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4995a85f401e17ea7a9b8eab32335b5fd13ce248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4995a85f401e17ea7a9b8eab32335b5fd13ce248", "html_url": "https://github.com/rust-lang/rust/commit/4995a85f401e17ea7a9b8eab32335b5fd13ce248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4995a85f401e17ea7a9b8eab32335b5fd13ce248/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d3669b9e7f40a5c05425141dcba6137189ee31", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d3669b9e7f40a5c05425141dcba6137189ee31", "html_url": "https://github.com/rust-lang/rust/commit/22d3669b9e7f40a5c05425141dcba6137189ee31"}, {"sha": "3cf0b9bd113e25b9b8020cff6ed7bcd82760473e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf0b9bd113e25b9b8020cff6ed7bcd82760473e", "html_url": "https://github.com/rust-lang/rust/commit/3cf0b9bd113e25b9b8020cff6ed7bcd82760473e"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "356ce2e908ed18e7a30b22f1ab2d244f1ac5718b", "filename": "mk/prepare.mk", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4995a85f401e17ea7a9b8eab32335b5fd13ce248/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4995a85f401e17ea7a9b8eab32335b5fd13ce248/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=4995a85f401e17ea7a9b8eab32335b5fd13ce248", "patch": "@@ -16,7 +16,7 @@\n #\n # It requires the following variables to be set:\n #\n-#   PREPARE_HOST - the host triple \n+#   PREPARE_HOST - the host triple\n #   PREPARE_TARGETS - the target triples, space separated\n #   PREPARE_DEST_DIR - the directory to put the image\n \n@@ -172,7 +172,10 @@ prepare-target-$(2)-host-$(3)-$(1): \\\n         $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n           $$(foreach crate,$$(HOST_CRATES), \\\n             $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)),)\n-# Only install if this host and target combo is being prepared\n+# Only install if this host and target combo is being prepared. Also be sure to\n+# *not* install the rlibs for host crates because there's no need to statically\n+# link against most of them. They just produce a large amount of extra size\n+# bloat.\n \t$$(if $$(findstring $(1), $$(PREPARE_STAGE)),\\\n       $$(if $$(findstring $(2), $$(PREPARE_TARGETS)),\\\n         $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n@@ -182,8 +185,7 @@ prepare-target-$(2)-host-$(3)-$(1): \\\n             $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate))))\\\n           $$(if $$(findstring $(2),$$(CFG_HOST)),\\\n             $$(foreach crate,$$(HOST_CRATES),\\\n-              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))\\\n-              $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate)))),)\\\n+              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))),)\\\n           $$(call PREPARE_LIB,libmorestack.a) \\\n           $$(call PREPARE_LIB,libcompiler-rt.a),),),)\n endef"}, {"sha": "bd0748761ee7ab376959bb7d4dc61cfdcf58b825", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4995a85f401e17ea7a9b8eab32335b5fd13ce248/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995a85f401e17ea7a9b8eab32335b5fd13ce248/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4995a85f401e17ea7a9b8eab32335b5fd13ce248", "patch": "@@ -34,6 +34,7 @@ use std::run;\n use std::str;\n use std::io;\n use std::io::fs;\n+use flate;\n use serialize::hex::ToHex;\n use extra::tempfile::TempDir;\n use syntax::abi;\n@@ -942,6 +943,15 @@ fn link_rlib(sess: Session,\n             // For LTO purposes, the bytecode of this library is also inserted\n             // into the archive.\n             let bc = obj_filename.with_extension(\"bc\");\n+            match fs::File::open(&bc).read_to_end().and_then(|data| {\n+                fs::File::create(&bc).write(flate::deflate_bytes(data))\n+            }) {\n+                Ok(()) => {}\n+                Err(e) => {\n+                    sess.err(format!(\"failed to compress bytecode: {}\", e));\n+                    sess.abort_if_errors()\n+                }\n+            }\n             a.add_file(&bc, false);\n             if !sess.opts.cg.save_temps &&\n                !sess.opts.output_types.contains(&OutputTypeBitcode) {"}, {"sha": "75fde2fdc51403bde3a8e0ad26dcd5f2eaa24387", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4995a85f401e17ea7a9b8eab32335b5fd13ce248/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4995a85f401e17ea7a9b8eab32335b5fd13ce248/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=4995a85f401e17ea7a9b8eab32335b5fd13ce248", "patch": "@@ -16,6 +16,7 @@ use metadata::cstore;\n use util::common::time;\n \n use std::libc;\n+use flate;\n \n pub fn run(sess: session::Session, llmod: ModuleRef,\n            tm: TargetMachineRef, reachable: &[~str]) {\n@@ -55,6 +56,8 @@ pub fn run(sess: session::Session, llmod: ModuleRef,\n         let bc = time(sess.time_passes(), format!(\"read {}.bc\", name), (), |_|\n                       archive.read(format!(\"{}.bc\", name)));\n         let bc = bc.expect(\"missing bytecode in archive!\");\n+        let bc = time(sess.time_passes(), format!(\"inflate {}.bc\", name), (), |_|\n+                      flate::inflate_bytes(bc));\n         let ptr = bc.as_ptr();\n         debug!(\"linking {}\", name);\n         time(sess.time_passes(), format!(\"ll link {}\", name), (), |()| unsafe {"}]}