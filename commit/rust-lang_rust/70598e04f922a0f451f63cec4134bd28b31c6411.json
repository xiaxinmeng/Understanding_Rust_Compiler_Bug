{"sha": "70598e04f922a0f451f63cec4134bd28b31c6411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNTk4ZTA0ZjkyMmEwZjQ1MWY2M2NlYzQxMzRiZDI4YjMxYzY0MTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-03T21:31:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-03T21:31:42Z"}, "message": "Auto merge of #36119 - arielb1:ctp-again, r=eddyb\n\nfix broken type parameter indexing logic in wfcheck\n\nr? @eddyb\n\nFixes #36075", "tree": {"sha": "e9c420973e15bb8452d161e76cea1e2db751e4b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c420973e15bb8452d161e76cea1e2db751e4b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70598e04f922a0f451f63cec4134bd28b31c6411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70598e04f922a0f451f63cec4134bd28b31c6411", "html_url": "https://github.com/rust-lang/rust/commit/70598e04f922a0f451f63cec4134bd28b31c6411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70598e04f922a0f451f63cec4134bd28b31c6411/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e9bfdbf24d5cb3cb2b3b7c103fded4682d88cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e9bfdbf24d5cb3cb2b3b7c103fded4682d88cc", "html_url": "https://github.com/rust-lang/rust/commit/49e9bfdbf24d5cb3cb2b3b7c103fded4682d88cc"}, {"sha": "dd72b6b91f88b82f1f564ca6dfeec621bd6fa3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd72b6b91f88b82f1f564ca6dfeec621bd6fa3ec", "html_url": "https://github.com/rust-lang/rust/commit/dd72b6b91f88b82f1f564ca6dfeec621bd6fa3ec"}], "stats": {"total": 110, "additions": 65, "deletions": 45}, "files": [{"sha": "3c450e14dea8157343e194705fb4ede641458c41", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=70598e04f922a0f451f63cec4134bd28b31c6411", "patch": "@@ -717,11 +717,16 @@ pub struct RegionParameterDef<'tcx> {\n \n impl<'tcx> RegionParameterDef<'tcx> {\n     pub fn to_early_bound_region(&self) -> ty::Region {\n-        ty::ReEarlyBound(ty::EarlyBoundRegion {\n+        ty::ReEarlyBound(self.to_early_bound_region_data())\n+    }\n+\n+    pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n+        ty::EarlyBoundRegion {\n             index: self.index,\n             name: self.name,\n-        })\n+        }\n     }\n+\n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         // this is an early bound region, so unaffected by #32330\n         ty::BoundRegion::BrNamed(self.def_id, self.name, Issue32330::WontChange)"}, {"sha": "7dff30d03c332f00bc5fc4d5de0404fae8e5e843", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=70598e04f922a0f451f63cec4134bd28b31c6411", "patch": "@@ -462,44 +462,31 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         let variances = self.tcx().item_variances(item_def_id);\n \n         let mut constrained_parameters: FnvHashSet<_> =\n-            variances[ast_generics.lifetimes.len()..]\n-                     .iter().enumerate()\n+            variances.iter().enumerate()\n                      .filter(|&(_, &variance)| variance != ty::Bivariant)\n-                     .map(|(index, _)| self.param_ty(ast_generics, index))\n-                     .map(|p| Parameter::Type(p))\n+                     .map(|(index, _)| Parameter(index as u32))\n                      .collect();\n \n         identify_constrained_type_params(ty_predicates.predicates.as_slice(),\n                                          None,\n                                          &mut constrained_parameters);\n \n-        for (index, &variance) in variances.iter().enumerate() {\n-            let (span, name) = if index < ast_generics.lifetimes.len() {\n-                if variance != ty::Bivariant {\n-                    continue;\n-                }\n+        for (index, _) in variances.iter().enumerate() {\n+            if constrained_parameters.contains(&Parameter(index as u32)) {\n+                continue;\n+            }\n \n+            let (span, name) = if index < ast_generics.lifetimes.len() {\n                 (ast_generics.lifetimes[index].lifetime.span,\n                  ast_generics.lifetimes[index].lifetime.name)\n             } else {\n-                let index = index - ast_generics.lifetimes.len();\n-                let param_ty = self.param_ty(ast_generics, index);\n-                if constrained_parameters.contains(&Parameter::Type(param_ty)) {\n-                    continue;\n-                }\n-                (ast_generics.ty_params[index].span, param_ty.name)\n+                (ast_generics.ty_params[index].span,\n+                 ast_generics.ty_params[index].name)\n             };\n             self.report_bivariance(span, name);\n         }\n     }\n \n-    fn param_ty(&self, ast_generics: &hir::Generics, index: usize) -> ty::ParamTy {\n-        ty::ParamTy {\n-            idx: index as u32,\n-            name: ast_generics.ty_params[index].name\n-        }\n-    }\n-\n     fn report_bivariance(&self,\n                          span: Span,\n                          param_name: ast::Name)"}, {"sha": "55db44a2c31090e8e0f4d3ac1baf4d2bc4db55f5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=70598e04f922a0f451f63cec4134bd28b31c6411", "patch": "@@ -2175,7 +2175,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let ty_generics = generics_of_def_id(ccx, impl_def_id);\n     for (ty_param, param) in ty_generics.types.iter().zip(&generics.ty_params) {\n         let param_ty = ty::ParamTy::for_def(ty_param);\n-        if !input_parameters.contains(&ctp::Parameter::Type(param_ty)) {\n+        if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n             report_unused_parameter(ccx, param.span, \"type\", &param_ty.to_string());\n         }\n     }\n@@ -2206,23 +2206,19 @@ fn enforce_impl_lifetimes_are_constrained<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             ty::ConstTraitItem(..) | ty::MethodTraitItem(..) => None\n         })\n         .flat_map(|ty| ctp::parameters_for(&ty, true))\n-        .filter_map(|p| match p {\n-            ctp::Parameter::Type(_) => None,\n-            ctp::Parameter::Region(r) => Some(r),\n-        })\n         .collect();\n \n-    for (index, lifetime_def) in ast_generics.lifetimes.iter().enumerate() {\n-        let region = ty::EarlyBoundRegion {\n-            index: index as u32,\n-            name: lifetime_def.lifetime.name\n-        };\n+    for (ty_lifetime, lifetime) in impl_scheme.generics.regions.iter()\n+        .zip(&ast_generics.lifetimes)\n+    {\n+        let param = ctp::Parameter::from(ty_lifetime.to_early_bound_region_data());\n+\n         if\n-            lifetimes_in_associated_types.contains(&region) && // (*)\n-            !input_parameters.contains(&ctp::Parameter::Region(region))\n+            lifetimes_in_associated_types.contains(&param) && // (*)\n+            !input_parameters.contains(&param)\n         {\n-            report_unused_parameter(ccx, lifetime_def.lifetime.span,\n-                                    \"lifetime\", &region.name.to_string());\n+            report_unused_parameter(ccx, lifetime.lifetime.span,\n+                                    \"lifetime\", &lifetime.lifetime.name.to_string());\n         }\n     }\n "}, {"sha": "39f9e4316b9c7c150668e9c72f44699359e6ce79", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=70598e04f922a0f451f63cec4134bd28b31c6411", "patch": "@@ -13,9 +13,14 @@ use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::util::nodemap::FnvHashSet;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum Parameter {\n-    Type(ty::ParamTy),\n-    Region(ty::EarlyBoundRegion),\n+pub struct Parameter(pub u32);\n+\n+impl From<ty::ParamTy> for Parameter {\n+    fn from(param: ty::ParamTy) -> Self { Parameter(param.idx) }\n+}\n+\n+impl From<ty::EarlyBoundRegion> for Parameter {\n+    fn from(param: ty::EarlyBoundRegion) -> Self { Parameter(param.index) }\n }\n \n /// If `include_projections` is false, returns the list of parameters that are\n@@ -49,8 +54,8 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n                 // projections are not injective\n                 return false;\n             }\n-            ty::TyParam(ref d) => {\n-                self.parameters.push(Parameter::Type(d.clone()));\n+            ty::TyParam(data) => {\n+                self.parameters.push(Parameter::from(data));\n             }\n             _ => {}\n         }\n@@ -61,7 +66,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     fn visit_region(&mut self, r: &'tcx ty::Region) -> bool {\n         match *r {\n             ty::ReEarlyBound(data) => {\n-                self.parameters.push(Parameter::Region(data));\n+                self.parameters.push(Parameter::from(data));\n             }\n             _ => {}\n         }\n@@ -141,13 +146,15 @@ pub fn setup_constraining_predicates<'tcx>(predicates: &mut [ty::Predicate<'tcx>\n     //   * <U as Iterator>::Item = T\n     //   * T: Debug\n     //   * U: Iterator\n+    debug!(\"setup_constraining_predicates: predicates={:?} \\\n+            impl_trait_ref={:?} input_parameters={:?}\",\n+           predicates, impl_trait_ref, input_parameters);\n     let mut i = 0;\n     let mut changed = true;\n     while changed {\n         changed = false;\n \n         for j in i..predicates.len() {\n-\n             if let ty::Predicate::Projection(ref poly_projection) = predicates[j] {\n                 // Note that we can skip binder here because the impl\n                 // trait ref never contains any late-bound regions.\n@@ -181,5 +188,8 @@ pub fn setup_constraining_predicates<'tcx>(predicates: &mut [ty::Predicate<'tcx>\n             i += 1;\n             changed = true;\n         }\n+        debug!(\"setup_constraining_predicates: predicates={:?} \\\n+                i={} impl_trait_ref={:?} input_parameters={:?}\",\n+           predicates, i, impl_trait_ref, input_parameters);\n     }\n }"}, {"sha": "fe399e10c1c3fb6e4fe13b6404f9456c3dbb113e", "filename": "src/test/run-pass/issue-36075.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Ftest%2Frun-pass%2Fissue-36075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70598e04f922a0f451f63cec4134bd28b31c6411/src%2Ftest%2Frun-pass%2Fissue-36075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36075.rs?ref=70598e04f922a0f451f63cec4134bd28b31c6411", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait DeclarationParser {\n+    type Declaration;\n+}\n+\n+struct DeclarationListParser<'i, I, P>\n+    where P: DeclarationParser<Declaration = I>\n+{\n+    input: &'i (),\n+    parser: P\n+}\n+\n+fn main() {}"}]}