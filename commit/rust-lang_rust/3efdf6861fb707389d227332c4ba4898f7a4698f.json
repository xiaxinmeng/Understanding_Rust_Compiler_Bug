{"sha": "3efdf6861fb707389d227332c4ba4898f7a4698f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZmRmNjg2MWZiNzA3Mzg5ZDIyNzMzMmM0YmE0ODk4ZjdhNDY5OGY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-23T17:57:16Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-23T17:57:16Z"}, "message": "Complete editable private items", "tree": {"sha": "c78ab6755b223685f263c763ca070ca318dfada3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c78ab6755b223685f263c763ca070ca318dfada3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3efdf6861fb707389d227332c4ba4898f7a4698f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3efdf6861fb707389d227332c4ba4898f7a4698f", "html_url": "https://github.com/rust-lang/rust/commit/3efdf6861fb707389d227332c4ba4898f7a4698f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3efdf6861fb707389d227332c4ba4898f7a4698f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d7da196fc6e60f175e694e16e3424e4faaa8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d7da196fc6e60f175e694e16e3424e4faaa8c4", "html_url": "https://github.com/rust-lang/rust/commit/75d7da196fc6e60f175e694e16e3424e4faaa8c4"}], "stats": {"total": 147, "additions": 108, "deletions": 39}, "files": [{"sha": "8025d6398c427b9ec426c6888f6860174c4b913d", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=3efdf6861fb707389d227332c4ba4898f7a4698f", "patch": "@@ -92,6 +92,7 @@ impl ChangeFixture {\n         let mut default_cfg = CfgOptions::default();\n \n         let mut file_set = FileSet::default();\n+        let mut current_source_root_kind = SourceRootKind::Local;\n         let source_root_prefix = \"/\".to_string();\n         let mut file_id = FileId(0);\n         let mut roots = Vec::new();\n@@ -118,8 +119,13 @@ impl ChangeFixture {\n                 assert!(meta.krate.is_some(), \"can't specify deps without naming the crate\")\n             }\n \n-            if meta.introduce_new_source_root {\n-                roots.push(SourceRoot::new_local(mem::take(&mut file_set)));\n+            if let Some(kind) = &meta.introduce_new_source_root {\n+                let root = match current_source_root_kind {\n+                    SourceRootKind::Local => SourceRoot::new_local(mem::take(&mut file_set)),\n+                    SourceRootKind::Library => SourceRoot::new_library(mem::take(&mut file_set)),\n+                };\n+                roots.push(root);\n+                current_source_root_kind = *kind;\n             }\n \n             if let Some(krate) = meta.krate {\n@@ -197,14 +203,24 @@ impl ChangeFixture {\n                 crate_graph.add_dep(krate, CrateName::new(\"core\").unwrap(), core_crate).unwrap();\n             }\n         }\n-        roots.push(SourceRoot::new_local(mem::take(&mut file_set)));\n+        let root = match current_source_root_kind {\n+            SourceRootKind::Local => SourceRoot::new_local(mem::take(&mut file_set)),\n+            SourceRootKind::Library => SourceRoot::new_library(mem::take(&mut file_set)),\n+        };\n+        roots.push(root);\n         change.set_roots(roots);\n         change.set_crate_graph(crate_graph);\n \n         ChangeFixture { file_position, files, change }\n     }\n }\n \n+#[derive(Debug, Clone, Copy)]\n+enum SourceRootKind {\n+    Local,\n+    Library,\n+}\n+\n #[derive(Debug)]\n struct FileMeta {\n     path: String,\n@@ -213,7 +229,7 @@ struct FileMeta {\n     cfg: CfgOptions,\n     edition: Edition,\n     env: Env,\n-    introduce_new_source_root: bool,\n+    introduce_new_source_root: Option<SourceRootKind>,\n }\n \n impl From<Fixture> for FileMeta {\n@@ -229,7 +245,11 @@ impl From<Fixture> for FileMeta {\n             cfg,\n             edition: f.edition.as_ref().map_or(Edition::CURRENT, |v| Edition::from_str(v).unwrap()),\n             env: f.env.into_iter().collect(),\n-            introduce_new_source_root: f.introduce_new_source_root,\n+            introduce_new_source_root: f.introduce_new_source_root.map(|kind| match &*kind {\n+                \"local\" => SourceRootKind::Local,\n+                \"library\" => SourceRootKind::Library,\n+                invalid => panic!(\"invalid source root kind '{}'\", invalid),\n+            }),\n         }\n     }\n }"}, {"sha": "d7a2b454841d5a673d99f248a288cbab126b3a86", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=3efdf6861fb707389d227332c4ba4898f7a4698f", "patch": "@@ -1375,13 +1375,13 @@ fn foo(_: bool) -> bo$0ol { true }\n     fn test_transitive() {\n         check(\n             r#\"\n-//- /level3.rs new_source_root: crate:level3\n+//- /level3.rs new_source_root:local crate:level3\n pub struct Fo$0o;\n-//- /level2.rs new_source_root: crate:level2 deps:level3\n+//- /level2.rs new_source_root:local crate:level2 deps:level3\n pub use level3::Foo;\n-//- /level1.rs new_source_root: crate:level1 deps:level2\n+//- /level1.rs new_source_root:local crate:level1 deps:level2\n pub use level2::Foo;\n-//- /level0.rs new_source_root: crate:level0 deps:level1\n+//- /level0.rs new_source_root:local crate:level0 deps:level1\n pub use level1::Foo;\n \"#,\n             expect![[r#\"\n@@ -1411,7 +1411,7 @@ macro_rules! foo$0 {\n }\n //- /bar.rs\n foo!();\n-//- /other.rs crate:other deps:lib new_source_root:\n+//- /other.rs crate:other deps:lib new_source_root:local\n lib::foo!();\n \"#,\n             expect![[r#\""}, {"sha": "6208b89728d486028c12868ce93fe7d522d24c83", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=3efdf6861fb707389d227332c4ba4898f7a4698f", "patch": "@@ -174,36 +174,81 @@ fn foo(a: A) { a.$0() }\n     fn test_visibility_filtering() {\n         check(\n             r#\"\n-mod inner {\n+//- /lib.rs crate:lib new_source_root:local\n+pub mod m {\n     pub struct A {\n         private_field: u32,\n         pub pub_field: u32,\n         pub(crate) crate_field: u32,\n-        pub(crate) super_field: u32,\n+        pub(super) super_field: u32,\n     }\n }\n-fn foo(a: inner::A) { a.$0 }\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::m::A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                fd pub_field   u32\n-                fd crate_field u32\n-                fd super_field u32\n+                fd private_field u32\n+                fd pub_field     u32\n+                fd crate_field   u32\n+                fd super_field   u32\n             \"#]],\n         );\n \n         check(\n             r#\"\n-struct A {}\n+//- /lib.rs crate:lib new_source_root:library\n+pub mod m {\n+    pub struct A {\n+        private_field: u32,\n+        pub pub_field: u32,\n+        pub(crate) crate_field: u32,\n+        pub(super) super_field: u32,\n+    }\n+}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::m::A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                fd pub_field u32\n+            \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib new_source_root:local\n+pub struct A {}\n mod m {\n     impl super::A {\n         fn private_method(&self) {}\n-        pub(crate) fn the_method(&self) {}\n+        pub(crate) fn crate_method(&self) {}\n+        pub fn pub_method(&self) {}\n     }\n }\n-fn foo(a: A) { a.$0 }\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                me the_method() fn(&self)\n+                me private_method() fn(&self)\n+                me crate_method()   fn(&self)\n+                me pub_method()     fn(&self)\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib new_source_root:library\n+pub struct A {}\n+mod m {\n+    impl super::A {\n+        fn private_method(&self) {}\n+        pub(crate) fn crate_method(&self) {}\n+        pub fn pub_method(&self) {}\n+    }\n+}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo(a: lib::A) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                me pub_method() fn(&self)\n             \"#]],\n         );\n     }"}, {"sha": "1647ecb99a82f99973ebe09bd3e7043684b3bb79", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=3efdf6861fb707389d227332c4ba4898f7a4698f", "patch": "@@ -259,25 +259,25 @@ mod tests {\n     fn associated_item_visibility() {\n         check(\n             r#\"\n-struct S;\n-\n-mod m {\n-    impl super::S {\n-        pub(crate) fn public_method() { }\n-        fn private_method() { }\n-        pub(crate) type PublicType = u32;\n-        type PrivateType = u32;\n-        pub(crate) const PUBLIC_CONST: u32 = 1;\n-        const PRIVATE_CONST: u32 = 1;\n-    }\n+//- /lib.rs crate:lib new_source_root:library\n+pub struct S;\n+\n+impl S {\n+    pub fn public_method() { }\n+    fn private_method() { }\n+    pub type PublicType = u32;\n+    type PrivateType = u32;\n+    pub const PUBLIC_CONST: u32 = 1;\n+    const PRIVATE_CONST: u32 = 1;\n }\n \n-fn foo() { let _ = S::$0 }\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn foo() { let _ = lib::S::$0 }\n \"#,\n             expect![[r#\"\n                 fn public_method() fn()\n-                ct PUBLIC_CONST    pub(crate) const PUBLIC_CONST: u32 = 1;\n-                ta PublicType      pub(crate) type PublicType = u32;\n+                ct PUBLIC_CONST    pub const PUBLIC_CONST: u32 = 1;\n+                ta PublicType      pub type PublicType = u32;\n             \"#]],\n         );\n     }"}, {"sha": "09694abd79eec9ccd42034f4d57d928e158c5a88", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=3efdf6861fb707389d227332c4ba4898f7a4698f", "patch": "@@ -1,5 +1,6 @@\n //! See `CompletionContext` structure.\n \n+use base_db::SourceDatabaseExt;\n use hir::{Local, ScopeDef, Semantics, SemanticsScope, Type};\n use ide_db::{\n     base_db::{FilePosition, SourceDatabase},\n@@ -380,8 +381,11 @@ impl<'a> CompletionContext<'a> {\n             None => return false,\n         };\n         if !vis.is_visible_from(self.db, module.into()) {\n-            // FIXME: if the definition location is editable, also show private items\n-            return false;\n+            // If the definition location is editable, also show private items\n+            let root_file = defining_crate.root_file(self.db);\n+            let source_root_id = self.db.file_source_root(root_file);\n+            let is_editable = !self.db.source_root(source_root_id).is_library;\n+            return is_editable;\n         }\n \n         if module.krate() != defining_crate && attrs.has_doc_hidden() {"}, {"sha": "166df3ea017f8f30aa81ff8df93afbb292875331", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3efdf6861fb707389d227332c4ba4898f7a4698f/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=3efdf6861fb707389d227332c4ba4898f7a4698f", "patch": "@@ -74,7 +74,7 @@ pub struct Fixture {\n     pub cfg_key_values: Vec<(String, String)>,\n     pub edition: Option<String>,\n     pub env: FxHashMap<String, String>,\n-    pub introduce_new_source_root: bool,\n+    pub introduce_new_source_root: Option<String>,\n }\n \n pub struct MiniCore {\n@@ -162,7 +162,7 @@ impl Fixture {\n         let mut cfg_atoms = Vec::new();\n         let mut cfg_key_values = Vec::new();\n         let mut env = FxHashMap::default();\n-        let mut introduce_new_source_root = false;\n+        let mut introduce_new_source_root = None;\n         for component in components[1..].iter() {\n             let (key, value) = component\n                 .split_once(':')\n@@ -186,7 +186,7 @@ impl Fixture {\n                         }\n                     }\n                 }\n-                \"new_source_root\" => introduce_new_source_root = true,\n+                \"new_source_root\" => introduce_new_source_root = Some(value.to_string()),\n                 _ => panic!(\"bad component: {:?}\", component),\n             }\n         }"}]}