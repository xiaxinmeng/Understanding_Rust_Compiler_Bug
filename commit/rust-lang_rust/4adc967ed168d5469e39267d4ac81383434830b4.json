{"sha": "4adc967ed168d5469e39267d4ac81383434830b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZGM5NjdlZDE2OGQ1NDY5ZTM5MjY3ZDRhYzgxMzgzNDM0ODMwYjQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-26T12:42:29Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-05T11:41:03Z"}, "message": "mir: report when overflow checks would be missing cross-crate.", "tree": {"sha": "c198926828f7916397d4f25e581485abd5f9210d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c198926828f7916397d4f25e581485abd5f9210d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4adc967ed168d5469e39267d4ac81383434830b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4adc967ed168d5469e39267d4ac81383434830b4", "html_url": "https://github.com/rust-lang/rust/commit/4adc967ed168d5469e39267d4ac81383434830b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4adc967ed168d5469e39267d4ac81383434830b4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "html_url": "https://github.com/rust-lang/rust/commit/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "bb7a628f3ba50d332e5c5f81ed9cad417012149d", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=4adc967ed168d5469e39267d4ac81383434830b4", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(block = this.as_operand(block, arg));\n                 // Check for -MIN on signed integers\n-                if op == UnOp::Neg && this.check_overflow() && expr.ty.is_signed() {\n+                if op == UnOp::Neg && expr.ty.is_signed() && this.check_overflow() {\n                     let bool_ty = this.hir.bool_ty();\n \n                     let minval = this.minval_literal(expr_span, expr.ty);\n@@ -247,7 +247,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                            lhs: Operand<'tcx>, rhs: Operand<'tcx>) -> BlockAnd<Rvalue<'tcx>> {\n         let scope_id = self.innermost_scope_id();\n         let bool_ty = self.hir.bool_ty();\n-        if self.check_overflow() && op.is_checkable() && ty.is_integral() {\n+        if op.is_checkable() && ty.is_integral() && self.check_overflow() {\n             let result_tup = self.hir.tcx().mk_tup(vec![ty, bool_ty]);\n             let result_value = self.temp(result_tup);\n "}, {"sha": "f3b1a87138859f577285f75ff8e023b9d3b13fe5", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4adc967ed168d5469e39267d4ac81383434830b4", "patch": "@@ -55,6 +55,8 @@ pub struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     cached_resume_block: Option<BasicBlock>,\n     /// cached block with the RETURN terminator\n     cached_return_block: Option<BasicBlock>,\n+\n+    has_warned_about_xcrate_overflows: bool\n }\n \n struct CFG<'tcx> {\n@@ -273,7 +275,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             var_indices: FnvHashMap(),\n             unit_temp: None,\n             cached_resume_block: None,\n-            cached_return_block: None\n+            cached_return_block: None,\n+            has_warned_about_xcrate_overflows: false\n         };\n \n         assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n@@ -379,9 +382,19 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn check_overflow(&self) -> bool {\n-        self.hir.tcx().sess.opts.debugging_opts.force_overflow_checks.unwrap_or(\n-            self.hir.tcx().sess.opts.debug_assertions)\n+    pub fn check_overflow(&mut self) -> bool {\n+        let check = self.hir.tcx().sess.opts.debugging_opts.force_overflow_checks\n+         .unwrap_or(self.hir.tcx().sess.opts.debug_assertions);\n+\n+        if !check && self.hir.may_be_inlined_cross_crate() {\n+            if !self.has_warned_about_xcrate_overflows {\n+                self.hir.tcx().sess.span_warn(self.fn_span,\n+                    \"overflow checks would be missing when used from another crate\");\n+                self.has_warned_about_xcrate_overflows = true;\n+            }\n+        }\n+\n+        check\n     }\n }\n "}, {"sha": "659a326e852df1c6beb244a5fb499d117485c631", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=4adc967ed168d5469e39267d4ac81383434830b4", "patch": "@@ -17,32 +17,63 @@\n \n use hair::*;\n use rustc::mir::repr::*;\n+use rustc::mir::transform::MirSource;\n \n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval as const_eval;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::map::blocks::FnLikeNode;\n use rustc::infer::InferCtxt;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n use syntax::parse::token;\n use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n+use syntax::attr;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    constness: hir::Constness\n+    constness: hir::Constness,\n+\n+    /// True if this MIR can get inlined in other crates.\n+    inline: bool\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-               constness: hir::Constness)\n+               src: MirSource)\n                -> Cx<'a, 'gcx, 'tcx> {\n+        let (constness, inline) = match src {\n+            MirSource::Const(_) |\n+            MirSource::Static(..) => (hir::Constness::Const, false),\n+            MirSource::Fn(id) => {\n+                let def_id = infcx.tcx.map.local_def_id(id);\n+                let fn_like = FnLikeNode::from_node(infcx.tcx.map.get(id));\n+                match fn_like.map(|f| f.kind()) {\n+                    Some(FnKind::ItemFn(_, _, _, c, _, _, attrs)) => {\n+                        let scheme = infcx.tcx.lookup_item_type(def_id);\n+                        let any_types = !scheme.generics.types.is_empty();\n+                        (c, any_types || attr::requests_inline(attrs))\n+                    }\n+                    Some(FnKind::Method(_, m, _, attrs)) => {\n+                        let scheme = infcx.tcx.lookup_item_type(def_id);\n+                        let any_types = !scheme.generics.types.is_empty();\n+                        (m.constness, any_types || attr::requests_inline(attrs))\n+                    }\n+                    _ => (hir::Constness::NotConst, true)\n+                }\n+            }\n+            MirSource::Promoted(..) => bug!()\n+        };\n+\n         Cx {\n             tcx: infcx.tcx,\n             infcx: infcx,\n             constness: constness,\n+            inline: inline\n         }\n     }\n }\n@@ -154,6 +185,10 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n+\n+    pub fn may_be_inlined_cross_crate(&self) -> bool {\n+        self.inline\n+    }\n }\n \n mod block;"}, {"sha": "a55fbe3641c665c2d5f28ca00111635ddfc74cef", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adc967ed168d5469e39267d4ac81383434830b4/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=4adc967ed168d5469e39267d4ac81383434830b4", "patch": "@@ -32,7 +32,6 @@ use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n use rustc::hir;\n use rustc::hir::intravisit::{self, FnKind, Visitor};\n-use rustc::hir::map::blocks::FnLikeNode;\n use syntax::ast;\n use syntax::codemap::Span;\n \n@@ -116,20 +115,7 @@ impl<'a, 'gcx, 'tcx> CxBuilder<'a, 'gcx, 'tcx> {\n     {\n         let src = self.src;\n         let mir = self.infcx.enter(|infcx| {\n-            let constness = match src {\n-                MirSource::Const(_) |\n-                MirSource::Static(..) => hir::Constness::Const,\n-                MirSource::Fn(id) => {\n-                    let fn_like = FnLikeNode::from_node(infcx.tcx.map.get(id));\n-                    match fn_like.map(|f| f.kind()) {\n-                        Some(FnKind::ItemFn(_, _, _, c, _, _, _)) => c,\n-                        Some(FnKind::Method(_, m, _, _)) => m.constness,\n-                        _ => hir::Constness::NotConst\n-                    }\n-                }\n-                MirSource::Promoted(..) => bug!()\n-            };\n-            let (mut mir, scope_auxiliary) = f(Cx::new(&infcx, constness));\n+            let (mut mir, scope_auxiliary) = f(Cx::new(&infcx, src));\n \n             // Convert the Mir to global types.\n             let mut globalizer = GlobalizeMir {"}]}