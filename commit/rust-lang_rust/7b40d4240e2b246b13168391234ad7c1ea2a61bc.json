{"sha": "7b40d4240e2b246b13168391234ad7c1ea2a61bc", "node_id": "C_kwDOAAsO6NoAKDdiNDBkNDI0MGUyYjI0NmIxMzE2ODM5MTIzNGFkN2MxZWEyYTYxYmM", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T01:05:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T01:05:23Z"}, "message": "Rollup merge of #89303 - guswynn:std_suspend, r=dtolnay\n\nAdd `#[must_not_suspend]` to some types in std\n\nI am not sure what else should have it? `Ref`?", "tree": {"sha": "5fb3929e0248550fe172fccad2c8162c4f4fa414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb3929e0248550fe172fccad2c8162c4f4fa414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b40d4240e2b246b13168391234ad7c1ea2a61bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVl7UCRBK7hj4Ov3rIwAAy8EIADNmE9Kri4NgUhO7PuXPfcVY\nn2L1lUEB2/fKGb0wP0JoxZLWK9OSLPIK8VD0J6rmSIxxBAPCFCgg6Ri71JDZ39Kl\n8I3C65uGQGGO94bpVA0V/QmM4rMmPwuURi0j+pegzTINRHvtNS8Bpm9rHLQDYdtD\n6StRI/O/srZrquDEbbX8pp2kQe49Ky4G6blZgUwnwGoztxVfu4W5P3B4OvzHBGr+\nK2uCuXyeduNdk+Hns2CFeCPxBPXSPfyRQW5EHc3kWiBgqByGU9fE+cTL+/2zLKCF\nwWVWhIJR9RCWFdjYExAhLoC8+ujsehGnYAAgDaTsiMbjRlJ4tm0h59IAdC5TAxc=\n=zNZE\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fb3929e0248550fe172fccad2c8162c4f4fa414\nparent 837ac877091b540d95ee6a75a29e29cb64894d7e\nparent cb8e83caeba7268ebb3515468d348aea7af9fdae\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633050323 -0700\ncommitter GitHub <noreply@github.com> 1633050323 -0700\n\nRollup merge of #89303 - guswynn:std_suspend, r=dtolnay\n\nAdd `#[must_not_suspend]` to some types in std\n\nI am not sure what else should have it? `Ref`?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b40d4240e2b246b13168391234ad7c1ea2a61bc", "html_url": "https://github.com/rust-lang/rust/commit/7b40d4240e2b246b13168391234ad7c1ea2a61bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b40d4240e2b246b13168391234ad7c1ea2a61bc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837ac877091b540d95ee6a75a29e29cb64894d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/837ac877091b540d95ee6a75a29e29cb64894d7e", "html_url": "https://github.com/rust-lang/rust/commit/837ac877091b540d95ee6a75a29e29cb64894d7e"}, {"sha": "cb8e83caeba7268ebb3515468d348aea7af9fdae", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8e83caeba7268ebb3515468d348aea7af9fdae", "html_url": "https://github.com/rust-lang/rust/commit/cb8e83caeba7268ebb3515468d348aea7af9fdae"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "c0121eebb7feff689395915f461e33529483790c", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=7b40d4240e2b246b13168391234ad7c1ea2a61bc", "patch": "@@ -1303,6 +1303,11 @@ impl Clone for BorrowRef<'_> {\n ///\n /// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a Ref across suspend \\\n+                      points can cause BorrowErrors\"\n+)]\n pub struct Ref<'b, T: ?Sized + 'b> {\n     value: &'b T,\n     borrow: BorrowRef<'b>,\n@@ -1679,6 +1684,11 @@ impl<'b> BorrowRefMut<'b> {\n ///\n /// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RefMut across suspend \\\n+                      points can cause BorrowErrors\"\n+)]\n pub struct RefMut<'b, T: ?Sized + 'b> {\n     value: &'b mut T,\n     borrow: BorrowRefMut<'b>,"}, {"sha": "4408b5a3d2088687a1244908a842d65f80162a89", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7b40d4240e2b246b13168391234ad7c1ea2a61bc", "patch": "@@ -142,6 +142,7 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(llvm_asm)]\n #![feature(min_specialization)]\n+#![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(no_core)]"}, {"sha": "b33a3c5d22fe1de207701ad1727b5ff2f49e83af", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7b40d4240e2b246b13168391234ad7c1ea2a61bc", "patch": "@@ -297,6 +297,7 @@\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n+#![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "06a97fd3f761022a5c5c41e8e4f9aabf0d1bfc48", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=7b40d4240e2b246b13168391234ad7c1ea2a61bc", "patch": "@@ -188,6 +188,12 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n /// [`lock`]: Mutex::lock\n /// [`try_lock`]: Mutex::try_lock\n #[must_use = \"if unused the Mutex will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a MutexGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Futures to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     lock: &'a Mutex<T>,"}, {"sha": "aa1ce82d96799b9a99d2ae6c44e2bde8bcad08ba", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b40d4240e2b246b13168391234ad7c1ea2a61bc/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=7b40d4240e2b246b13168391234ad7c1ea2a61bc", "patch": "@@ -95,6 +95,12 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// [`read`]: RwLock::read\n /// [`try_read`]: RwLock::try_read\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RwLockReadGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Futures to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,\n@@ -115,6 +121,12 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n /// [`write`]: RwLock::write\n /// [`try_write`]: RwLock::try_write\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RwLockWriteGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Future's to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,"}, {"sha": "596249b2e4e4fa8efd4eebb4b7bea11a3b6359c9", "filename": "src/test/ui/lint/must_not_suspend/mutex.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b40d4240e2b246b13168391234ad7c1ea2a61bc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b40d4240e2b246b13168391234ad7c1ea2a61bc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs?ref=7b40d4240e2b246b13168391234ad7c1ea2a61bc", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+#![deny(must_not_suspend)]\n+\n+async fn other() {}\n+\n+pub async fn uhoh(m: std::sync::Mutex<()>) {\n+    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "4e0d9343c2c7118b88f257809125cf26528b0841", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b40d4240e2b246b13168391234ad7c1ea2a61bc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b40d4240e2b246b13168391234ad7c1ea2a61bc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=7b40d4240e2b246b13168391234ad7c1ea2a61bc", "patch": "@@ -0,0 +1,26 @@\n+error: `MutexGuard` held across a suspend point, but should not be\n+  --> $DIR/mutex.rs:7:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/mutex.rs:2:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: Holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n+  --> $DIR/mutex.rs:7:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/mutex.rs:7:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}]}