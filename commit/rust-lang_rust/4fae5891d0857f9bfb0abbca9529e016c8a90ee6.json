{"sha": "4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "node_id": "C_kwDOAAsO6NoAKDRmYWU1ODkxZDA4NTdmOWJmYjBhYmJjYTk1MjllMDE2YzhhOTBlZTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-09T21:31:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-09T21:31:54Z"}, "message": "Rollup merge of #102406 - mejrs:missing_copy, r=wesleywiser\n\nMake `missing_copy_implementations` more cautious\n\n- Fixes https://github.com/rust-lang/rust/issues/98348\n- Also makes the lint not fire on large types and types containing raw pointers. Thoughts?", "tree": {"sha": "c63fffd8104a324d084ac7c8c6943faa55876257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c63fffd8104a324d084ac7c8c6943faa55876257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjk6lKCRBK7hj4Ov3rIwAAaAEIAJNdHfjEu8Qt8lfKTSt8lJbJ\nIg/bwZEiB7Lp2F9hYG/RoAhxFcEXvh087FuXe2FpuozaiIcKKYSy8oWIsFRYLhZF\nSDwbnCh1E8KZ82/aFDui/v3+nIsE9GZoI3mCwNgMLSzkc66v35szsh+3qBfcV1bC\nzsqVw4lXV8PykgtPY6m11P48H62IxIP1170Rg0yOXa8FqFXdz0K1cs/dTMe/4ULL\nZn2hy9V88CWIMELE11+dQ1p2P0/Dxkl9FY5TQ5Zoe0WUN6f/zgufXFVqeUDSuTHf\n8jlKfHnH0ZlX3sCADthEaHw+9ukAmwUPa5UOP+Q9fGimGMj1GGxuleFMn0rn3aE=\n=VGpf\n-----END PGP SIGNATURE-----\n", "payload": "tree c63fffd8104a324d084ac7c8c6943faa55876257\nparent dfe3fe710181738a2cb3060c23ec5efb3c68ca09\nparent 34277fcddc41e924ffed7ddacb573d240854cff0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670621514 +0100\ncommitter GitHub <noreply@github.com> 1670621514 +0100\n\nRollup merge of #102406 - mejrs:missing_copy, r=wesleywiser\n\nMake `missing_copy_implementations` more cautious\n\n- Fixes https://github.com/rust-lang/rust/issues/98348\n- Also makes the lint not fire on large types and types containing raw pointers. Thoughts?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "html_url": "https://github.com/rust-lang/rust/commit/4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fae5891d0857f9bfb0abbca9529e016c8a90ee6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe3fe710181738a2cb3060c23ec5efb3c68ca09", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe3fe710181738a2cb3060c23ec5efb3c68ca09", "html_url": "https://github.com/rust-lang/rust/commit/dfe3fe710181738a2cb3060c23ec5efb3c68ca09"}, {"sha": "34277fcddc41e924ffed7ddacb573d240854cff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/34277fcddc41e924ffed7ddacb573d240854cff0", "html_url": "https://github.com/rust-lang/rust/commit/34277fcddc41e924ffed7ddacb573d240854cff0"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "08fbd973b06c731d30bed0581934794b7a1e4009", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4fae5891d0857f9bfb0abbca9529e016c8a90ee6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fae5891d0857f9bfb0abbca9529e016c8a90ee6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "patch": "@@ -53,7 +53,8 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, Span};\n use rustc_target::abi::{Abi, VariantIdx};\n-use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n+use rustc_trait_selection::infer::{InferCtxtExt, TyCtxtInferExt};\n+use rustc_trait_selection::traits::{self, misc::can_type_implement_copy, EvaluationResult};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n@@ -750,10 +751,39 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n         if def.has_dtor(cx.tcx) {\n             return;\n         }\n+\n+        // If the type contains a raw pointer, it may represent something like a handle,\n+        // and recommending Copy might be a bad idea.\n+        for field in def.all_fields() {\n+            let did = field.did;\n+            if cx.tcx.type_of(did).is_unsafe_ptr() {\n+                return;\n+            }\n+        }\n         let param_env = ty::ParamEnv::empty();\n         if ty.is_copy_modulo_regions(cx.tcx, param_env) {\n             return;\n         }\n+\n+        // We shouldn't recommend implementing `Copy` on stateful things,\n+        // such as iterators.\n+        if let Some(iter_trait) = cx.tcx.get_diagnostic_item(sym::Iterator) {\n+            if cx.tcx.infer_ctxt().build().type_implements_trait(iter_trait, [ty], param_env)\n+                == EvaluationResult::EvaluatedToOk\n+            {\n+                return;\n+            }\n+        }\n+\n+        // Default value of clippy::trivially_copy_pass_by_ref\n+        const MAX_SIZE: u64 = 256;\n+\n+        if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes()) {\n+            if size > MAX_SIZE {\n+                return;\n+            }\n+        }\n+\n         if can_type_implement_copy(\n             cx.tcx,\n             param_env,"}, {"sha": "051a905aed643d7817e7124a41fb4cc0d197eeb2", "filename": "src/test/ui/lint/lint-missing-copy-implementations-allow.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4fae5891d0857f9bfb0abbca9529e016c8a90ee6/src%2Ftest%2Fui%2Flint%2Flint-missing-copy-implementations-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fae5891d0857f9bfb0abbca9529e016c8a90ee6/src%2Ftest%2Fui%2Flint%2Flint-missing-copy-implementations-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-missing-copy-implementations-allow.rs?ref=4fae5891d0857f9bfb0abbca9529e016c8a90ee6", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+#![deny(missing_copy_implementations)]\n+\n+// Don't recommend implementing Copy on something stateful like an iterator.\n+pub struct MyIterator {\n+    num: u8,\n+}\n+\n+impl Iterator for MyIterator {\n+    type Item = u8;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        todo!()\n+    }\n+}\n+\n+pub struct Handle {\n+    inner: *mut (),\n+}\n+\n+pub struct Handle2 {\n+    inner: *const (),\n+}\n+\n+pub enum MaybeHandle {\n+    Ptr(*mut ()),\n+}\n+\n+pub union UnionHandle {\n+    ptr: *mut (),\n+}\n+\n+pub struct Array([u8; 2048]);\n+\n+fn main() {}"}]}