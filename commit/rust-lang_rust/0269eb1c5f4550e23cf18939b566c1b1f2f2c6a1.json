{"sha": "0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjllYjFjNWY0NTUwZTIzY2YxODkzOWI1NjZjMWIxZjJmMmM2YTE=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-02-23T04:01:48Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-22T02:27:50Z"}, "message": "docs: update configuration info", "tree": {"sha": "f1404ed55eeff1fd97bc63db57f7407dafc0b6bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1404ed55eeff1fd97bc63db57f7407dafc0b6bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1", "html_url": "https://github.com/rust-lang/rust/commit/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26fb3fa737816532c17559552fb5ad0cbeeb610a", "url": "https://api.github.com/repos/rust-lang/rust/commits/26fb3fa737816532c17559552fb5ad0cbeeb610a", "html_url": "https://github.com/rust-lang/rust/commit/26fb3fa737816532c17559552fb5ad0cbeeb610a"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "37cb7474130c8086300ec3d2a95d6e0c3d9e3f52", "filename": "Configurations.md", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=0269eb1c5f4550e23cf18939b566c1b1f2f2c6a1", "patch": "@@ -17,6 +17,29 @@ To enable unstable options, set `unstable_features = true` in `rustfmt.toml` or\n \n Below you find a detailed visual guide on all the supported configuration options of rustfmt:\n \n+## `array_width` \n+\n+Maximum width of an array literal before falling back to vertical formatting.\n+\n+- **Default value**: `60`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence. \n+\n+See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n+\n+## `attr_fn_like_width` \n+\n+Maximum width of the args of a function-like attributes before falling back to vertical formatting.\n+\n+- **Default value**: `70`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence. \n+\n+See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n ## `binop_separator`\n \n@@ -272,6 +295,17 @@ where\n }\n ```\n \n+## `chain_width` \n+\n+Maximum width of a chain to fit on one line.\n+\n+- **Default value**: `60`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence. \n+\n+See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n ## `color`\n \n@@ -717,6 +751,17 @@ trait Lorem {\n }\n ```\n \n+## `fn_call_width` \n+\n+Maximum width of the args of a function call before falling back to vertical formatting.\n+\n+- **Default value**: `60`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence. \n+\n+See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n ## `fn_single_line`\n \n@@ -2079,6 +2124,18 @@ Don't reformat out of line modules\n - **Possible values**: `true`, `false`\n - **Stable**: No (tracking issue: #3389)\n \n+## `single_line_if_else_max_width` \n+\n+Maximum line length for single line if-else expressions. A value of `0` (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n+\n+- **Default value**: `50`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence. \n+\n+See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n+\n ## `space_after_colon`\n \n Leave a space after the colon.\n@@ -2256,6 +2313,29 @@ fn main() {\n \n See also: [`indent_style`](#indent_style).\n \n+## `struct_lit_width` \n+\n+Maximum width in the body of a struct literal before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n+\n+- **Default value**: `18`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence. \n+\n+See also [`max_width`](#max_width), [`use_small_heuristics`](#use_small_heuristics), and [`struct_lit_single_line`](#struct_lit_single_line)\n+\n+## `struct_variant_width` \n+\n+Maximum width in the body of a struct variant before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n+\n+- **Default value**: `35`\n+- **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n+- **Stable**: Yes\n+\n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence. \n+\n+See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n ## `tab_spaces`\n \n@@ -2448,13 +2528,43 @@ fn main() {\n \n ## `use_small_heuristics`\n \n-Whether to use different formatting for items and expressions if they satisfy a heuristic notion of 'small'.\n+This option can be used to simplify the management and bulk updates of the granular width configuration settings ([`fn_call_width`](#fn_call_width), [`attr_fn_like_width`](#attr_fn_like_width), [`struct_lit_width`](#struct_lit_width), [`struct_variant_width`](#struct_variant_width), [`array_width`](#array_width), [`chain_width`](#chain_width), [`single_line_if_else_max_width`](#single_line_if_else_max_width)), that respectively control when formatted constructs are multi-lined/vertical based on width.\n+\n+Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`. \n \n - **Default value**: `\"Default\"`\n - **Possible values**: `\"Default\"`, `\"Off\"`, `\"Max\"`\n - **Stable**: Yes\n \n #### `Default` (default):\n+When `use_small_heuristics` is set to `Default`, the values for the granular width settings are calculated as a ratio of the value for `max_width`.\n+\n+The ratios are:\n+* [`fn_call_width`](#fn_call_width) - `60%`\n+* [`attr_fn_like_width`](#attr_fn_like_width) - `70%`\n+* [`struct_lit_width`](#struct_lit_width) - `18%`\n+* [`struct_variant_width`](#struct_variant_width) - `35%`\n+* [`array_width`](#array_width) - `60%`\n+* [`chain_width`](#chain_width) - `60%`\n+* [`single_line_if_else_max_width`](#single_line_if_else_max_width) - `50%`\n+\n+For example when `max_width` is set to `100`, the width settings are:\n+* `fn_call_width=60`\n+* `attr_fn_like_width=70`\n+* `struct_lit_width=18`\n+* `struct_variant_width=35`\n+* `array_width=60`\n+* `chain_width=60`\n+* `single_line_if_else_max_width=50`\n+\n+and when `max_width` is set to `200`:\n+* `fn_call_width=120`\n+* `attr_fn_like_width=140`\n+* `struct_lit_width=36`\n+* `struct_variant_width=70`\n+* `array_width=120`\n+* `chain_width=120`\n+* `single_line_if_else_max_width=100`\n \n ```rust\n enum Lorem {\n@@ -2485,6 +2595,7 @@ fn main() {\n ```\n \n #### `Off`:\n+When `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics. \n \n ```rust\n enum Lorem {\n@@ -2513,6 +2624,16 @@ fn main() {\n ```\n \n #### `Max`:\n+When `use_small_heuristics` is set to `Max`, then each granular width setting is set to the same value as `max_width`.\n+\n+So if `max_width` is set to `200`, then all the width settings are also set to `200`.\n+* `fn_call_width=200`\n+* `attr_fn_like_width=200`\n+* `struct_lit_width=200`\n+* `struct_variant_width=200`\n+* `array_width=200`\n+* `chain_width=200`\n+* `single_line_if_else_max_width=200`\n \n ```rust\n enum Lorem {\n@@ -2530,6 +2651,17 @@ fn main() {\n }\n ```\n \n+\n+See also:\n+* [`max_width`](#max_width)\n+* [`fn_call_width`](#fn_call_width)\n+* [`attr_fn_like_width`](#attr_fn_like_width)\n+* [`struct_lit_width`](#struct_lit_width)\n+* [`struct_variant_width`](#struct_variant_width)\n+* [`array_width`](#array_width)\n+* [`chain_width`](#chain_width)\n+* [`single_line_if_else_max_width`](#single_line_if_else_max_width)\n+\n ## `use_try_shorthand`\n \n Replace uses of the try! macro by the ? shorthand"}]}