{"sha": "4c992111a3dee7eccdf789d730c26746b7d9b4ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTkyMTExYTNkZWU3ZWNjZGY3ODlkNzMwYzI2NzQ2YjdkOWI0YmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-09T16:16:23Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-09T16:27:20Z"}, "message": "Rollup merge of #45106 - Pirh:process_stdio_docs, r=dtolnay\n\nAdd links and examples for std::process::Stdio\n\nAs per #29370", "tree": {"sha": "3a841053feade9a7d886ea387ae21e3c4ddccdb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a841053feade9a7d886ea387ae21e3c4ddccdb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c992111a3dee7eccdf789d730c26746b7d9b4ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlnbo2gACgkQ/vbIBR0O\nATzYsA//Sw4VBHWcQKhUo6oAhyTkbIvthcEdkxLKNTsdtgDETtmAmMeMV8GmtRD4\nBNbrrDZh1nx3zXAeRPaSuht/Xo2fR3PT680PLbLFSUhy18B2XDSg8CmZQp03M9p0\nObtytz1kDPBlWX/lQYr7CJxWwaMfH1hFJfFquZqjciKEhGP0oy4vK6CRS1AsRbam\n5yax4vBYRVZ8KqB0+cd+dkgGX6x+s7yMgxea2jlxhtRKPLayk6Y0HGSMdmLDcmjk\neZ9oXbLdA1KRGVaAWJYhtOQslHzoxk/MG04APgBwayqqzAlrPt4Xs3Goj0p03HK0\n8iT19lLRLzTeSiif5MnBUsltiUQDsw3MxjQvVaugDbQ57ZZIUCZAx/VqvG0JDCxe\nFWWW83lCq6g+rGkM1rxYl/PIXjhIMJXTlQ2qgRSVAOunKVpS6qzSSbPAnzYlfnMO\nJsaUZbflxp53azslwBDd49ZI+fltH3ybeaFWG52/nbc/hLz2mmg1scM8+n/btx3D\n63IJXc73i5hlzylnqQL3JE6pTDpYd2EM9BUGkCcxgzvEANiMCpUvB+xhZcuae98b\nsvOGwhie8JQ8GDpFFOmWXbpJ0YSC5y9fLkwglXqC1kHIBTKcnP9dNmIRSCoYLGWh\nkJpjQiF37EcJWLlDgxoR9hYFbkGPY/hQLka+eQHQ/Wr8lKJ/wso=\n=FtOw\n-----END PGP SIGNATURE-----", "payload": "tree 3a841053feade9a7d886ea387ae21e3c4ddccdb6\nparent 9687c2efbeeabf775044d5f263988cf8a4e1e830\nparent 977200310abe3ca6c71d467e585654537b5309c2\nauthor kennytm <kennytm@gmail.com> 1507565783 +0800\ncommitter kennytm <kennytm@gmail.com> 1507566440 +0800\n\nRollup merge of #45106 - Pirh:process_stdio_docs, r=dtolnay\n\nAdd links and examples for std::process::Stdio\n\nAs per #29370\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c992111a3dee7eccdf789d730c26746b7d9b4ba", "html_url": "https://github.com/rust-lang/rust/commit/4c992111a3dee7eccdf789d730c26746b7d9b4ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c992111a3dee7eccdf789d730c26746b7d9b4ba/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9687c2efbeeabf775044d5f263988cf8a4e1e830", "url": "https://api.github.com/repos/rust-lang/rust/commits/9687c2efbeeabf775044d5f263988cf8a4e1e830", "html_url": "https://github.com/rust-lang/rust/commit/9687c2efbeeabf775044d5f263988cf8a4e1e830"}, {"sha": "977200310abe3ca6c71d467e585654537b5309c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/977200310abe3ca6c71d467e585654537b5309c2", "html_url": "https://github.com/rust-lang/rust/commit/977200310abe3ca6c71d467e585654537b5309c2"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "af64e68182084ef080e17cced756f0e54d023040", "filename": "src/libstd/process.rs", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/4c992111a3dee7eccdf789d730c26746b7d9b4ba/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c992111a3dee7eccdf789d730c26746b7d9b4ba/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=4c992111a3dee7eccdf789d730c26746b7d9b4ba", "patch": "@@ -742,21 +742,128 @@ impl fmt::Debug for Output {\n     }\n }\n \n-/// Describes what to do with a standard I/O stream for a child process.\n+/// Describes what to do with a standard I/O stream for a child process when\n+/// passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].\n+///\n+/// [`stdin`]: struct.Command.html#method.stdin\n+/// [`stdout`]: struct.Command.html#method.stdout\n+/// [`stderr`]: struct.Command.html#method.stderr\n+/// [`Command`]: struct.Command.html\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(imp::Stdio);\n \n impl Stdio {\n     /// A new pipe should be arranged to connect the parent and child processes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"Hello, world!\\n\");\n+    /// // Nothing echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::io::Write;\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let mut child = Command::new(\"rev\")\n+    ///     .stdin(Stdio::piped())\n+    ///     .stdout(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"Failed to spawn child process\");\n+    ///\n+    /// {\n+    ///     let mut stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+    ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n+    /// }\n+    ///\n+    /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\\n\");\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio { Stdio(imp::Stdio::MakePipe) }\n \n     /// The child inherits from the corresponding parent descriptor.\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::inherit())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // \"Hello, world!\" echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"rev\")\n+    ///     .stdin(Stdio::inherit())\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// println!(\"You piped in the reverse of: {}\", String::from_utf8_lossy(&output.stdout));\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn inherit() -> Stdio { Stdio(imp::Stdio::Inherit) }\n \n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::null())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // Nothing echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"rev\")\n+    ///     .stdin(Stdio::null())\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // Ignores any piped-in input\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn null() -> Stdio { Stdio(imp::Stdio::Null) }\n }"}]}