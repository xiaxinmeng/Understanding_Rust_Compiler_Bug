{"sha": "8c21b601367c4ee8c9b1554941189fdd09c8abb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMjFiNjAxMzY3YzRlZThjOWIxNTU0OTQxMTg5ZmRkMDljOGFiYjI=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-16T22:24:46Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-16T22:24:46Z"}, "message": "Expand and add examples to std::path::{Prefix, PrefixComponent}'s docs\n\nPart of #29368.", "tree": {"sha": "2a032dd5d24c2b474228016a71f46e65fb7051f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a032dd5d24c2b474228016a71f46e65fb7051f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c21b601367c4ee8c9b1554941189fdd09c8abb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c21b601367c4ee8c9b1554941189fdd09c8abb2", "html_url": "https://github.com/rust-lang/rust/commit/8c21b601367c4ee8c9b1554941189fdd09c8abb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c21b601367c4ee8c9b1554941189fdd09c8abb2/comments", "author": null, "committer": null, "parents": [{"sha": "1afe77fb5f14294b7d29d0d57263e2399981c130", "url": "https://api.github.com/repos/rust-lang/rust/commits/1afe77fb5f14294b7d29d0d57263e2399981c130", "html_url": "https://github.com/rust-lang/rust/commit/1afe77fb5f14294b7d29d0d57263e2399981c130"}], "stats": {"total": 116, "additions": 106, "deletions": 10}, "files": [{"sha": "77f0d9d95f29cfd44b16425aabd6d34eae338feb", "filename": "src/libstd/path.rs", "status": "modified", "additions": 106, "deletions": 10, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/8c21b601367c4ee8c9b1554941189fdd09c8abb2/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c21b601367c4ee8c9b1554941189fdd09c8abb2/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=8c21b601367c4ee8c9b1554941189fdd09c8abb2", "patch": "@@ -145,34 +145,79 @@ use sys::path::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n \n /// Path prefixes (Windows only).\n ///\n-/// Windows uses a variety of path styles, including references to drive\n-/// volumes (like `C:`), network shared folders (like `\\\\server\\share`) and\n-/// others. In addition, some path prefixes are \"verbatim\", in which case\n-/// `/` is *not* treated as a separator and essentially no normalization is\n-/// performed.\n+/// Windows uses a variety of path prefix styles, including references to drive\n+/// volumes (like `C:`), network shared folders (like `\\\\server\\share`), and\n+/// others. In addition, some path prefixes are \"verbatim\" (i.e. prefixed with\n+/// `\\\\?\\`, in which case `/` is *not* treated as a separator and essentially no\n+/// normalization is performed.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::path::{Component, Path, Prefix};\n+/// use std::path::Prefix::*;\n+/// use std::ffi::OsStr;\n+///\n+/// fn get_path_prefix(s: &str) -> Prefix {\n+///     let path = Path::new(s);\n+///     match path.components().next().unwrap() {\n+///         Component::Prefix(prefix_component) => prefix_component.kind(),\n+///         _ => panic!(),\n+///     }\n+/// }\n+///\n+/// # if cfg!(windows) {\n+/// assert_eq!(Verbatim(OsStr::new(\"pictures\")),\n+///            get_path_prefix(r\"\\\\?\\pictures\\kittens\"));\n+/// assert_eq!(VerbatimUNC(OsStr::new(\"server\"), OsStr::new(\"share\")),\n+///            get_path_prefix(r\"\\\\?\\UNC\\server\\share\"));\n+/// assert_eq!(VerbatimDisk('C' as u8), get_path_prefix(r\"\\\\?\\c:\\\"));\n+/// assert_eq!(DeviceNS(OsStr::new(\"BrainInterface\")),\n+///            get_path_prefix(r\"\\\\.\\BrainInterface\"));\n+/// assert_eq!(UNC(OsStr::new(\"server\"), OsStr::new(\"share\")),\n+///            get_path_prefix(r\"\\\\server\\share\"));\n+/// assert_eq!(Disk('C' as u8), get_path_prefix(r\"C:\\Users\\Rust\\Pictures\\Ferris\"));\n+/// # }\n+/// ```\n #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Prefix<'a> {\n-    /// Prefix `\\\\?\\`, together with the given component immediately following it.\n+    /// Verbatim prefix, e.g. `\\\\?\\cat_pics`.\n+    ///\n+    /// Verbatim prefixes consist of `\\\\?\\` immediately followed by the given\n+    /// component.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Verbatim(#[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr),\n \n-    /// Prefix `\\\\?\\UNC\\`, with the \"server\" and \"share\" components following it.\n+    /// Verbatim prefix using Windows' _**U**niform **N**aming **C**onvention_,\n+    /// e.g. `\\\\?\\UNC\\server\\share`.\n+    ///\n+    /// Verbatim UNC prefixes consist of `\\\\?\\UNC\\` immediately followed by the\n+    /// server's hostname and a share name.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     VerbatimUNC(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr,\n     ),\n \n-    /// Prefix like `\\\\?\\C:\\`, for the given drive letter\n+    /// Verbatim disk prefix, e.g. `\\\\?\\C:\\`.\n+    ///\n+    /// Verbatim disk prefixes consist of `\\\\?\\` immediately followed by the\n+    /// drive letter and `:\\`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     VerbatimDisk(#[stable(feature = \"rust1\", since = \"1.0.0\")] u8),\n \n-    /// Prefix `\\\\.\\`, together with the given component immediately following it.\n+    /// Device namespace prefix, e.g. `\\\\.\\COM42`.\n+    ///\n+    /// Device namespace prefixes consist of `\\\\.\\` immediately followed by the\n+    /// device name.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     DeviceNS(#[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr),\n \n-    /// Prefix `\\\\server\\share`, with the given \"server\" and \"share\" components.\n+    /// Prefix using Windows' _**U**niform **N**aming **C**onvention_, e.g.\n+    /// `\\\\server\\share`.\n+    ///\n+    /// UNC prefixes consist of the server's hostname and a share name.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     UNC(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr,\n@@ -217,6 +262,20 @@ impl<'a> Prefix<'a> {\n     }\n \n     /// Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::Prefix::*;\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// assert!(Verbatim(OsStr::new(\"pictures\")).is_verbatim());\n+    /// assert!(VerbatimUNC(OsStr::new(\"server\"), OsStr::new(\"share\")).is_verbatim());\n+    /// assert!(VerbatimDisk('C' as u8).is_verbatim());\n+    /// assert!(!DeviceNS(OsStr::new(\"BrainInterface\")).is_verbatim());\n+    /// assert!(!UNC(OsStr::new(\"server\"), OsStr::new(\"share\")).is_verbatim());\n+    /// assert!(!Disk('C' as u8).is_verbatim());\n+    /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_verbatim(&self) -> bool {\n@@ -358,7 +417,39 @@ enum State {\n \n /// A Windows path prefix, e.g. `C:` or `\\\\server\\share`.\n ///\n+/// In addition to the parsed [`Prefix`] information returned by [`kind`],\n+/// `PrefixComponent` also holds the raw and unparsed [`OsStr`] slice,\n+/// returned by [`as_os_str`].\n+///\n+/// Instances of this `struct` can be obtained by matching against the\n+/// [`Prefix` variant] on [`Component`].\n+///\n /// Does not occur on Unix.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// # if cfg!(windows) {\n+/// use std::path::{Component, Path, Prefix};\n+/// use std::ffi::OsStr;\n+///\n+/// let path = Path::new(r\"c:\\you\\later\\\");\n+/// match path.components().next().unwrap() {\n+///     Component::Prefix(prefix_component) => {\n+///         assert_eq!(Prefix::Disk('C' as u8), prefix_component.kind());\n+///         assert_eq!(OsStr::new(\"c:\"), prefix_component.as_os_str());\n+///     }\n+///     _ => unreachable!(),\n+/// }\n+/// # }\n+/// ```\n+///\n+/// [`as_os_str`]: #method.as_os_str\n+/// [`Component`]: enum.Component.html\n+/// [`kind`]: #method.kind\n+/// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n+/// [`Prefix` variant]: enum.Component.html#variant.Prefix\n+/// [`Prefix`]: enum.Prefix.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Eq, Debug)]\n pub struct PrefixComponent<'a> {\n@@ -371,6 +462,11 @@ pub struct PrefixComponent<'a> {\n \n impl<'a> PrefixComponent<'a> {\n     /// Returns the parsed prefix data.\n+    ///\n+    /// See [`Prefix`]'s documentation for more information on the different\n+    /// kinds of prefixes.\n+    ///\n+    /// [`Prefix`]: enum.Prefix.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn kind(&self) -> Prefix<'a> {\n         self.parsed"}]}