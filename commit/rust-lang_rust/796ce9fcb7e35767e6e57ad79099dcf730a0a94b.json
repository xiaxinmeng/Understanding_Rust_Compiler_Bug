{"sha": "796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NmNlOWZjYjdlMzU3NjdlNmU1N2FkNzkwOTlkY2Y3MzBhMGE5NGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-04T20:22:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-22T00:27:29Z"}, "message": "Suggest `return`ing tail expressions that match return type\n\nSome newcomers are confused by the behavior of tail expressions,\ninterpreting that \"leaving out the `;` makes it the return value\".\nTo help them go in the right direction, suggest using `return` instead\nwhen applicable.", "tree": {"sha": "814022ec0b70d4bac52c677bf71dc54692fe4dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/814022ec0b70d4bac52c677bf71dc54692fe4dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "html_url": "https://github.com/rust-lang/rust/commit/796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e826bb11228508fbe749e594038d6727208aa94", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e826bb11228508fbe749e594038d6727208aa94", "html_url": "https://github.com/rust-lang/rust/commit/3e826bb11228508fbe749e594038d6727208aa94"}], "stats": {"total": 125, "additions": 122, "deletions": 3}, "files": [{"sha": "f95627cfdee83d6f27100e1cf2e24836deab1076", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "patch": "@@ -1458,7 +1458,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             fcx.get_fn_decl(parent_id)\n         };\n \n-        if let (Some((fn_decl, can_suggest)), _) = (fn_decl, pointing_at_return_type) {\n+        if let Some((fn_decl, can_suggest)) = fn_decl {\n             if expression.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n@@ -1472,6 +1472,16 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 fn_output = Some(&fn_decl.output); // `impl Trait` return type\n             }\n         }\n+\n+        let parent_id = fcx.tcx.hir().get_parent_item(id);\n+        let parent_item = fcx.tcx.hir().get(parent_id);\n+\n+        if let (Some((expr, _)), Some((fn_decl, _, _))) =\n+            (expression, fcx.get_node_fn_decl(parent_item))\n+        {\n+            fcx.suggest_missing_return_expr(&mut err, expr, fn_decl, expected, found);\n+        }\n+\n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {\n             self.add_impl_trait_explanation(&mut err, cause, fcx, expected, sp, fn_output);\n         }"}, {"sha": "9d816e76c00202c5daf079296b2cdd98743f8418", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "patch": "@@ -464,6 +464,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(in super::super) fn suggest_missing_return_expr(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &'tcx hir::Expr<'tcx>,\n+        fn_decl: &hir::FnDecl<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if !expected.is_unit() {\n+            return;\n+        }\n+        let found = self.resolve_vars_with_obligations(found);\n+        if let hir::FnRetTy::Return(ty) = fn_decl.output {\n+            let ty = AstConv::ast_ty_to_ty(self, ty);\n+            let ty = self.normalize_associated_types_in(expr.span, ty);\n+            if self.can_coerce(found, ty) {\n+                err.multipart_suggestion(\n+                    \"you might have meant to return this value\",\n+                    vec![\n+                        (expr.span.shrink_to_lo(), \"return \".to_string()),\n+                        (expr.span.shrink_to_hi(), \";\".to_string()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+\n     pub(in super::super) fn suggest_missing_parentheses(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "1db759a2181d596537863384e8c9de6e9c713649", "filename": "src/test/ui/macros/empty-trailing-stmt.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr?ref=796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL |     { true }\n    |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; }\n+   |       ^^^^^^     ^\n \n error[E0308]: mismatched types\n   --> $DIR/empty-trailing-stmt.rs:5:13"}, {"sha": "75c0e7bb47560f8894850074d55fb1812411a8d5", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "patch": "@@ -2,19 +2,37 @@ error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:3:26\n    |\n LL |     if let Some(x) = a { true } else { false }\n-   |     ---------------------^^^^------------------ help: consider using a semicolon here\n+   |     ---------------------^^^^-----------------\n    |     |                    |\n    |     |                    expected `()`, found `bool`\n    |     expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |     if let Some(x) = a { true } else { false };\n+   |                                               ^\n+help: you might have meant to return this value\n+   |\n+LL |     if let Some(x) = a { return true; } else { false }\n+   |                          ^^^^^^     ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:3:40\n    |\n LL |     if let Some(x) = a { true } else { false }\n-   |     -----------------------------------^^^^^--- help: consider using a semicolon here\n+   |     -----------------------------------^^^^^--\n    |     |                                  |\n    |     |                                  expected `()`, found `bool`\n    |     expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |     if let Some(x) = a { true } else { false };\n+   |                                               ^\n+help: you might have meant to return this value\n+   |\n+LL |     if let Some(x) = a { true } else { return false; }\n+   |                                        ^^^^^^      ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:6:5"}, {"sha": "09a6d7cbeb17673514c4f02a500806d3cb107849", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "patch": "@@ -40,24 +40,44 @@ error[E0308]: mismatched types\n    |\n LL |     {2} + {2}\n    |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} + {2}\n+   |      ^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:12:6\n    |\n LL |     {2} + 2\n    |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} + 2\n+   |      ^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:18:7\n    |\n LL |     { 42 } + foo;\n    |       ^^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return 42; } + foo;\n+   |       ^^^^^^   ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:24:7\n    |\n LL |     { 3 } * 3\n    |       ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return 3; } * 3\n+   |       ^^^^^^  ^\n \n error[E0614]: type `{integer}` cannot be dereferenced\n   --> $DIR/expr-as-stmt.rs:24:11"}, {"sha": "72798c720f3a1b2c06794d409e0401bc6b8e5751", "filename": "src/test/ui/return/tail-expr-as-potential-return.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs?ref=796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let _ = foo(true);\n+}\n+\n+fn foo(x: bool) -> Result<f64, i32> {\n+    if x {\n+        Err(42) //~ ERROR mismatched types\n+    }\n+    Ok(42.0)\n+}\n+"}, {"sha": "d079e0b080d103a2f9599ed39e98d3baeb253935", "filename": "src/test/ui/return/tail-expr-as-potential-return.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796ce9fcb7e35767e6e57ad79099dcf730a0a94b/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=796ce9fcb7e35767e6e57ad79099dcf730a0a94b", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/tail-expr-as-potential-return.rs:7:9\n+   |\n+LL | /     if x {\n+LL | |         Err(42)\n+   | |         ^^^^^^^ expected `()`, found enum `std::result::Result`\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `std::result::Result<_, {integer}>`\n+help: try adding a semicolon\n+   |\n+LL |         Err(42);\n+   |                ^\n+help: consider using a semicolon here\n+   |\n+LL |     };\n+   |      ^\n+help: you might have meant to return this value\n+   |\n+LL |         return Err(42);\n+   |         ^^^^^^        ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}