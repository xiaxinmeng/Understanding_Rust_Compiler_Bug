{"sha": "2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNzMzYjFhM2VmOGZjNjM4Yjk2NTk0NWU0N2UzZjVmYjhhMWNmYzA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-14T17:06:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-14T17:09:36Z"}, "message": "Simplify", "tree": {"sha": "d5e70b99b930ef24762cb85d875403e099c96e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e70b99b930ef24762cb85d875403e099c96e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "html_url": "https://github.com/rust-lang/rust/commit/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7374ab8822f42ff45584a29bd3bcfa47313f908", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7374ab8822f42ff45584a29bd3bcfa47313f908", "html_url": "https://github.com/rust-lang/rust/commit/d7374ab8822f42ff45584a29bd3bcfa47313f908"}], "stats": {"total": 126, "additions": 69, "deletions": 57}, "files": [{"sha": "d8d3b8e85b2c0b494dac6159043e29e207e7918b", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "patch": "@@ -7,16 +7,17 @@ use syntax::{\n };\n \n use crate::{\n-    context::ParamKind, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n-    Completions,\n+    context::{ParamKind, PatternContext},\n+    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n /// `spam: &mut Spam` insert text/label and `spam` lookup string will be\n /// suggested.\n pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    if ctx.is_param != Some(ParamKind::Function) {\n+    if !matches!(ctx.pattern_ctx, Some(PatternContext { is_param: Some(ParamKind::Function), .. }))\n+    {\n         return None;\n     }\n "}, {"sha": "c63c274151cec0a70cc7b5e91146155e394c0410", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "patch": "@@ -1,11 +1,14 @@\n //! Completes constants and paths in patterns.\n \n-use crate::{context::PatternRefutability, CompletionContext, Completions};\n+use crate::{\n+    context::{PatternContext, PatternRefutability},\n+    CompletionContext, Completions,\n+};\n \n /// Completes constants and paths in patterns.\n pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    let refutable = match ctx.is_pat_or_const {\n-        Some(it) => it == PatternRefutability::Refutable,\n+    let refutable = match ctx.pattern_ctx {\n+        Some(PatternContext { refutability, .. }) => refutability == PatternRefutability::Refutable,\n         None => return,\n     };\n "}, {"sha": "6c6f8f8512bfa29655007570801ac8ee0c3c5b31", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 50, "deletions": 47, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "patch": "@@ -54,6 +54,12 @@ pub(crate) struct PathCompletionContext {\n     pub(super) in_loop_body: bool,\n }\n \n+#[derive(Debug)]\n+pub(super) struct PatternContext {\n+    pub(super) refutability: PatternRefutability,\n+    pub(super) is_param: Option<ParamKind>,\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum CallKind {\n     Pat,\n@@ -95,15 +101,12 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) lifetime_allowed: bool,\n     pub(super) is_label_ref: bool,\n \n-    // potentially set if we are completing a name\n-    pub(super) is_pat_or_const: Option<PatternRefutability>,\n-    pub(super) is_param: Option<ParamKind>,\n-\n     pub(super) completion_location: Option<ImmediateLocation>,\n     pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n     pub(super) previous_token: Option<SyntaxToken>,\n \n+    pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) path_context: Option<PathCompletionContext>,\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) locals: Vec<(String, Local)>,\n@@ -163,8 +166,7 @@ impl<'a> CompletionContext<'a> {\n             lifetime_param_syntax: None,\n             lifetime_allowed: false,\n             is_label_ref: false,\n-            is_pat_or_const: None,\n-            is_param: None,\n+            pattern_ctx: None,\n             completion_location: None,\n             prev_sibling: None,\n             attribute_under_caret: None,\n@@ -642,50 +644,51 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     fn classify_name(&mut self, name: ast::Name) {\n-        if let Some(bind_pat) = name.syntax().parent().and_then(ast::IdentPat::cast) {\n-            self.is_pat_or_const = Some(PatternRefutability::Refutable);\n-            if !bind_pat.is_simple_ident() {\n-                self.is_pat_or_const = None;\n-            } else {\n-                let irrefutable_pat = bind_pat.syntax().ancestors().find_map(|node| {\n-                    match_ast! {\n-                        match node {\n-                            ast::LetStmt(it) => Some(it.pat()),\n-                            ast::Param(it) => Some(it.pat()),\n-                            _ => None,\n-                        }\n-                    }\n-                });\n-                if let Some(Some(pat)) = irrefutable_pat {\n-                    // This check is here since we could be inside a pattern in the initializer expression of the let statement.\n-                    if pat.syntax().text_range().contains_range(bind_pat.syntax().text_range()) {\n-                        self.is_pat_or_const = Some(PatternRefutability::Irrefutable);\n-                    }\n-                }\n+        self.fill_impl_def();\n \n-                let is_name_in_field_pat = bind_pat\n+        if let Some(bind_pat) = name.syntax().parent().and_then(ast::IdentPat::cast) {\n+            let is_name_in_field_pat = bind_pat\n+                .syntax()\n+                .parent()\n+                .and_then(ast::RecordPatField::cast)\n+                .map_or(false, |pat_field| pat_field.name_ref().is_none());\n+            if is_name_in_field_pat {\n+                return;\n+            }\n+            if bind_pat.is_simple_ident() {\n+                let mut is_param = None;\n+                let refutability = bind_pat\n                     .syntax()\n-                    .parent()\n-                    .and_then(ast::RecordPatField::cast)\n-                    .map_or(false, |pat_field| pat_field.name_ref().is_none());\n-                if is_name_in_field_pat {\n-                    self.is_pat_or_const = None;\n-                }\n+                    .ancestors()\n+                    .skip_while(|it| ast::Pat::can_cast(it.kind()))\n+                    .next()\n+                    .map_or(PatternRefutability::Irrefutable, |node| {\n+                        match_ast! {\n+                            match node {\n+                                ast::LetStmt(__) => PatternRefutability::Irrefutable,\n+                                ast::Param(param) => {\n+                                    let is_closure_param = param\n+                                        .syntax()\n+                                        .ancestors()\n+                                        .nth(2)\n+                                        .and_then(ast::ClosureExpr::cast)\n+                                        .is_some();\n+                                    is_param = Some(if is_closure_param {\n+                                        ParamKind::Closure\n+                                    } else {\n+                                        ParamKind::Function\n+                                    });\n+                                    PatternRefutability::Irrefutable\n+                                },\n+                                ast::MatchArm(__) => PatternRefutability::Refutable,\n+                                ast::Condition(__) => PatternRefutability::Refutable,\n+                                ast::ForExpr(__) => PatternRefutability::Irrefutable,\n+                                _ => PatternRefutability::Irrefutable,\n+                            }\n+                        }\n+                    });\n+                self.pattern_ctx = Some(PatternContext { refutability, is_param });\n             }\n-\n-            self.fill_impl_def();\n-        }\n-\n-        if let Some(param) = name\n-            .syntax()\n-            .ancestors()\n-            .find_map(ast::Param::cast)\n-            .filter(|it| it.syntax().text_range() == name.syntax().text_range())\n-        {\n-            let is_closure_param =\n-                param.syntax().ancestors().nth(2).and_then(ast::ClosureExpr::cast).is_some();\n-            self.is_param =\n-                Some(if is_closure_param { ParamKind::Closure } else { ParamKind::Function });\n         }\n     }\n "}, {"sha": "5ff5d104661d260654a24ce2bb4c629b3a4140c0", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "patch": "@@ -167,7 +167,7 @@ fn render_resolution_(\n         hir::ScopeDef::ModuleDef(Function(func)) => {\n             return render_fn(ctx, import_to_add, Some(local_name), *func);\n         }\n-        hir::ScopeDef::ModuleDef(Variant(_)) if ctx.completion.is_pat_or_const.is_some() => {\n+        hir::ScopeDef::ModuleDef(Variant(_)) if ctx.completion.pattern_ctx.is_some() => {\n             CompletionItemKind::SymbolKind(SymbolKind::Variant)\n         }\n         hir::ScopeDef::ModuleDef(Variant(var)) => {"}, {"sha": "306e418e91db0d454e4ce0ef24e9be09a0002c88", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=2e733b1a3ef8fc638b965945e47e3f5fb8a1cfc0", "patch": "@@ -5,8 +5,10 @@ use ide_db::helpers::SnippetCap;\n use itertools::Itertools;\n \n use crate::{\n-    context::ParamKind, item::CompletionKind, render::RenderContext, CompletionItem,\n-    CompletionItemKind,\n+    context::{ParamKind, PatternContext},\n+    item::CompletionKind,\n+    render::RenderContext,\n+    CompletionItem, CompletionItemKind,\n };\n \n pub(crate) fn render_struct_pat(\n@@ -86,7 +88,10 @@ fn render_pat(\n         _ => return None,\n     };\n \n-    if ctx.completion.is_param == Some(ParamKind::Function) {\n+    if matches!(\n+        ctx.completion.pattern_ctx,\n+        Some(PatternContext { is_param: Some(ParamKind::Function), .. })\n+    ) {\n         pat.push(':');\n         pat.push(' ');\n         pat.push_str(name);"}]}