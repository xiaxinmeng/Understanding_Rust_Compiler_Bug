{"sha": "5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjQ3YjliYmU3MjUyZGIyZDIyZDNlYzRiZTE3MmM3M2YxZjk0ZTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-27T16:15:40Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:12Z"}, "message": "Report errors in statics during collecting instead of translating", "tree": {"sha": "c0d1a8f54cf9294314e8e410d4b477aa0ca33736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0d1a8f54cf9294314e8e410d4b477aa0ca33736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53QACgkQpp+NIls6\n19m8phAApUgN3iPENi51vAXYZPc3II4HA4/8tqpMaAXzAsVl5Ko1rHRLfXa76w81\nuy9RTtlxtUX8c9NlWy9P/eQoHRIVbJDdefxHtz7hHplDlV/AS/RmFkupRtgWvYUS\nitulDi7dR7EMiL3fpzfJovStUtelUY2SVD3iqcEGVdo5DLTIIi+LspIo+hhM0EgF\netxLjF4XsT7AuO/5LK3uGcDvYEyNMex9gOjhTMtOSuvT90Nk0TKHTZoLU2NHg+FD\nlKPTWAa2uUNZ60wp8O+ArN/NU09s3ZjTYFjlKiXsj2pVPEbIclSIEZC5IYsyhlnh\nVZ8g4EvD8LRszcbh0zbHD4PsE8VNVHDwkIuTvGA4PMRAmd6F9pNhuhYxHnEGuw7c\nyIoxJL//+6axNHggXLEh6x6TZDJfFeysQZj8f2gvxN5wE1MChHWPVzr27D44+Qvp\niGAYIdZMWcqghW0hJVM29Y7Wut0JTNsBhQfbxGfY80IEC6wt9GxQkdEUJkehzjUx\nyu50uQXLc1gKBDbzSHvUEAWb1IXnbJwjlLPVSskRncrCYbvaoefIqWnSTXWV6lo+\nIuv0g2dDePgBxZBptom1kv5BpQbNnbp20gRBpYlSyzNyANP9w+bsm2lfxfUPxexz\nSVxSwGMNr3HtCouy+7pBf6SqEj4RtxEFS+CmeHoDBGQWxPi0sdE=\n=5G+3\n-----END PGP SIGNATURE-----", "payload": "tree c0d1a8f54cf9294314e8e410d4b477aa0ca33736\nparent df6b40e342879169962295e27f1f878998f22bc3\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1517069740 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494452 +0100\n\nReport errors in statics during collecting instead of translating\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "html_url": "https://github.com/rust-lang/rust/commit/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6b40e342879169962295e27f1f878998f22bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6b40e342879169962295e27f1f878998f22bc3", "html_url": "https://github.com/rust-lang/rust/commit/df6b40e342879169962295e27f1f878998f22bc3"}], "stats": {"total": 185, "additions": 116, "deletions": 69}, "files": [{"sha": "b50b9cb43d3a10534553c6b2712c56a847978b39", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "patch": "@@ -9,10 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use middle::const_val::ConstVal;\n use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n-use mir::interpret::{Value, PrimVal};\n-\n use std::fmt;\n use syntax::abi;\n use syntax::ast;\n@@ -185,9 +182,8 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyAdt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n             ty::TyForeign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)),\n             ty::TyArray(_, n) => {\n-                match n.val {\n-                    ConstVal::Value(Value::ByVal(PrimVal::Bytes(n))) =>\n-                        format!(\"array of {} elements\", n),\n+                match n.val.to_raw_bits() {\n+                    Some(n) => format!(\"array of {} elements\", n),\n                     _ => \"array\".to_string(),\n                 }\n             }"}, {"sha": "a6df0465789b2679796ce50a0eda855dc51ed7a4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 98, "deletions": 59, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "patch": "@@ -201,9 +201,10 @@ use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::session::config;\n-use rustc::mir::{self, Location};\n+use rustc::mir::{self, Location, Promoted};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n+use rustc::mir::interpret::GlobalId;\n \n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n@@ -378,7 +379,19 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             recursion_depth_reset = None;\n \n-            collect_neighbours(tcx, instance, true, &mut neighbors);\n+            let cid = GlobalId {\n+                instance,\n+                promoted: None,\n+            };\n+            let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+\n+            match tcx.const_eval(param_env.and(cid)) {\n+                Ok(val) => collect_const(tcx, val, instance.substs, &mut neighbors),\n+                Err(err) => {\n+                    let span = tcx.def_span(def_id);\n+                    err.report(tcx, span, \"static\");\n+                }\n+            }\n         }\n         MonoItem::Fn(instance) => {\n             // Sanity check whether this ended up being collected accidentally\n@@ -390,7 +403,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                                recursion_depths));\n             check_type_length_limit(tcx, instance);\n \n-            collect_neighbours(tcx, instance, false, &mut neighbors);\n+            collect_neighbours(tcx, instance, &mut neighbors);\n         }\n         MonoItem::GlobalAsm(..) => {\n             recursion_depth_reset = None;\n@@ -499,7 +512,6 @@ struct MirNeighborCollector<'a, 'tcx: 'a> {\n     mir: &'a mir::Mir<'tcx>,\n     output: &'a mut Vec<MonoItem<'tcx>>,\n     param_substs: &'tcx Substs<'tcx>,\n-    const_context: bool,\n }\n \n impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n@@ -569,27 +581,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n         debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n \n-        match constant.val {\n-            ConstVal::Unevaluated(def_id, substs) => {\n-                let substs = self.tcx.trans_apply_param_substs(self.param_substs,\n-                                                            &substs);\n-                let instance = ty::Instance::resolve(self.tcx,\n-                                                    ty::ParamEnv::empty(traits::Reveal::All),\n-                                                    def_id,\n-                                                    substs).unwrap();\n-                collect_neighbours(self.tcx, instance, true, self.output);\n-            },\n-            ConstVal::Value(Value::ByValPair(PrimVal::Ptr(a), PrimVal::Ptr(b))) => {\n-                collect_miri(self.tcx, a.alloc_id, self.output);\n-                collect_miri(self.tcx, b.alloc_id, self.output);\n-            }\n-            ConstVal::Value(Value::ByValPair(_, PrimVal::Ptr(ptr))) |\n-            ConstVal::Value(Value::ByValPair(PrimVal::Ptr(ptr), _)) |\n-            ConstVal::Value(Value::ByVal(PrimVal::Ptr(ptr))) |\n-            ConstVal::Value(Value::ByRef(Pointer { primval: PrimVal::Ptr(ptr) }, _)) =>\n-                collect_miri(self.tcx, ptr.alloc_id, self.output),\n-            _ => {},\n-        }\n+        collect_const(self.tcx, constant, self.param_substs, self.output);\n \n         self.super_const(constant);\n     }\n@@ -605,30 +597,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::Call { ref func, .. } => {\n                 let callee_ty = func.ty(self.mir, tcx);\n                 let callee_ty = tcx.trans_apply_param_substs(self.param_substs, &callee_ty);\n-\n-                let constness = match (self.const_context, &callee_ty.sty) {\n-                    (true, &ty::TyFnDef(def_id, substs)) if self.tcx.is_const_fn(def_id) => {\n-                        let instance =\n-                            ty::Instance::resolve(self.tcx,\n-                                                  ty::ParamEnv::empty(traits::Reveal::All),\n-                                                  def_id,\n-                                                  substs).unwrap();\n-                        Some(instance)\n-                    }\n-                    _ => None\n-                };\n-\n-                if let Some(const_fn_instance) = constness {\n-                    // If this is a const fn, called from a const context, we\n-                    // have to visit its body in order to find any fn reifications\n-                    // it might contain.\n-                    collect_neighbours(self.tcx,\n-                                       const_fn_instance,\n-                                       true,\n-                                       self.output);\n-                } else {\n-                    visit_fn_use(self.tcx, callee_ty, true, &mut self.output);\n-                }\n+                visit_fn_use(self.tcx, callee_ty, true, &mut self.output);\n             }\n             mir::TerminatorKind::Drop { ref location, .. } |\n             mir::TerminatorKind::DropAndReplace { ref location, .. } => {\n@@ -1117,7 +1086,14 @@ fn collect_miri<'a, 'tcx>(\n     alloc_id: AllocId,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n-    if let Some(alloc) = tcx.interpret_interner.get_alloc(alloc_id) {\n+    if let Some(did) = tcx.interpret_interner.get_corresponding_static_def_id(alloc_id) {\n+        let instance = Instance::mono(tcx, did);\n+        if should_monomorphize_locally(tcx, &instance) {\n+            trace!(\"collecting static {:?}\", did);\n+            let node_id = tcx.hir.as_local_node_id(did).unwrap();\n+            output.push(MonoItem::Static(node_id));\n+        }\n+    } else if let Some(alloc) = tcx.interpret_interner.get_alloc(alloc_id) {\n         trace!(\"collecting {:?} with {:#?}\", alloc_id, alloc);\n         for &inner in alloc.relocations.values() {\n             collect_miri(tcx, inner, output);\n@@ -1135,23 +1111,29 @@ fn collect_miri<'a, 'tcx>(\n /// Scan the MIR in order to find function calls, closures, and drop-glue\n fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 instance: Instance<'tcx>,\n-                                const_context: bool,\n                                 output: &mut Vec<MonoItem<'tcx>>)\n {\n     let mir = tcx.instance_mir(instance.def);\n \n-    let mut visitor = MirNeighborCollector {\n+    MirNeighborCollector {\n         tcx,\n         mir: &mir,\n         output,\n         param_substs: instance.substs,\n-        const_context,\n-    };\n-\n-    visitor.visit_mir(&mir);\n-    for promoted in &mir.promoted {\n-        visitor.mir = promoted;\n-        visitor.visit_mir(promoted);\n+    }.visit_mir(&mir);\n+    let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+    for (i, promoted) in mir.promoted.iter().enumerate() {\n+        use rustc_data_structures::indexed_vec::Idx;\n+        let cid = GlobalId {\n+            instance,\n+            promoted: Some(Promoted::new(i)),\n+        };\n+        match tcx.const_eval(param_env.and(cid)) {\n+            Ok(val) => collect_const(tcx, val, instance.substs, output),\n+            Err(err) => {\n+                err.report(tcx, promoted.span, \"promoted\");\n+            }\n+        }\n     }\n }\n \n@@ -1163,3 +1145,60 @@ fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     printer.push_def_path(def_id, &mut output);\n     output\n }\n+\n+fn collect_const<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    constant: &ty::Const<'tcx>,\n+    param_substs: &'tcx Substs<'tcx>,\n+    output: &mut Vec<MonoItem<'tcx>>,\n+) {\n+    debug!(\"visiting const {:?}\", *constant);\n+\n+    let val = match constant.val {\n+        ConstVal::Unevaluated(def_id, substs) => {\n+            let param_env = ty::ParamEnv::empty(traits::Reveal::All);\n+            let substs = tcx.trans_apply_param_substs(param_substs,\n+                                                        &substs);\n+            let instance = ty::Instance::resolve(tcx,\n+                                                param_env,\n+                                                def_id,\n+                                                substs).unwrap();\n+\n+            let cid = GlobalId {\n+                instance,\n+                promoted: None,\n+            };\n+            match tcx.const_eval(param_env.and(cid)) {\n+                Ok(val) => val.val,\n+                Err(err) => {\n+                    let span = tcx.def_span(def_id);\n+                    err.report(tcx, span, \"constant\");\n+                    return;\n+                }\n+            }\n+        },\n+        _ => constant.val,\n+    };\n+    match val {\n+        ConstVal::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n+        ConstVal::Value(Value::ByValPair(PrimVal::Ptr(a), PrimVal::Ptr(b))) => {\n+            collect_miri(tcx, a.alloc_id, output);\n+            collect_miri(tcx, b.alloc_id, output);\n+        }\n+        ConstVal::Value(Value::ByValPair(_, PrimVal::Ptr(ptr))) |\n+        ConstVal::Value(Value::ByValPair(PrimVal::Ptr(ptr), _)) |\n+        ConstVal::Value(Value::ByVal(PrimVal::Ptr(ptr))) =>\n+            collect_miri(tcx, ptr.alloc_id, output),\n+        ConstVal::Value(Value::ByRef(Pointer { primval: PrimVal::Ptr(ptr) }, _)) => {\n+            // by ref should only collect the inner allocation, not the value itself\n+            let alloc = tcx\n+                .interpret_interner\n+                .get_alloc(ptr.alloc_id)\n+                .expect(\"ByRef to extern static is not allowed\");\n+            for &inner in alloc.relocations.values() {\n+                collect_miri(tcx, inner, output);\n+            }\n+        }\n+        _ => {},\n+    }\n+}"}, {"sha": "49a5b7ac8b907281b18697f1d63fb77f6f782a67", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "patch": "@@ -972,6 +972,8 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n             collector::collect_crate_mono_items(tcx, collection_mode)\n     });\n \n+    tcx.sess.abort_if_errors();\n+\n     ::rustc_mir::monomorphize::assert_symbols_are_distinct(tcx, items.iter());\n \n     let strategy = if tcx.sess.opts.incremental.is_some() {"}, {"sha": "7de84802e1d056765759c7dfe14f2ae9eaa8ef2e", "filename": "src/test/compile-fail/huge-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Ftest%2Fcompile-fail%2Fhuge-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Ftest%2Fcompile-fail%2Fhuge-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-array.rs?ref=5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:; 1518599999\n+// error-pattern:; 1518600000\n \n fn generic<T: Copy>(t: T) {\n     let s: [T; 1518600000] = [t; 1518600000];"}, {"sha": "632804f2fd366d0c4ab73d682a4e6b8cc15710e1", "filename": "src/test/ui/const-eval/index_out_of_bound.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.rs?ref=5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static FOO: i32 = [][0]; //~ ERROR E0080\n+static FOO: i32 = [][0];\n+//~^ ERROR E0080\n+//~| ERROR E0080\n \n fn main() {}"}, {"sha": "f7ce0565c85caaf23e4695310725fc4e9dac47ff", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "patch": "@@ -20,15 +20,23 @@ error[E0016]: blocks in constant functions are limited to items and tail express\n    |                   ^\n \n error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n-  --> $DIR/const-fn-error.rs:17:14\n+  --> $DIR/const-fn-error.rs:18:14\n    |\n+<<<<<<< HEAD\n LL |     for i in 0..x { //~ ERROR calls in constant functions\n+=======\n+18 |     for i in 0..x {\n+>>>>>>> Report errors in statics during collecting instead of translating\n    |              ^^^^\n \n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const-fn-error.rs:17:14\n+  --> $DIR/const-fn-error.rs:18:14\n    |\n+<<<<<<< HEAD\n LL |     for i in 0..x { //~ ERROR calls in constant functions\n+=======\n+18 |     for i in 0..x {\n+>>>>>>> Report errors in statics during collecting instead of translating\n    |              ^^^^\n \n error[E0080]: constant evaluation error"}]}