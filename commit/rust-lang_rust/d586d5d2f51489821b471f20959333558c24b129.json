{"sha": "d586d5d2f51489821b471f20959333558c24b129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODZkNWQyZjUxNDg5ODIxYjQ3MWYyMDk1OTMzMzU1OGMyNGIxMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-29T10:19:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-29T10:19:17Z"}, "message": "Auto merge of #55462 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #54965 (update tcp stream documentation)\n - #55269 (fix typos in various places)\n - #55384 (Avoid unnecessary allocations in `float_lit` and `integer_lit`.)\n - #55423 (back out bogus `Ok`-wrapping suggestion on `?` arm type mismatch)\n - #55426 (Make a bunch of trivial methods of NonNull be `#[inline]`)\n - #55438 (Avoid directly catching BaseException in bootstrap configure script)\n - #55439 (Remove unused sys import from generate-deriving-span-tests)\n - #55440 (Remove unreachable code in hasClass function in Rustdoc)\n - #55447 (Fix invalid path in generate-deriving-span-tests.py.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4718a64c5fb2dcbb8b42cedd7049c3cdd21e9eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4718a64c5fb2dcbb8b42cedd7049c3cdd21e9eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d586d5d2f51489821b471f20959333558c24b129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d586d5d2f51489821b471f20959333558c24b129", "html_url": "https://github.com/rust-lang/rust/commit/d586d5d2f51489821b471f20959333558c24b129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d586d5d2f51489821b471f20959333558c24b129/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e88b7363b7858960ccfd87326ece9d00bf4d973", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e88b7363b7858960ccfd87326ece9d00bf4d973", "html_url": "https://github.com/rust-lang/rust/commit/4e88b7363b7858960ccfd87326ece9d00bf4d973"}, {"sha": "eb00b4792cdd1d48d48ca8588a96f9bce3f0fd41", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb00b4792cdd1d48d48ca8588a96f9bce3f0fd41", "html_url": "https://github.com/rust-lang/rust/commit/eb00b4792cdd1d48d48ca8588a96f9bce3f0fd41"}], "stats": {"total": 95, "additions": 39, "deletions": 56}, "files": [{"sha": "d5f8d9d27d95632b8d6fc9fc799323fcb5423b8c", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -397,7 +397,7 @@ def is_number(value):\n   try:\n     float(value)\n     return True\n-  except:\n+  except ValueError:\n     return False\n \n # Here we walk through the constructed configuration we have from the parsed"}, {"sha": "31a438958e94200e1b32707b0b8902f99dbf4f64", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -18,10 +18,10 @@\n sample usage: src/etc/generate-deriving-span-tests.py\n \"\"\"\n \n-import sys, os, datetime, stat, re\n+import os, datetime, stat, re\n \n TEST_DIR = os.path.abspath(\n-    os.path.join(os.path.dirname(__file__), '../test/compile-fail'))\n+    os.path.join(os.path.dirname(__file__), '../test/ui/derives/'))\n \n YEAR = datetime.datetime.now().year\n "}, {"sha": "0fe82b93ff7a14bca4c961ca03d8ab68dd38ca44", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -2867,6 +2867,7 @@ impl<T: Sized> NonNull<T> {\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2882,12 +2883,14 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: NonZero(ptr as _) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n             Some(NonNull { pointer: NonZero(ptr as _) })\n@@ -2898,6 +2901,7 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub fn as_ptr(self) -> *mut T {\n         self.pointer.0 as *mut T\n     }\n@@ -2908,6 +2912,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n         &*self.as_ptr()\n     }\n@@ -2918,12 +2923,14 @@ impl<T: ?Sized> NonNull<T> {\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         &mut *self.as_ptr()\n     }\n \n     /// Cast to a pointer of another type\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n+    #[inline]\n     pub fn cast<U>(self) -> NonNull<U> {\n         unsafe {\n             NonNull::new_unchecked(self.as_ptr() as *mut U)\n@@ -2963,48 +2970,55 @@ impl<T: ?Sized> Eq for NonNull<T> {}\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> PartialEq for NonNull<T> {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.as_ptr() == other.as_ptr()\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Ord for NonNull<T> {\n+    #[inline]\n     fn cmp(&self, other: &Self) -> Ordering {\n         self.as_ptr().cmp(&other.as_ptr())\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> PartialOrd for NonNull<T> {\n+    #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         self.as_ptr().partial_cmp(&other.as_ptr())\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> hash::Hash for NonNull<T> {\n+    #[inline]\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n         self.as_ptr().hash(state)\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n+    #[inline]\n     fn from(unique: Unique<T>) -> Self {\n         NonNull { pointer: unique.pointer }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n+    #[inline]\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n+    #[inline]\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }"}, {"sha": "d19c495af3b9685c11240ace5d55bfc4dcc9b4ad", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -479,17 +479,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         err.span_label(arm_span, msg);\n                     }\n                 }\n-                hir::MatchSource::TryDesugar => {\n-                    // Issue #51632\n-                    if let Ok(try_snippet) = self.tcx.sess.source_map().span_to_snippet(arm_span) {\n-                        err.span_suggestion_with_applicability(\n-                            arm_span,\n-                            \"try wrapping with a success variant\",\n-                            format!(\"Ok({})\", try_snippet),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n-                }\n+                hir::MatchSource::TryDesugar => {}\n                 _ => {\n                     let msg = \"match arm with an incompatible type\";\n                     if self.tcx.sess.source_map().is_multiline(arm_span) {"}, {"sha": "3174c1be3adc80a26824d8dbfc2f7569e15c1834", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -93,11 +93,6 @@\n                 var end = start + className.length;\n                 return !(end < elemClass.length && elemClass[end] !== ' ');\n             }\n-            if (start > 0 && elemClass[start - 1] !== ' ') {\n-                return false;\n-            }\n-            var end = start + className.length;\n-            return !(end < elemClass.length && elemClass[end] !== ' ');\n         }\n         return false;\n     }"}, {"sha": "77a2ae6acf00b680e4028bd5d98012f20b225980", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -494,8 +494,17 @@ fn float_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                  -> Option<ast::LitKind> {\n     debug!(\"float_lit: {:?}, {:?}\", s, suffix);\n     // FIXME #2252: bounds checking float literals is deferred until trans\n-    let s = s.chars().filter(|&c| c != '_').collect::<String>();\n-    filtered_float_lit(Symbol::intern(&s), suffix, diag)\n+\n+    // Strip underscores without allocating a new String unless necessary.\n+    let s2;\n+    let s = if s.chars().any(|c| c == '_') {\n+        s2 = s.chars().filter(|&c| c != '_').collect::<String>();\n+        &s2\n+    } else {\n+        s\n+    };\n+\n+    filtered_float_lit(Symbol::intern(s), suffix, diag)\n }\n \n /// Parse a string representing a byte literal into its final form. Similar to `char_lit`\n@@ -591,8 +600,14 @@ fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                    -> Option<ast::LitKind> {\n     // s can only be ascii, byte indexing is fine\n \n-    let s2 = s.chars().filter(|&c| c != '_').collect::<String>();\n-    let mut s = &s2[..];\n+    // Strip underscores without allocating a new String unless necessary.\n+    let s2;\n+    let mut s = if s.chars().any(|c| c == '_') {\n+        s2 = s.chars().filter(|&c| c != '_').collect::<String>();\n+        &s2\n+    } else {\n+        s\n+    };\n \n     debug!(\"integer_lit: {}, {:?}\", s, suffix);\n "}, {"sha": "016cff914bd2d7ad3713cfb5908b35b1c68876f7", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.fixed", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e88b7363b7858960ccfd87326ece9d00bf4d973/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4e88b7363b7858960ccfd87326ece9d00bf4d973/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.fixed?ref=4e88b7363b7858960ccfd87326ece9d00bf4d973", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// run-rustfix\n-\n-#![allow(dead_code)]\n-\n-fn missing_discourses() -> Result<isize, ()> {\n-    Ok(1)\n-}\n-\n-fn forbidden_narratives() -> Result<isize, ()> {\n-    Ok(missing_discourses()?)\n-    //~^ ERROR try expression alternatives have incompatible types\n-    //~| HELP try wrapping with a success variant\n-}\n-\n-fn main() {}"}, {"sha": "32ea715b64fa7f66986a23b61329e6dd90a23314", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.rs?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-rustfix\n-\n #![allow(dead_code)]\n \n fn missing_discourses() -> Result<isize, ()> {\n@@ -19,7 +17,6 @@ fn missing_discourses() -> Result<isize, ()> {\n fn forbidden_narratives() -> Result<isize, ()> {\n     missing_discourses()?\n     //~^ ERROR try expression alternatives have incompatible types\n-    //~| HELP try wrapping with a success variant\n }\n \n fn main() {}"}, {"sha": "590cbff67a4bc80da6aa0faead15ebcb41ca47f4", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d586d5d2f51489821b471f20959333558c24b129/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d586d5d2f51489821b471f20959333558c24b129/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=d586d5d2f51489821b471f20959333558c24b129", "patch": "@@ -1,11 +1,8 @@\n error[E0308]: try expression alternatives have incompatible types\n-  --> $DIR/issue-51632-try-desugar-incompatible-types.rs:20:5\n+  --> $DIR/issue-51632-try-desugar-incompatible-types.rs:18:5\n    |\n LL |     missing_discourses()?\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     expected enum `std::result::Result`, found isize\n-   |     help: try wrapping with a success variant: `Ok(missing_discourses()?)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found isize\n    |\n    = note: expected type `std::result::Result<isize, ()>`\n               found type `isize`"}]}