{"sha": "b06214d16408e0b699f9d6051ba244e5fe766578", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjIxNGQxNjQwOGUwYjY5OWY5ZDYwNTFiYTI0NGU1ZmU3NjY1Nzg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T14:42:59Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T14:42:59Z"}, "message": "Generalize FieldIds -> IdRange<T>", "tree": {"sha": "0bf8eb18ca876b4b31395c486d20ed6320df836b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf8eb18ca876b4b31395c486d20ed6320df836b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06214d16408e0b699f9d6051ba244e5fe766578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06214d16408e0b699f9d6051ba244e5fe766578", "html_url": "https://github.com/rust-lang/rust/commit/b06214d16408e0b699f9d6051ba244e5fe766578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06214d16408e0b699f9d6051ba244e5fe766578/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a8fc9e6829c15a54e9094b940312e9485c6b79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8fc9e6829c15a54e9094b940312e9485c6b79a", "html_url": "https://github.com/rust-lang/rust/commit/2a8fc9e6829c15a54e9094b940312e9485c6b79a"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "8c93e3adf6c7b1c0758f7de6a8c4c5436a516951", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b06214d16408e0b699f9d6051ba244e5fe766578/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06214d16408e0b699f9d6051ba244e5fe766578/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=b06214d16408e0b699f9d6051ba244e5fe766578", "patch": "@@ -699,27 +699,28 @@ pub struct Variant {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct FieldIds {\n+pub struct IdRange<T> {\n     range: Range<u32>,\n+    _p: PhantomData<T>,\n }\n \n-impl FieldIds {\n-    fn new(range: Range<Idx<Field>>) -> Self {\n-        Self { range: range.start.into_raw().into()..range.end.into_raw().into() }\n+impl<T> IdRange<T> {\n+    fn new(range: Range<Idx<T>>) -> Self {\n+        Self { range: range.start.into_raw().into()..range.end.into_raw().into(), _p: PhantomData }\n     }\n }\n \n-impl Iterator for FieldIds {\n-    type Item = Idx<Field>;\n+impl<T> Iterator for IdRange<T> {\n+    type Item = Idx<T>;\n     fn next(&mut self) -> Option<Self::Item> {\n         self.range.next().map(|raw| Idx::from_raw(raw.into()))\n     }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum Fields {\n-    Record(FieldIds),\n-    Tuple(FieldIds),\n+    Record(IdRange<Field>),\n+    Tuple(IdRange<Field>),\n     Unit,\n }\n "}, {"sha": "93e8cc0c8a5fb637c02a699eda072efcc0f371d4", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b06214d16408e0b699f9d6051ba244e5fe766578/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06214d16408e0b699f9d6051ba244e5fe766578/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=b06214d16408e0b699f9d6051ba244e5fe766578", "patch": "@@ -196,7 +196,7 @@ impl Ctx {\n         }\n     }\n \n-    fn lower_record_fields(&mut self, fields: &ast::RecordFieldDefList) -> FieldIds {\n+    fn lower_record_fields(&mut self, fields: &ast::RecordFieldDefList) -> IdRange<Field> {\n         let start = self.next_field_idx();\n         for field in fields.fields() {\n             if let Some(data) = self.lower_record_field(&field) {\n@@ -205,7 +205,7 @@ impl Ctx {\n             }\n         }\n         let end = self.next_field_idx();\n-        FieldIds::new(start..end)\n+        IdRange::new(start..end)\n     }\n \n     fn lower_record_field(&mut self, field: &ast::RecordFieldDef) -> Option<Field> {\n@@ -216,7 +216,7 @@ impl Ctx {\n         Some(res)\n     }\n \n-    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldDefList) -> FieldIds {\n+    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldDefList) -> IdRange<Field> {\n         let start = self.next_field_idx();\n         for (i, field) in fields.fields().enumerate() {\n             if let Some(data) = self.lower_tuple_field(i, &field) {\n@@ -225,7 +225,7 @@ impl Ctx {\n             }\n         }\n         let end = self.next_field_idx();\n-        FieldIds::new(start..end)\n+        IdRange::new(start..end)\n     }\n \n     fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleFieldDef) -> Option<Field> {\n@@ -244,7 +244,7 @@ impl Ctx {\n             Some(record_field_def_list) => {\n                 self.lower_fields(&StructKind::Record(record_field_def_list))\n             }\n-            None => Fields::Record(FieldIds::new(self.next_field_idx()..self.next_field_idx())),\n+            None => Fields::Record(IdRange::new(self.next_field_idx()..self.next_field_idx())),\n         };\n         let ast_id = self.source_ast_id_map.ast_id(union);\n         let res = Union { name, visibility, generic_params, fields, ast_id };"}]}