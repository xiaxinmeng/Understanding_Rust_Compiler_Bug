{"sha": "ada8c72f3f21013f789f774d4c0219c58264e663", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYThjNzJmM2YyMTAxM2Y3ODlmNzc0ZDRjMDIxOWM1ODI2NGU2NjM=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-01T17:53:33Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-01T22:17:33Z"}, "message": "Add version = \"Two\" to rustfmt.toml\n\nIgnore UI tests since this change makes rustfmt less friendly with UI\ntest comments.", "tree": {"sha": "be2f7226659677a524c3373c03e040aeb85140fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2f7226659677a524c3373c03e040aeb85140fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada8c72f3f21013f789f774d4c0219c58264e663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada8c72f3f21013f789f774d4c0219c58264e663", "html_url": "https://github.com/rust-lang/rust/commit/ada8c72f3f21013f789f774d4c0219c58264e663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada8c72f3f21013f789f774d4c0219c58264e663/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae1e17e81276041b9aa9aca6e6f53385bff5acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae1e17e81276041b9aa9aca6e6f53385bff5acd", "html_url": "https://github.com/rust-lang/rust/commit/5ae1e17e81276041b9aa9aca6e6f53385bff5acd"}], "stats": {"total": 728, "additions": 225, "deletions": 503}, "files": [{"sha": "112c5bb14e3596c1e23842341ecf69782452b4bd", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -123,13 +123,13 @@ fn check_interior_types(cx: &LateContext<'_>, ty_causes: &[GeneratorInteriorType\n             }\n             if is_refcell_ref(cx, adt.did) {\n                 span_lint_and_note(\n-                        cx,\n-                        AWAIT_HOLDING_REFCELL_REF,\n-                        ty_cause.span,\n-                        \"this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\",\n-                        ty_cause.scope_span.or(Some(span)),\n-                        \"these are all the await points this ref is held through\",\n-                    );\n+                    cx,\n+                    AWAIT_HOLDING_REFCELL_REF,\n+                    ty_cause.span,\n+                    \"this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\",\n+                    ty_cause.scope_span.or(Some(span)),\n+                    \"these are all the await points this ref is held through\",\n+                );\n             }\n         }\n     }"}, {"sha": "8e256f346841947d6c075f110aab2345afaa6871", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -145,11 +145,7 @@ fn count_digits(s: &str) -> usize {\n         .take_while(|c| *c != 'e' && *c != 'E')\n         .fold(0, |count, c| {\n             // leading zeros\n-            if c == '0' && count == 0 {\n-                count\n-            } else {\n-                count + 1\n-            }\n+            if c == '0' && count == 0 { count } else { count + 1 }\n         })\n }\n "}, {"sha": "7040ac3191f3c69c78d4c1ac711d05aaf53a4e3e", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -89,11 +89,7 @@ impl Finiteness {\n impl From<bool> for Finiteness {\n     #[must_use]\n     fn from(b: bool) -> Self {\n-        if b {\n-            Infinite\n-        } else {\n-            Finite\n-        }\n+        if b { Infinite } else { Finite }\n     }\n }\n "}, {"sha": "c1f3e1d9d685c13809e93f128303c914722cfba7", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -139,7 +139,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n                 self_type.to_string()\n             ),\n             None,\n-            &format!(\"remove the inherent method from type `{}`\", self_type.to_string())\n+            &format!(\"remove the inherent method from type `{}`\", self_type.to_string()),\n         );\n     } else {\n         span_lint_and_help("}, {"sha": "711cd5b3b15cc64faf82bf2613bc78f98df186f1", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -3158,11 +3158,7 @@ fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident)\n         seen_other: false,\n     };\n     visitor.visit_block(block);\n-    if visitor.seen_other {\n-        None\n-    } else {\n-        Some(visitor.uses)\n-    }\n+    if visitor.seen_other { None } else { Some(visitor.uses) }\n }\n \n fn shorten_needless_collect_span(expr: &Expr<'_>) -> Span {"}, {"sha": "9ac127abe0a4b83dcaa25f88e371c192d66520b1", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -73,11 +73,7 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n     }\n \n     fn expr_span(&self) -> Option<Span> {\n-        if self.found {\n-            self.expr_span\n-        } else {\n-            None\n-        }\n+        if self.found { self.expr_span } else { None }\n     }\n }\n "}, {"sha": "30fe2d6225c8ae5004b029a41da5efc4d3ee50b4", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -416,11 +416,7 @@ fn erode_from_back(s: &str) -> String {\n             break;\n         }\n     }\n-    if ret.is_empty() {\n-        s.to_string()\n-    } else {\n-        ret\n-    }\n+    if ret.is_empty() { s.to_string() } else { ret }\n }\n \n fn span_of_first_expr_in_block(block: &ast::Block) -> Option<Span> {"}, {"sha": "07ca196990da9b71dcafa0ec395629b01f4b562b", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -69,15 +69,11 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n                         ..\n                     } = *span\n                     {\n-                        if lit {\n-                            Argument::True\n-                        } else {\n-                            Argument::False\n-                        }\n+                        if lit { Argument::True } else { Argument::False }\n                     } else {\n-                        return; // The function is called with a literal\n-                                // which is not a boolean literal. This is theoretically\n-                                // possible, but not very likely.\n+                        // The function is called with a literal which is not a boolean literal.\n+                        // This is theoretically possible, but not very likely.\n+                        return;\n                     }\n                 },\n                 _ => Argument::Unknown,"}, {"sha": "a6636e391374e13d4c75fe0a6effc0e08495ad6f", "filename": "clippy_utils/src/camel_case.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_utils%2Fsrc%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_utils%2Fsrc%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcamel_case.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -25,11 +25,7 @@ pub fn until(s: &str) -> usize {\n             return i;\n         }\n     }\n-    if up {\n-        last_i\n-    } else {\n-        s.len()\n-    }\n+    if up { last_i } else { s.len() }\n }\n \n /// Returns index of the last camel-case component of `s`."}, {"sha": "fbcc6d8dc4f1fbd9af2fe3db9c6a38223c7dbf11", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1563,12 +1563,12 @@ pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n /// ```\n pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n     use rustc_trait_selection::traits;\n-    let predicates =\n-        cx.tcx\n-            .predicates_of(did)\n-            .predicates\n-            .iter()\n-            .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n+    let predicates = cx\n+        .tcx\n+        .predicates_of(did)\n+        .predicates\n+        .iter()\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n     traits::impossible_predicates(\n         cx.tcx,\n         traits::elaborate_predicates(cx.tcx, predicates)"}, {"sha": "df6143edbcaf09a98ef6eb3bfcb88a8eb6123681", "filename": "clippy_utils/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_utils%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/clippy_utils%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fptr.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -36,11 +36,7 @@ fn extract_clone_suggestions<'tcx>(\n         abort: false,\n     };\n     visitor.visit_body(body);\n-    if visitor.abort {\n-        None\n-    } else {\n-        Some(visitor.spans)\n-    }\n+    if visitor.abort { None } else { Some(visitor.spans) }\n }\n \n struct PtrCloneVisitor<'a, 'tcx> {"}, {"sha": "4b415a31b272eab0995e7f6d8dec936ccdb0146a", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -4,3 +4,4 @@ match_block_trailing_comma = true\n wrap_comments = true\n edition = \"2018\"\n error_on_line_overflow = true\n+version = \"Two\""}, {"sha": "3f754c255b749b2ff2687ceb70252c6beacc1e8f", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -98,7 +98,9 @@ fn lint_message_convention() {\n         eprintln!(\"\\n\\n\");\n     });\n \n-    eprintln!(\"\\n\\n\\nLint message should not start with a capital letter and should not have punctuation at the end of the message unless multiple sentences are needed.\");\n+    eprintln!(\n+        \"\\n\\n\\nLint message should not start with a capital letter and should not have punctuation at the end of the message unless multiple sentences are needed.\"\n+    );\n     eprintln!(\"Check out the rustc-dev-guide for more information:\");\n     eprintln!(\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-structure\\n\\n\\n\");\n "}, {"sha": "735909887acb189ac97b01a63708ae738989a2b1", "filename": "tests/ui-toml/upper_case_acronyms_aggressive/upper_case_acronyms.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -16,7 +16,8 @@ enum Flags {\n     FIN,\n }\n \n-struct GCCLLVMSomething; // linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n-                         // `GccLlvmSomething`\n+// linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n+// `GccLlvmSomething`\n+struct GCCLLVMSomething;\n \n fn main() {}"}, {"sha": "38e30683d5797334698914c934ab473821dae750", "filename": "tests/ui-toml/upper_case_acronyms_aggressive/upper_case_acronyms.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -61,9 +61,9 @@ LL |     FIN,\n    |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Fin`\n \n error: name `GCCLLVMSomething` contains a capitalized acronym\n-  --> $DIR/upper_case_acronyms.rs:19:8\n+  --> $DIR/upper_case_acronyms.rs:21:8\n    |\n-LL | struct GCCLLVMSomething; // linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n+LL | struct GCCLLVMSomething;\n    |        ^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GccllvmSomething`\n \n error: aborting due to 11 previous errors"}, {"sha": "d4470d3f40708517027b62f158c11c692b70ecaf", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -23,11 +23,7 @@ macro_rules! try_err {\n         pub fn try_err_fn() -> Result<i32, i32> {\n             let err: i32 = 1;\n             // To avoid warnings during rustfix\n-            if true {\n-                Err(err)?\n-            } else {\n-                Ok(2)\n-            }\n+            if true { Err(err)? } else { Ok(2) }\n         }\n     };\n }"}, {"sha": "e6e40a9948c91880affcb75cc99c6d8f25627624", "filename": "tests/ui/blocks_in_if_conditions.fixed", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fblocks_in_if_conditions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fblocks_in_if_conditions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.fixed?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -4,9 +4,7 @@\n #![warn(clippy::nonminimal_bool)]\n \n macro_rules! blocky {\n-    () => {{\n-        true\n-    }};\n+    () => {{ true }};\n }\n \n macro_rules! blocky_too {\n@@ -34,20 +32,12 @@ fn condition_has_block() -> i32 {\n }\n \n fn condition_has_block_with_single_expression() -> i32 {\n-    if true {\n-        6\n-    } else {\n-        10\n-    }\n+    if true { 6 } else { 10 }\n }\n \n fn condition_is_normal() -> i32 {\n     let x = 3;\n-    if x == 3 {\n-        6\n-    } else {\n-        10\n-    }\n+    if x == 3 { 6 } else { 10 }\n }\n \n fn condition_is_unsafe_block() {\n@@ -61,14 +51,15 @@ fn condition_is_unsafe_block() {\n \n fn block_in_assert() {\n     let opt = Some(42);\n-    assert!(opt\n-        .as_ref()\n-        .map(|val| {\n-            let mut v = val * 2;\n-            v -= 1;\n-            v * 3\n-        })\n-        .is_some());\n+    assert!(\n+        opt.as_ref()\n+            .map(|val| {\n+                let mut v = val * 2;\n+                v -= 1;\n+                v * 3\n+            })\n+            .is_some()\n+    );\n }\n \n fn main() {}"}, {"sha": "69387ff5782b33d6451be91fe14c4a019dd1adf5", "filename": "tests/ui/blocks_in_if_conditions.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -4,9 +4,7 @@\n #![warn(clippy::nonminimal_bool)]\n \n macro_rules! blocky {\n-    () => {{\n-        true\n-    }};\n+    () => {{ true }};\n }\n \n macro_rules! blocky_too {\n@@ -34,20 +32,12 @@ fn condition_has_block() -> i32 {\n }\n \n fn condition_has_block_with_single_expression() -> i32 {\n-    if { true } {\n-        6\n-    } else {\n-        10\n-    }\n+    if { true } { 6 } else { 10 }\n }\n \n fn condition_is_normal() -> i32 {\n     let x = 3;\n-    if true && x == 3 {\n-        6\n-    } else {\n-        10\n-    }\n+    if true && x == 3 { 6 } else { 10 }\n }\n \n fn condition_is_unsafe_block() {\n@@ -61,14 +51,15 @@ fn condition_is_unsafe_block() {\n \n fn block_in_assert() {\n     let opt = Some(42);\n-    assert!(opt\n-        .as_ref()\n-        .map(|val| {\n-            let mut v = val * 2;\n-            v -= 1;\n-            v * 3\n-        })\n-        .is_some());\n+    assert!(\n+        opt.as_ref()\n+            .map(|val| {\n+                let mut v = val * 2;\n+                v -= 1;\n+                v * 3\n+            })\n+            .is_some()\n+    );\n }\n \n fn main() {}"}, {"sha": "9328492733fd8ce480d45612373267aee5f2024b", "filename": "tests/ui/blocks_in_if_conditions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fblocks_in_if_conditions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fblocks_in_if_conditions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,5 +1,5 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/blocks_in_if_conditions.rs:26:5\n+  --> $DIR/blocks_in_if_conditions.rs:24:5\n    |\n LL | /     if {\n LL | |         let x = 3;\n@@ -17,15 +17,15 @@ LL |     }; if res {\n    |\n \n error: omit braces around single expression condition\n-  --> $DIR/blocks_in_if_conditions.rs:37:8\n+  --> $DIR/blocks_in_if_conditions.rs:35:8\n    |\n-LL |     if { true } {\n+LL |     if { true } { 6 } else { 10 }\n    |        ^^^^^^^^ help: try: `true`\n \n error: this boolean expression can be simplified\n-  --> $DIR/blocks_in_if_conditions.rs:46:8\n+  --> $DIR/blocks_in_if_conditions.rs:40:8\n    |\n-LL |     if true && x == 3 {\n+LL |     if true && x == 3 { 6 } else { 10 }\n    |        ^^^^^^^^^^^^^^ help: try: `x == 3`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`"}, {"sha": "369676308348ff4e4c361343c512959e32dce9ed", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -66,14 +66,16 @@ fn main() {\n     }\n     if x.is_ok() {\n         x = Err(());\n-        x.unwrap(); // not unnecessary because of mutation of x\n-                    // it will always panic but the lint is not smart enough to see this (it only\n-                    // checks if conditions).\n+        // not unnecessary because of mutation of x\n+        // it will always panic but the lint is not smart enough to see this (it only\n+        // checks if conditions).\n+        x.unwrap();\n     } else {\n         x = Ok(());\n-        x.unwrap_err(); // not unnecessary because of mutation of x\n-                        // it will always panic but the lint is not smart enough to see this (it\n-                        // only checks if conditions).\n+        // not unnecessary because of mutation of x\n+        // it will always panic but the lint is not smart enough to see this (it\n+        // only checks if conditions).\n+        x.unwrap_err();\n     }\n \n     assert!(x.is_ok(), \"{:?}\", x.unwrap_err()); // ok, it's a common test pattern"}, {"sha": "67308263dadda67c160f9f436fa9fcb1c81542d1", "filename": "tests/ui/crashes/ice-6256.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fcrashes%2Fice-6256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fcrashes%2Fice-6256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -8,6 +8,7 @@ impl dyn TT {\n     fn func(&self) {}\n }\n \n+#[rustfmt::skip]\n fn main() {\n     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n                                    //[nll]~^ ERROR: borrowed data escapes outside of closure"}, {"sha": "d35d459168f23dc12f4ec7f55b460c52f68c9585", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/ice-6256.rs:12:28\n+  --> $DIR/ice-6256.rs:13:28\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |                            ^^^^ lifetime mismatch\n    |\n    = note: expected reference `&(dyn TT + 'static)`\n               found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined on the body at 12:13...\n-  --> $DIR/ice-6256.rs:12:13\n+note: the anonymous lifetime #1 defined on the body at 13:13...\n+  --> $DIR/ice-6256.rs:13:13\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |             ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d74e2611ee1fdad6c0596fe35ed44ef353317c6a", "filename": "tests/ui/dbg_macro.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,11 +1,7 @@\n #![warn(clippy::dbg_macro)]\n \n fn foo(n: u32) -> u32 {\n-    if let Some(n) = dbg!(n.checked_sub(4)) {\n-        n\n-    } else {\n-        n\n-    }\n+    if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n }\n \n fn factorial(n: u32) -> u32 {"}, {"sha": "bdf372af2907502aa13ea597e68e166bf259fd3a", "filename": "tests/ui/dbg_macro.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,17 +1,17 @@\n error: `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:4:22\n    |\n-LL |     if let Some(n) = dbg!(n.checked_sub(4)) {\n+LL |     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n    |                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::dbg-macro` implied by `-D warnings`\n help: ensure to avoid having uses of it in version control\n    |\n-LL |     if let Some(n) = n.checked_sub(4) {\n+LL |     if let Some(n) = n.checked_sub(4) { n } else { n }\n    |                      ^^^^^^^^^^^^^^^^\n \n error: `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:12:8\n+  --> $DIR/dbg_macro.rs:8:8\n    |\n LL |     if dbg!(n <= 1) {\n    |        ^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     if n <= 1 {\n    |        ^^^^^^\n \n error: `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:13:9\n+  --> $DIR/dbg_macro.rs:9:9\n    |\n LL |         dbg!(1)\n    |         ^^^^^^^\n@@ -33,7 +33,7 @@ LL |         1\n    |\n \n error: `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:15:9\n+  --> $DIR/dbg_macro.rs:11:9\n    |\n LL |         dbg!(n * factorial(n - 1))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |         n * factorial(n - 1)\n    |\n \n error: `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:20:5\n+  --> $DIR/dbg_macro.rs:16:5\n    |\n LL |     dbg!(42);\n    |     ^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     42;\n    |     ^^\n \n error: `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:21:5\n+  --> $DIR/dbg_macro.rs:17:5\n    |\n LL |     dbg!(dbg!(dbg!(42)));\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     dbg!(dbg!(42));\n    |     ^^^^^^^^^^^^^^\n \n error: `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:22:14\n+  --> $DIR/dbg_macro.rs:18:14\n    |\n LL |     foo(3) + dbg!(factorial(4));\n    |              ^^^^^^^^^^^^^^^^^^"}, {"sha": "4c80cabc72305df9371c2854536d7195c7157279", "filename": "tests/ui/default_trait_access.fixed", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -48,25 +48,7 @@ fn main() {\n \n     println!(\n         \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}], [{:?}]\",\n-        s1,\n-        s2,\n-        s3,\n-        s4,\n-        s5,\n-        s6,\n-        s7,\n-        s8,\n-        s9,\n-        s10,\n-        s11,\n-        s12,\n-        s13,\n-        s14,\n-        s15,\n-        s16,\n-        s17,\n-        s18,\n-        s19,\n+        s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19,\n     );\n }\n "}, {"sha": "a68b6455c04165f683f4678aae1978a876b4725f", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -48,25 +48,7 @@ fn main() {\n \n     println!(\n         \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}], [{:?}]\",\n-        s1,\n-        s2,\n-        s3,\n-        s4,\n-        s5,\n-        s6,\n-        s7,\n-        s8,\n-        s9,\n-        s10,\n-        s11,\n-        s12,\n-        s13,\n-        s14,\n-        s15,\n-        s16,\n-        s17,\n-        s18,\n-        s19,\n+        s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19,\n     );\n }\n "}, {"sha": "17e72353f80391975c7ce7a018d82154f83bfea2", "filename": "tests/ui/doc_panics.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdoc_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdoc_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_panics.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -30,11 +30,7 @@ pub fn inner_body(opt: Option<u32>) {\n \n /// This needs to be documented\n pub fn unreachable_and_panic() {\n-    if true {\n-        unreachable!()\n-    } else {\n-        panic!()\n-    }\n+    if true { unreachable!() } else { panic!() }\n }\n \n /// This is documented\n@@ -84,11 +80,7 @@ pub fn todo_documented() {\n ///\n /// We still need to do this part\n pub fn unreachable_amd_panic_documented() {\n-    if true {\n-        unreachable!()\n-    } else {\n-        panic!()\n-    }\n+    if true { unreachable!() } else { panic!() }\n }\n \n /// This is okay because it is private"}, {"sha": "2fa88a2f6ec4bd76ddeec0207af7165209e47965", "filename": "tests/ui/doc_panics.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdoc_panics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fdoc_panics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_panics.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -67,19 +67,15 @@ error: docs for function which may panic missing `# Panics` section\n   --> $DIR/doc_panics.rs:32:1\n    |\n LL | / pub fn unreachable_and_panic() {\n-LL | |     if true {\n-LL | |         unreachable!()\n-LL | |     } else {\n-LL | |         panic!()\n-LL | |     }\n+LL | |     if true { unreachable!() } else { panic!() }\n LL | | }\n    | |_^\n    |\n note: first possible panic found here\n-  --> $DIR/doc_panics.rs:36:9\n+  --> $DIR/doc_panics.rs:33:39\n    |\n-LL |         panic!()\n-   |         ^^^^^^^^\n+LL |     if true { unreachable!() } else { panic!() }\n+   |                                       ^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors"}, {"sha": "ad5d1a09c0345b54e36642758d86e70d409e1695", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -21,19 +21,11 @@ where\n }\n \n fn eq_fl(x: f32, y: f32) -> bool {\n-    if x.is_nan() {\n-        y.is_nan()\n-    } else {\n-        x == y\n-    } // no error, inside \"eq\" fn\n+    if x.is_nan() { y.is_nan() } else { x == y } // no error, inside \"eq\" fn\n }\n \n fn fl_eq(x: f32, y: f32) -> bool {\n-    if x.is_nan() {\n-        y.is_nan()\n-    } else {\n-        x == y\n-    } // no error, inside \"eq\" fn\n+    if x.is_nan() { y.is_nan() } else { x == y } // no error, inside \"eq\" fn\n }\n \n struct X {"}, {"sha": "cb5b68b2e958500d00ffe8a2c7d9f3a61fc54d9d", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,5 +1,5 @@\n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:66:5\n+  --> $DIR/float_cmp.rs:58:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(ONE as f64 - 2.0).abs() > error_margin`\n@@ -8,39 +8,39 @@ LL |     ONE as f64 != 2.0;\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:71:5\n+  --> $DIR/float_cmp.rs:63:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some margin of error: `(x - 1.0).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:74:5\n+  --> $DIR/float_cmp.rs:66:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(twice(x) - twice(ONE as f64)).abs() > error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:94:5\n+  --> $DIR/float_cmp.rs:86:5\n    |\n LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` arrays\n-  --> $DIR/float_cmp.rs:99:5\n+  --> $DIR/float_cmp.rs:91:5\n    |\n LL |     a1 == a2;\n    |     ^^^^^^^^\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:100:5\n+  --> $DIR/float_cmp.rs:92:5\n    |\n LL |     a1[0] == a2[0];\n    |     ^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(a1[0] - a2[0]).abs() < error_margin`"}, {"sha": "86ce3bf3bd9924a835f0620bb8cab0fe7662ec53", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -8,11 +8,7 @@ const ONE: f32 = 1.0;\n const TWO: f32 = 2.0;\n \n fn eq_one(x: f32) -> bool {\n-    if x.is_nan() {\n-        false\n-    } else {\n-        x == ONE\n-    } // no error, inside \"eq\" fn\n+    if x.is_nan() { false } else { x == ONE } // no error, inside \"eq\" fn\n }\n \n fn main() {"}, {"sha": "d8182cf855b082190869047a6c6904f27f735917", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,5 +1,5 @@\n error: strict comparison of `f32` or `f64` constant\n-  --> $DIR/float_cmp_const.rs:20:5\n+  --> $DIR/float_cmp_const.rs:16:5\n    |\n LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some margin of error: `(1f32 - ONE).abs() < error_margin`\n@@ -8,55 +8,55 @@ LL |     1f32 == ONE;\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n-  --> $DIR/float_cmp_const.rs:21:5\n+  --> $DIR/float_cmp_const.rs:17:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some margin of error: `(TWO - ONE).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n-  --> $DIR/float_cmp_const.rs:22:5\n+  --> $DIR/float_cmp_const.rs:18:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some margin of error: `(TWO - ONE).abs() > error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n-  --> $DIR/float_cmp_const.rs:23:5\n+  --> $DIR/float_cmp_const.rs:19:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(ONE + ONE - TWO).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n-  --> $DIR/float_cmp_const.rs:25:5\n+  --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(x as f32 - ONE).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n-  --> $DIR/float_cmp_const.rs:28:5\n+  --> $DIR/float_cmp_const.rs:24:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some margin of error: `(v - ONE).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant\n-  --> $DIR/float_cmp_const.rs:29:5\n+  --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some margin of error: `(v - ONE).abs() > error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` constant arrays\n-  --> $DIR/float_cmp_const.rs:61:5\n+  --> $DIR/float_cmp_const.rs:57:5\n    |\n LL |     NON_ZERO_ARRAY == NON_ZERO_ARRAY2;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "cea727257c430fa49215513fc2b50a7661b50202", "filename": "tests/ui/floating_point_abs.fixed", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloating_point_abs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloating_point_abs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.fixed?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -42,43 +42,23 @@ fn fake_nabs3(a: A) -> A {\n }\n \n fn not_fake_abs1(num: f64) -> f64 {\n-    if num > 0.0 {\n-        num\n-    } else {\n-        -num - 1f64\n-    }\n+    if num > 0.0 { num } else { -num - 1f64 }\n }\n \n fn not_fake_abs2(num: f64) -> f64 {\n-    if num > 0.0 {\n-        num + 1.0\n-    } else {\n-        -(num + 1.0)\n-    }\n+    if num > 0.0 { num + 1.0 } else { -(num + 1.0) }\n }\n \n fn not_fake_abs3(num1: f64, num2: f64) -> f64 {\n-    if num1 > 0.0 {\n-        num2\n-    } else {\n-        -num2\n-    }\n+    if num1 > 0.0 { num2 } else { -num2 }\n }\n \n fn not_fake_abs4(a: A) -> f64 {\n-    if a.a > 0.0 {\n-        a.b\n-    } else {\n-        -a.b\n-    }\n+    if a.a > 0.0 { a.b } else { -a.b }\n }\n \n fn not_fake_abs5(a: A) -> f64 {\n-    if a.a > 0.0 {\n-        a.a\n-    } else {\n-        -a.b\n-    }\n+    if a.a > 0.0 { a.a } else { -a.b }\n }\n \n fn main() {"}, {"sha": "ba8a8f18fa23139a8f08b1767b13ceb6ebec874a", "filename": "tests/ui/floating_point_abs.rs", "status": "modified", "additions": 12, "deletions": 60, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloating_point_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloating_point_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -7,59 +7,31 @@ struct A {\n }\n \n fn fake_abs1(num: f64) -> f64 {\n-    if num >= 0.0 {\n-        num\n-    } else {\n-        -num\n-    }\n+    if num >= 0.0 { num } else { -num }\n }\n \n fn fake_abs2(num: f64) -> f64 {\n-    if 0.0 < num {\n-        num\n-    } else {\n-        -num\n-    }\n+    if 0.0 < num { num } else { -num }\n }\n \n fn fake_abs3(a: A) -> f64 {\n-    if a.a > 0.0 {\n-        a.a\n-    } else {\n-        -a.a\n-    }\n+    if a.a > 0.0 { a.a } else { -a.a }\n }\n \n fn fake_abs4(num: f64) -> f64 {\n-    if 0.0 >= num {\n-        -num\n-    } else {\n-        num\n-    }\n+    if 0.0 >= num { -num } else { num }\n }\n \n fn fake_abs5(a: A) -> f64 {\n-    if a.a < 0.0 {\n-        -a.a\n-    } else {\n-        a.a\n-    }\n+    if a.a < 0.0 { -a.a } else { a.a }\n }\n \n fn fake_nabs1(num: f64) -> f64 {\n-    if num < 0.0 {\n-        num\n-    } else {\n-        -num\n-    }\n+    if num < 0.0 { num } else { -num }\n }\n \n fn fake_nabs2(num: f64) -> f64 {\n-    if 0.0 >= num {\n-        num\n-    } else {\n-        -num\n-    }\n+    if 0.0 >= num { num } else { -num }\n }\n \n fn fake_nabs3(a: A) -> A {\n@@ -70,43 +42,23 @@ fn fake_nabs3(a: A) -> A {\n }\n \n fn not_fake_abs1(num: f64) -> f64 {\n-    if num > 0.0 {\n-        num\n-    } else {\n-        -num - 1f64\n-    }\n+    if num > 0.0 { num } else { -num - 1f64 }\n }\n \n fn not_fake_abs2(num: f64) -> f64 {\n-    if num > 0.0 {\n-        num + 1.0\n-    } else {\n-        -(num + 1.0)\n-    }\n+    if num > 0.0 { num + 1.0 } else { -(num + 1.0) }\n }\n \n fn not_fake_abs3(num1: f64, num2: f64) -> f64 {\n-    if num1 > 0.0 {\n-        num2\n-    } else {\n-        -num2\n-    }\n+    if num1 > 0.0 { num2 } else { -num2 }\n }\n \n fn not_fake_abs4(a: A) -> f64 {\n-    if a.a > 0.0 {\n-        a.b\n-    } else {\n-        -a.b\n-    }\n+    if a.a > 0.0 { a.b } else { -a.b }\n }\n \n fn not_fake_abs5(a: A) -> f64 {\n-    if a.a > 0.0 {\n-        a.a\n-    } else {\n-        -a.b\n-    }\n+    if a.a > 0.0 { a.a } else { -a.b }\n }\n \n fn main() {"}, {"sha": "35af70201fada7fc081d2992ac97ac8c380fd56d", "filename": "tests/ui/floating_point_abs.stderr", "status": "modified", "additions": 21, "deletions": 49, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloating_point_abs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Ffloating_point_abs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,77 +1,49 @@\n error: manual implementation of `abs` method\n   --> $DIR/floating_point_abs.rs:10:5\n    |\n-LL | /     if num >= 0.0 {\n-LL | |         num\n-LL | |     } else {\n-LL | |         -num\n-LL | |     }\n-   | |_____^ help: try: `num.abs()`\n+LL |     if num >= 0.0 { num } else { -num }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.abs()`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:18:5\n+  --> $DIR/floating_point_abs.rs:14:5\n    |\n-LL | /     if 0.0 < num {\n-LL | |         num\n-LL | |     } else {\n-LL | |         -num\n-LL | |     }\n-   | |_____^ help: try: `num.abs()`\n+LL |     if 0.0 < num { num } else { -num }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.abs()`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:26:5\n+  --> $DIR/floating_point_abs.rs:18:5\n    |\n-LL | /     if a.a > 0.0 {\n-LL | |         a.a\n-LL | |     } else {\n-LL | |         -a.a\n-LL | |     }\n-   | |_____^ help: try: `a.a.abs()`\n+LL |     if a.a > 0.0 { a.a } else { -a.a }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.a.abs()`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:34:5\n+  --> $DIR/floating_point_abs.rs:22:5\n    |\n-LL | /     if 0.0 >= num {\n-LL | |         -num\n-LL | |     } else {\n-LL | |         num\n-LL | |     }\n-   | |_____^ help: try: `num.abs()`\n+LL |     if 0.0 >= num { -num } else { num }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.abs()`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:42:5\n+  --> $DIR/floating_point_abs.rs:26:5\n    |\n-LL | /     if a.a < 0.0 {\n-LL | |         -a.a\n-LL | |     } else {\n-LL | |         a.a\n-LL | |     }\n-   | |_____^ help: try: `a.a.abs()`\n+LL |     if a.a < 0.0 { -a.a } else { a.a }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.a.abs()`\n \n error: manual implementation of negation of `abs` method\n-  --> $DIR/floating_point_abs.rs:50:5\n+  --> $DIR/floating_point_abs.rs:30:5\n    |\n-LL | /     if num < 0.0 {\n-LL | |         num\n-LL | |     } else {\n-LL | |         -num\n-LL | |     }\n-   | |_____^ help: try: `-num.abs()`\n+LL |     if num < 0.0 { num } else { -num }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-num.abs()`\n \n error: manual implementation of negation of `abs` method\n-  --> $DIR/floating_point_abs.rs:58:5\n+  --> $DIR/floating_point_abs.rs:34:5\n    |\n-LL | /     if 0.0 >= num {\n-LL | |         num\n-LL | |     } else {\n-LL | |         -num\n-LL | |     }\n-   | |_____^ help: try: `-num.abs()`\n+LL |     if 0.0 >= num { num } else { -num }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-num.abs()`\n \n error: manual implementation of negation of `abs` method\n-  --> $DIR/floating_point_abs.rs:67:12\n+  --> $DIR/floating_point_abs.rs:39:12\n    |\n LL |         a: if a.a >= 0.0 { -a.a } else { a.a },\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-a.a.abs()`"}, {"sha": "62a25ce2d128c4670a68164511230f27c5718f9c", "filename": "tests/ui/if_let_some_result.fixed", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fif_let_some_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fif_let_some_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.fixed?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -3,19 +3,11 @@\n #![warn(clippy::if_let_some_result)]\n \n fn str_to_int(x: &str) -> i32 {\n-    if let Ok(y) = x.parse() {\n-        y\n-    } else {\n-        0\n-    }\n+    if let Ok(y) = x.parse() { y } else { 0 }\n }\n \n fn str_to_int_ok(x: &str) -> i32 {\n-    if let Ok(y) = x.parse() {\n-        y\n-    } else {\n-        0\n-    }\n+    if let Ok(y) = x.parse() { y } else { 0 }\n }\n \n #[rustfmt::skip]"}, {"sha": "234ff5e9e80e2c384c2849d3f2e6b884d8d878ee", "filename": "tests/ui/if_let_some_result.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -3,19 +3,11 @@\n #![warn(clippy::if_let_some_result)]\n \n fn str_to_int(x: &str) -> i32 {\n-    if let Some(y) = x.parse().ok() {\n-        y\n-    } else {\n-        0\n-    }\n+    if let Some(y) = x.parse().ok() { y } else { 0 }\n }\n \n fn str_to_int_ok(x: &str) -> i32 {\n-    if let Ok(y) = x.parse() {\n-        y\n-    } else {\n-        0\n-    }\n+    if let Ok(y) = x.parse() { y } else { 0 }\n }\n \n #[rustfmt::skip]"}, {"sha": "0646dd27f35e8ebd6072a2d7fd145a22abe1d2dc", "filename": "tests/ui/if_let_some_result.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fif_let_some_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fif_let_some_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -1,17 +1,17 @@\n error: matching on `Some` with `ok()` is redundant\n   --> $DIR/if_let_some_result.rs:6:5\n    |\n-LL |     if let Some(y) = x.parse().ok() {\n+LL |     if let Some(y) = x.parse().ok() { y } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::if-let-some-result` implied by `-D warnings`\n help: consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n-LL |     if let Ok(y) = x.parse() {\n+LL |     if let Ok(y) = x.parse() { y } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: matching on `Some` with `ok()` is redundant\n-  --> $DIR/if_let_some_result.rs:24:9\n+  --> $DIR/if_let_some_result.rs:16:9\n    |\n LL |         if let Some(y) = x   .   parse()   .   ok   ()    {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "59f7ad9c1062490f66039c203abba078c53fbbbe", "filename": "tests/ui/implicit_return.fixed", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fimplicit_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fimplicit_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.fixed?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -14,11 +14,7 @@ fn test_end_of_fn() -> bool {\n \n #[allow(clippy::needless_bool)]\n fn test_if_block() -> bool {\n-    if true {\n-        return true\n-    } else {\n-        return false\n-    }\n+    if true { return true } else { return false }\n }\n \n #[rustfmt::skip]"}, {"sha": "2c1bc046515089a7ea73f93969df248168a7164b", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -14,11 +14,7 @@ fn test_end_of_fn() -> bool {\n \n #[allow(clippy::needless_bool)]\n fn test_if_block() -> bool {\n-    if true {\n-        true\n-    } else {\n-        false\n-    }\n+    if true { true } else { false }\n }\n \n #[rustfmt::skip]"}, {"sha": "3608319e5bd2cc5e770cac96b0fcad9c839f4c6c", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -7,61 +7,61 @@ LL |     true\n    = note: `-D clippy::implicit-return` implied by `-D warnings`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:18:9\n+  --> $DIR/implicit_return.rs:17:15\n    |\n-LL |         true\n-   |         ^^^^ help: add `return` as shown: `return true`\n+LL |     if true { true } else { false }\n+   |               ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:20:9\n+  --> $DIR/implicit_return.rs:17:29\n    |\n-LL |         false\n-   |         ^^^^^ help: add `return` as shown: `return false`\n+LL |     if true { true } else { false }\n+   |                             ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:27:17\n+  --> $DIR/implicit_return.rs:23:17\n    |\n LL |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:28:20\n+  --> $DIR/implicit_return.rs:24:20\n    |\n LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:43:9\n+  --> $DIR/implicit_return.rs:39:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:51:13\n+  --> $DIR/implicit_return.rs:47:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:60:13\n+  --> $DIR/implicit_return.rs:56:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:78:18\n+  --> $DIR/implicit_return.rs:74:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:79:16\n+  --> $DIR/implicit_return.rs:75:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:87:5\n+  --> $DIR/implicit_return.rs:83:5\n    |\n LL |     format!(\"test {}\", \"test\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `return` as shown: `return format!(\"test {}\", \"test\")`"}, {"sha": "bda0801e51c7f8663f648edd0eac8bae30898863", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -105,11 +105,7 @@ fn fn_bound_3_cannot_elide() {\n \n // No error; multiple input refs.\n fn fn_bound_4<'a, F: FnOnce() -> &'a ()>(cond: bool, x: &'a (), f: F) -> &'a () {\n-    if cond {\n-        x\n-    } else {\n-        f()\n-    }\n+    if cond { x } else { f() }\n }\n \n struct X {"}, {"sha": "33a6de1618d12c1a509df271c43b8f57e11d9282", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -43,109 +43,109 @@ LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:120:5\n+  --> $DIR/needless_lifetimes.rs:116:5\n    |\n LL |     fn self_and_out<'s>(&'s self) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:129:5\n+  --> $DIR/needless_lifetimes.rs:125:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:148:1\n+  --> $DIR/needless_lifetimes.rs:144:1\n    |\n LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:178:1\n+  --> $DIR/needless_lifetimes.rs:174:1\n    |\n LL | fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:184:1\n+  --> $DIR/needless_lifetimes.rs:180:1\n    |\n LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:203:1\n+  --> $DIR/needless_lifetimes.rs:199:1\n    |\n LL | fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:211:1\n+  --> $DIR/needless_lifetimes.rs:207:1\n    |\n LL | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:247:1\n+  --> $DIR/needless_lifetimes.rs:243:1\n    |\n LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:254:9\n+  --> $DIR/needless_lifetimes.rs:250:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:258:9\n+  --> $DIR/needless_lifetimes.rs:254:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:271:9\n+  --> $DIR/needless_lifetimes.rs:267:9\n    |\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:300:5\n+  --> $DIR/needless_lifetimes.rs:296:5\n    |\n LL |     fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:303:5\n+  --> $DIR/needless_lifetimes.rs:299:5\n    |\n LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:312:5\n+  --> $DIR/needless_lifetimes.rs:308:5\n    |\n LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:324:5\n+  --> $DIR/needless_lifetimes.rs:320:5\n    |\n LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:339:5\n+  --> $DIR/needless_lifetimes.rs:335:5\n    |\n LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:352:5\n+  --> $DIR/needless_lifetimes.rs:348:5\n    |\n LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:355:5\n+  --> $DIR/needless_lifetimes.rs:351:5\n    |\n LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ec309109ed52b485d015f5309c87fe93264776ed", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -59,11 +59,7 @@ fn main() {\n #[derive(Clone)]\n struct Alpha;\n fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {\n-    if b {\n-        (a.clone(), a)\n-    } else {\n-        (Alpha, a)\n-    }\n+    if b { (a.clone(), a) } else { (Alpha, a) }\n }\n \n fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {"}, {"sha": "b57027456e094fcdf95584cef10c1e3eca75f6e2", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -59,11 +59,7 @@ fn main() {\n #[derive(Clone)]\n struct Alpha;\n fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {\n-    if b {\n-        (a.clone(), a.clone())\n-    } else {\n-        (Alpha, a)\n-    }\n+    if b { (a.clone(), a.clone()) } else { (Alpha, a) }\n }\n \n fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {"}, {"sha": "821e7934be8d018c44dc016539a0b979557b7f50", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -108,61 +108,61 @@ LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:63:22\n+  --> $DIR/redundant_clone.rs:62:25\n    |\n-LL |         (a.clone(), a.clone())\n-   |                      ^^^^^^^^ help: remove this\n+LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }\n+   |                         ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:63:21\n+  --> $DIR/redundant_clone.rs:62:24\n    |\n-LL |         (a.clone(), a.clone())\n-   |                     ^\n+LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }\n+   |                        ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:123:15\n+  --> $DIR/redundant_clone.rs:119:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:123:14\n+  --> $DIR/redundant_clone.rs:119:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:124:15\n+  --> $DIR/redundant_clone.rs:120:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:124:14\n+  --> $DIR/redundant_clone.rs:120:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:134:19\n+  --> $DIR/redundant_clone.rs:130:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:134:18\n+  --> $DIR/redundant_clone.rs:130:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:146:14\n+  --> $DIR/redundant_clone.rs:142:14\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n note: cloned value is neither consumed nor mutated\n-  --> $DIR/redundant_clone.rs:146:13\n+  --> $DIR/redundant_clone.rs:142:13\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^"}, {"sha": "54f22e3ee6a4acab5cc6d94444eb4c8b082c0d8d", "filename": "tests/ui/unnecessary_wraps.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -22,29 +22,17 @@ fn func2(a: bool, b: bool) -> Option<i32> {\n     if a && b {\n         return Some(10);\n     }\n-    if a {\n-        Some(20)\n-    } else {\n-        Some(30)\n-    }\n+    if a { Some(20) } else { Some(30) }\n }\n \n // public fns should not be linted\n pub fn func3(a: bool) -> Option<i32> {\n-    if a {\n-        Some(1)\n-    } else {\n-        Some(1)\n-    }\n+    if a { Some(1) } else { Some(1) }\n }\n \n // should not be linted\n fn func4(a: bool) -> Option<i32> {\n-    if a {\n-        Some(1)\n-    } else {\n-        None\n-    }\n+    if a { Some(1) } else { None }\n }\n \n // should be linted\n@@ -64,11 +52,7 @@ fn func7() -> Result<i32, ()> {\n \n // should not be linted\n fn func8(a: bool) -> Result<i32, ()> {\n-    if a {\n-        Ok(1)\n-    } else {\n-        Err(())\n-    }\n+    if a { Ok(1) } else { Err(()) }\n }\n \n // should not be linted\n@@ -143,20 +127,12 @@ fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n \n // should not be linted\n fn issue_6640_3() -> Option<()> {\n-    if true {\n-        Some(())\n-    } else {\n-        None\n-    }\n+    if true { Some(()) } else { None }\n }\n \n // should not be linted\n fn issue_6640_4() -> Result<(), ()> {\n-    if true {\n-        Ok(())\n-    } else {\n-        Err(())\n-    }\n+    if true { Ok(()) } else { Err(()) }\n }\n \n fn main() {"}, {"sha": "0e570397e2a298c3dd189fa7be528be194b2dfcf", "filename": "tests/ui/unnecessary_wraps.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -32,8 +32,7 @@ LL | / fn func2(a: bool, b: bool) -> Option<i32> {\n LL | |     if a && b {\n LL | |         return Some(10);\n LL | |     }\n-...  |\n-LL | |     }\n+LL | |     if a { Some(20) } else { Some(30) }\n LL | | }\n    | |_^\n    |\n@@ -45,14 +44,11 @@ help: ...and then change returning expressions\n    |\n LL |         return 10;\n LL |     }\n-LL |     if a {\n-LL |         20\n-LL |     } else {\n-LL |         30\n+LL |     if a { 20 } else { 30 }\n    |\n \n error: this function's return value is unnecessarily wrapped by `Option`\n-  --> $DIR/unnecessary_wraps.rs:51:1\n+  --> $DIR/unnecessary_wraps.rs:39:1\n    |\n LL | / fn func5() -> Option<i32> {\n LL | |     Some(1)\n@@ -69,7 +65,7 @@ LL |     1\n    |\n \n error: this function's return value is unnecessarily wrapped by `Result`\n-  --> $DIR/unnecessary_wraps.rs:61:1\n+  --> $DIR/unnecessary_wraps.rs:49:1\n    |\n LL | / fn func7() -> Result<i32, ()> {\n LL | |     Ok(1)\n@@ -86,7 +82,7 @@ LL |     1\n    |\n \n error: this function's return value is unnecessarily wrapped by `Option`\n-  --> $DIR/unnecessary_wraps.rs:93:5\n+  --> $DIR/unnecessary_wraps.rs:77:5\n    |\n LL | /     fn func12() -> Option<i32> {\n LL | |         Some(1)\n@@ -103,7 +99,7 @@ LL |         1\n    |\n \n error: this function's return value is unnecessary\n-  --> $DIR/unnecessary_wraps.rs:120:1\n+  --> $DIR/unnecessary_wraps.rs:104:1\n    |\n LL | / fn issue_6640_1(a: bool, b: bool) -> Option<()> {\n LL | |     if a && b {\n@@ -129,7 +125,7 @@ LL |     } else {\n  ...\n \n error: this function's return value is unnecessary\n-  --> $DIR/unnecessary_wraps.rs:133:1\n+  --> $DIR/unnecessary_wraps.rs:117:1\n    |\n LL | / fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n LL | |     if a && b {"}, {"sha": "735909887acb189ac97b01a63708ae738989a2b1", "filename": "tests/ui/upper_case_acronyms.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -16,7 +16,8 @@ enum Flags {\n     FIN,\n }\n \n-struct GCCLLVMSomething; // linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n-                         // `GccLlvmSomething`\n+// linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n+// `GccLlvmSomething`\n+struct GCCLLVMSomething;\n \n fn main() {}"}, {"sha": "2b22a2ed2d56562fb70e88a3f69f87da544bcc84", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -329,11 +329,7 @@ mod issue4140 {\n         type To = Self;\n \n         fn from(value: bool) -> Self {\n-            if value {\n-                100\n-            } else {\n-                0\n-            }\n+            if value { 100 } else { 0 }\n         }\n     }\n }"}, {"sha": "609625abdec0a70d06c9ef8a50432f57c2e3c108", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -329,11 +329,7 @@ mod issue4140 {\n         type To = Self;\n \n         fn from(value: bool) -> Self {\n-            if value {\n-                100\n-            } else {\n-                0\n-            }\n+            if value { 100 } else { 0 }\n         }\n     }\n }"}, {"sha": "e1410d2e652c133008c402b6c337ace873d25439", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ada8c72f3f21013f789f774d4c0219c58264e663/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=ada8c72f3f21013f789f774d4c0219c58264e663", "patch": "@@ -169,7 +169,7 @@ LL |         type To = T::To;\n    |                   ^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:457:13\n+  --> $DIR/use_self.rs:453:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`"}]}