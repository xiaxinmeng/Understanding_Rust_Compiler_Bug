{"sha": "33b530e04099465a8029ef581202d52f4075558e", "node_id": "C_kwDOAAsO6NoAKDMzYjUzMGUwNDA5OTQ2NWE4MDI5ZWY1ODEyMDJkNTJmNDA3NTU1OGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T09:21:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T09:21:35Z"}, "message": "Auto merge of #103714 - matthiaskrgr:rollup-kajt3i8, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #102961 (Make `CStr::from_ptr` `const`.)\n - #103342 (Add test for issue 98634)\n - #103383 (Note scope of TAIT more accurately)\n - #103656 (Specialize ToString for Symbol)\n - #103663 (rustdoc: remove redundant CSS/DOM `div.search-container`)\n - #103664 (rustdoc-json-types: Improve ItemSummary::path docs)\n - #103704 (Add a test for TAIT used with impl/dyn Trait inside RPIT)\n\nFailed merges:\n\n - #103618 (Rename some `OwnerId` fields.)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fe161be1e2cf8a7882759b1da9e548030efd642f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe161be1e2cf8a7882759b1da9e548030efd642f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b530e04099465a8029ef581202d52f4075558e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b530e04099465a8029ef581202d52f4075558e", "html_url": "https://github.com/rust-lang/rust/commit/33b530e04099465a8029ef581202d52f4075558e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b530e04099465a8029ef581202d52f4075558e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607878d069267e1402ad792c9331b426e4c6d0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/607878d069267e1402ad792c9331b426e4c6d0f9", "html_url": "https://github.com/rust-lang/rust/commit/607878d069267e1402ad792c9331b426e4c6d0f9"}, {"sha": "cc8040e734941bb17ef6e80b0eb55366390eaeba", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8040e734941bb17ef6e80b0eb55366390eaeba", "html_url": "https://github.com/rust-lang/rust/commit/cc8040e734941bb17ef6e80b0eb55366390eaeba"}], "stats": {"total": 279, "additions": 232, "deletions": 47}, "files": [{"sha": "74088f4dfbe70d46b03b4a96a554a0c216e32d62", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -93,7 +93,7 @@ hir_analysis_expected_default_return_type = expected `()` because of default ret\n hir_analysis_expected_return_type = expected `{$expected}` because of return type\n \n hir_analysis_unconstrained_opaque_type = unconstrained opaque type\n-    .note = `{$name}` must be used in combination with a concrete type within the same module\n+    .note = `{$name}` must be used in combination with a concrete type within the same {$what}\n \n hir_analysis_missing_type_params =\n     the type {$parameterCount ->"}, {"sha": "45d2f23f36b567a94ccc681161c1e992bf1d136c", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -701,6 +701,12 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n         tcx.sess.emit_err(UnconstrainedOpaqueType {\n             span: tcx.def_span(def_id),\n             name: tcx.item_name(tcx.local_parent(def_id).to_def_id()),\n+            what: match tcx.hir().get(scope) {\n+                _ if scope == hir::CRATE_HIR_ID => \"module\",\n+                Node::Item(hir::Item { kind: hir::ItemKind::Mod(_), .. }) => \"module\",\n+                Node::Item(hir::Item { kind: hir::ItemKind::Impl(_), .. }) => \"impl\",\n+                _ => \"item\",\n+            },\n         });\n         return tcx.ty_error();\n     };"}, {"sha": "d5b1a7ce1c26967ff058457b99a76b7db87e9c2f", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -143,6 +143,7 @@ pub struct UnconstrainedOpaqueType {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n+    pub what: &'static str,\n }\n \n pub struct MissingTypeParams {"}, {"sha": "7f16da52b4439d587fb3e0659400e4cecc056a0d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -1901,6 +1901,13 @@ impl fmt::Display for Symbol {\n     }\n }\n \n+// takes advantage of `str::to_string` specialization\n+impl ToString for Symbol {\n+    fn to_string(&self) -> String {\n+        self.as_str().to_string()\n+    }\n+}\n+\n impl<S: Encoder> Encodable<S> for Symbol {\n     default fn encode(&self, s: &mut S) {\n         s.emit_str(self.as_str());"}, {"sha": "8923f548adf7234ce065ea8f80c0ea3675dee74b", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -221,9 +221,7 @@ impl CStr {\n     /// # Examples\n     ///\n     /// ```ignore (extern-declaration)\n-    /// # fn main() {\n-    /// use std::ffi::CStr;\n-    /// use std::os::raw::c_char;\n+    /// use std::ffi::{c_char, CStr};\n     ///\n     /// extern \"C\" {\n     ///     fn my_string() -> *const c_char;\n@@ -233,14 +231,26 @@ impl CStr {\n     ///     let slice = CStr::from_ptr(my_string());\n     ///     println!(\"string returned: {}\", slice.to_str().unwrap());\n     /// }\n-    /// # }\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(const_cstr_methods)]\n+    ///\n+    /// use std::ffi::{c_char, CStr};\n+    ///\n+    /// const HELLO_PTR: *const c_char = {\n+    ///     const BYTES: &[u8] = b\"Hello, world!\\0\";\n+    ///     BYTES.as_ptr().cast()\n+    /// };\n+    /// const HELLO: &CStr = unsafe { CStr::from_ptr(HELLO_PTR) };\n     /// ```\n     ///\n     /// [valid]: core::ptr#safety\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         // SAFETY: The caller has provided a pointer that points to a valid C\n         // string with a NUL terminator of size less than `isize::MAX`, whose\n         // content remain valid and doesn't change for the lifetime of the\n@@ -252,13 +262,29 @@ impl CStr {\n         //\n         // The cast from c_char to u8 is ok because a c_char is always one byte.\n         unsafe {\n-            extern \"C\" {\n-                /// Provided by libc or compiler_builtins.\n-                fn strlen(s: *const c_char) -> usize;\n+            const fn strlen_ct(s: *const c_char) -> usize {\n+                let mut len = 0;\n+\n+                // SAFETY: Outer caller has provided a pointer to a valid C string.\n+                while unsafe { *s.add(len) } != 0 {\n+                    len += 1;\n+                }\n+\n+                len\n             }\n-            let len = strlen(ptr);\n-            let ptr = ptr as *const u8;\n-            CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n+\n+            fn strlen_rt(s: *const c_char) -> usize {\n+                extern \"C\" {\n+                    /// Provided by libc or compiler_builtins.\n+                    fn strlen(s: *const c_char) -> usize;\n+                }\n+\n+                // SAFETY: Outer caller has provided a pointer to a valid C string.\n+                unsafe { strlen(s) }\n+            }\n+\n+            let len = intrinsics::const_eval_select((ptr,), strlen_ct, strlen_rt);\n+            Self::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr.cast(), len + 1))\n         }\n     }\n "}, {"sha": "1cc954a98dc3797d06c3b6ef687357ec719397c1", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -683,13 +683,16 @@ nav.sub {\n \tdisplay: flex;\n \talign-items: center;\n }\n-nav.sub form {\n+.search-form {\n+\tposition: relative;\n+\tdisplay: flex;\n+\theight: 34px;\n \tflex-grow: 1;\n }\n .source nav.sub {\n \tmargin: 0 0 15px 0;\n }\n-.source nav.sub form {\n+.source .search-form {\n \tmargin-left: 32px;\n }\n \n@@ -780,11 +783,6 @@ table,\n \tpadding-right: 1.25rem;\n }\n \n-.search-container {\n-\tposition: relative;\n-\tdisplay: flex;\n-\theight: 34px;\n-}\n .search-results-title {\n \tmargin-top: 0;\n \twhite-space: nowrap;\n@@ -860,15 +858,12 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \t   -webkit-appearance: textfield for search inputs. That\n \t   causes rounded corners and no border on iOS Safari. */\n \t-webkit-appearance: none;\n-\t/* Override Normalize.css: we have margins and do\n-\t not want to overflow */\n-\tbox-sizing: border-box !important;\n \toutline: none;\n \tborder: 1px solid var(--border-color);\n \tborder-radius: 2px;\n \tpadding: 8px;\n \tfont-size: 1rem;\n-\twidth: 100%;\n+\tflex-grow: 1;\n \tbackground-color: var(--button-background-color);\n \tcolor: var(--search-color);\n }\n@@ -1957,7 +1952,7 @@ in storage.js\n \t\tflex-direction: column;\n \t}\n \n-\tnav.sub form {\n+\t.search-form {\n \t\talign-self: stretch;\n \t}\n "}, {"sha": "33480fa41cf07767448a30d3d11af6e144715be9", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -932,7 +932,7 @@ function loadCss(cssFileName) {\n      * Hide all the popover menus.\n      */\n     window.hidePopoverMenus = function() {\n-        onEachLazy(document.querySelectorAll(\".search-container .popover\"), elem => {\n+        onEachLazy(document.querySelectorAll(\".search-form .popover\"), elem => {\n             elem.style.display = \"none\";\n         });\n     };"}, {"sha": "c3238691687899cc9dafea69e41bb2e095323b43", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -115,24 +115,22 @@ <h2></h2> {#- -#}\n                 </a> {#- -#}\n                 {%- endif -%}\n                 <form class=\"search-form\"> {#- -#}\n-                    <div class=\"search-container\"> {#- -#}\n-                        <span></span> {#- This empty span is a hacky fix for Safari - See #93184 -#}\n-                        <input {# -#}\n-                            class=\"search-input\" {# -#}\n-                            name=\"search\" {# -#}\n-                            autocomplete=\"off\" {# -#}\n-                            spellcheck=\"false\" {# -#}\n-                            placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n-                            type=\"search\"> {#- -#}\n-                        <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {#- -#}\n-                            <a href=\"{{page.root_path|safe}}help.html\">?</a> {#- -#}\n-                        </div> {#- -#}\n-                        <div id=\"settings-menu\" tabindex=\"-1\"> {#- -#}\n-                            <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n-                                <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n-                                 src=\"{{static_root_path|safe}}wheel{{page.resource_suffix}}.svg\"> {#- -#}\n-                            </a> {#- -#}\n-                        </div> {#- -#}\n+                    <span></span> {#- This empty span is a hacky fix for Safari - See #93184 -#}\n+                    <input {# -#}\n+                        class=\"search-input\" {# -#}\n+                        name=\"search\" {# -#}\n+                        autocomplete=\"off\" {# -#}\n+                        spellcheck=\"false\" {# -#}\n+                        placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}\n+                        type=\"search\"> {#- -#}\n+                    <div id=\"help-button\" title=\"help\" tabindex=\"-1\"> {#- -#}\n+                        <a href=\"{{page.root_path|safe}}help.html\">?</a> {#- -#}\n+                    </div> {#- -#}\n+                    <div id=\"settings-menu\" tabindex=\"-1\"> {#- -#}\n+                        <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n+                            <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n+                             src=\"{{static_root_path|safe}}wheel{{page.resource_suffix}}.svg\"> {#- -#}\n+                        </a> {#- -#}\n                     </div> {#- -#}\n                 </form> {#- -#}\n             </nav> {#- -#}"}, {"sha": "4bc91fc4030e228dcd86b20a544e2b5db4ed3807", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -51,6 +51,11 @@ pub struct ItemSummary {\n     pub crate_id: u32,\n     /// The list of path components for the fully qualified path of this item (e.g.\n     /// `[\"std\", \"io\", \"lazy\", \"Lazy\"]` for `std::io::lazy::Lazy`).\n+    ///\n+    /// Note that items can appear in multiple paths, and the one chosen is implementation\n+    /// defined. Currenty, this is the full path to where the item was defined. Eg\n+    /// [`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`HashMap`] is\n+    /// `[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.\n     pub path: Vec<String>,\n     /// Whether this item is a struct, trait, macro, etc.\n     pub kind: ItemKind,"}, {"sha": "b0d38687f01c46f598132c17cbc95378a83d5f43", "filename": "src/test/ui/async-await/issue-98634.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fasync-await%2Fissue-98634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fasync-await%2Fissue-98634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-98634.rs?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -0,0 +1,50 @@\n+// edition: 2021\n+\n+use std::{\n+    future::Future,\n+    pin::Pin,\n+    task::{Context, Poll, Waker},\n+};\n+\n+pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n+    pub callback: F,\n+}\n+\n+impl<F> Future for StructAsync<F>\n+where\n+    F: Fn() -> Pin<Box<dyn Future<Output = ()>>>,\n+{\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        Poll::Pending\n+    }\n+}\n+\n+async fn callback() {}\n+\n+struct Runtime;\n+\n+fn waker() -> &'static Waker {\n+    todo!()\n+}\n+\n+impl Runtime {\n+    #[track_caller]\n+    pub fn block_on<F: Future>(&self, mut future: F) -> F::Output {\n+        loop {\n+            unsafe {\n+                Pin::new_unchecked(&mut future).poll(&mut Context::from_waker(waker()));\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    Runtime.block_on(async {\n+        StructAsync { callback }.await;\n+        //~^ ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+    });\n+}"}, {"sha": "5160e48d88afd2d22ed62275b3ecb3bdacf7432b", "filename": "src/test/ui/async-await/issue-98634.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -0,0 +1,60 @@\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+  --> $DIR/issue-98634.rs:45:23\n+   |\n+LL |         StructAsync { callback }.await;\n+   |                       ^^^^^^^^ expected struct `Pin`, found opaque type\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-98634.rs:24:21\n+   |\n+LL | async fn callback() {}\n+   |                     ^ checked the `Output` of this `async fn`, found opaque type\n+   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+           found opaque type `impl Future<Output = ()>`\n+note: required by a bound in `StructAsync`\n+  --> $DIR/issue-98634.rs:9:35\n+   |\n+LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n+\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+  --> $DIR/issue-98634.rs:45:9\n+   |\n+LL |         StructAsync { callback }.await;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-98634.rs:24:21\n+   |\n+LL | async fn callback() {}\n+   |                     ^ checked the `Output` of this `async fn`, found opaque type\n+   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+           found opaque type `impl Future<Output = ()>`\n+note: required by a bound in `StructAsync`\n+  --> $DIR/issue-98634.rs:9:35\n+   |\n+LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n+\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+  --> $DIR/issue-98634.rs:45:33\n+   |\n+LL |         StructAsync { callback }.await;\n+   |                                 ^^^^^^ expected struct `Pin`, found opaque type\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-98634.rs:24:21\n+   |\n+LL | async fn callback() {}\n+   |                     ^ checked the `Output` of this `async fn`, found opaque type\n+   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+           found opaque type `impl Future<Output = ()>`\n+note: required by a bound in `StructAsync`\n+  --> $DIR/issue-98634.rs:9:35\n+   |\n+LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "eae9bd9b16f2d6bb05442d0fcaa6a338a27824af", "filename": "src/test/ui/generic-associated-types/issue-87258_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.stderr?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -4,7 +4,7 @@ error: unconstrained opaque type\n LL |     type FooFuture<'a> = impl Trait1;\n    |                          ^^^^^^^^^^^\n    |\n-   = note: `FooFuture` must be used in combination with a concrete type within the same module\n+   = note: `FooFuture` must be used in combination with a concrete type within the same impl\n \n error: aborting due to previous error\n "}, {"sha": "2f1fb4c46c08b91695a5ddbe43c749692112724e", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -67,7 +67,7 @@ error: unconstrained opaque type\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^\n    |\n-   = note: `U` must be used in combination with a concrete type within the same module\n+   = note: `U` must be used in combination with a concrete type within the same impl\n \n error: aborting due to 6 previous errors; 2 warnings emitted\n "}, {"sha": "404efbeac1e13d124c8943fc16768e5411a44cdc", "filename": "src/test/ui/lint/no-coverage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -94,7 +94,7 @@ error: unconstrained opaque type\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^\n    |\n-   = note: `U` must be used in combination with a concrete type within the same module\n+   = note: `U` must be used in combination with a concrete type within the same impl\n \n error: aborting due to 7 previous errors; 6 warnings emitted\n "}, {"sha": "4452ee7915baab165d1b91332966d7859114ab24", "filename": "src/test/ui/save-analysis/issue-68621.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -4,7 +4,7 @@ error: unconstrained opaque type\n LL |     type Future = impl Trait;\n    |                   ^^^^^^^^^^\n    |\n-   = note: `Future` must be used in combination with a concrete type within the same module\n+   = note: `Future` must be used in combination with a concrete type within the same impl\n \n error: aborting due to previous error\n "}, {"sha": "f564f4fa702cb07299e373aac01dcbaa11c4bbf5", "filename": "src/test/ui/type-alias-impl-trait/issue-101750.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-101750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b530e04099465a8029ef581202d52f4075558e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-101750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-101750.rs?ref=33b530e04099465a8029ef581202d52f4075558e", "patch": "@@ -0,0 +1,37 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+trait Trait {}\n+\n+type TAIT = impl Trait;\n+\n+struct Concrete;\n+impl Trait for Concrete {}\n+\n+fn tait() -> TAIT {\n+    Concrete\n+}\n+\n+trait OuterTrait {\n+    type Item;\n+}\n+struct Dummy<T> {\n+    t: T,\n+}\n+impl<T> OuterTrait for Dummy<T> {\n+    type Item = T;\n+}\n+\n+fn tait_and_impl_trait() -> impl OuterTrait<Item = (TAIT, impl Trait)> {\n+    Dummy {\n+        t: (tait(), Concrete),\n+    }\n+}\n+\n+fn tait_and_dyn_trait() -> impl OuterTrait<Item = (TAIT, Box<dyn Trait>)> {\n+    let b: Box<dyn Trait> = Box::new(Concrete);\n+    Dummy { t: (tait(), b) }\n+}\n+\n+fn main() {}"}]}