{"sha": "8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTljNGJlZWViNWQ1MDAxOGE2MTZmMzJhNDZmYmY4ODc2ZTVjZDc=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-10T09:29:44Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-12T15:38:18Z"}, "message": "review comments", "tree": {"sha": "0e33f92501f5c9deafdc5216155b891494491513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e33f92501f5c9deafdc5216155b891494491513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "html_url": "https://github.com/rust-lang/rust/commit/8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5029a19313839c951ae15633d928c0a607eb7ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5029a19313839c951ae15633d928c0a607eb7ba9", "html_url": "https://github.com/rust-lang/rust/commit/5029a19313839c951ae15633d928c0a607eb7ba9"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "db0056e482be06bf89890d3e408ce90bd9514ab0", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "patch": "@@ -241,7 +241,7 @@ pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n     pub needs_drop: bool,\n     pub custom_eq: bool,\n-    pub error_occured: bool,\n+    pub error_occured: Option<ErrorReported>,\n }\n \n /// After we borrow check a closure, we are left with various"}, {"sha": "6e09ae43406456ea78a49de1daae97f7e4e91c43", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "patch": "@@ -282,9 +282,8 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n             );\n             return Err(ErrorHandled::Reported(ErrorReported {}));\n         }\n-        let qualif = tcx.mir_const_qualif_opt_const_arg(def);\n-        if qualif.error_occured {\n-            return Err(ErrorHandled::Reported(ErrorReported {}));\n+        if let Some(error_reported) = tcx.mir_const_qualif_opt_const_arg(def).error_occured {\n+            return Err(ErrorHandled::Reported(error_reported));\n         }\n     }\n "}, {"sha": "c66d3ed76df904190ddfc9d94774e5213132229e", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "patch": "@@ -2,6 +2,7 @@\n //!\n //! See the `Qualif` trait for more info.\n \n+use rustc_errors::ErrorReported;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n@@ -12,7 +13,7 @@ use super::ConstCx;\n pub fn in_any_value_of_ty(\n     cx: &ConstCx<'_, 'tcx>,\n     ty: Ty<'tcx>,\n-    error_occured: bool,\n+    error_occured: Option<ErrorReported>,\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),"}, {"sha": "e4893044a159933cabf2b6c5e323d508ece31145", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8119c4beeeb5d50018a616f32a46fbf8876e5cd7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=8119c4beeeb5d50018a616f32a46fbf8876e5cd7", "patch": "@@ -1,6 +1,6 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -126,7 +126,7 @@ impl Qualifs<'mir, 'tcx> {\n     fn in_return_place(\n         &mut self,\n         ccx: &'mir ConstCx<'mir, 'tcx>,\n-        error_occured: bool,\n+        error_occured: Option<ErrorReported>,\n     ) -> ConstQualifs {\n         // Find the `Return` terminator if one exists.\n         //\n@@ -186,7 +186,7 @@ pub struct Validator<'mir, 'tcx> {\n     /// The span of the current statement.\n     span: Span,\n \n-    error_emitted: bool,\n+    error_emitted: Option<ErrorReported>,\n     secondary_errors: Vec<Diagnostic>,\n }\n \n@@ -204,7 +204,7 @@ impl Validator<'mir, 'tcx> {\n             span: ccx.body.span,\n             ccx,\n             qualifs: Default::default(),\n-            error_emitted: false,\n+            error_emitted: None,\n             secondary_errors: Vec::new(),\n         }\n     }\n@@ -271,7 +271,7 @@ impl Validator<'mir, 'tcx> {\n         // If we got through const-checking without emitting any \"primary\" errors, emit any\n         // \"secondary\" errors if they occurred.\n         let secondary_errors = mem::take(&mut self.secondary_errors);\n-        if !self.error_emitted {\n+        if self.error_emitted.is_none() {\n             for error in secondary_errors {\n                 self.tcx.sess.diagnostic().emit_diagnostic(&error);\n             }\n@@ -323,7 +323,7 @@ impl Validator<'mir, 'tcx> {\n \n         match op.importance() {\n             ops::DiagnosticImportance::Primary => {\n-                self.error_emitted = true;\n+                self.error_emitted = Some(ErrorReported);\n                 err.emit();\n             }\n "}]}