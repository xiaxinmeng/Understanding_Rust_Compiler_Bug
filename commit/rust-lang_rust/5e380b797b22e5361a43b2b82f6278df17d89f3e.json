{"sha": "5e380b797b22e5361a43b2b82f6278df17d89f3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzgwYjc5N2IyMmU1MzYxYTQzYjJiODJmNjI3OGRmMTdkODlmM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-14T04:54:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-14T04:54:51Z"}, "message": "Auto merge of #66233 - cjgillot:constkind, r=oli-obk\n\nSplit ConstValue into two enums\n\nHello,\n\nIssue #59210 appeared abandoned, so I gave it a go.\nSome further cleanup and refactoring may be mandated.\n\nI did not test beyond `x.py check`, since my home computer dies compiling librustc.\n\nFixes #59210", "tree": {"sha": "5e82cf482962b2daffe6bfaf7f05d7e38f458e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e82cf482962b2daffe6bfaf7f05d7e38f458e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e380b797b22e5361a43b2b82f6278df17d89f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e380b797b22e5361a43b2b82f6278df17d89f3e", "html_url": "https://github.com/rust-lang/rust/commit/5e380b797b22e5361a43b2b82f6278df17d89f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e380b797b22e5361a43b2b82f6278df17d89f3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f07f1cd78432c9901788de2feafc0c2331edee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f07f1cd78432c9901788de2feafc0c2331edee3", "html_url": "https://github.com/rust-lang/rust/commit/3f07f1cd78432c9901788de2feafc0c2331edee3"}, {"sha": "552fa6479846951e242df412a08c86212beb1d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/552fa6479846951e242df412a08c86212beb1d0f", "html_url": "https://github.com/rust-lang/rust/commit/552fa6479846951e242df412a08c86212beb1d0f"}], "stats": {"total": 579, "additions": 305, "deletions": 274}, "files": [{"sha": "e782ec592958974d02e68977b7f519c55913a08f", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -10,7 +10,6 @@ use crate::infer::canonical::{\n     OriginalQueryValues,\n };\n use crate::infer::InferCtxt;\n-use crate::mir::interpret::ConstValue;\n use std::sync::atomic::Ordering;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::GenericArg;\n@@ -441,7 +440,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n         match ct.val {\n-            ConstValue::Infer(InferConst::Var(vid)) => {\n+            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 debug!(\"canonical: const var found with vid {:?}\", vid);\n                 match self.infcx.unwrap().probe_const_var(vid) {\n                     Ok(c) => {\n@@ -465,17 +464,17 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            ConstValue::Infer(InferConst::Fresh(_)) => {\n+            ty::ConstKind::Infer(InferConst::Fresh(_)) => {\n                 bug!(\"encountered a fresh const during canonicalization\")\n             }\n-            ConstValue::Bound(debruijn, _) => {\n+            ty::ConstKind::Bound(debruijn, _) => {\n                 if debruijn >= self.binder_index {\n                     bug!(\"escaping bound type during canonicalization\")\n                 } else {\n                     return ct;\n                 }\n             }\n-            ConstValue::Placeholder(placeholder) => {\n+            ty::ConstKind::Placeholder(placeholder) => {\n                 return self.canonicalize_const_var(\n                     CanonicalVarInfo {\n                         kind: CanonicalVarKind::PlaceholderConst(placeholder),\n@@ -700,7 +699,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             let var = self.canonical_var(info, const_var.into());\n             self.tcx().mk_const(\n                 ty::Const {\n-                    val: ConstValue::Bound(self.binder_index, var.into()),\n+                    val: ty::ConstKind::Bound(self.binder_index, var.into()),\n                     ty: self.fold_ty(const_var.ty),\n                 }\n             )"}, {"sha": "4e86cbb2cf6646ef5a936ca58654ac01d9e79740", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -24,7 +24,6 @@\n use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{ConstVariableOrigin, ConstVariableOriginKind};\n use crate::infer::region_constraints::MemberConstraint;\n-use crate::mir::interpret::ConstValue;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_serialize::UseSpecializedDecodable;\n@@ -447,7 +446,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 };\n                 self.tcx.mk_const(\n                     ty::Const {\n-                        val: ConstValue::Placeholder(placeholder_mapped),\n+                        val: ty::ConstKind::Placeholder(placeholder_mapped),\n                         ty: self.tcx.types.err, // FIXME(const_generics)\n                     }\n                 ).into()\n@@ -510,7 +509,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                     GenericArgKind::Const(ct) => {\n                         tcx.mk_const(ty::Const {\n                             ty: ct.ty,\n-                            val: ConstValue::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n+                            val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n                         }).into()\n                     }\n                 })"}, {"sha": "825e98cedb9e07eda7f4f5cb01a8860bdd2694aa", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -16,7 +16,6 @@ use crate::infer::canonical::{\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxtBuilder;\n use crate::infer::{InferCtxt, InferOk, InferResult};\n-use crate::mir::interpret::ConstValue;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n use std::fmt::Debug;\n@@ -493,7 +492,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                     }\n                 }\n                 GenericArgKind::Const(result_value) => {\n-                    if let ty::Const { val: ConstValue::Bound(debrujin, b), .. } = result_value {\n+                    if let ty::Const { val: ty::ConstKind::Bound(debrujin, b), .. } = result_value {\n                         // ...in which case we would set `canonical_vars[0]` to `Some(const X)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions."}, {"sha": "a2f0531f0af36e0150d2ef1ffd06bb33bf108801", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -33,7 +33,6 @@ use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use super::unify_key::replace_if_possible;\n \n use crate::hir::def_id::DefId;\n-use crate::mir::interpret::ConstValue;\n use crate::ty::{IntType, UintType};\n use crate::ty::{self, Ty, TyCtxt, InferConst};\n use crate::ty::error::TypeError;\n@@ -137,8 +136,8 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         let a_is_expected = relation.a_is_expected();\n \n         match (a.val, b.val) {\n-            (ConstValue::Infer(InferConst::Var(a_vid)),\n-                ConstValue::Infer(InferConst::Var(b_vid))) => {\n+            (ty::ConstKind::Infer(InferConst::Var(a_vid)),\n+                ty::ConstKind::Infer(InferConst::Var(b_vid))) => {\n                 self.const_unification_table\n                     .borrow_mut()\n                     .unify_var_var(a_vid, b_vid)\n@@ -147,16 +146,16 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             }\n \n             // All other cases of inference with other variables are errors.\n-            (ConstValue::Infer(InferConst::Var(_)), ConstValue::Infer(_)) |\n-            (ConstValue::Infer(_), ConstValue::Infer(InferConst::Var(_))) => {\n-                bug!(\"tried to combine ConstValue::Infer/ConstValue::Infer(InferConst::Var)\")\n+            (ty::ConstKind::Infer(InferConst::Var(_)), ty::ConstKind::Infer(_)) |\n+            (ty::ConstKind::Infer(_), ty::ConstKind::Infer(InferConst::Var(_))) => {\n+                bug!(\"tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)\")\n             }\n \n-            (ConstValue::Infer(InferConst::Var(vid)), _) => {\n+            (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {\n                 return self.unify_const_variable(a_is_expected, vid, b);\n             }\n \n-            (_, ConstValue::Infer(InferConst::Var(vid))) => {\n+            (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n \n@@ -603,7 +602,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n \n         match c.val {\n-            ConstValue::Infer(InferConst::Var(vid)) => {\n+            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n                 let var_value = variable_table.probe_value(vid);\n                 match var_value.val {"}, {"sha": "32b51da920d66e722debe391980f9c8f4aa3284c", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -31,7 +31,6 @@\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n \n-use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::fold::TypeFolder;\n use crate::util::nodemap::FxHashMap;\n@@ -227,7 +226,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n         match ct.val {\n-            ConstValue::Infer(ty::InferConst::Var(v)) => {\n+            ty::ConstKind::Infer(ty::InferConst::Var(v)) => {\n                 let opt_ct = self.infcx.const_unification_table\n                     .borrow_mut()\n                     .probe_value(v)\n@@ -240,7 +239,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                     ct.ty,\n                 );\n             }\n-            ConstValue::Infer(ty::InferConst::Fresh(i)) => {\n+            ty::ConstKind::Infer(ty::InferConst::Fresh(i)) => {\n                 if i >= self.const_freshen_count {\n                     bug!(\n                         \"Encountered a freshend const with id {} \\\n@@ -252,16 +251,14 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 return ct;\n             }\n \n-            ConstValue::Bound(..) |\n-            ConstValue::Placeholder(_) => {\n+            ty::ConstKind::Bound(..) |\n+            ty::ConstKind::Placeholder(_) => {\n                 bug!(\"unexpected const {:?}\", ct)\n             }\n \n-            ConstValue::Param(_) |\n-            ConstValue::Scalar(_) |\n-            ConstValue::Slice { .. } |\n-            ConstValue::ByRef { .. } |\n-            ConstValue::Unevaluated(..) => {}\n+            ty::ConstKind::Param(_) |\n+            ty::ConstKind::Value(_) |\n+            ty::ConstKind::Unevaluated(..) => {}\n         }\n \n         ct.super_fold_with(self)"}, {"sha": "11f86a619b5c2a41795a882fa281288e1844b8ad", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1,6 +1,5 @@\n use crate::ty::{self, Ty, TyCtxt, TyVid, IntVid, FloatVid, RegionVid, ConstVid};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n-use crate::mir::interpret::ConstValue;\n \n use super::InferCtxt;\n use super::{RegionVariableOrigin, ConstVariableOrigin};\n@@ -198,7 +197,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for InferenceFudger<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ConstValue::Infer(ty::InferConst::Var(vid)), ty } = ct {\n+        if let ty::Const { val: ty::ConstKind::Infer(ty::InferConst::Var(vid)), ty } = ct {\n             if self.const_vars.0.contains(&vid) {\n                 // This variable was created during the fudging.\n                 // Recreate it with a fresh variable here."}, {"sha": "49c095c69d6c4bfacf986573fe1e290f60b65808", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -7,7 +7,6 @@ use super::{HigherRankedType, InferCtxt, PlaceholderMap};\n use crate::infer::CombinedSnapshot;\n use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n use crate::ty::{self, Binder, TypeFoldable};\n-use crate::mir::interpret::ConstValue;\n \n impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n     pub fn higher_ranked_sub<T>(\n@@ -103,7 +102,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let fld_c = |bound_var: ty::BoundVar, ty| {\n             self.tcx.mk_const(\n                 ty::Const {\n-                    val: ConstValue::Placeholder(ty::PlaceholderConst {\n+                    val: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: next_universe,\n                         name: bound_var,\n                     }),"}, {"sha": "49fb84a8260bd3333fcbfee2c2a50ea097024505", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -14,7 +14,6 @@ use crate::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use crate::middle::free_region::RegionRelations;\n use crate::middle::lang_items;\n use crate::middle::region;\n-use crate::mir::interpret::ConstValue;\n use crate::session::config::BorrowckMode;\n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n use crate::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n@@ -1662,7 +1661,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ConstValue::Infer(InferConst::Var(vid)), .. } = ct {\n+        if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {\n                 self.infcx.const_unification_table\n                     .borrow_mut()\n                     .probe_value(*vid)"}, {"sha": "1e0feb6a7da8d97606ff91989a37caa365250ba1", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -29,7 +29,6 @@ use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt, InferConst};\n use crate::infer::{ConstVariableValue, ConstVarValue};\n-use crate::mir::interpret::ConstValue;\n use rustc_data_structures::fx::FxHashMap;\n use std::fmt::Debug;\n \n@@ -626,7 +625,7 @@ where\n         }\n \n         match b.val {\n-            ConstValue::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+            ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n                 // Forbid inference variables in the RHS.\n                 bug!(\"unexpected inference var {:?}\", b)\n             }\n@@ -999,13 +998,13 @@ where\n         _: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n         match a.val {\n-            ConstValue::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+            ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n                 bug!(\n                     \"unexpected inference variable encountered in NLL generalization: {:?}\",\n                     a\n                 );\n             }\n-            ConstValue::Infer(InferConst::Var(vid)) => {\n+            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n                 let var_value = variable_table.probe_value(vid);\n                 match var_value.val.known() {"}, {"sha": "dc54a273ed08d366c8ed89235cb0c3175e9ad7aa", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -4,7 +4,6 @@ use crate::hir::Node;\n use crate::infer::outlives::free_region_map::FreeRegionRelations;\n use crate::infer::{self, InferCtxt, InferOk, TypeVariableOrigin, TypeVariableOriginKind};\n use crate::middle::region;\n-use crate::mir::interpret::ConstValue;\n use crate::traits::{self, PredicateObligation};\n use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::subst::{InternalSubsts, GenericArg, SubstsRef, GenericArgKind};\n@@ -945,7 +944,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n         trace!(\"checking const {:?}\", ct);\n         // Find a const parameter\n         match ct.val {\n-            ConstValue::Param(..) => {\n+            ty::ConstKind::Param(..) => {\n                 // Look it up in the substitution list.\n                 match self.map.get(&ct.into()).map(|k| k.unpack()) {\n                     // Found it in the substitution list, replace with the parameter from the"}, {"sha": "613f66d7ffd7ee2422151a22fa4734ac1e82df47", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1,6 +1,5 @@\n use super::{InferCtxt, FixupError, FixupResult, Span};\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Ty, Const, TyCtxt, TypeFoldable, InferConst};\n use crate::ty::fold::{TypeFolder, TypeVisitor};\n \n@@ -230,11 +229,11 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n         } else {\n             let c = self.infcx.shallow_resolve(c);\n             match c.val {\n-                ConstValue::Infer(InferConst::Var(vid)) => {\n+                ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                     self.err = Some(FixupError::UnresolvedConst(vid));\n                     return self.tcx().consts.err;\n                 }\n-                ConstValue::Infer(InferConst::Fresh(_)) => {\n+                ty::ConstKind::Infer(InferConst::Fresh(_)) => {\n                     bug!(\"Unexpected const in full const resolver: {:?}\", c);\n                 }\n                 _ => {}"}, {"sha": "8ad6990a75dafde22bc5f83f394f71659ca27364", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1,5 +1,4 @@\n use crate::ty::{self, FloatVarValue, IntVarValue, Ty, TyCtxt, InferConst};\n-use crate::mir::interpret::ConstValue;\n use rustc_data_structures::unify::{NoError, EqUnifyValue, UnifyKey, UnifyValue, UnificationTable};\n use rustc_data_structures::unify::InPlace;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -180,7 +179,7 @@ pub fn replace_if_possible(\n     mut table: RefMut<'_, UnificationTable<InPlace<ty::ConstVid<'tcx>>>>,\n     c: &'tcx ty::Const<'tcx>\n ) -> &'tcx ty::Const<'tcx> {\n-    if let ty::Const { val: ConstValue::Infer(InferConst::Var(vid)), .. } = c {\n+    if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = c {\n         match table.probe_value(*vid).val.known() {\n             Some(c) => c,\n             None => c,"}, {"sha": "a0367154b75b3fe8ec1eacbc19018366ed4fe7e4", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -2,10 +2,7 @@ use std::fmt;\n use rustc_macros::HashStable;\n use rustc_apfloat::{Float, ieee::{Double, Single}};\n \n-use crate::ty::{Ty, InferConst, ParamConst, layout::{HasDataLayout, Size}, subst::SubstsRef};\n-use crate::ty::PlaceholderConst;\n-use crate::hir::def_id::DefId;\n-use crate::ty::{BoundVar, DebruijnIndex};\n+use crate::ty::{Ty, layout::{HasDataLayout, Size}};\n \n use super::{InterpResult, Pointer, PointerArithmetic, Allocation, AllocId, sign_extend, truncate};\n \n@@ -23,18 +20,6 @@ pub struct RawConst<'tcx> {\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord,\n          RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub enum ConstValue<'tcx> {\n-    /// A const generic parameter.\n-    Param(ParamConst),\n-\n-    /// Infer the value of the const.\n-    Infer(InferConst<'tcx>),\n-\n-    /// Bound const variable, used only when preparing a trait query.\n-    Bound(DebruijnIndex, BoundVar),\n-\n-    /// A placeholder const - universally quantified higher-ranked const.\n-    Placeholder(PlaceholderConst),\n-\n     /// Used only for types with `layout::abi::Scalar` ABI and ZSTs.\n     ///\n     /// Not using the enum `Value` to encode that this must not be `Undef`.\n@@ -55,10 +40,6 @@ pub enum ConstValue<'tcx> {\n         /// Offset into `alloc`\n         offset: Size,\n     },\n-\n-    /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n-    /// variants when the code is monomorphic enough for that.\n-    Unevaluated(DefId, SubstsRef<'tcx>),\n }\n \n #[cfg(target_arch = \"x86_64\")]\n@@ -68,26 +49,11 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn try_to_scalar(&self) -> Option<Scalar> {\n         match *self {\n-            ConstValue::Param(_) |\n-            ConstValue::Infer(_) |\n-            ConstValue::Bound(..) |\n-            ConstValue::Placeholder(_) |\n             ConstValue::ByRef { .. } |\n-            ConstValue::Unevaluated(..) |\n             ConstValue::Slice { .. } => None,\n             ConstValue::Scalar(val) => Some(val),\n         }\n     }\n-\n-    #[inline]\n-    pub fn try_to_bits(&self, size: Size) -> Option<u128> {\n-        self.try_to_scalar()?.to_bits(size).ok()\n-    }\n-\n-    #[inline]\n-    pub fn try_to_ptr(&self) -> Option<Pointer> {\n-        self.try_to_scalar()?.to_ptr().ok()\n-    }\n }\n \n /// A `Scalar` represents an immediate, primitive value existing outside of a"}, {"sha": "39940dca99dc766b746c21be6f8e639968f97d2a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -7,7 +7,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n-use crate::mir::interpret::{ConstValue, PanicInfo, Scalar};\n+use crate::mir::interpret::{PanicInfo, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -1506,10 +1506,11 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 values\n                     .iter()\n                     .map(|&u| {\n-                        tcx.mk_const(ty::Const {\n-                            val: ConstValue::Scalar(Scalar::from_uint(u, size).into()),\n-                            ty: switch_ty,\n-                        })\n+                        ty::Const::from_scalar(\n+                            tcx,\n+                            Scalar::from_uint(u, size).into(),\n+                            switch_ty,\n+                        )\n                         .to_string()\n                         .into()\n                     })"}, {"sha": "ea8a6ff2b2e527d8644c96631efee3207bcbfe88", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1,7 +1,6 @@\n use crate::ty::{self, Ty, TyCtxt, InferConst};\n use crate::ty::error::TypeError;\n use crate::ty::relate::{self, Relate, TypeRelation, RelateResult};\n-use crate::mir::interpret::ConstValue;\n \n /// A type \"A\" *matches* \"B\" if the fresh types in B could be\n /// substituted with values so as to make it equal to A. Matching is\n@@ -92,11 +91,11 @@ impl TypeRelation<'tcx> for Match<'tcx> {\n         }\n \n         match (a.val, b.val) {\n-            (_, ConstValue::Infer(InferConst::Fresh(_))) => {\n+            (_, ty::ConstKind::Infer(InferConst::Fresh(_))) => {\n                 return Ok(a);\n             }\n \n-            (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n+            (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n                 return Err(TypeError::ConstMismatch(relate::expected_found(self, &a, &b)));\n             }\n "}, {"sha": "2b78221c8882145f462899e83a90ab045bdbf12e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -886,7 +886,7 @@ impl CanonicalUserType<'tcx> {\n                         },\n \n                         GenericArgKind::Const(ct) => match ct.val {\n-                            ConstValue::Bound(debruijn, b) => {\n+                            ty::ConstKind::Bound(debruijn, b) => {\n                                 // We only allow a `ty::INNERMOST` index in substitutions.\n                                 assert_eq!(debruijn, ty::INNERMOST);\n                                 cvar == b\n@@ -987,7 +987,7 @@ impl<'tcx> CommonConsts<'tcx> {\n \n         CommonConsts {\n             err: mk_const(ty::Const {\n-                val: ConstValue::Scalar(Scalar::zst()),\n+                val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::zst())),\n                 ty: types.err,\n             }),\n         }\n@@ -2543,7 +2543,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n         self.mk_const(ty::Const {\n-            val: ConstValue::Infer(InferConst::Var(v)),\n+            val: ty::ConstKind::Infer(InferConst::Var(v)),\n             ty,\n         })\n     }\n@@ -2570,7 +2570,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> &'tcx ty::Const<'tcx> {\n         self.mk_const(ty::Const {\n-            val: ConstValue::Infer(ic),\n+            val: ty::ConstKind::Infer(ic),\n             ty,\n         })\n     }\n@@ -2588,7 +2588,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty: Ty<'tcx>\n     ) -> &'tcx Const<'tcx> {\n         self.mk_const(ty::Const {\n-            val: ConstValue::Param(ParamConst { index, name }),\n+            val: ty::ConstKind::Param(ParamConst { index, name }),\n             ty,\n         })\n     }"}, {"sha": "aee0ec7806b7679f22838e05984c73348237dba1", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1,6 +1,5 @@\n use crate::ty::subst::{SubstsRef, GenericArgKind};\n use crate::ty::{self, Ty, TypeFlags, InferConst};\n-use crate::mir::interpret::ConstValue;\n \n #[derive(Debug)]\n pub struct FlagComputation {\n@@ -232,29 +231,27 @@ impl FlagComputation {\n     fn add_const(&mut self, c: &ty::Const<'_>) {\n         self.add_ty(c.ty);\n         match c.val {\n-            ConstValue::Unevaluated(_, substs) => {\n+            ty::ConstKind::Unevaluated(_, substs) => {\n                 self.add_substs(substs);\n                 self.add_flags(TypeFlags::HAS_PROJECTION);\n             },\n-            ConstValue::Infer(infer) => {\n+            ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES | TypeFlags::HAS_CT_INFER);\n                 match infer {\n                     InferConst::Fresh(_) => {}\n                     InferConst::Var(_) => self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX),\n                 }\n             }\n-            ConstValue::Bound(debruijn, _) => self.add_binder(debruijn),\n-            ConstValue::Param(_) => {\n+            ty::ConstKind::Bound(debruijn, _) => self.add_binder(debruijn),\n+            ty::ConstKind::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_flags(TypeFlags::HAS_PARAMS);\n             }\n-            ConstValue::Placeholder(_) => {\n+            ty::ConstKind::Placeholder(_) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_flags(TypeFlags::HAS_CT_PLACEHOLDER);\n             }\n-            ConstValue::Scalar(_) => {}\n-            ConstValue::Slice { .. } => {}\n-            ConstValue::ByRef { .. } => {}\n+            ty::ConstKind::Value(_) => {}\n         }\n     }\n "}, {"sha": "f3480ce5739e9ba73cb76644cb1c871bd847be0d", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -32,7 +32,6 @@\n //! looking for, and does not need to visit anything else.\n \n use crate::hir::def_id::DefId;\n-use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Binder, Ty, TyCtxt, TypeFlags, flags::FlagComputation};\n \n use std::collections::BTreeMap;\n@@ -521,7 +520,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ConstValue::Bound(debruijn, bound_const), ty } = *ct {\n+        if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty } = *ct {\n             if debruijn == self.current_index {\n                 let fld_c = &mut self.fld_c;\n                 let ct = fld_c(bound_const, ty);\n@@ -568,7 +567,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let fld_t = |bound_ty| self.mk_ty(ty::Bound(ty::INNERMOST, bound_ty));\n         let fld_c = |bound_ct, ty| {\n             self.mk_const(ty::Const {\n-                val: ConstValue::Bound(ty::INNERMOST, bound_ct),\n+                val: ty::ConstKind::Bound(ty::INNERMOST, bound_ct),\n                 ty,\n             })\n         };\n@@ -801,7 +800,7 @@ impl TypeFolder<'tcx> for Shifter<'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const { val: ConstValue::Bound(debruijn, bound_ct), ty } = *ct {\n+        if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {\n             if self.amount == 0 || debruijn < self.current_index {\n                 ct\n             } else {\n@@ -813,7 +812,7 @@ impl TypeFolder<'tcx> for Shifter<'tcx> {\n                     }\n                 };\n                 self.tcx.mk_const(ty::Const {\n-                    val: ConstValue::Bound(debruijn, bound_ct),\n+                    val: ty::ConstKind::Bound(debruijn, bound_ct),\n                     ty,\n                 })\n             }\n@@ -919,7 +918,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         // const, as it has types/regions embedded in a lot of other\n         // places.\n         match ct.val {\n-            ConstValue::Bound(debruijn, _) if debruijn >= self.outer_index => true,\n+            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => true,\n             _ => ct.super_visit_with(self),\n         }\n     }"}, {"sha": "8aa212ce3101c3c1e7f74a733633c9809bac4809", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -63,7 +63,7 @@ pub use self::sty::{InferTy, ParamTy, ParamConst, InferConst, ProjectionTy, Exis\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};\n pub use self::sty::{TraitRef, TyKind, PolyTraitRef};\n pub use self::sty::{ExistentialTraitRef, PolyExistentialTraitRef};\n-pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const};\n+pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const, ConstKind};\n pub use self::sty::{BoundRegion, EarlyBoundRegion, FreeRegion, Region};\n pub use self::sty::RegionKind;\n pub use self::sty::{TyVid, IntVid, FloatVid, ConstVid, RegionVid};"}, {"sha": "7eb774849b1786862cb5126a8757d8e81edaa87a", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -6,7 +6,6 @@\n //! FIXME(eddyb) implement a custom `PrettyPrinter` for this.\n \n use rustc::hir::def_id::DefId;\n-use rustc::mir::interpret::ConstValue;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Const, Instance, Ty, TyCtxt};\n use rustc::{bug, hir};\n@@ -170,21 +169,16 @@ impl DefPathBasedNames<'tcx> {\n     // If `debug` is true, usually-unprintable consts (such as `Infer`) will be printed,\n     // as well as the unprintable types of constants (see `push_type_name` for more details).\n     pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n-        match c.val {\n-            ConstValue::Scalar(..) | ConstValue::Slice { .. } | ConstValue::ByRef { .. } => {\n-                // FIXME(const_generics): we could probably do a better job here.\n-                write!(output, \"{:?}\", c).unwrap()\n-            }\n-            _ => {\n-                if debug {\n-                    write!(output, \"{:?}\", c).unwrap()\n-                } else {\n-                    bug!(\n-                        \"DefPathBasedNames: trying to create const name for unexpected const: {:?}\",\n-                        c,\n-                    );\n-                }\n-            }\n+        if let ty::ConstKind::Value(_) = c.val {\n+            // FIXME(const_generics): we could probably do a better job here.\n+            write!(output, \"{:?}\", c).unwrap()\n+        } else if debug {\n+            write!(output, \"{:?}\", c).unwrap()\n+        } else {\n+            bug!(\n+                \"DefPathBasedNames: trying to create const name for unexpected const: {:?}\",\n+                c,\n+            );\n         }\n         output.push_str(\": \");\n         self.push_type_name(c.ty, output, debug);"}, {"sha": "594550dd967acc0c4b58e95913ed4e2bd464acd5", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -699,7 +699,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(write(\"[\"), print(ty), write(\"; \"));\n                 if self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n-                } else if let ConstValue::Unevaluated(..) = sz.val {\n+                } else if let ty::ConstKind::Unevaluated(..) = sz.val {\n                     // do not try to evalute unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n@@ -861,11 +861,9 @@ pub trait PrettyPrinter<'tcx>:\n             return Ok(self);\n         }\n \n-        let u8 = self.tcx().types.u8;\n-\n         match (ct.val, &ct.ty.kind) {\n             (_,  ty::FnDef(did, substs)) => p!(print_value_path(*did, substs)),\n-            (ConstValue::Unevaluated(did, substs), _) => {\n+            (ty::ConstKind::Unevaluated(did, substs), _) => {\n                 match self.tcx().def_kind(did) {\n                     | Some(DefKind::Static)\n                     | Some(DefKind::Const)\n@@ -882,8 +880,33 @@ pub trait PrettyPrinter<'tcx>:\n                     },\n                 }\n             },\n-            (ConstValue::Infer(..), _) =>  p!(write(\"_: \"), print(ct.ty)),\n-            (ConstValue::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n+            (ty::ConstKind::Infer(..), _) =>  p!(write(\"_: \"), print(ct.ty)),\n+            (ty::ConstKind::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n+            (ty::ConstKind::Value(value), _) => return self.pretty_print_const_value(value, ct.ty),\n+\n+            _ => {\n+                // fallback\n+                p!(write(\"{:?} : \", ct.val), print(ct.ty))\n+            }\n+        };\n+        Ok(self)\n+    }\n+\n+    fn pretty_print_const_value(\n+        mut self,\n+        ct: ConstValue<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> Result<Self::Const, Self::Error> {\n+        define_scoped_cx!(self);\n+\n+        if self.tcx().sess.verbose() {\n+            p!(write(\"ConstValue({:?}: {:?})\", ct, ty));\n+            return Ok(self);\n+        }\n+\n+        let u8 = self.tcx().types.u8;\n+\n+        match (ct, &ty.kind) {\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Bool) =>\n                 p!(write(\"{}\", if data == 0 { \"false\" } else { \"true\" })),\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Float(ast::FloatTy::F32)) =>\n@@ -907,7 +930,7 @@ pub trait PrettyPrinter<'tcx>:\n                 let min = 1u128 << (bit_size - 1);\n                 let max = min - 1;\n \n-                let ty = self.tcx().lift(&ct.ty).unwrap();\n+                let ty = self.tcx().lift(&ty).unwrap();\n                 let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n                     .unwrap()\n                     .size;\n@@ -929,8 +952,8 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(print_value_path(instance.def_id(), instance.substs));\n             },\n             _ => {\n-                let printed = if let ty::Ref(_, ref_ty, _) = ct.ty.kind {\n-                    let byte_str = match (ct.val, &ref_ty.kind) {\n+                let printed = if let ty::Ref(_, ref_ty, _) = ty.kind {\n+                    let byte_str = match (ct, &ref_ty.kind) {\n                         (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::Array(t, n)) if *t == u8 => {\n                             let n = n.eval_usize(self.tcx(), ty::ParamEnv::empty());\n                             Some(self.tcx()\n@@ -957,7 +980,7 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(write(\"\\\"\"));\n                         true\n                     } else if let (ConstValue::Slice { data, start, end }, ty::Str) =\n-                        (ct.val, &ref_ty.kind)\n+                        (ct, &ref_ty.kind)\n                     {\n                         // The `inspect` here is okay since we checked the bounds, and there are no\n                         // relocations (we have an active `str` reference here). We don't use this\n@@ -975,7 +998,7 @@ pub trait PrettyPrinter<'tcx>:\n                 };\n                 if !printed {\n                     // fallback\n-                    p!(write(\"{:?} : \", ct.val), print(ct.ty))\n+                    p!(write(\"{:?} : \", ct), print(ty))\n                 }\n             }\n         };"}, {"sha": "28bd43b3ee5f3056c9b78dcfc041835786c2ae33", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -561,51 +561,59 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to `structural_match` types.\n     let new_const_val = match (eagerly_eval(a), eagerly_eval(b)) {\n-        (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n+        (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n-        (ConstValue::Param(a_p), ConstValue::Param(b_p)) if a_p.index == b_p.index => {\n+        (ty::ConstKind::Param(a_p), ty::ConstKind::Param(b_p)) if a_p.index == b_p.index => {\n             return Ok(a);\n         }\n-        (ConstValue::Placeholder(p1), ConstValue::Placeholder(p2)) if p1 == p2 => {\n+        (ty::ConstKind::Placeholder(p1), ty::ConstKind::Placeholder(p2)) if p1 == p2 => {\n             return Ok(a);\n         }\n-        (ConstValue::Scalar(a_val), ConstValue::Scalar(b_val)) if a.ty == b.ty => {\n-            if a_val == b_val {\n-                Ok(ConstValue::Scalar(a_val))\n-            } else if let ty::FnPtr(_) = a.ty.kind {\n-                let alloc_map = tcx.alloc_map.lock();\n-                let a_instance = alloc_map.unwrap_fn(a_val.to_ptr().unwrap().alloc_id);\n-                let b_instance = alloc_map.unwrap_fn(b_val.to_ptr().unwrap().alloc_id);\n-                if a_instance == b_instance {\n-                    Ok(ConstValue::Scalar(a_val))\n-                } else {\n-                    Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+        (ty::ConstKind::Value(a_val), ty::ConstKind::Value(b_val)) => {\n+            let new_val = match (a_val, b_val) {\n+                (ConstValue::Scalar(a_val), ConstValue::Scalar(b_val)) if a.ty == b.ty => {\n+                    if a_val == b_val {\n+                        Ok(ConstValue::Scalar(a_val))\n+                    } else if let ty::FnPtr(_) = a.ty.kind {\n+                        let alloc_map = tcx.alloc_map.lock();\n+                        let a_instance = alloc_map.unwrap_fn(a_val.to_ptr().unwrap().alloc_id);\n+                        let b_instance = alloc_map.unwrap_fn(b_val.to_ptr().unwrap().alloc_id);\n+                        if a_instance == b_instance {\n+                            Ok(ConstValue::Scalar(a_val))\n+                        } else {\n+                            Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                        }\n+                    } else {\n+                        Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                    }\n                 }\n-            } else {\n-                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n-            }\n-        }\n \n-        (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n-            let a_bytes = get_slice_bytes(&tcx, a_val);\n-            let b_bytes = get_slice_bytes(&tcx, b_val);\n-            if a_bytes == b_bytes {\n-                Ok(a_val)\n-            } else {\n-                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n-            }\n-        }\n+                (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n+                    let a_bytes = get_slice_bytes(&tcx, a_val);\n+                    let b_bytes = get_slice_bytes(&tcx, b_val);\n+                    if a_bytes == b_bytes {\n+                        Ok(a_val)\n+                    } else {\n+                        Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                    }\n+                }\n+\n+                // FIXME(const_generics): handle `ConstValue::ByRef`.\n+\n+                _ =>  Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n+            };\n \n-        // FIXME(const_generics): handle `ConstValue::ByRef`.\n+            new_val.map(ty::ConstKind::Value)\n+        },\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n-        (ConstValue::Unevaluated(a_def_id, a_substs),\n-            ConstValue::Unevaluated(b_def_id, b_substs)) if a_def_id == b_def_id => {\n+        (ty::ConstKind::Unevaluated(a_def_id, a_substs),\n+            ty::ConstKind::Unevaluated(b_def_id, b_substs)) if a_def_id == b_def_id => {\n             let substs =\n                 relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n-            Ok(ConstValue::Unevaluated(a_def_id, &substs))\n+            Ok(ty::ConstKind::Unevaluated(a_def_id, &substs))\n         }\n         _ =>  Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n     };"}, {"sha": "dd92898e434a8fbc0800b1b7cc625cd2b9200127", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -5,7 +5,6 @@\n \n use crate::hir::def::Namespace;\n use crate::mir::ProjectionKind;\n-use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Lift, Ty, TyCtxt, InferConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n@@ -1378,26 +1377,25 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n-            ConstValue::Infer(ic) => ConstValue::Infer(ic.fold_with(folder)),\n-            ConstValue::Param(p) => ConstValue::Param(p.fold_with(folder)),\n-            ConstValue::Unevaluated(did, substs)\n-                => ConstValue::Unevaluated(did, substs.fold_with(folder)),\n-            ConstValue::ByRef { .. } | ConstValue::Bound(..) | ConstValue::Placeholder(..)\n-            | ConstValue::Scalar(..) | ConstValue::Slice { .. } => *self,\n-\n+            ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.fold_with(folder)),\n+            ty::ConstKind::Param(p) => ty::ConstKind::Param(p.fold_with(folder)),\n+            ty::ConstKind::Unevaluated(did, substs)\n+                => ty::ConstKind::Unevaluated(did, substs.fold_with(folder)),\n+            ty::ConstKind::Value(_) | ty::ConstKind::Bound(..)\n+            | ty::ConstKind::Placeholder(..) => *self,\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n-            ConstValue::Infer(ic) => ic.visit_with(visitor),\n-            ConstValue::Param(p) => p.visit_with(visitor),\n-            ConstValue::Unevaluated(_, substs) => substs.visit_with(visitor),\n-            ConstValue::ByRef { .. } | ConstValue::Bound(..) | ConstValue::Placeholder(_)\n-            | ConstValue::Scalar(_) | ConstValue::Slice { .. } => false,\n+            ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n+            ty::ConstKind::Param(p) => p.visit_with(visitor),\n+            ty::ConstKind::Unevaluated(_, substs) => substs.visit_with(visitor),\n+            ty::ConstKind::Value(_) | ty::ConstKind::Bound(..)\n+            | ty::ConstKind::Placeholder(_) => false,\n         }\n     }\n }"}, {"sha": "8f6fc02ab4b3727eb17d40e1bac1d982afdd2853", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -2257,17 +2257,17 @@ impl<'tcx> TyS<'tcx> {\n pub struct Const<'tcx> {\n     pub ty: Ty<'tcx>,\n \n-    pub val: ConstValue<'tcx>,\n+    pub val: ConstKind<'tcx>,\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(Const<'_>, 40);\n+static_assert_size!(Const<'_>, 48);\n \n impl<'tcx> Const<'tcx> {\n     #[inline]\n     pub fn from_scalar(tcx: TyCtxt<'tcx>, val: Scalar, ty: Ty<'tcx>) -> &'tcx Self {\n         tcx.mk_const(Self {\n-            val: ConstValue::Scalar(val),\n+            val: ConstKind::Value(ConstValue::Scalar(val)),\n             ty,\n         })\n     }\n@@ -2317,7 +2317,7 @@ impl<'tcx> Const<'tcx> {\n         // FIXME(const_generics): this doesn't work right now,\n         // because it tries to relate an `Infer` to a `Param`.\n         match self.val {\n-            ConstValue::Unevaluated(did, substs) => {\n+            ConstKind::Unevaluated(did, substs) => {\n                 // if `substs` has no unresolved components, use and empty param_env\n                 let (param_env, substs) = param_env.with_reveal_all().and(substs).into_parts();\n                 // try to resolve e.g. associated constants to their definition on an impl\n@@ -2363,6 +2363,49 @@ impl<'tcx> Const<'tcx> {\n \n impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n \n+/// Represents a constant in Rust.\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord,\n+         RustcEncodable, RustcDecodable, Hash, HashStable)]\n+pub enum ConstKind<'tcx> {\n+    /// A const generic parameter.\n+    Param(ParamConst),\n+\n+    /// Infer the value of the const.\n+    Infer(InferConst<'tcx>),\n+\n+    /// Bound const variable, used only when preparing a trait query.\n+    Bound(DebruijnIndex, BoundVar),\n+\n+    /// A placeholder const - universally quantified higher-ranked const.\n+    Placeholder(ty::PlaceholderConst),\n+\n+    /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n+    /// variants when the code is monomorphic enough for that.\n+    Unevaluated(DefId, SubstsRef<'tcx>),\n+\n+    /// Used to hold computed value.\n+    Value(ConstValue<'tcx>),\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(ConstKind<'_>, 40);\n+\n+impl<'tcx> ConstKind<'tcx> {\n+    #[inline]\n+    pub fn try_to_scalar(&self) -> Option<Scalar> {\n+        if let ConstKind::Value(val) = self {\n+            val.try_to_scalar()\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn try_to_bits(&self, size: ty::layout::Size) -> Option<u128> {\n+        self.try_to_scalar()?.to_bits(size).ok()\n+    }\n+}\n+\n /// An inference variable for a const, for use in const generics.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd,\n          Ord, RustcEncodable, RustcDecodable, Hash, HashStable)]"}, {"sha": "8ba8622704af48147bf1e1571ae41d10a16c28f7", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -4,7 +4,6 @@ use crate::hir::def_id::DefId;\n use crate::infer::canonical::Canonical;\n use crate::ty::{self, Lift, List, Ty, TyCtxt, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::mir::interpret::ConstValue;\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n \n use rustc_serialize::{self, Encodable, Encoder, Decodable, Decoder};\n@@ -234,7 +233,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n \n                 ty::GenericParamDefKind::Const => {\n                     tcx.mk_const(ty::Const {\n-                        val: ConstValue::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n+                        val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n                         ty: tcx.type_of(def_id),\n                     }).into()\n                 }\n@@ -578,7 +577,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n             return c;\n         }\n \n-        if let ConstValue::Param(p) = c.val {\n+        if let ty::ConstKind::Param(p) = c.val {\n             self.const_for_param(p, c)\n         } else {\n             c.super_fold_with(self)"}, {"sha": "76afba220ce44a9eb2ae358ce235e4f29f5d627b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -12,7 +12,6 @@ use crate::ty::subst::{Subst, InternalSubsts, SubstsRef, GenericArgKind};\n use crate::ty::query::TyCtxtAt;\n use crate::ty::TyKind::*;\n use crate::ty::layout::{Integer, IntegerExt};\n-use crate::mir::interpret::ConstValue;\n use crate::util::common::ErrorReported;\n use crate::middle::lang_items;\n \n@@ -566,7 +565,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         !impl_generics.type_param(pt, self).pure_wrt_drop\n                     }\n                     GenericArgKind::Const(&ty::Const {\n-                        val: ConstValue::Param(ref pc),\n+                        val: ty::ConstKind::Param(ref pc),\n                         ..\n                     }) => {\n                         !impl_generics.const_param(pc, self).pure_wrt_drop"}, {"sha": "8d0f9a4716247ee39145a0ed80961229b91c4d20", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -3,7 +3,6 @@\n \n use crate::ty::{self, Ty};\n use smallvec::{self, SmallVec};\n-use crate::mir::interpret::ConstValue;\n \n // The TypeWalker's stack is hot enough that it's worth going to some effort to\n // avoid heap allocations.\n@@ -75,7 +74,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::Placeholder(..) | ty::Bound(..) | ty::Foreign(..) => {\n         }\n         ty::Array(ty, len) => {\n-            if let ConstValue::Unevaluated(_, substs) = len.val {\n+            if let ty::ConstKind::Unevaluated(_, substs) = len.val {\n                 stack.extend(substs.types().rev());\n             }\n             stack.push(len.ty);"}, {"sha": "aa0456b78af3ed599d0a1c985ca5907c8dd16a62", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -8,7 +8,6 @@ use std::iter::once;\n use syntax::symbol::{kw, Ident};\n use syntax_pos::Span;\n use crate::middle::lang_items;\n-use crate::mir::interpret::ConstValue;\n \n /// Returns the set of obligations needed to make `ty` well-formed.\n /// If `ty` contains unresolved inference variables, this may include\n@@ -363,7 +362,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n     /// Pushes the obligations required for an array length to be WF\n     /// into `self.out`.\n     fn compute_array_len(&mut self, constant: ty::Const<'tcx>) {\n-        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n+        if let ty::ConstKind::Unevaluated(def_id, substs) = constant.val {\n             let obligations = self.nominal_obligations(def_id, substs);\n             self.out.extend(obligations);\n "}, {"sha": "bcf0154e3f8796f318533b71604cc148cbb938c4", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -88,9 +88,9 @@ pub fn codegen_static_initializer(\n     let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n \n     let alloc = match static_.val {\n-        ConstValue::ByRef {\n+        ty::ConstKind::Value(ConstValue::ByRef {\n             alloc, offset,\n-        } if offset.bytes() == 0 => {\n+        }) if offset.bytes() == 0 => {\n             alloc\n         },\n         _ => bug!(\"static const eval returned {:#?}\", static_),"}, {"sha": "181787e398546c7ecca299fe414183f8989819bf", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -14,7 +14,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n         match constant.literal.val {\n-            mir::interpret::ConstValue::Unevaluated(def_id, ref substs) => {\n+            ty::ConstKind::Unevaluated(def_id, ref substs) => {\n                 let substs = self.monomorphize(substs);\n                 let instance = ty::Instance::resolve(\n                     self.cx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs,"}, {"sha": "78d09f834c68c9a147d4e987347af4da47a1b3e7", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -75,12 +75,12 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n             return OperandRef::new_zst(bx, layout);\n         }\n \n-        let val = match val.val {\n-            ConstValue::Unevaluated(..) => bug!(\"unevaluated constant in `OperandRef::from_const`\"),\n-            ConstValue::Param(_) => bug!(\"encountered a ConstValue::Param in codegen\"),\n-            ConstValue::Infer(_) => bug!(\"encountered a ConstValue::Infer in codegen\"),\n-            ConstValue::Bound(..) => bug!(\"encountered a ConstValue::Bound in codegen\"),\n-            ConstValue::Placeholder(_) => bug!(\"encountered a ConstValue::Placeholder in codegen\"),\n+        let val_val = match val.val {\n+            ty::ConstKind::Value(val_val) => val_val,\n+            _ => bug!(\"encountered bad ConstKind in codegen\"),\n+        };\n+\n+        let val = match val_val {\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n                     layout::Abi::Scalar(ref x) => x,"}, {"sha": "d4e33ee8b6f33e904267ffcc1c462b32557fe29d", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -480,7 +480,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 match bx.tcx().const_eval(param_env.and(cid)) {\n                     Ok(val) => match val.val {\n-                        mir::interpret::ConstValue::ByRef { alloc, offset } => {\n+                        ty::ConstKind::Value(mir::interpret::ConstValue::ByRef {\n+                            alloc, offset\n+                        }) => {\n                             bx.cx().from_const_alloc(layout, alloc, offset)\n                         }\n                         _ => bug!(\"promoteds should have an allocation: {:?}\", val),"}, {"sha": "1597f98771c0ae74904a5771e6ba4a20ddec1fab", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -253,7 +253,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n         ct: &'tcx ty::Const<'tcx>,\n     ) -> Result<Self::Const, Self::Error> {\n         // only print integers\n-        if let ConstValue::Scalar(Scalar::Raw { .. }) = ct.val {\n+        if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { .. })) = ct.val {\n             if ct.ty.is_integral() {\n                 return self.pretty_print_const(ct);\n             }"}, {"sha": "cdfbca65e7efa4809ad466c978dc86ccfdce4277", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -27,7 +27,7 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::mir::interpret::{ConstValue, PanicInfo};\n+use rustc::mir::interpret::PanicInfo;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n use rustc::mir::*;\n@@ -309,7 +309,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 );\n             }\n         } else {\n-            if let ConstValue::Unevaluated(def_id, substs) = constant.literal.val {\n+            if let ty::ConstKind::Unevaluated(def_id, substs) = constant.literal.val {\n                 if let Err(terr) = self.cx.fully_perform_op(\n                     location.to_locations(),\n                     ConstraintCategory::Boring,"}, {"sha": "0ff9d1b4af00cd82955b14c0fef9729c3a134242", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -128,7 +128,7 @@ fn op_to_const<'tcx>(\n             }\n         },\n     };\n-    ecx.tcx.mk_const(ty::Const { val, ty: op.layout.ty })\n+    ecx.tcx.mk_const(ty::Const { val: ty::ConstKind::Value(val), ty: op.layout.ty })\n }\n \n // Returns a pointer to where the result lives\n@@ -516,7 +516,7 @@ pub fn const_caller_location<'tcx>(\n     intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n     let loc_const = ty::Const {\n         ty: loc_ty,\n-        val: ConstValue::Scalar(loc_place.ptr.into()),\n+        val: ty::ConstKind::Value(ConstValue::Scalar(loc_place.ptr.into())),\n     };\n \n     tcx.mk_const(loc_const)\n@@ -577,10 +577,10 @@ fn validate_and_turn_into_const<'tcx>(\n         if tcx.is_static(def_id) || cid.promoted.is_some() {\n             let ptr = mplace.ptr.to_ptr()?;\n             Ok(tcx.mk_const(ty::Const {\n-                val: ConstValue::ByRef {\n+                val: ty::ConstKind::Value(ConstValue::ByRef {\n                     alloc: ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n                     offset: ptr.offset,\n-                },\n+                }),\n                 ty: mplace.layout.ty,\n             }))\n         } else {"}, {"sha": "1abdcde10ab0f82aac26bcb02bc91f801c78dbbd", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -56,7 +56,7 @@ crate fn lit_to_const<'tcx>(\n         LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n         LitKind::Err(_) => unreachable!(),\n     };\n-    Ok(tcx.mk_const(ty::Const { val: lit, ty }))\n+    Ok(tcx.mk_const(ty::Const { val: ty::ConstKind::Value(lit), ty }))\n }\n \n fn parse_float<'tcx>("}, {"sha": "92c9c702c7a8367f820dff7f4f6b19c7e8a2c21e", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -5,7 +5,7 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_index::vec::Idx;\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n-use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue};\n+use rustc::mir::interpret::{GlobalId, ErrorHandled};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -692,7 +692,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n-                                val: ConstValue::Unevaluated(did, substs),\n+                                val: ty::ConstKind::Unevaluated(did, substs),\n                                 ty: var_ty,\n                             }));\n                             let bin = ExprKind::Binary {\n@@ -914,7 +914,7 @@ fn convert_path_expr<'a, 'tcx>(\n             let local_def_id = cx.tcx.hir().local_def_id(hir_id);\n             let index = generics.param_def_id_to_index[&local_def_id];\n             let name = cx.tcx.hir().name(hir_id);\n-            let val = ConstValue::Param(ty::ParamConst::new(index, name));\n+            let val = ty::ConstKind::Param(ty::ParamConst::new(index, name));\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(\n                     ty::Const {\n@@ -932,7 +932,7 @@ fn convert_path_expr<'a, 'tcx>(\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n-                    val: ConstValue::Unevaluated(def_id, substs),\n+                    val: ty::ConstKind::Unevaluated(def_id, substs),\n                     ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,"}, {"sha": "84a3923c7b2941808003b5f8aa2a65ed64b1a8f1", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -313,7 +313,10 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n             (\n                 &ty::Ref(_, rty, _),\n                 &PatKind::Constant {\n-                    value: Const { val, ty: ty::TyS { kind: ty::Ref(_, crty, _), .. } },\n+                    value: Const {\n+                        val: ty::ConstKind::Value(val),\n+                        ty: ty::TyS { kind: ty::Ref(_, crty, _), .. }\n+                    },\n                 },\n             ) => Pat {\n                 ty: pat.ty,\n@@ -324,13 +327,23 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n                         span: pat.span,\n                         kind: box PatKind::Constant {\n                             value: self.tcx.mk_const(Const {\n-                                val: self.fold_const_value_deref(*val, rty, crty),\n+                                val: ty::ConstKind::Value(\n+                                    self.fold_const_value_deref(*val, rty, crty)\n+                                ),\n                                 ty: rty,\n                             }),\n                         },\n                     },\n                 },\n             },\n+\n+            (\n+                &ty::Ref(_, rty, _),\n+                &PatKind::Constant {\n+                    value: Const { val, ty: ty::TyS { kind: ty::Ref(_, crty, _), .. } },\n+                },\n+            ) => bug!(\"cannot deref {:#?}, {} -> {}\", val, crty, rty),\n+\n             (_, &PatKind::Binding { subpattern: Some(ref s), .. }) => s.fold_with(self),\n             _ => pat.super_fold_with(self),\n         }\n@@ -1283,7 +1296,9 @@ impl<'tcx> IntRange<'tcx> {\n     ) -> Option<IntRange<'tcx>> {\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {\n             let ty = value.ty;\n-            let val = if let ConstValue::Scalar(Scalar::Raw { data, size }) = value.val {\n+            let val = if let ty::ConstKind::Value(ConstValue::Scalar(\n+                Scalar::Raw { data, size }\n+            )) = value.val {\n                 // For this specific pattern we can skip a lot of effort and go\n                 // straight to the result, after doing a bit of checking. (We\n                 // could remove this branch and just use the next branch, which\n@@ -1776,7 +1791,19 @@ fn slice_pat_covered_by_const<'tcx>(\n     suffix: &[Pat<'tcx>],\n     param_env: ty::ParamEnv<'tcx>,\n ) -> Result<bool, ErrorReported> {\n-    let data: &[u8] = match (const_val.val, &const_val.ty.kind) {\n+    let const_val_val = if let ty::ConstKind::Value(val) = const_val.val {\n+        val\n+    } else {\n+        bug!(\n+            \"slice_pat_covered_by_const: {:#?}, {:#?}, {:#?}, {:#?}\",\n+            const_val,\n+            prefix,\n+            slice,\n+            suffix,\n+        )\n+    };\n+\n+    let data: &[u8] = match (const_val_val, &const_val.ty.kind) {\n         (ConstValue::ByRef { offset, alloc, .. }, ty::Array(t, n)) => {\n             assert_eq!(*t, tcx.types.u8);\n             let n = n.eval_usize(tcx, param_env);\n@@ -2049,7 +2076,8 @@ fn split_grouped_constructors<'p, 'tcx>(\n                                     max_fixed_len =\n                                         cmp::max(max_fixed_len, n.eval_usize(tcx, param_env))\n                                 }\n-                                (ConstValue::Slice { start, end, .. }, ty::Slice(_)) => {\n+                                (ty::ConstKind::Value(ConstValue::Slice { start, end, .. }),\n+                                 ty::Slice(_)) => {\n                                     max_fixed_len = cmp::max(max_fixed_len, (end - start) as u64)\n                                 }\n                                 _ => {}\n@@ -2256,17 +2284,17 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             // is when they are subslices of nonzero slices.\n             let (alloc, offset, n, ty) = match value.ty.kind {\n                 ty::Array(t, n) => match value.val {\n-                    ConstValue::ByRef { offset, alloc, .. } => {\n+                    ty::ConstKind::Value(ConstValue::ByRef { offset, alloc, .. }) => {\n                         (alloc, offset, n.eval_usize(cx.tcx, cx.param_env), t)\n                     }\n                     _ => span_bug!(pat.span, \"array pattern is {:?}\", value,),\n                 },\n                 ty::Slice(t) => {\n                     match value.val {\n-                        ConstValue::Slice { data, start, end } => {\n+                        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => {\n                             (data, Size::from_bytes(start as u64), (end - start) as u64, t)\n                         }\n-                        ConstValue::ByRef { .. } => {\n+                        ty::ConstKind::Value(ConstValue::ByRef { .. }) => {\n                             // FIXME(oli-obk): implement `deref` for `ConstValue`\n                             return None;\n                         }"}, {"sha": "3d97ed6bf9b984c62172ec3f026256aeaafe3fa3", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1197,9 +1197,10 @@ pub fn compare_const_vals<'tcx>(\n \n     if let ty::Str = ty.kind {\n         match (a.val, b.val) {\n-            (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n-                let a_bytes = get_slice_bytes(&tcx, a.val);\n-                let b_bytes = get_slice_bytes(&tcx, b.val);\n+            (ty::ConstKind::Value(a_val @ ConstValue::Slice { .. }),\n+             ty::ConstKind::Value(b_val @ ConstValue::Slice { .. })) => {\n+                let a_bytes = get_slice_bytes(&tcx, a_val);\n+                let b_bytes = get_slice_bytes(&tcx, b_val);\n                 return from_bool(a_bytes == b_bytes);\n             }\n             _ => (),"}, {"sha": "6117cf4038a24fbb837c6bc189abff31cac66fcb", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -54,11 +54,11 @@ crate fn eval_nullary_intrinsic<'tcx>(\n         \"type_name\" => {\n             let alloc = type_name::alloc_type_name(tcx, tp_ty);\n             tcx.mk_const(ty::Const {\n-                val: ConstValue::Slice {\n+                val: ty::ConstKind::Value(ConstValue::Slice {\n                     data: alloc,\n                     start: 0,\n                     end: alloc.len(),\n-                },\n+                }),\n                 ty: tcx.mk_static_str(),\n             })\n         },"}, {"sha": "4d2ccdc20da6529ae71b5a245815b7c2c6c2f6e9", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -545,23 +545,27 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Scalar::Raw { data, size } => Scalar::Raw { data, size },\n         };\n         // Early-return cases.\n-        match val.val {\n-            ConstValue::Param(_) =>\n+        let val_val = match val.val {\n+            ty::ConstKind::Param(_) =>\n                 throw_inval!(TooGeneric),\n-            ConstValue::Unevaluated(def_id, substs) => {\n+            ty::ConstKind::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 return Ok(OpTy::from(self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: None,\n                 })?));\n             }\n-            _ => {}\n-        }\n+            ty::ConstKind::Infer(..) |\n+            ty::ConstKind::Bound(..) |\n+            ty::ConstKind::Placeholder(..) =>\n+                bug!(\"eval_const_to_op: Unexpected ConstKind {:?}\", val),\n+            ty::ConstKind::Value(val_val) => val_val,\n+        };\n         // Other cases need layout.\n         let layout = from_known_layout(layout, || {\n             self.layout_of(val.ty)\n         })?;\n-        let op = match val.val {\n+        let op = match val_val {\n             ConstValue::ByRef { alloc, offset } => {\n                 let id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n@@ -583,12 +587,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     self,\n                 ))\n             }\n-            ConstValue::Param(..) |\n-            ConstValue::Infer(..) |\n-            ConstValue::Bound(..) |\n-            ConstValue::Placeholder(..) |\n-            ConstValue::Unevaluated(..) =>\n-                bug!(\"eval_const_to_op: Unexpected ConstValue {:?}\", val),\n         };\n         Ok(OpTy { op, layout })\n     }"}, {"sha": "49f27a8117ece7978ed02ac8528a628a2b751f4f", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1284,15 +1284,15 @@ fn collect_const<'tcx>(\n     );\n \n     match substituted_constant.val {\n-        ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n+        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Ptr(ptr))) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n-        ConstValue::Slice { data: alloc, start: _, end: _ } |\n-        ConstValue::ByRef { alloc, .. } => {\n+        ty::ConstKind::Value(ConstValue::Slice { data: alloc, start: _, end: _ }) |\n+        ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) => {\n             for &((), id) in alloc.relocations().values() {\n                 collect_miri(tcx, id, output);\n             }\n         }\n-        ConstValue::Unevaluated(def_id, substs) => {\n+        ty::ConstKind::Unevaluated(def_id, substs) => {\n             let instance = ty::Instance::resolve(tcx,\n                                                 param_env,\n                                                 def_id,"}, {"sha": "595ef2aad49d912d602db637e8dc27530ff9a146", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1,7 +1,6 @@\n //! A copy of the `Qualif` trait in `qualify_consts.rs` that is suitable for the new validator.\n \n use rustc::mir::*;\n-use rustc::mir::interpret::ConstValue;\n use rustc::ty::{self, Ty};\n use syntax_pos::DUMMY_SP;\n \n@@ -118,7 +117,7 @@ pub trait Qualif {\n             Operand::Move(ref place) => Self::in_place(cx, per_local, place.as_ref()),\n \n             Operand::Constant(ref constant) => {\n-                if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n+                if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty)"}, {"sha": "a7f48162f9b18fbbfcd4090eb83bfa1c7a422494", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -14,7 +14,6 @@\n \n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n-use rustc::mir::interpret::ConstValue;\n use rustc::mir::visit::{PlaceContext, MutatingUseContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n use rustc::ty::{self, List, TyCtxt, TypeFoldable};\n@@ -584,7 +583,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n             Operand::Move(place) => self.validate_place(place.as_ref()),\n \n             Operand::Constant(constant) => {\n-                if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n+                if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     if self.tcx.trait_of_item(def_id).is_some() {\n                         // Don't peek inside trait associated constants.\n                         // (see below what we do for other consts, for now)"}, {"sha": "fd30be807b94b9415bc9457db45285744163df25", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -14,7 +14,6 @@ use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n use rustc::ty::query::Providers;\n use rustc::mir::*;\n-use rustc::mir::interpret::ConstValue;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUseContext};\n use rustc::middle::lang_items;\n use rustc::session::config::nightly_options;\n@@ -251,7 +250,7 @@ trait Qualif {\n             Operand::Move(ref place) => Self::in_place(cx, place.as_ref()),\n \n             Operand::Constant(ref constant) => {\n-                if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n+                if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty).unwrap_or(false)"}, {"sha": "d9f0b8550bb961ad32ca2c661367874ec79e838d", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -37,7 +37,6 @@ use rustc::ty::{self, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{GenericArg, GenericArgKind};\n-use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n use std::fmt::{self, Debug};\n@@ -286,7 +285,7 @@ impl context::ContextOps<ChalkArenas<'tcx>> for ChalkContext<'tcx> {\n                     _ => false,\n                 },\n                 GenericArgKind::Const(ct) => match ct.val {\n-                    ConstValue::Bound(debruijn, bound_ct) => {\n+                    ty::ConstKind::Bound(debruijn, bound_ct) => {\n                         debug_assert_eq!(debruijn, ty::INNERMOST);\n                         cvar == bound_ct\n                     }"}, {"sha": "b8893d65ced0d9ddcec3a874d800b622c269e9f7", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -19,7 +19,6 @@ use rustc::traits::{\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::GenericArg;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n-use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n use super::{ChalkInferenceContext, ChalkArenas, ChalkExClause, ConstrainedSubst};\n@@ -287,7 +286,7 @@ impl TypeRelation<'tcx> for AnswerSubstitutor<'cx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        if let ty::Const { val: ConstValue::Bound(debruijn, bound_ct), .. } = a {\n+        if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), .. } = a {\n             if *debruijn == self.binder_index {\n                 self.unify_free_answer_var(*bound_ct, b.into())?;\n                 return Ok(b);\n@@ -296,8 +295,8 @@ impl TypeRelation<'tcx> for AnswerSubstitutor<'cx, 'tcx> {\n \n         match (a, b) {\n             (\n-                ty::Const { val: ConstValue::Bound(a_debruijn, a_bound), .. },\n-                ty::Const { val: ConstValue::Bound(b_debruijn, b_bound), .. },\n+                ty::Const { val: ty::ConstKind::Bound(a_debruijn, a_bound), .. },\n+                ty::Const { val: ty::ConstKind::Bound(b_debruijn, b_bound), .. },\n             ) => {\n                 assert_eq!(a_debruijn, b_debruijn);\n                 assert_eq!(a_bound, b_bound);"}, {"sha": "ee3ebd691e4538612dc90c329771a9e50aaf2fec", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -18,7 +18,6 @@ use rustc::ty::{self, DefIdTree, Ty, TyCtxt, Const, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::subst::{self, Subst, InternalSubsts, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n-use rustc::mir::interpret::ConstValue;\n use rustc_target::spec::abi;\n use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n@@ -2226,7 +2225,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let def_id = tcx.hir().local_def_id(ast_const.hir_id);\n \n         let mut const_ = ty::Const {\n-            val: ConstValue::Unevaluated(\n+            val: ty::ConstKind::Unevaluated(\n                 def_id,\n                 InternalSubsts::identity_for_item(tcx, def_id),\n             ),\n@@ -2243,7 +2242,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n             let name = tcx.hir().name(hir_id);\n-            const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n+            const_.val = ty::ConstKind::Param(ty::ParamConst::new(index, name));\n         }\n \n         tcx.mk_const(const_)"}, {"sha": "2363dbc53039787fa9172d6aead4eed2618514d3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1688,7 +1688,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n-        let alloc = if let ConstValue::ByRef { alloc, .. } = static_.val {\n+        let alloc = if let ty::ConstKind::Value(ConstValue::ByRef { alloc, .. }) = static_.val {\n             alloc\n         } else {\n             bug!(\"Matching on non-ByRef static\")"}, {"sha": "fd97493b5912af078d1273fd5f2a0db501759b69", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -6,7 +6,6 @@ use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable, ToPredicate};\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n-use rustc::mir::interpret::ConstValue;\n use rustc::middle::lang_items;\n use rustc::infer::opaque_types::may_define_opaque_type;\n \n@@ -536,7 +535,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             }\n \n             fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n-                if let ConstValue::Param(param) = c.val {\n+                if let ty::ConstKind::Param(param) = c.val {\n                     self.params.insert(param.index);\n                 }\n                 c.super_visit_with(self)\n@@ -705,7 +704,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                 }\n \n                                 ty::subst::GenericArgKind::Const(ct) => match ct.val {\n-                                    ConstValue::Param(_) => {}\n+                                    ty::ConstKind::Param(_) => {}\n                                     _ => {\n                                         tcx.sess\n                                             .struct_span_err("}, {"sha": "0523de56512aeeaf2cc7ed01512da03fd0a6c899", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -1,7 +1,6 @@\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::util::nodemap::FxHashSet;\n-use rustc::mir::interpret::ConstValue;\n use syntax::source_map::Span;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n@@ -77,7 +76,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n \n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n-        if let ConstValue::Param(data) = c.val {\n+        if let ty::ConstKind::Param(data) = c.val {\n             self.parameters.push(Parameter::from(data));\n         }\n         false"}, {"sha": "4d8d0040cdcd77dcc937351a32cbf810be92e00d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -16,7 +16,7 @@ use rustc::infer::region_constraints::{RegionConstraintData, Constraint};\n use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n-use rustc::mir::interpret::{GlobalId, ConstValue};\n+use rustc::mir::interpret::GlobalId;\n use rustc::hir;\n use rustc::hir::def::{CtorKind, DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -3075,7 +3075,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Slice(ty) => Slice(box ty.clean(cx)),\n             ty::Array(ty, n) => {\n                 let mut n = cx.tcx.lift(&n).expect(\"array lift failed\");\n-                if let ConstValue::Unevaluated(def_id, substs) = n.val {\n+                if let ty::ConstKind::Unevaluated(def_id, substs) = n.val {\n                     let param_env = cx.tcx.param_env(def_id);\n                     let cid = GlobalId {\n                         instance: ty::Instance::new(def_id, substs),\n@@ -4234,7 +4234,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n \n fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     match n.val {\n-        ConstValue::Unevaluated(def_id, _) => {\n+        ty::ConstKind::Unevaluated(def_id, _) => {\n             if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n                 print_const_expr(cx, cx.tcx.hir().body_owned_by(hir_id))\n             } else {"}, {"sha": "34d4a534ad9f1b23314ff581cb653d8cf0c3379d", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -25,7 +25,7 @@ fn main() {\n //      ...\n //      _4 = const Scalar(AllocId(1).0x0) : &i32;\n //      _3 = const Scalar(AllocId(1).0x0) : &i32;\n-//      _2 = const Scalar(AllocId(1).0x0) : *const i32;\n+//      _2 = const Value(Scalar(AllocId(1).0x0)) : *const i32;\n //      ...\n //      _1 = move _2 as usize (Misc);\n //      ..."}, {"sha": "c9495b597eb19e80229dd7ee5cf3635a6e77ecac", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e380b797b22e5361a43b2b82f6278df17d89f3e/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=5e380b797b22e5361a43b2b82f6278df17d89f3e", "patch": "@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h61b0fcb05ebeeb79E)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h92c563325b7ff21aE)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h61b0fcb05ebeeb79)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h92c563325b7ff21a)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]"}]}