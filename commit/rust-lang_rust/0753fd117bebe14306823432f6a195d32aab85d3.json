{"sha": "0753fd117bebe14306823432f6a195d32aab85d3", "node_id": "C_kwDOAAsO6NoAKDA3NTNmZDExN2JlYmUxNDMwNjgyMzQzMmY2YTE5NWQzMmFhYjg1ZDM", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2022-05-29T16:01:26Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2022-07-09T21:20:02Z"}, "message": "Partially stabilize const_slice_from_raw_parts\n\nThis doesn't stabilize methods working on mutable pointers.", "tree": {"sha": "1fcf217383fdbda292dbb73b9232fe1d77f04eb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fcf217383fdbda292dbb73b9232fe1d77f04eb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0753fd117bebe14306823432f6a195d32aab85d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0753fd117bebe14306823432f6a195d32aab85d3", "html_url": "https://github.com/rust-lang/rust/commit/0753fd117bebe14306823432f6a195d32aab85d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0753fd117bebe14306823432f6a195d32aab85d3/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f893495e3da91dc319d37861b803eed9d6c8c7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f893495e3da91dc319d37861b803eed9d6c8c7c7", "html_url": "https://github.com/rust-lang/rust/commit/f893495e3da91dc319d37861b803eed9d6c8c7c7"}], "stats": {"total": 129, "additions": 62, "deletions": 67}, "files": [{"sha": "2ecc8b8238b18abb344c6b1b5a76095c87ddee4f", "filename": "compiler/rustc_codegen_cranelift/example/issue-91827-extern-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-91827-extern-types.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -6,7 +6,6 @@\n // Regression test for issue #91827.\n \n #![feature(const_ptr_offset_from)]\n-#![feature(const_slice_from_raw_parts)]\n #![feature(extern_types)]\n \n use std::ptr::addr_of;"}, {"sha": "bd256cec8a1478e81f2f5ca8c8fb28d844ed4257", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -134,7 +134,7 @@\n #![feature(const_ptr_write)]\n #![feature(const_raw_ptr_comparison)]\n #![feature(const_size_of_val)]\n-#![feature(const_slice_from_raw_parts)]\n+#![feature(const_slice_from_raw_parts_mut)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_str_from_utf8_unchecked_mut)]\n #![feature(const_swap)]"}, {"sha": "2fcff3dfc5c44e3af71f8abe8abd42aaf8beaea6", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -690,7 +690,8 @@ pub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\n /// ```\n #[inline]\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n-#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[rustc_const_stable(feature = \"const_slice_from_raw_parts\", since = \"1.64.0\")]\n+#[rustc_allow_const_fn_unstable(ptr_metadata)]\n pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n     from_raw_parts(data.cast(), len)\n }\n@@ -722,7 +723,7 @@ pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n /// ```\n #[inline]\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n-#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts_mut\", issue = \"67456\")]\n pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n     from_raw_parts_mut(data.cast(), len)\n }"}, {"sha": "107e71ab68b010a2be037eb92126f8971b3c7aef", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -85,7 +85,7 @@ use crate::ptr;\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[rustc_const_stable(feature = \"const_slice_from_raw_parts\", since = \"1.64.0\")]\n #[must_use]\n pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.\n@@ -129,7 +129,7 @@ pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T]\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts_mut\", issue = \"67456\")]\n #[must_use]\n pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`."}, {"sha": "2c54bfb35ebc3a73bbd49c073a9696b3201bec18", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -73,7 +73,6 @@\n #![feature(iterator_try_reduce)]\n #![feature(const_mut_refs)]\n #![feature(const_pin)]\n-#![feature(const_slice_from_raw_parts)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(result_into_ok_or_err)]"}, {"sha": "3f19cd4d8046da47470733080bbad47e2339873b", "filename": "src/test/ui/const-ptr/allowed_slices.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fallowed_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fallowed_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fallowed_slices.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(\n-    const_slice_from_raw_parts,\n     slice_from_ptr_range,\n     const_slice_from_ptr_range,\n     pointer_byte_offsets,"}, {"sha": "c2d22ca4917db34f18de00811c76afccb8cef468", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -7,10 +7,10 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:19:34\n+  ::: $DIR/forbidden_slices.rs:18:34\n    |\n LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:19:34\n+   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:18:34\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -21,10 +21,10 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:20:33\n+  ::: $DIR/forbidden_slices.rs:19:33\n    |\n LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:20:33\n+   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:19:33\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -35,13 +35,13 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:23:34\n+  ::: $DIR/forbidden_slices.rs:22:34\n    |\n LL | pub static S2: &[u32] = unsafe { from_raw_parts(&D0, 2) };\n-   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:23:34\n+   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:22:34\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:26:1\n+  --> $DIR/forbidden_slices.rs:25:1\n    |\n LL | pub static S4: &[u8] = unsafe { from_raw_parts((&D1) as *const _ as _, 1) };\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n@@ -52,7 +52,7 @@ LL | pub static S4: &[u8] = unsafe { from_raw_parts((&D1) as *const _ as _, 1) }\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:28:1\n+  --> $DIR/forbidden_slices.rs:27:1\n    |\n LL | pub static S5: &[u8] = unsafe { from_raw_parts((&D3) as *const _ as _, size_of::<&u32>()) };\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -63,7 +63,7 @@ LL | pub static S5: &[u8] = unsafe { from_raw_parts((&D3) as *const _ as _, size\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:30:1\n+  --> $DIR/forbidden_slices.rs:29:1\n    |\n LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4) };\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n@@ -74,7 +74,7 @@ LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4)\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:33:1\n+  --> $DIR/forbidden_slices.rs:32:1\n    |\n LL | pub static S7: &[u16] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -93,10 +93,10 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |         inside `std::slice::from_raw_parts::<u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:44:5\n+  ::: $DIR/forbidden_slices.rs:43:5\n    |\n LL |     from_raw_parts(ptr, 1)\n-   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:44:5\n+   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:43:5\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -112,10 +112,10 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:47:34\n+  ::: $DIR/forbidden_slices.rs:46:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:47:34\n+   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:46:34\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -131,10 +131,10 @@ LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:48:33\n+  ::: $DIR/forbidden_slices.rs:47:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:48:33\n+   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:47:33\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -150,13 +150,13 @@ LL |         unsafe { intrinsics::offset(self, count) }\n LL |         unsafe { self.offset(count as isize) }\n    |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:51:25\n+  ::: $DIR/forbidden_slices.rs:50:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n-   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:51:25\n+   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:50:25\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:53:1\n+  --> $DIR/forbidden_slices.rs:52:1\n    |\n LL | pub static R4: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n@@ -167,7 +167,7 @@ LL | pub static R4: &[u8] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:58:1\n+  --> $DIR/forbidden_slices.rs:57:1\n    |\n LL | pub static R5: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -178,7 +178,7 @@ LL | pub static R5: &[u8] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:63:1\n+  --> $DIR/forbidden_slices.rs:62:1\n    |\n LL | pub static R6: &[bool] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n@@ -189,7 +189,7 @@ LL | pub static R6: &[bool] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:68:1\n+  --> $DIR/forbidden_slices.rs:67:1\n    |\n LL | pub static R7: &[u16] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -211,10 +211,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n LL |         unsafe { self.offset(count as isize) }\n    |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:75:25\n+  ::: $DIR/forbidden_slices.rs:74:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n-   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:75:25\n+   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:74:25\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -230,10 +230,10 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:80:34\n+  ::: $DIR/forbidden_slices.rs:79:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n-   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:80:34\n+   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:79:34\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -249,10 +249,10 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:81:35\n+  ::: $DIR/forbidden_slices.rs:80:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n-   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:81:35\n+   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:80:35\n \n error: aborting due to 18 previous errors\n "}, {"sha": "da9df1c63a4cbda9f6b40f2f78f9e6344103d7f7", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -7,10 +7,10 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:19:34\n+  ::: $DIR/forbidden_slices.rs:18:34\n    |\n LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:19:34\n+   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:18:34\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -21,10 +21,10 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:20:33\n+  ::: $DIR/forbidden_slices.rs:19:33\n    |\n LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:20:33\n+   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:19:33\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -35,13 +35,13 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:23:34\n+  ::: $DIR/forbidden_slices.rs:22:34\n    |\n LL | pub static S2: &[u32] = unsafe { from_raw_parts(&D0, 2) };\n-   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:23:34\n+   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:22:34\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:26:1\n+  --> $DIR/forbidden_slices.rs:25:1\n    |\n LL | pub static S4: &[u8] = unsafe { from_raw_parts((&D1) as *const _ as _, 1) };\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n@@ -52,7 +52,7 @@ LL | pub static S4: &[u8] = unsafe { from_raw_parts((&D1) as *const _ as _, 1) }\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:28:1\n+  --> $DIR/forbidden_slices.rs:27:1\n    |\n LL | pub static S5: &[u8] = unsafe { from_raw_parts((&D3) as *const _ as _, size_of::<&u32>()) };\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -63,7 +63,7 @@ LL | pub static S5: &[u8] = unsafe { from_raw_parts((&D3) as *const _ as _, size\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:30:1\n+  --> $DIR/forbidden_slices.rs:29:1\n    |\n LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4) };\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n@@ -74,7 +74,7 @@ LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4)\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:33:1\n+  --> $DIR/forbidden_slices.rs:32:1\n    |\n LL | pub static S7: &[u16] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -93,10 +93,10 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |         inside `std::slice::from_raw_parts::<u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:44:5\n+  ::: $DIR/forbidden_slices.rs:43:5\n    |\n LL |     from_raw_parts(ptr, 1)\n-   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:44:5\n+   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:43:5\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -112,10 +112,10 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:47:34\n+  ::: $DIR/forbidden_slices.rs:46:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:47:34\n+   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:46:34\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -131,10 +131,10 @@ LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:48:33\n+  ::: $DIR/forbidden_slices.rs:47:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:48:33\n+   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:47:33\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -150,13 +150,13 @@ LL |         unsafe { intrinsics::offset(self, count) }\n LL |         unsafe { self.offset(count as isize) }\n    |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:51:25\n+  ::: $DIR/forbidden_slices.rs:50:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n-   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:51:25\n+   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:50:25\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:53:1\n+  --> $DIR/forbidden_slices.rs:52:1\n    |\n LL | pub static R4: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n@@ -167,7 +167,7 @@ LL | pub static R4: &[u8] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:58:1\n+  --> $DIR/forbidden_slices.rs:57:1\n    |\n LL | pub static R5: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -178,7 +178,7 @@ LL | pub static R5: &[u8] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:63:1\n+  --> $DIR/forbidden_slices.rs:62:1\n    |\n LL | pub static R6: &[bool] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n@@ -189,7 +189,7 @@ LL | pub static R6: &[bool] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:68:1\n+  --> $DIR/forbidden_slices.rs:67:1\n    |\n LL | pub static R7: &[u16] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -211,10 +211,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n LL |         unsafe { self.offset(count as isize) }\n    |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:75:25\n+  ::: $DIR/forbidden_slices.rs:74:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n-   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:75:25\n+   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:74:25\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -230,10 +230,10 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:80:34\n+  ::: $DIR/forbidden_slices.rs:79:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n-   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:80:34\n+   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:79:34\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -249,10 +249,10 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n    |                                          ------------------------------ inside `from_ptr_range::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:81:35\n+  ::: $DIR/forbidden_slices.rs:80:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n-   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:81:35\n+   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:80:35\n \n error: aborting due to 18 previous errors\n "}, {"sha": "e2184911f422c47cfe2318fd641c688e7d4cc90a", "filename": "src/test/ui/const-ptr/forbidden_slices.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -3,7 +3,6 @@\n // normalize-stderr-test \"a[0-9]+\\+0x\" -> \"A_ID+0x\"\n // error-pattern: could not evaluate static initializer\n #![feature(\n-    const_slice_from_raw_parts,\n     slice_from_ptr_range,\n     const_slice_from_ptr_range,\n     pointer_byte_offsets,"}, {"sha": "e1f5e8ae1453c64b4d73a4e09499cac15c492b0c", "filename": "src/test/ui/consts/const-eval/issue-91827-extern-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -4,7 +4,6 @@\n // Regression test for issue #91827.\n \n #![feature(const_ptr_offset_from)]\n-#![feature(const_slice_from_raw_parts)]\n #![feature(extern_types)]\n \n use std::ptr::addr_of;"}, {"sha": "c3de6dc2075f8aaa4dffdbc1d1234742e5f03174", "filename": "src/test/ui/consts/const-size_of_val-align_of_val.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0753fd117bebe14306823432f6a195d32aab85d3/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs?ref=0753fd117bebe14306823432f6a195d32aab85d3", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(const_size_of_val, const_align_of_val)]\n #![feature(const_size_of_val_raw, const_align_of_val_raw, layout_for_ptr)]\n-#![feature(const_slice_from_raw_parts)]\n \n use std::{mem, ptr};\n "}]}