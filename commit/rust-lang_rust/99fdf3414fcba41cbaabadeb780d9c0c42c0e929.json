{"sha": "99fdf3414fcba41cbaabadeb780d9c0c42c0e929", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZmRmMzQxNGZjYmE0MWNiYWFiYWRlYjc4MGQ5YzBjNDJjMGU5Mjk=", "commit": {"author": {"name": "Xmasreturns", "email": "Xmasreturns@users.noreply.github.com", "date": "2015-12-09T18:07:02Z"}, "committer": {"name": "Xmasreturns", "email": "Xmasreturns@users.noreply.github.com", "date": "2015-12-09T18:07:02Z"}, "message": "Grammar changes for readability", "tree": {"sha": "d664158fae90b47dc21e1119a9387918615e671a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d664158fae90b47dc21e1119a9387918615e671a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99fdf3414fcba41cbaabadeb780d9c0c42c0e929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99fdf3414fcba41cbaabadeb780d9c0c42c0e929", "html_url": "https://github.com/rust-lang/rust/commit/99fdf3414fcba41cbaabadeb780d9c0c42c0e929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99fdf3414fcba41cbaabadeb780d9c0c42c0e929/comments", "author": {"login": "Xmasreturns", "id": 13546260, "node_id": "MDQ6VXNlcjEzNTQ2MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/13546260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xmasreturns", "html_url": "https://github.com/Xmasreturns", "followers_url": "https://api.github.com/users/Xmasreturns/followers", "following_url": "https://api.github.com/users/Xmasreturns/following{/other_user}", "gists_url": "https://api.github.com/users/Xmasreturns/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xmasreturns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xmasreturns/subscriptions", "organizations_url": "https://api.github.com/users/Xmasreturns/orgs", "repos_url": "https://api.github.com/users/Xmasreturns/repos", "events_url": "https://api.github.com/users/Xmasreturns/events{/privacy}", "received_events_url": "https://api.github.com/users/Xmasreturns/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xmasreturns", "id": 13546260, "node_id": "MDQ6VXNlcjEzNTQ2MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/13546260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xmasreturns", "html_url": "https://github.com/Xmasreturns", "followers_url": "https://api.github.com/users/Xmasreturns/followers", "following_url": "https://api.github.com/users/Xmasreturns/following{/other_user}", "gists_url": "https://api.github.com/users/Xmasreturns/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xmasreturns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xmasreturns/subscriptions", "organizations_url": "https://api.github.com/users/Xmasreturns/orgs", "repos_url": "https://api.github.com/users/Xmasreturns/repos", "events_url": "https://api.github.com/users/Xmasreturns/events{/privacy}", "received_events_url": "https://api.github.com/users/Xmasreturns/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebf6743d88509412308553e7172e89157f9b981", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebf6743d88509412308553e7172e89157f9b981", "html_url": "https://github.com/rust-lang/rust/commit/eebf6743d88509412308553e7172e89157f9b981"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "e17d3f762b9e8cec4592ed6ccb92dffea05d114e", "filename": "src/doc/book/enums.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99fdf3414fcba41cbaabadeb780d9c0c42c0e929/src%2Fdoc%2Fbook%2Fenums.md", "raw_url": "https://github.com/rust-lang/rust/raw/99fdf3414fcba41cbaabadeb780d9c0c42c0e929/src%2Fdoc%2Fbook%2Fenums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fenums.md?ref=99fdf3414fcba41cbaabadeb780d9c0c42c0e929", "patch": "@@ -1,7 +1,8 @@\n % Enums\n \n-An `enum` in Rust is a type that represents data that could be one of\n-several possible variants:\n+An `enum` in Rust is a type that represents data that is one of\n+several possible variants. Each variant in the `enum` can optionally\n+have data associated with it:\n \n ```rust\n enum Message {\n@@ -12,9 +13,8 @@ enum Message {\n }\n ```\n \n-Each variant can optionally have data associated with it. The syntax for\n-defining variants resembles the syntaxes used to define structs: you can\n-have variants with no data (like unit-like structs), variants with named\n+The syntax for defining variants resembles the syntaxes used to define structs:\n+you can have variants with no data (like unit-like structs), variants with named\n data, and variants with unnamed data (like tuple structs). Unlike\n separate struct definitions, however, an `enum` is a single type. A\n value of the enum can match any of the variants. For this reason, an\n@@ -41,7 +41,7 @@ let y: BoardGameTurn = BoardGameTurn::Move { squares: 1 };\n Both variants are named `Move`, but since they\u2019re scoped to the name of\n the enum, they can both be used without conflict.\n \n-A value of an enum type contains information about which variant it is,\n+A value of an `enum` type contains information about which variant it is,\n in addition to any data associated with that variant. This is sometimes\n referred to as a \u2018tagged union\u2019, since the data includes a \u2018tag\u2019\n indicating what type it is. The compiler uses this information to\n@@ -67,7 +67,7 @@ equality yet, but we\u2019ll find out in the [`traits`][traits] section.\n \n # Constructors as functions\n \n-An enum\u2019s constructors can also be used like functions. For example:\n+An `enum` constructor can also be used like a function. For example:\n \n ```rust\n # enum Message {\n@@ -76,7 +76,7 @@ An enum\u2019s constructors can also be used like functions. For example:\n let m = Message::Write(\"Hello, world\".to_string());\n ```\n \n-Is the same as\n+is the same as\n \n ```rust\n # enum Message {"}]}