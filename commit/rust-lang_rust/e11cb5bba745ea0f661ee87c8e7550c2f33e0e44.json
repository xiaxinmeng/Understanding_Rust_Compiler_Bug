{"sha": "e11cb5bba745ea0f661ee87c8e7550c2f33e0e44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMWNiNWJiYTc0NWVhMGY2NjFlZTg3YzhlNzU1MGMyZjMzZTBlNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-20T16:25:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-20T16:25:53Z"}, "message": "auto merge of #16257 : steveklabnik/rust/guide_patterns, r=brson\n\nFixes #4417.", "tree": {"sha": "128c21e196830319696d38149065f048ca76cf78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128c21e196830319696d38149065f048ca76cf78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11cb5bba745ea0f661ee87c8e7550c2f33e0e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11cb5bba745ea0f661ee87c8e7550c2f33e0e44", "html_url": "https://github.com/rust-lang/rust/commit/e11cb5bba745ea0f661ee87c8e7550c2f33e0e44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11cb5bba745ea0f661ee87c8e7550c2f33e0e44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "655600b01b88c2fb2f91965e2b505068db7d808f", "url": "https://api.github.com/repos/rust-lang/rust/commits/655600b01b88c2fb2f91965e2b505068db7d808f", "html_url": "https://github.com/rust-lang/rust/commit/655600b01b88c2fb2f91965e2b505068db7d808f"}, {"sha": "ee3f07481fb38e07b90219bcb9e36120990acf64", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3f07481fb38e07b90219bcb9e36120990acf64", "html_url": "https://github.com/rust-lang/rust/commit/ee3f07481fb38e07b90219bcb9e36120990acf64"}], "stats": {"total": 168, "additions": 167, "deletions": 1}, "files": [{"sha": "74ee311bb64a7f660506360fb87a284dc91090c5", "filename": "src/doc/guide.md", "status": "modified", "additions": 167, "deletions": 1, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/e11cb5bba745ea0f661ee87c8e7550c2f33e0e44/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/e11cb5bba745ea0f661ee87c8e7550c2f33e0e44/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=e11cb5bba745ea0f661ee87c8e7550c2f33e0e44", "patch": "@@ -3771,6 +3771,173 @@ guide](http://doc.rust-lang.org/guide-pointers.html#rc-and-arc).\n \n # Patterns\n \n+We've made use of patterns a few times in the guide: first with `let` bindings,\n+then with `match` statements. Let's go on a whirlwind tour of all of the things\n+patterns can do!\n+\n+A quick refresher: you can match against literals directly, and `_` acts as an\n+'any' case:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    1 => println!(\"one\"),\n+    2 => println!(\"two\"),\n+    3 => println!(\"three\"),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+You can match multiple patterns with `|`:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    1 | 2 => println!(\"one or two\"),\n+    3 => println!(\"three\"),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+You can match a range of values with `..`:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    1 .. 5 => println!(\"one through five\"),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+Ranges are mostly used with integers and single characters.\n+\n+If you're matching multiple things, via a `|` or a `..`, you can bind\n+the value to a name with `@`:\n+\n+```{rust}\n+let x = 1i;\n+\n+match x {\n+    x @ 1 .. 5 => println!(\"got {}\", x),\n+    _ => println!(\"anything\"),\n+}\n+```\n+\n+If you're matching on an enum which has variants, you can use `..` to\n+ignore the value in the variant:\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(int),\n+    Missing,\n+}\n+\n+let x = Value(5i);\n+\n+match x {\n+    Value(..) => println!(\"Got an int!\"),\n+    Missing   => println!(\"No such luck.\"),\n+}\n+```\n+\n+You can introduce **match guards** with `if`:\n+\n+```{rust}\n+enum OptionalInt {\n+    Value(int),\n+    Missing,\n+}\n+\n+let x = Value(5i);\n+\n+match x {\n+    Value(x) if x > 5 => println!(\"Got an int bigger than five!\"),\n+    Value(..) => println!(\"Got an int!\"),\n+    Missing   => println!(\"No such luck.\"),\n+}\n+```\n+\n+If you're matching on a pointer, you can use the same syntax as you declared it\n+with. First, `&`:\n+\n+```{rust}\n+let x = &5i;\n+\n+match x {\n+    &x => println!(\"Got a value: {}\", x),\n+}\n+```\n+\n+Here, the `x` inside the `match` has type `int`. In other words, the left hand\n+side of the pattern destructures the value. If we have `&5i`, then in `&x`, `x`\n+would be `5i`.\n+\n+If you want to get a reference, use the `ref` keyword:\n+\n+```{rust}\n+let x = 5i;\n+\n+match x {\n+    ref x => println!(\"Got a reference to {}\", x),\n+}\n+```\n+\n+Here, the `x` inside the `match` has the type `&int`. In other words, the `ref`\n+keyword _creates_ a reference, for use in the pattern. If you need a mutable\n+reference, `ref mut` will work in the same way:\n+\n+```{rust}\n+let mut x = 5i;\n+\n+match x {\n+    ref mut x => println!(\"Got a mutable reference to {}\", x),\n+}\n+```\n+\n+If you have a struct, you can desugar it inside of a pattern:\n+\n+```{rust}\n+struct Point {\n+    x: int,\n+    y: int,\n+}\n+\n+let origin = Point { x: 0i, y: 0i };\n+\n+match origin {\n+    Point { x: x, y: y } => println!(\"({},{})\", x, y),\n+}\n+```\n+\n+If we only care about some of the values, we don't have to give them all names:\n+\n+```{rust}\n+struct Point {\n+    x: int,\n+    y: int,\n+}\n+\n+let origin = Point { x: 0i, y: 0i };\n+\n+match origin {\n+    Point { x: x, .. } => println!(\"x is {}\", x),\n+}\n+```\n+\n+Whew! That's a lot of different ways to match things, and they can all be\n+mixed and matched, depending on what you're doing:\n+\n+```{rust,ignore}\n+match x {\n+    Foo { x: Some(ref name), y: None } => ...\n+}\n+```\n+\n+Patterns are very powerful.  Make good use of them.\n+\n # Method Syntax\n \n Functions are great, but if you want to call a bunch of them on some data, it\n@@ -3858,7 +4025,6 @@ This **static method** builds a new `Circle` for us. Note that static methods\n are called with the `Struct::method()` syntax, rather than the `ref.method()`\n syntax.\n \n-\n # Closures\n \n So far, we've made lots of functions in Rust. But we've given them all names."}]}