{"sha": "e48446d060bb35925af0e79fcd2554f83ee26ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODQ0NmQwNjBiYjM1OTI1YWYwZTc5ZmNkMjU1NGY4M2VlMjZlY2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T00:36:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:35:58Z"}, "message": "test: Remove newtype enums from the test suite. rs=deenum", "tree": {"sha": "099a538dcad8e80d443fd718d364fc98ee13266b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099a538dcad8e80d443fd718d364fc98ee13266b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e48446d060bb35925af0e79fcd2554f83ee26ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e48446d060bb35925af0e79fcd2554f83ee26ecd", "html_url": "https://github.com/rust-lang/rust/commit/e48446d060bb35925af0e79fcd2554f83ee26ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e48446d060bb35925af0e79fcd2554f83ee26ecd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "html_url": "https://github.com/rust-lang/rust/commit/bd2d17e4a1f75bc7e451fc1054d98ff13c456850"}], "stats": {"total": 152, "additions": 42, "deletions": 110}, "files": [{"sha": "fd3355d83faab4144f161dd34735662a51707db1", "filename": "src/test/auxiliary/issue_2472_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-enum S = ();\n+struct S(())\n \n pub impl S {\n     fn foo() { }"}, {"sha": "c80457ef1e92c68c9c31407afb5d6f1aa3ee8df2", "filename": "src/test/auxiliary/issue_3136_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -11,7 +11,7 @@\n trait x {\n     fn use_x<T>();\n }\n-enum y = (); \n+struct y(());\n impl x for y { \n     fn use_x<T>() {\n         struct foo { //~ ERROR quux"}, {"sha": "f6b9a82ec676ca0aac38ae298eb2b9eeeb4b27f4", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-enum sty = ~[int];\n+struct sty(~[int]);\n \n fn unpack(_unpack: &fn(v: &sty) -> ~[int]) {}\n "}, {"sha": "ee38ceda3d80ba98b9708a3cd201d00424b6c708", "filename": "src/test/compile-fail/borrowck-assign-to-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum foo = int;\n+struct foo(int);\n \n fn main() {\n     let x = foo(3);"}, {"sha": "b874eac34b18c2c504ace1d1ce43f6a5e66ea182", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum X = Either<(uint,uint),extern fn()>;\n+struct X(Either<(uint,uint),extern fn()>);\n+\n pub impl &'self X {\n     fn with(blk: &fn(x: &Either<(uint,uint),extern fn()>)) {\n         blk(&**self)"}, {"sha": "ece9ae7e86199faab96520e76cc406196199e9d1", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test #3387\n \n-enum foo = ~uint;\n+struct foo(~uint);\n \n impl Add<foo, foo> for foo {\n     pure fn add(f: &foo) -> foo {"}, {"sha": "540793d4135f26a8417f2579e41a90adb0bf108a", "filename": "src/test/compile-fail/borrowck-mut-deref-comp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum foo = ~int;\n+struct foo(~int);\n \n fn borrow(x: @mut foo) {\n     let _y = &***x; //~ ERROR illegal borrow unless pure"}, {"sha": "05dab4f8c68fb075eb2c1c8bf19571cb97d629a0", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -24,7 +24,7 @@ fn noncopyable() -> noncopyable {\n     }\n }\n \n-enum wrapper = noncopyable;\n+struct wrapper(noncopyable);\n \n fn main() {\n     let x1 = wrapper(noncopyable());"}, {"sha": "cccf66ef2d54ead9a8bcd92bad854d224b4de45c", "filename": "src/test/compile-fail/enum-in-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum hello = int;\n+struct hello(int);\n \n fn main() {\n     let hello = 0; //~ERROR declaration of `hello` shadows"}, {"sha": "db054d5aba700297c787625daca9f35b922f8097", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -16,7 +16,7 @@ struct t { //~ ERROR this type cannot be instantiated\n   to_str: (),\n }\n \n-enum x = @t; //~ ERROR this type cannot be instantiated\n+struct x(@t); //~ ERROR this type cannot be instantiated\n \n fn main() {\n }"}, {"sha": "515db2b431cf1ee33e3afdf4a34ea308b93e702e", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -11,7 +11,7 @@\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-enum t = @t; //~ ERROR this type cannot be instantiated\n+enum t(@t); //~ ERROR this type cannot be instantiated\n \n trait to_str_2 {\n     fn to_str() -> ~str;"}, {"sha": "318982c3b1360a3482b47ec3dc015a360f230e3b", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -16,7 +16,7 @@ pub struct send_packet<T> {\n mod pingpong {\n     use send_packet;\n     pub type ping = send_packet<pong>;\n-    pub enum pong = send_packet<ping>; //~ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+    pub struct pong(send_packet<ping>); //~ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n }\n \n fn main() {}"}, {"sha": "02df25d87d7fb9a7a9ffa485e2a800bfd8f75c87", "filename": "src/test/compile-fail/issue-3080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-test\n-enum x = ();\n+struct x(());\n pub impl x {\n     unsafe fn with() { } // This should fail\n }"}, {"sha": "df768860cba94817f1f297e5ed4222fd25669276", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum thing = uint;\n+struct thing(uint);\n impl cmp::Ord for thing { //~ ERROR missing method `gt`\n     pure fn lt(&self, other: &thing) -> bool { **self < **other }\n     pure fn le(&self, other: &thing) -> bool { **self < **other }"}, {"sha": "bfc17c589db91ed69af911b7443008507c87263a", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -20,7 +20,7 @@ trait Hahaha: Eq + Eq + Eq + Eq + Eq + //~ ERROR Duplicate supertrait\n               Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n               Eq {}\n \n-enum Lol = int;\n+struct Lol(int);\n \n impl Hahaha for Lol { }\n "}, {"sha": "c0de60fa58e3f985afb45f73b5d56fa20bc2973a", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -14,7 +14,7 @@ fn send<T:Owned>(ch: _chan<T>, -data: T) {\n     fail!();\n }\n \n-enum _chan<T> = int;\n+struct _chan<T>(int);\n \n // Tests that \"log(debug, message);\" is flagged as using\n // message after the send deinitializes it"}, {"sha": "4d89ec14d94b243a0167d1c9889230d7466403db", "filename": "src/test/compile-fail/pat-shadow-in-nested-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum foo = uint;\n+struct foo(uint);\n \n fn main() {\n     let (foo, _) = (2, 3); //~ ERROR declaration of `foo` shadows"}, {"sha": "35bef5a407a5574059ad0fc4fccd66a554588f51", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -12,7 +12,7 @@\n // nominal types (but not on other types) and that they are type\n // checked.\n \n-enum an_enum = &'self int;\n+struct an_enum(&'self int);\n trait a_trait {\n     fn foo() -> &'self int;\n }"}, {"sha": "4c3338d2e1d0c52afc968d4f5cb2e588780279f5", "filename": "src/test/compile-fail/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -11,7 +11,7 @@\n \n // check that the &int here does not cause us to think that `foo`\n // contains region pointers\n-enum foo = ~fn(x: &int);\n+struct foo(~fn(x: &int));\n \n fn take_foo(x: foo<'static>) {} //~ ERROR no region bound is allowed on `foo`\n "}, {"sha": "9e19ecdcb755691ba7b27bed5088082651f5df8f", "filename": "src/test/compile-fail/tps-invariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -12,7 +12,7 @@ struct box<T> {\n     f: T\n }\n \n-enum box_impl<T> = box<T>;\n+struct box_impl<T>(box<T>);\n \n fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n     b.f = v;"}, {"sha": "9569e5f1e8210fe58383f4a5813c7ca048ac80e5", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -17,7 +17,7 @@ struct box<T> {\n     f: T\n }\n \n-enum box_impl<T> = box<T>;\n+struct box_impl<T>(box<T>);\n \n impl<T:Copy> box_trait<T> for box_impl<T> {\n     fn get() -> T { return self.f; }"}, {"sha": "22855bce28fca37798b7025ad7be53980525d245", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -12,7 +12,7 @@ struct Pair<A,B> {\n     a: A, b: B\n }\n \n-enum RecEnum<A> = Rec<A>;\n+struct RecEnum<A>(Rec<A>);\n struct Rec<A> {\n     val: A,\n     rec: Option<@mut RecEnum<A>>"}, {"sha": "b6fdb07789c8da639519aac88e985092f4ccc3ea", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -85,13 +85,6 @@ impl cmp::Eq for Expr {\n     pure fn ne(&self, other: &Expr) -> bool { !(*self).eq(other) }\n }\n \n-impl cmp::Eq for AnEnum {\n-    pure fn eq(&self, other: &AnEnum) -> bool {\n-        (*self).v == other.v\n-    }\n-    pure fn ne(&self, other: &AnEnum) -> bool { !(*self).eq(other) }\n-}\n-\n impl cmp::Eq for Point {\n     pure fn eq(&self, other: &Point) -> bool {\n         self.x == other.x && self.y == other.y\n@@ -139,10 +132,6 @@ struct Spanned<T> {\n #[auto_decode]\n struct SomeStruct { v: ~[uint] }\n \n-#[auto_encode]\n-#[auto_decode]\n-enum AnEnum = SomeStruct;\n-\n #[auto_encode]\n #[auto_decode]\n struct Point {x: uint, y: uint}\n@@ -168,10 +157,6 @@ pub fn main() {\n     test_prettyprint(a, &~\"Spanned {lo: 0u, hi: 5u, node: 22u}\");\n     test_ebml(a);\n \n-    let a = &AnEnum(SomeStruct {v: ~[1u, 2u, 3u]});\n-    test_prettyprint(a, &~\"AnEnum(SomeStruct {v: ~[1u, 2u, 3u]})\");\n-    test_ebml(a);\n-\n     let a = &Point {x: 3u, y: 5u};\n     test_prettyprint(a, &~\"Point {x: 3u, y: 5u}\");\n     test_ebml(a);"}, {"sha": "9a84aa6a10e4a814c5fbc741aefa62faf3f61534", "filename": "src/test/run-pass/auto-ref-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -11,7 +11,7 @@\n // Check that we can define inherent methods on newtype enums that use\n // an auto-ref'd receiver.\n \n-enum Foo = uint;\n+struct Foo(uint);\n \n pub impl Foo {\n     fn len(&self) -> uint { **self }"}, {"sha": "732c26694adb5fc5d84925f2a34f93d191f015fb", "filename": "src/test/run-pass/autoderef-method-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -16,7 +16,7 @@ impl double for uint {\n     fn double() -> uint { self * 2u }\n }\n \n-enum foo = uint;\n+struct foo(uint);\n \n pub fn main() {\n     let x = foo(3u);"}, {"sha": "5aa9aeafeed2839af81553e58d09f68cd579f8fa", "filename": "src/test/run-pass/const-enum-newtype-align.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Ftest%2Frun-pass%2Fconst-enum-newtype-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Ftest%2Frun-pass%2Fconst-enum-newtype-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-newtype-align.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum E = u32;\n-struct S { a: u8, b: E }\n-const C: S = S { a: 0xA5, b: E(0xDEADBEEF) };\n-\n-pub fn main() {\n-    fail_unless!(C.b == 0xDEADBEEF);\n-}"}, {"sha": "b96b0e957c9907cdd742a60c1338226e51d5aecb", "filename": "src/test/run-pass/const-newtype-enum.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum Foo = u32;\n-\n-const X: Foo = Foo(17);\n-\n-pub fn main() {\n-    fail_unless!((*X == 17));\n-    fail_unless!((*Y == 23));\n-}\n-\n-const Y: Foo = Foo(23);"}, {"sha": "c140a66ffe4d6c460d0f6199f973ca0f6b7a39ec", "filename": "src/test/run-pass/instantiable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Finstantiable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Finstantiable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finstantiable.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -11,7 +11,7 @@\n \n // check that we do not report a type like this as uninstantiable,\n // even though it would be if the nxt field had type @foo:\n-enum foo = X;\n+struct foo(X);\n \n struct X { x: uint, nxt: *foo }\n "}, {"sha": "ad6320aed2bb7edf1a1652ec4782cb3ba8df4361", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -12,7 +12,7 @@\n \n trait clam<A> { }\n \n-enum foo = int;\n+struct foo(int);\n \n pub impl foo {\n     fn bar<B,C:clam<B>>(c: C) -> B { fail!(); }"}, {"sha": "1376f20571be6615181ee91c5b0ca05f64c5c792", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -225,8 +225,8 @@ pub mod pingpong {\n     use core::cast;\n     use core::ptr;\n \n-    pub enum ping = ::pipes::send_packet<pong>;\n-    pub enum pong = ::pipes::send_packet<ping>;\n+    pub struct ping(::pipes::send_packet<pong>);\n+    pub struct pong(::pipes::send_packet<ping>);\n \n     pub fn liberate_ping(-p: ping) -> ::pipes::send_packet<pong> {\n         unsafe {"}, {"sha": "05e50e3e6604784c372c75c5f9f176b37177c849", "filename": "src/test/run-pass/let-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum xx = int;\n+struct xx(int);\n \n struct X { x: xx, y: int }\n "}, {"sha": "79ad6e8a2506a27ae4e27b69daf0478e80c305f0", "filename": "src/test/run-pass/log-degen-enum.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Ftest%2Frun-pass%2Flog-degen-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Ftest%2Frun-pass%2Flog-degen-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-degen-enum.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum Foo = uint;\n-\n-pub fn main() {\n-    let x = Foo(1);\n-    let y = fmt!(\"%?\", x);\n-    fail_unless!(y == ~\"Foo(1)\");\n-}"}, {"sha": "18132d15d57876f011cace4d2616f2e426fe32df", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum myvec<X> = ~[X];\n+struct myvec<X>(~[X]);\n \n fn myvec_deref<X:Copy>(mv: myvec<X>) -> ~[X] { return copy *mv; }\n "}, {"sha": "6a82f70d9158aa0a074dca1444ddb403d5dd72a0", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum mytype = Mytype;\n+struct mytype(Mytype);\n \n struct Mytype {compute: extern fn(mytype) -> int, val: int}\n "}, {"sha": "f1686080f46618b4f82c1556436ad1ac319200c9", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -43,8 +43,8 @@ mod pingpong {\n             ptr::addr_of(&(data.ping))\n         }\n     }\n-    pub enum ping = server::pong;\n-    pub enum pong = client::ping;\n+    pub struct ping(server::pong);\n+    pub struct pong(client::ping);\n     pub mod client {\n         use core::pipes;\n         use core::pipes::*;"}, {"sha": "0f3f4db3bbfe28aa2f5086ca9fe269d81eb0d853", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -28,7 +28,7 @@ fn align(size: uint, align: uint) -> uint {\n     ((size + align) - 1u) & !(align - 1u)\n }\n \n-enum ptr_visit_adaptor<V> = Inner<V>;\n+struct ptr_visit_adaptor<V>(Inner<V>);\n \n pub impl<V:TyVisitor + movable_ptr> ptr_visit_adaptor<V> {\n \n@@ -470,7 +470,7 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n }\n \n-enum my_visitor = @mut Stuff;\n+struct my_visitor(@mut Stuff);\n \n struct Stuff {\n     ptr1: *c_void,"}, {"sha": "bc67ece79de50a05030ba4c6e3f9f48adff37087", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n-enum my_visitor = @mut { types: ~[str] };\n+struct my_visitor(@mut { types: ~[str] });\n \n impl TyVisitor for my_visitor {\n     fn visit_bot() -> bool {"}, {"sha": "b249a4470cb9ea8667818d9d5a88bfa95e5f8f9a", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum arena = ();\n+struct arena(());\n \n struct Bcx {\n     fcx: &'self Fcx<'self>"}, {"sha": "058cb4ec77e486da91311c897192faa4edca1a56", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -34,7 +34,7 @@ fn r(v: *int) -> r {\n     }\n }\n \n-enum t = Node;\n+struct t(Node);\n \n struct Node {\n     next: Option<@mut t>,"}, {"sha": "e3b03060893a288e644198106b1f9f5dd75143cb", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -34,7 +34,7 @@ fn r(v: U) -> r {\n     }\n }\n \n-enum t = Node;\n+struct t(Node);\n \n struct Node {\n     next: Option<@mut t>,"}, {"sha": "c76c1c6aeb9107b6d49823a8fbf06ab992d38f36", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -43,7 +43,7 @@ fn r(v: U, w: int, _x: *int) -> R {\n     }\n }\n \n-enum t = Node;\n+struct t(Node);\n \n struct Node {\n     next: Option<@mut t>,"}, {"sha": "4cee3c636c572b9cf653e43d6866e6ce05fb903b", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48446d060bb35925af0e79fcd2554f83ee26ecd/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=e48446d060bb35925af0e79fcd2554f83ee26ecd", "patch": "@@ -13,7 +13,7 @@\n \n // Test cyclic detector when using trait instances.\n \n-enum Tree = @mut TreeR;\n+struct Tree(@mut TreeR);\n struct TreeR {\n     left: Option<Tree>,\n     right: Option<Tree>,"}]}