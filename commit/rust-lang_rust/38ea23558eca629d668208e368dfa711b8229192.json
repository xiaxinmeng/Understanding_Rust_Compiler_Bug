{"sha": "38ea23558eca629d668208e368dfa711b8229192", "node_id": "C_kwDOAAsO6NoAKDM4ZWEyMzU1OGVjYTYyOWQ2NjgyMDhlMzY4ZGZhNzExYjgyMjkxOTI", "commit": {"author": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2022-06-13T07:32:54Z"}, "committer": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2022-07-19T08:23:34Z"}, "message": "Don't use main; improve example", "tree": {"sha": "90a1903fd4d360fe50c4feffc9eaabf44cbc84c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a1903fd4d360fe50c4feffc9eaabf44cbc84c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ea23558eca629d668208e368dfa711b8229192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ea23558eca629d668208e368dfa711b8229192", "html_url": "https://github.com/rust-lang/rust/commit/38ea23558eca629d668208e368dfa711b8229192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ea23558eca629d668208e368dfa711b8229192/comments", "author": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102", "html_url": "https://github.com/rust-lang/rust/commit/1cbacc0c8aa3c4d99a073108d4ec7a535ff79102"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "79d2c8204f95624c1c7f1bd0b8695ef34437d45b", "filename": "compiler/rustc_error_codes/src/error_codes/E0283.md", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38ea23558eca629d668208e368dfa711b8229192/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md", "raw_url": "https://github.com/rust-lang/rust/raw/38ea23558eca629d668208e368dfa711b8229192/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md?ref=38ea23558eca629d668208e368dfa711b8229192", "patch": "@@ -9,15 +9,13 @@ impl Into<u32> for Foo {\n     fn into(self) -> u32 { 1 }\n }\n \n-fn main() {\n-    let foo = Foo;\n-    let bar: u32 = foo.into() * 1u32;\n-}\n+let foo = Foo;\n+let bar: u32 = foo.into() * 1u32;\n ```\n \n This error can be solved by adding type annotations that provide the missing\n information to the compiler. In this case, the solution is to specify the\n-fully-qualified method:\n+trait's type parameter:\n \n ```\n struct Foo;\n@@ -26,8 +24,6 @@ impl Into<u32> for Foo {\n     fn into(self) -> u32 { 1 }\n }\n \n-fn main() {\n-    let foo = Foo;\n-    let bar: u32 = <Foo as Into<u32>>::into(foo) * 1u32;\n-}\n+let foo = Foo;\n+let bar: u32 = Into::<u32>::into(foo) * 1u32;\n ```"}, {"sha": "2aee9dfbdbd94f315d4aae5ab53a3bf688bf6caf", "filename": "compiler/rustc_error_codes/src/error_codes/E0790.md", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38ea23558eca629d668208e368dfa711b8229192/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md", "raw_url": "https://github.com/rust-lang/rust/raw/38ea23558eca629d668208e368dfa711b8229192/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md?ref=38ea23558eca629d668208e368dfa711b8229192", "patch": "@@ -20,11 +20,9 @@ impl Generator for AnotherImpl {\n     fn create() -> u32 { 2 }\n }\n \n-fn main() {\n-    let cont: u32 = Generator::create();\n-    // error, impossible to choose one of Generator trait implementation\n-    // Should it be Impl or AnotherImpl, maybe something else?\n-}\n+let cont: u32 = Generator::create();\n+// error, impossible to choose one of Generator trait implementation\n+// Should it be Impl or AnotherImpl, maybe something else?\n ```\n \n This error can be solved by adding type annotations that provide the missing\n@@ -42,10 +40,8 @@ impl Generator for AnotherImpl {\n     fn create() -> u32 { 2 }\n }\n \n-fn main() {\n-    let gen1 = AnotherImpl::create();\n+let gen1 = AnotherImpl::create();\n \n-    // if there are multiple methods with same name (different traits)\n-    let gen2 = <AnotherImpl as Generator>::create();\n-}\n+// if there are multiple methods with same name (different traits)\n+let gen2 = <AnotherImpl as Generator>::create();\n ```"}]}