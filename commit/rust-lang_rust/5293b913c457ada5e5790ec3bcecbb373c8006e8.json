{"sha": "5293b913c457ada5e5790ec3bcecbb373c8006e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOTNiOTEzYzQ1N2FkYTVlNTc5MGVjM2JjZWNiYjM3M2M4MDA2ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-11T17:04:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-11T17:04:17Z"}, "message": "Auto merge of #37456 - estebank:unused-imports-verbosity, r=jonathandturner\n\nGroup unused import warnings per import list\n\nGiven a file\n\n``` rust\nuse std::collections::{BinaryHeap, BTreeMap, BTreeSet};\n\nfn main() {}\n```\n\nShow a single warning, instead of three for each unused import:\n\n``` nocode\nwarning: unused imports, #[warn(unused_imports)] on by default\n --> file2.rs:1:24\n  |\n1 | use std::collections::{BinaryHeap, BTreeMap, BTreeSet};\n  |                        ^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^\n```\n\nInclude support for lints pointing at `MultilineSpan`s, instead of just\n`Span`s.\n\nFixes #16132.", "tree": {"sha": "b6bae23aa4e09ee85600f441fe3fcaebfc895f9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6bae23aa4e09ee85600f441fe3fcaebfc895f9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5293b913c457ada5e5790ec3bcecbb373c8006e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5293b913c457ada5e5790ec3bcecbb373c8006e8", "html_url": "https://github.com/rust-lang/rust/commit/5293b913c457ada5e5790ec3bcecbb373c8006e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5293b913c457ada5e5790ec3bcecbb373c8006e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2e892249d51cce0980e95e0b4daabb7710ad82", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2e892249d51cce0980e95e0b4daabb7710ad82", "html_url": "https://github.com/rust-lang/rust/commit/ba2e892249d51cce0980e95e0b4daabb7710ad82"}, {"sha": "a820d99eb28fcc144c97fc3d152b272d85f6e280", "url": "https://api.github.com/repos/rust-lang/rust/commits/a820d99eb28fcc144c97fc3d152b272d85f6e280", "html_url": "https://github.com/rust-lang/rust/commit/a820d99eb28fcc144c97fc3d152b272d85f6e280"}], "stats": {"total": 108, "additions": 82, "deletions": 26}, "files": [{"sha": "50c581057407affab5e6cd523ba6d4a6a3f5fd7f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5293b913c457ada5e5790ec3bcecbb373c8006e8", "patch": "@@ -106,7 +106,7 @@ pub trait IntoEarlyLint {\n     fn into_early_lint(self, id: LintId) -> EarlyLint;\n }\n \n-impl<'a> IntoEarlyLint for (Span, &'a str) {\n+impl<'a, S: Into<MultiSpan>> IntoEarlyLint for (S, &'a str) {\n     fn into_early_lint(self, id: LintId) -> EarlyLint {\n         let (span, msg) = self;\n         let mut diagnostic = Diagnostic::new(errors::Level::Warning, msg);\n@@ -530,7 +530,10 @@ pub trait LintContext: Sized {\n         })\n     }\n \n-    fn lookup_and_emit(&self, lint: &'static Lint, span: Option<Span>, msg: &str) {\n+    fn lookup_and_emit<S: Into<MultiSpan>>(&self,\n+                                           lint: &'static Lint,\n+                                           span: Option<S>,\n+                                           msg: &str) {\n         let (level, src) = match self.level_src(lint) {\n             None => return,\n             Some(pair) => pair,\n@@ -553,7 +556,7 @@ pub trait LintContext: Sized {\n     }\n \n     /// Emit a lint at the appropriate level, for a particular span.\n-    fn span_lint(&self, lint: &'static Lint, span: Span, msg: &str) {\n+    fn span_lint<S: Into<MultiSpan>>(&self, lint: &'static Lint, span: S, msg: &str) {\n         self.lookup_and_emit(lint, Some(span), msg);\n     }\n \n@@ -601,7 +604,7 @@ pub trait LintContext: Sized {\n \n     /// Emit a lint at the appropriate level, with no associated span.\n     fn lint(&self, lint: &'static Lint, msg: &str) {\n-        self.lookup_and_emit(lint, None, msg);\n+        self.lookup_and_emit(lint, None as Option<Span>, msg);\n     }\n \n     /// Merge the lints specified by any lint attributes into the"}, {"sha": "9becbd99eb33a2a6fb56bf01c4822d7d735c57a6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=5293b913c457ada5e5790ec3bcecbb373c8006e8", "patch": "@@ -258,14 +258,15 @@ impl Session {\n     pub fn unimpl(&self, msg: &str) -> ! {\n         self.diagnostic().unimpl(msg)\n     }\n-    pub fn add_lint(&self,\n-                    lint: &'static lint::Lint,\n-                    id: ast::NodeId,\n-                    sp: Span,\n-                    msg: String)\n+    pub fn add_lint<S: Into<MultiSpan>>(&self,\n+                                        lint: &'static lint::Lint,\n+                                        id: ast::NodeId,\n+                                        sp: S,\n+                                        msg: String)\n     {\n         self.add_lint_diagnostic(lint, id, (sp, &msg[..]))\n     }\n+\n     pub fn add_lint_diagnostic<M>(&self,\n                                   lint: &'static lint::Lint,\n                                   id: ast::NodeId,"}, {"sha": "36e05a433414ee0da08a7d99045373f14898772a", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=5293b913c457ada5e5790ec3bcecbb373c8006e8", "patch": "@@ -25,13 +25,16 @@ use Resolver;\n use Namespace::{TypeNS, ValueNS};\n \n use rustc::lint;\n+use rustc::util::nodemap::NodeMap;\n use syntax::ast::{self, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::visit::{self, Visitor};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n \n \n struct UnusedImportCheckVisitor<'a, 'b: 'a> {\n     resolver: &'a mut Resolver<'b>,\n+    /// All the (so far) unused imports, grouped path list\n+    unused_imports: NodeMap<NodeMap<Span>>,\n }\n \n // Deref and DerefMut impls allow treating UnusedImportCheckVisitor as Resolver.\n@@ -52,23 +55,21 @@ impl<'a, 'b> DerefMut for UnusedImportCheckVisitor<'a, 'b> {\n impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     // We have information about whether `use` (import) directives are actually\n     // used now. If an import is not used at all, we signal a lint error.\n-    fn check_import(&mut self, id: ast::NodeId, span: Span) {\n+    fn check_import(&mut self, item_id: ast::NodeId, id: ast::NodeId, span: Span) {\n         if !self.used_imports.contains(&(id, TypeNS)) &&\n            !self.used_imports.contains(&(id, ValueNS)) {\n             if self.maybe_unused_trait_imports.contains(&id) {\n                 // Check later.\n                 return;\n             }\n-            let msg = if let Ok(snippet) = self.session.codemap().span_to_snippet(span) {\n-                format!(\"unused import: `{}`\", snippet)\n-            } else {\n-                \"unused import\".to_string()\n-            };\n-            self.session.add_lint(lint::builtin::UNUSED_IMPORTS, id, span, msg);\n+            self.unused_imports.entry(item_id).or_insert_with(NodeMap).insert(id, span);\n         } else {\n             // This trait import is definitely used, in a way other than\n             // method resolution.\n             self.maybe_unused_trait_imports.remove(&id);\n+            if let Some(i) = self.unused_imports.get_mut(&item_id) {\n+                i.remove(&id);\n+            }\n         }\n     }\n }\n@@ -98,16 +99,16 @@ impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n             ast::ItemKind::Use(ref p) => {\n                 match p.node {\n                     ViewPathSimple(..) => {\n-                        self.check_import(item.id, p.span)\n+                        self.check_import(item.id, item.id, p.span)\n                     }\n \n                     ViewPathList(_, ref list) => {\n                         for i in list {\n-                            self.check_import(i.node.id, i.span);\n+                            self.check_import(item.id, i.node.id, i.span);\n                         }\n                     }\n                     ViewPathGlob(_) => {\n-                        self.check_import(item.id, p.span)\n+                        self.check_import(item.id, item.id, p.span);\n                     }\n                 }\n             }\n@@ -117,6 +118,35 @@ impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n }\n \n pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n-    let mut visitor = UnusedImportCheckVisitor { resolver: resolver };\n+    let mut visitor = UnusedImportCheckVisitor {\n+        resolver: resolver,\n+        unused_imports: NodeMap(),\n+    };\n     visit::walk_crate(&mut visitor, krate);\n+\n+    for (id, spans) in &visitor.unused_imports {\n+        let len = spans.len();\n+        let mut spans = spans.values().map(|s| *s).collect::<Vec<Span>>();\n+        spans.sort();\n+        let ms = MultiSpan::from_spans(spans.clone());\n+        let mut span_snippets = spans.iter()\n+            .filter_map(|s| {\n+                match visitor.session.codemap().span_to_snippet(*s) {\n+                    Ok(s) => Some(format!(\"`{}`\", s)),\n+                    _ => None,\n+                }\n+            }).collect::<Vec<String>>();\n+        span_snippets.sort();\n+        let msg = format!(\"unused import{}{}\",\n+                          if len > 1 { \"s\" } else { \"\" },\n+                          if span_snippets.len() > 0 {\n+                              format!(\": {}\", span_snippets.join(\", \"))\n+                          } else {\n+                              String::new()\n+                          });\n+        visitor.session.add_lint(lint::builtin::UNUSED_IMPORTS,\n+                                 *id,\n+                                 ms,\n+                                 msg);\n+    }\n }"}, {"sha": "d6e45aa0b9f0c81bd070db49ca6374fb84b5985f", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=5293b913c457ada5e5790ec3bcecbb373c8006e8", "patch": "@@ -52,7 +52,7 @@ pub type FileName = String;\n /// able to use many of the functions on spans in codemap and you cannot assume\n /// that the length of the span = hi - lo; there may be space in the BytePos\n /// range between files.\n-#[derive(Clone, Copy, Hash, PartialEq, Eq)]\n+#[derive(Clone, Copy, Hash, PartialEq, Eq, Ord, PartialOrd)]\n pub struct Span {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -67,7 +67,7 @@ pub struct Span {\n ///   the error, and would be rendered with `^^^`.\n /// - they can have a *label*. In this case, the label is written next\n ///   to the mark in the snippet when we render.\n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub struct MultiSpan {\n     primary_spans: Vec<Span>,\n     span_labels: Vec<(Span, String)>,\n@@ -254,7 +254,7 @@ impl From<Span> for MultiSpan {\n     }\n }\n \n-#[derive(PartialEq, Eq, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(PartialEq, Eq, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Copy, Ord, PartialOrd)]\n pub struct ExpnId(pub u32);\n \n pub const NO_EXPANSION: ExpnId = ExpnId(!0);"}, {"sha": "5b1c04946a40b8a822b40f0698729b176356fbd1", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=5293b913c457ada5e5790ec3bcecbb373c8006e8", "patch": "@@ -17,8 +17,9 @@ use std::mem::*;            // shouldn't get errors for not using\n                             // everything imported\n \n // Should get errors for both 'Some' and 'None'\n-use std::option::Option::{Some, None}; //~ ERROR unused import: `Some`\n-                                    //~^ ERROR unused import: `None`\n+use std::option::Option::{Some, None};\n+//~^ ERROR unused imports: `None`, `Some`\n+//~| ERROR unused imports: `None`, `Some`\n \n use test::A;       //~ ERROR unused import: `test::A`\n // Be sure that if we just bring some methods into scope that they're also"}, {"sha": "43b6cd8f85f824869a1357aa0efe4b0aa39d4ed6", "filename": "src/test/ui/span/multispan-import-lint.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs?ref=5293b913c457ada5e5790ec3bcecbb373c8006e8", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cmp::{Eq, Ord, min, PartialEq, PartialOrd};\n+\n+fn main() {\n+    let _ = min(1, 2);\n+}"}, {"sha": "b581584eee7e2471cff58053d25716a01f208010", "filename": "src/test/ui/span/multispan-import-lint.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5293b913c457ada5e5790ec3bcecbb373c8006e8/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr?ref=5293b913c457ada5e5790ec3bcecbb373c8006e8", "patch": "@@ -0,0 +1,6 @@\n+warning: unused imports: `Eq`, `Ord`, `PartialEq`, `PartialOrd`, #[warn(unused_imports)] on by default\n+  --> $DIR/multispan-import-lint.rs:11:16\n+   |\n+11 | use std::cmp::{Eq, Ord, min, PartialEq, PartialOrd};\n+   |                ^^  ^^^       ^^^^^^^^^  ^^^^^^^^^^\n+"}]}