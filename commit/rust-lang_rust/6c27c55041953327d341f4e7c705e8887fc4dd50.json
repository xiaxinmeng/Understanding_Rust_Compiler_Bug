{"sha": "6c27c55041953327d341f4e7c705e8887fc4dd50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjdjNTUwNDE5NTMzMjdkMzQxZjRlN2M3MDVlODg4N2ZjNGRkNTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-05T16:04:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-05T16:04:49Z"}, "message": "Merge #7870\n\n7870: Use chalk_ir::AdtId r=Veykril a=Veykril\n\nIt's a bit unfortunate that we got two AdtId's now(technically 3 with the alias in the chalk module but that one won't allow pattern matching), one from hir_def and one from chalk_ir(hir_ty). But the hir_ty/chalk one doesn't leave hir so it shouldn't be that bad I suppose. Though if I see this right this will happen for almost all IDs.\r\n\r\nI imagine most of the intermediate changes to using chalk ids will turn out not too nice until the refactor is over.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "bcc8bcac74fa61c816986b0635defa7c7512660f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcc8bcac74fa61c816986b0635defa7c7512660f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c27c55041953327d341f4e7c705e8887fc4dd50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQlahCRBK7hj4Ov3rIwAAdHIIAFA9bSfBC557ri3THEgiF2Z8\nEFrcyZt4jyer8fVuvloN/zoWj/Tps8IxZmhfhRbWGLSjfD3FLlt5u3jDIDiKT6cO\n1vo6kbuwj30sO2jP+bItYDbXBtxoW+Jy+GUH9vTCsUIuOW7My9btI9Tfly98e8NT\nh+Xdb4pbzMU/rg0wV0vXzBQjKgSks9DnWmqYai/TCgxG2WwfDnuc8XQ6IxRS3zPk\nj+1k+CKDOtX9MR5RGumbIi7sTnvEw2rmaOO31C/LSMS1UlTo4ssAbH/NPIDZ+tyC\noOrDbDVQEzFByQdetsrRVp1vIJsLkIZOp3R0iMvVD8jk6azlKMwi0rvkwpiHiKs=\n=tOE8\n-----END PGP SIGNATURE-----\n", "payload": "tree bcc8bcac74fa61c816986b0635defa7c7512660f\nparent 25a43e24c81f7b51234fc4e65e5e36ddbe3d60f1\nparent 50e01d2bc7429d718e0783d75458a6a047ee2b70\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614960289 +0000\ncommitter GitHub <noreply@github.com> 1614960289 +0000\n\nMerge #7870\n\n7870: Use chalk_ir::AdtId r=Veykril a=Veykril\n\nIt's a bit unfortunate that we got two AdtId's now(technically 3 with the alias in the chalk module but that one won't allow pattern matching), one from hir_def and one from chalk_ir(hir_ty). But the hir_ty/chalk one doesn't leave hir so it shouldn't be that bad I suppose. Though if I see this right this will happen for almost all IDs.\r\n\r\nI imagine most of the intermediate changes to using chalk ids will turn out not too nice until the refactor is over.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c27c55041953327d341f4e7c705e8887fc4dd50", "html_url": "https://github.com/rust-lang/rust/commit/6c27c55041953327d341f4e7c705e8887fc4dd50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c27c55041953327d341f4e7c705e8887fc4dd50/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a43e24c81f7b51234fc4e65e5e36ddbe3d60f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a43e24c81f7b51234fc4e65e5e36ddbe3d60f1", "html_url": "https://github.com/rust-lang/rust/commit/25a43e24c81f7b51234fc4e65e5e36ddbe3d60f1"}, {"sha": "50e01d2bc7429d718e0783d75458a6a047ee2b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e01d2bc7429d718e0783d75458a6a047ee2b70", "html_url": "https://github.com/rust-lang/rust/commit/50e01d2bc7429d718e0783d75458a6a047ee2b70"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "7656db974f93580a8f9c973c36319715ea369a58", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -1700,7 +1700,7 @@ impl Type {\n \n     pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n         let adt_id = match self.ty.value {\n-            Ty::Adt(adt_id, ..) => adt_id,\n+            Ty::Adt(hir_ty::AdtId(adt_id), ..) => adt_id,\n             _ => return false,\n         };\n \n@@ -1728,8 +1728,8 @@ impl Type {\n \n     pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n         let (variant_id, substs) = match self.ty.value {\n-            Ty::Adt(AdtId::StructId(s), ref substs) => (s.into(), substs),\n-            Ty::Adt(AdtId::UnionId(u), ref substs) => (u.into(), substs),\n+            Ty::Adt(hir_ty::AdtId(AdtId::StructId(s)), ref substs) => (s.into(), substs),\n+            Ty::Adt(hir_ty::AdtId(AdtId::UnionId(u)), ref substs) => (u.into(), substs),\n             _ => return Vec::new(),\n         };\n "}, {"sha": "2751cd304a3c635f2dabe18c8f5faa5568303c01", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -2,9 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{\n-    expr::Statement, path::path, resolver::HasResolver, AdtId, AssocItemId, DefWithBodyId,\n-};\n+use hir_def::{expr::Statement, path::path, resolver::HasResolver, AssocItemId, DefWithBodyId};\n use hir_expand::{diagnostics::DiagnosticSink, name};\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstPtr};\n@@ -17,7 +15,7 @@ use crate::{\n         MissingPatFields, RemoveThisSemicolon,\n     },\n     utils::variant_data,\n-    InferenceResult, Ty,\n+    AdtId, InferenceResult, Ty,\n };\n \n pub(crate) use hir_def::{\n@@ -382,10 +380,14 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         let (params, required) = match mismatch.expected {\n-            Ty::Adt(AdtId::EnumId(enum_id), ref parameters) if enum_id == core_result_enum => {\n+            Ty::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), ref parameters)\n+                if enum_id == core_result_enum =>\n+            {\n                 (parameters, \"Ok\".to_string())\n             }\n-            Ty::Adt(AdtId::EnumId(enum_id), ref parameters) if enum_id == core_option_enum => {\n+            Ty::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), ref parameters)\n+                if enum_id == core_option_enum =>\n+            {\n                 (parameters, \"Some\".to_string())\n             }\n             _ => return,"}, {"sha": "04d39c5714eda85c03a8975c8e109e599c21212e", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -222,12 +222,12 @@ use hir_def::{\n     adt::VariantData,\n     body::Body,\n     expr::{Expr, Literal, Pat, PatId},\n-    AdtId, EnumVariantId, StructId, VariantId,\n+    EnumVariantId, StructId, VariantId,\n };\n use la_arena::Idx;\n use smallvec::{smallvec, SmallVec};\n \n-use crate::{db::HirDatabase, InferenceResult, Ty};\n+use crate::{db::HirDatabase, AdtId, InferenceResult, Ty};\n \n #[derive(Debug, Clone, Copy)]\n /// Either a pattern from the source code being analyzed, represented as\n@@ -627,7 +627,7 @@ pub(super) fn is_useful(\n     // - `!` type\n     // In those cases, no match arm is useful.\n     match cx.infer[cx.match_expr].strip_references() {\n-        Ty::Adt(AdtId::EnumId(enum_id), ..) => {\n+        Ty::Adt(AdtId(hir_def::AdtId::EnumId(enum_id)), ..) => {\n             if cx.db.enum_data(*enum_id).variants.is_empty() {\n                 return Ok(Usefulness::NotUseful);\n             }"}, {"sha": "a0882a2a107148ba3e5eee0e71e324fb2348d453", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -2,19 +2,20 @@\n \n use std::{borrow::Cow, fmt};\n \n-use crate::{\n-    db::HirDatabase, primitive, utils::generics, AliasTy, CallableDefId, CallableSig,\n-    GenericPredicate, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs,\n-    TraitRef, Ty,\n-};\n use arrayvec::ArrayVec;\n use chalk_ir::Mutability;\n use hir_def::{\n-    db::DefDatabase, find_path, generics::TypeParamProvenance, item_scope::ItemInNs, AdtId,\n+    db::DefDatabase, find_path, generics::TypeParamProvenance, item_scope::ItemInNs,\n     AssocContainerId, HasModule, Lookup, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n \n+use crate::{\n+    db::HirDatabase, primitive, utils::generics, AdtId, AliasTy, CallableDefId, CallableSig,\n+    GenericPredicate, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs,\n+    TraitRef, Ty,\n+};\n+\n pub struct HirFormatter<'a> {\n     pub db: &'a dyn HirDatabase,\n     fmt: &'a mut dyn fmt::Write,\n@@ -400,13 +401,13 @@ impl HirDisplay for Ty {\n                     write!(f, \" -> {}\", ret_display)?;\n                 }\n             }\n-            Ty::Adt(def_id, parameters) => {\n+            Ty::Adt(AdtId(def_id), parameters) => {\n                 match f.display_target {\n                     DisplayTarget::Diagnostics | DisplayTarget::Test => {\n                         let name = match *def_id {\n-                            AdtId::StructId(it) => f.db.struct_data(it).name.clone(),\n-                            AdtId::UnionId(it) => f.db.union_data(it).name.clone(),\n-                            AdtId::EnumId(it) => f.db.enum_data(it).name.clone(),\n+                            hir_def::AdtId::StructId(it) => f.db.struct_data(it).name.clone(),\n+                            hir_def::AdtId::UnionId(it) => f.db.union_data(it).name.clone(),\n+                            hir_def::AdtId::EnumId(it) => f.db.enum_data(it).name.clone(),\n                         };\n                         write!(f, \"{}\", name)?;\n                     }"}, {"sha": "ec2c1315455b7cc4f6163cebe5bb442348e3c7e8", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n-    AdtId, AssocContainerId, FieldId, Lookup,\n+    AssocContainerId, FieldId, Lookup,\n };\n use hir_expand::name::{name, Name};\n use syntax::ast::RangeOp;\n@@ -21,8 +21,8 @@ use crate::{\n     primitive::{self, UintTy},\n     traits::{FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    Binders, CallableDefId, FnPointer, FnSig, Obligation, OpaqueTyId, Rawness, Scalar, Substs,\n-    TraitRef, Ty,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, Obligation, OpaqueTyId, Rawness, Scalar,\n+    Substs, TraitRef, Ty,\n };\n \n use super::{\n@@ -429,14 +429,14 @@ impl<'a> InferenceContext<'a> {\n                     Ty::Tuple(_, substs) => {\n                         name.as_tuple_index().and_then(|idx| substs.0.get(idx).cloned())\n                     }\n-                    Ty::Adt(AdtId::StructId(s), parameters) => {\n+                    Ty::Adt(AdtId(hir_def::AdtId::StructId(s)), parameters) => {\n                         self.db.struct_data(s).variant_data.field(name).map(|local_id| {\n                             let field = FieldId { parent: s.into(), local_id };\n                             self.write_field_resolution(tgt_expr, field);\n                             self.db.field_types(s.into())[field.local_id].clone().subst(&parameters)\n                         })\n                     }\n-                    Ty::Adt(AdtId::UnionId(u), parameters) => {\n+                    Ty::Adt(AdtId(hir_def::AdtId::UnionId(u)), parameters) => {\n                         self.db.union_data(u).variant_data.field(name).map(|local_id| {\n                             let field = FieldId { parent: u.into(), local_id };\n                             self.write_field_resolution(tgt_expr, field);\n@@ -498,7 +498,7 @@ impl<'a> InferenceContext<'a> {\n                         _ => (),\n                     }\n                     sb = sb.fill(repeat_with(|| self.table.new_type_var()));\n-                    Ty::Adt(box_, sb.build())\n+                    Ty::adt_ty(box_, sb.build())\n                 } else {\n                     Ty::Unknown\n                 }\n@@ -586,31 +586,31 @@ impl<'a> InferenceContext<'a> {\n                 let rhs_ty = rhs.map(|e| self.infer_expr(e, &rhs_expect));\n                 match (range_type, lhs_ty, rhs_ty) {\n                     (RangeOp::Exclusive, None, None) => match self.resolve_range_full() {\n-                        Some(adt) => Ty::Adt(adt, Substs::empty()),\n+                        Some(adt) => Ty::adt_ty(adt, Substs::empty()),\n                         None => Ty::Unknown,\n                     },\n                     (RangeOp::Exclusive, None, Some(ty)) => match self.resolve_range_to() {\n-                        Some(adt) => Ty::Adt(adt, Substs::single(ty)),\n+                        Some(adt) => Ty::adt_ty(adt, Substs::single(ty)),\n                         None => Ty::Unknown,\n                     },\n                     (RangeOp::Inclusive, None, Some(ty)) => {\n                         match self.resolve_range_to_inclusive() {\n-                            Some(adt) => Ty::Adt(adt, Substs::single(ty)),\n+                            Some(adt) => Ty::adt_ty(adt, Substs::single(ty)),\n                             None => Ty::Unknown,\n                         }\n                     }\n                     (RangeOp::Exclusive, Some(_), Some(ty)) => match self.resolve_range() {\n-                        Some(adt) => Ty::Adt(adt, Substs::single(ty)),\n+                        Some(adt) => Ty::adt_ty(adt, Substs::single(ty)),\n                         None => Ty::Unknown,\n                     },\n                     (RangeOp::Inclusive, Some(_), Some(ty)) => {\n                         match self.resolve_range_inclusive() {\n-                            Some(adt) => Ty::Adt(adt, Substs::single(ty)),\n+                            Some(adt) => Ty::adt_ty(adt, Substs::single(ty)),\n                             None => Ty::Unknown,\n                         }\n                     }\n                     (RangeOp::Exclusive, Some(ty), None) => match self.resolve_range_from() {\n-                        Some(adt) => Ty::Adt(adt, Substs::single(ty)),\n+                        Some(adt) => Ty::adt_ty(adt, Substs::single(ty)),\n                         None => Ty::Unknown,\n                     },\n                     (RangeOp::Inclusive, _, None) => Ty::Unknown,"}, {"sha": "987793e2e58a5576dcf167eae13a52127b4c7af9", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -237,7 +237,7 @@ impl<'a> InferenceContext<'a> {\n                     };\n \n                     let inner_ty = self.infer_pat(*inner, inner_expected, default_bm);\n-                    Ty::Adt(box_adt, Substs::single(inner_ty))\n+                    Ty::adt_ty(box_adt, Substs::single(inner_ty))\n                 }\n                 None => Ty::Unknown,\n             },"}, {"sha": "e77f24e4edcf8ccb0825e32e5cf0a0bc3f00fcf0", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -27,9 +27,9 @@ use std::{iter, mem, ops::Deref, sync::Arc};\n \n use base_db::salsa;\n use hir_def::{\n-    builtin_type::BuiltinType, expr::ExprId, type_ref::Rawness, AdtId, AssocContainerId,\n-    DefWithBodyId, FunctionId, GenericDefId, HasModule, LifetimeParamId, Lookup, TraitId,\n-    TypeAliasId, TypeParamId,\n+    builtin_type::BuiltinType, expr::ExprId, type_ref::Rawness, AssocContainerId, DefWithBodyId,\n+    FunctionId, GenericDefId, HasModule, LifetimeParamId, Lookup, TraitId, TypeAliasId,\n+    TypeParamId,\n };\n use itertools::Itertools;\n \n@@ -47,7 +47,9 @@ pub use lower::{\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n-pub use chalk_ir::{BoundVar, DebruijnIndex, Mutability, Scalar, TyVariableKind};\n+pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Scalar, TyVariableKind};\n+\n+pub(crate) use crate::traits::chalk::Interner;\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n@@ -131,7 +133,7 @@ pub enum AliasTy {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Ty {\n     /// Structures, enumerations and unions.\n-    Adt(AdtId, Substs),\n+    Adt(AdtId<Interner>, Substs),\n \n     /// Represents an associated item like `Iterator::Item`.  This is used\n     /// when we have tried to normalize a projection like `T::Item` but\n@@ -602,6 +604,10 @@ impl Ty {\n         Ty::Tuple(0, Substs::empty())\n     }\n \n+    pub fn adt_ty(adt: hir_def::AdtId, substs: Substs) -> Ty {\n+        Ty::Adt(AdtId(adt), substs)\n+    }\n+\n     pub fn fn_ptr(sig: CallableSig) -> Self {\n         Ty::Function(FnPointer {\n             num_args: sig.params().len(),\n@@ -650,9 +656,9 @@ impl Ty {\n         t\n     }\n \n-    pub fn as_adt(&self) -> Option<(AdtId, &Substs)> {\n+    pub fn as_adt(&self) -> Option<(hir_def::AdtId, &Substs)> {\n         match self {\n-            Ty::Adt(adt_def, parameters) => Some((*adt_def, parameters)),\n+            Ty::Adt(AdtId(adt), parameters) => Some((*adt, parameters)),\n             _ => None,\n         }\n     }\n@@ -666,7 +672,7 @@ impl Ty {\n \n     pub fn as_generic_def(&self) -> Option<GenericDefId> {\n         match *self {\n-            Ty::Adt(adt, ..) => Some(adt.into()),\n+            Ty::Adt(AdtId(adt), ..) => Some(adt.into()),\n             Ty::FnDef(callable, ..) => Some(callable.into()),\n             Ty::AssociatedType(type_alias, ..) => Some(type_alias.into()),\n             Ty::ForeignType(type_alias, ..) => Some(type_alias.into()),"}, {"sha": "5fe5b8ad150eb0bf3988404e832be6a1a4ded1b2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -1100,7 +1100,7 @@ fn type_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -\n fn type_for_adt(db: &dyn HirDatabase, adt: AdtId) -> Binders<Ty> {\n     let generics = generics(db.upcast(), adt.into());\n     let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(), Ty::Adt(adt, substs))\n+    Binders::new(substs.len(), Ty::adt_ty(adt, substs))\n }\n \n fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {"}, {"sha": "dfcf346fba2988cd01b47e5218d8604aaeaa7223", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -8,8 +8,8 @@ use arrayvec::ArrayVec;\n use base_db::CrateId;\n use chalk_ir::Mutability;\n use hir_def::{\n-    lang_item::LangItemTarget, AdtId, AssocContainerId, AssocItemId, FunctionId, GenericDefId,\n-    HasModule, ImplId, Lookup, ModuleId, TraitId, TypeAliasId,\n+    lang_item::LangItemTarget, AssocContainerId, AssocItemId, FunctionId, GenericDefId, HasModule,\n+    ImplId, Lookup, ModuleId, TraitId, TypeAliasId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -19,8 +19,8 @@ use crate::{\n     db::HirDatabase,\n     primitive::{self, FloatTy, IntTy, UintTy},\n     utils::all_super_traits,\n-    Canonical, DebruijnIndex, FnPointer, FnSig, InEnvironment, Scalar, Substs, TraitEnvironment,\n-    TraitRef, Ty, TypeWalk,\n+    AdtId, Canonical, DebruijnIndex, FnPointer, FnSig, InEnvironment, Scalar, Substs,\n+    TraitEnvironment, TraitRef, Ty, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -32,7 +32,7 @@ pub enum TyFingerprint {\n     Never,\n     RawPtr(Mutability),\n     Scalar(Scalar),\n-    Adt(AdtId),\n+    Adt(hir_def::AdtId),\n     Dyn(TraitId),\n     Tuple(usize),\n     ForeignType(TypeAliasId),\n@@ -50,7 +50,7 @@ impl TyFingerprint {\n             &Ty::Slice(..) => TyFingerprint::Slice,\n             &Ty::Array(..) => TyFingerprint::Array,\n             &Ty::Scalar(scalar) => TyFingerprint::Scalar(scalar),\n-            &Ty::Adt(adt, _) => TyFingerprint::Adt(adt),\n+            &Ty::Adt(AdtId(adt), _) => TyFingerprint::Adt(adt),\n             &Ty::Tuple(cardinality, _) => TyFingerprint::Tuple(cardinality),\n             &Ty::Raw(mutability, ..) => TyFingerprint::RawPtr(mutability),\n             &Ty::ForeignType(alias_id, ..) => TyFingerprint::ForeignType(alias_id),\n@@ -231,7 +231,7 @@ impl Ty {\n         let mod_to_crate_ids = |module: ModuleId| Some(std::iter::once(module.krate()).collect());\n \n         let lang_item_targets = match self {\n-            Ty::Adt(def_id, _) => {\n+            Ty::Adt(AdtId(def_id), _) => {\n                 return mod_to_crate_ids(def_id.module(db.upcast()));\n             }\n             Ty::ForeignType(type_alias_id) => {"}, {"sha": "4378a9723c29c42282d1fd2f8299257c3751905b", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -315,9 +315,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         let id = from_chalk(self.db, trait_id);\n         self.db.trait_data(id).name.to_string()\n     }\n-    fn adt_name(&self, adt_id: chalk_ir::AdtId<Interner>) -> String {\n-        let id = from_chalk(self.db, adt_id);\n-        match id {\n+    fn adt_name(&self, chalk_ir::AdtId(adt_id): AdtId) -> String {\n+        match adt_id {\n             hir_def::AdtId::StructId(id) => self.db.struct_data(id).name.to_string(),\n             hir_def::AdtId::EnumId(id) => self.db.enum_data(id).name.to_string(),\n             hir_def::AdtId::UnionId(id) => self.db.union_data(id).name.to_string(),\n@@ -488,8 +487,8 @@ pub(crate) fn struct_datum_query(\n     struct_id: AdtId,\n ) -> Arc<StructDatum> {\n     debug!(\"struct_datum {:?}\", struct_id);\n-    let adt_id = from_chalk(db, struct_id);\n-    let type_ctor = Ty::Adt(adt_id, Substs::empty());\n+    let type_ctor = Ty::Adt(struct_id, Substs::empty());\n+    let chalk_ir::AdtId(adt_id) = struct_id;\n     debug!(\"struct {:?} = {:?}\", struct_id, type_ctor);\n     let num_params = generics(db.upcast(), adt_id.into()).len();\n     let upstream = adt_id.module(db.upcast()).krate() != krate;\n@@ -684,10 +683,9 @@ pub(crate) fn fn_def_variance_query(\n pub(crate) fn adt_variance_query(\n     db: &dyn HirDatabase,\n     _krate: CrateId,\n-    adt_id: AdtId,\n+    chalk_ir::AdtId(adt_id): AdtId,\n ) -> Variances {\n-    let adt: crate::AdtId = from_chalk(db, adt_id);\n-    let generic_params = generics(db.upcast(), adt.into());\n+    let generic_params = generics(db.upcast(), adt_id.into());\n     Variances::from_iter(\n         &Interner,\n         std::iter::repeat(chalk_ir::Variance::Invariant).take(generic_params.len()),"}, {"sha": "3a08b67e952935164dbf068ff416c36519c7ec8f", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c27c55041953327d341f4e7c705e8887fc4dd50/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=6c27c55041953327d341f4e7c705e8887fc4dd50", "patch": "@@ -86,7 +86,7 @@ impl ToChalk for Ty {\n \n             Ty::Adt(adt_id, substs) => {\n                 let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::Adt(chalk_ir::AdtId(adt_id), substitution).intern(&Interner)\n+                chalk_ir::TyKind::Adt(adt_id, substitution).intern(&Interner)\n             }\n             Ty::Alias(AliasTy::Projection(proj_ty)) => {\n                 let associated_ty_id = TypeAliasAsAssocType(proj_ty.associated_ty).to_chalk(db);\n@@ -183,7 +183,7 @@ impl ToChalk for Ty {\n                 Ty::Dyn(predicates)\n             }\n \n-            chalk_ir::TyKind::Adt(struct_id, subst) => Ty::Adt(struct_id.0, from_chalk(db, subst)),\n+            chalk_ir::TyKind::Adt(adt_id, subst) => Ty::Adt(adt_id, from_chalk(db, subst)),\n             chalk_ir::TyKind::AssociatedType(type_id, subst) => Ty::AssociatedType(\n                 from_chalk::<TypeAliasAsAssocType, _>(db, type_id).0,\n                 from_chalk(db, subst),\n@@ -325,18 +325,6 @@ impl ToChalk for hir_def::ImplId {\n     }\n }\n \n-impl ToChalk for hir_def::AdtId {\n-    type Chalk = AdtId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> Self::Chalk {\n-        chalk_ir::AdtId(self.into())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, id: AdtId) -> Self {\n-        id.0\n-    }\n-}\n-\n impl ToChalk for CallableDefId {\n     type Chalk = FnDefId;\n "}]}