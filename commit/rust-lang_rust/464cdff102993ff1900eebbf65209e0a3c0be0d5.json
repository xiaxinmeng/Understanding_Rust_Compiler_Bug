{"sha": "464cdff102993ff1900eebbf65209e0a3c0be0d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NGNkZmYxMDI5OTNmZjE5MDBlZWJiZjY1MjA5ZTBhM2MwYmUwZDU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-03T01:31:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-05T23:09:44Z"}, "message": "std: Stabilize APIs for the 1.6 release\n\nThis commit is the standard API stabilization commit for the 1.6 release cycle.\nThe list of issues and APIs below have all been through their cycle-long FCP and\nthe libs team decisions are listed below\n\nStabilized APIs\n\n* `Read::read_exact`\n* `ErrorKind::UnexpectedEof` (renamed from `UnexpectedEOF`)\n* libcore -- this was a bit of a nuanced stabilization, the crate itself is now\n  marked as `#[stable]` and the methods appearing via traits for primitives like\n  `char` and `str` are now also marked as stable. Note that the extension traits\n  themeselves are marked as unstable as they're imported via the prelude. The\n  `try!` macro was also moved from the standard library into libcore to have the\n  same interface. Otherwise the functions all have copied stability from the\n  standard library now.\n* The `#![no_std]` attribute\n* `fs::DirBuilder`\n* `fs::DirBuilder::new`\n* `fs::DirBuilder::recursive`\n* `fs::DirBuilder::create`\n* `os::unix::fs::DirBuilderExt`\n* `os::unix::fs::DirBuilderExt::mode`\n* `vec::Drain`\n* `vec::Vec::drain`\n* `string::Drain`\n* `string::String::drain`\n* `vec_deque::Drain`\n* `vec_deque::VecDeque::drain`\n* `collections::hash_map::Drain`\n* `collections::hash_map::HashMap::drain`\n* `collections::hash_set::Drain`\n* `collections::hash_set::HashSet::drain`\n* `collections::binary_heap::Drain`\n* `collections::binary_heap::BinaryHeap::drain`\n* `Vec::extend_from_slice` (renamed from `push_all`)\n* `Mutex::get_mut`\n* `Mutex::into_inner`\n* `RwLock::get_mut`\n* `RwLock::into_inner`\n* `Iterator::min_by_key` (renamed from `min_by`)\n* `Iterator::max_by_key` (renamed from `max_by`)\n\nDeprecated APIs\n\n* `ErrorKind::UnexpectedEOF` (renamed to `UnexpectedEof`)\n* `OsString::from_bytes`\n* `OsStr::to_cstring`\n* `OsStr::to_bytes`\n* `fs::walk_dir` and `fs::WalkDir`\n* `path::Components::peek`\n* `slice::bytes::MutableByteVector`\n* `slice::bytes::copy_memory`\n* `Vec::push_all` (renamed to `extend_from_slice`)\n* `Duration::span`\n* `IpAddr`\n* `SocketAddr::ip`\n* `Read::tee`\n* `io::Tee`\n* `Write::broadcast`\n* `io::Broadcast`\n* `Iterator::min_by` (renamed to `min_by_key`)\n* `Iterator::max_by` (renamed to `max_by_key`)\n* `net::lookup_addr`\n\nNew APIs (still unstable)\n\n* `<[T]>::sort_by_key` (added to mirror `min_by_key`)\n\nCloses #27585\nCloses #27704\nCloses #27707\nCloses #27710\nCloses #27711\nCloses #27727\nCloses #27740\nCloses #27744\nCloses #27799\nCloses #27801\ncc #27801 (doesn't close as `Chars` is still unstable)\nCloses #28968", "tree": {"sha": "12910564caf0946c19be1ac48355210a49b7afee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12910564caf0946c19be1ac48355210a49b7afee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464cdff102993ff1900eebbf65209e0a3c0be0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464cdff102993ff1900eebbf65209e0a3c0be0d5", "html_url": "https://github.com/rust-lang/rust/commit/464cdff102993ff1900eebbf65209e0a3c0be0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464cdff102993ff1900eebbf65209e0a3c0be0d5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac0e84522437331f9a06d04a5842acf0234cc86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0e84522437331f9a06d04a5842acf0234cc86e", "html_url": "https://github.com/rust-lang/rust/commit/ac0e84522437331f9a06d04a5842acf0234cc86e"}], "stats": {"total": 1430, "additions": 712, "deletions": 718}, "files": [{"sha": "da8331fc062838f73222f1cc577eab47220213fa", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -16,8 +16,6 @@\n #![feature(rustc_private)]\n #![feature(str_char)]\n #![feature(test)]\n-#![feature(vec_push_all)]\n-#![feature(path_components_peek)]\n \n #![deny(warnings)]\n "}, {"sha": "1b1f5115b603356acee918998755fede69f2cce7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1009,15 +1009,12 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n     }\n }\n \n-fn is_compiler_error_or_warning(mut line: &str) -> bool {\n-    // Remove initial prefix which may contain a colon\n-    let mut components = Path::new(line).components();\n-    if let Some(Component::Prefix(_)) = components.peek() {\n-        components.next();\n-    }\n-\n-    // Safe as path was originally constructed from a &str ^\n-    line = components.as_path().to_str().unwrap();\n+fn is_compiler_error_or_warning(line: &str) -> bool {\n+    let mut c = Path::new(line).components();\n+    let line = match c.next() {\n+        Some(Component::Prefix(_)) => c.as_path().to_str().unwrap(),\n+        _ => line,\n+    };\n \n     let mut i = 0;\n     return\n@@ -1314,7 +1311,7 @@ fn make_compile_args<F>(config: &Config,\n                         \"-L\".to_owned(),\n                         config.build_base.to_str().unwrap().to_owned(),\n                         format!(\"--target={}\", target));\n-    args.push_all(&extras);\n+    args.extend_from_slice(&extras);\n     if !props.no_prefer_dynamic {\n         args.push(\"-C\".to_owned());\n         args.push(\"prefer-dynamic\".to_owned());"}, {"sha": "65626c11462365995369692962387952161f4fe8", "filename": "src/doc/book/custom-allocators.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fdoc%2Fbook%2Fcustom-allocators.md", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fdoc%2Fbook%2Fcustom-allocators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcustom-allocators.md?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -83,7 +83,6 @@ annotated version of `alloc_system`\n // Allocators are not allowed to depend on the standard library which in turn\n // requires an allocator in order to avoid circular dependencies. This crate,\n // however, can use all of libcore.\n-#![feature(no_std)]\n #![no_std]\n \n // Let's give a unique name to our custom allocator"}, {"sha": "e492bd3e7820dd251ef9e547b1c7d49891123d87", "filename": "src/doc/book/lang-items.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fdoc%2Fbook%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fdoc%2Fbook%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flang-items.md?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -16,7 +16,7 @@ and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n ```rust\n-#![feature(lang_items, box_syntax, start, no_std, libc)]\n+#![feature(lang_items, box_syntax, start, libc)]\n #![no_std]\n \n extern crate libc;"}, {"sha": "3a4d4c306dc72a744a2fd1e02ce61f7cb9a184fe", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -16,7 +16,6 @@ in the same format as C:\n # #![feature(libc)]\n #![feature(lang_items)]\n #![feature(start)]\n-#![feature(no_std)]\n #![no_std]\n \n // Pull in the system libc library for what crt0.o likely requires\n@@ -46,7 +45,6 @@ compiler's name mangling too:\n \n ```rust\n # #![feature(libc)]\n-#![feature(no_std)]\n #![feature(lang_items)]\n #![feature(start)]\n #![no_std]\n@@ -104,9 +102,6 @@ vectors provided from C, using idiomatic Rust practices.\n # #![feature(libc)]\n #![feature(lang_items)]\n #![feature(start)]\n-#![feature(no_std)]\n-#![feature(core)]\n-#![feature(core_slice_ext)]\n #![feature(raw)]\n #![no_std]\n "}, {"sha": "3c1659ba2e0c46f160d1ee05920a4b0b9d86fda1", "filename": "src/etc/unicode.py", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -315,7 +315,6 @@ def emit_bsearch_range_table(f):\n     f.write(\"\"\"\n fn bsearch_range_table(c: char, r: &'static [(char, char)]) -> bool {\n     use core::cmp::Ordering::{Equal, Less, Greater};\n-    use core::slice::SliceExt;\n     r.binary_search_by(|&(lo, hi)| {\n          if lo <= c && c <= hi {\n              Equal\n@@ -358,7 +357,6 @@ def emit_conversions_module(f, to_upper, to_lower, to_title):\n     f.write(\"pub mod conversions {\")\n     f.write(\"\"\"\n     use core::cmp::Ordering::{Equal, Less, Greater};\n-    use core::slice::SliceExt;\n     use core::option::Option;\n     use core::option::Option::{Some, None};\n     use core::result::Result::{Ok, Err};\n@@ -404,7 +402,6 @@ def emit_charwidth_module(f, width_table):\n     f.write(\"pub mod charwidth {\\n\")\n     f.write(\"    use core::option::Option;\\n\")\n     f.write(\"    use core::option::Option::{Some, None};\\n\")\n-    f.write(\"    use core::slice::SliceExt;\\n\")\n     f.write(\"    use core::result::Result::{Ok, Err};\\n\")\n     f.write(\"\"\"\n     fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 {"}, {"sha": "1afb49d9184b5001567325f9b30525a1eac646a6", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -104,7 +104,6 @@ pub struct ExchangeHeapSingleton {\n /// See the [module-level documentation](../../std/boxed/index.html) for more.\n #[lang = \"owned_box\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[fundamental]\n pub struct Box<T: ?Sized>(Unique<T>);\n \n /// `IntermediateBox` represents uninitialized backing storage for `Box`."}, {"sha": "f665b1e19241c7511bf60171abb155f169a98040", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -75,17 +75,15 @@\n #![cfg_attr(not(stage0), needs_allocator)]\n \n #![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, feature(no_std))]\n #![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(allocator)]\n #![feature(box_syntax)]\n #![feature(coerce_unsized)]\n-#![feature(core)]\n #![feature(core_intrinsics)]\n-#![feature(core_slice_ext)]\n #![feature(custom_attribute)]\n #![feature(fundamental)]\n #![feature(lang_items)]\n-#![feature(no_std)]\n #![feature(nonzero)]\n #![feature(num_bits_bytes)]\n #![feature(optin_builtin_traits)]\n@@ -103,9 +101,8 @@\n #![allow(unused_attributes)]\n #![feature(dropck_parametricity)]\n #![feature(unsize)]\n-#![feature(core_slice_ext)]\n-#![feature(core_str_ext)]\n #![feature(drop_in_place)]\n+#![feature(fn_traits)]\n \n #![cfg_attr(stage0, feature(alloc_system))]\n #![cfg_attr(not(stage0), feature(needs_allocator))]"}, {"sha": "92f35c08a7debacc76496f339719508ca7d8c9db", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n use core::ptr::Unique;\n use core::mem;\n-use core::slice::{self, SliceExt};\n+use core::slice;\n use heap;\n use super::oom;\n use super::boxed::Box;"}, {"sha": "ec6c6ae31c17e7afffa24968c81cde77e2f94da2", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -21,8 +21,8 @@\n             issue = \"27783\")]\n #![feature(allocator)]\n #![feature(libc)]\n-#![feature(no_std)]\n #![feature(staged_api)]\n+#![cfg_attr(stage0, feature(no_std))]\n \n extern crate libc;\n "}, {"sha": "a6e89d5d00cb8c17acaf02c395e27296b442fe96", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -21,8 +21,8 @@\n             issue = \"27783\")]\n #![feature(allocator)]\n #![feature(libc)]\n-#![feature(no_std)]\n #![feature(staged_api)]\n+#![cfg_attr(stage0, feature(no_std))]\n \n extern crate libc;\n "}, {"sha": "b8ca48ac75d1a7c5248bf918ce98d84ca7246149", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -581,10 +581,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// The elements are removed in arbitrary order.\n     #[inline]\n-    #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, \\\n-                         waiting for dust to settle\",\n-               issue = \"27711\")]\n+    #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         Drain { iter: self.data.drain(..) }\n     }\n@@ -738,7 +735,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n-#[unstable(feature = \"drain\", reason = \"recent addition\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }"}, {"sha": "a7797d4b0d0476a93f0bd1c20772fa05d3b3bb1e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -43,8 +43,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(core_slice_ext)]\n-#![feature(core_str_ext)]\n #![feature(fmt_internals)]\n #![feature(fmt_radix)]\n #![feature(heap_api)]\n@@ -68,9 +66,10 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n #![feature(drop_in_place)]\n+#![feature(clone_from_slice)]\n #![cfg_attr(test, feature(clone_from_slice, rand, test))]\n \n-#![feature(no_std)]\n+#![cfg_attr(stage0, feature(no_std))]\n #![no_std]\n \n extern crate rustc_unicode;"}, {"sha": "6342ae5c816fd2410018c0a0085f05837ac59d14", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -160,7 +160,7 @@ mod hack {\n         where T: Clone\n     {\n         let mut vector = Vec::with_capacity(s.len());\n-        vector.push_all(s);\n+        vector.extend_from_slice(s);\n         vector\n     }\n }\n@@ -777,6 +777,33 @@ impl<T> [T] {\n         self.sort_by(|a, b| a.cmp(b))\n     }\n \n+    /// Sorts the slice, in place, using `key` to extract a key by which to\n+    /// order the sort by.\n+    ///\n+    /// This sort is `O(n log n)` worst-case and stable, but allocates\n+    /// approximately `2 * n`, where `n` is the length of `self`.\n+    ///\n+    /// This is a stable sort.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_sort_by_key)]\n+    ///\n+    /// let mut v = [-5i32, 4, 1, -3, 2];\n+    ///\n+    /// v.sort_by_key(|k| k.abs());\n+    /// assert!(v == [1, 2, -3, 4, -5]);\n+    /// ```\n+    #[unstable(feature = \"slice_sort_by_key\", reason = \"recently added\",\n+               issue = \"27724\")]\n+    #[inline]\n+    pub fn sort_by_key<B, F>(&mut self, mut f: F)\n+        where F: FnMut(&T) -> B, B: Ord\n+    {\n+        self.sort_by(|a, b| f(a).cmp(&f(b)))\n+    }\n+\n     /// Sorts the slice, in place, using `compare` to compare\n     /// elements.\n     ///\n@@ -906,7 +933,7 @@ impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n         let size = self.iter().fold(0, |acc, v| acc + v.borrow().len());\n         let mut result = Vec::with_capacity(size);\n         for v in self {\n-            result.push_all(v.borrow())\n+            result.extend_from_slice(v.borrow())\n         }\n         result\n     }\n@@ -921,7 +948,7 @@ impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n             } else {\n                 result.push(sep.clone())\n             }\n-            result.push_all(v.borrow())\n+            result.extend_from_slice(v.borrow())\n         }\n         result\n     }"}, {"sha": "a3c6918293477b276532d3e75b4cfb84206dd934", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -482,7 +482,7 @@ impl String {\n         let mut res = String::with_capacity(total);\n \n         if i > 0 {\n-            unsafe { res.as_mut_vec().push_all(&v[..i]) };\n+            unsafe { res.as_mut_vec().extend_from_slice(&v[..i]) };\n         }\n \n         // subseqidx is the index of the first byte of the subsequence we're\n@@ -498,10 +498,10 @@ impl String {\n             macro_rules! error { () => ({\n                 unsafe {\n                     if subseqidx != i_ {\n-                        res.as_mut_vec().push_all(&v[subseqidx..i_]);\n+                        res.as_mut_vec().extend_from_slice(&v[subseqidx..i_]);\n                     }\n                     subseqidx = i;\n-                    res.as_mut_vec().push_all(REPLACEMENT);\n+                    res.as_mut_vec().extend_from_slice(REPLACEMENT);\n                 }\n             })}\n \n@@ -566,7 +566,7 @@ impl String {\n             }\n         }\n         if subseqidx < total {\n-            unsafe { res.as_mut_vec().push_all(&v[subseqidx..total]) };\n+            unsafe { res.as_mut_vec().extend_from_slice(&v[subseqidx..total]) };\n         }\n         Cow::Owned(res)\n     }\n@@ -699,7 +699,7 @@ impl String {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_str(&mut self, string: &str) {\n-        self.vec.push_all(string.as_bytes())\n+        self.vec.extend_from_slice(string.as_bytes())\n     }\n \n     /// Returns the number of bytes that this string buffer can hold without\n@@ -1026,8 +1026,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(drain)]\n-    ///\n     /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n     /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n     ///\n@@ -1040,9 +1038,7 @@ impl String {\n     /// s.drain(..);\n     /// assert_eq!(s, \"\");\n     /// ```\n-    #[unstable(feature = \"drain\",\n-               reason = \"recently added, matches RFC\",\n-               issue = \"27711\")]\n+    #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain<R>(&mut self, range: R) -> Drain\n         where R: RangeArgument<usize>\n     {\n@@ -1600,7 +1596,7 @@ impl fmt::Write for String {\n }\n \n /// A draining iterator for `String`.\n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a> {\n     /// Will be used as &'a mut String in the destructor\n     string: *mut String,\n@@ -1612,12 +1608,12 @@ pub struct Drain<'a> {\n     iter: Chars<'a>,\n }\n \n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a> Sync for Drain<'a> {}\n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a> Send for Drain<'a> {}\n \n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a> Drop for Drain<'a> {\n     fn drop(&mut self) {\n         unsafe {\n@@ -1631,7 +1627,7 @@ impl<'a> Drop for Drain<'a> {\n     }\n }\n \n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a> Iterator for Drain<'a> {\n     type Item = char;\n \n@@ -1645,7 +1641,7 @@ impl<'a> Iterator for Drain<'a> {\n     }\n }\n \n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a> DoubleEndedIterator for Drain<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<char> {"}, {"sha": "89b1b99cfa39d1370fb6b2dd4c1ae58ddb3b948b", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -739,17 +739,13 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(drain)]\n-    ///\n     /// // Draining using `..` clears the whole vector.\n     /// let mut v = vec![1, 2, 3];\n     /// let u: Vec<_> = v.drain(..).collect();\n     /// assert_eq!(v, &[]);\n     /// assert_eq!(u, &[1, 2, 3]);\n     /// ```\n-    #[unstable(feature = \"drain\",\n-               reason = \"recently added, matches RFC\",\n-               issue = \"27711\")]\n+    #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain<R>(&mut self, range: R) -> Drain<T>\n         where R: RangeArgument<usize>\n     {\n@@ -933,6 +929,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// ```\n     /// #![feature(vec_push_all)]\n+    /// #![allow(deprecated)]\n     ///\n     /// let mut vec = vec![1];\n     /// vec.push_all(&[2, 3, 4]);\n@@ -942,7 +939,31 @@ impl<T: Clone> Vec<T> {\n     #[unstable(feature = \"vec_push_all\",\n                reason = \"likely to be replaced by a more optimized extend\",\n                issue = \"27744\")]\n+    #[rustc_deprecated(reason = \"renamed to extend_from_slice\",\n+                       since = \"1.6.0\")]\n     pub fn push_all(&mut self, other: &[T]) {\n+        self.extend_from_slice(other)\n+    }\n+\n+    /// Appends all elements in a slice to the `Vec`.\n+    ///\n+    /// Iterates over the slice `other`, clones each element, and then appends\n+    /// it to this `Vec`. The `other` vector is traversed in-order.\n+    ///\n+    /// Note that this function is same as `extend` except that it is\n+    /// specialized to work with slices instead. If and when Rust gets\n+    /// specialization this function will likely be deprecated (but still\n+    /// available).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut vec = vec![1];\n+    /// vec.extend_from_slice(&[2, 3, 4]);\n+    /// assert_eq!(vec, [1, 2, 3, 4]);\n+    /// ```\n+    #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n+    pub fn extend_from_slice(&mut self, other: &[T]) {\n         self.reserve(other.len());\n \n         for i in 0..other.len() {\n@@ -1103,7 +1124,7 @@ impl<T: Clone> Clone for Vec<T> {\n \n         // self.len <= other.len due to the truncate above, so the\n         // slice here is always in-bounds.\n-        self.push_all(&other[len..]);\n+        self.extend_from_slice(&other[len..]);\n     }\n }\n \n@@ -1350,6 +1371,21 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n     }\n }\n \n+macro_rules! __impl_slice_eq1 {\n+    ($Lhs: ty, $Rhs: ty) => {\n+        __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n+    };\n+    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n+            #[inline]\n+            fn eq(&self, other: &$Rhs) -> bool { self[..] == other[..] }\n+            #[inline]\n+            fn ne(&self, other: &$Rhs) -> bool { self[..] != other[..] }\n+        }\n+    }\n+}\n+\n __impl_slice_eq1! { Vec<A>, Vec<B> }\n __impl_slice_eq1! { Vec<A>, &'b [B] }\n __impl_slice_eq1! { Vec<A>, &'b mut [B] }\n@@ -1605,7 +1641,7 @@ impl<T> Drop for IntoIter<T> {\n }\n \n /// A draining iterator for `Vec<T>`.\n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     /// Index of tail to preserve\n     tail_start: usize,\n@@ -1616,9 +1652,9 @@ pub struct Drain<'a, T: 'a> {\n     vec: *mut Vec<T>,\n }\n \n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n-#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "53597f566b8ae4446fe30aab5d21fff3e5c63ee6", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -778,8 +778,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(drain)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// // draining using `..` clears the whole deque.\n@@ -789,9 +787,7 @@ impl<T> VecDeque<T> {\n     /// assert!(v.is_empty());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27711\")]\n+    #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain<R>(&mut self, range: R) -> Drain<T>\n         where R: RangeArgument<usize>\n     {\n@@ -1893,19 +1889,17 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// A draining VecDeque iterator\n-#[unstable(feature = \"drain\",\n-           reason = \"matches collection reform specification, waiting for dust to settle\",\n-           issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     after_tail: usize,\n     after_head: usize,\n     iter: Iter<'a, T>,\n     deque: *mut VecDeque<T>,\n }\n \n-#[unstable(feature = \"drain\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n-#[unstable(feature = \"drain\", issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "e57620dfb04ebf82c0afce91b67caa03833b30fa", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -15,7 +15,7 @@\n #![feature(collections)]\n #![feature(collections_bound)]\n #![feature(const_fn)]\n-#![feature(core)]\n+#![feature(fn_traits)]\n #![feature(deque_extras)]\n #![feature(drain)]\n #![feature(enumset)]"}, {"sha": "0c5eada21655c001a8878d79b9492b784fa1e134", "filename": "src/libcore/array.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -62,6 +62,38 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n     }\n }\n \n+macro_rules! __impl_slice_eq1 {\n+    ($Lhs: ty, $Rhs: ty) => {\n+        __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n+    };\n+    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n+            #[inline]\n+            fn eq(&self, other: &$Rhs) -> bool { self[..] == other[..] }\n+            #[inline]\n+            fn ne(&self, other: &$Rhs) -> bool { self[..] != other[..] }\n+        }\n+    }\n+}\n+\n+macro_rules! __impl_slice_eq2 {\n+    ($Lhs: ty, $Rhs: ty) => {\n+        __impl_slice_eq2! { $Lhs, $Rhs, Sized }\n+    };\n+    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n+        __impl_slice_eq1!($Lhs, $Rhs, $Bound);\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl<'a, 'b, A: $Bound, B> PartialEq<$Lhs> for $Rhs where B: PartialEq<A> {\n+            #[inline]\n+            fn eq(&self, other: &$Lhs) -> bool { self[..] == other[..] }\n+            #[inline]\n+            fn ne(&self, other: &$Lhs) -> bool { self[..] != other[..] }\n+        }\n+    }\n+}\n+\n // macro for implementing n-ary tuple functions and operations\n macro_rules! array_impls {\n     ($($N:expr)+) => {"}, {"sha": "c02704217a8de10ba54b9fd06593a09c1dbf1a7c", "filename": "src/libcore/char.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -257,19 +257,25 @@ pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n            reason = \"the stable interface is `impl char` in later crate\",\n            issue = \"27701\")]\n pub trait CharExt {\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_digit(self, radix: u32) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn to_digit(self, radix: u32) -> Option<u32>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn escape_unicode(self) -> EscapeUnicode;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn escape_default(self) -> EscapeDefault;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len_utf8(self) -> usize;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len_utf16(self) -> usize;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn encode_utf8(self, dst: &mut [u8]) -> Option<usize>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn encode_utf16(self, dst: &mut [u16]) -> Option<usize>;\n }\n \n-#[unstable(feature = \"core_char_ext\",\n-           reason = \"the stable interface is `impl char` in later crate\",\n-           issue = \"27701\")]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n impl CharExt for char {\n     #[inline]\n     fn is_digit(self, radix: u32) -> bool {"}, {"sha": "3863f63265b9383314a4d6d89163675f013084b5", "filename": "src/libcore/cmp_macros.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ac0e84522437331f9a06d04a5842acf0234cc86e/src%2Flibcore%2Fcmp_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0e84522437331f9a06d04a5842acf0234cc86e/src%2Flibcore%2Fcmp_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp_macros.rs?ref=ac0e84522437331f9a06d04a5842acf0234cc86e", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Utility macros for implementing PartialEq on slice-like types\n-\n-#![doc(hidden)]\n-\n-#[macro_export]\n-macro_rules! __impl_slice_eq1 {\n-    ($Lhs: ty, $Rhs: ty) => {\n-        __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n-    };\n-    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n-            #[inline]\n-            fn eq(&self, other: &$Rhs) -> bool { self[..] == other[..] }\n-            #[inline]\n-            fn ne(&self, other: &$Rhs) -> bool { self[..] != other[..] }\n-        }\n-    }\n-}\n-\n-#[macro_export]\n-macro_rules! __impl_slice_eq2 {\n-    ($Lhs: ty, $Rhs: ty) => {\n-        __impl_slice_eq2! { $Lhs, $Rhs, Sized }\n-    };\n-    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n-        __impl_slice_eq1!($Lhs, $Rhs, $Bound);\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, 'b, A: $Bound, B> PartialEq<$Lhs> for $Rhs where B: PartialEq<A> {\n-            #[inline]\n-            fn eq(&self, other: &$Lhs) -> bool { self[..] == other[..] }\n-            #[inline]\n-            fn ne(&self, other: &$Lhs) -> bool { self[..] != other[..] }\n-        }\n-    }\n-}"}, {"sha": "04676c0c9c8b47547d2cb9c3cb22f421518fc176", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -878,7 +878,7 @@ impl<'a> Formatter<'a> {\n \n         let mut prefixed = false;\n         if self.alternate() {\n-            prefixed = true; width += prefix.char_len();\n+            prefixed = true; width += prefix.chars().count();\n         }\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n@@ -942,18 +942,13 @@ impl<'a> Formatter<'a> {\n         }\n         // The `precision` field can be interpreted as a `max-width` for the\n         // string being formatted\n-        match self.precision {\n-            Some(max) => {\n-                // If there's a maximum width and our string is longer than\n-                // that, then we must always have truncation. This is the only\n-                // case where the maximum length will matter.\n-                let char_len = s.char_len();\n-                if char_len >= max {\n-                    let nchars = ::cmp::min(max, char_len);\n-                    return self.buf.write_str(s.slice_chars(0, nchars));\n-                }\n+        if let Some(max) = self.precision {\n+            // If there's a maximum width and our string is longer than\n+            // that, then we must always have truncation. This is the only\n+            // case where the maximum length will matter.\n+            if let Some((i, _)) = s.char_indices().skip(max).next() {\n+                return self.buf.write_str(&s[..i])\n             }\n-            None => {}\n         }\n         // The `width` field is more of a `min-width` parameter at this point.\n         match self.width {\n@@ -962,13 +957,13 @@ impl<'a> Formatter<'a> {\n             None => self.buf.write_str(s),\n             // If we're under the maximum width, check if we're over the minimum\n             // width, if so it's as easy as just emitting the string.\n-            Some(width) if s.char_len() >= width => {\n+            Some(width) if s.chars().count() >= width => {\n                 self.buf.write_str(s)\n             }\n             // If we're under both the maximum and the minimum width, then fill\n             // up the minimum width with the specified string + some alignment.\n             Some(width) => {\n-                self.with_padding(width - s.char_len(), Alignment::Left, |me| {\n+                self.with_padding(width - s.chars().count(), Alignment::Left, |me| {\n                     me.buf.write_str(s)\n                 })\n             }"}, {"sha": "86c00a254ca22b84fab28b5c0865583576c034e5", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1903,6 +1903,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// #![feature(iter_cmp)]\n+    /// #![allow(deprecated)]\n     ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n@@ -1911,9 +1912,30 @@ pub trait Iterator {\n     #[unstable(feature = \"iter_cmp\",\n                reason = \"may want to produce an Ordering directly; see #15311\",\n                issue = \"27724\")]\n+    #[rustc_deprecated(reason = \"renamed to max_by_key\", since = \"1.6.0\")]\n     fn max_by<B: Ord, F>(self, f: F) -> Option<Self::Item> where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n+    {\n+        self.max_by_key(f)\n+    }\n+\n+    /// Returns the element that gives the maximum value from the\n+    /// specified function.\n+    ///\n+    /// Returns the rightmost element if the comparison determines two elements\n+    /// to be equally maximum.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let a = [-3_i32, 0, 1, 5, -10];\n+    /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n+    fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n+        where Self: Sized, F: FnMut(&Self::Item) -> B,\n     {\n         select_fold1(self,\n                      f,\n@@ -1933,6 +1955,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// #![feature(iter_cmp)]\n+    /// #![allow(deprecated)]\n     ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n@@ -1941,9 +1964,29 @@ pub trait Iterator {\n     #[unstable(feature = \"iter_cmp\",\n                reason = \"may want to produce an Ordering directly; see #15311\",\n                issue = \"27724\")]\n+    #[rustc_deprecated(reason = \"renamed to min_by_key\", since = \"1.6.0\")]\n     fn min_by<B: Ord, F>(self, f: F) -> Option<Self::Item> where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n+    {\n+        self.min_by_key(f)\n+    }\n+\n+    /// Returns the element that gives the minimum value from the\n+    /// specified function.\n+    ///\n+    /// Returns the latest element if the comparison determines two elements\n+    /// to be equally minimum.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let a = [-3_i32, 0, 1, 5, -10];\n+    /// assert_eq!(*a.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n+    /// ```\n+    #[stable(feature = \"iter_cmp_by_key\", since = \"1.6.0\")]\n+    fn min_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>\n+        where Self: Sized, F: FnMut(&Self::Item) -> B,\n     {\n         select_fold1(self,\n                      f,\n@@ -3588,7 +3631,7 @@ impl<I: Iterator> Peekable<I> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(core)]\n+    /// #![feature(peekable_is_empty)]\n     ///\n     /// let xs = [1, 2, 3];\n     ///\n@@ -3604,7 +3647,7 @@ impl<I: Iterator> Peekable<I> {\n     ///\n     /// assert_eq!(iter.is_empty(), true);\n     /// ```\n-    #[unstable(feature = \"core\", issue = \"27701\")]\n+    #[unstable(feature = \"peekable_is_empty\", issue = \"27701\")]\n     #[inline]\n     pub fn is_empty(&mut self) -> bool {\n         self.peek().is_none()"}, {"sha": "86f2e3bcec396a6bbf433592dd6a8e52a5a1ae25", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -52,18 +52,16 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"core\"]\n-#![unstable(feature = \"core\",\n-            reason = \"the libcore library has not yet been scrutinized for \\\n-                      stabilization in terms of structure and naming\",\n-            issue = \"27701\")]\n+#![stable(feature = \"core\", since = \"1.6.0\")]\n #![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n-       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n-#![doc(test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n+       issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n+       test(no_crate_inject, attr(deny(warnings))),\n+       test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n #![no_core]\n #![deny(missing_docs)]\n@@ -91,9 +89,6 @@\n #[macro_use]\n mod macros;\n \n-#[macro_use]\n-mod cmp_macros;\n-\n #[path = \"num/float_macros.rs\"]\n #[macro_use]\n mod float_macros;"}, {"sha": "03d3cb11b3ed37fa93e9ff1c10d34c19fbeec377", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -11,6 +11,7 @@\n /// Entry point of thread panic, for details, see std::macros\n #[macro_export]\n #[allow_internal_unstable]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n         panic!(\"explicit panic\")\n@@ -154,21 +155,47 @@ macro_rules! debug_assert {\n /// debug_assert_eq!(a, b);\n /// ```\n #[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert_eq {\n     ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n }\n \n-/// Short circuiting evaluation on Err\n+/// Helper macro for unwrapping `Result` values while returning early with an\n+/// error if the value of the expression is `Err`. Can only be used in\n+/// functions that return `Result` because of the early return of `Err` that\n+/// it provides.\n+///\n+/// # Examples\n ///\n-/// `libstd` contains a more general `try!` macro that uses `From<E>`.\n+/// ```\n+/// use std::io;\n+/// use std::fs::File;\n+/// use std::io::prelude::*;\n+///\n+/// fn write_to_file_using_try() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     try!(file.write_all(b\"This is a list of my best friends.\"));\n+///     println!(\"I wrote to the file\");\n+///     Ok(())\n+/// }\n+/// // This is equivalent to:\n+/// fn write_to_file_using_match() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     match file.write_all(b\"This is a list of my best friends.\") {\n+///         Ok(_) => (),\n+///         Err(e) => return Err(e),\n+///     }\n+///     println!(\"I wrote to the file\");\n+///     Ok(())\n+/// }\n+/// ```\n #[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! try {\n-    ($e:expr) => ({\n-        use $crate::result::Result::{Ok, Err};\n-\n-        match $e {\n-            Ok(e) => e,\n-            Err(e) => return Err(e),\n+    ($expr:expr) => (match $expr {\n+        $crate::result::Result::Ok(val) => val,\n+        $crate::result::Result::Err(err) => {\n+            return $crate::result::Result::Err($crate::convert::From::from(err))\n         }\n     })\n }\n@@ -194,6 +221,7 @@ macro_rules! try {\n /// assert_eq!(w, b\"testformatted arguments\");\n /// ```\n #[macro_export]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n }\n@@ -271,9 +299,7 @@ macro_rules! writeln {\n /// }\n /// ```\n #[macro_export]\n-#[unstable(feature = \"core\",\n-           reason = \"relationship with panic is unclear\",\n-           issue = \"27701\")]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! unreachable {\n     () => ({\n         panic!(\"internal error: entered unreachable code\")\n@@ -334,9 +360,7 @@ macro_rules! unreachable {\n /// }\n /// ```\n #[macro_export]\n-#[unstable(feature = \"core\",\n-           reason = \"relationship with panic is unclear\",\n-           issue = \"27701\")]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"))\n }"}, {"sha": "359d15640f978073c359d016a3d2da04aae072af", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -243,14 +243,14 @@ impl Float for f32 {\n     /// Returns `true` if `self` is positive, including `+0.0` and\n     /// `Float::infinity()`.\n     #[inline]\n-    fn is_positive(self) -> bool {\n+    fn is_sign_positive(self) -> bool {\n         self > 0.0 || (1.0 / self) == Float::infinity()\n     }\n \n     /// Returns `true` if `self` is negative, including `-0.0` and\n     /// `Float::neg_infinity()`.\n     #[inline]\n-    fn is_negative(self) -> bool {\n+    fn is_sign_negative(self) -> bool {\n         self < 0.0 || (1.0 / self) == Float::neg_infinity()\n     }\n "}, {"sha": "1a6acc5f4ab11a2b0c34b05fbaa85da5b514ea5e", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -243,14 +243,14 @@ impl Float for f64 {\n     /// Returns `true` if `self` is positive, including `+0.0` and\n     /// `Float::infinity()`.\n     #[inline]\n-    fn is_positive(self) -> bool {\n+    fn is_sign_positive(self) -> bool {\n         self > 0.0 || (1.0 / self) == Float::infinity()\n     }\n \n     /// Returns `true` if `self` is negative, including `-0.0` and\n     /// `Float::neg_infinity()`.\n     #[inline]\n-    fn is_negative(self) -> bool {\n+    fn is_sign_negative(self) -> bool {\n         self < 0.0 || (1.0 / self) == Float::neg_infinity()\n     }\n "}, {"sha": "46f3c463ff06f10be25546c5a68cd4ad1a4f4fcb", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -132,7 +132,6 @@ functions.\n \n use prelude::v1::*;\n use i16;\n-use slice::bytes;\n pub use self::decoder::{decode, DecodableFloat, FullDecoded, Decoded};\n \n pub mod estimator;\n@@ -211,7 +210,7 @@ impl<'a> Part<'a> {\n                     }\n                 }\n                 Part::Copy(buf) => {\n-                    bytes::copy_memory(buf, out);\n+                    out.clone_from_slice(buf);\n                 }\n             }\n             Some(len)\n@@ -246,7 +245,7 @@ impl<'a> Formatted<'a> {\n     /// (It may still leave partially written bytes in the buffer; do not rely on that.)\n     pub fn write(&self, out: &mut [u8]) -> Option<usize> {\n         if out.len() < self.sign.len() { return None; }\n-        bytes::copy_memory(self.sign, out);\n+        out.clone_from_slice(self.sign);\n \n         let mut written = self.sign.len();\n         for part in self.parts {"}, {"sha": "e1e5c01adb705eb572806c2c6bb0348270e24620", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1748,62 +1748,96 @@ pub enum FpCategory {\n            issue = \"27702\")]\n pub trait Float: Sized {\n     /// Returns the NaN value.\n+    #[unstable(feature = \"float_extras\", reason = \"needs removal\",\n+               issue = \"27752\")]\n     fn nan() -> Self;\n     /// Returns the infinite value.\n+    #[unstable(feature = \"float_extras\", reason = \"needs removal\",\n+               issue = \"27752\")]\n     fn infinity() -> Self;\n     /// Returns the negative infinite value.\n+    #[unstable(feature = \"float_extras\", reason = \"needs removal\",\n+               issue = \"27752\")]\n     fn neg_infinity() -> Self;\n     /// Returns -0.0.\n+    #[unstable(feature = \"float_extras\", reason = \"needs removal\",\n+               issue = \"27752\")]\n     fn neg_zero() -> Self;\n     /// Returns 0.0.\n+    #[unstable(feature = \"float_extras\", reason = \"needs removal\",\n+               issue = \"27752\")]\n     fn zero() -> Self;\n     /// Returns 1.0.\n+    #[unstable(feature = \"float_extras\", reason = \"needs removal\",\n+               issue = \"27752\")]\n     fn one() -> Self;\n     /// Parses the string `s` with the radix `r` as a float.\n+    #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n+               issue = \"27736\")]\n+    #[rustc_deprecated(since = \"1.4.0\",\n+                 reason = \"unclear how useful or correct this is\")]\n     fn from_str_radix(s: &str, r: u32) -> Result<Self, ParseFloatError>;\n \n     /// Returns true if this value is NaN and false otherwise.\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_nan(self) -> bool;\n     /// Returns true if this value is positive infinity or negative infinity and\n     /// false otherwise.\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_infinite(self) -> bool;\n     /// Returns true if this number is neither infinite nor NaN.\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_finite(self) -> bool;\n     /// Returns true if this number is neither zero, infinite, denormal, or NaN.\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_normal(self) -> bool;\n     /// Returns the category that this number falls into.\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn classify(self) -> FpCategory;\n \n     /// Returns the mantissa, exponent and sign as integers, respectively.\n+    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\",\n+               issue = \"27752\")]\n     fn integer_decode(self) -> (u64, i16, i8);\n \n     /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n     /// number is `Float::nan()`.\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn abs(self) -> Self;\n     /// Returns a number that represents the sign of `self`.\n     ///\n     /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n     /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n     /// - `Float::nan()` if the number is `Float::nan()`\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn signum(self) -> Self;\n+\n     /// Returns `true` if `self` is positive, including `+0.0` and\n     /// `Float::infinity()`.\n-    fn is_positive(self) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n+    fn is_sign_positive(self) -> bool;\n     /// Returns `true` if `self` is negative, including `-0.0` and\n     /// `Float::neg_infinity()`.\n-    fn is_negative(self) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n+    fn is_sign_negative(self) -> bool;\n \n     /// Take the reciprocal (inverse) of a number, `1/x`.\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn recip(self) -> Self;\n \n     /// Raise a number to an integer power.\n     ///\n     /// Using this function is generally faster than using `powf`\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn powi(self, n: i32) -> Self;\n \n     /// Convert radians to degrees.\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\",\n+               issue = \"27752\")]\n     fn to_degrees(self) -> Self;\n     /// Convert degrees to radians.\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\",\n+               issue = \"27752\")]\n     fn to_radians(self) -> Self;\n }\n "}, {"sha": "0abbd70762d687255ff9fc31e73c31cb765b2144", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1732,7 +1732,7 @@ impl<'a, T: ?Sized> DerefMut for &'a mut T {\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait Fn<Args> : FnMut<Args> {\n     /// This is called when the call operator is used.\n-    #[unstable(feature = \"core\", issue = \"27701\")]\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n@@ -1743,7 +1743,7 @@ pub trait Fn<Args> : FnMut<Args> {\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait FnMut<Args> : FnOnce<Args> {\n     /// This is called when the call operator is used.\n-    #[unstable(feature = \"core\", issue = \"27701\")]\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n }\n \n@@ -1754,11 +1754,11 @@ pub trait FnMut<Args> : FnOnce<Args> {\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n-    #[unstable(feature = \"core\", issue = \"27701\")]\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     type Output;\n \n     /// This is called when the call operator is used.\n-    #[unstable(feature = \"core\", issue = \"27701\")]\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }\n "}, {"sha": "70175086147b73053ffaa3131289cbdaff90a4af", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 45, "deletions": 101, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -61,72 +61,98 @@ use raw::Slice as RawSlice;\n //\n \n /// Extension methods for slices.\n-#[allow(missing_docs)] // docs in libcollections\n-#[doc(hidden)]\n #[unstable(feature = \"core_slice_ext\",\n            reason = \"stable interface provided by `impl [T]` in later crates\",\n            issue = \"27701\")]\n+#[allow(missing_docs)] // documented elsewhere\n pub trait SliceExt {\n     type Item;\n \n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_at(&self, mid: usize) -> (&[Self::Item], &[Self::Item]);\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn iter(&self) -> Iter<Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split<P>(&self, pred: P) -> Split<Self::Item, P>\n                     where P: FnMut(&Self::Item) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn splitn<P>(&self, n: usize, pred: P) -> SplitN<Self::Item, P>\n                      where P: FnMut(&Self::Item) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rsplitn<P>(&self,  n: usize, pred: P) -> RSplitN<Self::Item, P>\n                       where P: FnMut(&Self::Item) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn windows(&self, size: usize) -> Windows<Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn chunks(&self, size: usize) -> Chunks<Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn get(&self, index: usize) -> Option<&Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn first(&self) -> Option<&Self::Item>;\n-    fn tail(&self) -> &[Self::Item];\n-    fn init(&self) -> &[Self::Item];\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_first(&self) -> Option<(&Self::Item, &[Self::Item])>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_last(&self) -> Option<(&Self::Item, &[Self::Item])>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn last(&self) -> Option<&Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn get_unchecked(&self, index: usize) -> &Self::Item;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_ptr(&self) -> *const Self::Item;\n-    fn binary_search_by<F>(&self, f: F) -> Result<usize, usize> where\n-        F: FnMut(&Self::Item) -> Ordering;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n+    fn binary_search(&self, x: &Self::Item) -> Result<usize, usize>\n+        where Self::Item: Ord;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n+    fn binary_search_by<F>(&self, f: F) -> Result<usize, usize>\n+        where F: FnMut(&Self::Item) -> Ordering;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len(&self) -> usize;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_empty(&self) -> bool { self.len() == 0 }\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn get_mut(&mut self, index: usize) -> Option<&mut Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn iter_mut(&mut self) -> IterMut<Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn first_mut(&mut self) -> Option<&mut Self::Item>;\n-    fn tail_mut(&mut self) -> &mut [Self::Item];\n-    fn init_mut(&mut self) -> &mut [Self::Item];\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_first_mut(&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_last_mut(&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn last_mut(&mut self) -> Option<&mut Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_mut<P>(&mut self, pred: P) -> SplitMut<Self::Item, P>\n                         where P: FnMut(&Self::Item) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn splitn_mut<P>(&mut self, n: usize, pred: P) -> SplitNMut<Self::Item, P>\n                      where P: FnMut(&Self::Item) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rsplitn_mut<P>(&mut self,  n: usize, pred: P) -> RSplitNMut<Self::Item, P>\n                       where P: FnMut(&Self::Item) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<Self::Item>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn swap(&mut self, a: usize, b: usize);\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_at_mut(&mut self, mid: usize) -> (&mut [Self::Item], &mut [Self::Item]);\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn reverse(&mut self);\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut Self::Item;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_mut_ptr(&mut self) -> *mut Self::Item;\n \n-    fn position_elem(&self, t: &Self::Item) -> Option<usize> where Self::Item: PartialEq;\n-\n-    fn rposition_elem(&self, t: &Self::Item) -> Option<usize> where Self::Item: PartialEq;\n-\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn contains(&self, x: &Self::Item) -> bool where Self::Item: PartialEq;\n \n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn starts_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn ends_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n-    fn binary_search(&self, x: &Self::Item) -> Result<usize, usize> where Self::Item: Ord;\n-    fn next_permutation(&mut self) -> bool where Self::Item: Ord;\n-    fn prev_permutation(&mut self) -> bool where Self::Item: Ord;\n-\n+    #[unstable(feature = \"clone_from_slice\", issue= \"27750\")]\n     fn clone_from_slice(&mut self, &[Self::Item]) -> usize where Self::Item: Clone;\n }\n \n@@ -241,17 +267,11 @@ impl<T> SliceExt for [T] {\n         if self.is_empty() { None } else { Some(&self[0]) }\n     }\n \n-    #[inline]\n-    fn tail(&self) -> &[T] { &self[1..] }\n-\n     #[inline]\n     fn split_first(&self) -> Option<(&T, &[T])> {\n         if self.is_empty() { None } else { Some((&self[0], &self[1..])) }\n     }\n \n-    #[inline]\n-    fn init(&self) -> &[T] { &self[..self.len() - 1] }\n-\n     #[inline]\n     fn split_last(&self) -> Option<(&T, &[T])> {\n         let len = self.len();\n@@ -346,9 +366,6 @@ impl<T> SliceExt for [T] {\n         if self.is_empty() { None } else { Some(&mut self[0]) }\n     }\n \n-    #[inline]\n-    fn tail_mut(&mut self) -> &mut [T] { &mut self[1 ..] }\n-\n     #[inline]\n     fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         if self.is_empty() { None } else {\n@@ -357,12 +374,6 @@ impl<T> SliceExt for [T] {\n         }\n     }\n \n-    #[inline]\n-    fn init_mut(&mut self) -> &mut [T] {\n-        let len = self.len();\n-        &mut self[.. (len - 1)]\n-    }\n-\n     #[inline]\n     fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         let len = self.len();\n@@ -444,16 +455,6 @@ impl<T> SliceExt for [T] {\n         self.repr().data as *mut T\n     }\n \n-    #[inline]\n-    fn position_elem(&self, x: &T) -> Option<usize> where T: PartialEq {\n-        self.iter().position(|y| *x == *y)\n-    }\n-\n-    #[inline]\n-    fn rposition_elem(&self, t: &T) -> Option<usize> where T: PartialEq {\n-        self.iter().rposition(|x| *x == *t)\n-    }\n-\n     #[inline]\n     fn contains(&self, x: &T) -> bool where T: PartialEq {\n         self.iter().any(|elt| *x == *elt)\n@@ -475,66 +476,6 @@ impl<T> SliceExt for [T] {\n         self.binary_search_by(|p| p.cmp(x))\n     }\n \n-    fn next_permutation(&mut self) -> bool where T: Ord {\n-        // These cases only have 1 permutation each, so we can't do anything.\n-        if self.len() < 2 { return false; }\n-\n-        // Step 1: Identify the longest, rightmost weakly decreasing part of the vector\n-        let mut i = self.len() - 1;\n-        while i > 0 && self[i-1] >= self[i] {\n-            i -= 1;\n-        }\n-\n-        // If that is the entire vector, this is the last-ordered permutation.\n-        if i == 0 {\n-            return false;\n-        }\n-\n-        // Step 2: Find the rightmost element larger than the pivot (i-1)\n-        let mut j = self.len() - 1;\n-        while j >= i && self[j] <= self[i-1]  {\n-            j -= 1;\n-        }\n-\n-        // Step 3: Swap that element with the pivot\n-        self.swap(j, i-1);\n-\n-        // Step 4: Reverse the (previously) weakly decreasing part\n-        self[i..].reverse();\n-\n-        true\n-    }\n-\n-    fn prev_permutation(&mut self) -> bool where T: Ord {\n-        // These cases only have 1 permutation each, so we can't do anything.\n-        if self.len() < 2 { return false; }\n-\n-        // Step 1: Identify the longest, rightmost weakly increasing part of the vector\n-        let mut i = self.len() - 1;\n-        while i > 0 && self[i-1] <= self[i] {\n-            i -= 1;\n-        }\n-\n-        // If that is the entire vector, this is the first-ordered permutation.\n-        if i == 0 {\n-            return false;\n-        }\n-\n-        // Step 2: Reverse the weakly increasing part\n-        self[i..].reverse();\n-\n-        // Step 3: Find the rightmost element equal to or bigger than the pivot (i-1)\n-        let mut j = self.len() - 1;\n-        while j >= i && self[j-1] < self[i-1]  {\n-            j -= 1;\n-        }\n-\n-        // Step 4: Swap that element with the pivot\n-        self.swap(i-1, j);\n-\n-        true\n-    }\n-\n     #[inline]\n     fn clone_from_slice(&mut self, src: &[T]) -> usize where T: Clone {\n         let min = cmp::min(self.len(), src.len());\n@@ -1514,6 +1455,9 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n /// Operations on `[u8]`.\n #[unstable(feature = \"slice_bytes\", reason = \"needs review\",\n            issue = \"27740\")]\n+#[rustc_deprecated(reason = \"unidiomatic functions not pulling their weight\",\n+                   since = \"1.6.0\")]\n+#[allow(deprecated)]\n pub mod bytes {\n     use ptr;\n     use slice::SliceExt;"}, {"sha": "7aacdbeb768791eac256a50cfa07d3a6b64ac4c6", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 67, "deletions": 49, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1385,58 +1385,120 @@ pub trait StrExt {\n     // NB there are no docs here are they're all located on the StrExt trait in\n     // libcollections, not here.\n \n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool;\n-    fn contains_char<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn chars(&self) -> Chars;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn bytes(&self) -> Bytes;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn char_indices(&self) -> CharIndices;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rsplitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> RSplitN<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn lines(&self) -> Lines;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n+    #[rustc_deprecated(since = \"1.6.0\", reason = \"use lines() instead now\")]\n     #[allow(deprecated)]\n     fn lines_any(&self) -> LinesAny;\n-    fn char_len(&self) -> usize;\n-    fn slice_chars(&self, begin: usize, end: usize) -> &str;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool\n         where P::Searcher: ReverseSearcher<'a>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: DoubleEndedSearcher<'a>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: ReverseSearcher<'a>;\n+    #[unstable(feature = \"str_char\",\n+               reason = \"it is unclear whether this method pulls its weight \\\n+                         with the existence of the char_indices iterator or \\\n+                         this method may want to be replaced with checked \\\n+                         slicing\",\n+               issue = \"27754\")]\n     fn is_char_boundary(&self, index: usize) -> bool;\n+    #[unstable(feature = \"str_char\",\n+               reason = \"often replaced by char_indices, this method may \\\n+                         be removed in favor of just char_at() or eventually \\\n+                         removed altogether\",\n+               issue = \"27754\")]\n     fn char_range_at(&self, start: usize) -> CharRange;\n+    #[unstable(feature = \"str_char\",\n+               reason = \"often replaced by char_indices, this method may \\\n+                         be removed in favor of just char_at_reverse() or \\\n+                         eventually removed altogether\",\n+               issue = \"27754\")]\n     fn char_range_at_reverse(&self, start: usize) -> CharRange;\n+    #[unstable(feature = \"str_char\",\n+               reason = \"frequently replaced by the chars() iterator, this \\\n+                         method may be removed or possibly renamed in the \\\n+                         future; it is normally replaced by chars/char_indices \\\n+                         iterators or by getting the first char from a \\\n+                         subslice\",\n+               issue = \"27754\")]\n     fn char_at(&self, i: usize) -> char;\n+    #[unstable(feature = \"str_char\",\n+               reason = \"see char_at for more details, but reverse semantics \\\n+                         are also somewhat unclear, especially with which \\\n+                         cases generate panics\",\n+               issue = \"27754\")]\n     fn char_at_reverse(&self, i: usize) -> char;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_bytes(&self) -> &[u8];\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>;\n     fn find_str<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_at(&self, mid: usize) -> (&str, &str);\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str);\n+    #[unstable(feature = \"str_char\",\n+               reason = \"awaiting conventions about shifting and slices and \\\n+                         may not be warranted with the existence of the chars \\\n+                         and/or char_indices iterators\",\n+               issue = \"27754\")]\n     fn slice_shift_char(&self) -> Option<(char, &str)>;\n-    fn subslice_offset(&self, inner: &str) -> usize;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_ptr(&self) -> *const u8;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len(&self) -> usize;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_empty(&self) -> bool;\n+    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn parse<T: FromStr>(&self) -> Result<T, T::Err>;\n }\n \n@@ -1448,20 +1510,13 @@ fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n           begin, end, s);\n }\n \n-#[unstable(feature = \"core_str_ext\",\n-           reason = \"stable interface provided by `impl str` in later crates\",\n-           issue = \"27701\")]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n impl StrExt for str {\n     #[inline]\n     fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         pat.is_contained_in(self)\n     }\n \n-    #[inline]\n-    fn contains_char<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n-        pat.is_contained_in(self)\n-    }\n-\n     #[inline]\n     fn chars(&self) -> Chars {\n         Chars{iter: self.as_bytes().iter()}\n@@ -1559,32 +1614,6 @@ impl StrExt for str {\n         LinesAny(self.lines())\n     }\n \n-    #[inline]\n-    fn char_len(&self) -> usize { self.chars().count() }\n-\n-    fn slice_chars(&self, begin: usize, end: usize) -> &str {\n-        assert!(begin <= end);\n-        let mut count = 0;\n-        let mut begin_byte = None;\n-        let mut end_byte = None;\n-\n-        // This could be even more efficient by not decoding,\n-        // only finding the char boundaries\n-        for (idx, _) in self.char_indices() {\n-            if count == begin { begin_byte = Some(idx); }\n-            if count == end { end_byte = Some(idx); break; }\n-            count += 1;\n-        }\n-        if begin_byte.is_none() && count == begin { begin_byte = Some(self.len()) }\n-        if end_byte.is_none() && count == end { end_byte = Some(self.len()) }\n-\n-        match (begin_byte, end_byte) {\n-            (None, _) => panic!(\"slice_chars: `begin` is beyond end of string\"),\n-            (_, None) => panic!(\"slice_chars: `end` is beyond end of string\"),\n-            (Some(a), Some(b)) => unsafe { self.slice_unchecked(a, b) }\n-        }\n-    }\n-\n     #[inline]\n     unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         mem::transmute(Slice {\n@@ -1774,17 +1803,6 @@ impl StrExt for str {\n         }\n     }\n \n-    fn subslice_offset(&self, inner: &str) -> usize {\n-        let a_start = self.as_ptr() as usize;\n-        let a_end = a_start + self.len();\n-        let b_start = inner.as_ptr() as usize;\n-        let b_end = b_start + inner.len();\n-\n-        assert!(a_start <= b_start);\n-        assert!(b_end <= a_end);\n-        b_start - a_start\n-    }\n-\n     #[inline]\n     fn as_ptr(&self) -> *const u8 {\n         self.repr().data"}, {"sha": "20da4a86bf5458b526f6140202124083f298ceb9", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -31,6 +31,7 @@\n #![feature(libc)]\n #![feature(nonzero)]\n #![feature(num_bits_bytes)]\n+#![feature(peekable_is_empty)]\n #![feature(ptr_as_ref)]\n #![feature(rand)]\n #![feature(range_inclusive)]"}, {"sha": "404bbd902bfd86af95e47ae86932e59e44af93b4", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -174,7 +174,6 @@\n \n #![feature(box_syntax)]\n #![feature(const_fn)]\n-#![feature(iter_cmp)]\n #![feature(staged_api)]\n #![feature(static_mutex)]\n \n@@ -418,7 +417,7 @@ fn init() {\n     });\n \n     let max_level = {\n-        let max = directives.iter().max_by(|d| d.level);\n+        let max = directives.iter().max_by_key(|d| d.level);\n         max.map(|d| d.level).unwrap_or(DEFAULT_LOG_LEVEL)\n     };\n "}, {"sha": "013efb129d850268dbe8f66e20be8bb13ca4c532", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -32,13 +32,12 @@\n             issue = \"27703\")]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n-#![feature(core_slice_ext)]\n-#![feature(no_std)]\n #![feature(num_bits_bytes)]\n #![feature(staged_api)]\n #![feature(step_by)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n+#![cfg_attr(stage0, feature(no_std))]\n \n #![cfg_attr(test, feature(test, rand, rustc_private, iter_order_deprecated))]\n "}, {"sha": "9cb160b7decfff2334b7ce396e6b0498c23d1d6d", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -126,7 +126,7 @@\n \n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(slice_bytes)]\n+#![feature(clone_from_slice)]\n \n #![cfg_attr(test, feature(test))]\n \n@@ -241,7 +241,6 @@ pub mod reader {\n \n     use std::isize;\n     use std::mem::transmute;\n-    use std::slice::bytes;\n \n     use serialize;\n \n@@ -482,7 +481,7 @@ pub mod reader {\n             // of the page and segfault.\n \n             let mut b = [0; 8];\n-            bytes::copy_memory(&d.data[d.end-8..d.end], &mut b);\n+            b.clone_from_slice(&d.data[d.end-8..d.end]);\n             let data = unsafe { (*(b.as_ptr() as *const u64)).to_be() };\n             let len = d.end - d.start;\n             if len < 8 {\n@@ -872,7 +871,6 @@ pub mod writer {\n     use std::mem;\n     use std::io::prelude::*;\n     use std::io::{self, SeekFrom, Cursor};\n-    use std::slice::bytes;\n \n     use super::{ EsVec, EsMap, EsEnum, EsSub8, EsSub32, EsVecElt, EsMapKey,\n         EsU64, EsU32, EsU16, EsU8, EsI64, EsI32, EsI16, EsI8,\n@@ -962,7 +960,7 @@ pub mod writer {\n                 {\n                     let last_size_pos = last_size_pos as usize;\n                     let data = &self.writer.get_ref()[last_size_pos+4..cur_pos as usize];\n-                    bytes::copy_memory(data, &mut buf);\n+                    buf.clone_from_slice(data);\n                 }\n \n                 // overwrite the size and data and continue"}, {"sha": "3f4696cdfd96e51fb73473fedb9774d5dfd35c7f", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -872,7 +872,6 @@ You can build a free-standing crate by adding `#![no_std]` to the crate\n attributes:\n \n ```\n-#![feature(no_std)]\n #![no_std]\n ```\n "}, {"sha": "bd97cb128e967a0c9f535a66c3d087541bf86aa3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -28,15 +28,13 @@\n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(cell_extras)]\n #![feature(clone_from_slice)]\n #![feature(collections)]\n #![feature(const_fn)]\n-#![feature(core)]\n-#![feature(duration_span)]\n #![feature(enumset)]\n #![feature(hashmap_hasher)]\n #![feature(into_cow)]\n-#![feature(iter_cmp)]\n #![feature(iter_arith)]\n #![feature(libc)]\n #![feature(nonzero)]\n@@ -48,9 +46,8 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(str_char)]\n-#![feature(vec_push_all)]\n+#![feature(time2)]\n #![feature(wrapping)]\n-#![feature(cell_extras)]\n #![cfg_attr(test, feature(test))]\n \n #![allow(trivial_casts)]"}, {"sha": "f54e3097ac43b8625be1e63961b5ed33fbdbf1b7", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -980,8 +980,8 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n         }\n     };\n     head.map(|mut head| {\n-        head.push_all(&r[..col]);\n-        head.push_all(&r[col + 1..]);\n+        head.extend_from_slice(&r[..col]);\n+        head.extend_from_slice(&r[col + 1..]);\n         head\n     })\n }"}, {"sha": "ec1b447d7111b2d71678e82b368e1418ddd1fa37", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n             // necessary for the pattern to match. Those construction sites\n             // can't be reached unless the variant is constructed elsewhere.\n             let len = self.ignore_variant_stack.len();\n-            self.ignore_variant_stack.push_all(&*variants);\n+            self.ignore_variant_stack.extend_from_slice(&*variants);\n             intravisit::walk_arm(self, arm);\n             self.ignore_variant_stack.truncate(len);\n         } else {"}, {"sha": "3f91c20c32aac73d85b6337bcc531acf779bad62", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1523,7 +1523,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n             parameters: new_parameters\n         };\n         let mut new_segs = Vec::new();\n-        new_segs.push_all(path.segments.split_last().unwrap().1);\n+        new_segs.extend_from_slice(path.segments.split_last().unwrap().1);\n         new_segs.push(new_seg);\n         hir::Path {\n             span: path.span,\n@@ -1831,15 +1831,15 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n         Some(node) => match node {\n             ast_map::NodeItem(item) => match item.node {\n                 hir::ItemFn(_, _, _, _, ref gen, _) => {\n-                    taken.push_all(&gen.lifetimes);\n+                    taken.extend_from_slice(&gen.lifetimes);\n                     None\n                 },\n                 _ => None\n             },\n             ast_map::NodeImplItem(ii) => {\n                 match ii.node {\n                     hir::ImplItemKind::Method(ref sig, _) => {\n-                        taken.push_all(&sig.generics.lifetimes);\n+                        taken.extend_from_slice(&sig.generics.lifetimes);\n                         Some(ii.id)\n                     }\n                     _ => None,\n@@ -1856,7 +1856,7 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n             Some(node) => match node {\n                 ast_map::NodeItem(item) => match item.node {\n                     hir::ItemImpl(_, _, ref gen, _, _, _) => {\n-                        taken.push_all(&gen.lifetimes);\n+                        taken.extend_from_slice(&gen.lifetimes);\n                     }\n                     _ => ()\n                 },"}, {"sha": "031b50f4620e7f673f9b5c596b6745cfe4ab0c54", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -178,7 +178,7 @@ pub fn pat_contains_ref_binding(dm: &RefCell<DefMap>, pat: &hir::Pat) -> Option<\n pub fn arm_contains_ref_binding(dm: &RefCell<DefMap>, arm: &hir::Arm) -> Option<hir::Mutability> {\n     arm.pats.iter()\n             .filter_map(|pat| pat_contains_ref_binding(dm, pat))\n-            .max_by(|m| match *m {\n+            .max_by_key(|m| match *m {\n                 hir::MutMutable => 1,\n                 hir::MutImmutable => 0,\n             })"}, {"sha": "546b91c9d5d4ccbce3cbd65b06d2e3272abbe078", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -630,7 +630,7 @@ impl RegionMaps {\n             }\n \n             *vec = Vec::with_capacity(64);\n-            vec.push_all(buf);\n+            vec.extend_from_slice(buf);\n             loop {\n                 vec.push(scope);\n                 match scope_map[scope.0 as usize].into_option() {"}, {"sha": "425a324c7e084d23503e353fe5effed6c7fc5093", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1185,7 +1185,8 @@ impl<'tcx> TyS<'tcx> {\n             }\n             TyTrait(ref obj) => {\n                 let mut v = vec![obj.bounds.region_bound];\n-                v.push_all(obj.principal.skip_binder().substs.regions().as_slice());\n+                v.extend_from_slice(obj.principal.skip_binder()\n+                                       .substs.regions().as_slice());\n                 v\n             }\n             TyEnum(_, substs) |"}, {"sha": "ecc93ce1ba099716d38f3e1bab114317278d0f6e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -659,7 +659,7 @@ pub fn build_configuration(sess: &Session) -> ast::CrateConfig {\n         append_configuration(&mut user_cfg, InternedString::new(\"test\"))\n     }\n     let mut v = user_cfg.into_iter().collect::<Vec<_>>();\n-    v.push_all(&default_cfg[..]);\n+    v.extend_from_slice(&default_cfg[..]);\n     v\n }\n \n@@ -818,7 +818,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n /// long-term interface for rustc.\n pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n     let mut opts = rustc_short_optgroups();\n-    opts.push_all(&[\n+    opts.extend_from_slice(&[\n         opt::multi(\"\", \"extern\", \"Specify where an external rust library is \\\n                                 located\",\n                  \"NAME=PATH\"),"}, {"sha": "2a3d9cfa6b8882fa2a3732c42be63ad2173e6270", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -18,7 +18,7 @@ use std::fmt::Debug;\n use std::hash::Hash;\n use std::iter::repeat;\n use std::path::Path;\n-use std::time::Duration;\n+use std::time::Instant;\n \n use rustc_front::hir;\n use rustc_front::intravisit;\n@@ -44,15 +44,9 @@ pub fn time<T, F>(do_it: bool, what: &str, f: F) -> T where\n         r\n     });\n \n-    let mut rv = None;\n-    let dur = {\n-        let ref mut rvp = rv;\n-\n-        Duration::span(move || {\n-            *rvp = Some(f())\n-        })\n-    };\n-    let rv = rv.unwrap();\n+    let start = Instant::now();\n+    let rv = f();\n+    let dur = start.elapsed();\n \n     // Hack up our own formatting for the duration to make it easier for scripts\n     // to parse (always use the same number of decimal places and the same unit)."}, {"sha": "700cfb645bf05e10af858ad302521464da90c5d3", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -36,10 +36,9 @@\n #![feature(libc)]\n #![feature(rand)]\n #![feature(rustc_private)]\n-#![feature(slice_bytes)]\n+#![feature(clone_from_slice)]\n #![feature(staged_api)]\n #![feature(step_by)]\n-#![feature(vec_push_all)]\n #![cfg_attr(test, feature(test, rand))]\n \n extern crate syntax;"}, {"sha": "b926f8b061e5836ad095d3b613c26eae02dff03c", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -35,7 +35,7 @@ pub fn get_rpath_flags(config: &mut RPathConfig) -> Vec<String> {\n     let libs = config.used_crates.clone();\n     let libs = libs.into_iter().filter_map(|(_, l)| l).collect::<Vec<_>>();\n     let rpaths = get_rpaths(config, &libs[..]);\n-    flags.push_all(&rpaths_to_flags(&rpaths[..]));\n+    flags.extend_from_slice(&rpaths_to_flags(&rpaths[..]));\n     flags\n }\n \n@@ -73,7 +73,7 @@ fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> {\n     log_rpaths(\"fallback\", &fallback_rpaths[..]);\n \n     let mut rpaths = rel_rpaths;\n-    rpaths.push_all(&fallback_rpaths[..]);\n+    rpaths.extend_from_slice(&fallback_rpaths[..]);\n \n     // Remove duplicates\n     let rpaths = minimize_rpaths(&rpaths[..]);"}, {"sha": "840f9abce9363f1a80f844ab716c21e884aa3a22", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,7 +12,6 @@\n //! use. This implementation is not intended for external use or for any use where security is\n //! important.\n \n-use std::slice::bytes::{MutableByteVector, copy_memory};\n use serialize::hex::ToHex;\n \n /// Write a u32 into a vector, which must be 4 bytes long. The value is written in big-endian\n@@ -134,16 +133,14 @@ impl FixedBuffer for FixedBuffer64 {\n         if self.buffer_idx != 0 {\n             let buffer_remaining = size - self.buffer_idx;\n             if input.len() >= buffer_remaining {\n-                    copy_memory(\n-                        &input[..buffer_remaining],\n-                        &mut self.buffer[self.buffer_idx..size]);\n+                self.buffer[self.buffer_idx..size]\n+                    .clone_from_slice(&input[..buffer_remaining]);\n                 self.buffer_idx = 0;\n                 func(&self.buffer);\n                 i += buffer_remaining;\n             } else {\n-                copy_memory(\n-                    input,\n-                    &mut self.buffer[self.buffer_idx..self.buffer_idx + input.len()]);\n+                self.buffer[self.buffer_idx..self.buffer_idx + input.len()]\n+                    .clone_from_slice(input);\n                 self.buffer_idx += input.len();\n                 return;\n             }\n@@ -160,9 +157,7 @@ impl FixedBuffer for FixedBuffer64 {\n         // data left in the input vector will be less than the buffer size and the buffer will\n         // be empty.\n         let input_remaining = input.len() - i;\n-        copy_memory(\n-            &input[i..],\n-            &mut self.buffer[..input_remaining]);\n+        self.buffer[..input_remaining].clone_from_slice(&input[i..]);\n         self.buffer_idx += input_remaining;\n     }\n \n@@ -172,7 +167,9 @@ impl FixedBuffer for FixedBuffer64 {\n \n     fn zero_until(&mut self, idx: usize) {\n         assert!(idx >= self.buffer_idx);\n-        self.buffer[self.buffer_idx..idx].set_memory(0);\n+        for slot in self.buffer[self.buffer_idx..idx].iter_mut() {\n+            *slot = 0;\n+        }\n         self.buffer_idx = idx;\n     }\n "}, {"sha": "97816a2b2ae84ab13e8b16869d724719e9976154", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -16,7 +16,7 @@\n #![feature(staged_api)]\n #![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n-#![feature(no_std)]\n+#![cfg_attr(stage0, feature(no_std))]\n #![no_std]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n "}, {"sha": "e293a9506873ac460a8a066977c19d7da4bc6390", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -32,7 +32,6 @@\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n-#![feature(vec_push_all)]\n #![feature(raw)] // remove after snapshot\n \n extern crate arena;\n@@ -932,12 +931,12 @@ pub fn diagnostics_registry() -> diagnostics::registry::Registry {\n     use syntax::diagnostics::registry::Registry;\n \n     let mut all_errors = Vec::new();\n-    all_errors.push_all(&rustc::DIAGNOSTICS);\n-    all_errors.push_all(&rustc_typeck::DIAGNOSTICS);\n-    all_errors.push_all(&rustc_borrowck::DIAGNOSTICS);\n-    all_errors.push_all(&rustc_resolve::DIAGNOSTICS);\n-    all_errors.push_all(&rustc_privacy::DIAGNOSTICS);\n-    all_errors.push_all(&rustc_trans::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_typeck::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_borrowck::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_resolve::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_privacy::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_trans::DIAGNOSTICS);\n \n     Registry::new(&*all_errors)\n }"}, {"sha": "2b9adf5490a5551b711d3388de40f334dd2ca395", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -32,7 +32,6 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(staged_api)]\n-#![feature(vec_push_all)]\n #![feature(linked_from)]\n \n extern crate libc;\n@@ -2309,7 +2308,7 @@ pub unsafe extern \"C\" fn rust_llvm_string_write_impl(sr: RustStringRef,\n     let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n \n     let sr = sr as RustStringRepr;\n-    (*sr).borrow_mut().push_all(slice);\n+    (*sr).borrow_mut().extend_from_slice(slice);\n }\n \n pub fn build_string<F>(f: F) -> Option<String> where F: FnOnce(RustStringRef){"}, {"sha": "aae3a762c197ac37ceef3544a860e26ba7c76aa9", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -122,8 +122,8 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n         cdata.with_local_path(|cpath| {\n             let mut r = Vec::with_capacity(cpath.len() + path.len());\n-            r.push_all(cpath);\n-            r.push_all(&path);\n+            r.extend_from_slice(cpath);\n+            r.extend_from_slice(&path);\n             r\n         })\n     }\n@@ -135,7 +135,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let mut r = Vec::with_capacity(path.len() + 1);\n         let crate_name = hir_map::PathMod(token::intern(&cdata.name));\n         r.push(crate_name);\n-        r.push_all(&path);\n+        r.extend_from_slice(&path);\n         r\n     }\n "}, {"sha": "d2a6b0eaedf53253cebf7d2a27e1b52599665e89", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -19,13 +19,12 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_patterns)]\n-#![feature(duration_span)]\n #![feature(enumset)]\n #![feature(quote)]\n-#![feature(staged_api)]\n-#![feature(vec_push_all)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(staged_api)]\n+#![feature(time2)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "bd9f9c36f631b8ec4aaf467c414377f76b298144", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -237,7 +237,7 @@ use std::io;\n use std::path::{Path, PathBuf};\n use std::ptr;\n use std::slice;\n-use std::time::Duration;\n+use std::time::Instant;\n \n use flate;\n \n@@ -728,12 +728,11 @@ impl ArchiveMetadata {\n // Just a small wrapper to time how long reading metadata takes.\n fn get_metadata_section(target: &Target, filename: &Path)\n                         -> Result<MetadataBlob, String> {\n-    let mut ret = None;\n-    let dur = Duration::span(|| {\n-        ret = Some(get_metadata_section_imp(target, filename));\n-    });\n-    info!(\"reading {:?} => {:?}\", filename.file_name().unwrap(), dur);\n-    ret.unwrap()\n+    let start = Instant::now();\n+    let ret = get_metadata_section_imp(target, filename);\n+    info!(\"reading {:?} => {:?}\", filename.file_name().unwrap(),\n+          start.elapsed());\n+    return ret\n }\n \n fn get_metadata_section_imp(target: &Target, filename: &Path)"}, {"sha": "34f289456bbdea7bf01e0597900be72961388146", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -280,7 +280,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         let mut result = String::new();\n         while self.peek() != term {\n             unsafe {\n-                result.as_mut_vec().push_all(&[self.next_byte()])\n+                result.as_mut_vec().extend_from_slice(&[self.next_byte()])\n             }\n         }\n         self.next();"}, {"sha": "975323375f18effc1e6bfe24af67b5a78021f4e6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -907,7 +907,7 @@ fn link_natively(sess: &Session, dylib: bool,\n                                  prog.status));\n                 sess.note(&format!(\"{:?}\", &cmd));\n                 let mut output = prog.stderr.clone();\n-                output.push_all(&prog.stdout);\n+                output.extend_from_slice(&prog.stdout);\n                 sess.note(&*escape_string(&output[..]));\n                 sess.abort_if_errors();\n             }"}, {"sha": "c553843f858dc84eb1c87ce016ea5bf422aa8a8d", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -925,7 +925,7 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n                                  prog.status));\n                 sess.note(&format!(\"{:?}\", &cmd));\n                 let mut note = prog.stderr.clone();\n-                note.push_all(&prog.stdout);\n+                note.extend_from_slice(&prog.stdout);\n                 sess.note(str::from_utf8(&note[..]).unwrap());\n                 sess.abort_if_errors();\n             }"}, {"sha": "83d0106fd4cb334a5216b867232483f42482bb3a", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -30,7 +30,6 @@\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![feature(iter_cmp)]\n #![feature(iter_arith)]\n #![feature(libc)]\n #![feature(path_relative_from)]\n@@ -40,7 +39,6 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(unicode)]\n-#![feature(vec_push_all)]\n \n #![allow(trivial_casts)]\n "}, {"sha": "1687b229a7f0b934007c3df42055409c9c9e8be3", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -559,7 +559,7 @@ fn enter_default<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     enter_match(bcx, dm, m, col, val, |pats| {\n         if pat_is_binding_or_wild(&dm.borrow(), &*pats[col]) {\n             let mut r = pats[..col].to_vec();\n-            r.push_all(&pats[col + 1..]);\n+            r.extend_from_slice(&pats[col + 1..]);\n             Some(r)\n         } else {\n             None\n@@ -877,7 +877,7 @@ fn pick_column_to_specialize(def_map: &RefCell<DefMap>, m: &[Match]) -> Option<u\n     (0..m[0].pats.len())\n         .filter(column_contains_any_nonwild_patterns)\n         .map(|col| (col, column_score(m, col)))\n-        .max_by(|&(_, score)| score)\n+        .max_by_key(|&(_, score)| score)\n         .map(|(col, _)| col)\n }\n \n@@ -1167,7 +1167,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let dm = &tcx.def_map;\n \n     let mut vals_left = vals[0..col].to_vec();\n-    vals_left.push_all(&vals[col + 1..]);\n+    vals_left.extend_from_slice(&vals[col + 1..]);\n     let ccx = bcx.fcx.ccx;\n \n     // Find a real id (we're adding placeholder wildcard patterns, but\n@@ -1241,7 +1241,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             let mut vals: Vec<_> = field_vals.into_iter()\n                 .map(|v|MatchInput::from_val(v))\n                 .collect();\n-            vals.push_all(&vals_left);\n+            vals.extend_from_slice(&vals_left);\n             compile_submatch(bcx, &pats, &vals, chk, has_genuine_default);\n             return;\n         }\n@@ -1401,7 +1401,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         let mut opt_vals: Vec<_> = unpacked.into_iter()\n             .map(|v|MatchInput::from_val(v))\n             .collect();\n-        opt_vals.push_all(&vals_left[..]);\n+        opt_vals.extend_from_slice(&vals_left[..]);\n         compile_submatch(opt_cx,\n                          &opt_ms[..],\n                          &opt_vals[..],"}, {"sha": "29ba2d65e6b671efe7c11358fbe1d6cdd99411e8", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -346,7 +346,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // Use the minimum integer type we figured out above\n             let fields : Vec<_> = cases.iter().map(|c| {\n                 let mut ftys = vec!(ty_of_inttype(cx.tcx(), min_ity));\n-                ftys.push_all(&c.tys);\n+                ftys.extend_from_slice(&c.tys);\n                 if dtor { ftys.push(cx.tcx().dtor_type()); }\n                 mk_struct(cx, &ftys, false, t)\n             }).collect();\n@@ -399,7 +399,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             let fields : Vec<_> = cases.iter().map(|c| {\n                 let mut ftys = vec!(ty_of_inttype(cx.tcx(), ity));\n-                ftys.push_all(&c.tys);\n+                ftys.extend_from_slice(&c.tys);\n                 if dtor { ftys.push(cx.tcx().dtor_type()); }\n                 mk_struct(cx, &ftys[..], false, t)\n             }).collect();\n@@ -444,7 +444,7 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n             let field_ty = monomorphize::field_ty(tcx, substs, &nonzero_fields[0]);\n             match field_ty.sty {\n                 ty::TyRawPtr(ty::TypeAndMut { ty, .. }) if !type_is_sized(tcx, ty) => {\n-                    path.push_all(&[0, FAT_PTR_ADDR]);\n+                    path.extend_from_slice(&[0, FAT_PTR_ADDR]);\n                     Some(path)\n                 },\n                 ty::TyRawPtr(..) | ty::TyInt(..) | ty::TyUint(..) => {\n@@ -1212,9 +1212,9 @@ pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, r: &Repr<'tcx>, discr\n             let (max_sz, _) = union_size_and_align(&cases[..]);\n             let lldiscr = C_integral(ll_inttype(ccx, ity), discr as u64, true);\n             let mut f = vec![lldiscr];\n-            f.push_all(vals);\n+            f.extend_from_slice(vals);\n             let mut contents = build_const_struct(ccx, case, &f[..]);\n-            contents.push_all(&[padding(ccx, max_sz - case.size)]);\n+            contents.extend_from_slice(&[padding(ccx, max_sz - case.size)]);\n             C_struct(ccx, &contents[..], false)\n         }\n         Univariant(ref st, _dro) => {"}, {"sha": "1de94bed3ddf723e268fd4c962b170e4fce7ed32", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -71,7 +71,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n                                     callee::DontAutorefArg,\n                                     &mut inputs);\n     }\n-    inputs.push_all(&ext_inputs[..]);\n+    inputs.extend_from_slice(&ext_inputs[..]);\n \n     // no failure occurred preparing operands, no need to cleanup\n     fcx.pop_custom_cleanup_scope(temp_scope);"}, {"sha": "28dfa4e07e668808ef0acba18b2d8f18600a3aee", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -156,7 +156,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n             match fn_sig.inputs[0].sty {\n                 ty::TyTuple(ref inputs) => {\n                     let mut full_inputs = vec![env_ty.expect(\"Missing closure environment\")];\n-                    full_inputs.push_all(inputs);\n+                    full_inputs.extend_from_slice(inputs);\n                     full_inputs\n                 }\n                 _ => ccx.sess().bug(\"expected tuple'd inputs\")\n@@ -167,7 +167,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n \n             match fn_sig.inputs[1].sty {\n                 ty::TyTuple(ref t_in) => {\n-                    inputs.push_all(&t_in[..]);\n+                    inputs.extend_from_slice(&t_in[..]);\n                     inputs\n                 }\n                 _ => ccx.sess().bug(\"expected tuple'd inputs\")"}, {"sha": "e6f215cee6774d2ad610006b7967f98655eba3a1", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -2772,7 +2772,7 @@ pub fn write_metadata(cx: &SharedCrateContext, krate: &hir::Crate, reachable: &N\n         cx.tcx(), cx.export_map(), cx.item_symbols(), cx.link_meta(), reachable,\n         krate);\n     let mut compressed = cstore.metadata_encoding_version().to_vec();\n-    compressed.push_all(&flate::deflate_bytes(&metadata));\n+    compressed.extend_from_slice(&flate::deflate_bytes(&metadata));\n \n     let llmeta = C_bytes_in_context(cx.metadata_llcx(), &compressed[..]);\n     let llconst = C_struct_in_context(cx.metadata_llcx(), &[llmeta], false);"}, {"sha": "4aa7c0ff587f04d53aff920481f11a98ebab8879", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1009,7 +1009,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n             }\n         }\n         ArgVals(vs) => {\n-            llargs.push_all(vs);\n+            llargs.extend_from_slice(vs);\n         }\n     }\n "}, {"sha": "d4d2f01f77426b85ab91aa3c14daa4b019c691a4", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -376,7 +376,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             self.local_ccxs\n                 .iter()\n                 .zip(0..self.local_ccxs.len())\n-                .min_by(|&(local_ccx, _idx)| local_ccx.n_llvm_insns.get())\n+                .min_by_key(|&(local_ccx, _idx)| local_ccx.n_llvm_insns.get())\n                 .unwrap();\n         CrateContext {\n             shared: self,"}, {"sha": "84d2a63580ef243b40f13e2544c1eaf866949f66", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1036,7 +1036,7 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n             let hi = bounds.iter().map(|x| match *x {\n                 hir::TraitTyParamBound(ref tr, _) => tr.span.hi,\n                 hir::RegionTyParamBound(ref r) => r.span.hi,\n-            }).max_by(|x| x.to_usize());\n+            }).max_by_key(|x| x.to_usize());\n             let full_span = hi.map(|hi| Span {\n                 lo: ty.span.lo,\n                 hi: hi,"}, {"sha": "8c68a5462356e4157d5a75ba480b4b7bf82f22de", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -451,7 +451,7 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // supertype, as the \"discriminant type\" (issue #23116).\n     let contains_ref_bindings = arms.iter()\n                                     .filter_map(|a| tcx.arm_contains_ref_binding(a))\n-                                    .max_by(|m| match *m {\n+                                    .max_by_key(|m| match *m {\n                                         hir::MutMutable => 1,\n                                         hir::MutImmutable => 0,\n                                     });"}, {"sha": "f980945dbf2206f12b02410727e0ce1f4850b078", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -1733,7 +1733,7 @@ fn projection_declared_bounds<'a, 'tcx>(rcx: &Rcx<'a,'tcx>,\n     let mut declared_bounds =\n         declared_generic_bounds_from_env(rcx, GenericKind::Projection(projection_ty));\n \n-    declared_bounds.push_all(\n+    declared_bounds.extend_from_slice(\n         &declared_projection_bounds_from_trait(rcx, span, projection_ty));\n \n     declared_bounds"}, {"sha": "495b8995ceea2f271c53add2f12b8ac54ee9626b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -77,14 +77,11 @@ This API is completely unstable and subject to change.\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(drain)]\n-#![feature(iter_cmp)]\n #![feature(iter_arith)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(vec_push_all)]\n #![feature(cell_extras)]\n \n #[macro_use] extern crate log;"}, {"sha": "e440b1171863ca5d6879ab330eb7f5c492def77a", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -35,12 +35,10 @@\n #![no_std]\n \n #![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, feature(no_std))]\n #![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(core_char_ext)]\n-#![feature(core_slice_ext)]\n-#![feature(core_str_ext)]\n #![feature(lang_items)]\n-#![feature(no_std)]\n #![feature(staged_api)]\n \n mod tables;"}, {"sha": "cf75cf525771408a7d9d64e5fc74ae3feeab2674", "filename": "src/librustc_unicode/tables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_unicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustc_unicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Ftables.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -18,7 +18,6 @@ pub const UNICODE_VERSION: (u64, u64, u64) = (8, 0, 0);\n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n     use core::cmp::Ordering::{Equal, Less, Greater};\n-    use core::slice::SliceExt;\n     r.binary_search_by(|&(lo,hi)| {\n         if lo <= c && c <= hi { Equal }\n         else if hi < c { Less }\n@@ -1190,7 +1189,6 @@ pub mod property {\n \n pub mod conversions {\n     use core::cmp::Ordering::{Equal, Less, Greater};\n-    use core::slice::SliceExt;\n     use core::option::Option;\n     use core::option::Option::{Some, None};\n     use core::result::Result::{Ok, Err};"}, {"sha": "1b450092dbd5de7c4a187299786c66aaf7e1fa20", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -31,7 +31,6 @@\n #![feature(staged_api)]\n #![feature(test)]\n #![feature(unicode)]\n-#![feature(vec_push_all)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "957957eaec6e5a1fda9a764555ac984c0479adf4", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -346,7 +346,7 @@ pub fn unindent(s: &str) -> String {\n \n     if !lines.is_empty() {\n         let mut unindented = vec![ lines[0].trim().to_string() ];\n-        unindented.push_all(&lines[1..].iter().map(|&line| {\n+        unindented.extend_from_slice(&lines[1..].iter().map(|&line| {\n             if line.chars().all(|c| c.is_whitespace()) {\n                 line.to_string()\n             } else {"}, {"sha": "77c4149f9926ea8084bec0a2809860f323e245b3", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -986,8 +986,6 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(drain)]\n-    ///\n     /// use std::collections::HashMap;\n     ///\n     /// let mut a = HashMap::new();\n@@ -1002,9 +1000,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// assert!(a.is_empty());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27711\")]\n+    #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<K, V> {\n         fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n         let last_two: fn((SafeHash, K, V)) -> (K, V) = last_two; // coerce to fn pointer\n@@ -1327,9 +1323,7 @@ impl<'a, K, V> Clone for Values<'a, K, V> {\n }\n \n /// HashMap drain iterator.\n-#[unstable(feature = \"drain\",\n-           reason = \"matches collection reform specification, waiting for dust to settle\",\n-           issue = \"27711\")]\n+#[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     inner: iter::Map<table::Drain<'a, K, V>, fn((SafeHash, K, V)) -> (K, V)>\n }"}, {"sha": "08f356463bc965dd0cf82ceab9a767ba710a079f", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -413,9 +413,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Clears the set, returning all elements in an iterator.\n     #[inline]\n-    #[unstable(feature = \"drain\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27711\")]\n+    #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n         let first: fn((T, ())) -> T = first; // coerce to fn pointer"}, {"sha": "90b108e67707269638963d7ecc397245a7a15daa", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -72,6 +72,8 @@ impl OsString {\n     /// On Windows system, only UTF-8 byte sequences will successfully\n     /// convert; non UTF-8 data will produce `None`.\n     #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n+    #[rustc_deprecated(reason = \"RFC was closed, hides subtle Windows semantics\",\n+                       since = \"1.6.0\")]\n     pub fn from_bytes<B>(bytes: B) -> Option<OsString> where B: Into<Vec<u8>> {\n         Self::_from_bytes(bytes.into())\n     }\n@@ -256,6 +258,8 @@ impl OsStr {\n     /// valid unicode, in which case it produces UTF-8-encoded\n     /// data. This may entail checking validity.\n     #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n+    #[rustc_deprecated(reason = \"RFC was closed, hides subtle Windows semantics\",\n+                       since = \"1.6.0\")]\n     pub fn to_bytes(&self) -> Option<&[u8]> {\n         if cfg!(windows) {\n             self.to_str().map(|s| s.as_bytes())\n@@ -272,6 +276,9 @@ impl OsStr {\n     /// `self.to_bytes()`, and inherits the platform behavior of the\n     /// `to_bytes` method.\n     #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n+    #[rustc_deprecated(reason = \"RFC was closed, hides subtle Windows semantics\",\n+                       since = \"1.6.0\")]\n+    #[allow(deprecated)]\n     pub fn to_cstring(&self) -> Option<CString> {\n         self.to_bytes().and_then(|b| CString::new(b).ok())\n     }"}, {"sha": "bfad224835932ef591f7054931cad74255e23884", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -91,6 +91,8 @@ pub struct DirEntry(fs_imp::DirEntry);\n                      may change and this may end up accounting for files such \\\n                      as symlinks differently\",\n            issue = \"27707\")]\n+#[rustc_deprecated(reason = \"superceded by the walkdir crate\",\n+                   since = \"1.6.0\")]\n pub struct WalkDir {\n     cur: Option<ReadDir>,\n     stack: Vec<io::Result<ReadDir>>,\n@@ -156,8 +158,7 @@ pub struct FileType(fs_imp::FileType);\n /// A builder used to create directories in various manners.\n ///\n /// This builder also supports platform-specific options.\n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n-           issue = \"27710\")]\n+#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub struct DirBuilder {\n     inner: fs_imp::DirBuilder,\n     recursive: bool,\n@@ -1132,16 +1133,23 @@ pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n                      may change and this may end up accounting for files such \\\n                      as symlinks differently\",\n            issue = \"27707\")]\n+#[rustc_deprecated(reason = \"superceded by the walkdir crate\",\n+                   since = \"1.6.0\")]\n+#[allow(deprecated)]\n pub fn walk_dir<P: AsRef<Path>>(path: P) -> io::Result<WalkDir> {\n     _walk_dir(path.as_ref())\n }\n \n+#[allow(deprecated)]\n fn _walk_dir(path: &Path) -> io::Result<WalkDir> {\n     let start = try!(read_dir(path));\n     Ok(WalkDir { cur: Some(start), stack: Vec::new() })\n }\n \n #[unstable(feature = \"fs_walk\", issue = \"27707\")]\n+#[rustc_deprecated(reason = \"superceded by the walkdir crate\",\n+                   since = \"1.6.0\")]\n+#[allow(deprecated)]\n impl Iterator for WalkDir {\n     type Item = io::Result<DirEntry>;\n \n@@ -1275,11 +1283,10 @@ pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)\n     fs_imp::set_perm(path.as_ref(), perm.0)\n }\n \n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n-           issue = \"27710\")]\n impl DirBuilder {\n     /// Creates a new set of options with default mode/security settings for all\n     /// platforms and also non-recursive.\n+    #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n     pub fn new() -> DirBuilder {\n         DirBuilder {\n             inner: fs_imp::DirBuilder::new(),\n@@ -1292,6 +1299,7 @@ impl DirBuilder {\n     /// permissions settings.\n     ///\n     /// This option defaults to `false`\n+    #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n     pub fn recursive(&mut self, recursive: bool) -> &mut Self {\n         self.recursive = recursive;\n         self\n@@ -1303,7 +1311,6 @@ impl DirBuilder {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(dir_builder)]\n     /// use std::fs::{self, DirBuilder};\n     ///\n     /// let path = \"/tmp/foo/bar/baz\";\n@@ -1313,6 +1320,7 @@ impl DirBuilder {\n     ///\n     /// assert!(fs::metadata(path).unwrap().is_dir());\n     /// ```\n+    #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n     pub fn create<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n         self._create(path.as_ref())\n     }"}, {"sha": "de09451e7c0f61c9599268fd58fb0935ddcdca26", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -13,7 +13,6 @@ use io::prelude::*;\n \n use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n-use slice;\n \n /// A `Cursor` wraps another type and provides it with a\n /// [`Seek`](trait.Seek.html) implementation.\n@@ -255,8 +254,8 @@ impl Write for Cursor<Vec<u8>> {\n         // there (left), and what will be appended on the end (right)\n         let space = self.inner.len() - pos as usize;\n         let (left, right) = buf.split_at(cmp::min(space, buf.len()));\n-        slice::bytes::copy_memory(left, &mut self.inner[(pos as usize)..]);\n-        self.inner.push_all(right);\n+        self.inner[(pos as usize)..].clone_from_slice(left);\n+        self.inner.extend_from_slice(right);\n \n         // Bump us forward\n         self.set_position(pos + buf.len() as u64);"}, {"sha": "4af9596d6d0e91b8b0ca1a724a80f7a0e61ea6bf", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -79,6 +79,7 @@ struct Custom {\n /// exhaustively match against it.\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n pub enum ErrorKind {\n     /// An entity was not found, often a file.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -155,9 +156,20 @@ pub enum ErrorKind {\n     /// This typically means that an operation could only succeed if it read a\n     /// particular number of bytes but only a smaller number of bytes could be\n     /// read.\n-    #[unstable(feature = \"read_exact\", reason = \"recently added\", issue = \"27585\")]\n+    #[unstable(feature = \"read_exact_old\", reason = \"recently added\",\n+               issue = \"0\")]\n+    #[rustc_deprecated(since = \"1.6.0\", reason = \"renamed to UnexpectedEof\")]\n     UnexpectedEOF,\n \n+    /// An error returned when an operation could not be completed because an\n+    /// \"end of file\" was reached prematurely.\n+    ///\n+    /// This typically means that an operation could only succeed if it read a\n+    /// particular number of bytes but only a smaller number of bytes could be\n+    /// read.\n+    #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n+    UnexpectedEof,\n+\n     /// Any I/O error not part of this list.\n     #[unstable(feature = \"io_error_internals\",\n                reason = \"better expressed through extensible enums that this \\"}, {"sha": "95f630c965898c90c3f33fc7256f28b40815cc0f", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -13,7 +13,6 @@ use cmp;\n use io::{self, SeekFrom, Read, Write, Seek, BufRead, Error, ErrorKind};\n use fmt;\n use mem;\n-use slice;\n use string::String;\n use vec::Vec;\n \n@@ -157,18 +156,19 @@ impl<'a> Read for &'a [u8] {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let amt = cmp::min(buf.len(), self.len());\n         let (a, b) = self.split_at(amt);\n-        slice::bytes::copy_memory(a, buf);\n+        buf.clone_from_slice(a);\n         *self = b;\n         Ok(amt)\n     }\n \n     #[inline]\n     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n         if buf.len() > self.len() {\n-            return Err(Error::new(ErrorKind::UnexpectedEOF, \"failed to fill whole buffer\"));\n+            return Err(Error::new(ErrorKind::UnexpectedEof,\n+                                  \"failed to fill whole buffer\"));\n         }\n         let (a, b) = self.split_at(buf.len());\n-        slice::bytes::copy_memory(a, buf);\n+        buf.clone_from_slice(a);\n         *self = b;\n         Ok(())\n     }\n@@ -189,7 +189,7 @@ impl<'a> Write for &'a mut [u8] {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let amt = cmp::min(data.len(), self.len());\n         let (a, b) = mem::replace(self, &mut []).split_at_mut(amt);\n-        slice::bytes::copy_memory(&data[..amt], a);\n+        a.clone_from_slice(&data[..amt]);\n         *self = b;\n         Ok(amt)\n     }\n@@ -211,13 +211,13 @@ impl<'a> Write for &'a mut [u8] {\n impl Write for Vec<u8> {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        self.push_all(buf);\n+        self.extend_from_slice(buf);\n         Ok(buf.len())\n     }\n \n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n-        self.push_all(buf);\n+        self.extend_from_slice(buf);\n         Ok(())\n     }\n "}, {"sha": "e957297bf6235d8d7a061e6c9dde3ae762e37565", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -593,7 +593,6 @@ pub trait Read {\n     /// [file]: ../std/fs/struct.File.html\n     ///\n     /// ```\n-    /// #![feature(read_exact)]\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n@@ -607,7 +606,7 @@ pub trait Read {\n     /// # Ok(())\n     /// # }\n     /// ```\n-    #[unstable(feature = \"read_exact\", reason = \"recently added\", issue = \"27585\")]\n+    #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n     fn read_exact(&mut self, mut buf: &mut [u8]) -> Result<()> {\n         while !buf.is_empty() {\n             match self.read(buf) {\n@@ -618,7 +617,7 @@ pub trait Read {\n             }\n         }\n         if !buf.is_empty() {\n-            Err(Error::new(ErrorKind::UnexpectedEOF,\n+            Err(Error::new(ErrorKind::UnexpectedEof,\n                            \"failed to fill whole buffer\"))\n         } else {\n             Ok(())\n@@ -838,6 +837,10 @@ pub trait Read {\n                                          of where errors happen is currently \\\n                                          unclear and may change\",\n                issue = \"27802\")]\n+    #[rustc_deprecated(reason = \"error handling semantics unclear and \\\n+                                 don't seem to have an ergonomic resolution\",\n+                       since = \"1.6.0\")]\n+    #[allow(deprecated)]\n     fn tee<W: Write>(self, out: W) -> Tee<Self, W> where Self: Sized {\n         Tee { reader: self, writer: out }\n     }\n@@ -1101,6 +1104,10 @@ pub trait Write {\n                                          of where errors happen is currently \\\n                                          unclear and may change\",\n                issue = \"27802\")]\n+    #[rustc_deprecated(reason = \"error handling semantics unclear and \\\n+                                 don't seem to have an ergonomic resolution\",\n+                       since = \"1.6.0\")]\n+    #[allow(deprecated)]\n     fn broadcast<W: Write>(self, other: W) -> Broadcast<Self, W>\n         where Self: Sized\n     {\n@@ -1189,11 +1196,11 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n             };\n             match available.iter().position(|x| *x == delim) {\n                 Some(i) => {\n-                    buf.push_all(&available[..i + 1]);\n+                    buf.extend_from_slice(&available[..i + 1]);\n                     (true, i + 1)\n                 }\n                 None => {\n-                    buf.push_all(available);\n+                    buf.extend_from_slice(available);\n                     (false, available.len())\n                 }\n             }\n@@ -1484,13 +1491,20 @@ pub trait BufRead: Read {\n /// [broadcast]: trait.Write.html#method.broadcast\n #[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\",\n            issue = \"27802\")]\n+#[rustc_deprecated(reason = \"error handling semantics unclear and \\\n+                             don't seem to have an ergonomic resolution\",\n+                   since = \"1.6.0\")]\n pub struct Broadcast<T, U> {\n     first: T,\n     second: U,\n }\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\",\n            issue = \"27802\")]\n+#[rustc_deprecated(reason = \"error handling semantics unclear and \\\n+                             don't seem to have an ergonomic resolution\",\n+                   since = \"1.6.0\")]\n+#[allow(deprecated)]\n impl<T: Write, U: Write> Write for Broadcast<T, U> {\n     fn write(&mut self, data: &[u8]) -> Result<usize> {\n         let n = try!(self.first.write(data));\n@@ -1593,13 +1607,20 @@ impl<T: BufRead> BufRead for Take<T> {\n /// [tee]: trait.Read.html#method.tee\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\",\n            issue = \"27802\")]\n+#[rustc_deprecated(reason = \"error handling semantics unclear and \\\n+                             don't seem to have an ergonomic resolution\",\n+                   since = \"1.6.0\")]\n pub struct Tee<R, W> {\n     reader: R,\n     writer: W,\n }\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\",\n            issue = \"27802\")]\n+#[rustc_deprecated(reason = \"error handling semantics unclear and \\\n+                             don't seem to have an ergonomic resolution\",\n+                   since = \"1.6.0\")]\n+#[allow(deprecated)]\n impl<R: Read, W: Write> Read for Tee<R, W> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         let n = try!(self.reader.read(buf));\n@@ -1907,15 +1928,15 @@ mod tests {\n \n         let mut c = Cursor::new(&b\"\"[..]);\n         assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n-                   io::ErrorKind::UnexpectedEOF);\n+                   io::ErrorKind::UnexpectedEof);\n \n         let mut c = Cursor::new(&b\"123\"[..]).chain(Cursor::new(&b\"456789\"[..]));\n         c.read_exact(&mut buf).unwrap();\n         assert_eq!(&buf, b\"1234\");\n         c.read_exact(&mut buf).unwrap();\n         assert_eq!(&buf, b\"5678\");\n         assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n-                   io::ErrorKind::UnexpectedEOF);\n+                   io::ErrorKind::UnexpectedEof);\n     }\n \n     #[test]\n@@ -1924,11 +1945,11 @@ mod tests {\n \n         let mut c = &b\"\"[..];\n         assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n-                   io::ErrorKind::UnexpectedEOF);\n+                   io::ErrorKind::UnexpectedEof);\n \n         let mut c = &b\"123\"[..];\n         assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n-                   io::ErrorKind::UnexpectedEOF);\n+                   io::ErrorKind::UnexpectedEof);\n         // make sure the optimized (early returning) method is being used\n         assert_eq!(&buf, &[0; 4]);\n "}, {"sha": "0385dff65d14aef6bf33b5ca5952707169dd96cd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -217,6 +217,7 @@\n #![cfg_attr(stage0, allow(improper_ctypes))]\n \n #![cfg_attr(stage0, feature(rustc_attrs))]\n+#![cfg_attr(stage0, feature(no_std))]\n #![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n@@ -230,12 +231,10 @@\n #![feature(collections)]\n #![feature(collections_bound)]\n #![feature(const_fn)]\n-#![feature(core)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n #![feature(core_simd)]\n #![feature(decode_utf16)]\n-#![feature(drain)]\n #![feature(drop_in_place)]\n #![feature(dropck_parametricity)]\n #![feature(float_extras)]\n@@ -249,7 +248,6 @@\n #![feature(link_args)]\n #![feature(linkage)]\n #![feature(macro_reexport)]\n-#![feature(no_std)]\n #![feature(oom)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n@@ -288,7 +286,7 @@\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n // add a new crate name so we can attach the reexports to it.\n #[macro_reexport(assert, assert_eq, debug_assert, debug_assert_eq,\n-                 unreachable, unimplemented, write, writeln)]\n+                 unreachable, unimplemented, write, writeln, try)]\n extern crate core as __core;\n \n #[macro_use]"}, {"sha": "0917346213f4aa936eb9cdb5870639426422942d", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -120,46 +120,6 @@ macro_rules! println {\n     ($fmt:expr, $($arg:tt)*) => (print!(concat!($fmt, \"\\n\"), $($arg)*));\n }\n \n-/// Helper macro for unwrapping `Result` values while returning early with an\n-/// error if the value of the expression is `Err`. Can only be used in\n-/// functions that return `Result` because of the early return of `Err` that\n-/// it provides.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::io;\n-/// use std::fs::File;\n-/// use std::io::prelude::*;\n-///\n-/// fn write_to_file_using_try() -> Result<(), io::Error> {\n-///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n-///     try!(file.write_all(b\"This is a list of my best friends.\"));\n-///     println!(\"I wrote to the file\");\n-///     Ok(())\n-/// }\n-/// // This is equivalent to:\n-/// fn write_to_file_using_match() -> Result<(), io::Error> {\n-///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n-///     match file.write_all(b\"This is a list of my best friends.\") {\n-///         Ok(_) => (),\n-///         Err(e) => return Err(e),\n-///     }\n-///     println!(\"I wrote to the file\");\n-///     Ok(())\n-/// }\n-/// ```\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-macro_rules! try {\n-    ($expr:expr) => (match $expr {\n-        $crate::result::Result::Ok(val) => val,\n-        $crate::result::Result::Err(err) => {\n-            return $crate::result::Result::Err($crate::convert::From::from(err))\n-        }\n-    })\n-}\n-\n /// A macro to select an event from a number of receivers.\n ///\n /// This macro is used to wait for the first event to occur on a number of"}, {"sha": "9c4e2b1a54c30c17664bb5e1f18aa553ef89d271", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -14,7 +14,9 @@ use fmt;\n use hash;\n use io;\n use mem;\n-use net::{lookup_host, ntoh, hton, IpAddr, Ipv4Addr, Ipv6Addr};\n+use net::{lookup_host, ntoh, hton, Ipv4Addr, Ipv6Addr};\n+#[allow(deprecated)]\n+use net::IpAddr;\n use option;\n use sys::net::netc as c;\n use sys_common::{FromInner, AsInner, IntoInner};\n@@ -49,6 +51,9 @@ pub struct SocketAddrV6 { inner: c::sockaddr_in6 }\n impl SocketAddr {\n     /// Creates a new socket address from the (ip, port) pair.\n     #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n+    #[rustc_deprecated(reason = \"ip type too small a type to pull its weight\",\n+                       since = \"1.6.0\")]\n+    #[allow(deprecated)]\n     pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -58,6 +63,9 @@ impl SocketAddr {\n \n     /// Returns the IP address associated with this socket address.\n     #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n+    #[rustc_deprecated(reason = \"too small a type to pull its weight\",\n+                       since = \"1.6.0\")]\n+    #[allow(deprecated)]\n     pub fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n@@ -351,6 +359,7 @@ impl ToSocketAddrs for SocketAddrV6 {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl ToSocketAddrs for (IpAddr, u16) {\n     type Iter = option::IntoIter<SocketAddr>;\n     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {"}, {"sha": "ea32ab952827c8b61339121c63b84f1afcf0d15e", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -25,7 +25,10 @@ use sys_common::{AsInner, FromInner};\n \n /// An IP address, either an IPv4 or IPv6 address.\n #[unstable(feature = \"ip_addr\", reason = \"recent addition\", issue = \"27801\")]\n+#[rustc_deprecated(reason = \"too small a type to pull its weight\",\n+                   since = \"1.6.0\")]\n #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]\n+#[allow(deprecated)]\n pub enum IpAddr {\n     /// Representation of an IPv4 address.\n     V4(Ipv4Addr),\n@@ -180,6 +183,7 @@ impl Ipv4Addr {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl fmt::Display for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "6bbbabfc2690af806f30f453217a49f9d98b891d", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -18,6 +18,7 @@ use io::{self, Error, ErrorKind};\n use sys_common::net as net_imp;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n@@ -136,6 +137,9 @@ pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n /// cannot be resolved, it is returned in string format.\n #[unstable(feature = \"lookup_addr\", reason = \"recent addition\",\n            issue = \"27705\")]\n+#[rustc_deprecated(reason = \"ipaddr type is being deprecated\",\n+                   since = \"1.6.0\")]\n+#[allow(deprecated)]\n pub fn lookup_addr(addr: &IpAddr) -> io::Result<String> {\n     net_imp::lookup_addr(addr)\n }"}, {"sha": "79a269ff87c20689d0f6330652c7cdc1b093aa08", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -17,6 +17,7 @@ use prelude::v1::*;\n \n use error::Error;\n use fmt;\n+#[allow(deprecated)]\n use net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};\n use str::FromStr;\n \n@@ -261,6 +262,7 @@ impl<'a> Parser<'a> {\n         self.read_atomically(|p| p.read_ipv6_addr_impl())\n     }\n \n+    #[allow(deprecated)]\n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n         let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr().map(IpAddr::V4);\n         let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr().map(IpAddr::V6);\n@@ -306,6 +308,7 @@ impl<'a> Parser<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl FromStr for IpAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {"}, {"sha": "c87becd741eb1a08431684b3476ab7c3b6c4498f", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -131,6 +131,7 @@ impl f32 {\n                issue = \"27736\")]\n     #[rustc_deprecated(since = \"1.4.0\",\n                  reason = \"unclear how useful or correct this is\")]\n+    #[allow(deprecated)]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f32, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }\n@@ -424,7 +425,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_sign_positive(self) -> bool { num::Float::is_positive(self) }\n+    pub fn is_sign_positive(self) -> bool { num::Float::is_sign_positive(self) }\n \n     /// Returns `true` if `self`'s sign is negative, including `-0.0`\n     /// and `NEG_INFINITY`.\n@@ -443,7 +444,7 @@ impl f32 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_sign_negative(self) -> bool { num::Float::is_negative(self) }\n+    pub fn is_sign_negative(self) -> bool { num::Float::is_sign_negative(self) }\n \n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error. This produces a more accurate result with better performance than"}, {"sha": "6b9c753443b3c317462692de3f0df647405cd1ac", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -88,6 +88,7 @@ impl f64 {\n                issue = \"27736\")]\n     #[rustc_deprecated(since = \"1.4.0\",\n                  reason = \"unclear how useful or correct this is\")]\n+    #[allow(deprecated)]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f64, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }\n@@ -352,12 +353,12 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_sign_positive(self) -> bool { num::Float::is_positive(self) }\n+    pub fn is_sign_positive(self) -> bool { num::Float::is_sign_positive(self) }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_positive\")]\n     #[inline]\n-    pub fn is_positive(self) -> bool { num::Float::is_positive(self) }\n+    pub fn is_positive(self) -> bool { num::Float::is_sign_positive(self) }\n \n     /// Returns `true` if `self`'s sign is negative, including `-0.0`\n     /// and `NEG_INFINITY`.\n@@ -377,12 +378,12 @@ impl f64 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_sign_negative(self) -> bool { num::Float::is_negative(self) }\n+    pub fn is_sign_negative(self) -> bool { num::Float::is_sign_negative(self) }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"renamed to is_sign_negative\")]\n     #[inline]\n-    pub fn is_negative(self) -> bool { num::Float::is_negative(self) }\n+    pub fn is_negative(self) -> bool { num::Float::is_sign_negative(self) }\n \n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error. This produces a more accurate result with better performance than"}, {"sha": "d0b9cc4c4602fb9d3acc78d4480e5b9a5b5a6dd0", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -777,6 +777,8 @@ impl<'a> Components<'a> {\n \n     /// Examine the next component without consuming it.\n     #[unstable(feature = \"path_components_peek\", issue = \"27727\")]\n+    #[rustc_deprecated(reason = \"use peekable() instead\",\n+                       since = \"1.6.0\")]\n     pub fn peek(&self) -> Option<Component<'a>> {\n         self.clone().next()\n     }"}, {"sha": "6b20e51967d882a25b7bede01575bc79f3d26118", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -254,7 +254,7 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead.\n-    #[unstable(feature = \"mutex_into_inner\", reason = \"recently added\", issue = \"28968\")]\n+    #[stable(feature = \"mutex_into_inner\", since = \"1.6.0\")]\n     pub fn into_inner(self) -> LockResult<T> where T: Sized {\n         // We know statically that there are no outstanding references to\n         // `self` so there's no need to lock the inner StaticMutex.\n@@ -284,7 +284,7 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead.\n-    #[unstable(feature = \"mutex_get_mut\", reason = \"recently added\", issue = \"28968\")]\n+    #[stable(feature = \"mutex_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n         // We know statically that there are no other references to `self`, so\n         // there's no need to lock the inner StaticMutex."}, {"sha": "3dbef4354813629ac6b0d42768db2bdd8b77c3f2", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -275,7 +275,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n     /// error will only be returned if the lock would have otherwise been\n     /// acquired.\n-    #[unstable(feature = \"rwlock_into_inner\", reason = \"recently added\", issue = \"28968\")]\n+    #[stable(feature = \"rwlock_into_inner\", since = \"1.6.0\")]\n     pub fn into_inner(self) -> LockResult<T> where T: Sized {\n         // We know statically that there are no outstanding references to\n         // `self` so there's no need to lock the inner StaticRwLock.\n@@ -307,7 +307,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n     /// error will only be returned if the lock would have otherwise been\n     /// acquired.\n-    #[unstable(feature = \"rwlock_get_mut\", reason = \"recently added\", issue = \"28968\")]\n+    #[stable(feature = \"rwlock_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n         // We know statically that there are no other references to `self`, so\n         // there's no need to lock the inner StaticRwLock."}, {"sha": "f8463388384f529bff2e98c25611c39d1188cba4", "filename": "src/libstd/sys/common/gnu/libbacktrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -134,9 +134,9 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n             } else {\n                 None\n             };\n-        let filename = match selfname.as_ref().and_then(|s| s.as_os_str().to_bytes()) {\n+        let filename = match selfname.as_ref().and_then(|s| s.to_str()) {\n             Some(path) => {\n-                let bytes = path;\n+                let bytes = path.as_bytes();\n                 if bytes.len() < LAST_FILENAME.len() {\n                     let i = bytes.iter();\n                     for (slot, val) in LAST_FILENAME.iter_mut().zip(i) {"}, {"sha": "7e05895b2ccbddd31b73c6e2d2ebd395da5906a7", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -15,6 +15,7 @@ use fmt;\n use io::{self, Error, ErrorKind};\n use libc::{c_int, c_char, c_void};\n use mem;\n+#[allow(deprecated)]\n use net::{SocketAddr, Shutdown, IpAddr};\n use ptr;\n use str::from_utf8;\n@@ -129,6 +130,7 @@ pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n // lookup_addr\n ////////////////////////////////////////////////////////////////////////////////\n \n+#[allow(deprecated)]\n pub fn lookup_addr(addr: &IpAddr) -> io::Result<String> {\n     init();\n "}, {"sha": "2e092d5f770c52c250ad4c52b9214fedd79b98e9", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -243,7 +243,7 @@ impl Wtf8Buf {\n     /// Append a UTF-8 slice at the end of the string.\n     #[inline]\n     pub fn push_str(&mut self, other: &str) {\n-        self.bytes.push_all(other.as_bytes())\n+        self.bytes.extend_from_slice(other.as_bytes())\n     }\n \n     /// Append a WTF-8 slice at the end of the string.\n@@ -262,9 +262,9 @@ impl Wtf8Buf {\n                 // 4 bytes for the supplementary code point\n                 self.bytes.reserve(4 + other_without_trail_surrogate.len());\n                 self.push_char(decode_surrogate_pair(lead, trail));\n-                self.bytes.push_all(other_without_trail_surrogate);\n+                self.bytes.extend_from_slice(other_without_trail_surrogate);\n             }\n-            _ => self.bytes.push_all(&other.bytes)\n+            _ => self.bytes.extend_from_slice(&other.bytes)\n         }\n     }\n \n@@ -331,10 +331,8 @@ impl Wtf8Buf {\n             match self.next_surrogate(pos) {\n                 Some((surrogate_pos, _)) => {\n                     pos = surrogate_pos + 3;\n-                    slice::bytes::copy_memory(\n-                        UTF8_REPLACEMENT_CHARACTER,\n-                        &mut self.bytes[surrogate_pos .. pos],\n-                    );\n+                    self.bytes[surrogate_pos..pos]\n+                        .clone_from_slice(UTF8_REPLACEMENT_CHARACTER);\n                 },\n                 None => return unsafe { String::from_utf8_unchecked(self.bytes) }\n             }\n@@ -493,18 +491,18 @@ impl Wtf8 {\n         };\n         let wtf8_bytes = &self.bytes;\n         let mut utf8_bytes = Vec::with_capacity(self.len());\n-        utf8_bytes.push_all(&wtf8_bytes[..surrogate_pos]);\n-        utf8_bytes.push_all(UTF8_REPLACEMENT_CHARACTER);\n+        utf8_bytes.extend_from_slice(&wtf8_bytes[..surrogate_pos]);\n+        utf8_bytes.extend_from_slice(UTF8_REPLACEMENT_CHARACTER);\n         let mut pos = surrogate_pos + 3;\n         loop {\n             match self.next_surrogate(pos) {\n                 Some((surrogate_pos, _)) => {\n-                    utf8_bytes.push_all(&wtf8_bytes[pos .. surrogate_pos]);\n-                    utf8_bytes.push_all(UTF8_REPLACEMENT_CHARACTER);\n+                    utf8_bytes.extend_from_slice(&wtf8_bytes[pos .. surrogate_pos]);\n+                    utf8_bytes.extend_from_slice(UTF8_REPLACEMENT_CHARACTER);\n                     pos = surrogate_pos + 3;\n                 },\n                 None => {\n-                    utf8_bytes.push_all(&wtf8_bytes[pos..]);\n+                    utf8_bytes.extend_from_slice(&wtf8_bytes[pos..]);\n                     return Cow::Owned(unsafe { String::from_utf8_unchecked(utf8_bytes) })\n                 }\n             }"}, {"sha": "16e1578296dfe99dfddee4a5ebefa636e968294c", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -246,17 +246,16 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n     sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n-           issue = \"27710\")]\n+#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n /// An extension trait for `fs::DirBuilder` for unix-specific options.\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to\n     /// 0o777.\n+    #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n     fn mode(&mut self, mode: raw::mode_t) -> &mut Self;\n }\n \n-#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n-           issue = \"27710\")]\n+#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n impl DirBuilderExt for fs::DirBuilder {\n     fn mode(&mut self, mode: raw::mode_t) -> &mut fs::DirBuilder {\n         self.as_inner_mut().set_mode(mode);"}, {"sha": "8ea8f0c6c771b4fb2b4ca01c5eff7c54a74bdfb1", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -355,8 +355,7 @@ impl DirBuilder {\n }\n \n fn cstr(path: &Path) -> io::Result<CString> {\n-    path.as_os_str().to_cstring().ok_or(\n-        io::Error::new(io::ErrorKind::InvalidInput, \"path contained a null\"))\n+    Ok(try!(CString::new(path.as_os_str().as_bytes())))\n }\n \n impl FromInner<c_int> for File {"}, {"sha": "c2bf0651cfff455a3250e4683a733180d5d43b71", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -149,7 +149,7 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n         if path.contains(&sep) {\n             return Err(JoinPathsError)\n         }\n-        joined.push_all(path);\n+        joined.extend_from_slice(path);\n     }\n     Ok(OsStringExt::from_vec(joined))\n }"}, {"sha": "0524df218a14c328b6a4d3e44ad1c052356569e1", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -53,7 +53,7 @@ impl Buf {\n     }\n \n     pub fn push_slice(&mut self, s: &Slice) {\n-        self.inner.push_all(&s.inner)\n+        self.inner.extend_from_slice(&s.inner)\n     }\n }\n "}, {"sha": "407fcb0a1b8f176eecc3c945cddb79d251907141", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -43,7 +43,7 @@ pub struct Command {\n impl Command {\n     pub fn new(program: &OsStr) -> Command {\n         Command {\n-            program: program.to_cstring().unwrap(),\n+            program: os2c(program),\n             args: Vec::new(),\n             env: None,\n             cwd: None,\n@@ -54,10 +54,10 @@ impl Command {\n     }\n \n     pub fn arg(&mut self, arg: &OsStr) {\n-        self.args.push(arg.to_cstring().unwrap())\n+        self.args.push(os2c(arg));\n     }\n     pub fn args<'a, I: Iterator<Item = &'a OsStr>>(&mut self, args: I) {\n-        self.args.extend(args.map(|s| s.to_cstring().unwrap()))\n+        self.args.extend(args.map(os2c));\n     }\n     fn init_env_map(&mut self) {\n         if self.env.is_none() {\n@@ -76,10 +76,14 @@ impl Command {\n         self.env = Some(HashMap::new())\n     }\n     pub fn cwd(&mut self, dir: &OsStr) {\n-        self.cwd = Some(dir.to_cstring().unwrap())\n+        self.cwd = Some(os2c(dir));\n     }\n }\n \n+fn os2c(s: &OsStr) -> CString {\n+    CString::new(s.as_bytes()).unwrap()\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Processes\n ////////////////////////////////////////////////////////////////////////////////\n@@ -430,9 +434,9 @@ fn make_envp(env: Option<&HashMap<OsString, OsString>>)\n \n         for pair in env {\n             let mut kv = Vec::new();\n-            kv.push_all(pair.0.as_bytes());\n+            kv.extend_from_slice(pair.0.as_bytes());\n             kv.push('=' as u8);\n-            kv.push_all(pair.1.as_bytes());\n+            kv.extend_from_slice(pair.1.as_bytes());\n             kv.push(0); // terminating null\n             tmps.push(kv);\n         }"}, {"sha": "48c9b70dce436dcbcd6a7250b7dd372cc5ad7a1e", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -196,10 +196,10 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n             return Err(JoinPathsError)\n         } else if v.contains(&sep) {\n             joined.push(b'\"' as u16);\n-            joined.push_all(&v[..]);\n+            joined.extend_from_slice(&v[..]);\n             joined.push(b'\"' as u16);\n         } else {\n-            joined.push_all(&v[..]);\n+            joined.extend_from_slice(&v[..]);\n         }\n     }\n "}, {"sha": "0981a8c4a5bf33198d403aacf809a19f6e197c73", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -66,6 +66,8 @@ impl Duration {\n                          wait for a more general \\\"moment in time\\\" \\\n                          abstraction\",\n                issue = \"27799\")]\n+    #[rustc_deprecated(reason = \"use std::time::Instant instead\",\n+                       since = \"1.6.0\")]\n     pub fn span<F>(f: F) -> Duration where F: FnOnce() {\n         let start = Instant::now();\n         f();"}, {"sha": "496f6a429a31fd4cf4f09c3478b9f1c78db73bf1", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -178,7 +178,7 @@ pub mod rt {\n                     let mut v = vec![];\n                     for (i, x) in self.iter().enumerate() {\n                         if i > 0 {\n-                            v.push_all(&$sep);\n+                            v.extend_from_slice(&$sep);\n                         }\n                         v.extend(x.to_tokens(cx));\n                     }"}, {"sha": "c456b7dc8b91c333ff121a235698f59a06859db6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -132,7 +132,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"unmarked_api\", \"1.0.0\", None, Active),\n \n     // Allows using #![no_std]\n-    (\"no_std\", \"1.0.0\", Some(27701), Active),\n+    (\"no_std\", \"1.0.0\", None, Accepted),\n \n     // Allows using #![no_core]\n     (\"no_core\", \"1.3.0\", Some(29639), Active),\n@@ -286,8 +286,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"plugin\", CrateLevel, Gated(\"plugin\",\n                                  \"compiler plugins are experimental \\\n                                   and possibly buggy\")),\n-    (\"no_std\", CrateLevel, Gated(\"no_std\",\n-                                 \"no_std is experimental\")),\n+    (\"no_std\", CrateLevel, Ungated),\n     (\"no_core\", CrateLevel, Gated(\"no_core\",\n                                   \"no_core is experimental\")),\n     (\"lang\", Normal, Gated(\"lang_items\","}, {"sha": "4498120a78f79f9e9a941ae2518a82b871f56aa5", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -29,15 +29,13 @@\n #![cfg_attr(stage0, feature(rustc_attrs))]\n #![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(associated_consts)]\n-#![feature(drain)]\n #![feature(filling_drop)]\n #![feature(libc)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(str_char)]\n #![feature(str_escape)]\n #![feature(unicode)]\n-#![feature(vec_push_all)]\n \n extern crate fmt_macros;\n extern crate serialize;"}, {"sha": "f7105951296724c550c2733c7571fb4d025ceee4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -120,17 +120,15 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n         // However we don't want these attributes in the AST because\n         // of the feature gate, so we fake them up here.\n \n-        let no_std_meta = attr::mk_word_item(InternedString::new(\"no_std\"));\n+        // #![feature(prelude_import)]\n         let prelude_import_meta = attr::mk_word_item(InternedString::new(\"prelude_import\"));\n-\n-        // #![feature(no_std)]\n-        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n-                                            attr::mk_list_item(InternedString::new(\"feature\"),\n-                                                               vec![no_std_meta.clone(),\n-                                                                    prelude_import_meta]));\n+        let list = attr::mk_list_item(InternedString::new(\"feature\"),\n+                                      vec![prelude_import_meta]);\n+        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(), list);\n         try!(s.print_attribute(&fake_attr));\n \n         // #![no_std]\n+        let no_std_meta = attr::mk_word_item(InternedString::new(\"no_std\"));\n         let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(), no_std_meta);\n         try!(s.print_attribute(&fake_attr));\n     }"}, {"sha": "7ffe567ac83c135a82c54beefb5d1a2424dde1c6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -37,13 +37,12 @@\n \n #![feature(asm)]\n #![feature(box_syntax)]\n-#![feature(duration_span)]\n #![feature(fnbox)]\n-#![feature(iter_cmp)]\n #![feature(libc)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n+#![feature(time2)]\n \n extern crate getopts;\n extern crate serialize;\n@@ -79,7 +78,7 @@ use std::path::PathBuf;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n use std::thread;\n-use std::time::Duration;\n+use std::time::{Instant, Duration};\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n@@ -714,7 +713,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn> ) -> io::Res\n             PadOnRight => t.desc.name.as_slice().len(),\n         }\n     }\n-    match tests.iter().max_by(|t|len_if_padded(*t)) {\n+    match tests.iter().max_by_key(|t|len_if_padded(*t)) {\n         Some(t) => {\n             let n = t.desc.name.as_slice();\n             st.max_name_len = n.len();\n@@ -1121,12 +1120,12 @@ pub fn black_box<T>(dummy: T) -> T { dummy }\n impl Bencher {\n     /// Callback for benchmark functions to run in their body.\n     pub fn iter<T, F>(&mut self, mut inner: F) where F: FnMut() -> T {\n-        self.dur = Duration::span(|| {\n-            let k = self.iterations;\n-            for _ in 0..k {\n-                black_box(inner());\n-            }\n-        });\n+        let start = Instant::now();\n+        let k = self.iterations;\n+        for _ in 0..k {\n+            black_box(inner());\n+        }\n+        self.dur = start.elapsed();\n     }\n \n     pub fn ns_elapsed(&mut self) -> u64 {\n@@ -1169,29 +1168,24 @@ impl Bencher {\n         let mut total_run = Duration::new(0, 0);\n         let samples : &mut [f64] = &mut [0.0_f64; 50];\n         loop {\n-            let mut summ = None;\n-            let mut summ5 = None;\n+            let loop_start = Instant::now();\n \n-            let loop_run = Duration::span(|| {\n-\n-                for p in &mut *samples {\n-                    self.bench_n(n, |x| f(x));\n-                    *p = self.ns_per_iter() as f64;\n-                };\n+            for p in &mut *samples {\n+                self.bench_n(n, |x| f(x));\n+                *p = self.ns_per_iter() as f64;\n+            };\n \n-                stats::winsorize(samples, 5.0);\n-                summ = Some(stats::Summary::new(samples));\n+            stats::winsorize(samples, 5.0);\n+            let summ = stats::Summary::new(samples);\n \n-                for p in &mut *samples {\n-                    self.bench_n(5 * n, |x| f(x));\n-                    *p = self.ns_per_iter() as f64;\n-                };\n+            for p in &mut *samples {\n+                self.bench_n(5 * n, |x| f(x));\n+                *p = self.ns_per_iter() as f64;\n+            };\n \n-                stats::winsorize(samples, 5.0);\n-                summ5 = Some(stats::Summary::new(samples));\n-            });\n-            let summ = summ.unwrap();\n-            let summ5 = summ5.unwrap();\n+            stats::winsorize(samples, 5.0);\n+            let summ5 = stats::Summary::new(samples);\n+            let loop_run = loop_start.elapsed();\n \n             // If we've run for 100ms and seem to have converged to a\n             // stable median."}, {"sha": "a81eac279d062bc576493c0d16fa73771c4e2e5a", "filename": "src/rtstartup/rsbegin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -22,7 +22,7 @@\n // object (usually called `crtX.o), which then invokes initialization callbacks\n // of other runtime components (registered via yet another special image section).\n \n-#![feature(no_std)]\n+#![cfg_attr(stage0, feature(no_std))]\n \n #![crate_type=\"rlib\"]\n #![no_std]"}, {"sha": "e3b691ce2f7dbbfd4be19ac0000e66cfbe4e36ab", "filename": "src/rtstartup/rsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsend.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // See rsbegin.rs for details.\n \n-#![feature(no_std)]\n+#![cfg_attr(stage0, feature(no_std))]\n \n #![crate_type=\"rlib\"]\n #![no_std]"}, {"sha": "a1d21db8f4d5d976ec3945ddc40a837852e046cb", "filename": "src/test/auxiliary/allocator-dummy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator-dummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator-dummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fallocator-dummy.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(allocator, no_std, core, core_intrinsics, libc)]\n+#![feature(allocator, core_intrinsics, libc)]\n #![allocator]\n #![crate_type = \"rlib\"]\n #![no_std]"}, {"sha": "b24784838d00bb39fe94a9cbf2ebb36ed5dfbc1e", "filename": "src/test/auxiliary/allocator1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fallocator1.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(allocator, no_std, core)]\n+#![feature(allocator)]\n #![allocator]\n #![crate_type = \"rlib\"]\n #![no_std]"}, {"sha": "b24784838d00bb39fe94a9cbf2ebb36ed5dfbc1e", "filename": "src/test/auxiliary/allocator2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fallocator2.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(allocator, no_std, core)]\n+#![feature(allocator)]\n #![allocator]\n #![crate_type = \"rlib\"]\n #![no_std]"}, {"sha": "d3eb1f6f7abacf5cbcc190c9f70f2bd1b3830d88", "filename": "src/test/auxiliary/allocator3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fallocator3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fallocator3.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(no_std, allocator)]\n+#![feature(allocator)]\n #![no_std]\n #![allocator]\n #![crate_type = \"rlib\"]"}, {"sha": "41ceb924ab306fd4bb14e5580dc03926bc1bd079", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std, core, libc)]\n+#![feature(libc)]\n #![no_std]\n #![feature(lang_items)]\n "}, {"sha": "51003160427327b04f0eca23382699cda4c254a0", "filename": "src/test/auxiliary/needs_allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fneeds_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fneeds_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fneeds_allocator.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(no_std, needs_allocator)]\n+#![feature(needs_allocator)]\n #![no_std]\n #![needs_allocator]\n #![crate_type = \"rlib\"]"}, {"sha": "7cfae6d121da1cdce8dad0e6a6390839afbd207c", "filename": "src/test/auxiliary/no_std_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fno_std_crate.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n #![no_std]\n \n pub fn foo() {}"}, {"sha": "6434e62b6f7035556b32e317d8f5e4d1356a9f03", "filename": "src/test/auxiliary/weak-lang-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -13,7 +13,6 @@\n // This aux-file will require the eh_personality function to be codegen'd, but\n // it hasn't been defined just yet. Make sure we don't explode.\n \n-#![feature(no_std)]\n #![no_std]\n #![crate_type = \"rlib\"]\n "}, {"sha": "a79c7663861d71c69a62d61bf12bc5233ed3ddaf", "filename": "src/test/compile-fail/cfg-attr-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fcfg-attr-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fcfg-attr-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-attr-crate-2.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,6 +12,6 @@\n \n // https://github.com/rust-lang/rust/issues/21833#issuecomment-72353044\n \n-#![cfg_attr(broken, no_std)] //~ ERROR no_std is experimental\n+#![cfg_attr(broken, no_core)] //~ ERROR no_core is experimental\n \n fn main() { }"}, {"sha": "01c81a8bbcee4878a80c86008532e2bb63f5253d", "filename": "src/test/compile-fail/derive-no-std-not-supported.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n #![no_std]\n \n extern crate core;"}, {"sha": "aed76e36fca14cf9e8fa449d2d599a3b51ab6988", "filename": "src/test/compile-fail/fail-no-dead-code-core.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,10 +10,9 @@\n \n #![deny(dead_code)]\n #![allow(unreachable_code)]\n-#![feature(core)]\n-\n-#[macro_use] extern crate core;\n \n+#[macro_use]\n+extern crate core;\n \n fn foo() { //~ ERROR function is never used\n "}, {"sha": "0a55a8a78ce5a8f3f8478be689c484008399cd49", "filename": "src/test/compile-fail/gated-no-core.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fgated-no-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fgated-no-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-no-core.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![no_std] //~ ERROR no_std is experimental\n+#![no_core] //~ ERROR no_core is experimental\n \n fn main() {}", "previous_filename": "src/test/compile-fail/gated-no-std.rs"}, {"sha": "26770a1d37c428b8e094952a03c5bc0792c1fdcd", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n #![no_std]\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]"}, {"sha": "21675434e2433f3c56a0b685d23de6201ac5c27b", "filename": "src/test/compile-fail/no-std-inject.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std, core)]\n #![no_std]\n \n extern crate core; //~ ERROR: an external crate named `core` has already"}, {"sha": "72eb687adc60257bf9c075720c8e3ad18486fe36", "filename": "src/test/compile-fail/no_owned_box_lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,8 +12,8 @@\n \n // error-pattern: requires `owned_box` lang_item\n \n+#![feature(lang_items, box_syntax)]\n #![no_std]\n-#![feature(lang_items, no_std, box_syntax)]\n \n fn main() {\n     let x = box 1i32;"}, {"sha": "b3aa4e9187d34dc7fdb4cdb8ec18fac2c8514e7c", "filename": "src/test/compile-fail/placement-expr-unstable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -11,7 +11,6 @@\n // Check that placement in respects unstable code checks.\n \n #![feature(placement_in_syntax)]\n-#![feature(core)]\n \n extern crate core;\n "}, {"sha": "5ceb870528a65a2d8563822f6c0a3da607c46f2f", "filename": "src/test/compile-fail/single-primitive-inherent-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fsingle-primitive-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fsingle-primitive-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsingle-primitive-inherent-impl.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,7 +12,6 @@\n \n #![crate_type = \"lib\"]\n #![feature(lang_items)]\n-#![feature(no_std)]\n #![no_std]\n \n // OK"}, {"sha": "6416e1cacdc0cb94d09b56684e8c21d9d43389dd", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(unused_attributes)]\n #![allow(dead_code, unused_imports)]\n-#![feature(core, custom_attribute)]\n+#![feature(custom_attribute)]\n \n #![foo] //~ ERROR unused attribute\n "}, {"sha": "de3cc27c49bd265f8eebfd1d2c060035ca0a6fca", "filename": "src/test/compile-fail/warn-pub-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Check that `pub extern crate` gives a warning.\n-\n+#![feature(rustc_attrs)]\n \n pub extern crate core; //~WARN `pub extern crate` does not work\n-//~^ ERROR core\n \n-fn main() {\n-}\n+#[rustc_error]\n+fn main() {} //~ ERROR: compilation successful"}, {"sha": "fdf50c27bf4cf2c8176b61d278de0e31458b15da", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,7 +12,6 @@\n // error-pattern: language item required, but not found: `panic_fmt`\n // error-pattern: language item required, but not found: `eh_personality`\n \n-#![feature(no_std)]\n #![no_std]\n \n extern crate core;"}, {"sha": "43f974893148a583f51c1991d02b907e5c413a48", "filename": "src/test/run-make/alloc-extern-crates/fakealloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n #![crate_type = \"rlib\"]\n-#![feature(no_std)]\n #![no_std]\n \n-\n #[inline]\n pub unsafe fn allocate(_size: usize, _align: usize) -> *mut u8 { 0 as *mut u8 }\n "}, {"sha": "8a15afb328a92fd383337bdef39c68275586deca", "filename": "src/test/run-make/no-duplicate-libs/bar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std, libc)]\n-#![no_std]\n+#![feature(lang_items, libc)]\n #![crate_type = \"dylib\"]\n+#![no_std]\n \n extern crate libc;\n "}, {"sha": "ab8d2eca9363f55c52c9a53b166c79cff1e601bf", "filename": "src/test/run-make/no-duplicate-libs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std, libc)]\n+#![feature(lang_items, libc)]\n #![no_std]\n #![crate_type = \"dylib\"]\n "}, {"sha": "0afd3be466dbfc0a661606fb67e8ab1bf2d74370", "filename": "src/test/run-make/use-extern-for-plugins/foo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Ffoo.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n #![no_std]\n #![crate_type = \"lib\"]\n #![crate_name = \"a\"]"}, {"sha": "21dc7ff7e01f0920c092136659b70f4e06bdd7ba", "filename": "src/test/run-pass/cfg-attr-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,6 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![cfg_attr(not_used, no_std)]\n+#![cfg_attr(not_used, no_core)]\n \n fn main() { }"}, {"sha": "78e9da001f799a5ac354e796af327e7600073498", "filename": "src/test/run-pass/derive-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std, rand, collections, rustc_private)]\n+#![feature(rand, collections, rustc_private)]\n #![no_std]\n \n extern crate rand;"}, {"sha": "73de1fa9c0de5cc75294af64f3b352562c2c3530", "filename": "src/test/run-pass/for-loop-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std, core_slice_ext, collections)]\n+#![feature(lang_items, start, collections)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "62d54da56b2ec95279eb421f8083b3d9222b1c93", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std, collections)]\n+#![feature(lang_items, start, collections)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "51a9c9264a83c9b2adcba0d4c1fadcffdb137e29", "filename": "src/test/run-pass/issue-13655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13655.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, core)]\n+#![feature(fn_traits, unboxed_closures)]\n use std::ops::Fn;\n \n struct Foo<T>(T);"}, {"sha": "0709ccf1406d4e78bc52041200434ff219026831", "filename": "src/test/run-pass/issue-14958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14958.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, core)]\n+#![feature(fn_traits, unboxed_closures)]\n \n trait Foo { fn dummy(&self) { }}\n "}, {"sha": "42824b563bed9c79d862b487bf37b361e005e342", "filename": "src/test/run-pass/issue-14959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14959.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, core)]\n+#![feature(fn_traits, unboxed_closures)]\n \n use std::ops::Fn;\n "}, {"sha": "ca2b9209eba51db81c8f299945d34c50fe02e427", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -11,7 +11,7 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures, core)]\n+#![feature(unboxed_closures, fn_traits)]\n \n // Test that unboxing shim for calling rust-call ABI methods through a\n // trait box works and does not cause an ICE."}, {"sha": "48d29095ec6900e3c90138eb5ef5b261d2f1c453", "filename": "src/test/run-pass/issue-18661.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18661.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -13,10 +13,8 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, core)]\n-\n pub fn inside<F: Fn()>(c: F) {\n-    c.call(());\n+    c();\n }\n \n // Use different number of type parameters and closure type to trigger"}, {"sha": "e54fdfb5b5e813b8007d9ccc35f965faa88dae53", "filename": "src/test/run-pass/issue-19098.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-19098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-19098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19098.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,18 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n-#![feature(unboxed_closures, core)]\n-\n pub trait Handler {\n     fn handle(&self, &mut String);\n }\n \n-impl<F> Handler for F\n-where F: for<'a, 'b> Fn(&'a mut String) {\n+impl<F> Handler for F where F: for<'a, 'b> Fn(&'a mut String) {\n     fn handle(&self, st: &mut String) {\n-        self.call((st,))\n+        self(st)\n     }\n }\n "}, {"sha": "30edf24e8b177fbd75a9da3df7a9def271ca8faf", "filename": "src/test/run-pass/issue-19982.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-19982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-19982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19982.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core,unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n #[allow(dead_code)]\n struct Foo;"}, {"sha": "322c326ef0d627d97ed86cf6e2843ba18010810b", "filename": "src/test/run-pass/issue-20544.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-20544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fissue-20544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20544.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(unboxed_closures)]\n-#![feature(core)]\n+#![feature(fn_traits)]\n \n struct Fun<F>(F);\n "}, {"sha": "5fbcfadf870e1682be4f2c44a96ed55bbfce3028", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,21 +10,15 @@\n \n // Make sure #1399 stays fixed\n \n-\n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-#![feature(unboxed_closures, core)]\n-\n struct A { a: Box<isize> }\n \n fn foo() -> Box<FnMut() -> isize + 'static> {\n-    let k: Box<_> = box 22;\n+    let k: Box<_> = Box::new(22);\n     let _u = A {a: k.clone()};\n     let result  = || 22;\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     Box::new(result)\n }\n \n pub fn main() {\n-    assert_eq!(foo().call_mut(()), 22);\n+    assert_eq!(foo()(), 22);\n }"}, {"sha": "9298d74f9c47b2ce54e22446b1e4f66f7d731a4d", "filename": "src/test/run-pass/no-std-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fno-std-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fno-std-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-1.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n #![no_std]\n \n extern crate std;"}, {"sha": "1b24987052b4926581150d27cb1eaa1e60927b63", "filename": "src/test/run-pass/no-std-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fno-std-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fno-std-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-2.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n #![no_std]\n \n extern crate std;"}, {"sha": "685c62f5a532a34b5791b31d8b88adcf9dda6f0d", "filename": "src/test/run-pass/no-std-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fno-std-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fno-std-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-3.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n #![no_std]\n \n extern crate std;"}, {"sha": "c15c6df5fac2ad83c652fda29b463e7af66c93e7", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,7 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, core)]\n+#![feature(unboxed_closures, fn_traits)]\n \n use std::marker::PhantomData;\n use std::ops::Fn;"}, {"sha": "24a79a26837ad1829544d8619d0445ec2d44b4a2", "filename": "src/test/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(lang_items, unboxed_closures, core)]\n+#![feature(lang_items, unboxed_closures, fn_traits)]\n \n use std::ops::{Fn, FnMut, FnOnce};\n "}, {"sha": "5fd6d5cb10f3d14c0d53939331571fce7155b56d", "filename": "src/test/run-pass/overloaded-calls-zero-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-zero-args.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(unboxed_closures, core)]\n+#![feature(unboxed_closures, fn_traits)]\n \n use std::ops::FnMut;\n "}, {"sha": "371823ece2945729d406bc4438183c08853b26cb", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n-#![feature(unboxed_closures, core)]\n-\n struct closure_box<'a> {\n     cl: Box<FnMut() + 'a>,\n }\n@@ -25,9 +21,8 @@ pub fn main() {\n     assert_eq!(i, 3);\n     {\n         let cl = || i += 1;\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let mut cl_box = box_it(Box::new(cl));\n-        cl_box.cl.call_mut(());\n+        (cl_box.cl)();\n     }\n     assert_eq!(i, 4);\n }"}, {"sha": "fa1c3b230c6ee52c7fa2a2d1bb52adba51f39b99", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-#![feature(unboxed_closures, core)]\n-\n struct closure_box<'a> {\n     cl: Box<FnMut() + 'a>,\n }\n@@ -21,11 +17,10 @@ fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n }\n \n fn call_static_closure(mut cl: closure_box<'static>) {\n-    cl.cl.call_mut(())\n+    (cl.cl)();\n }\n \n pub fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let cl_box = box_it(Box::new(|| println!(\"Hello, world!\")));\n     call_static_closure(cl_box);\n }"}, {"sha": "75cd61b9cf02986d9a3714e68e651546bc4900d5", "filename": "src/test/run-pass/unboxed-closures-extern-fn-hr.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn-hr.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -10,19 +10,14 @@\n \n // Checks that higher-ranked extern fn pointers implement the full range of Fn traits.\n \n-\n-#![feature(unboxed_closures, core)]\n-\n-use std::ops::{Fn,FnMut,FnOnce};\n-\n fn square(x: &isize) -> isize { (*x) * (*x) }\n \n fn call_it<F:Fn(&isize)->isize>(f: &F, x: isize) -> isize {\n     (*f)(&x)\n }\n \n fn call_it_boxed(f: &Fn(&isize) -> isize, x: isize) -> isize {\n-    f.call((&x,))\n+    f(&x)\n }\n \n fn call_it_mut<F:FnMut(&isize)->isize>(f: &mut F, x: isize) -> isize {"}, {"sha": "2e63c600a46c1290e21b29aa79f7c42f4efaa0a0", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,7 +12,7 @@\n // any Fn trait to be used where Fn is implemented.\n \n \n-#![feature(unboxed_closures, core)]\n+#![feature(unboxed_closures, fn_traits)]\n \n use std::ops::{Fn,FnMut,FnOnce};\n "}, {"sha": "ce93fcafc9e79b10f13373e5cced15bafd27dc62", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,9 +12,7 @@\n // FnMut or FnOnce to be used where FnMut is implemented.\n \n \n-#![feature(unboxed_closures, core)]\n-\n-use std::ops::{FnMut,FnOnce};\n+#![feature(unboxed_closures, fn_traits)]\n \n struct S;\n "}, {"sha": "ac303e3a090b10354741eb1e0074124570ed2af5", "filename": "src/test/run-pass/unboxed-closures-infer-recursive-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core,unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n \n use std::marker::PhantomData;\n "}, {"sha": "e2d05884f3a5fcf01141c564b6018170940d6d87", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,10 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures, core)]\n-\n-use std::ops::FnMut;\n+#![feature(unboxed_closures, fn_traits)]\n \n struct S;\n "}, {"sha": "d0d36d969b7851dc732bf174651b24468aca0010", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -11,30 +11,25 @@\n // Test that unboxed closures in contexts with free type parameters\n // monomorphize correctly (issue #16791)\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-#![feature(unboxed_closures, core)]\n-\n fn main(){\n     fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut()->T + 'a> {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         Box::new(move || t.clone())\n     }\n \n     let mut f = bar(42_u32);\n-    assert_eq!(f.call_mut(()), 42);\n+    assert_eq!(f(), 42);\n \n     let mut f = bar(\"forty-two\");\n-    assert_eq!(f.call_mut(()), \"forty-two\");\n+    assert_eq!(f(), \"forty-two\");\n \n     let x = 42_u32;\n     let mut f = bar(&x);\n-    assert_eq!(f.call_mut(()), &x);\n+    assert_eq!(f(), &x);\n \n     #[derive(Clone, Copy, Debug, PartialEq)]\n     struct Foo(usize, &'static str);\n \n     let x = Foo(42, \"forty-two\");\n     let mut f = bar(x);\n-    assert_eq!(f.call_mut(()), x);\n+    assert_eq!(f(), x);\n }"}, {"sha": "b7835324010cfb84db7e702b926705fba7b8405b", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -12,14 +12,9 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-#![feature(unboxed_closures, core)]\n-\n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let task: Box<Fn(isize) -> isize> = Box::new(|x| x);\n-    task.call((0, ));\n+    task(0);\n \n     let mut task: Box<FnMut(isize) -> isize> = Box::new(|x| x);\n     task(0);"}, {"sha": "a51ef732264691a69d0761dcc9cdac7c60aeee43", "filename": "src/test/run-pass/vec-macro-no-std.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std, core_slice_ext, libc, collections)]\n+#![feature(lang_items, start, libc, collections)]\n #![no_std]\n \n extern crate std as other;\n@@ -18,8 +18,6 @@ extern crate libc;\n #[macro_use]\n extern crate collections;\n \n-use core::option::Option::Some;\n-use core::slice::SliceExt;\n use collections::vec::Vec;\n \n // Issue #16806"}, {"sha": "bd22548a8880507320e499a20fa9131f39043c54", "filename": "src/test/rustdoc/issue-15318.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frustdoc%2Fissue-15318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frustdoc%2Fissue-15318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15318.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -11,7 +11,6 @@\n // aux-build:issue-15318.rs\n // ignore-cross-compile\n \n-#![feature(no_std)]\n #![no_std]\n \n extern crate issue_15318;"}, {"sha": "50c31d309eec1fab7193039b0b27d610fd18630f", "filename": "src/test/rustdoc/issue-23511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464cdff102993ff1900eebbf65209e0a3c0be0d5/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23511.rs?ref=464cdff102993ff1900eebbf65209e0a3c0be0d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std, lang_items, core)]\n+#![feature(lang_items)]\n #![no_std]\n \n pub mod str {"}]}