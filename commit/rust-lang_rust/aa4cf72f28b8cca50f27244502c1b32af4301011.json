{"sha": "aa4cf72f28b8cca50f27244502c1b32af4301011", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNGNmNzJmMjhiOGNjYTUwZjI3MjQ0NTAyYzFiMzJhZjQzMDEwMTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-18T22:33:19Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-18T22:33:19Z"}, "message": "Rustup to rust-lang/rust#69181", "tree": {"sha": "0e7c3bbdf0599a553d1d38d1acb6b288a86edc57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7c3bbdf0599a553d1d38d1acb6b288a86edc57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4cf72f28b8cca50f27244502c1b32af4301011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4cf72f28b8cca50f27244502c1b32af4301011", "html_url": "https://github.com/rust-lang/rust/commit/aa4cf72f28b8cca50f27244502c1b32af4301011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4cf72f28b8cca50f27244502c1b32af4301011/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27acea0a1baac6cf3ac6debfdbce04f91e15d772", "url": "https://api.github.com/repos/rust-lang/rust/commits/27acea0a1baac6cf3ac6debfdbce04f91e15d772", "html_url": "https://github.com/rust-lang/rust/commit/27acea0a1baac6cf3ac6debfdbce04f91e15d772"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "7efc62d4c2e17b65b03cb6656d6a36f74eb386a3", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa4cf72f28b8cca50f27244502c1b32af4301011/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4cf72f28b8cca50f27244502c1b32af4301011/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=aa4cf72f28b8cca50f27244502c1b32af4301011", "patch": "@@ -226,7 +226,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             return self.ifthenelse(cond, then, otherwise);\n         }\n         match e.kind {\n-            ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id),\n+            ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id, self.tables.expr_ty(e)),\n             ExprKind::Block(ref block, _) => self.block(block),\n             ExprKind::Lit(ref lit) => Some(lit_to_constant(&lit.node, self.tables.expr_ty_opt(e))),\n             ExprKind::Array(ref vec) => self.multi(vec).map(Constant::Vec),\n@@ -319,7 +319,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     }\n \n     /// Lookup a possibly constant expression from a `ExprKind::Path`.\n-    fn fetch_path(&mut self, qpath: &QPath<'_>, id: HirId) -> Option<Constant> {\n+    fn fetch_path(&mut self, qpath: &QPath<'_>, id: HirId, ty: Ty<'cc>) -> Option<Constant> {\n         let res = self.tables.qpath_res(qpath, id);\n         match res {\n             Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n@@ -334,7 +334,8 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     .lcx\n                     .tcx\n                     .const_eval_resolve(self.param_env, def_id, substs, None, None)\n-                    .ok()?;\n+                    .ok()\n+                    .map(|val| rustc::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n                 let result = miri_to_const(&result);\n                 if result.is_some() {\n                     self.needed_resolution = true;"}, {"sha": "2e14956ecd7bd27ccfd90f9e3c055853f81275cb", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa4cf72f28b8cca50f27244502c1b32af4301011/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4cf72f28b8cca50f27244502c1b32af4301011/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=aa4cf72f28b8cca50f27244502c1b32af4301011", "patch": "@@ -46,9 +46,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n             for var in def.variants {\n                 if let Some(anon_const) = &var.disr_expr {\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);\n-                    let constant = cx.tcx.const_eval_poly(def_id).ok();\n+                    let mut ty = cx.tcx.type_of(def_id);\n+                    let constant = cx\n+                        .tcx\n+                        .const_eval_poly(def_id)\n+                        .ok()\n+                        .map(|val| rustc::ty::Const::from_value(cx.tcx, val, ty));\n                     if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n-                        let mut ty = cx.tcx.type_of(def_id);\n                         if let ty::Adt(adt, _) = ty.kind {\n                             if adt.is_enum() {\n                                 ty = adt.repr.discr_type().to_ty(cx.tcx);"}]}