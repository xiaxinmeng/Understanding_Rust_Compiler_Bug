{"sha": "6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "node_id": "C_kwDOAAsO6NoAKDZlOTY5ZWE4NWViOGY1ZTUwNGMxYTBhMDZjMGE2M2M1MTVmYWRmM2I", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-11T18:32:33Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-14T07:30:03Z"}, "message": "fix  various subst_identity vs skip_binder", "tree": {"sha": "d214b2b2e1b2eac7a597229c7107a318127495b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d214b2b2e1b2eac7a597229c7107a318127495b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "html_url": "https://github.com/rust-lang/rust/commit/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f29a334c90e29ffbe236f9abba9aa08bfda597c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f29a334c90e29ffbe236f9abba9aa08bfda597c6", "html_url": "https://github.com/rust-lang/rust/commit/f29a334c90e29ffbe236f9abba9aa08bfda597c6"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "8d2cc70c05f16b0e319a6cf15786c783ec6b01ed", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -2066,7 +2066,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 };\n \n                 self.one_bound_for_assoc_type(\n-                    || traits::supertraits(tcx, ty::Binder::dummy(trait_ref.skip_binder())),\n+                    || traits::supertraits(tcx, ty::Binder::dummy(trait_ref.subst_identity())),\n                     || \"Self\".to_string(),\n                     assoc_ident,\n                     span,"}, {"sha": "e58669433e2189c501620fd0af3f826f2accd333", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -540,7 +540,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n                     tcx,\n                     it.span,\n                     it.owner_id.def_id,\n-                    impl_trait_ref.skip_binder(),\n+                    impl_trait_ref.subst_identity(),\n                     &impl_.items,\n                 );\n                 check_on_unimplemented(tcx, it);"}, {"sha": "0aadc9f311b033e4ec3983d86fd8b072c4b85f2b", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn orphan_check_impl(\n     tcx: TyCtxt<'_>,\n     impl_def_id: LocalDefId,\n ) -> Result<(), ErrorGuaranteed> {\n-    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n     trait_ref.error_reported()?;\n \n     let ret = do_orphan_check_impl(tcx, trait_ref, impl_def_id);"}, {"sha": "a485768e37b832c551740a167bc64c20efb0df4a", "filename": "compiler/rustc_hir_analysis/src/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -13,7 +13,8 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let item = tcx.hir().expect_item(def_id);\n     let hir::ItemKind::Impl(ref impl_) = item.kind else { bug!() };\n \n-    if let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id).map(|t| t.subst_identity()) {\n+    if let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) {\n+        let trait_ref = trait_ref.subst_identity();\n         let trait_def = tcx.trait_def(trait_ref.def_id);\n         let unsafe_attr =\n             impl_.generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\");"}, {"sha": "a8000aa3c8a831562cd1543c91d33033b285abb5", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -1898,9 +1898,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         for id in tcx.hir().items() {\n             if matches!(tcx.def_kind(id.owner_id), DefKind::Impl) {\n-                if let Some(trait_ref) =\n-                    tcx.impl_trait_ref(id.owner_id).map(ty::EarlyBinder::subst_identity)\n-                {\n+                if let Some(trait_ref) = tcx.impl_trait_ref(id.owner_id) {\n+                    let trait_ref = trait_ref.subst_identity();\n+\n                     let simplified_self_ty = fast_reject::simplify_type(\n                         self.tcx,\n                         trait_ref.self_ty(),"}, {"sha": "e9bd0e9866fdcde9cfd70e4a775045faea35b8b5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -2187,8 +2187,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Option<ImplOverlapKind> {\n         // If either trait impl references an error, they're allowed to overlap,\n         // as one of them essentially doesn't exist.\n-        if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.skip_binder().references_error())\n-            || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.skip_binder().references_error())\n+        if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.subst_identity().references_error())\n+            || self\n+                .impl_trait_ref(def_id2)\n+                .map_or(false, |tr| tr.subst_identity().references_error())\n         {\n             return Some(ImplOverlapKind::Permitted { marker: false });\n         }"}, {"sha": "ec1de3056872b027f8d8da8b3bb880ee49c67076", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -1351,9 +1351,9 @@ fn create_mono_items_for_default_impls<'tcx>(\n                 tcx.def_path_str(item.owner_id.to_def_id())\n             );\n \n-            if let Some(trait_ref) =\n-                tcx.impl_trait_ref(item.owner_id).map(ty::EarlyBinder::subst_identity)\n-            {\n+            if let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) {\n+                let trait_ref = trait_ref.subst_identity();\n+\n                 let param_env = ty::ParamEnv::reveal_all();\n                 let trait_ref = tcx.normalize_erasing_regions(param_env, trait_ref);\n                 let overridden_methods = tcx.impl_item_implementor_ids(item.owner_id);"}, {"sha": "0edae34190c300f2a42a616db12251dab87a175e", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -77,10 +77,10 @@ pub fn overlapping_impls(\n     // a quick check via fast_reject to tell if the impl headers could possibly\n     // unify.\n     let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsInfer };\n-    let impl1_ref = tcx.impl_trait_ref(impl1_def_id).map(ty::EarlyBinder::subst_identity);\n-    let impl2_ref = tcx.impl_trait_ref(impl2_def_id).map(ty::EarlyBinder::subst_identity);\n+    let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n+    let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n     let may_overlap = match (impl1_ref, impl2_ref) {\n-        (Some(a), Some(b)) => iter::zip(a.substs, b.substs)\n+        (Some(a), Some(b)) => iter::zip(a.skip_binder().substs, b.skip_binder().substs)\n             .all(|(arg1, arg2)| drcx.generic_args_may_unify(arg1, arg2)),\n         (None, None) => {\n             let self_ty1 = tcx.type_of(impl1_def_id);\n@@ -461,7 +461,7 @@ pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanChe\n \n     // We only except this routine to be invoked on implementations\n     // of a trait, not inherent implementations.\n-    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n     debug!(\"orphan_check: trait_ref={:?}\", trait_ref);\n \n     // If the *trait* is local to the crate, ok."}, {"sha": "052db2cfe7b90d23c0d7ac9793fe85c926083ae0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -1940,7 +1940,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     return None;\n                 }\n \n-                let imp = self.tcx.impl_trait_ref(def_id).unwrap().subst_identity();\n+                let imp = self.tcx.impl_trait_ref(def_id).unwrap().skip_binder();\n \n                 self.fuzzy_match_tys(trait_pred.skip_binder().self_ty(), imp.self_ty(), false)\n                     .map(|similarity| ImplCandidate { trait_ref: imp, similarity })"}, {"sha": "3b796c623c0ab11a771bf7eb990b1433dc607ef5", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -431,7 +431,7 @@ fn report_conflicting_impls<'tcx>(\n pub(crate) fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String> {\n     use std::fmt::Write;\n \n-    let trait_ref = tcx.impl_trait_ref(impl_def_id)?.skip_binder();\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id)?.subst_identity();\n     let mut w = \"impl\".to_owned();\n \n     let substs = InternalSubsts::identity_for_item(tcx, impl_def_id);"}, {"sha": "6411206a5a40c276b188a337270ade6dbc2cae6f", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -48,7 +48,7 @@ trait ChildrenExt<'tcx> {\n impl<'tcx> ChildrenExt<'tcx> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n         {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n@@ -63,7 +63,7 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n     /// an impl with a parent. The impl must be present in the list of\n     /// children already.\n     fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n         let vec: &mut Vec<DefId>;\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n         {\n@@ -275,7 +275,8 @@ impl<'tcx> GraphExt<'tcx> for Graph {\n     ) -> Result<Option<FutureCompatOverlapError<'tcx>>, OverlapError<'tcx>> {\n         assert!(impl_def_id.is_local());\n \n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n+        // FIXME: use `EarlyBinder` in `self.children`\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n         let trait_def_id = trait_ref.def_id;\n \n         debug!(\n@@ -388,7 +389,7 @@ pub(crate) fn assoc_def(\n     impl_def_id: DefId,\n     assoc_def_id: DefId,\n ) -> Result<LeafDef, ErrorGuaranteed> {\n-    let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder().def_id;\n+    let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n     let trait_def = tcx.trait_def(trait_def_id);\n \n     // This function may be called while we are still building the"}, {"sha": "7a24645803c9660441eef85bba5f794d5d51aced", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -22,9 +22,9 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n             tcx.intern_type_list(&assumed_wf_types)\n         }\n         DefKind::Impl => {\n-            match tcx.impl_trait_ref(def_id).map(ty::EarlyBinder::subst_identity) {\n+            match tcx.impl_trait_ref(def_id) {\n                 Some(trait_ref) => {\n-                    let types: Vec<_> = trait_ref.substs.types().collect();\n+                    let types: Vec<_> = trait_ref.skip_binder().substs.types().collect();\n                     tcx.intern_type_list(&types)\n                 }\n                 // Only the impl self type"}, {"sha": "075951312a6393d738fab17772a2778f9b2085b9", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "patch": "@@ -786,7 +786,7 @@ fn trait_impls_for<'a>(\n         tcx.find_map_relevant_impl(trait_, ty, |impl_| {\n             let trait_ref = tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n-            let impl_type = trait_ref.subst_identity().self_ty();\n+            let impl_type = trait_ref.skip_binder().self_ty();\n             trace!(\n                 \"comparing type {} with kind {:?} against type {:?}\",\n                 impl_type,"}]}