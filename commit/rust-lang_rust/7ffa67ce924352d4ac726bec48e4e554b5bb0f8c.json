{"sha": "7ffa67ce924352d4ac726bec48e4e554b5bb0f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZmE2N2NlOTI0MzUyZDRhYzcyNmJlYzQ4ZTRlNTU0YjViYjBmOGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-08T00:56:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:24Z"}, "message": "front -- collapse iterator actions that require access to the same &mut state", "tree": {"sha": "98fc830f16ce2f9ce2aec301cc86e2dd3d198c08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98fc830f16ce2f9ce2aec301cc86e2dd3d198c08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c", "html_url": "https://github.com/rust-lang/rust/commit/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6d122826cf00ace0dbbcb82f36dc92b2a1df83", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6d122826cf00ace0dbbcb82f36dc92b2a1df83", "html_url": "https://github.com/rust-lang/rust/commit/ec6d122826cf00ace0dbbcb82f36dc92b2a1df83"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "4fd72a4bbfc69ff2064d4ade796733a65cbf1480", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=7ffa67ce924352d4ac726bec48e4e554b5bb0f8c", "patch": "@@ -58,16 +58,18 @@ fn filter_view_item<'r>(cx: &Context, view_item: &'r ast::ViewItem)\n }\n \n fn fold_mod(cx: &mut Context, m: &ast::Mod) -> ast::Mod {\n-    let filtered_items = m.items.iter()\n+    let filtered_items: ~[&@ast::Item] = m.items.iter()\n             .filter(|&a| item_in_cfg(cx, *a))\n+            .collect();\n+    let flattened_items = filtered_items.move_iter()\n             .flat_map(|&x| cx.fold_item(x).move_iter())\n             .collect();\n     let filtered_view_items = m.view_items.iter().filter_map(|a| {\n         filter_view_item(cx, a).map(|x| cx.fold_view_item(x))\n     }).collect();\n     ast::Mod {\n         view_items: filtered_view_items,\n-        items: filtered_items\n+        items: flattened_items\n     }\n }\n \n@@ -113,23 +115,26 @@ fn fold_item_underscore(cx: &mut Context, item: &ast::Item_) -> ast::Item_ {\n             ast::ItemStruct(fold_struct(cx, def), generics.clone())\n         }\n         ast::ItemEnum(ref def, ref generics) => {\n-            let mut variants = def.variants.iter().map(|c| c.clone()).filter(|m| {\n-                (cx.in_cfg)(m.node.attrs)\n-            }).map(|v| {\n-                match v.node.kind {\n-                    ast::TupleVariantKind(..) => v,\n-                    ast::StructVariantKind(def) => {\n-                        let def = fold_struct(cx, def);\n-                        @codemap::Spanned {\n-                            node: ast::Variant_ {\n-                                kind: ast::StructVariantKind(def),\n-                                ..v.node.clone()\n-                            },\n-                            ..*v\n-                        }\n+            let mut variants = def.variants.iter().map(|c| c.clone()).\n+            filter_map(|v| {\n+                if !(cx.in_cfg)(v.node.attrs) {\n+                    None\n+                } else {\n+                    Some(match v.node.kind {\n+                                ast::TupleVariantKind(..) => v,\n+                                ast::StructVariantKind(def) => {\n+                                    let def = fold_struct(cx, def);\n+                                    @codemap::Spanned {\n+                                        node: ast::Variant_ {\n+                                            kind: ast::StructVariantKind(def),\n+                                            ..v.node.clone()\n+                                        },\n+                                        ..*v\n+                                    }\n+                                }\n+                            })\n                     }\n-                }\n-            });\n+                });\n             ast::ItemEnum(ast::EnumDef {\n                 variants: variants.collect(),\n             }, generics.clone())\n@@ -165,10 +170,11 @@ fn retain_stmt(cx: &Context, stmt: @ast::Stmt) -> bool {\n }\n \n fn fold_block(cx: &mut Context, b: ast::P<ast::Block>) -> ast::P<ast::Block> {\n-    let resulting_stmts = b.stmts.iter()\n-            .filter(|&a| retain_stmt(cx, *a))\n-            .flat_map(|&stmt| cx.fold_stmt(stmt).move_iter())\n-            .collect();\n+    let resulting_stmts: ~[&@ast::Stmt] =\n+        b.stmts.iter().filter(|&a| retain_stmt(cx, *a)).collect();\n+    let resulting_stmts = resulting_stmts.move_iter()\n+        .flat_map(|&stmt| cx.fold_stmt(stmt).move_iter())\n+        .collect();\n     let filtered_view_items = b.view_items.iter().filter_map(|a| {\n         filter_view_item(cx, a).map(|x| cx.fold_view_item(x))\n     }).collect();"}]}