{"sha": "da13f06ea0dc368f1350bfc356b7f81a838defde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMTNmMDZlYTBkYzM2OGYxMzUwYmZjMzU2YjdmODFhODM4ZGVmZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-06T20:49:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-06T20:49:20Z"}, "message": "Auto merge of #63789 - Wind-River:master, r=alexcrichton\n\nSupport both static and dynamic linking mode in testing for vxWorks\n\n1. Support both static and dynamic linking mode in testing for vxWorks\n2. Ignore unsupported test cases: net:tcp:tests:timeouts and net:ucp:tests:timeouts\n\nr? @alexcrichton", "tree": {"sha": "c26194ffc7711c1b60f812f8a148ca8d121ba2f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c26194ffc7711c1b60f812f8a148ca8d121ba2f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da13f06ea0dc368f1350bfc356b7f81a838defde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da13f06ea0dc368f1350bfc356b7f81a838defde", "html_url": "https://github.com/rust-lang/rust/commit/da13f06ea0dc368f1350bfc356b7f81a838defde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da13f06ea0dc368f1350bfc356b7f81a838defde/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e19f3f383b99414490243665c96b9f4e0f313f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e19f3f383b99414490243665c96b9f4e0f313f9", "html_url": "https://github.com/rust-lang/rust/commit/6e19f3f383b99414490243665c96b9f4e0f313f9"}, {"sha": "414d1047291348b5b8bf49e1d76fec978238d89f", "url": "https://api.github.com/repos/rust-lang/rust/commits/414d1047291348b5b8bf49e1d76fec978238d89f", "html_url": "https://github.com/rust-lang/rust/commit/414d1047291348b5b8bf49e1d76fec978238d89f"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "d8b6fb6da93951533e1126ec87e8a17bd3df86a7", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da13f06ea0dc368f1350bfc356b7f81a838defde/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da13f06ea0dc368f1350bfc356b7f81a838defde/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=da13f06ea0dc368f1350bfc356b7f81a838defde", "patch": "@@ -1597,7 +1597,8 @@ mod tests {\n \n     // FIXME: re-enabled openbsd tests once their socket timeout code\n     //        no longer has rounding errors.\n-    #[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\"), ignore)]\n+    // VxWorks ignores SO_SNDTIMEO.\n+    #[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"vxworks\"), ignore)]\n     #[cfg_attr(target_env = \"sgx\", ignore)] // FIXME: https://github.com/fortanix/rust-sgx/issues/31\n     #[test]\n     fn timeouts() {"}, {"sha": "a5e7cd992f2272d226ef606c489b02f34183fac0", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da13f06ea0dc368f1350bfc356b7f81a838defde/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da13f06ea0dc368f1350bfc356b7f81a838defde/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=da13f06ea0dc368f1350bfc356b7f81a838defde", "patch": "@@ -1026,7 +1026,8 @@ mod tests {\n \n     // FIXME: re-enabled openbsd/netbsd tests once their socket timeout code\n     //        no longer has rounding errors.\n-    #[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\"), ignore)]\n+    // VxWorks ignores SO_SNDTIMEO.\n+    #[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"vxworks\"), ignore)]\n     #[test]\n     fn timeouts() {\n         let addr = next_test_ip4();"}, {"sha": "9a3d24facc2c817a5f40a3a67b12111dc605e1df", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/da13f06ea0dc368f1350bfc356b7f81a838defde/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da13f06ea0dc368f1350bfc356b7f81a838defde/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=da13f06ea0dc368f1350bfc356b7f81a838defde", "patch": "@@ -1727,6 +1727,21 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn is_vxworks_pure_static(&self) -> bool {\n+        if self.config.target.contains(\"vxworks\") {\n+            match env::var(\"RUST_VXWORKS_TEST_DYLINK\") {\n+                Ok(s) => s != \"1\",\n+                _ => true\n+            }\n+        } else {\n+            false\n+        }\n+    }\n+\n+    fn is_vxworks_pure_dynamic(&self) -> bool {\n+        self.config.target.contains(\"vxworks\") && !self.is_vxworks_pure_static()\n+    }\n+\n     fn compose_and_run_compiler(&self, mut rustc: Command, input: Option<String>) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n \n@@ -1770,6 +1785,7 @@ impl<'test> TestCx<'test> {\n                     && !self.config.host.contains(\"musl\"))\n                 || self.config.target.contains(\"wasm32\")\n                 || self.config.target.contains(\"nvptx\")\n+                || self.is_vxworks_pure_static()\n             {\n                 // We primarily compile all auxiliary libraries as dynamic libraries\n                 // to avoid code size bloat and large binaries as much as possible\n@@ -2001,7 +2017,8 @@ impl<'test> TestCx<'test> {\n         }\n \n         if !is_rustdoc {\n-            if self.config.target == \"wasm32-unknown-unknown\" {\n+            if self.config.target == \"wasm32-unknown-unknown\"\n+                || self.is_vxworks_pure_static() {\n                 // rustc.arg(\"-g\"); // get any backtrace at all on errors\n             } else if !self.props.no_prefer_dynamic {\n                 rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n@@ -2046,7 +2063,8 @@ impl<'test> TestCx<'test> {\n         }\n \n         // Use dynamic musl for tests because static doesn't allow creating dylibs\n-        if self.config.host.contains(\"musl\") {\n+        if self.config.host.contains(\"musl\")\n+            || self.is_vxworks_pure_dynamic() {\n             rustc.arg(\"-Ctarget-feature=-crt-static\");\n         }\n "}]}