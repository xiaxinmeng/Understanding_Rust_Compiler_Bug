{"sha": "d7a2837c55d3577e797a73721de4dfd8f74978bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTI4MzdjNTVkMzU3N2U3OTdhNzM3MjFkZTRkZmQ4Zjc0OTc4YmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T04:24:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T04:24:31Z"}, "message": "rustdoc: Prune undocumented impls", "tree": {"sha": "47a9a3499083d35c33ce62ec2bb85438dbd474e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47a9a3499083d35c33ce62ec2bb85438dbd474e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a2837c55d3577e797a73721de4dfd8f74978bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a2837c55d3577e797a73721de4dfd8f74978bc", "html_url": "https://github.com/rust-lang/rust/commit/d7a2837c55d3577e797a73721de4dfd8f74978bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a2837c55d3577e797a73721de4dfd8f74978bc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee90377654128ae9792caa51ffbba883cb5edcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee90377654128ae9792caa51ffbba883cb5edcd", "html_url": "https://github.com/rust-lang/rust/commit/fee90377654128ae9792caa51ffbba883cb5edcd"}], "stats": {"total": 106, "additions": 88, "deletions": 18}, "files": [{"sha": "5b197b9859a9566fd47ede9a81992ea55fdd3d75", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 88, "deletions": 18, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d7a2837c55d3577e797a73721de4dfd8f74978bc/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a2837c55d3577e797a73721de4dfd8f74978bc/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=d7a2837c55d3577e797a73721de4dfd8f74978bc", "patch": "@@ -23,7 +23,8 @@ fn run(\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n-        fold_iface: fold_iface\n+        fold_iface: fold_iface,\n+        fold_impl: fold_impl\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -84,6 +85,14 @@ fn fold_mod(\n                     none\n                 }\n               }\n+              doc::impltag(impldoc) {\n+                let doc = fold.fold_impl(fold, impldoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::impltag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n               _ { some(itemtag) }\n             }\n         }\n@@ -286,28 +295,35 @@ fn fold_iface(\n ) -> doc::ifacedoc {\n     let doc = fold::default_seq_fold_iface(fold, doc);\n     let doc = {\n-        methods: vec::map(doc.methods) {|doc|\n-            {\n-                args: prune_args(doc.args),\n-                return: prune_return(doc.return)\n-                with doc\n-            }\n-        }\n+        methods: prune_methods(doc.methods)\n         with doc\n     };\n-    let methods_have_docs = vec::foldl(false, doc.methods) {|accum, doc|\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none\n+        || methods_have_docs(doc.methods);\n+    ret doc;\n+}\n+\n+fn prune_methods(docs: [doc::methoddoc]) -> [doc::methoddoc] {\n+    vec::map(docs) {|doc|\n+        {\n+            args: prune_args(doc.args),\n+            return: prune_return(doc.return)\n+            with doc\n+        }\n+    }\n+}\n+\n+fn methods_have_docs(docs: [doc::methoddoc]) -> bool {\n+    vec::foldl(false, docs) {|accum, doc|\n         accum\n             || doc.brief != none\n             || doc.desc != none\n             || vec::is_not_empty(doc.args)\n             || doc.return.desc != none\n             || doc.failure != none\n-    };\n-    fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none\n-        || methods_have_docs;\n-    ret doc;\n+    }\n }\n \n #[test]\n@@ -329,23 +345,77 @@ fn should_not_elide_ifaces_with_documented_methods() {\n }\n \n #[test]\n-fn should_not_elide_undocumented_methods() {\n+fn should_not_elide_undocumented_iface_methods() {\n     let doc = test::mk_doc(\"#[doc = \\\"hey\\\"] iface i { fn a(); }\");\n     assert vec::is_not_empty(doc.topmod.ifaces()[0].methods);\n }\n \n #[test]\n-fn should_elide_undocumented_method_args() {\n+fn should_elide_undocumented_iface_method_args() {\n     let doc = test::mk_doc(\"#[doc = \\\"hey\\\"] iface i { fn a(); }\");\n     assert vec::is_empty(doc.topmod.ifaces()[0].methods[0].args);\n }\n \n #[test]\n-fn should_elide_undocumented_method_return_values() {\n+fn should_elide_undocumented_iface_method_return_values() {\n     let doc = test::mk_doc(\"#[doc = \\\"hey\\\"] iface i { fn a() -> int; }\");\n     assert doc.topmod.ifaces()[0].methods[0].return.ty == none;\n }\n \n+fn fold_impl(\n+    fold: fold::fold<ctxt>,\n+    doc: doc::impldoc\n+) -> doc::impldoc {\n+    let doc = fold::default_seq_fold_impl(fold, doc);\n+    let doc = {\n+        methods: prune_methods(doc.methods)\n+        with doc\n+    };\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none\n+        || methods_have_docs(doc.methods);\n+    ret doc;\n+}\n+\n+#[test]\n+fn should_elide_undocumented_impls() {\n+    let doc = test::mk_doc(\"impl i for int { fn a() { } }\");\n+    assert vec::is_empty(doc.topmod.impls());\n+}\n+\n+#[test]\n+fn should_not_elide_documented_impls() {\n+    let doc = test::mk_doc(\"#[doc = \\\"hey\\\"] impl i for int { fn a() { } }\");\n+    assert vec::is_not_empty(doc.topmod.impls());\n+}\n+\n+#[test]\n+fn should_not_elide_impls_with_documented_methods() {\n+    let doc = test::mk_doc(\"impl i for int { #[doc = \\\"hey\\\"] fn a() { } }\");\n+    assert vec::is_not_empty(doc.topmod.impls());\n+}\n+\n+#[test]\n+fn should_not_elide_undocumented_impl_methods() {\n+    let doc = test::mk_doc(\"#[doc = \\\"hey\\\"] impl i for int { fn a() { } }\");\n+    assert vec::is_not_empty(doc.topmod.impls()[0].methods);\n+}\n+\n+#[test]\n+fn should_elide_undocumented_impl_method_args() {\n+    let doc = test::mk_doc(\n+        \"#[doc = \\\"hey\\\"] impl i for int { fn a(b: bool) { } }\");\n+    assert vec::is_empty(doc.topmod.impls()[0].methods[0].args);\n+}\n+\n+#[test]\n+fn should_elide_undocumented_impl_method_return_values() {\n+    let doc = test::mk_doc(\n+        \"#[doc = \\\"hey\\\"] impl i for int { fn a() -> int { } }\");\n+    assert doc.topmod.impls()[0].methods[0].return.ty == none;\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}]}