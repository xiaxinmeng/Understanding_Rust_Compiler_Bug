{"sha": "82365501043735dd8ec5eadaa5d30354cee19252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMzY1NTAxMDQzNzM1ZGQ4ZWM1ZWFkYWE1ZDMwMzU0Y2VlMTkyNTI=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-12-24T23:53:05Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-01-06T20:28:54Z"}, "message": "Remove some unnecessary type casts\n\nConflicts:\n\tsrc/librustc/middle/lint.rs", "tree": {"sha": "6671655462aa0b1b49448b203888362cedd9af5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6671655462aa0b1b49448b203888362cedd9af5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82365501043735dd8ec5eadaa5d30354cee19252", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82365501043735dd8ec5eadaa5d30354cee19252", "html_url": "https://github.com/rust-lang/rust/commit/82365501043735dd8ec5eadaa5d30354cee19252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82365501043735dd8ec5eadaa5d30354cee19252/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be2bc817bbb70ac13a1c2bb9647e01e2a156127", "html_url": "https://github.com/rust-lang/rust/commit/6be2bc817bbb70ac13a1c2bb9647e01e2a156127"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "9f40507826fdec9ee107cf40f16b38031cd6198b", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -80,7 +80,7 @@ impl SmallBitv {\n             self.bits |= 1<<i;\n         }\n         else {\n-            self.bits &= !(1<<i as uint);\n+            self.bits &= !(1<<i);\n         }\n     }\n "}, {"sha": "fd5e95d8c239a071e2a299eb4e330ea0875ef837", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -647,7 +647,7 @@ pub mod writer {\n             let cur_pos = self.writer.tell();\n             self.writer.seek(last_size_pos as i64, io::SeekSet);\n             let size = (cur_pos as uint - last_size_pos - 4);\n-            write_sized_vuint(self.writer, size as uint, 4u);\n+            write_sized_vuint(self.writer, size, 4u);\n             self.writer.seek(cur_pos as i64, io::SeekSet);\n \n             debug!(\"End tag (size = {})\", size);"}, {"sha": "c592290ee16d0e493793d71dab4974a48dc5e89b", "filename": "src/libextra/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -929,8 +929,8 @@ fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult {\n impl ToJson for Metric {\n     fn to_json(&self) -> json::Json {\n         let mut map = ~TreeMap::new();\n-        map.insert(~\"value\", json::Number(self.value as f64));\n-        map.insert(~\"noise\", json::Number(self.noise as f64));\n+        map.insert(~\"value\", json::Number(self.value));\n+        map.insert(~\"noise\", json::Number(self.noise));\n         json::Object(map)\n     }\n }\n@@ -1132,15 +1132,15 @@ impl BenchHarness {\n             let loop_start = precise_time_ns();\n \n             for p in samples.mut_iter() {\n-                self.bench_n(n as u64, |x| f(x));\n+                self.bench_n(n, |x| f(x));\n                 *p = self.ns_per_iter() as f64;\n             };\n \n             stats::winsorize(samples, 5.0);\n             let summ = stats::Summary::new(samples);\n \n             for p in samples.mut_iter() {\n-                self.bench_n(5 * n as u64, |x| f(x));\n+                self.bench_n(5 * n, |x| f(x));\n                 *p = self.ns_per_iter() as f64;\n             };\n "}, {"sha": "c2948024e28010134beb1bdb49fb2566ab8e52f2", "filename": "src/libextra/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -767,13 +767,13 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n \n         let mut buf = [0];\n         let c = match rdr.read(buf) {\n-            Some(..) => buf[0] as u8 as char,\n+            Some(..) => buf[0] as char,\n             None => break\n         };\n         match c {\n             '%' => {\n                 let ch = match rdr.read(buf) {\n-                    Some(..) => buf[0] as u8 as char,\n+                    Some(..) => buf[0] as char,\n                     None => break\n                 };\n                 match parse_type(s, pos, ch, &mut tm) {"}, {"sha": "fd9040423a3d9517e73422262798c9980ae8314d", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -42,7 +42,7 @@ unsafe fn each_live_alloc(read_next_before: bool,\n         let next_before = (*alloc).next;\n         let uniq = (*alloc).ref_count == managed::RC_MANAGED_UNIQUE;\n \n-        if !f(alloc as *mut raw::Box<()>, uniq) {\n+        if !f(alloc, uniq) {\n             return false;\n         }\n "}, {"sha": "823ca80a8a17608ee6a7e80edec5af7cdcea8cfd", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -725,7 +725,7 @@ pub trait Reader {\n     ///\n     /// `u64`s are 8 bytes long.\n     fn read_be_u64(&mut self) -> u64 {\n-        self.read_be_uint_n(8) as u64\n+        self.read_be_uint_n(8)\n     }\n \n     /// Reads a big-endian `u32`.\n@@ -746,7 +746,7 @@ pub trait Reader {\n     ///\n     /// `i64`s are 8 bytes long.\n     fn read_be_i64(&mut self) -> i64 {\n-        self.read_be_int_n(8) as i64\n+        self.read_be_int_n(8)\n     }\n \n     /// Reads a big-endian `i32`.\n@@ -785,7 +785,7 @@ pub trait Reader {\n     ///\n     /// `u64`s are 8 bytes long.\n     fn read_le_u64(&mut self) -> u64 {\n-        self.read_le_uint_n(8) as u64\n+        self.read_le_uint_n(8)\n     }\n \n     /// Reads a little-endian `u32`.\n@@ -806,7 +806,7 @@ pub trait Reader {\n     ///\n     /// `i64`s are 8 bytes long.\n     fn read_le_i64(&mut self) -> i64 {\n-        self.read_le_int_n(8) as i64\n+        self.read_le_int_n(8)\n     }\n \n     /// Reads a little-endian `i32`.\n@@ -846,7 +846,7 @@ pub trait Reader {\n     /// `u8`s are 1 byte.\n     fn read_u8(&mut self) -> u8 {\n         match self.read_byte() {\n-            Some(b) => b as u8,\n+            Some(b) => b,\n             None => 0\n         }\n     }"}, {"sha": "9fd183ca7704cd2461a5aabea8f1e59567cbf125", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -153,11 +153,11 @@ impl<'a> Parser<'a> {\n             let c = c as u8;\n             // assuming radix is either 10 or 16\n             if c >= '0' as u8 && c <= '9' as u8 {\n-                Some((c - '0' as u8) as u8)\n+                Some(c - '0' as u8)\n             } else if radix > 10 && c >= 'a' as u8 && c < 'a' as u8 + (radix - 10) {\n-                Some((c - 'a' as u8 + 10) as u8)\n+                Some(c - 'a' as u8 + 10)\n             } else if radix > 10 && c >= 'A' as u8 && c < 'A' as u8 + (radix - 10) {\n-                Some((c - 'A' as u8 + 10) as u8)\n+                Some(c - 'A' as u8 + 10)\n             } else {\n                 None\n             }"}, {"sha": "1fcafd7d12f784551e7e24fae51c46607b9864aa", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -209,7 +209,7 @@ impl Reader for StdReader {\n                 io_error::cond.raise(standard_error(EndOfFile));\n                 None\n             }\n-            Ok(amt) => Some(amt as uint),\n+            Ok(amt) => Some(amt),\n             Err(e) => {\n                 io_error::cond.raise(e);\n                 None"}, {"sha": "7dcae69f70d6d78a332732fb7a1428ffa3156a4b", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -344,7 +344,7 @@ pub fn float_to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Float+Round+\n         // round the remaining ones.\n         if limit_digits && dig == digit_count {\n             let ascii2value = |chr: u8| {\n-                char::to_digit(chr as char, radix).unwrap() as uint\n+                char::to_digit(chr as char, radix).unwrap()\n             };\n             let value2ascii = |val: uint| {\n                 char::from_digit(val, radix).unwrap() as u8"}, {"sha": "8dc9372aec929a4ce9ab1c8714b97e6d0be9b74b", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -32,7 +32,7 @@ impl Rand for StandardNormal {\n     fn rand<R:Rng>(rng: &mut R) -> StandardNormal {\n         #[inline]\n         fn pdf(x: f64) -> f64 {\n-            ((-x*x/2.0) as f64).exp()\n+            (-x*x/2.0).exp()\n         }\n         #[inline]\n         fn zero_case<R:Rng>(rng: &mut R, u: f64) -> f64 {"}, {"sha": "c094344f6b9267f55207e08c82dfc7cd8df71c29", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -76,7 +76,7 @@ pub unsafe fn closure_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     assert!(td.is_not_null());\n \n     let total_size = get_box_size(size, (*td).align);\n-    let p = malloc_raw(total_size as uint);\n+    let p = malloc_raw(total_size);\n \n     let alloc = p as *mut raw::Box<()>;\n     (*alloc).type_desc = td;"}, {"sha": "a70698d487cc224b359a8c2a1bb9dc9e7c9f52c2", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -901,7 +901,7 @@ pub fn utf16_chars(v: &[u16], f: |char|) {\n             let mut c: u32 = (u - 0xD800_u16) as u32;\n             c = c << 10;\n             c |= (u2 - 0xDC00_u16) as u32;\n-            c |= 0x1_0000_u32 as u32;\n+            c |= 0x1_0000_u32;\n             f(unsafe { cast::transmute(c) });\n             i += 2u;\n         }\n@@ -987,7 +987,7 @@ pub mod raw {\n     /// Create a Rust string from a *u8 buffer of the given length\n     pub unsafe fn from_buf_len(buf: *u8, len: uint) -> ~str {\n         let mut v: ~[u8] = vec::with_capacity(len);\n-        ptr::copy_memory(v.as_mut_ptr(), buf as *u8, len);\n+        ptr::copy_memory(v.as_mut_ptr(), buf, len);\n         v.set_len(len);\n \n         assert!(is_utf8(v));"}, {"sha": "e11557ff337c27d28e63e1f9d394499544927f4c", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82365501043735dd8ec5eadaa5d30354cee19252/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=82365501043735dd8ec5eadaa5d30354cee19252", "patch": "@@ -66,8 +66,8 @@ impl Mutex {\n     /// Creates a new mutex, with the lock/condition variable pre-initialized\n     pub unsafe fn new() -> Mutex {\n         Mutex {\n-            lock: atomics::AtomicUint::new(imp::init_lock() as uint),\n-            cond: atomics::AtomicUint::new(imp::init_cond() as uint),\n+            lock: atomics::AtomicUint::new(imp::init_lock()),\n+            cond: atomics::AtomicUint::new(imp::init_cond()),\n         }\n     }\n "}]}