{"sha": "79c90b5641d2934864c587380e4f050ab63ac029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YzkwYjU2NDFkMjkzNDg2NGM1ODczODBlNGYwNTBhYjYzYWMwMjk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-24T22:45:14Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:23:40Z"}, "message": "Collect visibility of items during nameres", "tree": {"sha": "b87f4cdb1f6a2b477e111bf611db797f8360e6de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87f4cdb1f6a2b477e111bf611db797f8360e6de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79c90b5641d2934864c587380e4f050ab63ac029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79c90b5641d2934864c587380e4f050ab63ac029", "html_url": "https://github.com/rust-lang/rust/commit/79c90b5641d2934864c587380e4f050ab63ac029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79c90b5641d2934864c587380e4f050ab63ac029/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31dae2aca8f0847df23b6976c3475cea57ada27", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31dae2aca8f0847df23b6976c3475cea57ada27", "html_url": "https://github.com/rust-lang/rust/commit/c31dae2aca8f0847df23b6976c3475cea57ada27"}], "stats": {"total": 82, "additions": 63, "deletions": 19}, "files": [{"sha": "d88076aa77d13742c6789a523f6a73281c6f38d6", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=79c90b5641d2934864c587380e4f050ab63ac029", "patch": "@@ -21,6 +21,7 @@ use crate::{\n     nameres::{BuiltinShadowMode, CrateDefMap},\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n+    visibility::{ResolvedVisibility, Visibility},\n     AdtId, CrateId, EnumVariantId, LocalModuleId, ModuleDefId, ModuleId,\n };\n \n@@ -64,6 +65,32 @@ impl CrateDefMap {\n         self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it))\n     }\n \n+    pub(crate) fn resolve_visibility(\n+        &self,\n+        db: &impl DefDatabase,\n+        original_module: LocalModuleId,\n+        visibility: &Visibility,\n+    ) -> Option<ResolvedVisibility> {\n+        match visibility {\n+            Visibility::Module(path) => {\n+                let (result, remaining) =\n+                    self.resolve_path(db, original_module, &path, BuiltinShadowMode::Module);\n+                if remaining.is_some() {\n+                    return None;\n+                }\n+                let types = result.take_types()?;\n+                match types {\n+                    ModuleDefId::ModuleId(m) => Some(ResolvedVisibility::Module(m)),\n+                    _ => {\n+                        // error: visibility needs to refer to module\n+                        None\n+                    }\n+                }\n+            }\n+            Visibility::Public => Some(ResolvedVisibility::Public),\n+        }\n+    }\n+\n     // Returns Yes if we are sure that additions to `ItemMap` wouldn't change\n     // the result.\n     pub(super) fn resolve_path_fp_with_macro("}, {"sha": "9dabb5b6d5be862acab7e9c37c36ee84d0cbd63b", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=79c90b5641d2934864c587380e4f050ab63ac029", "patch": "@@ -16,12 +16,15 @@ use hir_expand::{\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, AttrsOwner, NameOwner},\n+    ast::{self, AttrsOwner, NameOwner, VisibilityOwner},\n     AstNode,\n };\n use test_utils::tested_by;\n \n-use crate::{attr::Attrs, db::DefDatabase, path::ModPath, FileAstId, HirFileId, InFile};\n+use crate::{\n+    attr::Attrs, db::DefDatabase, path::ModPath, visibility::Visibility, FileAstId, HirFileId,\n+    InFile,\n+};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///\n@@ -138,6 +141,7 @@ pub struct ImportData {\n     pub(super) is_prelude: bool,\n     pub(super) is_extern_crate: bool,\n     pub(super) is_macro_use: bool,\n+    pub(super) visibility: Visibility,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -148,6 +152,7 @@ impl_arena_id!(Def);\n pub(super) struct DefData {\n     pub(super) name: Name,\n     pub(super) kind: DefKind,\n+    pub(super) visibility: Visibility,\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n@@ -218,6 +223,7 @@ impl RawItemsCollector {\n \n     fn add_item(&mut self, current_module: Option<Module>, item: ast::ModuleItem) {\n         let attrs = self.parse_attrs(&item);\n+        let visibility = Visibility::from_ast_with_hygiene(item.visibility(), &self.hygiene);\n         let (kind, name) = match item {\n             ast::ModuleItem::Module(module) => {\n                 self.add_module(current_module, module);\n@@ -266,7 +272,7 @@ impl RawItemsCollector {\n         };\n         if let Some(name) = name {\n             let name = name.as_name();\n-            let def = self.raw_items.defs.alloc(DefData { name, kind });\n+            let def = self.raw_items.defs.alloc(DefData { name, kind, visibility });\n             self.push_item(current_module, attrs, RawItemKind::Def(def));\n         }\n     }\n@@ -302,6 +308,7 @@ impl RawItemsCollector {\n         // FIXME: cfg_attr\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let attrs = self.parse_attrs(&use_item);\n+        let visibility = Visibility::from_ast_with_hygiene(use_item.visibility(), &self.hygiene);\n \n         let mut buf = Vec::new();\n         ModPath::expand_use_item(\n@@ -315,6 +322,7 @@ impl RawItemsCollector {\n                     is_prelude,\n                     is_extern_crate: false,\n                     is_macro_use: false,\n+                    visibility: visibility.clone(),\n                 };\n                 buf.push(import_data);\n             },\n@@ -331,6 +339,8 @@ impl RawItemsCollector {\n     ) {\n         if let Some(name_ref) = extern_crate.name_ref() {\n             let path = ModPath::from_name_ref(&name_ref);\n+            let visibility =\n+                Visibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n             let alias = extern_crate.alias().and_then(|a| a.name()).map(|it| it.as_name());\n             let attrs = self.parse_attrs(&extern_crate);\n             // FIXME: cfg_attr\n@@ -342,6 +352,7 @@ impl RawItemsCollector {\n                 is_prelude: false,\n                 is_extern_crate: true,\n                 is_macro_use,\n+                visibility,\n             };\n             self.push_import(current_module, attrs, import_data);\n         }"}, {"sha": "b57dcf63579a9e7fba82244b84ea612a7a52fd3b", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=79c90b5641d2934864c587380e4f050ab63ac029", "patch": "@@ -238,15 +238,12 @@ impl Resolver {\n         visibility: &Visibility,\n     ) -> Option<ResolvedVisibility> {\n         match visibility {\n-            Visibility::Module(mod_path) => {\n-                let resolved = self.resolve_module_path_in_items(db, &mod_path).take_types()?;\n-                match resolved {\n-                    ModuleDefId::ModuleId(m) => Some(ResolvedVisibility::Module(m)),\n-                    _ => {\n-                        // error: visibility needs to refer to module\n-                        None\n-                    }\n-                }\n+            Visibility::Module(_) => {\n+                let (item_map, module) = match self.module() {\n+                    Some(it) => it,\n+                    None => return None,\n+                };\n+                item_map.resolve_visibility(db, module, visibility)\n             }\n             Visibility::Public => Some(ResolvedVisibility::Public),\n         }"}, {"sha": "8cac52630c2520ddbd62845958d293e9b8849cbe", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=79c90b5641d2934864c587380e4f050ab63ac029", "patch": "@@ -4,7 +4,7 @@ use std::sync::Arc;\n \n use either::Either;\n \n-use hir_expand::InFile;\n+use hir_expand::{hygiene::Hygiene, InFile};\n use ra_syntax::ast::{self, VisibilityOwner};\n \n use crate::{\n@@ -73,14 +73,20 @@ impl Visibility {\n     }\n \n     fn from_ast(db: &impl DefDatabase, node: InFile<Option<ast::Visibility>>) -> Visibility {\n-        let file_id = node.file_id;\n-        let node = match node.value {\n+        Self::from_ast_with_hygiene(node.value, &Hygiene::new(db, node.file_id))\n+    }\n+\n+    pub(crate) fn from_ast_with_hygiene(\n+        node: Option<ast::Visibility>,\n+        hygiene: &Hygiene,\n+    ) -> Visibility {\n+        let node = match node {\n             None => return Visibility::private(),\n             Some(node) => node,\n         };\n         match node.kind() {\n             ast::VisibilityKind::In(path) => {\n-                let path = ModPath::from_src(path, &hir_expand::hygiene::Hygiene::new(db, file_id));\n+                let path = ModPath::from_src(path, hygiene);\n                 let path = match path {\n                     None => return Visibility::private(),\n                     Some(path) => path,"}, {"sha": "e64c83d3352b6da513994668a30d1fb49f193b75", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=79c90b5641d2934864c587380e4f050ab63ac029", "patch": "@@ -1064,6 +1064,7 @@ impl AstNode for ExternCrateItem {\n     }\n }\n impl ast::AttrsOwner for ExternCrateItem {}\n+impl ast::VisibilityOwner for ExternCrateItem {}\n impl ExternCrateItem {\n     pub fn name_ref(&self) -> Option<NameRef> {\n         AstChildren::new(&self.syntax).next()\n@@ -2006,6 +2007,7 @@ impl AstNode for ModuleItem {\n     }\n }\n impl ast::AttrsOwner for ModuleItem {}\n+impl ast::VisibilityOwner for ModuleItem {}\n impl ModuleItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Name {\n@@ -3893,6 +3895,7 @@ impl AstNode for UseItem {\n     }\n }\n impl ast::AttrsOwner for UseItem {}\n+impl ast::VisibilityOwner for UseItem {}\n impl UseItem {\n     pub fn use_tree(&self) -> Option<UseTree> {\n         AstChildren::new(&self.syntax).next()"}, {"sha": "e43a724f0bc7b4992392074556a2d4d175c2cec8", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/79c90b5641d2934864c587380e4f050ab63ac029/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=79c90b5641d2934864c587380e4f050ab63ac029", "patch": "@@ -412,7 +412,7 @@ Grammar(\n         \"ModuleItem\": (\n             enum: [\"StructDef\", \"UnionDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"TypeAliasDef\", \"ImplBlock\",\n                    \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\", \"Module\" ],\n-            traits: [\"AttrsOwner\"],\n+            traits: [\"AttrsOwner\", \"VisibilityOwner\"],\n         ),\n         \"ImplItem\": (\n             enum: [\"FnDef\", \"TypeAliasDef\", \"ConstDef\"],\n@@ -683,7 +683,7 @@ Grammar(\n             ]\n         ),\n         \"UseItem\": (\n-            traits: [\"AttrsOwner\"],\n+            traits: [\"AttrsOwner\", \"VisibilityOwner\"],\n             options: [ \"UseTree\" ],\n         ),\n         \"UseTree\": (\n@@ -696,7 +696,7 @@ Grammar(\n             collections: [(\"use_trees\", \"UseTree\")]\n         ),\n         \"ExternCrateItem\": (\n-            traits: [\"AttrsOwner\"],\n+            traits: [\"AttrsOwner\", \"VisibilityOwner\"],\n             options: [\"NameRef\", \"Alias\"],\n         ),\n         \"ArgList\": ("}]}