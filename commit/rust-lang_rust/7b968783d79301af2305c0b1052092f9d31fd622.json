{"sha": "7b968783d79301af2305c0b1052092f9d31fd622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTY4NzgzZDc5MzAxYWYyMzA1YzBiMTA1MjA5MmY5ZDMxZmQ2MjI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-20T22:23:25Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-26T22:14:43Z"}, "message": "Infer default static/Owned bounds for unbounded heap fns/traits (#7264)", "tree": {"sha": "5249ec3d32b5ecfeb7e20c91c66406246a5b68d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5249ec3d32b5ecfeb7e20c91c66406246a5b68d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b968783d79301af2305c0b1052092f9d31fd622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b968783d79301af2305c0b1052092f9d31fd622", "html_url": "https://github.com/rust-lang/rust/commit/7b968783d79301af2305c0b1052092f9d31fd622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b968783d79301af2305c0b1052092f9d31fd622/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e09afd6d7bb4ca30e572a5214c11284ea1965b", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e09afd6d7bb4ca30e572a5214c11284ea1965b", "html_url": "https://github.com/rust-lang/rust/commit/12e09afd6d7bb4ca30e572a5214c11284ea1965b"}], "stats": {"total": 264, "additions": 177, "deletions": 87}, "files": [{"sha": "cb47c88d3d4fc843d82839223c57eeb9204fadff", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -959,7 +959,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_attributes(ebml_w, item.attrs);\n         match ty.node {\n             ast::ty_path(path, bounds, _) if path.idents.len() == 1 => {\n-                assert!(bounds.is_empty());\n+                assert!(bounds.is_none());\n                 encode_impl_type_basename(ecx, ebml_w,\n                                           ast_util::path_to_ident(path));\n             }"}, {"sha": "1c669631244c36a7c0294d480e3198d266f6dce3", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -128,7 +128,7 @@ fn check_item(item: @item, (cx, visitor): (Context, visit::vt<Context>)) {\n                             // Yes, it's a destructor.\n                             match self_type.node {\n                                 ty_path(_, bounds, path_node_id) => {\n-                                    assert!(bounds.is_empty());\n+                                    assert!(bounds.is_none());\n                                     let struct_def = cx.tcx.def_map.get_copy(\n                                         &path_node_id);\n                                     let struct_did ="}, {"sha": "e06fd8f971791796f7e7f405a271d47beb756e9e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -4195,15 +4195,19 @@ impl Resolver {\n                     }\n                 }\n \n-                for bounds.iter().advance |bound| {\n-                    self.resolve_type_parameter_bound(bound, visitor);\n-                }\n+                do bounds.map |bound_vec| {\n+                    for bound_vec.iter().advance |bound| {\n+                        self.resolve_type_parameter_bound(bound, visitor);\n+                    }\n+                };\n             }\n \n             ty_closure(c) => {\n-                for c.bounds.iter().advance |bound| {\n-                    self.resolve_type_parameter_bound(bound, visitor);\n-                }\n+                do c.bounds.map |bounds| {\n+                    for bounds.iter().advance |bound| {\n+                        self.resolve_type_parameter_bound(bound, visitor);\n+                    }\n+                };\n                 visit_ty(ty, ((), visitor));\n             }\n "}, {"sha": "a43025e4ff9791ad93a5fc5286f28af56b064d7d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -4497,7 +4497,9 @@ pub fn visitor_object_ty(tcx: ctxt) -> (@TraitRef, t) {\n     };\n     let trait_lang_item = tcx.lang_items.ty_visitor();\n     let trait_ref = @TraitRef { def_id: trait_lang_item, substs: substs };\n+    let mut static_trait_bound = EmptyBuiltinBounds();\n+    static_trait_bound.add(BoundStatic);\n     (trait_ref,\n      mk_trait(tcx, trait_ref.def_id, copy trait_ref.substs,\n-              BoxTraitStore, ast::m_imm, EmptyBuiltinBounds()))\n+              BoxTraitStore, ast::m_imm, static_trait_bound))\n }"}, {"sha": "997061a61ba636f30b73b3be783d6788f0f27a6d", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -303,7 +303,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n                                 ty::BoxTraitStore\n                             }\n                         };\n-                        let bounds = conv_builtin_bounds(this.tcx(), bounds);\n+                        let bounds = conv_builtin_bounds(this.tcx(), bounds, trait_store);\n                         return ty::mk_trait(tcx,\n                                             result.def_id,\n                                             copy result.substs,\n@@ -386,7 +386,13 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n                                             bf.abis, &bf.lifetimes, &bf.decl))\n       }\n       ast::ty_closure(ref f) => {\n-          let bounds = conv_builtin_bounds(this.tcx(), &f.bounds);\n+          let bounds = conv_builtin_bounds(this.tcx(), &f.bounds, match f.sigil {\n+              // Use corresponding trait store to figure out default bounds\n+              // if none were specified.\n+              ast::BorrowedSigil => ty::RegionTraitStore(ty::re_empty), // dummy region\n+              ast::OwnedSigil    => ty::UniqTraitStore,\n+              ast::ManagedSigil  => ty::BoxTraitStore,\n+          });\n           let fn_decl = ty_of_closure(this,\n                                       rscope,\n                                       f.sigil,\n@@ -411,7 +417,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n         match a_def {\n             // But don't emit the error if the user meant to do a trait anyway.\n             ast::def_trait(*) => { },\n-            _ if !bounds.is_empty() =>\n+            _ if bounds.is_some() =>\n                 tcx.sess.span_err(ast_ty.span,\n                     \"kind bounds can only be used on trait types\"),\n             _ => { },\n@@ -741,41 +747,60 @@ pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + 'static>(\n     }\n }\n \n-fn conv_builtin_bounds(tcx: ty::ctxt,\n-                       ast_bounds: &OptVec<ast::TyParamBound>)\n+fn conv_builtin_bounds(tcx: ty::ctxt, ast_bounds: &Option<OptVec<ast::TyParamBound>>,\n+                       store: ty::TraitStore)\n                        -> ty::BuiltinBounds {\n     //! Converts a list of bounds from the AST into a `BuiltinBounds`\n     //! struct. Reports an error if any of the bounds that appear\n     //! in the AST refer to general traits and not the built-in traits\n     //! like `Copy` or `Owned`. Used to translate the bounds that\n     //! appear in closure and trait types, where only builtin bounds are\n     //! legal.\n-\n-    let mut builtin_bounds = ty::EmptyBuiltinBounds();\n-    for ast_bounds.iter().advance |ast_bound| {\n-        match *ast_bound {\n-            ast::TraitTyParamBound(b) => {\n-                match lookup_def_tcx(tcx, b.path.span, b.ref_id) {\n-                    ast::def_trait(trait_did) => {\n-                        if try_add_builtin_trait(tcx,\n-                                                 trait_did,\n-                                                 &mut builtin_bounds) {\n-                            loop; // success\n+    //! If no bounds were specified, we choose a \"default\" bound based on\n+    //! the allocation type of the fn/trait, as per issue #7264. The user can\n+    //! override this with an empty bounds list, e.g. \"~fn:()\" or \"~Trait:\".\n+\n+    match (ast_bounds, store) {\n+        (&Some(ref bound_vec), _) => {\n+            let mut builtin_bounds = ty::EmptyBuiltinBounds();\n+            for bound_vec.iter().advance |ast_bound| {\n+                match *ast_bound {\n+                    ast::TraitTyParamBound(b) => {\n+                        match lookup_def_tcx(tcx, b.path.span, b.ref_id) {\n+                            ast::def_trait(trait_did) => {\n+                                if try_add_builtin_trait(tcx,\n+                                                         trait_did,\n+                                                         &mut builtin_bounds) {\n+                                    loop; // success\n+                                }\n+                            }\n+                            _ => { }\n                         }\n+                        tcx.sess.span_fatal(\n+                            b.path.span,\n+                            fmt!(\"only the builtin traits can be used \\\n+                                  as closure or object bounds\"));\n+                    }\n+                    ast::RegionTyParamBound => {\n+                        builtin_bounds.add(ty::BoundStatic);\n                     }\n-                    _ => { }\n                 }\n-                tcx.sess.span_fatal(\n-                    b.path.span,\n-                    fmt!(\"only the builtin traits can be used \\\n-                          as closure or object bounds\"));\n-            }\n-            ast::RegionTyParamBound => {\n-                builtin_bounds.add(ty::BoundStatic);\n             }\n+            builtin_bounds\n+        },\n+        // ~Trait is sugar for ~Trait:Owned.\n+        (&None, ty::UniqTraitStore) => {\n+            let mut set = ty::EmptyBuiltinBounds(); set.add(ty::BoundOwned); set\n+        }\n+        // @Trait is sugar for @Trait:'static.\n+        // &'static Trait is sugar for &'static Trait:'static.\n+        (&None, ty::BoxTraitStore) |\n+        (&None, ty::RegionTraitStore(ty::re_static)) => {\n+            let mut set = ty::EmptyBuiltinBounds(); set.add(ty::BoundStatic); set\n         }\n+        // &'r Trait is sugar for &'r Trait:<no-bounds>.\n+        (&None, ty::RegionTraitStore(*)) => ty::EmptyBuiltinBounds(),\n     }\n-    builtin_bounds\n }\n \n pub fn try_add_builtin_trait(tcx: ty::ctxt,"}, {"sha": "1a7094acf7e4ec279ef701f49d4db5996747d21d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -771,7 +771,11 @@ pub struct TyClosure {\n     purity: purity,\n     onceness: Onceness,\n     decl: fn_decl,\n-    bounds: OptVec<TyParamBound>\n+    // Optional optvec distinguishes between \"fn()\" and \"fn:()\" so we can\n+    // implement issue #7264. None means \"fn()\", which means infer a default\n+    // bound based on pointer sigil during typeck. Some(Empty) means \"fn:()\",\n+    // which means use no bounds (e.g., not even Owned on a ~fn()).\n+    bounds: Option<OptVec<TyParamBound>>,\n }\n \n #[deriving(Eq, Encodable, Decodable)]\n@@ -795,7 +799,7 @@ pub enum ty_ {\n     ty_closure(@TyClosure),\n     ty_bare_fn(@TyBareFn),\n     ty_tup(~[@Ty]),\n-    ty_path(@Path, @OptVec<TyParamBound>, node_id),\n+    ty_path(@Path, @Option<OptVec<TyParamBound>>, node_id), // for #7264; see above\n     ty_mac(mac),\n     // ty_infer means the type should be inferred instead of it having been\n     // specified. This should only appear at the \"top level\" of a type and not"}, {"sha": "2c1b4cfc59155bec02f42ed2a5f1402c999c4cf3", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -46,7 +46,7 @@ pub trait AstBuilder {\n     fn ty_mt(&self, ty: @ast::Ty, mutbl: ast::mutability) -> ast::mt;\n \n     fn ty(&self, span: span, ty: ast::ty_) -> @ast::Ty;\n-    fn ty_path(&self, @ast::Path, @OptVec<ast::TyParamBound>) -> @ast::Ty;\n+    fn ty_path(&self, @ast::Path, @Option<OptVec<ast::TyParamBound>>) -> @ast::Ty;\n     fn ty_ident(&self, span: span, idents: ast::ident) -> @ast::Ty;\n \n     fn ty_rptr(&self, span: span,\n@@ -265,7 +265,7 @@ impl AstBuilder for @ExtCtxt {\n         }\n     }\n \n-    fn ty_path(&self, path: @ast::Path, bounds: @OptVec<ast::TyParamBound>)\n+    fn ty_path(&self, path: @ast::Path, bounds: @Option<OptVec<ast::TyParamBound>>)\n               -> @ast::Ty {\n         self.ty(path.span,\n                 ast::ty_path(path, bounds, self.next_id()))\n@@ -275,7 +275,7 @@ impl AstBuilder for @ExtCtxt {\n     // to generate a bounded existential trait type.\n     fn ty_ident(&self, span: span, ident: ast::ident)\n         -> @ast::Ty {\n-        self.ty_path(self.path_ident(span, ident), @opt_vec::Empty)\n+        self.ty_path(self.path_ident(span, ident), @None)\n     }\n \n     fn ty_rptr(&self,\n@@ -306,7 +306,7 @@ impl AstBuilder for @ExtCtxt {\n                           ],\n                           None,\n                           ~[ ty ]),\n-            @opt_vec::Empty)\n+            @None)\n     }\n \n     fn ty_field_imm(&self, span: span, name: ident, ty: @ast::Ty) -> ast::ty_field {\n@@ -344,7 +344,7 @@ impl AstBuilder for @ExtCtxt {\n     fn ty_vars_global(&self, ty_params: &OptVec<ast::TyParam>) -> ~[@ast::Ty] {\n         opt_vec::take_vec(\n             ty_params.map(|p| self.ty_path(\n-                self.path_global(dummy_sp(), ~[p.ident]), @opt_vec::Empty)))\n+                self.path_global(dummy_sp(), ~[p.ident]), @None)))\n     }\n \n     fn strip_bounds(&self, generics: &Generics) -> Generics {"}, {"sha": "10d9f878bc45187234357d598d4ffbbbf94ce662", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -357,7 +357,7 @@ impl<'self> TraitDef<'self> {\n         // Create the type of `self`.\n         let self_type = cx.ty_path(cx.path_all(span, false, ~[ type_ident ], self_lifetime,\n                                                opt_vec::take_vec(self_ty_params)),\n-                                   @opt_vec::Empty);\n+                                   @None);\n \n         let doc_attr = cx.attribute(\n             span,"}, {"sha": "2f21eba11d7e2b172f917f4a76fe2530d5ed7f3a", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -63,7 +63,7 @@ impl<'self> Path<'self> {\n                  self_generics: &Generics)\n                  -> @ast::Ty {\n         cx.ty_path(self.to_path(cx, span,\n-                                self_ty, self_generics), @opt_vec::Empty)\n+                                self_ty, self_generics), @None)\n     }\n     pub fn to_path(&self,\n                    cx: @ExtCtxt,\n@@ -143,7 +143,7 @@ impl<'self> Ty<'self> {\n             Literal(ref p) => { p.to_ty(cx, span, self_ty, self_generics) }\n             Self  => {\n                 cx.ty_path(self.to_path(cx, span, self_ty, self_generics),\n-                           @opt_vec::Empty)\n+                           @None)\n             }\n             Tuple(ref fields) => {\n                 let ty = if fields.is_empty() {"}, {"sha": "2c5ec0909d9514416155fc3660054f10040be52f", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -59,7 +59,7 @@ impl gen_send for message {\n \n             let pipe_ty = cx.ty_path(\n                 path(~[this.data_name()], span)\n-                .add_tys(cx.ty_vars(&this.generics.ty_params)), @opt_vec::Empty);\n+                .add_tys(cx.ty_vars(&this.generics.ty_params)), @None);\n             let args_ast = vec::append(\n                 ~[cx.arg(span, cx.ident_of(\"pipe\"), pipe_ty)],\n                 args_ast);\n@@ -115,7 +115,7 @@ impl gen_send for message {\n \n             let mut rty = cx.ty_path(path(~[next.data_name()],\n                                           span)\n-                                     .add_tys(copy next_state.tys), @opt_vec::Empty);\n+                                     .add_tys(copy next_state.tys), @None);\n             if try {\n                 rty = cx.ty_option(rty);\n             }\n@@ -144,7 +144,7 @@ impl gen_send for message {\n                              cx.ty_path(\n                                  path(~[this.data_name()], span)\n                                  .add_tys(cx.ty_vars(\n-                                     &this.generics.ty_params)), @opt_vec::Empty))],\n+                                     &this.generics.ty_params)), @None))],\n                     args_ast);\n \n                 let message_args = if arg_names.len() == 0 {\n@@ -190,7 +190,7 @@ impl gen_send for message {\n \n     fn to_ty(&mut self, cx: @ExtCtxt) -> @ast::Ty {\n         cx.ty_path(path(~[cx.ident_of(self.name())], self.span())\n-          .add_tys(cx.ty_vars(&self.get_generics().ty_params)), @opt_vec::Empty)\n+          .add_tys(cx.ty_vars(&self.get_generics().ty_params)), @None)\n     }\n }\n \n@@ -224,7 +224,7 @@ impl to_type_decls for state {\n                                 cx.ty_path(\n                                     path(~[cx.ident_of(dir),\n                                            cx.ident_of(next_name)], span)\n-                                    .add_tys(copy next_state.tys), @opt_vec::Empty))\n+                                    .add_tys(copy next_state.tys), @None))\n               }\n               None => tys\n             };\n@@ -277,8 +277,8 @@ impl to_type_decls for state {\n                                    self.data_name()],\n                                  dummy_sp())\n                             .add_tys(cx.ty_vars(\n-                                &self.generics.ty_params)), @opt_vec::Empty)),\n-                        @opt_vec::Empty),\n+                                &self.generics.ty_params)), @None)),\n+                        @None),\n                     cx.strip_bounds(&self.generics)));\n         }\n         else {\n@@ -297,8 +297,8 @@ impl to_type_decls for state {\n                                    self.data_name()],\n                                         dummy_sp())\n                             .add_tys(cx.ty_vars_global(\n-                                &self.generics.ty_params)), @opt_vec::Empty),\n-                                   self.proto.buffer_ty_path(cx)]), @opt_vec::Empty),\n+                                &self.generics.ty_params)), @None),\n+                                   self.proto.buffer_ty_path(cx)]), @None),\n                     cx.strip_bounds(&self.generics)));\n         };\n         items\n@@ -383,7 +383,7 @@ impl gen_init for protocol {\n         cx.ty_path(path(~[cx.ident_of(\"super\"),\n                           cx.ident_of(\"__Buffer\")],\n                         copy self.span)\n-                   .add_tys(cx.ty_vars_global(&params)), @opt_vec::Empty)\n+                   .add_tys(cx.ty_vars_global(&params)), @None)\n     }\n \n     fn gen_buffer_type(&self, cx: @ExtCtxt) -> @ast::item {"}, {"sha": "0525c6664780e4b7ba457fef1fd62261e936eec0", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -13,7 +13,6 @@ use codemap::span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::pipes::ast_builder::{append_types, path};\n-use opt_vec;\n \n #[deriving(Eq)]\n pub enum direction { send, recv }\n@@ -100,7 +99,7 @@ impl state_ {\n     pub fn to_ty(&self, cx: @ExtCtxt) -> @ast::Ty {\n         cx.ty_path\n             (path(~[cx.ident_of(self.name)],self.span).add_tys(\n-                cx.ty_vars(&self.generics.ty_params)), @opt_vec::Empty)\n+                cx.ty_vars(&self.generics.ty_params)), @None)\n     }\n \n     /// Iterate over the states that can be reached in one message"}, {"sha": "2fc111da453cf1023a5059dc470c2ce2186db59d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -651,6 +651,12 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n             span: fld.new_span(f.span),\n         }\n     }\n+    fn fold_opt_bounds(b: &Option<OptVec<TyParamBound>>, fld: @ast_fold)\n+                        -> Option<OptVec<TyParamBound>> {\n+        do b.map |bounds| {\n+            do bounds.map |bound| { fold_ty_param_bound(bound, fld) }\n+        }\n+    }\n     match *t {\n         ty_nil | ty_bot | ty_infer => copy *t,\n         ty_box(ref mt) => ty_box(fold_mt(mt, fld)),\n@@ -664,7 +670,7 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n                 purity: f.purity,\n                 region: f.region,\n                 onceness: f.onceness,\n-                bounds: f.bounds.map(|x| fold_ty_param_bound(x, fld)),\n+                bounds: fold_opt_bounds(&f.bounds, fld),\n                 decl: fold_fn_decl(&f.decl, fld),\n                 lifetimes: copy f.lifetimes,\n             })\n@@ -679,8 +685,7 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n         }\n         ty_tup(ref tys) => ty_tup(tys.map(|ty| fld.fold_ty(*ty))),\n         ty_path(path, bounds, id) =>\n-            ty_path(fld.fold_path(path),\n-                    @bounds.map(|x| fold_ty_param_bound(x, fld)), fld.new_id(id)),\n+            ty_path(fld.fold_path(path), @fold_opt_bounds(bounds, fld), fld.new_id(id)),\n         ty_fixed_length_vec(ref mt, e) => {\n             ty_fixed_length_vec(\n                 fold_mt(mt, fld),"}, {"sha": "6dd8d4880e3f0d69fb80b8fc0de85d8539263d4e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -490,7 +490,7 @@ mod test {\n                                         idents:~[str_to_ident(\"int\")],\n                                         rp: None,\n                                         types: ~[]},\n-                                                       @opt_vec::Empty, 2),\n+                                                       @None, 2),\n                                     span:sp(4,7)},\n                        pat: @ast::pat{id:1,\n                                       node: ast::pat_ident(ast::bind_infer,\n@@ -526,7 +526,7 @@ mod test {\n                                         idents:~[str_to_ident(\"int\")],\n                                         rp: None,\n                                         types: ~[]},\n-                                                       @opt_vec::Empty, 2),\n+                                                       @None, 2),\n                                                 span:sp(10,13)},\n                                     pat: @ast::pat{id:1, // fixme\n                                                    node: ast::pat_ident("}, {"sha": "d67771fc43547dac4cb01956c3d8d9f604ac35d5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -1047,8 +1047,8 @@ impl Parser {\n \n     // Like the above, but can also parse kind bounds in the case of a\n     // path to be used as a type that might be a trait.\n-    pub fn parse_type_path(&self) -> (@ast::Path, OptVec<TyParamBound>) {\n-        let mut bounds = opt_vec::Empty;\n+    pub fn parse_type_path(&self) -> (@ast::Path, Option<OptVec<TyParamBound>>) {\n+        let mut bounds = None;\n         let path = self.parse_bounded_path_with_tps(false, Some(|| {\n             // Note: this closure might not even get called in the case of a\n             // macro-generated path. But that's the macro parser's job.\n@@ -2884,9 +2884,13 @@ impl Parser {\n     // matches optbounds = ( ( : ( boundseq )? )? )\n     // where   boundseq  = ( bound + boundseq ) | bound\n     // and     bound     = 'static | ty\n-    fn parse_optional_ty_param_bounds(&self) -> OptVec<TyParamBound> {\n+    // Returns \"None\" if there's no colon (e.g. \"T\");\n+    // Returns \"Some(Empty)\" if there's a colon but nothing after (e.g. \"T:\")\n+    // Returns \"Some(stuff)\" otherwise (e.g. \"T:stuff\").\n+    // NB: The None/Some distinction is important for issue #7264.\n+    fn parse_optional_ty_param_bounds(&self) -> Option<OptVec<TyParamBound>> {\n         if !self.eat(&token::COLON) {\n-            return opt_vec::Empty;\n+            return None;\n         }\n \n         let mut result = opt_vec::Empty;\n@@ -2935,13 +2939,15 @@ impl Parser {\n             }\n         }\n \n-        return result;\n+        return Some(result);\n     }\n \n     // matches typaram = IDENT optbounds\n     fn parse_ty_param(&self) -> TyParam {\n         let ident = self.parse_ident();\n-        let bounds = @self.parse_optional_ty_param_bounds();\n+        let opt_bounds = self.parse_optional_ty_param_bounds();\n+        // For typarams we don't care about the difference b/w \"<T>\" and \"<T:>\".\n+        let bounds = @opt_bounds.get_or_default(opt_vec::Empty);\n         ast::TyParam { ident: ident, id: self.get_id(), bounds: bounds }\n     }\n \n@@ -3288,7 +3294,7 @@ impl Parser {\n         let opt_trait = if could_be_trait && self.eat_keyword(keywords::For) {\n             // New-style trait. Reinterpret the type as a trait.\n             let opt_trait_ref = match ty.node {\n-                ty_path(path, @opt_vec::Empty, node_id) => {\n+                ty_path(path, @None, node_id) => {\n                     Some(@trait_ref {\n                         path: path,\n                         ref_id: node_id"}, {"sha": "0be8c31647f63499cfd0f4b5743dfe3c089efd8f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -1488,15 +1488,15 @@ pub fn print_for_decl(s: @ps, loc: @ast::local, coll: @ast::expr) {\n }\n \n fn print_path_(s: @ps, path: @ast::Path, colons_before_params: bool,\n-               opt_bounds: Option<@OptVec<ast::TyParamBound>>) {\n+               opt_bounds: &Option<OptVec<ast::TyParamBound>>) {\n     maybe_print_comment(s, path.span.lo);\n     if path.global { word(s.s, \"::\"); }\n     let mut first = true;\n     for path.idents.iter().advance |id| {\n         if first { first = false; } else { word(s.s, \"::\"); }\n         print_ident(s, *id);\n     }\n-    do opt_bounds.map_consume |bounds| {\n+    do opt_bounds.map |bounds| {\n         print_bounds(s, bounds);\n     };\n     if path.rp.is_some() || !path.types.is_empty() {\n@@ -1520,12 +1520,12 @@ fn print_path_(s: @ps, path: @ast::Path, colons_before_params: bool,\n }\n \n pub fn print_path(s: @ps, path: @ast::Path, colons_before_params: bool) {\n-    print_path_(s, path, colons_before_params, None)\n+    print_path_(s, path, colons_before_params, &None)\n }\n \n pub fn print_bounded_path(s: @ps, path: @ast::Path,\n-                          bounds: @OptVec<ast::TyParamBound>) {\n-    print_path_(s, path, false, Some(bounds))\n+                          bounds: &Option<OptVec<ast::TyParamBound>>) {\n+    print_path_(s, path, false, bounds)\n }\n \n pub fn print_irrefutable_pat(s: @ps, pat: @ast::pat) {\n@@ -1737,7 +1737,7 @@ pub fn print_fn_block_args(s: @ps, decl: &ast::fn_decl) {\n     maybe_print_comment(s, decl.output.span.lo);\n }\n \n-pub fn print_bounds(s: @ps, bounds: @OptVec<ast::TyParamBound>) {\n+pub fn print_bounds(s: @ps, bounds: &OptVec<ast::TyParamBound>) {\n     if !bounds.is_empty() {\n         word(s.s, \":\");\n         let mut first = true;"}, {"sha": "f0a993dbb94233e5693db631ec9f8b5129d4a69b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -246,15 +246,19 @@ pub fn visit_ty<E: Copy>(t: @Ty, (e, v): (E, vt<E>)) {\n         ty_closure(ref f) => {\n             for f.decl.inputs.iter().advance |a| { (v.visit_ty)(a.ty, (copy e, v)); }\n             (v.visit_ty)(f.decl.output, (copy e, v));\n-            visit_ty_param_bounds(&f.bounds, (e, v));\n+            do f.bounds.map |bounds| {\n+                visit_ty_param_bounds(bounds, (copy e, v));\n+            };\n         },\n         ty_bare_fn(ref f) => {\n             for f.decl.inputs.iter().advance |a| { (v.visit_ty)(a.ty, (copy e, v)); }\n             (v.visit_ty)(f.decl.output, (e, v));\n         },\n         ty_path(p, bounds, _) => {\n             visit_path(p, (copy e, v));\n-            visit_ty_param_bounds(bounds, (e, v));\n+            do bounds.map |bounds| {\n+                visit_ty_param_bounds(bounds, (copy e, v));\n+            };\n         },\n         ty_fixed_length_vec(ref mt, ex) => {\n             (v.visit_ty)(mt.ty, (copy e, v));"}, {"sha": "098a395f017445133027e607346ca1680b52e10c", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -12,7 +12,7 @@ struct X {\n     field: @fn:Copy(),\n }\n \n-fn foo(blk: @fn()) -> X {\n+fn foo(blk: @fn:()) -> X {\n     return X { field: blk }; //~ ERROR expected bounds `Copy` but found no bounds\n }\n "}, {"sha": "887346e35e5eae27e9352f51d3b933433106111a", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -1,5 +1,5 @@\n \n-fn take_any(_: &fn()) {\n+fn take_any(_: &fn:()) {\n }\n \n fn take_copyable(_: &fn:Copy()) {\n@@ -11,7 +11,7 @@ fn take_copyable_owned(_: &fn:Copy+Owned()) {\n fn take_const_owned(_: &fn:Const+Owned()) {\n }\n \n-fn give_any(f: &fn()) {\n+fn give_any(f: &fn:()) {\n     take_any(f);\n     take_copyable(f); //~ ERROR expected bounds `Copy` but found no bounds\n     take_copyable_owned(f); //~ ERROR expected bounds `Copy+Owned` but found no bounds"}, {"sha": "adaea1de9bd0f87d13636e89ba6a816481c6794a", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -21,7 +21,7 @@ fn c(x: ~Foo:Const+Owned) {\n     b(x); //~ ERROR expected bounds `Copy+Owned`\n }\n \n-fn d(x: ~Foo) {\n+fn d(x: ~Foo:) {\n     a(x); //~ ERROR found no bounds\n }\n "}, {"sha": "8c641f4c850d7c33ff49a66fbdd2c4770412db1e", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests for \"default\" bounds inferred for traits with no bounds list.\n+\n+trait Foo {\n+}\n+\n+fn a(_x: ~Foo) { // should be same as ~Foo:Owned\n+}\n+\n+fn b(_x: @Foo) { // should be same as ~Foo:'static\n+}\n+\n+fn c(_x: &'static Foo) { // should be same as &'static Foo:'static\n+}\n+\n+fn d(x: ~Foo:Const) {\n+    a(x); //~ ERROR expected bounds `Owned`\n+}\n+\n+fn e(x: @Foo:Const) {\n+    b(x); //~ ERROR expected bounds `'static`\n+}\n+\n+fn f(x: &'static Foo:Const) {\n+    c(x); //~ ERROR expected bounds `'static`\n+}\n+\n+fn main() { }"}, {"sha": "171f2bbb872e091cec0597e1bd2401e71049b65d", "filename": "src/test/run-pass/closure-bounds-copyable-squiggle-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -12,7 +12,7 @@\n \n // Tests correct copying of heap closures' environments.\n \n-fn foo(x: ~fn:Copy()) -> (~fn(), ~fn()) {\n+fn foo(x: ~fn:Copy()) -> (~fn:(), ~fn:()) {\n     (copy x, x)\n }\n fn main() {"}, {"sha": "9bfda034878ba28b6afd1361a8cb9833196e4862", "filename": "src/test/run-pass/closure-bounds-squiggle-closure-as-copyable-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -15,7 +15,7 @@\n fn bar<T: Copy>(x: T) -> (T, T) {\n     (copy x, x)\n }\n-fn foo(x: ~fn:Copy()) -> (~fn(), ~fn()) {\n+fn foo(x: ~fn:Copy()) -> (~fn:(), ~fn:()) {\n     bar(x)\n }\n fn main() {"}, {"sha": "e733400527b286353ce159c1d4311fad082846b6", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -14,9 +14,9 @@ impl<A:Copy> repeat<A> for @A {\n     fn get(&self) -> A { copy **self }\n }\n \n-fn repeater<A:Copy>(v: @A) -> @repeat<A> {\n+fn repeater<A:Copy>(v: @A) -> @repeat:<A> {\n     // Note: owned kind is not necessary as A appears in the trait type\n-    @v as @repeat<A> // No\n+    @v as @repeat:<A> // No\n }\n \n pub fn main() {"}, {"sha": "049d5305ca427f68b0cad94024e3c0e4bdb26606", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -22,13 +22,13 @@ impl<'self> get_ctxt<'self> for HasCtxt<'self> {\n     }\n }\n \n-fn get_v(gc: @get_ctxt) -> uint {\n+fn get_v(gc: @get_ctxt:) -> uint {\n     gc.get_ctxt().v\n }\n \n pub fn main() {\n     let ctxt = Ctxt { v: 22 };\n     let hc = HasCtxt { c: &ctxt };\n \n-    assert_eq!(get_v(@hc as @get_ctxt), 22);\n+    assert_eq!(get_v(@hc as @get_ctxt:), 22);\n }"}, {"sha": "5bfbf84d8acacb585b5aa7d5151ddb6ab8be8fc5", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b968783d79301af2305c0b1052092f9d31fd622/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=7b968783d79301af2305c0b1052092f9d31fd622", "patch": "@@ -11,7 +11,7 @@\n trait Foo {\n }\n \n-fn a(_x: ~Foo) {\n+fn a(_x: ~Foo:) {\n }\n \n fn b(_x: ~Foo:Owned) {\n@@ -25,4 +25,8 @@ fn d(x: ~Foo:Owned+Copy) {\n     b(x);\n }\n \n+fn e(x: ~Foo) { // sugar for ~Foo:Owned\n+    b(x);\n+}\n+\n fn main() { }"}]}