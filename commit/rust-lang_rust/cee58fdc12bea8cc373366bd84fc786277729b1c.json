{"sha": "cee58fdc12bea8cc373366bd84fc786277729b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZTU4ZmRjMTJiZWE4Y2MzNzMzNjZiZDg0ZmM3ODYyNzc3MjliMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-31T01:22:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-31T01:22:07Z"}, "message": "Auto merge of #59566 - cuviper:llvm-rebuild-sha, r=Mark-Simulacrum\n\nUse the existing LLVM GitInfo for checking rebuilds\n\nFixes #59565", "tree": {"sha": "165131d98929eda0d6f449b8c72986a93ee29217", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/165131d98929eda0d6f449b8c72986a93ee29217"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cee58fdc12bea8cc373366bd84fc786277729b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cee58fdc12bea8cc373366bd84fc786277729b1c", "html_url": "https://github.com/rust-lang/rust/commit/cee58fdc12bea8cc373366bd84fc786277729b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cee58fdc12bea8cc373366bd84fc786277729b1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0fcfa7d6135ecfdfebd325683890ae6dcf5eb18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fcfa7d6135ecfdfebd325683890ae6dcf5eb18", "html_url": "https://github.com/rust-lang/rust/commit/b0fcfa7d6135ecfdfebd325683890ae6dcf5eb18"}, {"sha": "49b65e683dbf7b710deaede48a66211ce924c851", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b65e683dbf7b710deaede48a66211ce924c851", "html_url": "https://github.com/rust-lang/rust/commit/49b65e683dbf7b710deaede48a66211ce924c851"}], "stats": {"total": 77, "additions": 34, "deletions": 43}, "files": [{"sha": "e42b073322e2883e38ffa8f44c0a3b7c5ebeeabd", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=cee58fdc12bea8cc373366bd84fc786277729b1c", "patch": "@@ -11,7 +11,6 @@ use std::process::Command;\n use build_helper::output;\n \n use crate::Build;\n-use crate::config::Config;\n \n // The version number\n pub const CFG_RELEASE_NUM: &str = \"1.35.0\";\n@@ -27,20 +26,20 @@ struct Info {\n }\n \n impl GitInfo {\n-    pub fn new(config: &Config, dir: &Path) -> GitInfo {\n+    pub fn new(ignore_git: bool, dir: &Path) -> GitInfo {\n         // See if this even begins to look like a git dir\n-        if config.ignore_git || !dir.join(\".git\").exists() {\n+        if ignore_git || !dir.join(\".git\").exists() {\n             return GitInfo { inner: None }\n         }\n \n         // Make sure git commands work\n-        let out = Command::new(\"git\")\n-                          .arg(\"rev-parse\")\n-                          .current_dir(dir)\n-                          .output()\n-                          .expect(\"failed to spawn git\");\n-        if !out.status.success() {\n-            return GitInfo { inner: None }\n+        match Command::new(\"git\")\n+            .arg(\"rev-parse\")\n+            .current_dir(dir)\n+            .output()\n+        {\n+            Ok(ref out) if out.status.success() => {}\n+            _ => return GitInfo { inner: None },\n         }\n \n         // Ok, let's scrape some info"}, {"sha": "2394ae7fb79139292a312c7dbc4d8997d02ecb7b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=cee58fdc12bea8cc373366bd84fc786277729b1c", "patch": "@@ -360,14 +360,18 @@ impl Build {\n             }\n             None => false,\n         };\n-        let rust_info = channel::GitInfo::new(&config, &src);\n-        let cargo_info = channel::GitInfo::new(&config, &src.join(\"src/tools/cargo\"));\n-        let rls_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rls\"));\n-        let clippy_info = channel::GitInfo::new(&config, &src.join(\"src/tools/clippy\"));\n-        let miri_info = channel::GitInfo::new(&config, &src.join(\"src/tools/miri\"));\n-        let rustfmt_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rustfmt\"));\n-        let in_tree_llvm_info = channel::GitInfo::new(&config, &src.join(\"src/llvm-project\"));\n-        let emscripten_llvm_info = channel::GitInfo::new(&config, &src.join(\"src/llvm-emscripten\"));\n+\n+        let ignore_git = config.ignore_git;\n+        let rust_info = channel::GitInfo::new(ignore_git, &src);\n+        let cargo_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/cargo\"));\n+        let rls_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rls\"));\n+        let clippy_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/clippy\"));\n+        let miri_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/miri\"));\n+        let rustfmt_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rustfmt\"));\n+\n+        // we always try to use git for LLVM builds\n+        let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n+        let emscripten_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-emscripten\"));\n \n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),"}, {"sha": "fde40b0d1b407ad038d71cb4336574fbfafe4368", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=cee58fdc12bea8cc373366bd84fc786277729b1c", "patch": "@@ -67,45 +67,38 @@ impl Step for Llvm {\n             }\n         }\n \n-        let (submodule, root, out_dir, llvm_config_ret_dir) = if emscripten {\n+        let (llvm_info, root, out_dir, llvm_config_ret_dir) = if emscripten {\n+            let info = &builder.emscripten_llvm_info;\n             let dir = builder.emscripten_llvm_out(target);\n             let config_dir = dir.join(\"bin\");\n-            (\"src/llvm-emscripten\", \"src/llvm-emscripten\", dir, config_dir)\n+            (info, \"src/llvm-emscripten\", dir, config_dir)\n         } else {\n+            let info = &builder.in_tree_llvm_info;\n             let mut dir = builder.llvm_out(builder.config.build);\n             if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n                 dir.push(\"build\");\n             }\n-            (\"src/llvm-project\", \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n+            (info, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n         };\n \n-        let git_output = t!(Command::new(\"git\")\n-            .args(&[\"rev-parse\", \"--verify\", &format!(\"@:./{}\", submodule)])\n-            .current_dir(&builder.src)\n-            .output());\n-\n-        let llvm_commit = if git_output.status.success() {\n-            Some(git_output.stdout)\n-        } else {\n+        if !llvm_info.is_git() {\n             println!(\n-                \"git could not determine the LLVM submodule commit hash ({}). \\\n+                \"git could not determine the LLVM submodule commit hash. \\\n                 Assuming that an LLVM build is necessary.\",\n-                String::from_utf8_lossy(&git_output.stderr),\n             );\n-            None\n-        };\n+        }\n \n         let build_llvm_config = llvm_config_ret_dir\n             .join(exe(\"llvm-config\", &*builder.config.build));\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n \n-        if let Some(llvm_commit) = &llvm_commit {\n+        if let Some(llvm_commit) = llvm_info.sha() {\n             if done_stamp.exists() {\n                 let done_contents = t!(fs::read(&done_stamp));\n \n                 // If LLVM was already built previously and the submodule's commit didn't change\n                 // from the previous build, then no action is required.\n-                if done_contents == llvm_commit.as_slice() {\n+                if done_contents == llvm_commit.as_bytes() {\n                     return build_llvm_config\n                 }\n             }\n@@ -258,11 +251,6 @@ impl Step for Llvm {\n                 channel::CFG_RELEASE_NUM,\n                 builder.config.channel,\n             );\n-            let llvm_info = if self.emscripten {\n-                &builder.emscripten_llvm_info\n-            } else {\n-                &builder.in_tree_llvm_info\n-            };\n             if let Some(sha) = llvm_info.sha_short() {\n                 default_suffix.push_str(\"-\");\n                 default_suffix.push_str(sha);\n@@ -295,8 +283,8 @@ impl Step for Llvm {\n \n         cfg.build();\n \n-        if let Some(llvm_commit) = llvm_commit {\n-            t!(fs::write(&done_stamp, &llvm_commit));\n+        if let Some(llvm_commit) = llvm_info.sha() {\n+            t!(fs::write(&done_stamp, llvm_commit));\n         }\n \n         build_llvm_config"}, {"sha": "23775a91e4ce00622a95463cbc2552b324d33f91", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee58fdc12bea8cc373366bd84fc786277729b1c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=cee58fdc12bea8cc373366bd84fc786277729b1c", "patch": "@@ -235,7 +235,7 @@ pub fn prepare_tool_cargo(\n     cargo.env(\"CFG_VERSION\", builder.rust_version());\n     cargo.env(\"CFG_RELEASE_NUM\", channel::CFG_RELEASE_NUM);\n \n-    let info = GitInfo::new(&builder.config, &dir);\n+    let info = GitInfo::new(builder.config.ignore_git, &dir);\n     if let Some(sha) = info.sha() {\n         cargo.env(\"CFG_COMMIT_HASH\", sha);\n     }"}]}