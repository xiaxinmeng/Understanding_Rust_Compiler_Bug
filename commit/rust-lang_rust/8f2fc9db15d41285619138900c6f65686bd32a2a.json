{"sha": "8f2fc9db15d41285619138900c6f65686bd32a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMmZjOWRiMTVkNDEyODU2MTkxMzg5MDBjNmY2NTY4NmJkMzJhMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T12:17:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T12:17:06Z"}, "message": "Auto merge of #39887 - nikomatsakis:issue-39292, r=arielb1\n\nerase late bound regions in `get_vtable_methods()`\n\nHigher-ranked object types can otherwise cause late-bound regions to\nsneak into the substs, leading to the false conclusion that some method\nis unreachable.\n\nr? @arielb1, who wrote the heart of this patch anyhow\n\nFixes #39292", "tree": {"sha": "e0d56fbc406bc04f42a4d04445bcb579bbd5ddf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d56fbc406bc04f42a4d04445bcb579bbd5ddf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f2fc9db15d41285619138900c6f65686bd32a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2fc9db15d41285619138900c6f65686bd32a2a", "html_url": "https://github.com/rust-lang/rust/commit/8f2fc9db15d41285619138900c6f65686bd32a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f2fc9db15d41285619138900c6f65686bd32a2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "html_url": "https://github.com/rust-lang/rust/commit/3c97cbe4c29271bccaf29204310aa0c2779ab8f4"}, {"sha": "f2d8a0019188d4db19afc22a3fd8e3df28b28da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d8a0019188d4db19afc22a3fd8e3df28b28da9", "html_url": "https://github.com/rust-lang/rust/commit/f2d8a0019188d4db19afc22a3fd8e3df28b28da9"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "58ab713ef27308e220dd15cfe15ff5f6734dbf4f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f2fc9db15d41285619138900c6f65686bd32a2a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2fc9db15d41285619138900c6f65686bd32a2a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=8f2fc9db15d41285619138900c6f65686bd32a2a", "patch": "@@ -628,6 +628,11 @@ pub fn get_vtable_methods<'a, 'tcx>(\n                                           |_, _| tcx.mk_region(ty::ReErased),\n                                           |def, _| trait_ref.substs().type_for_def(def));\n \n+            // the trait type may have higher-ranked lifetimes in it;\n+            // so erase them if they appear, so that we get the type\n+            // at some particular call site\n+            let substs = tcx.erase_late_bound_regions_and_normalize(&ty::Binder(substs));\n+\n             // It's possible that the method relies on where clauses that\n             // do not hold for this particular set of type parameters.\n             // Note that this method could then never be called, so we"}, {"sha": "b5f948442b774d486aa95075981eab3ec1b827e1", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f2fc9db15d41285619138900c6f65686bd32a2a/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2fc9db15d41285619138900c6f65686bd32a2a/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=8f2fc9db15d41285619138900c6f65686bd32a2a", "patch": "@@ -1090,13 +1090,16 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a,\n                                                    trait_ty: ty::Ty<'tcx>,\n                                                    impl_ty: ty::Ty<'tcx>,\n                                                    output: &mut Vec<TransItem<'tcx>>) {\n-    assert!(!trait_ty.needs_subst() && !impl_ty.needs_subst());\n+    assert!(!trait_ty.needs_subst() && !trait_ty.has_escaping_regions() &&\n+            !impl_ty.needs_subst() && !impl_ty.has_escaping_regions());\n \n     if let ty::TyDynamic(ref trait_ty, ..) = trait_ty.sty {\n         if let Some(principal) = trait_ty.principal() {\n             let poly_trait_ref = principal.with_self_ty(scx.tcx(), impl_ty);\n             let param_substs = scx.tcx().intern_substs(&[]);\n \n+            assert!(!poly_trait_ref.has_escaping_regions());\n+\n             // Walk all methods of the trait, including those of its supertraits\n             let methods = traits::get_vtable_methods(scx.tcx(), poly_trait_ref);\n             let methods = methods.filter_map(|method| method)"}, {"sha": "dc2b21f3470e8c22e42dbffe22b4a89ded89a724", "filename": "src/test/run-pass/issue-39292.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8f2fc9db15d41285619138900c6f65686bd32a2a/src%2Ftest%2Frun-pass%2Fissue-39292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2fc9db15d41285619138900c6f65686bd32a2a/src%2Ftest%2Frun-pass%2Fissue-39292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-39292.rs?ref=8f2fc9db15d41285619138900c6f65686bd32a2a", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #39292. The object vtable was being\n+// incorrectly left with a null pointer.\n+\n+trait Foo<T> {\n+    fn print<'a>(&'a self) where T: 'a { println!(\"foo\"); }\n+}\n+\n+impl<'a> Foo<&'a ()> for () { }\n+\n+trait Bar: for<'a> Foo<&'a ()> { }\n+\n+impl Bar for () {}\n+\n+fn main() {\n+    (&() as &Bar).print(); // Segfault\n+}"}]}