{"sha": "e6485ed22a617ab0d122cdd616cb62c31b920a57", "node_id": "C_kwDOAAsO6NoAKGU2NDg1ZWQyMmE2MTdhYjBkMTIyY2RkNjE2Y2I2MmMzMWI5MjBhNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T11:51:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T11:51:41Z"}, "message": "Auto merge of #105733 - compiler-errors:ty-ct-late-flags, r=cjgillot\n\nAdd type flags support for `Ty` and `Const` late-bound variables\n\nI've been working on `for<T>` binders, and these will eventually be useful.", "tree": {"sha": "84660888107ccdca2b63b74fd1601e0269abf89c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84660888107ccdca2b63b74fd1601e0269abf89c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6485ed22a617ab0d122cdd616cb62c31b920a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6485ed22a617ab0d122cdd616cb62c31b920a57", "html_url": "https://github.com/rust-lang/rust/commit/e6485ed22a617ab0d122cdd616cb62c31b920a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6485ed22a617ab0d122cdd616cb62c31b920a57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "html_url": "https://github.com/rust-lang/rust/commit/8ea62f6c30c94778d9146ddc26c8520ed2b50a58"}, {"sha": "3c41003873ed16dc415b18ee65602438be3fe1e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c41003873ed16dc415b18ee65602438be3fe1e4", "html_url": "https://github.com/rust-lang/rust/commit/3c41003873ed16dc415b18ee65602438be3fe1e4"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "1afe6242403786d8a5415b4a7d25c23b380e435c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e6485ed22a617ab0d122cdd616cb62c31b920a57", "patch": "@@ -1912,7 +1912,7 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n             }\n             let pred = obligation.predicate;\n             // Match the existing behavior.\n-            if pred.is_global() && !pred.has_late_bound_regions() {\n+            if pred.is_global() && !pred.has_late_bound_vars() {\n                 let pred = self.normalize(span, None, pred);\n                 let hir_node = tcx.hir().find(self.body_id);\n "}, {"sha": "9e4f90caab0b5957b2469fc6520d7771bd3b096d", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=e6485ed22a617ab0d122cdd616cb62c31b920a57", "patch": "@@ -21,7 +21,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         // If there's nothing to erase avoid performing the query at all\n-        if !value.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND | TypeFlags::HAS_FREE_REGIONS) {\n+        if !value.has_type_flags(TypeFlags::HAS_LATE_BOUND | TypeFlags::HAS_FREE_REGIONS) {\n             return value;\n         }\n         debug!(\"erase_regions({:?})\", value);"}, {"sha": "b7eafc4b437385ac986f29b2c0ef8d09f4972246", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=e6485ed22a617ab0d122cdd616cb62c31b920a57", "patch": "@@ -59,8 +59,18 @@ impl FlagComputation {\n     {\n         let mut computation = FlagComputation::new();\n \n-        if !value.bound_vars().is_empty() {\n-            computation.flags = computation.flags | TypeFlags::HAS_RE_LATE_BOUND;\n+        for bv in value.bound_vars() {\n+            match bv {\n+                ty::BoundVariableKind::Ty(_) => {\n+                    computation.flags |= TypeFlags::HAS_TY_LATE_BOUND;\n+                }\n+                ty::BoundVariableKind::Region(_) => {\n+                    computation.flags |= TypeFlags::HAS_RE_LATE_BOUND;\n+                }\n+                ty::BoundVariableKind::Const => {\n+                    computation.flags |= TypeFlags::HAS_CT_LATE_BOUND;\n+                }\n+            }\n         }\n \n         f(&mut computation, value.skip_binder());\n@@ -131,6 +141,7 @@ impl FlagComputation {\n \n             &ty::Bound(debruijn, _) => {\n                 self.add_bound_var(debruijn);\n+                self.add_flags(TypeFlags::HAS_TY_LATE_BOUND);\n             }\n \n             &ty::Placeholder(..) => {\n@@ -303,6 +314,7 @@ impl FlagComputation {\n             }\n             ty::ConstKind::Bound(debruijn, _) => {\n                 self.add_bound_var(debruijn);\n+                self.add_flags(TypeFlags::HAS_CT_LATE_BOUND);\n             }\n             ty::ConstKind::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_CT_PARAM);"}, {"sha": "ca445558131380e364370ea518fb37a69a4c7bfa", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=e6485ed22a617ab0d122cdd616cb62c31b920a57", "patch": "@@ -165,6 +165,14 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     fn has_late_bound_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n     }\n+    /// True if there are any late-bound non-region variables\n+    fn has_non_region_late_bound(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_LATE_BOUND - TypeFlags::HAS_RE_LATE_BOUND)\n+    }\n+    /// True if there are any late-bound variables\n+    fn has_late_bound_vars(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_LATE_BOUND)\n+    }\n \n     /// Indicates whether this value still has parameters/placeholders/inference variables\n     /// which could be replaced later, in a way that would change the results of `impl`"}, {"sha": "0d446d654dc5ce99ede511fb1a4c6f7fc149f279", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=e6485ed22a617ab0d122cdd616cb62c31b920a57", "patch": "@@ -206,6 +206,7 @@ impl<'tcx> SymbolMangler<'tcx> {\n     where\n         T: TypeVisitable<'tcx>,\n     {\n+        // FIXME(non-lifetime-binders): What to do here?\n         let regions = if value.has_late_bound_regions() {\n             self.tcx.collect_referenced_late_bound_regions(value)\n         } else {"}, {"sha": "3f14491f8032ffa069742c9b506c72feb58e3891", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e6485ed22a617ab0d122cdd616cb62c31b920a57", "patch": "@@ -755,7 +755,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // contain the \"'static\" lifetime (any other lifetime\n                     // would either be late-bound or local), so it is guaranteed\n                     // to outlive any other lifetime\n-                    if pred.0.is_global() && !pred.0.has_late_bound_regions() {\n+                    if pred.0.is_global() && !pred.0.has_late_bound_vars() {\n                         Ok(EvaluatedToOk)\n                     } else {\n                         Ok(EvaluatedToOkModuloRegions)\n@@ -1785,9 +1785,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Check if a bound would previously have been removed when normalizing\n         // the param_env so that it can be given the lowest priority. See\n         // #50825 for the motivation for this.\n-        let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {\n-            cand.is_global() && !cand.has_late_bound_regions()\n-        };\n+        let is_global =\n+            |cand: &ty::PolyTraitPredicate<'tcx>| cand.is_global() && !cand.has_late_bound_vars();\n \n         // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,\n         // `DiscriminantKindCandidate`, `ConstDestructCandidate`"}, {"sha": "44004cb0be1e9dbf9ae4c4e6b850a0fe677d894a", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6485ed22a617ab0d122cdd616cb62c31b920a57/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=e6485ed22a617ab0d122cdd616cb62c31b920a57", "patch": "@@ -241,22 +241,30 @@ bitflags! {\n         /// Basically anything but `ReLateBound` and `ReErased`.\n         const HAS_FREE_REGIONS            = 1 << 14;\n \n-        /// Does this have any `ReLateBound` regions? Used to check\n-        /// if a global bound is safe to evaluate.\n+        /// Does this have any `ReLateBound` regions?\n         const HAS_RE_LATE_BOUND           = 1 << 15;\n+        /// Does this have any `Bound` types?\n+        const HAS_TY_LATE_BOUND           = 1 << 16;\n+        /// Does this have any `ConstKind::Bound` consts?\n+        const HAS_CT_LATE_BOUND           = 1 << 17;\n+        /// Does this have any bound variables?\n+        /// Used to check if a global bound is safe to evaluate.\n+        const HAS_LATE_BOUND              = TypeFlags::HAS_RE_LATE_BOUND.bits\n+                                          | TypeFlags::HAS_TY_LATE_BOUND.bits\n+                                          | TypeFlags::HAS_CT_LATE_BOUND.bits;\n \n         /// Does this have any `ReErased` regions?\n-        const HAS_RE_ERASED               = 1 << 16;\n+        const HAS_RE_ERASED               = 1 << 18;\n \n         /// Does this value have parameters/placeholders/inference variables which could be\n         /// replaced later, in a way that would change the results of `impl` specialization?\n-        const STILL_FURTHER_SPECIALIZABLE = 1 << 17;\n+        const STILL_FURTHER_SPECIALIZABLE = 1 << 19;\n \n         /// Does this value have `InferTy::FreshTy/FreshIntTy/FreshFloatTy`?\n-        const HAS_TY_FRESH                = 1 << 18;\n+        const HAS_TY_FRESH                = 1 << 20;\n \n         /// Does this value have `InferConst::Fresh`?\n-        const HAS_CT_FRESH                = 1 << 19;\n+        const HAS_CT_FRESH                = 1 << 21;\n     }\n }\n "}]}