{"sha": "cad760b7703a961e5dbe7b02966c8dd5df742431", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZDc2MGI3NzAzYTk2MWU1ZGJlN2IwMjk2NmM4ZGQ1ZGY3NDI0MzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-12T05:31:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-17T18:44:00Z"}, "message": "librustc: Make addresses of immutable statics insignificant unless\n`#[inline(never)]` is used.\n\nCloses #8958.\n\nThis can break some code that relied on the addresses of statics\nbeing distinct; add `#[inline(never)]` to the affected statics.\n\n[breaking-change]", "tree": {"sha": "343f2bc13eff3dd87f2bdbf74c74522e8521a952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/343f2bc13eff3dd87f2bdbf74c74522e8521a952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cad760b7703a961e5dbe7b02966c8dd5df742431", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cad760b7703a961e5dbe7b02966c8dd5df742431", "html_url": "https://github.com/rust-lang/rust/commit/cad760b7703a961e5dbe7b02966c8dd5df742431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cad760b7703a961e5dbe7b02966c8dd5df742431/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db298145c702c49e5f3cc17adeafe58c8b1bbd6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/db298145c702c49e5f3cc17adeafe58c8b1bbd6a", "html_url": "https://github.com/rust-lang/rust/commit/db298145c702c49e5f3cc17adeafe58c8b1bbd6a"}], "stats": {"total": 93, "additions": 55, "deletions": 38}, "files": [{"sha": "001f171ce0846702ec14d7395ce63db8e69a8d60", "filename": "src/doc/rust.md", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -1829,8 +1829,6 @@ type int8_t = i8;\n \n ### Static-only attributes\n \n-- `address_insignificant` - references to this static may alias with\n-  references to other statics, potentially of unrelated type.\n - `thread_local` - on a `static mut`, this signals that the value of this\n   static may change depending on the current thread. The exact consequences of\n   this are implementation-defined.\n@@ -2141,13 +2139,22 @@ These types help drive the compiler's analysis\n ### Inline attributes\n \n The inline attribute is used to suggest to the compiler to perform an inline\n-expansion and place a copy of the function in the caller rather than generating\n-code to call the function where it is defined.\n+expansion and place a copy of the function or static in the caller rather than\n+generating code to call the function or access the static where it is defined.\n \n The compiler automatically inlines functions based on internal heuristics.\n Incorrectly inlining functions can actually making the program slower, so it\n should be used with care.\n \n+Immutable statics are always considered inlineable\n+unless marked with `#[inline(never)]`.\n+It is undefined\n+whether two different inlineable statics\n+have the same memory address.\n+In other words,\n+the compiler is free\n+to collapse duplicate inlineable statics together.\n+\n `#[inline]` and `#[inline(always)]` always causes the function to be serialized\n into crate metadata to allow cross-crate inlining.\n "}, {"sha": "09f1c81cee6e61d891be4224f98c33bcfba171cc", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -1087,7 +1087,6 @@ fn check_unused_attribute(cx: &Context, attr: &ast::Attribute) {\n \n         // FIXME: #14406 these are processed in trans, which happens after the\n         // lint pass\n-        \"address_insignificant\",\n         \"cold\",\n         \"inline\",\n         \"link\","}, {"sha": "682dcb2b709f396ff8bdfb1b8a61689002137838", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -26,15 +26,20 @@ use std::collections::HashSet;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::ast_util::{is_local};\n+use syntax::ast_util::is_local;\n+use syntax::ast_util;\n+use syntax::attr::{InlineAlways, InlineHint, InlineNever, InlineNone};\n use syntax::attr;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n // Returns true if the given set of attributes contains the `#[inline]`\n // attribute.\n fn attributes_specify_inlining(attrs: &[ast::Attribute]) -> bool {\n-    attr::contains_name(attrs, \"inline\")\n+    match attr::find_inline_attr(attrs) {\n+        InlineNone | InlineNever => false,\n+        InlineAlways | InlineHint => true,\n+    }\n }\n \n // Returns true if the given set of generics implies that the item it's\n@@ -118,8 +123,8 @@ impl<'a> Visitor<()> for ReachableContext<'a> {\n                         match def {\n                             // If this path leads to a static, then we may have\n                             // to do some work to figure out whether the static\n-                            // is indeed reachable (address_insignificant\n-                            // statics are *never* reachable).\n+                            // is indeed reachable. (Inlineable statics are\n+                            // never reachable.)\n                             def::DefStatic(..) => {\n                                 self.worklist.push(def_id.node);\n                             }\n@@ -281,9 +286,10 @@ impl<'a> ReachableContext<'a> {\n \n                     // Statics with insignificant addresses are not reachable\n                     // because they're inlined specially into all other crates.\n-                    ast::ItemStatic(_, _, ref init) => {\n-                        if attr::contains_name(item.attrs.as_slice(),\n-                                               \"address_insignificant\") {\n+                    ast::ItemStatic(_, mutbl, ref init) => {\n+                        if !ast_util::static_has_significant_address(\n+                                mutbl,\n+                                item.attrs.as_slice()) {\n                             self.reachable_symbols.remove(&search_item);\n                         }\n                         visit::walk_expr(self, &**init, ());"}, {"sha": "c1ebba10e8247b9b6854ccc620790c209590ad6f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -1994,7 +1994,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n             let sym = exported_name(ccx, id, ty, i.attrs.as_slice());\n \n             let v = match i.node {\n-                ast::ItemStatic(_, _, ref expr) => {\n+                ast::ItemStatic(_, mutbl, ref expr) => {\n                     // If this static came from an external crate, then\n                     // we need to get the symbol from csearch instead of\n                     // using the current crate's name/version\n@@ -2029,28 +2029,24 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n                         // Apply the `unnamed_addr` attribute if\n                         // requested\n-                        if attr::contains_name(i.attrs.as_slice(),\n-                                               \"address_insignificant\") {\n-                            if ccx.reachable.contains(&id) {\n-                                ccx.sess().span_bug(i.span,\n-                                    \"insignificant static is reachable\");\n-                            }\n+                        if !ast_util::static_has_significant_address(\n+                                mutbl,\n+                                i.attrs.as_slice()) {\n                             lib::llvm::SetUnnamedAddr(g, true);\n \n                             // This is a curious case where we must make\n                             // all of these statics inlineable. If a\n-                            // global is tagged as\n-                            // address_insignificant, then LLVM won't\n-                            // coalesce globals unless they have an\n-                            // internal linkage type. This means that\n+                            // global is not tagged as `#[inline(never)]`,\n+                            // then LLVM won't coalesce globals unless they\n+                            // have an internal linkage type. This means that\n                             // external crates cannot use this global.\n                             // This is a problem for things like inner\n                             // statics in generic functions, because the\n                             // function will be inlined into another\n                             // crate and then attempt to link to the\n                             // static in the original crate, only to\n                             // find that it's not there. On the other\n-                            // side of inlininig, the crates knows to\n+                            // side of inlining, the crates knows to\n                             // not declare this static as\n                             // available_externally (because it isn't)\n                             inlineable = true;"}, {"sha": "2ebbc2f5340b79a1cbcc602fce831da84cb9e9b8", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -17,7 +17,7 @@ use middle::ty;\n \n use syntax::ast;\n use syntax::ast_util::local_def;\n-use syntax::attr;\n+use syntax::ast_util;\n \n pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n     -> ast::DefId {\n@@ -62,12 +62,13 @@ pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             // however, so we use the available_externally linkage which llvm\n             // provides\n             match item.node {\n-                ast::ItemStatic(..) => {\n+                ast::ItemStatic(_, mutbl, _) => {\n                     let g = get_item_val(ccx, item.id);\n                     // see the comment in get_item_val() as to why this check is\n                     // performed here.\n-                    if !attr::contains_name(item.attrs.as_slice(),\n-                                            \"address_insignificant\") {\n+                    if ast_util::static_has_significant_address(\n+                            mutbl,\n+                            item.attrs.as_slice()) {\n                         SetLinkage(g, AvailableExternallyLinkage);\n                     }\n                 }"}, {"sha": "d28553da69173b3b5ee20ecac72292328d673cac", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -11,6 +11,8 @@\n use ast::*;\n use ast;\n use ast_util;\n+use attr::{InlineNever, InlineNone};\n+use attr;\n use codemap;\n use codemap::Span;\n use owned_slice::OwnedSlice;\n@@ -742,6 +744,17 @@ pub fn get_inner_tys(ty: P<Ty>) -> Vec<P<Ty>> {\n     }\n }\n \n+/// Returns true if the static with the given mutability and attributes\n+/// has a significant address and false otherwise.\n+pub fn static_has_significant_address(mutbl: ast::Mutability,\n+                                              attrs: &[ast::Attribute])\n+                                              -> bool {\n+    if mutbl == ast::MutMutable {\n+        return true\n+    }\n+    let inline = attr::find_inline_attr(attrs);\n+    inline == InlineNever || inline == InlineNone\n+}\n \n #[cfg(test)]\n mod test {"}, {"sha": "857eadfe57cc40ea9081dbf35136eb20baa47547", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -312,22 +312,14 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// These attributes are applied to all statics that this syntax extension\n     /// will generate.\n     fn static_attrs(&self) -> Vec<ast::Attribute> {\n-        // Flag statics as `address_insignificant` so LLVM can merge duplicate\n-        // globals as much as possible (which we're generating a whole lot of).\n-        let unnamed = self.ecx\n-                          .meta_word(self.fmtsp,\n-                                     InternedString::new(\n-                                         \"address_insignificant\"));\n-        let unnamed = self.ecx.attribute(self.fmtsp, unnamed);\n-\n         // Do not warn format string as dead code\n         let dead_code = self.ecx.meta_word(self.fmtsp,\n                                            InternedString::new(\"dead_code\"));\n         let allow_dead_code = self.ecx.meta_list(self.fmtsp,\n                                                  InternedString::new(\"allow\"),\n                                                  vec!(dead_code));\n         let allow_dead_code = self.ecx.attribute(self.fmtsp, allow_dead_code);\n-        return vec!(unnamed, allow_dead_code);\n+        return vec!(allow_dead_code);\n     }\n \n     fn rtpath(&self, s: &str) -> Vec<ast::Ident> {"}, {"sha": "9e62415a20b4e8d6b615980ecc188d6d5088099a", "filename": "src/test/auxiliary/xcrate_address_insignificant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Ftest%2Fauxiliary%2Fxcrate_address_insignificant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Ftest%2Fauxiliary%2Fxcrate_address_insignificant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_address_insignificant.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub fn foo<T>() -> int {\n-    #[address_insignificant]\n     static a: int = 3;\n     a\n }"}, {"sha": "13705107cfe8ec6a3c3fa9b14beb9f30ceb1d9a3", "filename": "src/test/auxiliary/xcrate_static_addresses.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Ftest%2Fauxiliary%2Fxcrate_static_addresses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cad760b7703a961e5dbe7b02966c8dd5df742431/src%2Ftest%2Fauxiliary%2Fxcrate_static_addresses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_static_addresses.rs?ref=cad760b7703a961e5dbe7b02966c8dd5df742431", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[inline(never)]\n pub static global: int = 3;\n \n+#[inline(never)]\n static global0: int = 4;\n+\n+#[inline(never)]\n pub static global2: &'static int = &global0;\n \n pub fn verify_same(a: &'static int) {"}]}