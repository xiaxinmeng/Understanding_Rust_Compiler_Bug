{"sha": "c1f0c15382fc217d131ad5e08e52e5718d27ca12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZjBjMTUzODJmYzIxN2QxMzFhZDVlMDhlNTJlNTcxOGQyN2NhMTI=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-29T21:48:56Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-29T22:32:17Z"}, "message": "Remove `is_unicast_link_local_strict`", "tree": {"sha": "0282081928e14e59c891578d6a67460c51872812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0282081928e14e59c891578d6a67460c51872812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f0c15382fc217d131ad5e08e52e5718d27ca12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f0c15382fc217d131ad5e08e52e5718d27ca12", "html_url": "https://github.com/rust-lang/rust/commit/c1f0c15382fc217d131ad5e08e52e5718d27ca12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f0c15382fc217d131ad5e08e52e5718d27ca12/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0d64e03ef9875e0935bb60e989542b7ec29579", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0d64e03ef9875e0935bb60e989542b7ec29579", "html_url": "https://github.com/rust-lang/rust/commit/ce0d64e03ef9875e0935bb60e989542b7ec29579"}], "stats": {"total": 128, "additions": 27, "deletions": 101}, "files": [{"sha": "6c2f2eeabd61e5b69ada31b210523d90be8ff9f8", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 25, "deletions": 85, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/c1f0c15382fc217d131ad5e08e52e5718d27ca12/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f0c15382fc217d131ad5e08e52e5718d27ca12/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=c1f0c15382fc217d131ad5e08e52e5718d27ca12", "patch": "@@ -1267,79 +1267,31 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n-    /// Returns [`true`] if the address is a unicast link-local address (`fe80::/64`).\n+    /// Returns `true` if the address is a unicast address with link-local scope,\n+    /// as defined in [RFC 4291].\n     ///\n-    /// A common misconception is to think that \"unicast link-local addresses start with\n-    /// `fe80::`\", but [IETF RFC 4291] actually defines a stricter format for these addresses:\n+    /// A unicast address has link-local scope if it has the prefix `fe80::/10`, as per [RFC 4291 section 2.4].\n+    /// Note that this encompasses more addresses than those defined in [RFC 4291 section 2.5.6],\n+    /// which describes \"Link-Local IPv6 Unicast Addresses\" as having the following stricter format:\n     ///\n-    /// ```no_rust\n-    /// |   10     |\n-    /// |  bits    |         54 bits         |          64 bits           |\n+    /// ```text\n+    /// | 10 bits  |         54 bits         |          64 bits           |\n     /// +----------+-------------------------+----------------------------+\n     /// |1111111010|           0             |       interface ID         |\n     /// +----------+-------------------------+----------------------------+\n     /// ```\n+    /// So while currently the only addresses with link-local scope an application will encounter are all in `fe80::/64`,\n+    /// this might change in the future with the publication of new standards. More addresses in `fe80::/10` could be allocated,\n+    /// and those addresses will have link-local scope.\n     ///\n-    /// This method validates the format defined in the RFC and won't recognize addresses\n-    /// like `fe80:0:0:1::` or `fe81::` as unicast link-local addresses.\n-    /// If you need a less strict validation, use [`Ipv6Addr::is_unicast_link_local()`] instead.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ip)]\n-    ///\n-    /// use std::net::Ipv6Addr;\n-    ///\n-    /// let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0, 0, 0, 0);\n-    /// assert!(ip.is_unicast_link_local_strict());\n-    ///\n-    /// let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff);\n-    /// assert!(ip.is_unicast_link_local_strict());\n-    ///\n-    /// let ip = Ipv6Addr::new(0xfe80, 0, 0, 1, 0, 0, 0, 0);\n-    /// assert!(!ip.is_unicast_link_local_strict());\n-    /// assert!(ip.is_unicast_link_local());\n-    ///\n-    /// let ip = Ipv6Addr::new(0xfe81, 0, 0, 0, 0, 0, 0, 0);\n-    /// assert!(!ip.is_unicast_link_local_strict());\n-    /// assert!(ip.is_unicast_link_local());\n-    /// ```\n-    ///\n-    /// # See also\n-    ///\n-    /// - [IETF RFC 4291 section 2.5.6]\n-    /// - [RFC 4291 errata 4406] (which has been rejected but provides useful\n-    ///   insight)\n-    /// - [`Ipv6Addr::is_unicast_link_local()`]\n-    ///\n-    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n-    /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n-    /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n-    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n-    #[unstable(feature = \"ip\", issue = \"27709\")]\n-    #[inline]\n-    pub const fn is_unicast_link_local_strict(&self) -> bool {\n-        matches!(self.segments(), [0xfe80, 0, 0, 0, ..])\n-    }\n-\n-    /// Returns [`true`] if the address is a unicast link-local address (`fe80::/10`).\n+    /// Also note that while [RFC 4291 section 2.5.3] mentions about the [loopback address] (`::1`) that \"it is treated as having Link-Local scope\",\n+    /// this does not mean that the loopback address actually has link-local scope and this method will return `false` on it.\n     ///\n-    /// This method returns [`true`] for addresses in the range reserved by [RFC 4291 section 2.4],\n-    /// i.e. addresses with the following format:\n-    ///\n-    /// ```no_rust\n-    /// |   10     |\n-    /// |  bits    |         54 bits         |          64 bits           |\n-    /// +----------+-------------------------+----------------------------+\n-    /// |1111111010|    arbitratry value     |       interface ID         |\n-    /// +----------+-------------------------+----------------------------+\n-    /// ```\n-    ///\n-    /// As a result, this method considers addresses such as `fe80:0:0:1::` or `fe81::` to be\n-    /// unicast link-local addresses, whereas [`Ipv6Addr::is_unicast_link_local_strict()`] does not.\n-    /// If you need a strict validation fully compliant with the RFC, use\n-    /// [`Ipv6Addr::is_unicast_link_local_strict()`] instead.\n+    /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n+    /// [RFC 4291 section 2.5.3]: https://tools.ietf.org/html/rfc4291#section-2.5.3\n+    /// [RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n+    /// [loopback address]: Ipv6Addr::LOCALHOST\n     ///\n     /// # Examples\n     ///\n@@ -1348,29 +1300,17 @@ impl Ipv6Addr {\n     ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0, 0, 0, 0);\n-    /// assert!(ip.is_unicast_link_local());\n+    /// // The loopback address (`::1`) does not actually have link-local scope.\n+    /// assert_eq!(Ipv6Addr::LOCALHOST.is_unicast_link_local(), false);\n     ///\n-    /// let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff);\n-    /// assert!(ip.is_unicast_link_local());\n+    /// // Only addresses in `fe80::/10` have link-local scope.\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_unicast_link_local(), false);\n+    /// assert_eq!(Ipv6Addr::new(0xfe80, 0, 0, 0, 0, 0, 0, 0).is_unicast_link_local(), true);\n     ///\n-    /// let ip = Ipv6Addr::new(0xfe80, 0, 0, 1, 0, 0, 0, 0);\n-    /// assert!(ip.is_unicast_link_local());\n-    /// assert!(!ip.is_unicast_link_local_strict());\n-    ///\n-    /// let ip = Ipv6Addr::new(0xfe81, 0, 0, 0, 0, 0, 0, 0);\n-    /// assert!(ip.is_unicast_link_local());\n-    /// assert!(!ip.is_unicast_link_local_strict());\n+    /// // Addresses outside the stricter `fe80::/64` also have link-local scope.\n+    /// assert_eq!(Ipv6Addr::new(0xfe80, 0, 0, 1, 0, 0, 0, 0).is_unicast_link_local(), true);\n+    /// assert_eq!(Ipv6Addr::new(0xfe81, 0, 0, 0, 0, 0, 0, 0).is_unicast_link_local(), true);\n     /// ```\n-    ///\n-    /// # See also\n-    ///\n-    /// - [IETF RFC 4291 section 2.4]\n-    /// - [RFC 4291 errata 4406] (which has been rejected but provides useful\n-    ///   insight)\n-    ///\n-    /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n-    /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]"}, {"sha": "05f8dea0b7cb1436f2ea924441dd556856b6c98d", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1f0c15382fc217d131ad5e08e52e5718d27ca12/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f0c15382fc217d131ad5e08e52e5718d27ca12/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=c1f0c15382fc217d131ad5e08e52e5718d27ca12", "patch": "@@ -480,7 +480,6 @@ fn ipv6_properties() {\n             let unique_local: u16 = 1 << 2;\n             let global: u16 = 1 << 3;\n             let unicast_link_local: u16 = 1 << 4;\n-            let unicast_link_local_strict: u16 = 1 << 5;\n             let unicast_site_local: u16 = 1 << 6;\n             let unicast_global: u16 = 1 << 7;\n             let documentation: u16 = 1 << 8;\n@@ -524,11 +523,6 @@ fn ipv6_properties() {\n             } else {\n                 assert!(!ip!($s).is_unicast_link_local());\n             }\n-            if ($mask & unicast_link_local_strict) == unicast_link_local_strict {\n-                assert!(ip!($s).is_unicast_link_local_strict());\n-            } else {\n-                assert!(!ip!($s).is_unicast_link_local_strict());\n-            }\n             if ($mask & unicast_site_local) == unicast_site_local {\n                 assert!(ip!($s).is_unicast_site_local());\n             } else {\n@@ -587,7 +581,6 @@ fn ipv6_properties() {\n     let unique_local: u16 = 1 << 2;\n     let global: u16 = 1 << 3;\n     let unicast_link_local: u16 = 1 << 4;\n-    let unicast_link_local_strict: u16 = 1 << 5;\n     let unicast_site_local: u16 = 1 << 6;\n     let unicast_global: u16 = 1 << 7;\n     let documentation: u16 = 1 << 8;\n@@ -621,11 +614,7 @@ fn ipv6_properties() {\n         unicast_link_local\n     );\n \n-    check!(\n-        \"fe80::\",\n-        &[0xfe, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        unicast_link_local | unicast_link_local_strict\n-    );\n+    check!(\"fe80::\", &[0xfe, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unicast_link_local);\n \n     check!(\n         \"febf:ffff::\",\n@@ -650,7 +639,7 @@ fn ipv6_properties() {\n             0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n             0xff, 0xff\n         ],\n-        unicast_link_local | unicast_link_local_strict\n+        unicast_link_local\n     );\n \n     check!(\n@@ -897,9 +886,6 @@ fn ipv6_const() {\n     const IS_UNIQUE_LOCAL: bool = IP_ADDRESS.is_unique_local();\n     assert!(!IS_UNIQUE_LOCAL);\n \n-    const IS_UNICAST_LINK_LOCAL_STRICT: bool = IP_ADDRESS.is_unicast_link_local_strict();\n-    assert!(!IS_UNICAST_LINK_LOCAL_STRICT);\n-\n     const IS_UNICAST_LINK_LOCAL: bool = IP_ADDRESS.is_unicast_link_local();\n     assert!(!IS_UNICAST_LINK_LOCAL);\n "}]}