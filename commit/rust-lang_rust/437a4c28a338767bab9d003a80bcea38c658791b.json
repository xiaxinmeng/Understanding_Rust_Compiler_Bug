{"sha": "437a4c28a338767bab9d003a80bcea38c658791b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzN2E0YzI4YTMzODc2N2JhYjlkMDAzYTgwYmNlYTM4YzY1ODc5MWI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-10T00:39:21Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-08-10T00:39:21Z"}, "message": "Fix interaction between default matches and guards. Closes #3121.", "tree": {"sha": "7e49d3a14240e99564e1bc2fa5552a96c8e32017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e49d3a14240e99564e1bc2fa5552a96c8e32017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/437a4c28a338767bab9d003a80bcea38c658791b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/437a4c28a338767bab9d003a80bcea38c658791b", "html_url": "https://github.com/rust-lang/rust/commit/437a4c28a338767bab9d003a80bcea38c658791b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/437a4c28a338767bab9d003a80bcea38c658791b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cefcc0ac595a21674b1b33211a2e3b53afe31ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cefcc0ac595a21674b1b33211a2e3b53afe31ce", "html_url": "https://github.com/rust-lang/rust/commit/8cefcc0ac595a21674b1b33211a2e3b53afe31ce"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "a3164c6a8489de754d701b1ae4f629254b1cc11a", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/437a4c28a338767bab9d003a80bcea38c658791b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a4c28a338767bab9d003a80bcea38c658791b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=437a4c28a338767bab9d003a80bcea38c658791b", "patch": "@@ -521,10 +521,11 @@ fn enter_match<'r>(bcx: @mut Block,\n }\n \n fn enter_default<'r>(bcx: @mut Block,\n-                         dm: DefMap,\n-                         m: &[Match<'r>],\n-                         col: uint,\n-                         val: ValueRef)\n+                     dm: DefMap,\n+                     m: &[Match<'r>],\n+                     col: uint,\n+                     val: ValueRef,\n+                     chk: Option<mk_fail>)\n                       -> ~[Match<'r>] {\n     debug!(\"enter_default(bcx=%s, m=%s, col=%u, val=%s)\",\n            bcx.to_str(),\n@@ -533,13 +534,36 @@ fn enter_default<'r>(bcx: @mut Block,\n            bcx.val_to_str(val));\n     let _indenter = indenter();\n \n-    do enter_match(bcx, dm, m, col, val) |p| {\n+    // Collect all of the matches that can match against anything.\n+    let matches = do enter_match(bcx, dm, m, col, val) |p| {\n         match p.node {\n           ast::pat_wild | ast::pat_tup(_) => Some(~[]),\n           ast::pat_ident(_, _, None) if pat_is_binding(dm, p) => Some(~[]),\n           _ => None\n         }\n-    }\n+    };\n+\n+    // Ok, now, this is pretty subtle. A \"default\" match is a match\n+    // that needs to be considered if none of the actual checks on the\n+    // value being considered succeed. The subtlety lies in that sometimes\n+    // identifier/wildcard matches are *not* default matches. Consider:\n+    // \"match x { _ if something => foo, true => bar, false => baz }\".\n+    // There is a wildcard match, but it is *not* a default case. The boolean\n+    // case on the value being considered is exhaustive. If the case is\n+    // exhaustive, then there are no defaults.\n+    //\n+    // We detect whether the case is exhaustive in the following\n+    // somewhat kludgy way: if the last wildcard/binding match has a\n+    // guard, then by non-redundancy, we know that there aren't any\n+    // non guarded matches, and thus by exhaustiveness, we know that\n+    // we don't need any default cases. If the check *isn't* nonexhaustive\n+    // (because chk is Some), then we need the defaults anyways.\n+    let is_exhaustive = match matches.last_opt() {\n+        Some(m) if m.data.arm.guard.is_some() && chk.is_none() => true,\n+        _ => false\n+    };\n+\n+    if is_exhaustive { ~[] } else { matches }\n }\n \n // <pcwalton> nmatsakis: what does enter_opt do?\n@@ -1575,7 +1599,7 @@ fn compile_submatch_continue(mut bcx: @mut Block,\n         C_int(ccx, 0) // Placeholder for when not using a switch\n     };\n \n-    let defaults = enter_default(else_cx, dm, m, col, val);\n+    let defaults = enter_default(else_cx, dm, m, col, val, chk);\n     let exhaustive = chk.is_none() && defaults.len() == 0u;\n     let len = opts.len();\n "}, {"sha": "206dc383cb3d50cd488db1203b6645d33f99771e", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/437a4c28a338767bab9d003a80bcea38c658791b/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/437a4c28a338767bab9d003a80bcea38c658791b/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=437a4c28a338767bab9d003a80bcea38c658791b", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n enum side { mayo, catsup, vinegar }\n enum order { hamburger, fries(side), shake }\n enum meal { to_go(order), for_here(order) }"}]}