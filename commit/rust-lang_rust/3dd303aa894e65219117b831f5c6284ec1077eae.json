{"sha": "3dd303aa894e65219117b831f5c6284ec1077eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDMwM2FhODk0ZTY1MjE5MTE3YjgzMWY1YzYyODRlYzEwNzdlYWU=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-23T11:42:23Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T10:41:55Z"}, "message": "Rename `BoundTyIndex` to `BoundVar`", "tree": {"sha": "ce83c0d9a9dee220e848144cafac00071c58a351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce83c0d9a9dee220e848144cafac00071c58a351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd303aa894e65219117b831f5c6284ec1077eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd303aa894e65219117b831f5c6284ec1077eae", "html_url": "https://github.com/rust-lang/rust/commit/3dd303aa894e65219117b831f5c6284ec1077eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd303aa894e65219117b831f5c6284ec1077eae/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0447550dabc1b5fee1bde2a2663ebe15d6bbf2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0447550dabc1b5fee1bde2a2663ebe15d6bbf2a", "html_url": "https://github.com/rust-lang/rust/commit/d0447550dabc1b5fee1bde2a2663ebe15d6bbf2a"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "c950942ee345dfad6a53226c022cd607edce721f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=3dd303aa894e65219117b831f5c6284ec1077eae", "patch": "@@ -147,7 +147,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionVid {\n     }\n }\n \n-impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::BoundTyIndex {\n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::BoundVar {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,"}, {"sha": "5a9887e4af43649042af9a81548b2cba687a4fa1", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=3dd303aa894e65219117b831f5c6284ec1077eae", "patch": "@@ -23,7 +23,7 @@ use infer::InferCtxt;\n use std::sync::atomic::Ordering;\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::Kind;\n-use ty::{self, BoundTy, BoundTyIndex, Lift, List, Ty, TyCtxt, TypeFlags};\n+use ty::{self, BoundTy, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -277,7 +277,7 @@ struct Canonicalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n-    indices: FxHashMap<Kind<'tcx>, BoundTyIndex>,\n+    indices: FxHashMap<Kind<'tcx>, BoundVar>,\n     canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,\n     needs_canonical_flags: TypeFlags,\n }\n@@ -455,7 +455,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     /// or returns an existing variable if `kind` has already been\n     /// seen. `kind` is expected to be an unbound variable (or\n     /// potentially a free region).\n-    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> BoundTyIndex {\n+    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> BoundVar {\n         let Canonicalizer {\n             variables,\n             query_state,\n@@ -475,7 +475,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             // direct linear search of `var_values`.\n             if let Some(idx) = var_values.iter().position(|&k| k == kind) {\n                 // `kind` is already present in `var_values`.\n-                BoundTyIndex::new(idx)\n+                BoundVar::new(idx)\n             } else {\n                 // `kind` isn't present in `var_values`. Append it. Likewise\n                 // for `info` and `variables`.\n@@ -490,19 +490,19 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n                     *indices = var_values\n                         .iter()\n                         .enumerate()\n-                        .map(|(i, &kind)| (kind, BoundTyIndex::new(i)))\n+                        .map(|(i, &kind)| (kind, BoundVar::new(i)))\n                         .collect();\n                 }\n                 // The cv is the index of the appended element.\n-                BoundTyIndex::new(var_values.len() - 1)\n+                BoundVar::new(var_values.len() - 1)\n             }\n         } else {\n             // `var_values` is large. Do a hashmap search via `indices`.\n             *indices.entry(kind).or_insert_with(|| {\n                 variables.push(info);\n                 var_values.push(kind);\n                 assert_eq!(variables.len(), var_values.len());\n-                BoundTyIndex::new(variables.len() - 1)\n+                BoundVar::new(variables.len() - 1)\n             })\n         };\n "}, {"sha": "b6f7941472522fe201a40f31563bd3944fd9be99", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=3dd303aa894e65219117b831f5c6284ec1077eae", "patch": "@@ -40,7 +40,7 @@ use std::ops::Index;\n use syntax::source_map::Span;\n use ty::fold::TypeFoldable;\n use ty::subst::Kind;\n-use ty::{self, BoundTyIndex, Lift, List, Region, TyCtxt};\n+use ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n \n mod canonicalizer;\n \n@@ -73,7 +73,7 @@ impl<'gcx> UseSpecializedDecodable for CanonicalVarInfos<'gcx> {}\n /// canonicalized query response.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct CanonicalVarValues<'tcx> {\n-    pub var_values: IndexVec<BoundTyIndex, Kind<'tcx>>,\n+    pub var_values: IndexVec<BoundVar, Kind<'tcx>>,\n }\n \n /// When we canonicalize a value to form a query, we wind up replacing\n@@ -337,7 +337,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         variables: &List<CanonicalVarInfo>,\n         universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n     ) -> CanonicalVarValues<'tcx> {\n-        let var_values: IndexVec<BoundTyIndex, Kind<'tcx>> = variables\n+        let var_values: IndexVec<BoundVar, Kind<'tcx>> = variables\n             .iter()\n             .map(|info| self.instantiate_canonical_var(span, *info, &universe_map))\n             .collect();\n@@ -456,10 +456,10 @@ BraceStructLiftImpl! {\n     } where R: Lift<'tcx>\n }\n \n-impl<'tcx> Index<BoundTyIndex> for CanonicalVarValues<'tcx> {\n+impl<'tcx> Index<BoundVar> for CanonicalVarValues<'tcx> {\n     type Output = Kind<'tcx>;\n \n-    fn index(&self, value: BoundTyIndex) -> &Kind<'tcx> {\n+    fn index(&self, value: BoundVar) -> &Kind<'tcx> {\n         &self.var_values[value]\n     }\n }"}, {"sha": "6e17eabdbb7142300afd5c555b105dbddc16104e", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=3dd303aa894e65219117b831f5c6284ec1077eae", "patch": "@@ -35,7 +35,7 @@ use traits::{FulfillmentContext, TraitEngine};\n use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::fold::TypeFoldable;\n use ty::subst::{Kind, UnpackedKind};\n-use ty::{self, BoundTyIndex, Lift, Ty, TyCtxt};\n+use ty::{self, BoundVar, Lift, Ty, TyCtxt};\n \n impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     /// The \"main method\" for a canonicalized trait query. Given the\n@@ -273,7 +273,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         for (index, original_value) in original_values.var_values.iter().enumerate() {\n             // ...with the value `v_r` of that variable from the query.\n             let result_value = query_response.substitute_projected(self.tcx, &result_subst, |v| {\n-                &v.var_values[BoundTyIndex::new(index)]\n+                &v.var_values[BoundVar::new(index)]\n             });\n             match (original_value.unpack(), result_value.unpack()) {\n                 (UnpackedKind::Lifetime(ty::ReErased), UnpackedKind::Lifetime(ty::ReErased)) => {\n@@ -423,7 +423,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // is directly equal to one of the canonical variables in the\n         // result, then we can type the corresponding value from the\n         // input. See the example above.\n-        let mut opt_values: IndexVec<BoundTyIndex, Option<Kind<'tcx>>> =\n+        let mut opt_values: IndexVec<BoundVar, Option<Kind<'tcx>>> =\n             IndexVec::from_elem_n(None, query_response.variables.len());\n \n         // In terms of our example above, we are iterating over pairs like:\n@@ -457,7 +457,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 .enumerate()\n                 .map(|(index, info)| {\n                     if info.is_existential() {\n-                        match opt_values[BoundTyIndex::new(index)] {\n+                        match opt_values[BoundVar::new(index)] {\n                             Some(k) => k,\n                             None => self.instantiate_canonical_var(cause.span, *info, |u| {\n                                 universe_map[u.as_usize()]\n@@ -496,7 +496,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // canonical variable; this is taken from\n         // `query_response.var_values` after applying the substitution\n         // `result_subst`.\n-        let substituted_query_response = |index: BoundTyIndex| -> Kind<'tcx> {\n+        let substituted_query_response = |index: BoundVar| -> Kind<'tcx> {\n             query_response.substitute_projected(self.tcx, &result_subst, |v| &v.var_values[index])\n         };\n \n@@ -552,12 +552,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         variables1: &OriginalQueryValues<'tcx>,\n-        variables2: impl Fn(BoundTyIndex) -> Kind<'tcx>,\n+        variables2: impl Fn(BoundVar) -> Kind<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         self.commit_if_ok(|_| {\n             let mut obligations = vec![];\n             for (index, value1) in variables1.var_values.iter().enumerate() {\n-                let value2 = variables2(BoundTyIndex::new(index));\n+                let value2 = variables2(BoundVar::new(index));\n \n                 match (value1.unpack(), value2.unpack()) {\n                     (UnpackedKind::Type(v1), UnpackedKind::Type(v2)) => {"}, {"sha": "d2ef5d0b66a77ee45f77101c31e616b319317dcd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3dd303aa894e65219117b831f5c6284ec1077eae", "patch": "@@ -63,7 +63,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n \n use hir;\n \n-pub use self::sty::{Binder, BoundTy, BoundTyKind, BoundTyIndex, DebruijnIndex, INNERMOST};\n+pub use self::sty::{Binder, BoundTy, BoundTyKind, BoundVar, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, CanonicalPolyFnSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};"}, {"sha": "1890006b514176bf792c014342578dc74dcb0031", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3dd303aa894e65219117b831f5c6284ec1077eae", "patch": "@@ -1171,7 +1171,7 @@ pub enum RegionKind {\n     ReClosureBound(RegionVid),\n \n     /// Canonicalized region, used only when preparing a trait query.\n-    ReCanonical(BoundTyIndex),\n+    ReCanonical(BoundVar),\n }\n \n impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n@@ -1225,13 +1225,13 @@ pub enum InferTy {\n }\n \n newtype_index! {\n-    pub struct BoundTyIndex { .. }\n+    pub struct BoundVar { .. }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct BoundTy {\n     pub level: DebruijnIndex,\n-    pub var: BoundTyIndex,\n+    pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n \n@@ -1245,7 +1245,7 @@ impl_stable_hash_for!(struct BoundTy { level, var, kind });\n impl_stable_hash_for!(enum self::BoundTyKind { Anon, Param(a) });\n \n impl BoundTy {\n-    pub fn new(level: DebruijnIndex, var: BoundTyIndex) -> Self {\n+    pub fn new(level: DebruijnIndex, var: BoundVar) -> Self {\n         BoundTy {\n             level,\n             var,"}, {"sha": "fd26b263efb0fe6820df84d1dbf450a232dad094", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd303aa894e65219117b831f5c6284ec1077eae/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=3dd303aa894e65219117b831f5c6284ec1077eae", "patch": "@@ -12,7 +12,7 @@\n \n use hir::def_id::DefId;\n use infer::canonical::Canonical;\n-use ty::{self, BoundTyIndex, Lift, List, Ty, TyCtxt};\n+use ty::{self, BoundVar, Lift, List, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n@@ -553,7 +553,7 @@ impl CanonicalUserSubsts<'tcx> {\n             return false;\n         }\n \n-        self.value.substs.iter().zip(BoundTyIndex::new(0)..).all(|(kind, cvar)| {\n+        self.value.substs.iter().zip(BoundVar::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n                     ty::Bound(ref b) => cvar == b.var,"}]}