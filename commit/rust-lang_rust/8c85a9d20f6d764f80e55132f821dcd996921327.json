{"sha": "8c85a9d20f6d764f80e55132f821dcd996921327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODVhOWQyMGY2ZDc2NGY4MGU1NTEzMmY4MjFkY2Q5OTY5MjEzMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T00:39:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T00:39:54Z"}, "message": "Auto merge of #23313 - barosl:match-specialize-ice, r=jakub-\n\nThe arity of `ref x` is always 1, so it needs to be dereferenced before being compared with some other type whose arity is not 1.\r\n\r\nFixes #23009.", "tree": {"sha": "673f3475f787e6c1c8bfa34804082f14f77d6015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673f3475f787e6c1c8bfa34804082f14f77d6015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c85a9d20f6d764f80e55132f821dcd996921327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c85a9d20f6d764f80e55132f821dcd996921327", "html_url": "https://github.com/rust-lang/rust/commit/8c85a9d20f6d764f80e55132f821dcd996921327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c85a9d20f6d764f80e55132f821dcd996921327/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e1f9a1c2bf7134135800bc9afd082773defadc", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e1f9a1c2bf7134135800bc9afd082773defadc", "html_url": "https://github.com/rust-lang/rust/commit/30e1f9a1c2bf7134135800bc9afd082773defadc"}, {"sha": "edbc0e509f016426f6366fba0d0001bc828bd450", "url": "https://api.github.com/repos/rust-lang/rust/commits/edbc0e509f016426f6366fba0d0001bc828bd450", "html_url": "https://github.com/rust-lang/rust/commit/edbc0e509f016426f6366fba0d0001bc828bd450"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "6c140d73be0c81e1e3ad2c59dcb1642a21a0688d", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c85a9d20f6d764f80e55132f821dcd996921327/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c85a9d20f6d764f80e55132f821dcd996921327/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8c85a9d20f6d764f80e55132f821dcd996921327", "patch": "@@ -646,6 +646,7 @@ fn is_useful(cx: &MatchCheckCtxt,\n     if rows[0].len() == 0 {\n         return NotUseful;\n     }\n+    assert!(rows.iter().all(|r| r.len() == v.len()));\n     let real_pat = match rows.iter().find(|r| (*r)[0].id != DUMMY_NODE_ID) {\n         Some(r) => raw_pat(r[0]),\n         None if v.len() == 0 => return NotUseful,\n@@ -654,7 +655,12 @@ fn is_useful(cx: &MatchCheckCtxt,\n     let left_ty = if real_pat.id == DUMMY_NODE_ID {\n         ty::mk_nil(cx.tcx)\n     } else {\n-        ty::pat_ty(cx.tcx, &*real_pat)\n+        let left_ty = ty::pat_ty(cx.tcx, &*real_pat);\n+\n+        match real_pat.node {\n+            ast::PatIdent(ast::BindByRef(..), _, _) => ty::deref(left_ty, false).unwrap().ty,\n+            _ => left_ty,\n+        }\n     };\n \n     let max_slice_length = rows.iter().filter_map(|row| match row[0].node {"}, {"sha": "d0f7c7ca986b3fda3722b629f340b31b35a1ed58", "filename": "src/test/compile-fail/match-ref-ice.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c85a9d20f6d764f80e55132f821dcd996921327/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c85a9d20f6d764f80e55132f821dcd996921327/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs?ref=8c85a9d20f6d764f80e55132f821dcd996921327", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The arity of `ref x` is always 1. If the pattern is compared to some non-structural type whose\n+// arity is always 0, an ICE occurs.\n+//\n+// Related issue: #23009\n+\n+fn main() {\n+    let homura = [1, 2, 3];\n+\n+    match homura {\n+        [1, ref madoka, 3] => (),\n+        [1, 2, 3] => (), //~ ERROR unreachable pattern\n+        [_, _, _] => (),\n+    }\n+}"}]}