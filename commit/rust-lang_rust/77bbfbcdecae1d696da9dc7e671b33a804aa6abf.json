{"sha": "77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "node_id": "C_kwDOAAsO6NoAKDc3YmJmYmNkZWNhZTFkNjk2ZGE5ZGM3ZTY3MWIzM2E4MDRhYTZhYmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-31T05:07:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-31T05:07:03Z"}, "message": "Rollup merge of #112113 - notriddle:notriddle/rm-fnretty, r=GuillaumeGomez\n\nrustdoc: simplify `clean` by removing `FnRetTy`\n\nThe default fn ret ty is always unit. Just use that.\n\nLooking back at the time when `FnRetTy` (then called `FunctionRetTy`) was first added to rustdoc, it seems to originally be there because `-> !` was a special form: the never type didn't exist back then.\n\nhttps://github.com/rust-lang/rust/commit/eb01b17b06eb35542bb80ff7456043b0ed5572ba#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9L921-L924\n\n`DefaultReturn` was later added to rustdoc to mirror a change in HIR, which added a variant for DefaultReturn because it makes `Span` management easier. This isn't needed in rustdoc, since it doesn't carry spans.\n\nhttps://github.com/rust-lang/rust/commit/3f0cc8011aef3f530663302d525bd2d8cb493db5#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9R1144", "tree": {"sha": "5134301c75d28d699b24fc1865452b1b3bef65cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5134301c75d28d699b24fc1865452b1b3bef65cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkdtX3CRBK7hj4Ov3rIwAA714IAEXxmt5y7qX44JK8EHcs3aKv\nNtH2k9GPzeM+fcmcjBRS/UXqBLq8ACrN4/7a+2bi3l5TV1/see4OfaLyoH2DrNZv\nHgw3SJPM1mGCpOn93wLF6ZsTjTE4uKVS+au2HmnweW3WaTHx5f83BBB47zTV3i7i\nSRmK0xrheCkJVx7x6HCxhc+ireCnnLl2h+ceKB50o5OiyZ/oMT/mTdPq1CdF9ifV\n1FjT6+xoVPwR0OfG6vfuai4PZ9+uKZWRWAtQYbpb/FKizUk2UnLegDQi491/6v8k\nUOkai5PW04SYENzx+7+aIw/OZAPmxPWU61a36q6BImBRAqdpr9M1xNztPHvZN98=\n=0zM3\n-----END PGP SIGNATURE-----\n", "payload": "tree 5134301c75d28d699b24fc1865452b1b3bef65cb\nparent 1d643e16c2878def86dba27a8cf736ace962cb5b\nparent 1862fcb1df05b116443ad3b27028616a180ffadb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685509623 +0200\ncommitter GitHub <noreply@github.com> 1685509623 +0200\n\nRollup merge of #112113 - notriddle:notriddle/rm-fnretty, r=GuillaumeGomez\n\nrustdoc: simplify `clean` by removing `FnRetTy`\n\nThe default fn ret ty is always unit. Just use that.\n\nLooking back at the time when `FnRetTy` (then called `FunctionRetTy`) was first added to rustdoc, it seems to originally be there because `-> !` was a special form: the never type didn't exist back then.\n\nhttps://github.com/rust-lang/rust/commit/eb01b17b06eb35542bb80ff7456043b0ed5572ba#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9L921-L924\n\n`DefaultReturn` was later added to rustdoc to mirror a change in HIR, which added a variant for DefaultReturn because it makes `Span` management easier. This isn't needed in rustdoc, since it doesn't carry spans.\n\nhttps://github.com/rust-lang/rust/commit/3f0cc8011aef3f530663302d525bd2d8cb493db5#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9R1144\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "html_url": "https://github.com/rust-lang/rust/commit/77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d643e16c2878def86dba27a8cf736ace962cb5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d643e16c2878def86dba27a8cf736ace962cb5b", "html_url": "https://github.com/rust-lang/rust/commit/1d643e16c2878def86dba27a8cf736ace962cb5b"}, {"sha": "1862fcb1df05b116443ad3b27028616a180ffadb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1862fcb1df05b116443ad3b27028616a180ffadb", "html_url": "https://github.com/rust-lang/rust/commit/1862fcb1df05b116443ad3b27028616a180ffadb"}], "stats": {"total": 130, "additions": 49, "deletions": 81}, "files": [{"sha": "5fd867189fd713551ee88c062868e51217720b0b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "patch": "@@ -1111,8 +1111,8 @@ fn clean_fn_decl_with_args<'tcx>(\n     args: Arguments,\n ) -> FnDecl {\n     let output = match decl.output {\n-        hir::FnRetTy::Return(typ) => Return(clean_ty(typ, cx)),\n-        hir::FnRetTy::DefaultReturn(..) => DefaultReturn,\n+        hir::FnRetTy::Return(typ) => clean_ty(typ, cx),\n+        hir::FnRetTy::DefaultReturn(..) => Type::Tuple(Vec::new()),\n     };\n     FnDecl { inputs: args, output, c_variadic: decl.c_variadic }\n }\n@@ -1126,10 +1126,7 @@ fn clean_fn_decl_from_did_and_sig<'tcx>(\n \n     // We assume all empty tuples are default return type. This theoretically can discard `-> ()`,\n     // but shouldn't change any code meaning.\n-    let output = match clean_middle_ty(sig.output(), cx, None) {\n-        Type::Tuple(inner) if inner.is_empty() => DefaultReturn,\n-        ty => Return(ty),\n-    };\n+    let output = clean_middle_ty(sig.output(), cx, None);\n \n     FnDecl {\n         output,"}, {"sha": "1999a6b671d3a6b2c65232495260318e2b7928d7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "patch": "@@ -42,7 +42,6 @@ use crate::formats::item_type::ItemType;\n use crate::html::render::Context;\n use crate::passes::collect_intra_doc_links::UrlFragment;\n \n-pub(crate) use self::FnRetTy::*;\n pub(crate) use self::ItemKind::*;\n pub(crate) use self::SelfTy::*;\n pub(crate) use self::Type::{\n@@ -1353,7 +1352,7 @@ pub(crate) struct Function {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct FnDecl {\n     pub(crate) inputs: Arguments,\n-    pub(crate) output: FnRetTy,\n+    pub(crate) output: Type,\n     pub(crate) c_variadic: bool,\n }\n \n@@ -1371,18 +1370,16 @@ impl FnDecl {\n     ///\n     /// This function will panic if the return type does not match the expected sugaring for async\n     /// functions.\n-    pub(crate) fn sugared_async_return_type(&self) -> FnRetTy {\n-        match &self.output {\n-            FnRetTy::Return(Type::ImplTrait(bounds)) => match &bounds[0] {\n-                GenericBound::TraitBound(PolyTrait { trait_, .. }, ..) => {\n-                    let bindings = trait_.bindings().unwrap();\n-                    let ret_ty = bindings[0].term();\n-                    let ty = ret_ty.ty().expect(\"Unexpected constant return term\");\n-                    FnRetTy::Return(ty.clone())\n-                }\n-                _ => panic!(\"unexpected desugaring of async function\"),\n-            },\n-            _ => panic!(\"unexpected desugaring of async function\"),\n+    pub(crate) fn sugared_async_return_type(&self) -> Type {\n+        if let Type::ImplTrait(v) = &self.output &&\n+            let [GenericBound::TraitBound(PolyTrait { trait_, .. }, _ )] = &v[..]\n+        {\n+            let bindings = trait_.bindings().unwrap();\n+            let ret_ty = bindings[0].term();\n+            let ty = ret_ty.ty().expect(\"Unexpected constant return term\");\n+            ty.clone()\n+        } else {\n+            panic!(\"unexpected desugaring of async function\")\n         }\n     }\n }\n@@ -1425,21 +1422,6 @@ impl Argument {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub(crate) enum FnRetTy {\n-    Return(Type),\n-    DefaultReturn,\n-}\n-\n-impl FnRetTy {\n-    pub(crate) fn as_return(&self) -> Option<&Type> {\n-        match self {\n-            Return(ret) => Some(ret),\n-            DefaultReturn => None,\n-        }\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n pub(crate) struct Trait {\n     pub(crate) def_id: DefId,\n@@ -1641,6 +1623,10 @@ impl Type {\n         matches!(self, Type::ImplTrait(_))\n     }\n \n+    pub(crate) fn is_unit(&self) -> bool {\n+        matches!(self, Type::Tuple(v) if v.is_empty())\n+    }\n+\n     pub(crate) fn projection(&self) -> Option<(&Type, DefId, PathSegment)> {\n         if let QPath(box QPathData { self_type, trait_, assoc, .. }) = self {\n             Some((self_type, trait_.as_ref()?.def_id(), assoc.clone()))"}, {"sha": "f26d74629dd941c6756afb0017810f6d43dc36cb", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "patch": "@@ -1257,9 +1257,9 @@ impl clean::Impl {\n                 };\n                 primitive_link_fragment(f, PrimitiveType::Tuple, &format!(\"fn ({name}\u2081, {name}\u2082, \u2026, {name}\u2099{ellipsis})\"), \"#trait-implementations-1\", cx)?;\n                 // Write output.\n-                if let clean::FnRetTy::Return(ty) = &bare_fn.decl.output {\n+                if !bare_fn.decl.output.is_unit() {\n                     write!(f, \" -> \")?;\n-                    fmt_type(ty, f, use_absolute, cx)?;\n+                    fmt_type(&bare_fn.decl.output, f, use_absolute, cx)?;\n                 }\n             } else if let Some(ty) = self.kind.as_blanket_ty() {\n                 fmt_type(ty, f, use_absolute, cx)?;\n@@ -1296,22 +1296,6 @@ impl clean::Arguments {\n     }\n }\n \n-impl clean::FnRetTy {\n-    pub(crate) fn print<'a, 'tcx: 'a>(\n-        &'a self,\n-        cx: &'a Context<'tcx>,\n-    ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-        display_fn(move |f| match self {\n-            clean::Return(clean::Tuple(tys)) if tys.is_empty() => Ok(()),\n-            clean::Return(ty) if f.alternate() => {\n-                write!(f, \" -> {:#}\", ty.print(cx))\n-            }\n-            clean::Return(ty) => write!(f, \" -&gt; {}\", ty.print(cx)),\n-            clean::DefaultReturn => Ok(()),\n-        })\n-    }\n-}\n-\n impl clean::BareFunctionDecl {\n     fn print_hrtb_with_space<'a, 'tcx: 'a>(\n         &'a self,\n@@ -1366,15 +1350,15 @@ impl clean::FnDecl {\n                     \"({args:#}{ellipsis}){arrow:#}\",\n                     args = self.inputs.print(cx),\n                     ellipsis = ellipsis,\n-                    arrow = self.output.print(cx)\n+                    arrow = self.print_output(cx)\n                 )\n             } else {\n                 write!(\n                     f,\n                     \"({args}{ellipsis}){arrow}\",\n                     args = self.inputs.print(cx),\n                     ellipsis = ellipsis,\n-                    arrow = self.output.print(cx)\n+                    arrow = self.print_output(cx)\n                 )\n             }\n         })\n@@ -1464,9 +1448,22 @@ impl clean::FnDecl {\n             Some(n) => write!(f, \"\\n{})\", Indent(n))?,\n         };\n \n-        fmt::Display::fmt(&self.output.print(cx), f)?;\n+        fmt::Display::fmt(&self.print_output(cx), f)?;\n         Ok(())\n     }\n+\n+    pub(crate) fn print_output<'a, 'tcx: 'a>(\n+        &'a self,\n+        cx: &'a Context<'tcx>,\n+    ) -> impl fmt::Display + 'a + Captures<'tcx> {\n+        display_fn(move |f| match &self.output {\n+            clean::Tuple(tys) if tys.is_empty() => Ok(()),\n+            ty if f.alternate() => {\n+                write!(f, \" -> {:#}\", ty.print(cx))\n+            }\n+            ty => write!(f, \" -&gt; {}\", ty.print(cx)),\n+        })\n+    }\n }\n \n pub(crate) fn visibility_print_with_space<'a, 'tcx: 'a>("}, {"sha": "a5223bd6309d707b28f5f95b9f3b13e2187ccc74", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "patch": "@@ -844,7 +844,7 @@ fn assoc_method(\n         + name.as_str().len()\n         + generics_len;\n \n-    let notable_traits = d.output.as_return().and_then(|output| notable_traits_button(output, cx));\n+    let notable_traits = notable_traits_button(&d.output, cx);\n \n     let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n         header_len += 4;\n@@ -1282,6 +1282,11 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n pub(crate) fn notable_traits_button(ty: &clean::Type, cx: &mut Context<'_>) -> Option<String> {\n     let mut has_notable_trait = false;\n \n+    if ty.is_unit() {\n+        // Very common fast path.\n+        return None;\n+    }\n+\n     let did = ty.def_id(cx.cache())?;\n \n     // Box has pass-through impls for Read, Write, Iterator, and Future when the"}, {"sha": "21f61acb2c53f86c569b478b8f2992c1a1ea1765", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "patch": "@@ -587,8 +587,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n         + name.as_str().len()\n         + generics_len;\n \n-    let notable_traits =\n-        f.decl.output.as_return().and_then(|output| notable_traits_button(output, cx));\n+    let notable_traits = notable_traits_button(&f.decl.output, cx);\n \n     wrap_item(w, |w| {\n         w.reserve(header_len);"}, {"sha": "f34be120d292b94f12acbbfdd4c8bdbaebc26ead", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "patch": "@@ -7,7 +7,7 @@ use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean;\n-use crate::clean::types::{FnRetTy, Function, Generics, ItemId, Type, WherePredicate};\n+use crate::clean::types::{Function, Generics, ItemId, Type, WherePredicate};\n use crate::formats::cache::{Cache, OrphanImplItem};\n use crate::formats::item_type::ItemType;\n use crate::html::format::join_with_double_colon;\n@@ -656,22 +656,9 @@ fn get_fn_inputs_and_outputs<'tcx>(\n     }\n \n     let mut ret_types = Vec::new();\n-    match decl.output {\n-        FnRetTy::Return(ref return_type) => {\n-            add_generics_and_bounds_as_types(\n-                self_,\n-                generics,\n-                return_type,\n-                tcx,\n-                0,\n-                &mut ret_types,\n-                cache,\n-            );\n-            if ret_types.is_empty() {\n-                ret_types.push(get_index_type(return_type, vec![]));\n-            }\n-        }\n-        _ => {}\n-    };\n+    add_generics_and_bounds_as_types(self_, generics, &decl.output, tcx, 0, &mut ret_types, cache);\n+    if ret_types.is_empty() {\n+        ret_types.push(get_index_type(&decl.output, vec![]));\n+    }\n     (all_types, ret_types)\n }"}, {"sha": "91cd55b1113abd51763e1b95029f3f7ea65e3c39", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77bbfbcdecae1d696da9dc7e671b33a804aa6abf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=77bbfbcdecae1d696da9dc7e671b33a804aa6abf", "patch": "@@ -624,10 +624,7 @@ impl FromWithTcx<clean::FnDecl> for FnDecl {\n                 .into_iter()\n                 .map(|arg| (arg.name.to_string(), arg.type_.into_tcx(tcx)))\n                 .collect(),\n-            output: match output {\n-                clean::FnRetTy::Return(t) => Some(t.into_tcx(tcx)),\n-                clean::FnRetTy::DefaultReturn => None,\n-            },\n+            output: if output.is_unit() { None } else { Some(output.into_tcx(tcx)) },\n             c_variadic,\n         }\n     }"}]}