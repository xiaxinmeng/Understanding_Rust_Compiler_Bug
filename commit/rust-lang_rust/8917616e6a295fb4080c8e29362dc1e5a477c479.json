{"sha": "8917616e6a295fb4080c8e29362dc1e5a477c479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MTc2MTZlNmEyOTVmYjQwODBjOGUyOTM2MmRjMWU1YTQ3N2M0Nzk=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-09-22T22:45:47Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-09-22T22:45:47Z"}, "message": "add comparison operators to must-use lint (under `fn_must_use` feature)\n\nAlthough RFC 1940 is about annotating functions with `#[must_use]`, a\nkey part of the motivation was linting unused equality operators.\n\n(See\nhttps://github.com/rust-lang/rfcs/pull/1812#issuecomment-265695898\u2014it\nseems to have not been clear to discussants at the time that marking the\ncomparison methods as `must_use` would not give us the lints on\ncomparison operators, at least in (what the present author understood\nas) the most straightforward implementation, as landed in #43728\n(3645b062).)\n\nTo rectify the situation, we here lint unused comparison operators as\npart of the unused-must-use lint (feature gated by the `fn_must_use`\nfeature flag, which now arguably becomes a slight (tolerable in the\nopinion of the present author) misnomer).\n\nThis is in the matter of #43302.", "tree": {"sha": "954123bd881393e9172cf61defaba0a7fa2fa576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/954123bd881393e9172cf61defaba0a7fa2fa576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8917616e6a295fb4080c8e29362dc1e5a477c479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8917616e6a295fb4080c8e29362dc1e5a477c479", "html_url": "https://github.com/rust-lang/rust/commit/8917616e6a295fb4080c8e29362dc1e5a477c479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8917616e6a295fb4080c8e29362dc1e5a477c479/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14039a42ac6365afc842214989613f9a688c9a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/14039a42ac6365afc842214989613f9a688c9a66", "html_url": "https://github.com/rust-lang/rust/commit/14039a42ac6365afc842214989613f9a688c9a66"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "b97920dd18b77a1caccc3a9f2256c23393298573", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=8917616e6a295fb4080c8e29362dc1e5a477c479", "patch": "@@ -153,6 +153,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n \n         let mut fn_warned = false;\n+        let mut op_warned = false;\n         if cx.tcx.sess.features.borrow().fn_must_use {\n             let maybe_def = match expr.node {\n                 hir::ExprCall(ref callee, _) => {\n@@ -172,9 +173,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 let def_id = def.def_id();\n                 fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n             }\n+\n+            if let hir::ExprBinary(bin_op, ..) = expr.node {\n+                match bin_op.node {\n+                    // Hardcoding the comparison operators here seemed more\n+                    // expedient than the refactoring that would be needed to\n+                    // look up the `#[must_use]` attribute which does exist on\n+                    // the comparison trait methods\n+                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => {\n+                        let msg = \"unused comparison which must be used\";\n+                        cx.span_lint(UNUSED_MUST_USE, expr.span, msg);\n+                        op_warned = true;\n+                    },\n+                    _ => {},\n+                }\n+            }\n         }\n \n-        if !(ty_warned || fn_warned) {\n+        if !(ty_warned || fn_warned || op_warned) {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n "}, {"sha": "5c730aaa8d0fa0df92fae453addf2d7097433b06", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8917616e6a295fb4080c8e29362dc1e5a477c479", "patch": "@@ -380,7 +380,7 @@ declare_features! (\n     // #[doc(masked)]\n     (active, doc_masked, \"1.21.0\", None),\n \n-    // allow `#[must_use]` on functions (RFC 1940)\n+    // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n     (active, fn_must_use, \"1.21.0\", Some(43302)),\n \n     // allow '|' at beginning of match arms (RFC 1925)"}, {"sha": "821cd30c8df414182ad85224a6d6ebb1ef7ff108", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs?ref=8917616e6a295fb4080c8e29362dc1e5a477c479", "patch": "@@ -61,10 +61,9 @@ fn main() {\n     m.need_to_use_this_method_value();\n     m.is_even(); // trait method!\n \n-    m.replace(3);\n+    m.replace(3); // won't warn (annotation needs to be in trait definition)\n \n-    2.eq(&3);\n+    2.eq(&3); // comparison methods are `must_use`\n \n-    // FIXME: operators should probably be `must_use` if underlying method is\n-    2 == 3;\n+    2 == 3; // lint includes comparison operators\n }"}, {"sha": "7fc0a4ce1edc76e87a1e056c5b5a011253634223", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8917616e6a295fb4080c8e29362dc1e5a477c479/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr?ref=8917616e6a295fb4080c8e29362dc1e5a477c479", "patch": "@@ -25,6 +25,12 @@ warning: unused return value of `EvenNature::is_even` which must be used: no sid\n warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n   --> $DIR/fn_must_use.rs:66:5\n    |\n-66 |     2.eq(&3);\n+66 |     2.eq(&3); // comparison methods are `must_use`\n    |     ^^^^^^^^^\n \n+warning: unused comparison which must be used\n+  --> $DIR/fn_must_use.rs:68:5\n+   |\n+68 |     2 == 3; // lint includes comparison operators\n+   |     ^^^^^^\n+"}]}