{"sha": "c55d9e591b1f66d4677dac2efda6b70afcd4b345", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NWQ5ZTU5MWIxZjY2ZDQ2NzdkYWMyZWZkYTZiNzBhZmNkNGIzNDU=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-17T02:37:52Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-28T01:18:51Z"}, "message": "Move zero-sized type handling logic to `new_operand`\n\n`new_operand` now checks the type it's given and either creates the nil\nvalue itself, or produces an empty operand.", "tree": {"sha": "12fa5c77af08580d47e92b484c1a51f351eda8d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12fa5c77af08580d47e92b484c1a51f351eda8d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55d9e591b1f66d4677dac2efda6b70afcd4b345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55d9e591b1f66d4677dac2efda6b70afcd4b345", "html_url": "https://github.com/rust-lang/rust/commit/c55d9e591b1f66d4677dac2efda6b70afcd4b345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55d9e591b1f66d4677dac2efda6b70afcd4b345/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89edd96be86fd65d63f63a208062c8baf86e7d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/89edd96be86fd65d63f63a208062c8baf86e7d7c", "html_url": "https://github.com/rust-lang/rust/commit/89edd96be86fd65d63f63a208062c8baf86e7d7c"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "75d9ca32a21de3ed324336ef5a436eab023f1b7b", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c55d9e591b1f66d4677dac2efda6b70afcd4b345/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55d9e591b1f66d4677dac2efda6b70afcd4b345/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=c55d9e591b1f66d4677dac2efda6b70afcd4b345", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::repr as mir;\n use rustc::mir::tcx::LvalueTy;\n use session::config::FullDebugInfo;\n use base;\n-use common::{self, Block, BlockAndBuilder, FunctionContext};\n+use common::{self, Block, BlockAndBuilder, CrateContext, FunctionContext};\n use debuginfo::{self, declare_local, DebugLoc, VariableAccess, VariableKind};\n use machine;\n use type_of;\n@@ -109,12 +109,21 @@ enum TempRef<'tcx> {\n }\n \n impl<'tcx> TempRef<'tcx> {\n-    fn new_operand(val: OperandValue, ty: ty::Ty<'tcx>) -> TempRef<'tcx> {\n-        let op = OperandRef {\n-            val: val,\n-            ty: ty\n-        };\n-        TempRef::Operand(Some(op))\n+    fn new_operand<'bcx>(ccx: &CrateContext<'bcx, 'tcx>,\n+                         ty: ty::Ty<'tcx>) -> TempRef<'tcx> {\n+        if common::type_is_zero_size(ccx, ty) {\n+            // Zero-size temporaries aren't always initialized, which\n+            // doesn't matter because they don't contain data, but\n+            // we need something in the operand.\n+            let val = OperandValue::Immediate(common::C_nil(ccx));\n+            let op = OperandRef {\n+                val: val,\n+                ty: ty\n+            };\n+            TempRef::Operand(Some(op))\n+        } else {\n+            TempRef::Operand(None)\n+        }\n     }\n }\n \n@@ -160,17 +169,11 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n                                   TempRef::Lvalue(LvalueRef::alloca(&bcx,\n                                                                     mty,\n                                                                     &format!(\"temp{:?}\", i)))\n-                              } else if common::type_is_zero_size(bcx.ccx(), mty) {\n-                                  // Zero-size temporaries aren't always initialized, which\n-                                  // doesn't matter because they don't contain data, but\n-                                  // we need something in the operand.\n-                                  let val = OperandValue::Immediate(common::C_nil(bcx.ccx()));\n-                                  TempRef::new_operand(val, mty)\n                               } else {\n                                   // If this is an immediate temp, we do not create an\n                                   // alloca in advance. Instead we wait until we see the\n                                   // definition and update the operand there.\n-                                  TempRef::Operand(None)\n+                                  TempRef::new_operand(bcx.ccx(), mty)\n                               })\n                               .collect();\n "}]}