{"sha": "46818d405a9f2fb3cb0da42b5567b638862b4f3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ODE4ZDQwNWE5ZjJmYjNjYjBkYTQyYjU1NjdiNjM4ODYyYjRmM2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-25T07:11:53Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-25T07:14:20Z"}, "message": "Struct literals", "tree": {"sha": "507c849e12708c2fbb11ce5879eeafe825456f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507c849e12708c2fbb11ce5879eeafe825456f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46818d405a9f2fb3cb0da42b5567b638862b4f3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46818d405a9f2fb3cb0da42b5567b638862b4f3f", "html_url": "https://github.com/rust-lang/rust/commit/46818d405a9f2fb3cb0da42b5567b638862b4f3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46818d405a9f2fb3cb0da42b5567b638862b4f3f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c", "html_url": "https://github.com/rust-lang/rust/commit/972f494e4e3007e0c3bc7216d49eb4bb0cb3f24c"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "5a12dbd639b61981a8310f947dfc72a5690dbf04", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=46818d405a9f2fb3cb0da42b5567b638862b4f3f", "patch": "@@ -24,8 +24,8 @@ fn main() {\n     let mut def_config = String::new();\n     def_config_file.read_to_string(&mut def_config).unwrap();\n \n-    run(args, WriteMode::Display, &def_config);\n-    //run(args, WriteMode::Overwrite, &def_config);\n+    //run(args, WriteMode::Display, &def_config);\n+    run(args, WriteMode::Overwrite, &def_config);\n \n     std::env::set_exit_status(0);\n "}, {"sha": "8e6c376209f338f7702d5eb2f29600ae2c8cf2ef", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=46818d405a9f2fb3cb0da42b5567b638862b4f3f", "patch": "@@ -20,6 +20,7 @@ pub struct Config {\n     pub fn_brace_style: ::BraceStyle,\n     pub fn_return_indent: ::ReturnIndent,\n     pub struct_trailing_comma: bool,\n+    pub struct_lit_trailing_comma: ::lists::SeparatorTactic,\n }\n \n impl Config {"}, {"sha": "e8c74879b597df5a017be5d3c040a4ad5a556b03", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=46818d405a9f2fb3cb0da42b5567b638862b4f3f", "patch": "@@ -6,3 +6,4 @@ newline_style = \"Unix\"\n fn_brace_style = \"SameLineWhere\"\n fn_return_indent = \"WithArgs\"\n struct_trailing_comma = true\n+struct_lit_trailing_comma = \"Vertical\""}, {"sha": "4b32301fe9142cae5fe179bbff8adaf068ed7c17", "filename": "src/expr.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=46818d405a9f2fb3cb0da42b5567b638862b4f3f", "patch": "@@ -13,7 +13,9 @@ use utils::*;\n use lists::{write_list, ListFormatting, SeparatorTactic, ListTactic};\n \n use syntax::{ast, ptr};\n-use syntax::codemap::{Span, Pos};\n+use syntax::codemap::{Pos, Span};\n+use syntax::parse::token;\n+use syntax::print::pprust;\n \n use MIN_STRING;\n \n@@ -134,6 +136,64 @@ impl<'a> FmtVisitor<'a> {\n         format!(\"({})\", subexpr_str)\n     }\n \n+    fn rewrite_struct_lit(&mut self,\n+                          path: &ast::Path,\n+                          fields: &[ast::Field],\n+                          base: Option<&ast::Expr>,\n+                          width: usize,\n+                          offset: usize)\n+        -> String\n+    {\n+        debug!(\"rewrite_struct_lit: width {}, offset {}\", width, offset);\n+        assert!(fields.len() > 0 || base.is_some());\n+\n+        let path_str = pprust::path_to_string(path);\n+        // Foo { a: Foo } - indent is +3, width is -5.\n+        let indent = offset + path_str.len() + 3;\n+        let budget = width - (path_str.len() + 5);\n+\n+        let mut field_strs: Vec<_> =\n+            fields.iter().map(|f| self.rewrite_field(f, budget, indent)).collect();\n+        if let Some(expr) = base {\n+            // Another 2 on the width/indent for the ..\n+            field_strs.push(format!(\"..{}\", self.rewrite_expr(expr, budget - 2, indent + 2)))\n+        }\n+\n+        // FIXME comments\n+        let field_strs: Vec<_> = field_strs.into_iter().map(|s| (s, String::new())).collect();\n+        let tactics = if field_strs.iter().any(|&(ref s, _)| s.contains('\\n')) {\n+            ListTactic::Vertical\n+        } else {\n+            ListTactic::HorizontalVertical\n+        };\n+        let fmt = ListFormatting {\n+            tactic: tactics,\n+            separator: \",\",\n+            trailing_separator: if base.is_some() {\n+                    SeparatorTactic::Never\n+                } else {\n+                    config!(struct_lit_trailing_comma)\n+                },\n+            indent: indent,\n+            h_width: budget,\n+            v_width: budget,\n+        };\n+        let fields_str = write_list(&field_strs, &fmt);\n+        format!(\"{} {{ {} }}\", path_str, fields_str)\n+\n+        // FIXME if the usual multi-line layout is too wide, we should fall back to\n+        // Foo {\n+        //     a: ...,\n+        // }\n+    }\n+\n+    fn rewrite_field(&mut self, field: &ast::Field, width: usize, offset: usize) -> String {\n+        let name = &token::get_ident(field.ident.node);\n+        let overhead = name.len() + 2;\n+        let expr = self.rewrite_expr(&field.expr, width - overhead, offset + overhead);\n+        format!(\"{}: {}\", name, expr)\n+    }\n+\n     pub fn rewrite_expr(&mut self, expr: &ast::Expr, width: usize, offset: usize) -> String {\n         match expr.node {\n             ast::Expr_::ExprLit(ref l) => {\n@@ -152,6 +212,13 @@ impl<'a> FmtVisitor<'a> {\n             ast::Expr_::ExprParen(ref subexpr) => {\n                 return self.rewrite_paren(subexpr, width, offset);\n             }\n+            ast::Expr_::ExprStruct(ref path, ref fields, ref base) => {\n+                return self.rewrite_struct_lit(path,\n+                                               fields,\n+                                               base.as_ref().map(|e| &**e),\n+                                               width,\n+                                               offset);\n+            }\n             _ => {}\n         }\n "}, {"sha": "cab3fa452e49fd21903a6996fb6af9be44217fa2", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=46818d405a9f2fb3cb0da42b5567b638862b4f3f", "patch": "@@ -47,7 +47,7 @@ impl<'a> FmtVisitor<'a> {\n                             path: &ast::Path,\n                             path_list: &[ast::PathListItem],\n                             visibility: ast::Visibility) -> String {\n-        let path_str = pprust::path_to_string(&path);\n+        let path_str = pprust::path_to_string(path);\n \n         let vis = match visibility {\n             ast::Public => \"pub \","}, {"sha": "58e810fce205d845279b07a30dfdf61710a64388", "filename": "src/lists.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46818d405a9f2fb3cb0da42b5567b638862b4f3f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=46818d405a9f2fb3cb0da42b5567b638862b4f3f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use utils::make_indent;\n+use rustc_serialize::{Decodable, Decoder};\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n pub enum ListTactic {\n@@ -29,6 +30,19 @@ pub enum SeparatorTactic {\n     Vertical,\n }\n \n+// TODO could use a macro for all these Decodable impls.\n+impl Decodable for SeparatorTactic {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        let s = try!(d.read_str());\n+        match &*s {\n+            \"Always\" => Ok(SeparatorTactic::Always),\n+            \"Never\" => Ok(SeparatorTactic::Never),\n+            \"Vertical\" => Ok(SeparatorTactic::Vertical),\n+            _ => Err(d.error(\"Bad variant\")),\n+        }\n+    }\n+}\n+\n // TODO having some helpful ctors for ListFormatting would be nice.\n pub struct ListFormatting<'a> {\n     pub tactic: ListTactic,"}, {"sha": "1d32171d7d095e562e2bba6ab59f11d1878db2e3", "filename": "tests/idem/struct_lits.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/46818d405a9f2fb3cb0da42b5567b638862b4f3f/tests%2Fidem%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46818d405a9f2fb3cb0da42b5567b638862b4f3f/tests%2Fidem%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fstruct_lits.rs?ref=46818d405a9f2fb3cb0da42b5567b638862b4f3f", "patch": "@@ -0,0 +1,24 @@\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo { a: x };\n+\n+    Foo { a: Bar, b: foo() };\n+\n+    Foo { a: foo(), b: bar(), ..something };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar() };\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n+                                                                               b: bar(), };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n+                                                             b: bar(),\n+                                                             c: bar(),\n+                                                             d: bar(),\n+                                                             e: bar(),\n+                                                             f: bar(),\n+                                                             ..baz() };\n+}"}]}