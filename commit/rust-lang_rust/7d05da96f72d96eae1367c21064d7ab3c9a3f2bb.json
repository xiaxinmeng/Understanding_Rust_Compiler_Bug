{"sha": "7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDVkYTk2ZjcyZDk2ZWFlMTM2N2MyMTA2NGQ3YWIzYzlhM2YyYmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T02:14:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:27Z"}, "message": "Rename std::ioivec to std::io", "tree": {"sha": "f340bce79826ceb7ca58295246e7d2406a33a758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f340bce79826ceb7ca58295246e7d2406a33a758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "html_url": "https://github.com/rust-lang/rust/commit/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b71d1d445c01e1763f38ab62372f7e07b7ff0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b71d1d445c01e1763f38ab62372f7e07b7ff0ff", "html_url": "https://github.com/rust-lang/rust/commit/0b71d1d445c01e1763f38ab62372f7e07b7ff0ff"}], "stats": {"total": 296, "additions": 148, "deletions": 148}, "files": [{"sha": "05fda86a0f1ae9ae02b1d719b48f72ae11a0c919", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -30,7 +30,7 @@ import std::str;\n import std::vec;\n import std::ivec;\n import std::int;\n-import std::ioivec;\n+import std::io;\n import std::run;\n import std::getopts;\n import std::getopts::optopt;\n@@ -101,9 +101,9 @@ fn parse_input(sess: session::session, cfg: &ast::crate_cfg, input: str) ->\n fn parse_input_src(sess: session::session, cfg: &ast::crate_cfg,\n                    infile: str) -> {crate: @ast::crate, src: str} {\n     let srcbytes = if infile != \"-\" {\n-        ioivec::file_reader(infile)\n+        io::file_reader(infile)\n     } else {\n-        ioivec::stdin()\n+        io::stdin()\n     }.read_whole_stream();\n     let src = str::unsafe_from_bytes(srcbytes);\n     let crate = parser::parse_crate_from_source_str(infile, src, cfg,\n@@ -235,18 +235,18 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n       ppm_normal. { ann = pprust::no_ann(); }\n     }\n     pprust::print_crate(sess.get_codemap(), crate, input,\n-                        ioivec::string_reader(src), ioivec::stdout(), ann);\n+                        io::string_reader(src), io::stdout(), ann);\n }\n \n fn version(argv0: str) {\n     let vers = \"unknown version\";\n     let env_vers = #env(\"CFG_VERSION\");\n     if str::byte_len(env_vers) != 0u { vers = env_vers; }\n-    ioivec::stdout().write_str(#fmt(\"%s %s\\n\", argv0, vers));\n+    io::stdout().write_str(#fmt(\"%s %s\\n\", argv0, vers));\n }\n \n fn usage(argv0: str) {\n-    ioivec::stdout().write_str(#fmt(\"usage: %s [options] <input>\\n\", argv0) +\n+    io::stdout().write_str(#fmt(\"usage: %s [options] <input>\\n\", argv0) +\n                                    \"\n options:\n \n@@ -507,7 +507,7 @@ fn main(args: vec[str]) {\n     }\n     let ls = opt_present(match, \"ls\");\n     if ls {\n-        metadata::creader::list_file_metadata(ifile, ioivec::stdout());\n+        metadata::creader::list_file_metadata(ifile, io::stdout());\n         ret;\n     }\n "}, {"sha": "c7302ac2502dbd8633bfa78879477741b079408a", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -15,7 +15,7 @@ import util::common;\n import std::ivec;\n import std::str;\n import std::fs;\n-import std::ioivec;\n+import std::io;\n import std::option;\n import std::option::none;\n import std::option::some;\n@@ -80,7 +80,7 @@ fn visit_item(e: env, i: &@ast::item) {\n }\n \n // A diagnostic function for dumping crate metadata to an output stream\n-fn list_file_metadata(path: str, out: ioivec::writer) {\n+fn list_file_metadata(path: str, out: io::writer) {\n     alt get_metadata_section(path) {\n       option::some(bytes) { decoder::list_crate_metadata(bytes, out); }\n       option::none. {"}, {"sha": "6cdcce0bb13244acb4e3e3f3969343a7b46b46ac", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -4,7 +4,7 @@ import std::ebmlivec;\n import std::ivec;\n import std::option;\n import std::str;\n-import std::ioivec;\n+import std::io;\n import std::map::hashmap;\n import syntax::ast;\n import front::attr;\n@@ -343,13 +343,13 @@ fn get_attributes(md: &ebmlivec::doc) -> [ast::attribute] {\n     ret attrs;\n }\n \n-fn list_meta_items(meta_items: &ebmlivec::doc, out: ioivec::writer) {\n+fn list_meta_items(meta_items: &ebmlivec::doc, out: io::writer) {\n     for mi: @ast::meta_item  in get_meta_items(meta_items) {\n         out.write_str(#fmt(\"%s\\n\", pprust::meta_item_to_str(*mi)));\n     }\n }\n \n-fn list_crate_attributes(md: &ebmlivec::doc, out: ioivec::writer) {\n+fn list_crate_attributes(md: &ebmlivec::doc, out: io::writer) {\n     out.write_str(\"=Crate Attributes=\\n\");\n \n     for attr: ast::attribute  in get_attributes(md) {\n@@ -379,7 +379,7 @@ fn get_crate_deps(data: @[u8]) -> [crate_dep] {\n     ret deps;\n }\n \n-fn list_crate_deps(data: @[u8], out: ioivec::writer) {\n+fn list_crate_deps(data: @[u8], out: io::writer) {\n     out.write_str(\"=External Dependencies=\\n\");\n \n     for dep: crate_dep  in get_crate_deps(data) {\n@@ -389,7 +389,7 @@ fn list_crate_deps(data: @[u8], out: ioivec::writer) {\n     out.write_str(\"\\n\");\n }\n \n-fn list_crate_items(bytes: &@[u8], md: &ebmlivec::doc, out: ioivec::writer) {\n+fn list_crate_items(bytes: &@[u8], md: &ebmlivec::doc, out: io::writer) {\n     out.write_str(\"=Items=\\n\");\n     let paths = ebmlivec::get_doc(md, tag_paths);\n     let items = ebmlivec::get_doc(md, tag_items);\n@@ -410,7 +410,7 @@ fn list_crate_items(bytes: &@[u8], md: &ebmlivec::doc, out: ioivec::writer) {\n     out.write_str(\"\\n\");\n }\n \n-fn list_crate_metadata(bytes: &@[u8], out: ioivec::writer) {\n+fn list_crate_metadata(bytes: &@[u8], out: io::writer) {\n     let md = ebmlivec::new_doc(bytes);\n     list_crate_attributes(md, out);\n     list_crate_deps(bytes, out);"}, {"sha": "c35da50f96543e856a3d7e3196b69cbc7e964885", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -3,7 +3,7 @@\n import std::ivec;\n import std::str;\n import std::uint;\n-import std::ioivec;\n+import std::io;\n import std::option;\n import std::option::some;\n import std::option::none;\n@@ -201,7 +201,7 @@ fn encode_type(ecx: &@encode_ctxt, ebml_w: &ebmlivec::writer, typ: &ty::t) {\n         @{ds: f,\n           tcx: ecx.ccx.tcx,\n           abbrevs: tyencode::ac_use_abbrevs(ecx.type_abbrevs)};\n-    tyencode::enc_ty(ioivec::new_writer_(ebml_w.writer), ty_str_ctxt, typ);\n+    tyencode::enc_ty(io::new_writer_(ebml_w.writer), ty_str_ctxt, typ);\n     ebmlivec::end_tag(ebml_w);\n }\n \n@@ -409,8 +409,8 @@ fn create_index[T](index: &[entry[T]], hash_fn: fn(&T) -> uint ) ->\n }\n \n fn encode_index[T](ebml_w: &ebmlivec::writer, buckets: &[@[entry[T]]],\n-                   write_fn: fn(&ioivec::writer, &T) ) {\n-    let writer = ioivec::new_writer_(ebml_w.writer);\n+                   write_fn: fn(&io::writer, &T) ) {\n+    let writer = io::new_writer_(ebml_w.writer);\n     ebmlivec::start_tag(ebml_w, tag_index);\n     let bucket_locs: [uint] = ~[];\n     ebmlivec::start_tag(ebml_w, tag_index_buckets);\n@@ -432,9 +432,9 @@ fn encode_index[T](ebml_w: &ebmlivec::writer, buckets: &[@[entry[T]]],\n     ebmlivec::end_tag(ebml_w);\n }\n \n-fn write_str(writer: &ioivec::writer, s: &str) { writer.write_str(s); }\n+fn write_str(writer: &io::writer, s: &str) { writer.write_str(s); }\n \n-fn write_int(writer: &ioivec::writer, n: &int) {\n+fn write_int(writer: &io::writer, n: &int) {\n     writer.write_be_uint(n as uint, 4u);\n }\n \n@@ -586,7 +586,7 @@ fn encode_metadata(cx: &@crate_ctxt, crate: &@crate) -> str {\n     let abbrevs = map::mk_hashmap(ty::hash_ty, ty::eq_ty);\n     let ecx = @{ccx: cx, type_abbrevs: abbrevs};\n \n-    let string_w = ioivec::string_writer();\n+    let string_w = io::string_writer();\n     let buf_w = string_w.get_writer().get_buf_writer();\n     let ebml_w = ebmlivec::create_writer(buf_w);\n \n@@ -619,7 +619,7 @@ fn encode_metadata(cx: &@crate_ctxt, crate: &@crate) -> str {\n // Get the encoded string for a type\n fn encoded_ty(tcx: &ty::ctxt, t: &ty::t) -> str {\n     let cx = @{ds: def_to_str, tcx: tcx, abbrevs: tyencode::ac_no_abbrevs};\n-    let sw = ioivec::string_writer();\n+    let sw = io::string_writer();\n     tyencode::enc_ty(sw.get_writer(), cx, t);\n     ret sw.get_str();\n }"}, {"sha": "4a58a613fc3689b99c6133bfda3833e611ec3c4d", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,6 +1,6 @@\n // Type encoding\n \n-import std::ioivec;\n+import std::io;\n import std::map::hashmap;\n import std::option::some;\n import std::option::none;\n@@ -35,14 +35,14 @@ fn cx_uses_abbrevs(cx: &@ctxt) -> bool {\n     }\n }\n \n-fn enc_ty(w: &ioivec::writer, cx: &@ctxt, t: &ty::t) {\n+fn enc_ty(w: &io::writer, cx: &@ctxt, t: &ty::t) {\n     alt cx.abbrevs {\n       ac_no_abbrevs. {\n         let result_str;\n         alt cx.tcx.short_names_cache.find(t) {\n           some(s) { result_str = s; }\n           none. {\n-            let sw = ioivec::string_writer();\n+            let sw = io::string_writer();\n             enc_sty(sw.get_writer(), cx, ty::struct(cx.tcx, t));\n             result_str = sw.get_str();\n             cx.tcx.short_names_cache.insert(t, result_str);\n@@ -80,15 +80,15 @@ fn enc_ty(w: &ioivec::writer, cx: &@ctxt, t: &ty::t) {\n       }\n     }\n }\n-fn enc_mt(w: &ioivec::writer, cx: &@ctxt, mt: &ty::mt) {\n+fn enc_mt(w: &io::writer, cx: &@ctxt, mt: &ty::mt) {\n     alt mt.mut {\n       imm. { }\n       mut. { w.write_char('m'); }\n       maybe_mut. { w.write_char('?'); }\n     }\n     enc_ty(w, cx, mt.ty);\n }\n-fn enc_sty(w: &ioivec::writer, cx: &@ctxt, st: &ty::sty) {\n+fn enc_sty(w: &io::writer, cx: &@ctxt, st: &ty::sty) {\n     alt st {\n       ty::ty_nil. { w.write_char('n'); }\n       ty::ty_bot. { w.write_char('z'); }\n@@ -192,15 +192,15 @@ fn enc_sty(w: &ioivec::writer, cx: &@ctxt, st: &ty::sty) {\n       }\n     }\n }\n-fn enc_proto(w: &ioivec::writer, proto: proto) {\n+fn enc_proto(w: &io::writer, proto: proto) {\n     alt proto {\n       proto_iter. { w.write_char('W'); }\n       proto_fn. { w.write_char('F'); }\n       proto_block. { w.write_char('B'); }\n     }\n }\n \n-fn enc_ty_fn(w: &ioivec::writer, cx: &@ctxt, args: &[ty::arg], out: &ty::t,\n+fn enc_ty_fn(w: &io::writer, cx: &@ctxt, args: &[ty::arg], out: &ty::t,\n              cf: &controlflow, constrs: &[@ty::constr]) {\n     w.write_char('[');\n     for arg: ty::arg  in args {\n@@ -230,7 +230,7 @@ fn enc_ty_fn(w: &ioivec::writer, cx: &@ctxt, args: &[ty::arg], out: &ty::t,\n }\n \n // FIXME less copy-and-paste\n-fn enc_constr(w: &ioivec::writer, cx: &@ctxt, c: &@ty::constr) {\n+fn enc_constr(w: &io::writer, cx: &@ctxt, c: &@ty::constr) {\n     w.write_str(path_to_str(c.node.path));\n     w.write_char('(');\n     w.write_str(cx.ds(c.node.id));\n@@ -247,7 +247,7 @@ fn enc_constr(w: &ioivec::writer, cx: &@ctxt, c: &@ty::constr) {\n     w.write_char(')');\n }\n \n-fn enc_ty_constr(w: &ioivec::writer, cx: &@ctxt, c: &@ty::type_constr) {\n+fn enc_ty_constr(w: &io::writer, cx: &@ctxt, c: &@ty::type_constr) {\n     w.write_str(path_to_str(c.node.path));\n     w.write_char('(');\n     w.write_str(cx.ds(c.node.id));"}, {"sha": "40021bd4e562a27038c0fcc4750339db22b53561", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -2,7 +2,7 @@ import std::ivec;\n import std::uint;\n import std::str;\n import std::termivec;\n-import std::ioivec;\n+import std::io;\n import std::option;\n import std::option::some;\n import std::option::none;\n@@ -84,15 +84,15 @@ fn emit_diagnostic(sp: &option::t[span], msg: &str, kind: &str, color: u8,\n       }\n       none. { }\n     }\n-    ioivec::stdout().write_str(ss + \": \");\n+    io::stdout().write_str(ss + \": \");\n     if termivec::color_supported() {\n-        termivec::fg(ioivec::stdout().get_buf_writer(), color);\n+        termivec::fg(io::stdout().get_buf_writer(), color);\n     }\n-    ioivec::stdout().write_str(#fmt(\"%s:\", kind));\n+    io::stdout().write_str(#fmt(\"%s:\", kind));\n     if termivec::color_supported() {\n-        termivec::reset(ioivec::stdout().get_buf_writer());\n+        termivec::reset(io::stdout().get_buf_writer());\n     }\n-    ioivec::stdout().write_str(#fmt(\" %s\\n\", msg));\n+    io::stdout().write_str(#fmt(\" %s\\n\", msg));\n \n     maybe_highlight_lines(sp, cm, maybe_lines);\n }\n@@ -108,7 +108,7 @@ fn maybe_highlight_lines(sp: &option::t[span], cm: &codemap,\n \n         // FIXME: reading in the entire file is the worst possible way to\n         //        get access to the necessary lines.\n-        let file = ioivec::read_whole_file_str(lines.name);\n+        let file = io::read_whole_file_str(lines.name);\n         let fm = get_filemap(cm, lines.name);\n \n         // arbitrarily only print up to six lines of the error\n@@ -121,10 +121,10 @@ fn maybe_highlight_lines(sp: &option::t[span], cm: &codemap,\n         }\n         // Print the offending lines\n         for line: uint  in display_lines {\n-            ioivec::stdout().write_str(#fmt(\"%s:%u \", fm.name, line + 1u));\n+            io::stdout().write_str(#fmt(\"%s:%u \", fm.name, line + 1u));\n             let s = get_line(fm, line as int, file);\n             if !str::ends_with(s, \"\\n\") { s += \"\\n\"; }\n-            ioivec::stdout().write_str(s);\n+            io::stdout().write_str(s);\n         }\n         if elided {\n             let last_line = display_lines.(ivec::len(display_lines) - 1u);\n@@ -133,7 +133,7 @@ fn maybe_highlight_lines(sp: &option::t[span], cm: &codemap,\n             let out = \"\";\n             while indent > 0u { out += \" \"; indent -= 1u; }\n             out += \"...\\n\";\n-            ioivec::stdout().write_str(out);\n+            io::stdout().write_str(out);\n         }\n \n \n@@ -158,7 +158,7 @@ fn maybe_highlight_lines(sp: &option::t[span], cm: &codemap,\n                 let width = hi.col - lo.col - 1u;\n                 while width > 0u { str::push_char(s, '~'); width -= 1u; }\n             }\n-            ioivec::stdout().write_str(s + \"\\n\");\n+            io::stdout().write_str(s + \"\\n\");\n         }\n       }\n       _ { }"}, {"sha": "9e7ae3a24fcb21c4986732f7364fba8f7ffa9acb", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,5 +1,5 @@\n \n-import std::ioivec;\n+import std::io;\n import std::int;\n import std::ivec;\n import std::str;\n@@ -709,7 +709,7 @@ fn is_lit(t: &token::token) -> bool {\n type lit = {lit: str, pos: uint};\n \n fn gather_comments_and_literals(cm: &codemap::codemap, path: str,\n-                                srdr: ioivec::reader) ->\n+                                srdr: io::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n     let src = str::unsafe_from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk[str](str::hash, str::eq);"}, {"sha": "e13ecca72329d62cacff78d9dd58293123cfdc09", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,5 +1,5 @@\n \n-import std::ioivec;\n+import std::io;\n import std::ivec;\n import std::str;\n import std::option;\n@@ -62,7 +62,7 @@ fn new_parser_from_file(sess: parse_sess, cfg:\n                         ast::crate_cfg, path: str,\n                         chpos: uint, byte_pos: uint,\n                         ftype: file_type) -> parser {\n-    let src = ioivec::read_whole_file_str(path);\n+    let src = io::read_whole_file_str(path);\n     let filemap = codemap::new_filemap(path, chpos, byte_pos);\n     sess.cm.files += ~[filemap];\n     let itr = @interner::mk(str::hash, str::eq);"}, {"sha": "98770cf0e4654a77dea8031eeedb4ecc42450b6a", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,5 +1,5 @@\n \n-import std::ioivec;\n+import std::io;\n import std::ivec;\n import std::str;\n \n@@ -98,7 +98,7 @@ type print_stack_elt = {offset: int, pbreak: print_stack_break};\n \n const size_infinity: int = 0xffff;\n \n-fn mk_printer(out: ioivec::writer, linewidth: uint) -> printer {\n+fn mk_printer(out: io::writer, linewidth: uint) -> printer {\n     // Yes 3, it makes the ring buffers big enough to never\n     // fall behind.\n \n@@ -198,7 +198,7 @@ fn mk_printer(out: ioivec::writer, linewidth: uint) -> printer {\n  * the method called 'pretty_print', and the 'PRINT' process is the method\n  * called 'print'.\n  */\n-obj printer(out: ioivec::writer,\n+obj printer(out: io::writer,\n             buf_len: uint,\n             mutable margin: int, // width of lines we're constrained to\n "}, {"sha": "45fd48bcd8623db29d734b02397fdb4c9a116615", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,7 +1,7 @@\n \n import std::ivec;\n import std::int;\n-import std::ioivec;\n+import std::io;\n import std::str;\n import std::uint;\n import std::option;\n@@ -52,7 +52,7 @@ fn ibox(s: &ps, u: uint) { s.boxes += ~[pp::inconsistent]; pp::ibox(s.s, u); }\n \n fn end(s: &ps) { ivec::pop(s.boxes); pp::end(s.s); }\n \n-fn rust_printer(writer: ioivec::writer) -> ps {\n+fn rust_printer(writer: io::writer) -> ps {\n     let boxes: [pp::breaks] = ~[];\n     ret @{s: pp::mk_printer(writer, default_columns),\n           cm: none[codemap],\n@@ -73,7 +73,7 @@ const default_columns: uint = 78u;\n // it can scan the input text for comments and literals to\n // copy forward.\n fn print_crate(cm: &codemap, crate: @ast::crate, filename: str,\n-               in: ioivec::reader, out: ioivec::writer, ann: &pp_ann) {\n+               in: io::reader, out: io::writer, ann: &pp_ann) {\n     let boxes: [pp::breaks] = ~[];\n     let r = lexer::gather_comments_and_literals(cm, filename, in);\n     let s =\n@@ -103,15 +103,15 @@ fn item_to_str(i: &@ast::item) -> str { be to_str(i, print_item); }\n fn path_to_str(p: &ast::path) -> str { be to_str(p, print_path); }\n \n fn fun_to_str(f: &ast::_fn, name: str, params: &[ast::ty_param]) -> str {\n-    let writer = ioivec::string_writer();\n+    let writer = io::string_writer();\n     let s = rust_printer(writer.get_writer());\n     print_fn(s, f.decl, f.proto, name, params, f.decl.constraints);\n     eof(s.s);\n     ret writer.get_str();\n }\n \n fn block_to_str(blk: &ast::blk) -> str {\n-    let writer = ioivec::string_writer();\n+    let writer = io::string_writer();\n     let s = rust_printer(writer.get_writer());\n     // containing cbox, will be closed by print-block at }\n \n@@ -1494,7 +1494,7 @@ fn escape_str(st: str, to_escape: char) -> str {\n }\n \n fn to_str[T](t: &T, f: fn(&ps, &T) ) -> str {\n-    let writer = ioivec::string_writer();\n+    let writer = io::string_writer();\n     let s = rust_printer(writer.get_writer());\n     f(s, t);\n     eof(s.s);"}, {"sha": "1c35a96230f8fca51f2190288509ac7da9c5b1c1", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -14,9 +14,9 @@ import syntax::codemap::span;\n import ast::lit;\n import ast::path;\n import syntax::visit;\n-import std::ioivec::stdout;\n-import std::ioivec::str_writer;\n-import std::ioivec::string_writer;\n+import std::io::stdout;\n+import std::io::str_writer;\n+import std::io::string_writer;\n import syntax::print;\n import print::pprust::print_block;\n import print::pprust::print_item;"}, {"sha": "95a831e8c5f23a8fbb10ffc4cf061273c597824a", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -6,8 +6,8 @@ import std::getopts;\n import std::getopts::optopt;\n import std::getopts::opt_present;\n import std::getopts::opt_str;\n-import std::ioivec;\n-import std::ioivec::stdout;\n+import std::io;\n+import std::io::stdout;\n import std::vec;\n import std::ivec;\n import std::str;\n@@ -22,15 +22,15 @@ import rustc::syntax::parse::parser;\n import rustc::syntax::print::pprust;\n \n fn write_file(filename: &str, content: &str) {\n-    ioivec::file_writer(filename,\n-                        ~[ioivec::create,\n-                          ioivec::truncate]).write_str(content);\n+    io::file_writer(filename,\n+                        ~[io::create,\n+                          io::truncate]).write_str(content);\n     // Work around https://github.com/graydon/rust/issues/726\n     std::run::run_program(\"chmod\", [\"644\", filename]);\n }\n \n fn file_contains(filename: &str, needle: &str) -> bool {\n-    let contents = ioivec::read_whole_file_str(filename);\n+    let contents = io::read_whole_file_str(filename);\n     ret str::find(contents, needle) != -1;\n }\n \n@@ -139,10 +139,10 @@ iter under(n: uint) -> uint {\n     while i < n { put i; i += 1u; }\n }\n \n-fn devnull() -> ioivec::writer { std::ioivec::string_writer().get_writer() }\n+fn devnull() -> io::writer { std::io::string_writer().get_writer() }\n \n-fn as_str(f: fn(ioivec::writer) ) -> str {\n-    let w = std::ioivec::string_writer();\n+fn as_str(f: fn(io::writer) ) -> str {\n+    let w = std::io::string_writer();\n     f(w.get_writer());\n     ret w.get_str();\n }\n@@ -159,7 +159,7 @@ fn check_variants_of_ast(crate: &ast::crate, codemap: &codemap::codemap, filenam\n                 // It would be best to test the *crate* for stability, but testing the\n                 // string for stability is easier and ok for now.\n                 let str3 = as_str(bind pprust::print_crate(codemap, crate2, filename,\n-                                  ioivec::string_reader(\"\"), _,\n+                                  io::string_reader(\"\"), _,\n                                   pprust::no_ann()));\n                 // 1u would be sane here, but the pretty-printer currently has lots of whitespace and paren issues,\n                 // and https://github.com/graydon/rust/issues/766 is hilarious.\n@@ -229,7 +229,7 @@ fn parse_and_print(code: &str) -> str {\n     let crate =\n         parser::parse_crate_from_source_str(filename, code, ~[], sess);\n     ret as_str(bind pprust::print_crate(sess.cm, crate, filename,\n-                                        ioivec::string_reader(code), _,\n+                                        io::string_reader(code), _,\n                                         pprust::no_ann()));\n }\n \n@@ -320,7 +320,7 @@ fn check_convergence(files: &[str]) {\n     log_err #fmt(\"pp convergence tests: %u files\", ivec::len(files));\n     for file in files {\n         if !file_is_confusing(file) {\n-            let s = ioivec::read_whole_file_str(file);\n+            let s = io::read_whole_file_str(file);\n             if !content_is_confusing(s) {\n                 log_err #fmt(\"pp converge: %s\", file);\n                 // Change from 7u to 2u when https://github.com/graydon/rust/issues/759 is fixed\n@@ -333,13 +333,13 @@ fn check_convergence(files: &[str]) {\n fn check_variants(files: &[str]) {\n     for file in files {\n         if !file_is_confusing(file) {\n-            let s = ioivec::read_whole_file_str(file);\n+            let s = io::read_whole_file_str(file);\n             if content_is_dangerous_to_modify(s) || content_is_confusing(s) { cont; }\n             log_err \"check_variants: \" + file;\n             let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n             let crate = parser::parse_crate_from_source_str(file, s, ~[], sess);\n             log_err as_str(bind pprust::print_crate(sess.cm, crate, file,\n-                                        ioivec::string_reader(s), _,\n+                                        io::string_reader(s), _,\n                                         pprust::no_ann()));\n             check_variants_of_ast(*crate, sess.cm, file);\n         }"}, {"sha": "a843cdbcd7918bd1c99ab0f168a73401072e729a", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -117,9 +117,9 @@ fn doc_as_uint(d: doc) -> uint {\n \n \n // ebml writing\n-type writer = {writer: ioivec::buf_writer, mutable size_positions: [uint]};\n+type writer = {writer: io::buf_writer, mutable size_positions: [uint]};\n \n-fn write_sized_vint(w: &ioivec::buf_writer, n: uint, size: uint) {\n+fn write_sized_vint(w: &io::buf_writer, n: uint, size: uint) {\n     let buf: [u8];\n     alt size {\n       1u { buf = ~[0x80u8 | (n as u8)]; }\n@@ -139,7 +139,7 @@ fn write_sized_vint(w: &ioivec::buf_writer, n: uint, size: uint) {\n     w.write(buf);\n }\n \n-fn write_vint(w: &ioivec::buf_writer, n: uint) {\n+fn write_vint(w: &io::buf_writer, n: uint) {\n     if n < 0x7fu { write_sized_vint(w, n, 1u); ret; }\n     if n < 0x4000u { write_sized_vint(w, n, 2u); ret; }\n     if n < 0x200000u { write_sized_vint(w, n, 3u); ret; }\n@@ -148,7 +148,7 @@ fn write_vint(w: &ioivec::buf_writer, n: uint) {\n     fail;\n }\n \n-fn create_writer(w: &ioivec::buf_writer) -> writer {\n+fn create_writer(w: &io::buf_writer) -> writer {\n     let size_positions: [uint] = ~[];\n     ret {writer: w, mutable size_positions: size_positions};\n }\n@@ -169,9 +169,9 @@ fn start_tag(w: &writer, tag_id: uint) {\n fn end_tag(w: &writer) {\n     let last_size_pos = ivec::pop[uint](w.size_positions);\n     let cur_pos = w.writer.tell();\n-    w.writer.seek(last_size_pos as int, ioivec::seek_set);\n+    w.writer.seek(last_size_pos as int, io::seek_set);\n     write_sized_vint(w.writer, cur_pos - last_size_pos - 4u, 4u);\n-    w.writer.seek(cur_pos as int, ioivec::seek_set);\n+    w.writer.seek(cur_pos as int, io::seek_set);\n }\n // TODO: optionally perform \"relaxations\" on end_tag to more efficiently\n // encode sizes; this is a fixed point iteration"}, {"sha": "382e93479e1f8a41ad3e5b172c3b6ccccb3a079a", "filename": "src/lib/io.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "previous_filename": "src/lib/ioivec.rs"}, {"sha": "7db81f96d5b75bdaa3f0a96f785b089383a8dfec", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -36,9 +36,9 @@ fn run_program(prog: str, args: vec[str]) -> int {\n type program =\n     obj {\n         fn get_id() -> int;\n-        fn input() -> ioivec::writer;\n-        fn output() -> ioivec::reader;\n-        fn err() -> ioivec::reader;\n+        fn input() -> io::writer;\n+        fn output() -> io::reader;\n+        fn err() -> io::reader;\n         fn close_input();\n         fn finish() -> int;\n         fn destroy();\n@@ -65,17 +65,17 @@ fn start_program(prog: str, args: vec[str]) -> @program_res {\n                     err_file: os::libc::FILE,\n                     mutable finished: bool) {\n         fn get_id() -> int { ret pid; }\n-        fn input() -> ioivec::writer {\n-            ret ioivec::new_writer(\n-                ioivec::fd_buf_writer(in_fd, option::none));\n+        fn input() -> io::writer {\n+            ret io::new_writer(\n+                io::fd_buf_writer(in_fd, option::none));\n         }\n-        fn output() -> ioivec::reader {\n-            ret ioivec::new_reader(\n-                ioivec::FILE_buf_reader(out_file, option::none));\n+        fn output() -> io::reader {\n+            ret io::new_reader(\n+                io::FILE_buf_reader(out_file, option::none));\n         }\n-        fn err() -> ioivec::reader {\n-            ret ioivec::new_reader(\n-                ioivec::FILE_buf_reader(err_file, option::none));\n+        fn err() -> io::reader {\n+            ret io::new_reader(\n+                io::FILE_buf_reader(err_file, option::none));\n         }\n         fn close_input() {\n             let invalid_fd = -1;\n@@ -103,7 +103,7 @@ fn start_program(prog: str, args: vec[str]) -> @program_res {\n                                  false));\n }\n \n-fn read_all(rd: &ioivec::reader) -> str {\n+fn read_all(rd: &io::reader) -> str {\n     let buf = \"\";\n     while !rd.eof() {\n         let bytes = rd.read_bytes(4096u);"}, {"sha": "eee4630db20fb421ed6af66fdafbf528728e8c80", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -20,7 +20,7 @@ mod str;\n \n // General io and system-services modules.\n \n-mod ioivec;\n+mod io;\n mod sys;\n mod task;\n mod comm;"}, {"sha": "f61611a9a15bf61fc75d9c014e6ca3a9fbdf72eb", "filename": "src/lib/term.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fterm.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -40,9 +40,9 @@ const color_bright_cyan: u8 = 14u8;\n \n const color_bright_white: u8 = 15u8;\n \n-fn esc(writer: ioivec::buf_writer) { writer.write(~[0x1bu8, '[' as u8]); }\n+fn esc(writer: io::buf_writer) { writer.write(~[0x1bu8, '[' as u8]); }\n \n-fn reset(writer: ioivec::buf_writer) {\n+fn reset(writer: io::buf_writer) {\n     esc(writer);\n     writer.write(~['0' as u8, 'm' as u8]);\n }\n@@ -55,18 +55,18 @@ fn color_supported() -> bool {\n         };\n }\n \n-fn set_color(writer: ioivec::buf_writer, first_char: u8, color: u8) {\n+fn set_color(writer: io::buf_writer, first_char: u8, color: u8) {\n     assert (color < 16u8);\n     esc(writer);\n     if color >= 8u8 { writer.write(~['1' as u8, ';' as u8]); color -= 8u8; }\n     writer.write(~[first_char, ('0' as u8) + color, 'm' as u8]);\n }\n \n-fn fg(writer: ioivec::buf_writer, color: u8) {\n+fn fg(writer: io::buf_writer, color: u8) {\n     ret set_color(writer, '3' as u8, color);\n }\n \n-fn bg(writer: ioivec::buf_writer, color: u8) {\n+fn bg(writer: io::buf_writer, color: u8) {\n     ret set_color(writer, '4' as u8, color);\n }\n // export fg;"}, {"sha": "4d635e780b2755cb98f3bcd74a80933e1662afa5", "filename": "src/lib/termivec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Ftermivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Ftermivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftermivec.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -40,9 +40,9 @@ const color_bright_cyan: u8 = 14u8;\n \n const color_bright_white: u8 = 15u8;\n \n-fn esc(writer: ioivec::buf_writer) { writer.write(~[0x1bu8, '[' as u8]); }\n+fn esc(writer: io::buf_writer) { writer.write(~[0x1bu8, '[' as u8]); }\n \n-fn reset(writer: ioivec::buf_writer) {\n+fn reset(writer: io::buf_writer) {\n     esc(writer);\n     writer.write(~['0' as u8, 'm' as u8]);\n }\n@@ -60,18 +60,18 @@ fn color_supported() -> bool {\n         };\n }\n \n-fn set_color(writer: ioivec::buf_writer, first_char: u8, color: u8) {\n+fn set_color(writer: io::buf_writer, first_char: u8, color: u8) {\n     assert (color < 16u8);\n     esc(writer);\n     if color >= 8u8 { writer.write(~['1' as u8, ';' as u8]); color -= 8u8; }\n     writer.write(~[first_char, ('0' as u8) + color, 'm' as u8]);\n }\n \n-fn fg(writer: ioivec::buf_writer, color: u8) {\n+fn fg(writer: io::buf_writer, color: u8) {\n     ret set_color(writer, '3' as u8, color);\n }\n \n-fn bg(writer: ioivec::buf_writer, color: u8) {\n+fn bg(writer: io::buf_writer, color: u8) {\n     ret set_color(writer, '4' as u8, color);\n }\n // export fg;"}, {"sha": "70f9580bf732dca9994e2d89aca4fd04c44a77c1", "filename": "src/lib/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -106,7 +106,7 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n                       to_task: &test_to_task) -> bool {\n \n     type test_state = @{\n-        out: ioivec::writer,\n+        out: io::writer,\n         use_color: bool,\n         mutable total: uint,\n         mutable passed: uint,\n@@ -148,7 +148,7 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n     }\n \n     let st = @{\n-        out: ioivec::stdout(),\n+        out: io::stdout(),\n         use_color: use_color(),\n         mutable total: 0u,\n         mutable passed: 0u,\n@@ -181,19 +181,19 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n \n     ret success;\n \n-    fn write_ok(out: &ioivec::writer, use_color: bool) {\n+    fn write_ok(out: &io::writer, use_color: bool) {\n         write_pretty(out, \"ok\", term::color_green, use_color);\n     }\n \n-    fn write_failed(out: &ioivec::writer, use_color: bool) {\n+    fn write_failed(out: &io::writer, use_color: bool) {\n         write_pretty(out, \"FAILED\", term::color_red, use_color);\n     }\n \n-    fn write_ignored(out: &ioivec::writer, use_color: bool) {\n+    fn write_ignored(out: &io::writer, use_color: bool) {\n         write_pretty(out, \"ignored\", term::color_yellow, use_color);\n     }\n \n-    fn write_pretty(out: &ioivec::writer, word: &str, color: u8,\n+    fn write_pretty(out: &io::writer, word: &str, color: u8,\n                     use_color: bool) {\n         if use_color && term::color_supported() {\n             term::fg(out.get_buf_writer(), color);"}, {"sha": "3c0c27f472c6b3808f245006f08a5372d22e2309", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -17,7 +17,7 @@ import std::uint;\n import std::time;\n import std::str;\n import std::int::range;\n-import std::ioivec;\n+import std::io;\n import std::getopts;\n import std::task;\n import std::u64;\n@@ -94,7 +94,7 @@ fn main(argv: vec[str]) {\n \n             let num_trials = 10;\n \n-            let out = ioivec::stdout();\n+            let out = io::stdout();\n \n \n             for each n: int  in range(1, max + 1) {"}, {"sha": "beddc7b4377659d6ed90a5d89c37e3c1fbaae377", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -17,7 +17,7 @@ import std::str;\n import std::vec;\n import std::map;\n import std::ivec;\n-import std::ioivec;\n+import std::io;\n \n import std::time;\n import std::u64;\n@@ -27,7 +27,7 @@ import clone = std::task::clone_chan;\n \n fn map(filename: str, emit: map_reduce::putter) {\n     // log_err \"mapping \" + filename;\n-    let f = ioivec::file_reader(filename);\n+    let f = io::file_reader(filename);\n \n \n     while true {\n@@ -51,7 +51,7 @@ fn reduce(word: str, get: map_reduce::getter) {\n         }\n     }\n \n-    // auto out = ioivec::stdout();\n+    // auto out = io::stdout();\n     // out.write_line(#fmt(\"%s: %d\", word, count));\n \n     // log_err \"reduce \" + word + \" done.\";\n@@ -226,7 +226,7 @@ mod map_reduce {\n \n fn main(argv: vec[str]) {\n     if vec::len(argv) < 2u {\n-        let out = ioivec::stdout();\n+        let out = io::stdout();\n \n         out.write_line(#fmt(\"Usage: %s <filename> ...\", argv.(0)));\n \n@@ -251,7 +251,7 @@ fn main(argv: vec[str]) {\n     log_err \"MapReduce completed in \" + u64::str(elapsed) + \"ms\";\n }\n \n-fn read_word(r: ioivec::reader) -> option[str] {\n+fn read_word(r: io::reader) -> option[str] {\n     let w = \"\";\n \n     while !r.eof() {"}, {"sha": "bd250073405bc1a76a784cbe83e5e3cd94407336", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,6 +1,6 @@\n import std::option;\n import std::str;\n-import std::ioivec;\n+import std::io;\n import std::fs;\n \n import common::config;\n@@ -69,7 +69,7 @@ fn is_test_ignored(config: &config, testfile: &str) -> bool {\n }\n \n iter iter_header(testfile: &str) -> str {\n-    let rdr = ioivec::file_reader(testfile);\n+    let rdr = io::file_reader(testfile);\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n "}, {"sha": "94b7718565210ab09f50df247ebf4810310dd0f6", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -12,7 +12,7 @@ import std::ivec;\n import std::os;\n import std::run;\n import std::unsafe;\n-import std::ioivec;\n+import std::io;\n import std::str;\n \n export handle;\n@@ -73,8 +73,8 @@ fn run(handle: &handle, lib_path: &str,\n \n fn writeclose(fd: int, s: &option::t[str]) {\n     if option::is_some(s) {\n-        let writer = ioivec::new_writer(\n-            ioivec::fd_buf_writer(fd, option::none));\n+        let writer = io::new_writer(\n+            io::fd_buf_writer(fd, option::none));\n         writer.write_str(option::get(s));\n     }\n \n@@ -84,8 +84,8 @@ fn writeclose(fd: int, s: &option::t[str]) {\n fn readclose(fd: int) -> str {\n     // Copied from run::program_output\n     let file = os::fd_FILE(fd);\n-    let reader = ioivec::new_reader(\n-        ioivec::FILE_buf_reader(file, option::none));\n+    let reader = io::new_reader(\n+        io::FILE_buf_reader(file, option::none));\n     let buf = \"\";\n     while !reader.eof() {\n         let bytes = reader.read_bytes(4096u);"}, {"sha": "91aedb80301a740e197f9b00c2e4a831843a221e", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,4 +1,4 @@\n-import std::ioivec;\n+import std::io;\n import std::str;\n import std::option;\n import std::vec;\n@@ -23,7 +23,7 @@ fn run(cx: &cx, testfile: &str) {\n     test::configure_test_task();\n     if (cx.config.verbose) {\n         // We're going to be dumping a lot of info. Start on a new line.\n-        ioivec::stdout().write_str(\"\\n\\n\");\n+        io::stdout().write_str(\"\\n\\n\");\n     }\n     log #fmt(\"running %s\", testfile);\n     let props = load_props(testfile);\n@@ -95,7 +95,7 @@ fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n       option::none. { 2 }\n     };\n \n-    let srcs = ~[ioivec::read_whole_file_str(testfile)];\n+    let srcs = ~[io::read_whole_file_str(testfile)];\n \n     let round = 0;\n     while round < rounds {\n@@ -114,7 +114,7 @@ fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n     let expected = alt props.pp_exact {\n       option::some(file) {\n         let filepath = fs::connect(fs::dirname(testfile), file);\n-        ioivec::read_whole_file_str(filepath)\n+        io::read_whole_file_str(filepath)\n       }\n       option::none. {\n         srcs.(ivec::len(srcs) - 2u)\n@@ -167,7 +167,7 @@ actual:\\n\\\n ------------------------------------------\\n\\\n \\n\",\n                           expected, actual);\n-            ioivec::stdout().write_str(msg);\n+            io::stdout().write_str(msg);\n             fail;\n         }\n     }\n@@ -335,8 +335,8 @@ fn dump_output(config: &config, testfile: &str,\n fn dump_output_file(config: &config, testfile: &str,\n                     out: &str, extension: &str) {\n     let outfile = make_out_name(config, testfile, extension);\n-    let writer = ioivec::file_writer(outfile,\n-                                     ~[ioivec::create, ioivec::truncate]);\n+    let writer = io::file_writer(outfile,\n+                                     ~[io::create, io::truncate]);\n     writer.write_str(out);\n }\n \n@@ -370,15 +370,15 @@ fn maybe_dump_to_stdout(config: &config,\n         let sep2 = #fmt(\"------%s------------------------------\",\n                         \"stderr\");\n         let sep3 = \"------------------------------------------\";\n-        ioivec::stdout().write_line(sep1);\n-        ioivec::stdout().write_line(out);\n-        ioivec::stdout().write_line(sep2);\n-        ioivec::stdout().write_line(err);\n-        ioivec::stdout().write_line(sep3);\n+        io::stdout().write_line(sep1);\n+        io::stdout().write_line(out);\n+        io::stdout().write_line(sep2);\n+        io::stdout().write_line(err);\n+        io::stdout().write_line(sep3);\n     }\n }\n \n-fn error(err: &str) { ioivec::stdout().write_line(#fmt(\"\\nerror: %s\", err)); }\n+fn error(err: &str) { io::stdout().write_line(#fmt(\"\\nerror: %s\", err)); }\n \n fn fatal(err: &str) -> ! { error(err); fail; }\n \n@@ -397,6 +397,6 @@ stderr:\\n\\\n ------------------------------------------\\n\\\n \\n\",\n              err, procres.cmdline, procres.stdout, procres.stderr);\n-    ioivec::stdout().write_str(msg);\n+    io::stdout().write_str(msg);\n     fail;\n }"}, {"sha": "5f971777c751e49b5ce426a92370c3e966602e9c", "filename": "src/test/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Futil.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,6 +1,6 @@\n import std::option;\n import std::generic_os::getenv;\n-import std::ioivec;\n+import std::io;\n \n import common::config;\n \n@@ -25,5 +25,5 @@ fn lib_path_env_var() -> str { \"PATH\" }\n \n fn logv(config: &config, s: &str) {\n     log s;\n-    if config.verbose { ioivec::stdout().write_line(s); }\n+    if config.verbose { io::stdout().write_line(s); }\n }"}, {"sha": "002592d9020fe915aa4a8ad206e6df779205cafa", "filename": "src/test/stdtest/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fstdtest%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fstdtest%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fio.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n use std;\n-import std::ioivec;\n+import std::io;\n import std::str;\n \n #[cfg(target_os = \"linux\")]\n@@ -12,11 +12,11 @@ fn test_simple() {\n     let frood: str = \"A hoopy frood who really knows where his towel is.\";\n     log frood;\n     {\n-        let out: ioivec::writer =\n-            ioivec::file_writer(tmpfile, ~[ioivec::create, ioivec::truncate]);\n+        let out: io::writer =\n+            io::file_writer(tmpfile, ~[io::create, io::truncate]);\n         out.write_str(frood);\n     }\n-    let inp: ioivec::reader = ioivec::file_reader(tmpfile);\n+    let inp: io::reader = io::file_reader(tmpfile);\n     let frood2: str = inp.read_c_str();\n     log frood2;\n     assert (str::eq(frood, frood2));"}, {"sha": "76ab70980434313c2068da2b181489edd4b2c82f", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05da96f72d96eae1367c21064d7ab3c9a3f2bb/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=7d05da96f72d96eae1367c21064d7ab3c9a3f2bb", "patch": "@@ -1,7 +1,7 @@\n use std;\n import std::run;\n import std::os;\n-import std::ioivec;\n+import std::io;\n import std::option;\n import std::str;\n import std::ivec;\n@@ -46,8 +46,8 @@ fn test_pipes() {\n     assert expected == actual;\n \n     fn writeclose(fd: int, s: &str) {\n-        let writer = ioivec::new_writer(\n-            ioivec::fd_buf_writer(fd, option::none));\n+        let writer = io::new_writer(\n+            io::fd_buf_writer(fd, option::none));\n         writer.write_str(s);\n \n         os::libc::close(fd);\n@@ -56,8 +56,8 @@ fn test_pipes() {\n     fn readclose(fd: int) -> str {\n         // Copied from run::program_output\n         let file = os::fd_FILE(fd);\n-        let reader = ioivec::new_reader(\n-            ioivec::FILE_buf_reader(file, option::none));\n+        let reader = io::new_reader(\n+            io::FILE_buf_reader(file, option::none));\n         let buf = \"\";\n         while !reader.eof() {\n             let bytes = reader.read_bytes(4096u);"}]}