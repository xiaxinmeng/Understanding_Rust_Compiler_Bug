{"sha": "b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OWFmMmZjZGU5MWFiZWFlODA1YzJkYmNjZmRiZjcxMTRiZmQ0N2I=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-04-12T23:03:53Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-04-16T18:11:59Z"}, "message": "Implement #[rustc_skip_array_during_method_dispatch]", "tree": {"sha": "05a7eed70824bfae0aef053f516fb5a5327824fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a7eed70824bfae0aef053f516fb5a5327824fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "html_url": "https://github.com/rust-lang/rust/commit/b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2faef12b656d40522ca3b4a53b36299b4364e717", "url": "https://api.github.com/repos/rust-lang/rust/commits/2faef12b656d40522ca3b4a53b36299b4364e717", "html_url": "https://github.com/rust-lang/rust/commit/2faef12b656d40522ca3b4a53b36299b4364e717"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "be3caf709c76db1e23fbe0b5ae457edcb061c6c8", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -540,6 +540,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         rustc_main, Normal, template!(Word),\n         \"the `#[rustc_main]` attribute is used internally to specify test entry point function\",\n     ),\n+    rustc_attr!(\n+        rustc_skip_array_during_method_dispatch, Normal, template!(Word),\n+        \"the `#[rustc_skip_array_during_method_dispatch]` attribute is used to exclude a trait \\\n+        from method dispatch when the receiver is an array, for compatibility in editions < 2021.\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:"}, {"sha": "19ae5ce69c1365d33062a679284a29772ff23626", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -757,6 +757,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     data.paren_sugar,\n                     data.has_auto_impl,\n                     data.is_marker,\n+                    data.skip_array_during_method_dispatch,\n                     data.specialization_kind,\n                     self.def_path_hash(item_id),\n                 )\n@@ -767,6 +768,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 false,\n                 false,\n                 false,\n+                false,\n                 ty::trait_def::TraitSpecializationKind::None,\n                 self.def_path_hash(item_id),\n             ),"}, {"sha": "e8f02b8e66f0a9f03caaabd16d90d6c786fba389", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -1422,6 +1422,7 @@ impl EncodeContext<'a, 'tcx> {\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: self.tcx.trait_is_auto(def_id),\n                     is_marker: trait_def.is_marker,\n+                    skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,\n                     specialization_kind: trait_def.specialization_kind,\n                 };\n "}, {"sha": "9f665d5daaa032c9b1aabf4c5eca708c4eda1521", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -385,6 +385,7 @@ struct TraitData {\n     paren_sugar: bool,\n     has_auto_impl: bool,\n     is_marker: bool,\n+    skip_array_during_method_dispatch: bool,\n     specialization_kind: ty::trait_def::TraitSpecializationKind,\n }\n "}, {"sha": "e9b8883f29a488e578ae43af77264de178b046a0", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -35,6 +35,11 @@ pub struct TraitDef {\n     /// and thus `impl`s of it are allowed to overlap.\n     pub is_marker: bool,\n \n+    /// If `true`, then this trait has the `#[rustc_skip_array_during_method_dispatch]`\n+    /// attribute, indicating that editions before 2021 should not consider this trait\n+    /// during method dispatch if the receiver is an array.\n+    pub skip_array_during_method_dispatch: bool,\n+\n     /// Used to determine whether the standard library is allowed to specialize\n     /// on this trait.\n     pub specialization_kind: TraitSpecializationKind,\n@@ -82,6 +87,7 @@ impl<'tcx> TraitDef {\n         paren_sugar: bool,\n         has_auto_impl: bool,\n         is_marker: bool,\n+        skip_array_during_method_dispatch: bool,\n         specialization_kind: TraitSpecializationKind,\n         def_path_hash: DefPathHash,\n     ) -> TraitDef {\n@@ -91,6 +97,7 @@ impl<'tcx> TraitDef {\n             paren_sugar,\n             has_auto_impl,\n             is_marker,\n+            skip_array_during_method_dispatch,\n             specialization_kind,\n             def_path_hash,\n         }"}, {"sha": "a88bcc5c558815c9b7b3d5ba20409ec1695263aa", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -1030,6 +1030,7 @@ symbols! {\n         rustc_regions,\n         rustc_reservation_impl,\n         rustc_serialize,\n+        rustc_skip_array_during_method_dispatch,\n         rustc_specialization_trait,\n         rustc_stable,\n         rustc_std_internal_symbol,"}, {"sha": "88fd94931e1e01ceb3a7c19d4bf6a3f04375d1de", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -1461,6 +1461,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 }\n \n                 TraitCandidate(trait_ref) => {\n+                    if let Some(method_name) = self.method_name {\n+                        // Some trait methods are excluded for arrays before 2021.\n+                        if self_ty.is_array() && !method_name.span.rust_2021() {\n+                            let trait_def = self.tcx.trait_def(trait_ref.def_id);\n+                            if trait_def.skip_array_during_method_dispatch {\n+                                return ProbeResult::NoMatch;\n+                            }\n+                        }\n+                    }\n                     let predicate = trait_ref.without_const().to_predicate(self.tcx);\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {"}, {"sha": "3692642b6e20d1380c2bb5b56afe09d414c48b0a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79af2fcde91abeae805c2dbccfdbf7114bfd47b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b79af2fcde91abeae805c2dbccfdbf7114bfd47b", "patch": "@@ -1191,6 +1191,8 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     }\n \n     let is_marker = tcx.has_attr(def_id, sym::marker);\n+    let skip_array_during_method_dispatch =\n+        tcx.has_attr(def_id, sym::rustc_skip_array_during_method_dispatch);\n     let spec_kind = if tcx.has_attr(def_id, sym::rustc_unsafe_specialization_marker) {\n         ty::trait_def::TraitSpecializationKind::Marker\n     } else if tcx.has_attr(def_id, sym::rustc_specialization_trait) {\n@@ -1199,7 +1201,16 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         ty::trait_def::TraitSpecializationKind::None\n     };\n     let def_path_hash = tcx.def_path_hash(def_id);\n-    ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, spec_kind, def_path_hash)\n+    ty::TraitDef::new(\n+        def_id,\n+        unsafety,\n+        paren_sugar,\n+        is_auto,\n+        is_marker,\n+        skip_array_during_method_dispatch,\n+        spec_kind,\n+        def_path_hash,\n+    )\n }\n \n fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<Span> {"}]}