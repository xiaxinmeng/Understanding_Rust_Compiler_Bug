{"sha": "80a1536c7ab73c867d5a60f4441058e7e2231d8d", "node_id": "C_kwDOAAsO6NoAKDgwYTE1MzZjN2FiNzNjODY3ZDVhNjBmNDQ0MTA1OGU3ZTIyMzFkOGQ", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-01-22T11:05:36Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-01-27T18:26:04Z"}, "message": "recover more unbraced const args", "tree": {"sha": "2ca9284a9ab25efe3796424acb961126bbd2b1a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ca9284a9ab25efe3796424acb961126bbd2b1a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80a1536c7ab73c867d5a60f4441058e7e2231d8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPUFz0ACgkQ0XoHIV9o\n5xMshg//c6ltLD7fWXzwhBod9GiB4On4VB5sblTQ2jRZKuTZmgHyCu4UDFOw0GH9\nSTpnEUy8wjJC245H1BsjM9WFL/2iYAZ5+DWzVzGRU7cgLbg1e6yPIfYPOE+uvyIS\nGyBbqVdBgWe3R7VGinZLm16gqRxAfuKvQid5mmJ9OTWnPDSaaxWy4QOE1KdsYHZJ\n9WtmTHBTUGAB7Z5ocjpGZgInvCA81cHrjbNhPyLGFZ/o2dJKUhMVBzdjz4vFAsti\nz7/RJOeLK8Hb9LPIHy5vqSY1n7LDJAHA1++Ka1uYhPesj9sBOpwgnBTNUZo2uSIx\nbyIY1Jcji8EmTXI2FEHNLRjhMUlwCExESTZRdkxntnaG1IpZM2JWoFwsnBMHBlhZ\nUBnx2RZ8AIFoAjOO20KQ1Afywgw9t6nht38M1ui6vhpkzTVtX1Q5zH9yLYDv0jgw\nfPGv/6TDr4c/i3VZ2krGZ/sUPSnW+1oUb7MCSUsKWHtC8qMSeWxlMrFE6HIB5mkg\nlKyxFY1Q92qnTqGTFN9AEqPaDztZfb9St6jxHfNom2O5DqFq4ErjAWvdwIkCgzQD\nOSZ3OUbNnQvFZ+BkPNJNYGZyPDQqD1G0NADl4awCj1Da6fcMEAQR2hTZIyvTdFDE\nbaga8RdgQNI/kIjl66bZzTdJ/3JzyAONoJ5osznggOUu9TGiTLU=\n=XYk4\n-----END PGP SIGNATURE-----", "payload": "tree 2ca9284a9ab25efe3796424acb961126bbd2b1a8\nparent 705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1674385536 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1674843964 +0100\n\nrecover more unbraced const args\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80a1536c7ab73c867d5a60f4441058e7e2231d8d", "html_url": "https://github.com/rust-lang/rust/commit/80a1536c7ab73c867d5a60f4441058e7e2231d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80a1536c7ab73c867d5a60f4441058e7e2231d8d/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "html_url": "https://github.com/rust-lang/rust/commit/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0"}], "stats": {"total": 210, "additions": 188, "deletions": 22}, "files": [{"sha": "6596a06afab659fdad764741f4878389766cf7db", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/80a1536c7ab73c867d5a60f4441058e7e2231d8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a1536c7ab73c867d5a60f4441058e7e2231d8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=80a1536c7ab73c867d5a60f4441058e7e2231d8d", "patch": "@@ -2353,6 +2353,28 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n+    /// Try to recover from an unbraced const argument whose first token [could begin a type][ty].\n+    ///\n+    /// [ty]: token::Token::can_begin_type\n+    pub(crate) fn recover_unbraced_const_arg_that_can_begin_ty(\n+        &mut self,\n+        mut snapshot: SnapshotParser<'a>,\n+    ) -> Option<P<ast::Expr>> {\n+        match snapshot.parse_expr_res(Restrictions::CONST_EXPR, None) {\n+            // Since we don't know the exact reason why we failed to parse the type or the\n+            // expression, employ a simple heuristic to weed out some pathological cases.\n+            Ok(expr) if let token::Comma | token::Gt = snapshot.token.kind => {\n+                self.restore_snapshot(snapshot);\n+                Some(expr)\n+            }\n+            Ok(_) => None,\n+            Err(err) => {\n+                err.cancel();\n+                None\n+            }\n+        }\n+    }\n+\n     /// Creates a dummy const argument, and reports that the expression must be enclosed in braces\n     pub fn dummy_const_arg_needs_braces(\n         &self,"}, {"sha": "2e706a00cf7f3babcbf027c568599a77d3431597", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/80a1536c7ab73c867d5a60f4441058e7e2231d8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a1536c7ab73c867d5a60f4441058e7e2231d8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=80a1536c7ab73c867d5a60f4441058e7e2231d8d", "patch": "@@ -675,22 +675,42 @@ impl<'a> Parser<'a> {\n             GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n             // Parse type argument.\n-            let is_const_fn =\n-                self.look_ahead(1, |t| t.kind == token::OpenDelim(Delimiter::Parenthesis));\n-            let mut snapshot = self.create_snapshot_for_diagnostic();\n+\n+            // Proactively create a parser snapshot enabling us to rewind and try to reparse the\n+            // input as a const expression in case we fail to parse a type. If we successfully\n+            // do so, we will report an error that it needs to be wrapped in braces.\n+            let mut snapshot = None;\n+            if self.may_recover() && self.token.can_begin_expr() {\n+                snapshot = Some(self.create_snapshot_for_diagnostic());\n+            }\n+\n             match self.parse_ty() {\n-                Ok(ty) => GenericArg::Type(ty),\n+                Ok(ty) => {\n+                    // Since the type parser recovers from some malformed slice and array types and\n+                    // successfully returns a type, we need to look for `TyKind::Err`s in the\n+                    // type to determine if error recovery has occurred and if the input is not a\n+                    // syntactically valid type after all.\n+                    if let ast::TyKind::Slice(inner_ty) | ast::TyKind::Array(inner_ty, _) = &ty.kind\n+                        && let ast::TyKind::Err = inner_ty.kind\n+                        && let Some(snapshot) = snapshot\n+                        && let Some(expr) = self.recover_unbraced_const_arg_that_can_begin_ty(snapshot)\n+                    {\n+                        return Ok(Some(self.dummy_const_arg_needs_braces(\n+                            self.struct_span_err(expr.span, \"invalid const generic expression\"),\n+                            expr.span,\n+                        )));\n+                    }\n+\n+                    GenericArg::Type(ty)\n+                }\n                 Err(err) => {\n-                    if is_const_fn {\n-                        match (*snapshot).parse_expr_res(Restrictions::CONST_EXPR, None) {\n-                            Ok(expr) => {\n-                                self.restore_snapshot(snapshot);\n-                                return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n-                            }\n-                            Err(err) => {\n-                                err.cancel();\n-                            }\n-                        }\n+                    if let Some(snapshot) = snapshot\n+                        && let Some(expr) = self.recover_unbraced_const_arg_that_can_begin_ty(snapshot)\n+                    {\n+                        return Ok(Some(self.dummy_const_arg_needs_braces(\n+                            err,\n+                            expr.span,\n+                        )));\n                     }\n                     // Try to recover from possible `const` arg without braces.\n                     return self.recover_const_arg(start, err).map(Some);"}, {"sha": "423752ca25eba9320e7589369bb58e224cc887ac", "filename": "tests/ui/const-generics/bad-const-generic-exprs.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/80a1536c7ab73c867d5a60f4441058e7e2231d8d/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a1536c7ab73c867d5a60f4441058e7e2231d8d/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs?ref=80a1536c7ab73c867d5a60f4441058e7e2231d8d", "patch": "@@ -13,10 +13,34 @@ fn main() {\n     let _: Wow<A.0>;\n     //~^ ERROR expected one of\n     //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n-\n-    // FIXME(compiler-errors): This one is still unsatisfying,\n-    // and probably a case I could see someone typing by accident..\n+    let _: Wow<[]>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n     let _: Wow<[12]>;\n-    //~^ ERROR expected type, found\n-    //~| ERROR type provided when a constant was expected\n+    //~^ ERROR expected type\n+    //~| ERROR invalid const generic expression\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<[0, 1, 3]>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<[0xff; 8]>;\n+    //~^ ERROR expected type\n+    //~| ERROR invalid const generic expression\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<[1, 2]>; // Regression test for issue #81698.\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<&0>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<(\"\", 0)>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<(1 + 2) * 3>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    // FIXME(fmease): This one is pretty bad.\n+    let _: Wow<!0>;\n+    //~^ ERROR expected one of\n+    //~| HELP you might have meant to end the type parameters here\n }"}, {"sha": "17a63a96fe4fe5e12a68594e8c3d521b980c80ea", "filename": "tests/ui/const-generics/bad-const-generic-exprs.stderr", "status": "modified", "additions": 103, "deletions": 3, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/80a1536c7ab73c867d5a60f4441058e7e2231d8d/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80a1536c7ab73c867d5a60f4441058e7e2231d8d/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr?ref=80a1536c7ab73c867d5a60f4441058e7e2231d8d", "patch": "@@ -42,18 +42,118 @@ help: expressions must be enclosed in braces to be used as const generic argumen\n LL |     let _: Wow<{ A.0 }>;\n    |                +     +\n \n+error: expected type, found `]`\n+  --> $DIR/bad-const-generic-exprs.rs:16:17\n+   |\n+LL |     let _: Wow<[]>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [] }>;\n+   |                +    +\n+\n error: expected type, found `12`\n   --> $DIR/bad-const-generic-exprs.rs:19:17\n    |\n LL |     let _: Wow<[12]>;\n    |                 ^^ expected type\n \n-error[E0747]: type provided when a constant was expected\n+error: invalid const generic expression\n   --> $DIR/bad-const-generic-exprs.rs:19:16\n    |\n LL |     let _: Wow<[12]>;\n    |                ^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [12] }>;\n+   |                +      +\n+\n+error: expected type, found `0`\n+  --> $DIR/bad-const-generic-exprs.rs:23:17\n+   |\n+LL |     let _: Wow<[0, 1, 3]>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [0, 1, 3] }>;\n+   |                +           +\n+\n+error: expected type, found `0xff`\n+  --> $DIR/bad-const-generic-exprs.rs:26:17\n+   |\n+LL |     let _: Wow<[0xff; 8]>;\n+   |                 ^^^^ expected type\n+\n+error: invalid const generic expression\n+  --> $DIR/bad-const-generic-exprs.rs:26:16\n+   |\n+LL |     let _: Wow<[0xff; 8]>;\n+   |                ^^^^^^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [0xff; 8] }>;\n+   |                +           +\n+\n+error: expected type, found `1`\n+  --> $DIR/bad-const-generic-exprs.rs:30:17\n+   |\n+LL |     let _: Wow<[1, 2]>; // Regression test for issue #81698.\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [1, 2] }>; // Regression test for issue #81698.\n+   |                +        +\n+\n+error: expected type, found `0`\n+  --> $DIR/bad-const-generic-exprs.rs:33:17\n+   |\n+LL |     let _: Wow<&0>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ &0 }>;\n+   |                +    +\n+\n+error: expected type, found `\"\"`\n+  --> $DIR/bad-const-generic-exprs.rs:36:17\n+   |\n+LL |     let _: Wow<(\"\", 0)>;\n+   |                 ^^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ (\"\", 0) }>;\n+   |                +         +\n+\n+error: expected type, found `1`\n+  --> $DIR/bad-const-generic-exprs.rs:39:17\n+   |\n+LL |     let _: Wow<(1 + 2) * 3>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ (1 + 2) * 3 }>;\n+   |                +             +\n+\n+error: expected one of `,` or `>`, found `0`\n+  --> $DIR/bad-const-generic-exprs.rs:43:17\n+   |\n+LL |     let _: Wow<!0>;\n+   |         -       ^ expected one of `,` or `>`\n+   |         |\n+   |         while parsing the type for `_`\n+   |\n+help: you might have meant to end the type parameters here\n+   |\n+LL |     let _: Wow<!>0>;\n+   |                 +\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 15 previous errors\n \n-For more information about this error, try `rustc --explain E0747`."}]}