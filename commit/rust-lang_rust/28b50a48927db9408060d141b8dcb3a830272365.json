{"sha": "28b50a48927db9408060d141b8dcb3a830272365", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YjUwYTQ4OTI3ZGI5NDA4MDYwZDE0MWI4ZGNiM2E4MzAyNzIzNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-27T03:03:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-27T03:03:40Z"}, "message": "auto merge of #5096 : luqmana/rust/spell, r=catamorphism\n\nAddress #2281\r\n\r\n\r\n```\r\n-> % cat foo.rs\r\nfn foo() -> int {\r\n    let bar = 10;\r\n\r\n    bad\r\n}\r\n```\r\n\r\n```\r\n-> % rustc foo.rs\r\nfoo.rs:4:4: 4:7 error: unresolved name: `bad`. Did you mean: `bar`?\r\nfoo.rs:4     bad\r\n             ^~~\r\nerror: aborting due to previous error\r\n```", "tree": {"sha": "50b89ed765c31fd3dfd6273402ff9f742d3d28c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b89ed765c31fd3dfd6273402ff9f742d3d28c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28b50a48927db9408060d141b8dcb3a830272365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28b50a48927db9408060d141b8dcb3a830272365", "html_url": "https://github.com/rust-lang/rust/commit/28b50a48927db9408060d141b8dcb3a830272365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28b50a48927db9408060d141b8dcb3a830272365/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93a7f237d78bf84494ed158a43e4aeae9966dd7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/93a7f237d78bf84494ed158a43e4aeae9966dd7c", "html_url": "https://github.com/rust-lang/rust/commit/93a7f237d78bf84494ed158a43e4aeae9966dd7c"}, {"sha": "a0866d0166283ffca0ce6ded21ba11ffb73f9554", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0866d0166283ffca0ce6ded21ba11ffb73f9554", "html_url": "https://github.com/rust-lang/rust/commit/a0866d0166283ffca0ce6ded21ba11ffb73f9554"}], "stats": {"total": 103, "additions": 92, "deletions": 11}, "files": [{"sha": "92e980e34d08ffedea5cddfdddd936aa2f1b3165", "filename": "src/libcore/str.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -590,6 +590,40 @@ pub pure fn split_str_nonempty(s: &a/str, sep: &b/str) -> ~[~str] {\n     result\n }\n \n+/// Levenshtein Distance between two strings\n+pub fn levdistance(s: &str, t: &str) -> uint {\n+\n+    let slen = str::len(s);\n+    let tlen = str::len(t);\n+\n+    if slen == 0 { return tlen; }\n+    if tlen == 0 { return slen; }\n+\n+    let mut dcol = vec::from_fn(tlen + 1, |x| x);\n+\n+    for str::each_chari(s) |i, sc| {\n+\n+        let mut current = i;\n+        dcol[0] = current + 1;\n+\n+        for str::each_chari(t) |j, tc| {\n+\n+            let mut next = dcol[j + 1];\n+\n+            if sc == tc {\n+                dcol[j + 1] = current;\n+            } else {\n+                dcol[j + 1] = ::cmp::min(current, next);\n+                dcol[j + 1] = ::cmp::min(dcol[j + 1], dcol[j]) + 1;\n+            }\n+\n+            current = next;\n+        }\n+    }\n+\n+    return dcol[tlen];\n+}\n+\n /**\n  * Splits a string into a vector of the substrings separated by LF ('\\n')\n  */"}, {"sha": "e75a73650b4251219713ca15114570d5845474a6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -4816,6 +4816,42 @@ pub impl Resolver {\n         }\n     }\n \n+    fn find_best_match_for_name(@mut self, name: &str) -> Option<~str> {\n+        let mut maybes: ~[~str] = ~[];\n+        let mut values: ~[uint] = ~[];\n+\n+        let mut j = self.value_ribs.len();\n+        while j != 0 {\n+            j -= 1;\n+            let rib = self.value_ribs.get_elt(j);\n+            for rib.bindings.each_entry |e| {\n+                vec::push(&mut maybes, copy *self.session.str_of(e.key));\n+                vec::push(&mut values, uint::max_value);\n+            }\n+        }\n+\n+        let mut smallest = 0;\n+        for vec::eachi(maybes) |i, &other| {\n+\n+            values[i] = str::levdistance(name, other);\n+\n+            if values[i] <= values[smallest] {\n+                smallest = i;\n+            }\n+        }\n+\n+        if vec::len(values) > 0 &&\n+            values[smallest] != uint::max_value &&\n+            values[smallest] < str::len(name) + 2 &&\n+            maybes[smallest] != name.to_owned() {\n+\n+            Some(vec::swap_remove(&mut maybes, smallest))\n+\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn name_exists_in_scope_struct(@mut self, name: &str) -> bool {\n         let mut i = self.type_ribs.len();\n         while i != 0 {\n@@ -4882,9 +4918,20 @@ pub impl Resolver {\n                                         wrong_name));\n                         }\n                         else {\n-                            self.session.span_err(expr.span,\n-                                                fmt!(\"unresolved name: %s\",\n+                            match self.find_best_match_for_name(wrong_name) {\n+\n+                                Some(m) => {\n+                                    self.session.span_err(expr.span,\n+                                            fmt!(\"unresolved name: `%s`. \\\n+                                                Did you mean: `%s`?\",\n+                                                wrong_name, m));\n+                                }\n+                                None => {\n+                                    self.session.span_err(expr.span,\n+                                            fmt!(\"unresolved name: `%s`.\",\n                                                 wrong_name));\n+                                }\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "94488fbb55213b5b9575382e0884bf97b04fde28", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -16,6 +16,6 @@ fn my_fail() -> ! { fail!(); }\n fn main() {\n     match true { false => { my_fail(); } true => { } }\n \n-    log(debug, x); //~ ERROR unresolved name: x\n+    log(debug, x); //~ ERROR unresolved name: `x`.\n     let x: int;\n }"}, {"sha": "30014817308f433d47e77fc3a240ca637f779d94", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name: m1::a\n+// error-pattern: unresolved name: `m1::a`. Did you mean: `args`?\n \n mod m1 {}\n "}, {"sha": "88239a4cc3fee9a31d1efae9c004e44ad4e60c83", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name: m1::a\n+// error-pattern: unresolved name: `m1::a`. Did you mean: `args`?\n \n mod m1 {\n     pub mod a {}"}, {"sha": "a360d6579574fc3b2b8fa2488304c30d369ecb7a", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: unresolved name: this_does_nothing_what_the\n+// error-pattern: unresolved name: `this_does_nothing_what_the`.\n fn main() { debug!(\"doing\"); this_does_nothing_what_the; debug!(\"boing\"); }\n "}, {"sha": "7a45ecc83b0c297fcbd247dd398e63b56d754f3a", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    log(error, x); //~ ERROR unresolved name: x\n+    log(error, x); //~ ERROR unresolved name: `x`.\n }"}, {"sha": "1d4cd69c54ee0a23a6693b1778da31a6934e76ac", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -19,7 +19,7 @@ fn siphash(k0 : u64) {\n     impl siphash {\n         fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n-           //~^ ERROR unresolved name: k0\n+           //~^ ERROR unresolved name: `k0`.\n         }\n     }\n }"}, {"sha": "7381d36a223967823dc112a0fb581859e362b013", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -31,9 +31,9 @@ fn siphash(k0 : u64, k1 : u64) -> siphash {\n    impl siphash for sipstate {\n         fn reset() {\n             self.v0 = k0 ^ 0x736f6d6570736575;  //~ ERROR attempted dynamic environment-capture\n-            //~^ ERROR unresolved name: k0\n+            //~^ ERROR unresolved name: `k0`.\n             self.v1 = k1 ^ 0x646f72616e646f6d;   //~ ERROR attempted dynamic environment-capture\n-            //~^ ERROR unresolved name: k1\n+            //~^ ERROR unresolved name: `k1`.\n         }\n         fn result() -> u64 { return mk_result(self); }\n     }"}, {"sha": "e5a7a7990e526184d1726b8380b67d5bca558a91", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28b50a48927db9408060d141b8dcb3a830272365/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=28b50a48927db9408060d141b8dcb3a830272365", "patch": "@@ -23,7 +23,7 @@ fn siphash(k0 : u64) -> siphash {\n    impl siphash for sipstate {\n         fn reset() {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n-           //~^ ERROR unresolved name: k0\n+           //~^ ERROR unresolved name: `k0`.\n         }\n     }\n     fail!();"}]}