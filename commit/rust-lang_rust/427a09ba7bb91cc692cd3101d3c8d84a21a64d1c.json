{"sha": "427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "node_id": "C_kwDOAAsO6NoAKDQyN2EwOWJhN2JiOTFjYzY5MmNkMzEwMWQzYzhkODRhMjFhNjRkMWM", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-09-28T20:55:36Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:04:20Z"}, "message": "Add configuration for raw pointer heuristic", "tree": {"sha": "c9de9fe2e1c7e4258a607b95f7b59abfd22baca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9de9fe2e1c7e4258a607b95f7b59abfd22baca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "html_url": "https://github.com/rust-lang/rust/commit/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d413e157a5410b40eaa42decad6bf9d85a577a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d413e157a5410b40eaa42decad6bf9d85a577a2d", "html_url": "https://github.com/rust-lang/rust/commit/d413e157a5410b40eaa42decad6bf9d85a577a2d"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "f9d660972cbcb3014464919a1d9384610d327cae", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "patch": "@@ -535,7 +535,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n     store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n-    store.register_late_pass(|| Box::new(non_send_field_in_send_ty::NonSendFieldInSendTy));\n+    let enable_raw_pointer_heuristic = conf.enable_raw_pointer_heuristic;\n+    store.register_late_pass(move || Box::new(non_send_field_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic)));\n }\n \n #[rustfmt::skip]"}, {"sha": "706214cb3d51e16d945e060c713474e19ef3354c", "filename": "clippy_lints/src/non_send_field_in_send_ty.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs?ref=427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n \n@@ -48,10 +48,29 @@ declare_clippy_lint! {\n     \"there is field that does not implement `Send` in a `Send` struct\"\n }\n \n-declare_lint_pass!(NonSendFieldInSendTy => [NON_SEND_FIELD_IN_SEND_TY]);\n+#[derive(Copy, Clone)]\n+pub struct NonSendFieldInSendTy {\n+    enable_raw_pointer_heuristic: bool,\n+}\n+\n+impl NonSendFieldInSendTy {\n+    pub fn new(enable_raw_pointer_heuristic: bool) -> Self {\n+        Self {\n+            enable_raw_pointer_heuristic,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(NonSendFieldInSendTy => [NON_SEND_FIELD_IN_SEND_TY]);\n \n impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let ty_allowed_in_send = if self.enable_raw_pointer_heuristic {\n+            ty_allowed_with_raw_pointer_heuristic\n+        } else {\n+            ty_implements_send_or_copy\n+        };\n+\n         // Checks if we are in `Send` impl item.\n         // We start from `Send` impl instead of `check_field_def()` because\n         // single `AdtDef` may have multiple `Send` impls due to generic\n@@ -157,13 +176,6 @@ fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<\n         .collect()\n }\n \n-/// Determine if the given type is allowed in an ADT that implements `Send`\n-fn ty_allowed_in_send(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n-    // TODO: check configuration and call `ty_implements_send_or_copy()` or\n-    // `ty_allowed_with_raw_pointer_heuristic()`\n-    ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)\n-}\n-\n /// Determine if the given type is `Send` or `Copy`\n fn ty_implements_send_or_copy(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n     implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty)"}, {"sha": "177c0fd375c97e36cad5178200d06f0c5c1eda1c", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "patch": "@@ -284,6 +284,10 @@ define_Conf! {\n     ///\n     /// The list of unicode scripts allowed to be used in the scope.\n     (allowed_scripts: Vec<String> = vec![\"Latin\".to_string()]),\n+    /// Lint: NON_SEND_FIELD_IN_SEND_TY.\n+    ///\n+    /// Whether to apply the raw pointer heuristic in `non_send_field_in_send_ty` lint.\n+    (enable_raw_pointer_heuristic: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "0eff2be796048fe2520ef0867cb67291bb2363dc", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}]}