{"sha": "2a993205831f37e6f13f03e4d1bac62cc2dcd373", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTkzMjA1ODMxZjM3ZTZmMTNmMDNlNGQxYmFjNjJjYzJkY2QzNzM=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-03T18:30:56Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:56Z"}, "message": "Add tests for KillHandle", "tree": {"sha": "6c7ffc1897a0017f3db4231cc965c00c66ba883c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7ffc1897a0017f3db4231cc965c00c66ba883c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a993205831f37e6f13f03e4d1bac62cc2dcd373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a993205831f37e6f13f03e4d1bac62cc2dcd373", "html_url": "https://github.com/rust-lang/rust/commit/2a993205831f37e6f13f03e4d1bac62cc2dcd373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a993205831f37e6f13f03e4d1bac62cc2dcd373/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc199bea04a860f9021bf379c4ed26c9008cae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc199bea04a860f9021bf379c4ed26c9008cae7", "html_url": "https://github.com/rust-lang/rust/commit/afc199bea04a860f9021bf379c4ed26c9008cae7"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "2ae62fc91e8df9acc94ca267b181a5a1dbc67ef9", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/2a993205831f37e6f13f03e4d1bac62cc2dcd373/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a993205831f37e6f13f03e4d1bac62cc2dcd373/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=2a993205831f37e6f13f03e4d1bac62cc2dcd373", "patch": "@@ -193,3 +193,143 @@ impl Death {\n         };\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    #[allow(unused_mut)];\n+    use rt::test::*;\n+    use super::*;\n+    use util;\n+\n+    #[test]\n+    fn no_tombstone_success() {\n+        do run_in_newsched_task {\n+            // Tests case 4 of the 4-way match in reparent_children.\n+            let mut parent = KillHandle::new();\n+            let mut child  = KillHandle::new();\n+\n+            // Without another handle to child, the try unwrap should succeed.\n+            child.reparent_children_to(&mut parent);\n+            let mut parent_inner = unsafe { parent.unwrap() };\n+            assert!(parent_inner.child_tombstones.is_none());\n+            assert!(parent_inner.any_child_failed == false);\n+        }\n+    }\n+    #[test]\n+    fn no_tombstone_failure() {\n+        do run_in_newsched_task {\n+            // Tests case 2 of the 4-way match in reparent_children.\n+            let mut parent = KillHandle::new();\n+            let mut child  = KillHandle::new();\n+\n+            child.notify_immediate_failure();\n+            // Without another handle to child, the try unwrap should succeed.\n+            child.reparent_children_to(&mut parent);\n+            let mut parent_inner = unsafe { parent.unwrap() };\n+            assert!(parent_inner.child_tombstones.is_none());\n+            // Immediate failure should have been propagated.\n+            assert!(parent_inner.any_child_failed);\n+        }\n+    }\n+    #[test]\n+    fn no_tombstone_because_sibling_already_failed() {\n+        do run_in_newsched_task {\n+            // Tests \"case 0, the optimistic path in reparent_children.\n+            let mut parent = KillHandle::new();\n+            let mut child1 = KillHandle::new();\n+            let mut child2 = KillHandle::new();\n+            let mut link   = child2.clone();\n+\n+            // Should set parent's child_failed flag\n+            child1.notify_immediate_failure();\n+            child1.reparent_children_to(&mut parent);\n+            // Should bypass trying to unwrap child2 entirely.\n+            // Otherwise, due to 'link', it would try to tombstone.\n+            child2.reparent_children_to(&mut parent);\n+            // Should successfully unwrap even though 'link' is still alive.\n+            let mut parent_inner = unsafe { parent.unwrap() };\n+            assert!(parent_inner.child_tombstones.is_none());\n+            // Immediate failure should have been propagated by first child.\n+            assert!(parent_inner.any_child_failed);\n+            util::ignore(link);\n+        }\n+    }\n+    #[test]\n+    fn one_tombstone_success() {\n+        do run_in_newsched_task {\n+            let mut parent = KillHandle::new();\n+            let mut child  = KillHandle::new();\n+            let mut link   = child.clone();\n+\n+            // Creates 1 tombstone. Existence of 'link' makes try-unwrap fail.\n+            child.reparent_children_to(&mut parent);\n+            // Let parent collect tombstones.\n+            util::ignore(link);\n+            // Must have created a tombstone\n+            let mut parent_inner = unsafe { parent.unwrap() };\n+            assert!(parent_inner.child_tombstones.take_unwrap()());\n+            assert!(parent_inner.any_child_failed == false);\n+        }\n+    }\n+    #[test]\n+    fn one_tombstone_failure() {\n+        do run_in_newsched_task {\n+            let mut parent = KillHandle::new();\n+            let mut child  = KillHandle::new();\n+            let mut link   = child.clone();\n+\n+            // Creates 1 tombstone. Existence of 'link' makes try-unwrap fail.\n+            child.reparent_children_to(&mut parent);\n+            // Must happen after tombstone to not be immediately propagated.\n+            link.notify_immediate_failure();\n+            // Let parent collect tombstones.\n+            util::ignore(link);\n+            // Must have created a tombstone\n+            let mut parent_inner = unsafe { parent.unwrap() };\n+            // Failure must be seen in the tombstone.\n+            assert!(parent_inner.child_tombstones.take_unwrap()() == false);\n+            assert!(parent_inner.any_child_failed == false);\n+        }\n+    }\n+    #[test]\n+    fn two_tombstones_success() {\n+        do run_in_newsched_task {\n+            let mut parent = KillHandle::new();\n+            let mut middle = KillHandle::new();\n+            let mut child  = KillHandle::new();\n+            let mut link   = child.clone();\n+\n+            child.reparent_children_to(&mut middle); // case 1 tombstone\n+            // 'middle' should try-unwrap okay, but still have to reparent.\n+            middle.reparent_children_to(&mut parent); // case 3 tombston\n+            // Let parent collect tombstones.\n+            util::ignore(link);\n+            // Must have created a tombstone\n+            let mut parent_inner = unsafe { parent.unwrap() };\n+            assert!(parent_inner.child_tombstones.take_unwrap()());\n+            assert!(parent_inner.any_child_failed == false);\n+        }\n+    }\n+    #[test]\n+    fn two_tombstones_failure() {\n+        do run_in_newsched_task {\n+            let mut parent = KillHandle::new();\n+            let mut middle = KillHandle::new();\n+            let mut child  = KillHandle::new();\n+            let mut link   = child.clone();\n+\n+            child.reparent_children_to(&mut middle); // case 1 tombstone\n+            // Must happen after tombstone to not be immediately propagated.\n+            link.notify_immediate_failure();\n+            // 'middle' should try-unwrap okay, but still have to reparent.\n+            middle.reparent_children_to(&mut parent); // case 3 tombstone\n+            // Let parent collect tombstones.\n+            util::ignore(link);\n+            // Must have created a tombstone\n+            let mut parent_inner = unsafe { parent.unwrap() };\n+            // Failure must be seen in the tombstone.\n+            assert!(parent_inner.child_tombstones.take_unwrap()() == false);\n+            assert!(parent_inner.any_child_failed == false);\n+        }\n+    }\n+}"}]}