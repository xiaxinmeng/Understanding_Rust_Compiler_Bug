{"sha": "2a57a462498e3ce954e0b5b7ddd2502bd74875f4", "node_id": "C_kwDOAAsO6NoAKDJhNTdhNDYyNDk4ZTNjZTk1NGUwYjViN2RkZDI1MDJiZDc0ODc1ZjQ", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-03T23:53:45Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-03T23:53:45Z"}, "message": "Extract a portion of diff writing code to separate function", "tree": {"sha": "d59ed954149404141c74234fa991c80bb8099962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59ed954149404141c74234fa991c80bb8099962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a57a462498e3ce954e0b5b7ddd2502bd74875f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a57a462498e3ce954e0b5b7ddd2502bd74875f4", "html_url": "https://github.com/rust-lang/rust/commit/2a57a462498e3ce954e0b5b7ddd2502bd74875f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a57a462498e3ce954e0b5b7ddd2502bd74875f4/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "html_url": "https://github.com/rust-lang/rust/commit/cb501a6fe6cdb1928611b7193dec96f3d7bd2293"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "fb837a6077a7f8cb2cd6e0bf5846ff7658b9f909", "filename": "src/tools/compiletest/src/compute_diff.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2a57a462498e3ce954e0b5b7ddd2502bd74875f4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57a462498e3ce954e0b5b7ddd2502bd74875f4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs?ref=2a57a462498e3ce954e0b5b7ddd2502bd74875f4", "patch": "@@ -1,4 +1,5 @@\n use std::collections::VecDeque;\n+use std::path::Path;\n \n #[derive(Debug, PartialEq)]\n pub enum DiffLine {\n@@ -104,3 +105,49 @@ pub(crate) fn write_diff(expected: &str, actual: &str, context_size: usize) -> S\n     }\n     output\n }\n+\n+/// Returns whether any data was actually written.\n+pub(crate) fn write_rustdoc_diff(\n+    diff_filename: &str,\n+    out_dir: &Path,\n+    compare_dir: &Path,\n+    verbose: bool,\n+) -> bool {\n+    use std::fs::File;\n+    use std::io::{Read, Write};\n+    let mut diff_output = File::create(diff_filename).unwrap();\n+    let mut wrote_data = false;\n+    for entry in walkdir::WalkDir::new(out_dir) {\n+        let entry = entry.expect(\"failed to read file\");\n+        let extension = entry.path().extension().and_then(|p| p.to_str());\n+        if entry.file_type().is_file()\n+            && (extension == Some(\"html\".into()) || extension == Some(\"js\".into()))\n+        {\n+            let expected_path = compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n+            let expected = if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n+            let actual_path = entry.path();\n+            let actual = std::fs::read(&actual_path).unwrap();\n+            let diff = unified_diff::diff(\n+                &expected,\n+                &expected_path.to_string_lossy(),\n+                &actual,\n+                &actual_path.to_string_lossy(),\n+                3,\n+            );\n+            wrote_data |= !diff.is_empty();\n+            diff_output.write_all(&diff).unwrap();\n+        }\n+    }\n+\n+    if !wrote_data {\n+        println!(\"note: diff is identical to nightly rustdoc\");\n+        assert!(diff_output.metadata().unwrap().len() == 0);\n+        return false;\n+    } else if verbose {\n+        eprintln!(\"printing diff:\");\n+        let mut buf = Vec::new();\n+        diff_output.read_to_end(&mut buf).unwrap();\n+        std::io::stderr().lock().write_all(&mut buf).unwrap();\n+    }\n+    true\n+}"}, {"sha": "ffe8f1bb56dfe9f688197be8638c67dde92621ea", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2a57a462498e3ce954e0b5b7ddd2502bd74875f4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57a462498e3ce954e0b5b7ddd2502bd74875f4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2a57a462498e3ce954e0b5b7ddd2502bd74875f4", "patch": "@@ -8,7 +8,7 @@ use crate::common::{CompareMode, FailMode, PassMode};\n use crate::common::{Config, TestPaths};\n use crate::common::{Pretty, RunPassValgrind};\n use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n-use crate::compute_diff::write_diff;\n+use crate::compute_diff::{write_diff, write_rustdoc_diff};\n use crate::errors::{self, Error, ErrorKind};\n use crate::header::TestProps;\n use crate::json;\n@@ -2403,43 +2403,8 @@ impl<'test> TestCx<'test> {\n \n         let diff_filename = format!(\"build/tmp/rustdoc-compare-{}.diff\", std::process::id());\n \n-        {\n-            let mut diff_output = File::create(&diff_filename).unwrap();\n-            let mut wrote_data = false;\n-            for entry in walkdir::WalkDir::new(out_dir) {\n-                let entry = entry.expect(\"failed to read file\");\n-                let extension = entry.path().extension().and_then(|p| p.to_str());\n-                if entry.file_type().is_file()\n-                    && (extension == Some(\"html\".into()) || extension == Some(\"js\".into()))\n-                {\n-                    let expected_path =\n-                        compare_dir.join(entry.path().strip_prefix(&out_dir).unwrap());\n-                    let expected =\n-                        if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n-                    let actual_path = entry.path();\n-                    let actual = std::fs::read(&actual_path).unwrap();\n-                    let diff = unified_diff::diff(\n-                        &expected,\n-                        &expected_path.to_string_lossy(),\n-                        &actual,\n-                        &actual_path.to_string_lossy(),\n-                        3,\n-                    );\n-                    wrote_data |= !diff.is_empty();\n-                    diff_output.write_all(&diff).unwrap();\n-                }\n-            }\n-\n-            if !wrote_data {\n-                println!(\"note: diff is identical to nightly rustdoc\");\n-                assert!(diff_output.metadata().unwrap().len() == 0);\n-                return;\n-            } else if self.config.verbose {\n-                eprintln!(\"printing diff:\");\n-                let mut buf = Vec::new();\n-                diff_output.read_to_end(&mut buf).unwrap();\n-                std::io::stderr().lock().write_all(&mut buf).unwrap();\n-            }\n+        if !write_rustdoc_diff(&diff_filename, out_dir, &compare_dir, self.config.verbose) {\n+            return;\n         }\n \n         match self.config.color {"}]}