{"sha": "487c6fc9adc02e835fde35451f016296450b1c33", "node_id": "C_kwDOAAsO6NoAKDQ4N2M2ZmM5YWRjMDJlODM1ZmRlMzU0NTFmMDE2Mjk2NDUwYjFjMzM", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-21T12:51:13Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-21T12:51:13Z"}, "message": "[`collapsible_match`] specify field name when destructuring structs", "tree": {"sha": "7af2d4b6a7071c21f07daad4a369580fd5e652c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af2d4b6a7071c21f07daad4a369580fd5e652c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/487c6fc9adc02e835fde35451f016296450b1c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/487c6fc9adc02e835fde35451f016296450b1c33", "html_url": "https://github.com/rust-lang/rust/commit/487c6fc9adc02e835fde35451f016296450b1c33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/487c6fc9adc02e835fde35451f016296450b1c33/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "967f172e256802f9bf0ad5718d9c761da18132a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/967f172e256802f9bf0ad5718d9c761da18132a9", "html_url": "https://github.com/rust-lang/rust/commit/967f172e256802f9bf0ad5718d9c761da18132a9"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "33a052c41a38ac26b4dc37fd963e82a99cb676bf", "filename": "clippy_lints/src/matches/collapsible_match.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/487c6fc9adc02e835fde35451f016296450b1c33/clippy_lints%2Fsrc%2Fmatches%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487c6fc9adc02e835fde35451f016296450b1c33/clippy_lints%2Fsrc%2Fmatches%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fcollapsible_match.rs?ref=487c6fc9adc02e835fde35451f016296450b1c33", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::IfLetOrMatch;\n+use clippy_utils::source::snippet;\n use clippy_utils::visitors::is_local_used;\n use clippy_utils::{\n     is_res_lang_ctor, is_unit_expr, path_to_local, peel_blocks_with_stmt, peel_ref_operators, SpanlessEq,\n@@ -63,7 +64,8 @@ fn check_arm<'tcx>(\n         if !pat_contains_or(inner_then_pat);\n         // the binding must come from the pattern of the containing match arm\n         // ..<local>.. => match <local> { .. }\n-        if let Some(binding_span) = find_pat_binding(outer_pat, binding_id);\n+        if let (Some(binding_span), is_innermost_parent_pat_struct)\n+            = find_pat_binding_and_is_innermost_parent_pat_struct(outer_pat, binding_id);\n         // the \"else\" branches must be equal\n         if match (outer_else_body, inner_else_body) {\n             (None, None) => true,\n@@ -88,6 +90,13 @@ fn check_arm<'tcx>(\n                 if matches!(inner, IfLetOrMatch::Match(..)) { \"match\" } else { \"if let\" },\n                 if outer_is_match { \"match\" } else { \"if let\" },\n             );\n+            // collapsing patterns need an explicit field name in struct pattern matching\n+            // ex: Struct {x: Some(1)}\n+            let replace_msg = if is_innermost_parent_pat_struct {\n+                format!(\", prefixed by {}:\", snippet(cx, binding_span, \"their field name\"))\n+            } else {\n+                String::new()\n+            };\n             span_lint_and_then(\n                 cx,\n                 COLLAPSIBLE_MATCH,\n@@ -96,7 +105,7 @@ fn check_arm<'tcx>(\n                 |diag| {\n                     let mut help_span = MultiSpan::from_spans(vec![binding_span, inner_then_pat.span]);\n                     help_span.push_span_label(binding_span, \"replace this binding\");\n-                    help_span.push_span_label(inner_then_pat.span, \"with this pattern\");\n+                    help_span.push_span_label(inner_then_pat.span, format!(\"with this pattern{replace_msg}\"));\n                     diag.span_help(help_span, \"the outer pattern can be modified to include the inner pattern\");\n                 },\n             );\n@@ -117,8 +126,9 @@ fn arm_is_wild_like(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n     }\n }\n \n-fn find_pat_binding(pat: &Pat<'_>, hir_id: HirId) -> Option<Span> {\n+fn find_pat_binding_and_is_innermost_parent_pat_struct(pat: &Pat<'_>, hir_id: HirId) -> (Option<Span>, bool) {\n     let mut span = None;\n+    let mut is_innermost_parent_pat_struct = false;\n     pat.walk_short(|p| match &p.kind {\n         // ignore OR patterns\n         PatKind::Or(_) => false,\n@@ -129,9 +139,12 @@ fn find_pat_binding(pat: &Pat<'_>, hir_id: HirId) -> Option<Span> {\n             }\n             !found\n         },\n-        _ => true,\n+        _ => {\n+            is_innermost_parent_pat_struct = matches!(p.kind, PatKind::Struct(..));\n+            true\n+        },\n     });\n-    span\n+    (span, is_innermost_parent_pat_struct)\n }\n \n fn pat_contains_or(pat: &Pat<'_>) -> bool {"}, {"sha": "1d7a72846419f48bc3c60990672dc3471a52886b", "filename": "tests/ui/collapsible_match.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/487c6fc9adc02e835fde35451f016296450b1c33/tests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487c6fc9adc02e835fde35451f016296450b1c33/tests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.rs?ref=487c6fc9adc02e835fde35451f016296450b1c33", "patch": "@@ -253,6 +253,27 @@ fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u\n     };\n }\n \n+pub enum Issue9647 {\n+    A { a: Option<Option<u8>>, b: () },\n+    B,\n+}\n+\n+pub fn test_1(x: Issue9647) {\n+    if let Issue9647::A { a, .. } = x {\n+        if let Some(u) = a {\n+            println!(\"{u:?}\")\n+        }\n+    }\n+}\n+\n+pub fn test_2(x: Issue9647) {\n+    if let Issue9647::A { a: Some(a), .. } = x {\n+        if let Some(u) = a {\n+            println!(\"{u}\")\n+        }\n+    }\n+}\n+\n fn make<T>() -> T {\n     unimplemented!()\n }"}, {"sha": "0294be60b43fd2634840eeeaccbcfcdcbe689d8c", "filename": "tests/ui/collapsible_match.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/487c6fc9adc02e835fde35451f016296450b1c33/tests%2Fui%2Fcollapsible_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/487c6fc9adc02e835fde35451f016296450b1c33/tests%2Fui%2Fcollapsible_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.stderr?ref=487c6fc9adc02e835fde35451f016296450b1c33", "patch": "@@ -175,5 +175,37 @@ LL |         Some(val) => match val {\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n-error: aborting due to 10 previous errors\n+error: this `if let` can be collapsed into the outer `if let`\n+  --> $DIR/collapsible_match.rs:263:9\n+   |\n+LL | /         if let Some(u) = a {\n+LL | |             println!(\"{u:?}\")\n+LL | |         }\n+   | |_________^\n+   |\n+help: the outer pattern can be modified to include the inner pattern\n+  --> $DIR/collapsible_match.rs:262:27\n+   |\n+LL |     if let Issue9647::A { a, .. } = x {\n+   |                           ^ replace this binding\n+LL |         if let Some(u) = a {\n+   |                ^^^^^^^ with this pattern, prefixed by a:\n+\n+error: this `if let` can be collapsed into the outer `if let`\n+  --> $DIR/collapsible_match.rs:271:9\n+   |\n+LL | /         if let Some(u) = a {\n+LL | |             println!(\"{u}\")\n+LL | |         }\n+   | |_________^\n+   |\n+help: the outer pattern can be modified to include the inner pattern\n+  --> $DIR/collapsible_match.rs:270:35\n+   |\n+LL |     if let Issue9647::A { a: Some(a), .. } = x {\n+   |                                   ^ replace this binding\n+LL |         if let Some(u) = a {\n+   |                ^^^^^^^ with this pattern\n+\n+error: aborting due to 12 previous errors\n "}]}