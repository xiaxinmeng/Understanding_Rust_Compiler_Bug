{"sha": "6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "node_id": "C_kwDOAAsO6NoAKDY4MTllODU1MDEzNDhjNmZhYjNjNWQ0MGQwZTMxZDVjN2QwMGJiNmE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-09-20T03:03:59Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-07T12:10:40Z"}, "message": "Change InferCtxtBuilder from enter to build", "tree": {"sha": "c0252f097458ae5f6b84b9cbdf830b3f271c399e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0252f097458ae5f6b84b9cbdf830b3f271c399e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "html_url": "https://github.com/rust-lang/rust/commit/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b328e704953e34de401166cd76ca062e21d83d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b328e704953e34de401166cd76ca062e21d83d8", "html_url": "https://github.com/rust-lang/rust/commit/3b328e704953e34de401166cd76ca062e21d83d8"}], "stats": {"total": 189, "additions": 87, "deletions": 102}, "files": [{"sha": "02a16f765b7324117fc9c9fc380b661caccc7bf9", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -831,11 +831,10 @@ fn walk_parents<'tcx>(\n                                 // Trait methods taking `self`\n                                 arg_ty\n                             } && impl_ty.is_ref()\n-                            && cx.tcx.infer_ctxt().enter(|infcx|\n-                                infcx\n-                                    .type_implements_trait(trait_id, impl_ty, subs, cx.param_env)\n-                                    .must_apply_modulo_regions()\n-                            )\n+                            && let infcx = cx.tcx.infer_ctxt().build()\n+                            && infcx\n+                                .type_implements_trait(trait_id, impl_ty, subs, cx.param_env)\n+                                .must_apply_modulo_regions()\n                         {\n                             return Some(Position::MethodReceiverRefImpl)\n                         }\n@@ -1119,9 +1118,8 @@ fn needless_borrow_impl_arg_position<'tcx>(\n \n             let predicate = EarlyBinder(predicate).subst(cx.tcx, &substs_with_referent_ty);\n             let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n-            cx.tcx\n-                .infer_ctxt()\n-                .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+            let infcx = cx.tcx.infer_ctxt().build();\n+            infcx.predicate_must_hold_modulo_regions(&obligation)\n         })\n     };\n "}, {"sha": "eb0455ae404c1d4c9f369fe0ef70eb3bebb5d385", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -106,9 +106,8 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         };\n \n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n-        cx.tcx.infer_ctxt().enter(|infcx| {\n-            ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n-        });\n+        let infcx = cx.tcx.infer_ctxt().build();\n+        ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n \n         for node in v.set {\n             span_lint_hir("}, {"sha": "0519f9ac24682f7cfda45b50228e8a1f1fdca93e", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -77,29 +77,28 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             if is_future {\n                 let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n-                let send_errors = cx.tcx.infer_ctxt().enter(|infcx| {\n-                    let cause = traits::ObligationCause::misc(span, hir_id);\n-                    traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait)\n-                });\n+                let infcx = cx.tcx.infer_ctxt().build();\n+                let cause = traits::ObligationCause::misc(span, hir_id);\n+                let send_errors = traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait);\n                 if !send_errors.is_empty() {\n                     span_lint_and_then(\n                         cx,\n                         FUTURE_NOT_SEND,\n                         span,\n                         \"future cannot be sent between threads safely\",\n                         |db| {\n-                            cx.tcx.infer_ctxt().enter(|infcx| {\n-                                for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.err_ctxt().maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred) = obligation.predicate.kind().skip_binder() {\n-                                        db.note(&format!(\n-                                            \"`{}` doesn't implement `{}`\",\n-                                            trait_pred.self_ty(),\n-                                            trait_pred.trait_ref.print_only_trait_path(),\n-                                        ));\n-                                    }\n+                            for FulfillmentError { obligation, .. } in send_errors {\n+                                infcx\n+                                    .err_ctxt()\n+                                    .maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                if let Trait(trait_pred) = obligation.predicate.kind().skip_binder() {\n+                                    db.note(&format!(\n+                                        \"`{}` doesn't implement `{}`\",\n+                                        trait_pred.self_ty(),\n+                                        trait_pred.trait_ref.print_only_trait_path(),\n+                                    ));\n                                 }\n-                            });\n+                            }\n                         },\n                     );\n                 }"}, {"sha": "db73ab55b37cf8fa90bc62f1975e408e6d0b3731", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -65,16 +65,15 @@ fn check_for_mutation<'tcx>(\n         span_low: None,\n         span_high: None,\n     };\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        ExprUseVisitor::new(\n-            &mut delegate,\n-            &infcx,\n-            body.hir_id.owner.def_id,\n-            cx.param_env,\n-            cx.typeck_results(),\n-        )\n-        .walk_expr(body);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    ExprUseVisitor::new(\n+        &mut delegate,\n+        &infcx,\n+        body.hir_id.owner.def_id,\n+        cx.param_env,\n+        cx.typeck_results(),\n+    )\n+    .walk_expr(body);\n \n     delegate.mutation_span()\n }"}, {"sha": "6017941452c06577873bd207be73c62512fe13da", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -420,9 +420,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         if trait_predicates.any(|predicate| {\n                             let predicate = EarlyBinder(predicate).subst(cx.tcx, new_subst);\n                             let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n-                            !cx.tcx\n-                                .infer_ctxt()\n-                                .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+                            !cx.tcx.infer_ctxt().build().predicate_must_hold_modulo_regions(&obligation)\n                         }) {\n                             return false;\n                         }"}, {"sha": "7f881e27dd27c39e542ab9b96a1a79316d6df786", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -138,10 +138,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             ..\n         } = {\n             let mut ctx = MovedVariablesCtxt::default();\n-            cx.tcx.infer_ctxt().enter(|infcx| {\n-                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n-                    .consume_body(body);\n-            });\n+            let infcx = cx.tcx.infer_ctxt().build();\n+            euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n             ctx\n         };\n "}, {"sha": "c7e964cf23e2c00d62d7c2b7ada106b668768c11", "filename": "clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -123,16 +123,15 @@ fn imm_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet\n     }\n \n     let mut s = S(hir::HirIdSet::default());\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        let mut v = ExprUseVisitor::new(\n-            &mut s,\n-            &infcx,\n-            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n-            cx.param_env,\n-            cx.typeck_results(),\n-        );\n-        v.consume_expr(e);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    let mut v = ExprUseVisitor::new(\n+        &mut s,\n+        &infcx,\n+        cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+        cx.param_env,\n+        cx.typeck_results(),\n+    );\n+    v.consume_expr(e);\n     s.0\n }\n \n@@ -156,15 +155,14 @@ fn mut_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet\n     }\n \n     let mut s = S(hir::HirIdSet::default());\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        let mut v = ExprUseVisitor::new(\n-            &mut s,\n-            &infcx,\n-            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n-            cx.param_env,\n-            cx.typeck_results(),\n-        );\n-        v.consume_expr(e);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    let mut v = ExprUseVisitor::new(\n+        &mut s,\n+        &infcx,\n+        cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+        cx.param_env,\n+        cx.typeck_results(),\n+    );\n+    v.consume_expr(e);\n     s.0\n }"}, {"sha": "3c5dd92b9cd6d050a8db203756527ef923d7a48a", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -821,10 +821,9 @@ pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'\n         };\n \n         let fn_def_id = cx.tcx.hir().local_def_id(closure.hir_id);\n-        cx.tcx.infer_ctxt().enter(|infcx| {\n-            ExprUseVisitor::new(&mut visitor, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n-                .consume_body(closure_body);\n-        });\n+        let infcx = cx.tcx.infer_ctxt().build();\n+        ExprUseVisitor::new(&mut visitor, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n+            .consume_body(closure_body);\n \n         if !visitor.suggestion_start.is_empty() {\n             return Some(DerefClosure {"}, {"sha": "a15daec7c3ce3ed77f0a284c185c01eb5a07531d", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -172,11 +172,10 @@ pub fn implements_trait_with_env<'tcx>(\n         return false;\n     }\n     let ty_params = tcx.mk_substs(ty_params.iter());\n-    tcx.infer_ctxt().enter(|infcx| {\n-        infcx\n-            .type_implements_trait(trait_id, ty, ty_params, param_env)\n-            .must_apply_modulo_regions()\n-    })\n+    let infcx = tcx.infer_ctxt().build();\n+    infcx\n+        .type_implements_trait(trait_id, ty, ty_params, param_env)\n+        .must_apply_modulo_regions()\n }\n \n /// Checks whether this type implements `Drop`.\n@@ -242,27 +241,26 @@ fn is_normalizable_helper<'tcx>(\n     }\n     // prevent recursive loops, false-negative is better than endless loop leading to stack overflow\n     cache.insert(ty, false);\n-    let result = cx.tcx.infer_ctxt().enter(|infcx| {\n-        let cause = rustc_middle::traits::ObligationCause::dummy();\n-        if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n-            match ty.kind() {\n-                ty::Adt(def, substs) => def.variants().iter().all(|variant| {\n-                    variant\n-                        .fields\n-                        .iter()\n-                        .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n-                }),\n-                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n-                    GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n-                        is_normalizable_helper(cx, param_env, inner_ty, cache)\n-                    },\n-                    _ => true, // if inner_ty == ty, we've already checked it\n-                }),\n-            }\n-        } else {\n-            false\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    let cause = rustc_middle::traits::ObligationCause::dummy();\n+    let result = if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n+        match ty.kind() {\n+            ty::Adt(def, substs) => def.variants().iter().all(|variant| {\n+                variant\n+                    .fields\n+                    .iter()\n+                    .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n+            }),\n+            _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n+                GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n+                    is_normalizable_helper(cx, param_env, inner_ty, cache)\n+                },\n+                _ => true, // if inner_ty == ty, we've already checked it\n+            }),\n         }\n-    });\n+    } else {\n+        false\n+    };\n     cache.insert(ty, result);\n     result\n }"}, {"sha": "e32bae6ed1fd44af99562cff05263351f54ea1dc", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6819e85501348c6fab3c5d40d0e31d5c7d00bb6a/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=6819e85501348c6fab3c5d40d0e31d5c7d00bb6a", "patch": "@@ -18,16 +18,15 @@ pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) ->\n         used_mutably: HirIdSet::default(),\n         skip: false,\n     };\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        ExprUseVisitor::new(\n-            &mut delegate,\n-            &infcx,\n-            expr.hir_id.owner.def_id,\n-            cx.param_env,\n-            cx.typeck_results(),\n-        )\n-        .walk_expr(expr);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    ExprUseVisitor::new(\n+        &mut delegate,\n+        &infcx,\n+        expr.hir_id.owner.def_id,\n+        cx.param_env,\n+        cx.typeck_results(),\n+    )\n+    .walk_expr(expr);\n \n     if delegate.skip {\n         return None;"}]}