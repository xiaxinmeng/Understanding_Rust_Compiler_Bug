{"sha": "999f6926459294136b623b101c8a033ec8ec29db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OWY2OTI2NDU5Mjk0MTM2YjYyM2IxMDFjOGEwMzNlYzhlYzI5ZGI=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-07T19:34:52Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-20T18:49:21Z"}, "message": "getting rid of interner_key! macro", "tree": {"sha": "8d2acae15a07f0db03cd20a00b5e14f717ed10a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2acae15a07f0db03cd20a00b5e14f717ed10a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/999f6926459294136b623b101c8a033ec8ec29db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/999f6926459294136b623b101c8a033ec8ec29db", "html_url": "https://github.com/rust-lang/rust/commit/999f6926459294136b623b101c8a033ec8ec29db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/999f6926459294136b623b101c8a033ec8ec29db/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc4f304ef9916d691166592b3e49998594535c57", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc4f304ef9916d691166592b3e49998594535c57", "html_url": "https://github.com/rust-lang/rust/commit/fc4f304ef9916d691166592b3e49998594535c57"}], "stats": {"total": 185, "additions": 60, "deletions": 125}, "files": [{"sha": "e3da6e6844e52dd67d5fa865ac030a6ce6043362", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -17,24 +17,18 @@ use doc;\n use core::local_data::local_data_get;\n use syntax::ast;\n use syntax;\n-\n-/* can't import macros yet, so this is copied from token.rs. See its comment\n- * there. */\n-macro_rules! interner_key (\n-    () => (cast::transmute::<(uint, uint),\n-           &fn(v: @@syntax::parse::token::ident_interner)>((-3 as uint, 0u)))\n-)\n+use syntax::parse::token::{ident_interner};\n+use syntax::parse::token;\n \n // Hack; rather than thread an interner through everywhere, rely on\n // thread-local data\n pub fn to_str(id: ast::ident) -> ~str {\n-    let intr = unsafe{ local_data_get(interner_key!()) };\n-\n-    return copy *(*intr.get()).get(id);\n+    let intr = token::get_ident_interner();\n+    return copy *(*intr).get(id);\n }\n \n-pub fn interner() -> @syntax::parse::token::ident_interner {\n-    return *(unsafe{ local_data_get(interner_key!()) }).get();\n+pub fn interner() -> @ident_interner {\n+    return token::get_ident_interner();\n }\n \n pub fn from_srv("}, {"sha": "a8ff8dab54c19ce3aa90a5089b59c6deef27760b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -13,9 +13,10 @@\n use codemap::{span, spanned};\n use abi::AbiSet;\n use opt_vec::OptVec;\n+use parse::token::get_ident_interner;\n \n use core::cast;\n-use core::option::{None, Option, Some};\n+use core::option::{Option};\n use core::to_bytes;\n use core::to_bytes::IterBytes;\n use core::to_str::ToStr;\n@@ -67,7 +68,7 @@ pub enum SyntaxContext_ {\n     // in the \"from\" slot. In essence, they're all\n     // pointers to a single \"rename\" event node.\n     Rename (ident,Name,SyntaxContext),\n-    IllegalCtxt()    \n+    IllegalCtxt()\n }\n \n // a name represents an identifier\n@@ -78,27 +79,14 @@ pub type Mrk = uint;\n \n impl<S:Encoder> Encodable<S> for ident {\n     fn encode(&self, s: &mut S) {\n-        unsafe {\n-            let intr =\n-                match local_data::local_data_get(interner_key!()) {\n-                    None => fail!(\"encode: TLS interner not set up\"),\n-                    Some(intr) => intr\n-                };\n-\n-            s.emit_str(*(*intr).get(*self));\n-        }\n+        let intr = get_ident_interner();\n+        s.emit_str(*(*intr).get(*self));\n     }\n }\n \n impl<D:Decoder> Decodable<D> for ident {\n     fn decode(d: &mut D) -> ident {\n-        let intr = match unsafe {\n-            local_data::local_data_get(interner_key!())\n-        } {\n-            None => fail!(\"decode: TLS interner not set up\"),\n-            Some(intr) => intr\n-        };\n-\n+        let intr = get_ident_interner();\n         (*intr).intern(d.read_str())\n     }\n }"}, {"sha": "db95cb65b76602d0767102df8a454a379d040211", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -806,7 +806,7 @@ mod test {\n         };\n         let table = @mut new_sctable();\n         let a_name = 100; // enforced by testing_interner\n-        let a2_name = sess.interner.gensym(@~\"a2\").repr;\n+        let a2_name = sess.interner.gensym(\"a2\").repr;\n         let renamer = new_ident_renamer(ast::ident{repr:a_name,ctxt:empty_ctxt},\n                                         a2_name,table);\n         let renamed_ast = fun_to_ident_folder(renamer).fold_item(item_ast).get();"}, {"sha": "5340293bb0249034440c6b95887259c5653bb82a", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -786,7 +786,7 @@ mod test {\n     fn setup(teststr: ~str) -> Env {\n         let cm = CodeMap::new();\n         let fm = cm.new_filemap(~\"zebra.rs\", @teststr);\n-        let ident_interner = token::mk_ident_interner(); // interner::mk();\n+        let ident_interner = token::get_ident_interner();\n         let span_handler =\n             diagnostic::mk_span_handler(diagnostic::mk_handler(None),@cm);\n         Env {"}, {"sha": "8eb7ca2923c256f1495784e1fb16ca3656c7e9c8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -19,7 +19,7 @@ use diagnostic::{span_handler, mk_span_handler, mk_handler, Emitter};\n use parse::attr::parser_attr;\n use parse::lexer::reader;\n use parse::parser::Parser;\n-use parse::token::{ident_interner, mk_ident_interner};\n+use parse::token::{ident_interner, get_ident_interner};\n \n use core::io;\n use core::option::{None, Option, Some};\n@@ -59,7 +59,7 @@ pub fn new_parse_sess(demitter: Option<Emitter>) -> @mut ParseSess {\n         cm: cm,\n         next_id: 1,\n         span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n-        interner: mk_ident_interner(),\n+        interner: get_ident_interner(),\n     }\n }\n \n@@ -70,7 +70,7 @@ pub fn new_parse_sess_special_handler(sh: @span_handler,\n         cm: cm,\n         next_id: 1,\n         span_diagnostic: sh,\n-        interner: mk_ident_interner(),\n+        interner: get_ident_interner(),\n     }\n }\n \n@@ -352,8 +352,8 @@ mod test {\n     use opt_vec;\n     use ast;\n     use abi;\n-    use ast_util::new_ident;\n     use parse::parser::Parser;\n+    use parse::token::intern;\n     use util::parser_testing::{string_to_tts_and_sess,string_to_parser};\n     use util::parser_testing::{string_to_expr, string_to_item};\n     use util::parser_testing::{string_to_stmt};\n@@ -378,8 +378,8 @@ mod test {\n     }\n \n     // convert a vector of uints to a vector of ast::idents\n-    fn ints_to_idents(ids: ~[uint]) -> ~[ast::ident] {\n-        ids.map(|u| new_ident(*u))\n+    fn ints_to_idents(ids: ~[~str]) -> ~[ast::ident] {\n+        ids.map(|u| intern(*u))\n     }\n \n     #[test] fn path_exprs_1 () {\n@@ -388,7 +388,7 @@ mod test {\n                               callee_id:2,\n                               node:ast::expr_path(@ast::Path {span:sp(0,1),\n                                                               global:false,\n-                                                              idents:~[new_ident(100)],\n+                                                              idents:~[intern(\"a\")],\n                                                               rp:None,\n                                                               types:~[]}),\n                               span:sp(0,1)})\n@@ -398,11 +398,12 @@ mod test {\n         assert_eq!(string_to_expr(@~\"::a::b\"),\n                    @ast::expr{id:1,\n                                callee_id:2,\n-                               node:ast::expr_path(@ast::Path {span:sp(0,6),\n-                                                               global:true,\n-                                                               idents:ints_to_idents(~[100,101]),\n-                                                               rp:None,\n-                                                               types:~[]}),\n+                               node:ast::expr_path(\n+                                   @ast::Path {span:sp(0,6),\n+                                               global:true,\n+                                               idents:ints_to_idents(~[~\"a\",~\"b\"]),\n+                                               rp:None,\n+                                               types:~[]}),\n                               span:sp(0,6)})\n     }\n \n@@ -451,7 +452,7 @@ mod test {\n                                                   node:ast::expr_path(\n                                                       @ast::Path{span:sp(7,8),\n                                                                  global:false,\n-                                                                 idents:~[new_ident(103)],\n+                                                                 idents:~[intern(\"d\")],\n                                                                  rp:None,\n                                                                  types:~[]\n                                                                 }),\n@@ -469,7 +470,7 @@ mod test {\n                                @ast::Path{\n                                    span:sp(0,1),\n                                    global:false,\n-                                   idents:~[new_ident(101)],\n+                                   idents:~[intern(\"b\")],\n                                    rp:None,\n                                    types: ~[]}),\n                            span: sp(0,1)},\n@@ -490,7 +491,7 @@ mod test {\n                                                   @ast::Path{\n                                                       span:sp(0,1),\n                                                       global:false,\n-                                                      idents:~[new_ident(101)],\n+                                                      idents:~[intern(\"b\")],\n                                                       rp: None,\n                                                       types: ~[]},\n                                                   None // no idea\n@@ -509,7 +510,7 @@ mod test {\n                                         span:sp(4,4), // this is bizarre...\n                                         // check this in the original parser?\n                                         global:false,\n-                                        idents:~[new_ident(105)],\n+                                        idents:~[intern(\"int\")],\n                                         rp: None,\n                                         types: ~[]},\n                                                        2),\n@@ -519,7 +520,7 @@ mod test {\n                                                            @ast::Path{\n                                                                span:sp(0,1),\n                                                                global:false,\n-                                                               idents:~[new_ident(101)],\n+                                                               idents:~[intern(\"b\")],\n                                                                rp: None,\n                                                                types: ~[]},\n                                                            None // no idea\n@@ -535,7 +536,7 @@ mod test {\n         // assignment order of the node_ids.\n         assert_eq!(string_to_item(@~\"fn a (b : int) { b; }\"),\n                   Some(\n-                      @ast::item{ident:new_ident(100),\n+                      @ast::item{ident:intern(\"a\"),\n                             attrs:~[],\n                             id: 10, // fixme\n                             node: ast::item_fn(ast::fn_decl{\n@@ -545,7 +546,7 @@ mod test {\n                                                 node: ast::ty_path(@ast::Path{\n                                         span:sp(10,13),\n                                         global:false,\n-                                        idents:~[new_ident(106)],\n+                                        idents:~[intern(\"int\")],\n                                         rp: None,\n                                         types: ~[]},\n                                                        2),\n@@ -556,7 +557,7 @@ mod test {\n                                                        @ast::Path{\n                                                            span:sp(6,7),\n                                                            global:false,\n-                                                           idents:~[new_ident(101)],\n+                                                           idents:~[intern(\"b\")],\n                                                            rp: None,\n                                                            types: ~[]},\n                                                        None // no idea\n@@ -587,7 +588,7 @@ mod test {\n                                                         @ast::Path{\n                                                             span:sp(17,18),\n                                                             global:false,\n-                                                            idents:~[new_ident(101)],\n+                                                            idents:~[intern(\"b\")],\n                                                             rp:None,\n                                                             types: ~[]}),\n                                                     span: sp(17,18)},"}, {"sha": "b4bad5abbf9364a934362761ad489e0390b1c7ad", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -411,8 +411,7 @@ pub impl ident_interner {\n }\n \n // return a fresh interner, preloaded with special identifiers.\n-// EFFECT: stores this interner in TLS\n-pub fn mk_fresh_ident_interner() -> @ident_interner {\n+fn mk_fresh_ident_interner() -> @ident_interner {\n     // the indices here must correspond to the numbers in\n     // special_idents.\n     let init_vec = ~[\n@@ -453,23 +452,27 @@ pub fn mk_fresh_ident_interner() -> @ident_interner {\n         \"Self\",               // 34\n     ];\n \n-    let rv = @ident_interner {\n+    @ident_interner {\n         interner: interner::StrInterner::prefill(init_vec)\n-    };\n-    unsafe {\n-        local_data::local_data_set(interner_key!(), @rv);\n     }\n-    rv\n }\n \n // if an interner exists in TLS, return it. Otherwise, prepare a\n // fresh one.\n-pub fn mk_ident_interner() -> @ident_interner {\n+pub fn get_ident_interner() -> @ident_interner {\n     unsafe {\n-        match local_data::local_data_get(interner_key!()) {\n+        let key =\n+            (cast::transmute::<(uint, uint),\n+             &fn(v: @@::parse::token::ident_interner)>(\n+                 (-3 as uint, 0u)));\n+        match local_data::local_data_get(key) {\n             Some(interner) => *interner,\n             None => {\n-                mk_fresh_ident_interner()\n+                let interner = mk_fresh_ident_interner();\n+                unsafe {\n+                    local_data::local_data_set(key, @interner);\n+                }\n+                interner\n             }\n         }\n     }\n@@ -481,6 +484,12 @@ pub fn mk_fake_ident_interner() -> @ident_interner {\n     @ident_interner { interner: interner::StrInterner::new() }\n }\n \n+// maps a string to its interned representation\n+pub fn intern(str : &str) -> ast::ident {\n+    let interner = get_ident_interner();\n+    interner.intern(str)\n+}\n+\n /**\n  * All the valid words that have meaning in the Rust language.\n  *"}, {"sha": "0650df576031b6a964565ee36f5f4ec6be9ae3f8", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -25,9 +25,6 @@\n \n extern mod std;\n \n-// allow the interner_key macro\n-// to escape this module:\n-#[macro_escape]\n pub mod util {\n     pub mod interner;\n     #[cfg(test)]"}, {"sha": "5d49c8cd75d86d5fd54d0613a49c8d70c8913dfe", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -12,9 +12,6 @@\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n \n-// allow the interner_key macro to escape this module:\n-#[macro_escape];\n-\n use core::cmp::Equiv;\n use core::hashmap::HashMap;\n use syntax::parse::token::StringRef;\n@@ -78,6 +75,8 @@ pub impl<T:Eq + IterBytes + Hash + Const + Copy> Interner<T> {\n     }\n }\n \n+// A StrInterner differs from Interner<String> in that it accepts\n+// borrowed pointers rather than @ ones, resulting in less allocation.\n pub struct StrInterner {\n     priv map: @mut HashMap<@~str, uint>,\n     priv vect: @mut ~[@~str],\n@@ -133,17 +132,6 @@ pub impl StrInterner {\n     }\n }\n \n-/* Key for thread-local data for sneaking interner information to the\n-* encoder/decoder. It sounds like a hack because it is one.\n-* Bonus ultra-hack: functions as keys don't work across crates,\n-* so we have to use a unique number. See taskgroup_key! in task.rs\n-* for another case of this. */\n-macro_rules! interner_key (\n-    () => (cast::transmute::<(uint, uint),\n-           &fn(v: @@::parse::token::ident_interner)>(\n-        (-3 as uint, 0u)))\n-)\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "1c2210c96b6c24b65fc8b92d200cb446166e9f21", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999f6926459294136b623b101c8a033ec8ec29db/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=999f6926459294136b623b101c8a033ec8ec29db", "patch": "@@ -9,64 +9,22 @@\n // except according to those terms.\n \n use core::option::{Option,None};\n-use core::int;\n-use core::num::NumCast;\n-use codemap::CodeMap;\n use ast;\n use parse::parser::Parser;\n-use parse::token::{ident_interner, mk_fresh_ident_interner};\n-use diagnostic::{mk_handler, mk_span_handler};\n+use parse::{new_parse_sess};\n \n use syntax::parse::{ParseSess,string_to_filemap,filemap_to_tts};\n use syntax::parse::{new_parser_from_source_str};\n \n-// add known names to interner for testing\n-fn mk_testing_interner() -> @ident_interner {\n-    let i = mk_fresh_ident_interner();\n-    // baby hack; in order to put the identifiers\n-    // 'a' and 'b' at known locations, we're going\n-    // to fill up the interner to length 100. If\n-    // the # of preloaded items on the interner\n-    // ever gets larger than 100, we'll have to\n-    // adjust this number (say, to 200) and\n-    // change the numbers in the identifier\n-    // test cases below.\n-\n-    assert!(i.len() < 100);\n-    for int::range(0,100-((i.len()).to_int())) |_dc| {\n-        i.gensym(~\"dontcare\");\n-    }\n-    i.intern(\"a\");\n-    i.intern(\"b\");\n-    i.intern(\"c\");\n-    i.intern(\"d\");\n-    i.intern(\"return\");\n-    assert!(i.get(ast::ident{repr:101,ctxt:0}) == @~\"b\");\n-    i\n-}\n-\n-// make a parse_sess that's closed over a\n-// testing interner (where a -> 100, b -> 101)\n-fn mk_testing_parse_sess() -> @mut ParseSess {\n-    let interner = mk_testing_interner();\n-    let cm = @CodeMap::new();\n-    @mut ParseSess {\n-        cm: cm,\n-        next_id: 1,\n-        span_diagnostic: mk_span_handler(mk_handler(None), cm),\n-        interner: interner,\n-    }\n-}\n-\n // map a string to tts, using a made-up filename: return both the token_trees\n // and the ParseSess\n pub fn string_to_tts_and_sess (source_str : @~str) -> (~[ast::token_tree],@mut ParseSess) {\n-    let ps = mk_testing_parse_sess();\n+    let ps = new_parse_sess(None);\n     (filemap_to_tts(ps,string_to_filemap(ps,source_str,~\"bogofile\")),ps)\n }\n \n pub fn string_to_parser_and_sess(source_str: @~str) -> (Parser,@mut ParseSess) {\n-    let ps = mk_testing_parse_sess();\n+    let ps = new_parse_sess(None);\n     (new_parser_from_source_str(ps,~[],~\"bogofile\",source_str),ps)\n }\n "}]}