{"sha": "d26a15563d34c3c77788e48d880d1c39d3770fb3", "node_id": "C_kwDOAAsO6NoAKGQyNmExNTU2M2QzNGMzYzc3Nzg4ZTQ4ZDg4MGQxYzM5ZDM3NzBmYjM", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-05T13:37:44Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-18T05:38:17Z"}, "message": "Make `ui_tests` non-quadratic\n\nPreviously, it would walk each directory twice: once in the main `Walk`\niterator, and once to count the number of entries in the directory. Now\nit only walks each directory once.", "tree": {"sha": "c722047000789fd02fb1041dcc399a621cb7e6a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c722047000789fd02fb1041dcc399a621cb7e6a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26a15563d34c3c77788e48d880d1c39d3770fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26a15563d34c3c77788e48d880d1c39d3770fb3", "html_url": "https://github.com/rust-lang/rust/commit/d26a15563d34c3c77788e48d880d1c39d3770fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26a15563d34c3c77788e48d880d1c39d3770fb3/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "html_url": "https://github.com/rust-lang/rust/commit/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "ec8edf84ef38aa4522bb4205f4f2175cdce21c16", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d26a15563d34c3c77788e48d880d1c39d3770fb3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26a15563d34c3c77788e48d880d1c39d3770fb3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=d26a15563d34c3c77788e48d880d1c39d3770fb3", "patch": "@@ -3,50 +3,46 @@\n //! - there are no stray `.stderr` files\n \n use ignore::Walk;\n-use ignore::WalkBuilder;\n+use std::collections::HashMap;\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 940;\n const ISSUES_ENTRY_LIMIT: usize = 1978;\n \n-fn check_entries(path: &Path, bad: &mut bool) {\n-    for dir in Walk::new(&path.join(\"ui\")) {\n+fn check_entries(tests_path: &Path, bad: &mut bool) {\n+    let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n+\n+    for dir in Walk::new(&tests_path.join(\"ui\")) {\n         if let Ok(entry) = dir {\n-            if entry.file_type().map(|ft| ft.is_dir()).unwrap_or(false) {\n-                let dir_path = entry.path();\n-                // Use special values for these dirs.\n-                let is_root = path.join(\"ui\") == dir_path;\n-                let is_issues_dir = path.join(\"ui/issues\") == dir_path;\n-                let limit = if is_root {\n-                    ROOT_ENTRY_LIMIT\n-                } else if is_issues_dir {\n-                    ISSUES_ENTRY_LIMIT\n-                } else {\n-                    ENTRY_LIMIT\n-                };\n+            let parent = entry.path().parent().unwrap().to_path_buf();\n+            *directories.entry(parent).or_default() += 1;\n+        }\n+    }\n \n-                let count = WalkBuilder::new(&dir_path)\n-                    .max_depth(Some(1))\n-                    .build()\n-                    .into_iter()\n-                    .collect::<Vec<_>>()\n-                    .len()\n-                    - 1; // remove the dir itself\n+    for (dir_path, count) in directories {\n+        // Use special values for these dirs.\n+        let is_root = tests_path.join(\"ui\") == dir_path;\n+        let is_issues_dir = tests_path.join(\"ui/issues\") == dir_path;\n+        let limit = if is_root {\n+            ROOT_ENTRY_LIMIT\n+        } else if is_issues_dir {\n+            ISSUES_ENTRY_LIMIT\n+        } else {\n+            ENTRY_LIMIT\n+        };\n \n-                if count > limit {\n-                    tidy_error!(\n-                        bad,\n-                        \"following path contains more than {} entries, \\\n-                            you should move the test to some relevant subdirectory (current: {}): {}\",\n-                        limit,\n-                        count,\n-                        dir_path.display()\n-                    );\n-                }\n-            }\n+        if count > limit {\n+            tidy_error!(\n+                bad,\n+                \"following path contains more than {} entries, \\\n+                    you should move the test to some relevant subdirectory (current: {}): {}\",\n+                limit,\n+                count,\n+                dir_path.display()\n+            );\n         }\n     }\n }"}]}