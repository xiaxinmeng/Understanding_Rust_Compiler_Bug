{"sha": "c86f94871459608479373b37fe38e4e522f28114", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmY5NDg3MTQ1OTYwODQ3OTM3M2IzN2ZlMzhlNGU1MjJmMjgxMTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-10T19:36:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-12T17:56:28Z"}, "message": "introduce ProvisionalEvaluationCache", "tree": {"sha": "f68e38542580e0a93e4ae983ed1ab13e8a92f03c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f68e38542580e0a93e4ae983ed1ab13e8a92f03c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86f94871459608479373b37fe38e4e522f28114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86f94871459608479373b37fe38e4e522f28114", "html_url": "https://github.com/rust-lang/rust/commit/c86f94871459608479373b37fe38e4e522f28114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86f94871459608479373b37fe38e4e522f28114/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35f5ef65e2c5433adb2907e1c1badd9ecfd07c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/35f5ef65e2c5433adb2907e1c1badd9ecfd07c06", "html_url": "https://github.com/rust-lang/rust/commit/35f5ef65e2c5433adb2907e1c1badd9ecfd07c06"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "1de248378bdf52d3350b58076d2dc3211ac7b044", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c86f94871459608479373b37fe38e4e522f28114/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86f94871459608479373b37fe38e4e522f28114/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=c86f94871459608479373b37fe38e4e522f28114", "patch": "@@ -606,7 +606,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"select({:?})\", obligation);\n         debug_assert!(!obligation.predicate.has_escaping_bound_vars());\n \n-        let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n+        let pec = &ProvisionalEvaluationCache::default();\n+        let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);\n \n         let candidate = match self.candidate_from_obligation(&stack) {\n             Err(SelectionError::Overflow) => {\n@@ -666,7 +667,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     ) -> Result<EvaluationResult, OverflowError> {\n         self.evaluation_probe(|this| {\n             this.evaluate_predicate_recursively(\n-                TraitObligationStackList::empty(),\n+                TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),\n                 obligation.clone(),\n             )\n         })\n@@ -3968,6 +3969,10 @@ impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {\n         TraitObligationStackList::with(self)\n     }\n \n+    fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {\n+        self.previous.cache\n+    }\n+\n     fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {\n         self.list()\n     }\n@@ -3992,18 +3997,24 @@ impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {\n     }\n }\n \n+#[derive(Default)]\n+struct ProvisionalEvaluationCache<'tcx> {\n+    _dummy: Vec<&'tcx ()>,\n+}\n+\n #[derive(Copy, Clone)]\n struct TraitObligationStackList<'o, 'tcx: 'o> {\n+    cache: &'o ProvisionalEvaluationCache<'tcx>,\n     head: Option<&'o TraitObligationStack<'o, 'tcx>>,\n }\n \n impl<'o, 'tcx> TraitObligationStackList<'o, 'tcx> {\n-    fn empty() -> TraitObligationStackList<'o, 'tcx> {\n-        TraitObligationStackList { head: None }\n+    fn empty(cache: &'o ProvisionalEvaluationCache<'tcx>) -> TraitObligationStackList<'o, 'tcx> {\n+        TraitObligationStackList { cache, head: None }\n     }\n \n     fn with(r: &'o TraitObligationStack<'o, 'tcx>) -> TraitObligationStackList<'o, 'tcx> {\n-        TraitObligationStackList { head: Some(r) }\n+        TraitObligationStackList { cache: r.cache(), head: Some(r) }\n     }\n \n     fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {"}]}