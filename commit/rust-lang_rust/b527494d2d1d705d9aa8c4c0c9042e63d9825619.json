{"sha": "b527494d2d1d705d9aa8c4c0c9042e63d9825619", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Mjc0OTRkMmQxZDcwNWQ5YWE4YzRjMGM5MDQyZTYzZDk4MjU2MTk=", "commit": {"author": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2015-01-08T18:04:34Z"}, "committer": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2015-01-08T18:04:34Z"}, "message": "Fix destroy assertions in mutex/rwlock/condvar\n\nOn DragonFly pthread_{mutex,rwlock,condvar}_destroy() returns EINVAL\nwhen called on a pthread_{mutex,rwlock,condvar}_t that was just\ninitialized via PTHREAD_{MUTEX,RWLOCK,CONDVAR}_INITIALIZER and not used\nin the meantime or initialized via pthread_{mutex,rwlock,condvar}_init().\nChange the code to treat a return value of EINVAL on DragonFly as success.", "tree": {"sha": "6108d341b44c106a34acc30876abaedde2eed700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6108d341b44c106a34acc30876abaedde2eed700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b527494d2d1d705d9aa8c4c0c9042e63d9825619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b527494d2d1d705d9aa8c4c0c9042e63d9825619", "html_url": "https://github.com/rust-lang/rust/commit/b527494d2d1d705d9aa8c4c0c9042e63d9825619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b527494d2d1d705d9aa8c4c0c9042e63d9825619/comments", "author": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f99a41fe1a27a48e96bc2616ec9faa6de924386", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99a41fe1a27a48e96bc2616ec9faa6de924386", "html_url": "https://github.com/rust-lang/rust/commit/2f99a41fe1a27a48e96bc2616ec9faa6de924386"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "52dd261824fd43021825913644b8b489a358389c", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b527494d2d1d705d9aa8c4c0c9042e63d9825619/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b527494d2d1d705d9aa8c4c0c9042e63d9825619/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=b527494d2d1d705d9aa8c4c0c9042e63d9825619", "patch": "@@ -76,8 +76,20 @@ impl Condvar {\n     }\n \n     #[inline]\n+    #[cfg(not(target_os = \"dragonfly\"))]\n     pub unsafe fn destroy(&self) {\n         let r = ffi::pthread_cond_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n+\n+    #[inline]\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub unsafe fn destroy(&self) {\n+        let r = ffi::pthread_cond_destroy(self.inner.get());\n+        // On DragonFly pthread_cond_destroy() returns EINVAL if called on\n+        // a condvar that was just initialized with\n+        // ffi::PTHREAD_COND_INITIALIZER. Once it is used or\n+        // pthread_cond_init() is called, this behaviour no longer occurs.\n+        debug_assert!(r == 0 || r == libc::EINVAL);\n+    }\n }"}, {"sha": "9e1527aef201abdfb0215143a18bdb46ef0bc4cd", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b527494d2d1d705d9aa8c4c0c9042e63d9825619/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b527494d2d1d705d9aa8c4c0c9042e63d9825619/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=b527494d2d1d705d9aa8c4c0c9042e63d9825619", "patch": "@@ -48,8 +48,20 @@ impl Mutex {\n         ffi::pthread_mutex_trylock(self.inner.get()) == 0\n     }\n     #[inline]\n+    #[cfg(not(target_os = \"dragonfly\"))]\n     pub unsafe fn destroy(&self) {\n         let r = ffi::pthread_mutex_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n+    #[inline]\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub unsafe fn destroy(&self) {\n+        use libc;\n+        let r = ffi::pthread_mutex_destroy(self.inner.get());\n+        // On DragonFly pthread_mutex_destroy() returns EINVAL if called on a\n+        // mutex that was just initialized with ffi::PTHREAD_MUTEX_INITIALIZER.\n+        // Once it is used (locked/unlocked) or pthread_mutex_init() is called,\n+        // this behaviour no longer occurs.\n+        debug_assert!(r == 0 || r == libc::EINVAL);\n+    }\n }"}, {"sha": "54523e0076dc3c47ce41897cb416b4b2f795b385", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b527494d2d1d705d9aa8c4c0c9042e63d9825619/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b527494d2d1d705d9aa8c4c0c9042e63d9825619/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=b527494d2d1d705d9aa8c4c0c9042e63d9825619", "patch": "@@ -50,8 +50,21 @@ impl RWLock {\n     #[inline]\n     pub unsafe fn write_unlock(&self) { self.read_unlock() }\n     #[inline]\n+    #[cfg(not(target_os = \"dragonfly\"))]\n     pub unsafe fn destroy(&self) {\n         let r = ffi::pthread_rwlock_destroy(self.inner.get());\n         debug_assert_eq!(r, 0);\n     }\n+\n+    #[inline]\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub unsafe fn destroy(&self) {\n+        use libc;\n+        let r = ffi::pthread_rwlock_destroy(self.inner.get());\n+        // On DragonFly pthread_rwlock_destroy() returns EINVAL if called on a\n+        // rwlock that was just initialized with\n+        // ffi::PTHREAD_RWLOCK_INITIALIZER. Once it is used (locked/unlocked)\n+        // or pthread_rwlock_init() is called, this behaviour no longer occurs.\n+        debug_assert!(r == 0 || r == libc::EINVAL);\n+    }\n }"}]}