{"sha": "1e709fcff37a55ab4b8d746be615811a77286945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNzA5ZmNmZjM3YTU1YWI0YjhkNzQ2YmU2MTU4MTFhNzcyODY5NDU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-05-10T19:20:00Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-05-15T04:06:23Z"}, "message": "Don't use sanitize_sh with rust-installer\n\nThere's no shell interpreting the file paths under the new Rusty\nrust-installer, so we don't need to use `sanitize_sh` for it.  Plus,\nthe drive-letter transformation is actually harmful for the now-native\nWindows rust-installer to understand those paths.", "tree": {"sha": "28c6d7eae165fb69138f632f7264bcb87a52f1b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28c6d7eae165fb69138f632f7264bcb87a52f1b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e709fcff37a55ab4b8d746be615811a77286945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e709fcff37a55ab4b8d746be615811a77286945", "html_url": "https://github.com/rust-lang/rust/commit/1e709fcff37a55ab4b8d746be615811a77286945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e709fcff37a55ab4b8d746be615811a77286945/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6ee0a14b351dd1f93025a199966d3661a33037", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6ee0a14b351dd1f93025a199966d3661a33037", "html_url": "https://github.com/rust-lang/rust/commit/3d6ee0a14b351dd1f93025a199966d3661a33037"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "6557b8410b196344fbd07be01166a079a82ea7f0", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1e709fcff37a55ab4b8d746be615811a77286945/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e709fcff37a55ab4b8d746be615811a77286945/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=1e709fcff37a55ab4b8d746be615811a77286945", "patch": "@@ -77,9 +77,9 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n        .arg(\"--product-name=Rust-Documentation\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-documentation-is-installed.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-docs\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n@@ -127,9 +127,9 @@ pub fn mingw(build: &Build, host: &str) {\n        .arg(\"--product-name=Rust-MinGW\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-MinGW-is-installed.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-mingw\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -193,10 +193,10 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rustc\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -303,9 +303,9 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=std-is-standing-at-the-ready.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(format!(\"--component-name=rust-std-{}\", target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -359,9 +359,9 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=save-analysis-saved.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(format!(\"--component-name=rust-analysis-{}\", target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -478,7 +478,7 @@ pub fn rust_src(build: &Build) {\n     let mut cmd = rust_installer(build);\n     cmd.arg(\"tarball\")\n        .arg(\"--input\").arg(&plain_name)\n-       .arg(\"--output\").arg(sanitize_sh(&tarball))\n+       .arg(\"--output\").arg(&tarball)\n        .arg(\"--work-dir=.\")\n        .current_dir(tmpdir(build));\n     build.run(&mut cmd);\n@@ -528,9 +528,9 @@ pub fn rust_src(build: &Build) {\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Awesome-Source.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}\", name))\n        .arg(\"--component-name=rust-src\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -629,10 +629,10 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(\"--component-name=cargo\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -678,10 +678,10 @@ pub fn rls(build: &Build, stage: u32, target: &str) {\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=RLS-ready-to-serve.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(\"--component-name=rls\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -732,29 +732,28 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n     // the std files during uninstall. To do this ensure that rustc comes\n     // before rust-std in the list below.\n-    let mut input_tarballs = format!(\"{},{},{},{},{},{}\",\n-                                     sanitize_sh(&rustc_installer),\n-                                     sanitize_sh(&cargo_installer),\n-                                     sanitize_sh(&rls_installer),\n-                                     sanitize_sh(&analysis_installer),\n-                                     sanitize_sh(&docs_installer),\n-                                     sanitize_sh(&std_installer));\n+    let mut tarballs = vec![rustc_installer, cargo_installer, rls_installer,\n+                            analysis_installer, docs_installer, std_installer];\n     if target.contains(\"pc-windows-gnu\") {\n-        input_tarballs.push_str(\",\");\n-        input_tarballs.push_str(&sanitize_sh(&mingw_installer));\n+        tarballs.push(mingw_installer);\n+    }\n+    let mut input_tarballs = tarballs[0].as_os_str().to_owned();\n+    for tarball in &tarballs[1..] {\n+        input_tarballs.push(\",\");\n+        input_tarballs.push(tarball);\n     }\n \n     let mut cmd = rust_installer(build);\n     cmd.arg(\"combine\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&work)))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--work-dir\").arg(&work)\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", pkgname(build, \"rust\"), target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-       .arg(format!(\"--input-tarballs={}\", input_tarballs))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)));\n+       .arg(\"--input-tarballs\").arg(input_tarballs)\n+       .arg(\"--non-installed-overlay\").arg(&overlay);\n     build.run(&mut cmd);\n \n     let mut license = String::new();"}]}