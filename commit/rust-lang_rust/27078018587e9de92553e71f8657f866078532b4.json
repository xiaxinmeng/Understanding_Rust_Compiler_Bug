{"sha": "27078018587e9de92553e71f8657f866078532b4", "node_id": "C_kwDOAAsO6NoAKDI3MDc4MDE4NTg3ZTlkZTkyNTUzZTcxZjg2NTdmODY2MDc4NTMyYjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-13T00:17:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-13T00:17:10Z"}, "message": "Rollup merge of #105625 - matthiaskrgr:clippy_dec12, r=compiler-errors\n\nminor code cleanups\n\nr? `@compiler-errors`", "tree": {"sha": "d3fa57fe9730ab90ca3676e70d44850aad800b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3fa57fe9730ab90ca3676e70d44850aad800b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27078018587e9de92553e71f8657f866078532b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjl8SGCRBK7hj4Ov3rIwAA21UIADF1geYSOBnu6bXWRI71MmbQ\nuHaUYNYCFazZvhj48iWX+7qjh28QpQE76gjmv2deagMBtpQ1pIOHk+i9yuB1iACI\nex7eZNhAotblN55kDq31X9kj7VvALTt7uUP5uU5Q6q0D39xZSjwtBRrn2Ec4jua4\nuheMyCfUVHsGsYmHxOkgV4jIGHJ9H+p5fMQUgLD6nN2WnddjT+wWFSolNUXiqA+G\nxTH7OaTQ8TUI9oy3eBbUzsk9HSPrDsFFdC2IW/vH9v3qUVfA9GnxS3JgCAVaJneP\nql7dMv1P3F7oreHx3BKMZhdTNMEBU/k4y181+Li7qQx9Q/6PHhD/vB5BjG9XxwY=\n=BpJC\n-----END PGP SIGNATURE-----\n", "payload": "tree d3fa57fe9730ab90ca3676e70d44850aad800b78\nparent 4069792d732288d030f5485614e2c58297ce5564\nparent 2ea368e53c755fb13d3ad5cd59370a3f7ad4e8c0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670890630 +0100\ncommitter GitHub <noreply@github.com> 1670890630 +0100\n\nRollup merge of #105625 - matthiaskrgr:clippy_dec12, r=compiler-errors\n\nminor code cleanups\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27078018587e9de92553e71f8657f866078532b4", "html_url": "https://github.com/rust-lang/rust/commit/27078018587e9de92553e71f8657f866078532b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27078018587e9de92553e71f8657f866078532b4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4069792d732288d030f5485614e2c58297ce5564", "url": "https://api.github.com/repos/rust-lang/rust/commits/4069792d732288d030f5485614e2c58297ce5564", "html_url": "https://github.com/rust-lang/rust/commit/4069792d732288d030f5485614e2c58297ce5564"}, {"sha": "2ea368e53c755fb13d3ad5cd59370a3f7ad4e8c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea368e53c755fb13d3ad5cd59370a3f7ad4e8c0", "html_url": "https://github.com/rust-lang/rust/commit/2ea368e53c755fb13d3ad5cd59370a3f7ad4e8c0"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "8c71332bfabb13d9f45813414978a05c1c9c2fcc", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -802,12 +802,9 @@ impl Integer {\n     pub fn for_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Option<Integer> {\n         let dl = cx.data_layout();\n \n-        for candidate in [I8, I16, I32, I64, I128] {\n-            if wanted == candidate.align(dl).abi && wanted.bytes() == candidate.size().bytes() {\n-                return Some(candidate);\n-            }\n-        }\n-        None\n+        [I8, I16, I32, I64, I128].into_iter().find(|&candidate| {\n+            wanted == candidate.align(dl).abi && wanted.bytes() == candidate.size().bytes()\n+        })\n     }\n \n     /// Find the largest integer with the given alignment or less."}, {"sha": "4567759c004dad7140b008d9569fc811c07fe642", "filename": "compiler/rustc_data_structures/src/base_n.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fbase_n.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -9,7 +9,7 @@ pub const MAX_BASE: usize = 64;\n pub const ALPHANUMERIC_ONLY: usize = 62;\n pub const CASE_INSENSITIVE: usize = 36;\n \n-const BASE_64: &[u8; MAX_BASE as usize] =\n+const BASE_64: &[u8; MAX_BASE] =\n     b\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$\";\n \n #[inline]"}, {"sha": "585a54308c62e1c0bf07ab9c1478bd51ec0fca2c", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -806,7 +806,7 @@ impl Diagnostic {\n         debug_assert!(\n             !(suggestions\n                 .iter()\n-                .flat_map(|suggs| suggs)\n+                .flatten()\n                 .any(|(sp, suggestion)| sp.is_empty() && suggestion.is_empty())),\n             \"Span must not be empty and have no suggestion\"\n         );"}, {"sha": "aaf0699f0dc41b1b0784ba42670b80a1a899964f", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -1308,7 +1308,7 @@ impl EmitterWriter {\n         //                see how it *looks* with\n         //                very *weird* formats\n         //                see?\n-        for &(ref text, ref style) in msg.iter() {\n+        for (text, style) in msg.iter() {\n             let text = self.translate_message(text, args);\n             let lines = text.split('\\n').collect::<Vec<_>>();\n             if lines.len() > 1 {\n@@ -1370,7 +1370,7 @@ impl EmitterWriter {\n                 buffer.append(0, \": \", header_style);\n                 label_width += 2;\n             }\n-            for &(ref text, _) in msg.iter() {\n+            for (text, _) in msg.iter() {\n                 let text = self.translate_message(text, args);\n                 // Account for newlines to align output to its label.\n                 for (line, text) in normalize_whitespace(&text).lines().enumerate() {"}, {"sha": "91825c29258ac10bd345aedbd19fcf35faa1da72", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -548,12 +548,7 @@ impl<'hir> Generics<'hir> {\n     }\n \n     pub fn get_named(&self, name: Symbol) -> Option<&GenericParam<'hir>> {\n-        for param in self.params {\n-            if name == param.name.ident().name {\n-                return Some(param);\n-            }\n-        }\n-        None\n+        self.params.iter().find(|&param| name == param.name.ident().name)\n     }\n \n     pub fn spans(&self) -> MultiSpan {"}, {"sha": "686cb6dac496224f130d3f08a2f17d685eb30a32", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -209,7 +209,7 @@ impl<T: Idx> BitSet<T> {\n             self.words[start_word_index] |= !(start_mask - 1);\n             // And all trailing bits (i.e. from 0..=end) in the end word,\n             // including the end.\n-            self.words[end_word_index] |= end_mask | end_mask - 1;\n+            self.words[end_word_index] |= end_mask | (end_mask - 1);\n         } else {\n             self.words[start_word_index] |= end_mask | (end_mask - start_mask);\n         }"}, {"sha": "87c44638a8de1918883375cd0d6357dfebd8a16b", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -204,14 +204,13 @@ fn scan_escape(chars: &mut Chars<'_>, is_byte: bool) -> Result<char, EscapeError\n                         })?;\n                     }\n                     Some(c) => {\n-                        let digit =\n+                        let digit: u32 =\n                             c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?;\n                         n_digits += 1;\n                         if n_digits > 6 {\n                             // Stop updating value since we're sure that it's incorrect already.\n                             continue;\n                         }\n-                        let digit = digit as u32;\n                         value = value * 16 + digit;\n                     }\n                 };"}, {"sha": "a4e0f54d27670d474a8e96a5db415c25ae090b3d", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27078018587e9de92553e71f8657f866078532b4/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=27078018587e9de92553e71f8657f866078532b4", "patch": "@@ -1150,7 +1150,7 @@ impl FilePathMapping {\n             // NOTE: We are iterating over the mapping entries from last to first\n             //       because entries specified later on the command line should\n             //       take precedence.\n-            for &(ref from, ref to) in mapping.iter().rev() {\n+            for (from, to) in mapping.iter().rev() {\n                 debug!(\"Trying to apply {from:?} => {to:?}\");\n \n                 if let Ok(rest) = path.strip_prefix(from) {"}]}