{"sha": "a95a6729b1c5d8b0cf6c43a35824462a330082e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NWE2NzI5YjFjNWQ4YjBjZjZjNDNhMzU4MjQ0NjJhMzMwMDgyZTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-14T14:39:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-14T14:39:49Z"}, "message": "Implement some more stuff and ignore some unimplemented stuff instead of panicking", "tree": {"sha": "4df099f1144b3cbc92bd74d64076b300ccb1c4ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df099f1144b3cbc92bd74d64076b300ccb1c4ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a95a6729b1c5d8b0cf6c43a35824462a330082e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a95a6729b1c5d8b0cf6c43a35824462a330082e8", "html_url": "https://github.com/rust-lang/rust/commit/a95a6729b1c5d8b0cf6c43a35824462a330082e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a95a6729b1c5d8b0cf6c43a35824462a330082e8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25fef301861969093aac50ea68207c34cddbb88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/25fef301861969093aac50ea68207c34cddbb88d", "html_url": "https://github.com/rust-lang/rust/commit/25fef301861969093aac50ea68207c34cddbb88d"}], "stats": {"total": 139, "additions": 93, "deletions": 46}, "files": [{"sha": "94215a50fc1b029c7ec812980eabed579dd869d4", "filename": "example.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a95a6729b1c5d8b0cf6c43a35824462a330082e8/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95a6729b1c5d8b0cf6c43a35824462a330082e8/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=a95a6729b1c5d8b0cf6c43a35824462a330082e8", "patch": "@@ -76,3 +76,11 @@ fn option_unwrap_or(o: BoolOption, d: bool) -> bool {\n fn ret_42() -> u8 {\n     42\n }\n+\n+fn return_str() -> &'static str {\n+    \"hello world\"\n+}\n+\n+fn promoted_val() -> &'static u8 {\n+    &(1 * 2)\n+}"}, {"sha": "c523c3979213b47c9a0699e12d06a81f8532e567", "filename": "src/base.rs", "status": "modified", "additions": 51, "deletions": 33, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a95a6729b1c5d8b0cf6c43a35824462a330082e8/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95a6729b1c5d8b0cf6c43a35824462a330082e8/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a95a6729b1c5d8b0cf6c43a35824462a330082e8", "patch": "@@ -27,7 +27,13 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n \n                 let mut f = Function::with_name_signature(ExternalName::user(0, func_id.index() as u32), sig);\n \n-                let comments = ::base::trans_fn(cx, &mut f, inst);\n+                let comments = match ::base::trans_fn(cx, &mut f, inst){\n+                    Ok(comments) => comments,\n+                    Err(err) => {\n+                        tcx.sess.err(&err);\n+                        return;\n+                    }\n+                };\n \n                 let mut writer = ::pretty_clif::CommentWriter(comments);\n                 let mut cton = String::new();\n@@ -53,7 +59,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n     }\n }\n \n-pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut Function, instance: Instance<'tcx>) -> HashMap<Inst, String> {\n+pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut Function, instance: Instance<'tcx>) -> Result<HashMap<Inst, String>, String> {\n     let mir = cx.tcx.optimized_mir(instance.def_id());\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut bcx: FunctionBuilder<Variable> = FunctionBuilder::new(f, &mut func_ctx);\n@@ -133,7 +139,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &\n         fx.bcx.switch_to_block(ebb);\n \n         for stmt in &bb_data.statements {\n-            trans_stmt(fx, stmt);\n+            trans_stmt(fx, stmt)?;\n         }\n \n         let inst = match &bb_data.terminator().kind {\n@@ -242,18 +248,20 @@ pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &\n     fx.bcx.seal_all_blocks();\n     fx.bcx.finalize();\n \n-    fx.comments.clone()\n+    Ok(fx.comments.clone())\n }\n \n-fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx>) {\n+fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx>) -> Result<(), String> {\n+    fx.tcx.sess.warn(&format!(\"stmt {:?}\", stmt));\n+\n     let nop_inst = fx.bcx.ins().nop();\n \n     match &stmt.kind {\n         StatementKind::SetDiscriminant { place, variant_index } => {\n             let place = trans_place(fx, place);\n             let layout = place.layout();\n             if layout.for_variant(&*fx, *variant_index).abi == layout::Abi::Uninhabited {\n-                return;\n+                return Ok(());\n             }\n             match layout.variants {\n                 layout::Variants::Single { index } => {\n@@ -309,10 +317,10 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n \n                     let res = match ty.sty {\n                         TypeVariants::TyUint(_) => {\n-                            trans_int_binop(fx, *bin_op, lhs, rhs, ty, false, false)\n+                            trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false, false)\n                         }\n                         TypeVariants::TyInt(_) => {\n-                            trans_int_binop(fx, *bin_op, lhs, rhs, ty, true, false)\n+                            trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true, false)\n                         }\n                         _ => unimplemented!(\"bin op {:?} for {:?}\", bin_op, ty),\n                     };\n@@ -332,7 +340,7 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                         }\n                         _ => unimplemented!(\"checked bin op {:?} for {:?}\", bin_op, ty),\n                     };\n-                    unimplemented!(\"checked bin op {:?}\", bin_op);\n+                    return Err(format!(\"checked bin op {:?}\", bin_op));\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::UnaryOp(un_op, operand) => {\n@@ -373,7 +381,7 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                                 |def| def.discriminant_for_variant(fx.tcx, index).val);\n                             let val = CValue::const_val(fx, dest_layout.ty, discr_val as u64 as i64);\n                             lval.write_cvalue(fx, val);\n-                            return;\n+                            return Ok(());\n                         }\n                         layout::Variants::Tagged { .. } |\n                         layout::Variants::NicheFilling { .. } => {},\n@@ -431,6 +439,8 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n     let inst = fx.bcx.func.layout.next_inst(nop_inst).unwrap();\n     fx.bcx.func.layout.remove_inst(nop_inst);\n     fx.add_comment(inst, format!(\"{:?}\", stmt));\n+\n+    Ok(())\n }\n \n fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, signed: bool, _checked: bool) -> CValue<'tcx> {\n@@ -487,37 +497,45 @@ fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>)\n }\n \n fn trans_operand<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx>, operand: &Operand<'tcx>) -> CValue<'tcx> {\n+    use rustc::mir::interpret::{Scalar, ConstValue, GlobalId};\n+\n     match operand {\n         Operand::Move(place) |\n         Operand::Copy(place) => {\n             let cplace = trans_place(fx, place);\n             cplace.to_cvalue(fx)\n         },\n         Operand::Constant(const_) => {\n-            match const_.literal {\n-                Literal::Value { value } => {\n-                    let layout = fx.layout_of(const_.ty);\n-                    match const_.ty.sty {\n-                        TypeVariants::TyBool => {\n-                            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                            CValue::const_val(fx, const_.ty, bits as u64 as i64)\n-                        }\n-                        TypeVariants::TyUint(_) => {\n-                            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                            CValue::const_val(fx, const_.ty, bits as u64 as i64)\n-                        }\n-                        TypeVariants::TyInt(_) => {\n-                            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                            CValue::const_val(fx, const_.ty, bits as i128 as i64)\n-                        }\n-                        TypeVariants::TyFnDef(def_id, substs) => {\n-                            let func_ref = fx.get_function_ref(Instance::new(def_id, substs));\n-                            CValue::Func(func_ref, fx.layout_of(const_.ty))\n-                        }\n-                        _ => unimplemented!(\"value {:?} ty {:?}\", value, const_.ty),\n-                    }\n+            let value = match const_.literal {\n+                Literal::Value { value } => value,\n+                Literal::Promoted { index } => fx\n+                    .tcx\n+                    .const_eval(ParamEnv::reveal_all().and(GlobalId {\n+                        instance: fx.instance,\n+                        promoted: Some(index),\n+                    }))\n+                    .unwrap(),\n+            };\n+\n+            let layout = fx.layout_of(const_.ty);\n+            match const_.ty.sty {\n+                TypeVariants::TyBool => {\n+                    let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+                    CValue::const_val(fx, const_.ty, bits as u64 as i64)\n+                }\n+                TypeVariants::TyUint(_) => {\n+                    let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+                    CValue::const_val(fx, const_.ty, bits as u64 as i64)\n+                }\n+                TypeVariants::TyInt(_) => {\n+                    let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+                    CValue::const_val(fx, const_.ty, bits as i128 as i64)\n+                }\n+                TypeVariants::TyFnDef(def_id, substs) => {\n+                    let func_ref = fx.get_function_ref(Instance::new(def_id, substs));\n+                    CValue::Func(func_ref, fx.layout_of(const_.ty))\n                 }\n-                _ => unimplemented!()\n+                _ => unimplemented!(\"value {:?} ty {:?}\", value, const_.ty),\n             }\n         }\n     }"}, {"sha": "cf08ddc281a7bffa9136d1231d9801f79497c15b", "filename": "src/common.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a95a6729b1c5d8b0cf6c43a35824462a330082e8/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95a6729b1c5d8b0cf6c43a35824462a330082e8/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a95a6729b1c5d8b0cf6c43a35824462a330082e8", "patch": "@@ -25,7 +25,7 @@ impl EntityRef for Variable {\n     }\n }\n \n-fn cton_type_from_ty(ty: Ty) -> Option<types::Type> {\n+fn cton_type_from_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> Option<types::Type> {\n     Some(match ty.sty {\n         TypeVariants::TyBool => types::I8,\n         TypeVariants::TyUint(size) => {\n@@ -49,7 +49,13 @@ fn cton_type_from_ty(ty: Ty) -> Option<types::Type> {\n             }\n         }\n         TypeVariants::TyFnPtr(_) => types::I64,\n-        TypeVariants::TyRef(..) | TypeVariants::TyRawPtr(..) => types::I64,\n+        TypeVariants::TyRawPtr(TypeAndMut { ty, mutbl: _ }) | TypeVariants::TyRef(_, ty, _) => {\n+            if ty.is_sized(tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n+                types::I64\n+            } else {\n+                return None;\n+            }\n+        }\n         TypeVariants::TyParam(_)  => bug!(\"{:?}\", ty),\n         _ => return None,\n     })\n@@ -205,10 +211,22 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                     let data = from.load_value(fx);\n                     fx.bcx.ins().store(MemFlags::new(), data, addr, 0);\n                 } else {\n-                    for i in 0..size {\n-                        let from = from.expect_byref();\n-                        let byte = fx.bcx.ins().load(types::I8, MemFlags::new(), from.0, i);\n-                        fx.bcx.ins().store(MemFlags::new(), byte, addr, i);\n+                    let from = from.expect_byref();\n+                    let mut offset = 0;\n+                    while size - offset >= 8 {\n+                        let byte = fx.bcx.ins().load(types::I64, MemFlags::new(), from.0, offset);\n+                        fx.bcx.ins().store(MemFlags::new(), byte, addr, offset);\n+                        offset += 8;\n+                    }\n+                    while size - offset >= 4 {\n+                        let byte = fx.bcx.ins().load(types::I32, MemFlags::new(), from.0, offset);\n+                        fx.bcx.ins().store(MemFlags::new(), byte, addr, offset);\n+                        offset += 4;\n+                    }\n+                    while offset < size {\n+                        let byte = fx.bcx.ins().load(types::I8, MemFlags::new(), from.0, offset);\n+                        fx.bcx.ins().store(MemFlags::new(), byte, addr, offset);\n+                        offset += 1;\n                     }\n                 }\n             }\n@@ -243,16 +261,18 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n pub fn cton_sig_from_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: PolyFnSig<'tcx>, substs: &Substs<'tcx>) -> Signature {\n     let sig = tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n-    cton_sig_from_mono_fn_sig(sig)\n+    cton_sig_from_mono_fn_sig(tcx, sig)\n }\n \n pub fn cton_sig_from_instance<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, inst: Instance<'tcx>) -> Signature {\n     let fn_ty = inst.ty(tcx);\n     let sig = fn_ty.fn_sig(tcx);\n-    cton_sig_from_mono_fn_sig(sig)\n+    cton_sig_from_mono_fn_sig(tcx, sig)\n }\n \n-pub fn cton_sig_from_mono_fn_sig<'a ,'tcx: 'a>(sig: PolyFnSig<'tcx>) -> Signature {\n+pub fn cton_sig_from_mono_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: PolyFnSig<'tcx>) -> Signature {\n+    // TODO: monomorphize signature\n+\n     let sig = sig.skip_binder();\n     let inputs = sig.inputs();\n     let _output = sig.output();\n@@ -262,7 +282,7 @@ pub fn cton_sig_from_mono_fn_sig<'a ,'tcx: 'a>(sig: PolyFnSig<'tcx>) -> Signatur\n     };\n     Signature {\n         params: Some(types::I64).into_iter() // First param is place to put return val\n-            .chain(inputs.into_iter().map(|ty| cton_type_from_ty(ty).unwrap_or(types::I64)))\n+            .chain(inputs.into_iter().map(|ty| cton_type_from_ty(tcx, ty).unwrap_or(types::I64)))\n             .map(AbiParam::new).collect(),\n         returns: vec![],\n         call_conv,\n@@ -358,7 +378,7 @@ impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n     }\n \n     pub fn cton_type(&self, ty: Ty<'tcx>) -> Option<Type> {\n-        cton_type_from_ty(self.monomorphize(&ty))\n+        cton_type_from_ty(self.tcx, self.monomorphize(&ty))\n     }\n \n     pub fn get_ebb(&self, bb: BasicBlock) -> Ebb {"}, {"sha": "40ffaa5e0a0f41a449e9053ba5f9a877c5386383", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a95a6729b1c5d8b0cf6c43a35824462a330082e8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a95a6729b1c5d8b0cf6c43a35824462a330082e8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a95a6729b1c5d8b0cf6c43a35824462a330082e8", "patch": "@@ -41,14 +41,15 @@ mod prelude {\n     pub use std::any::Any;\n     pub use std::collections::HashMap;\n \n+    pub use syntax::codemap::DUMMY_SP;\n     pub use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n     pub use rustc::mir;\n     pub use rustc::mir::*;\n     pub use rustc::session::Session;\n-    pub use rustc::ty::layout::{self, LayoutOf, TyLayout};\n+    pub use rustc::ty::layout::{self, LayoutOf, TyLayout, Size};\n     pub use rustc::ty::{\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n-        TypeFoldable, TypeVariants,\n+        TypeFoldable, TypeVariants, TypeAndMut,\n     };\n     pub use rustc_data_structures::{indexed_vec::Idx, sync::Lrc};\n     pub use rustc_mir::monomorphize::{MonoItem, collector};"}]}