{"sha": "744312754dc3a3c36d2a609bb24889cb1b7994de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NDMxMjc1NGRjM2EzYzM2ZDJhNjA5YmIyNDg4OWNiMWI3OTk0ZGU=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-28T18:35:48Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-28T18:35:48Z"}, "message": "fixed and extended tests once more", "tree": {"sha": "3e854a71bc5961bb6bf0c58d3087b0ec52a5d6cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e854a71bc5961bb6bf0c58d3087b0ec52a5d6cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/744312754dc3a3c36d2a609bb24889cb1b7994de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/744312754dc3a3c36d2a609bb24889cb1b7994de", "html_url": "https://github.com/rust-lang/rust/commit/744312754dc3a3c36d2a609bb24889cb1b7994de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/744312754dc3a3c36d2a609bb24889cb1b7994de/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fd85b1a80429a5d217424b2e7f51d0082713b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd85b1a80429a5d217424b2e7f51d0082713b9d", "html_url": "https://github.com/rust-lang/rust/commit/1fd85b1a80429a5d217424b2e7f51d0082713b9d"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "abdcc02de767f6d0bfbcd6274a75562edf11c174", "filename": "src/test/compile-fail/rfc1623.rs", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/744312754dc3a3c36d2a609bb24889cb1b7994de/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744312754dc3a3c36d2a609bb24889cb1b7994de/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1623.rs?ref=744312754dc3a3c36d2a609bb24889cb1b7994de", "patch": "@@ -17,18 +17,82 @@ static NON_ELIDABLE_FN : &fn(&u8, &u8) -> &u8 =\n //~^ ERROR: missing lifetime specifier\n         &(non_elidable as fn(&u8, &u8) -> &u8);\n \n+struct SomeStruct<'x, 'y, 'z: 'x> {\n+    foo: &'x Foo<'z>,\n+    bar: &'x Bar<'z>,\n+    f: &'y for<'a, 'b: 'a> Fn(&'a Foo<'b>) -> &'a Bar<'b>,\n+}\n+\n+fn id<T>(t: T) -> T { t }\n+\n+static SOME_STRUCT : &SomeStruct = SomeStruct {\n+    foo: &Foo { bools: &[false, true] },\n+    bar: &Bar { bools: &[true, true] },\n+    f: &id,\n+};\n+\n+// very simple test for a 'static static with default lifetime\n+static STATIC_STR : &'static str = \"&'static str\";\n+const CONST_STR : &'static str = \"&'static str\";\n+\n+// this should be the same as without default:\n+static EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n+const EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n+\n+// a function that elides to an unbound lifetime for both in- and output\n+fn id_u8_slice(arg: &[u8]) -> &[u8] { arg }\n+\n+// one with a function, argument elided\n+static STATIC_SIMPLE_FN : &'static fn(&[u8]) -> &[u8] =\n+        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n+const CONST_SIMPLE_FN : &'static fn(&[u8]) -> &[u8] =\n+        &(id_u8_slice as fn(&[u8]) -> &[u8]);\n+\n+// this should be the same as without elision\n+static STATIC_NON_ELIDED_fN : &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n+        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n+const CONST_NON_ELIDED_fN : &'static for<'a> fn(&'a [u8]) -> &'a [u8] =\n+        &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n+\n+// another function that elides, each to a different unbound lifetime\n+fn multi_args(a: &u8, b: &u8, c: &u8) { }\n+\n+static STATIC_MULTI_FN : &'static fn(&u8, &u8, &u8) =\n+        &(multi_args as fn(&u8, &u8, &u8));\n+const CONST_MULTI_FN : &'static fn(&u8, &u8, &u8) =\n+        &(multi_args as fn(&u8, &u8, &u8));\n+\n+struct Foo<'a> {\n+    bools: &'a [bool]\n+}\n+\n+static STATIC_FOO : Foo<'static> = Foo { bools: &[true, false] };\n+const CONST_FOO : Foo<'static> = Foo { bools: &[true, false] };\n+\n+type Bar<'a> = Foo<'a>;\n+\n+static STATIC_BAR : Bar<'static> = Bar { bools: &[true, false] };\n+const CONST_BAR : Bar<'static> = Bar { bools: &[true, false] };\n+\n type Baz<'a> = fn(&'a [u8]) -> Option<u8>;\n \n fn baz(e: &[u8]) -> Option<u8> { e.first().map(|x| *x) }\n \n-static STATIC_BAZ : &Baz<'static> = &(baz as Baz);\n-const CONST_BAZ : &Baz<'static> = &(baz as Baz);\n+static STATIC_BAZ : &'static Baz<'static> = &(baz as Baz);\n+const CONST_BAZ : &'static Baz<'static> = &(baz as Baz);\n+\n+static BYTES : &'static [u8] = &[1, 2, 3];\n \n fn main() {\n     let x = &[1u8, 2, 3];\n     let y = x;\n \n-    //surprisingly this appears to work, so lifetime < `'static` is valid\n+    //this works, so lifetime < `'static` is valid\n     assert_eq!(Some(1), STATIC_BAZ(y));\n     assert_eq!(Some(1), CONST_BAZ(y));\n+\n+    let y = &[1u8, 2, 3];\n+    //^~ ERROR: borrowed values does not live long enough\n+    STATIC_BAZ(BYTES); // BYTES has static lifetime\n+    CONST_BAZ(y); // This forces static lifetime, which y has not\n }"}, {"sha": "0915118ca27c077513280ee32f601ce5c27936e6", "filename": "src/test/run-pass/rfc1623.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/744312754dc3a3c36d2a609bb24889cb1b7994de/src%2Ftest%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744312754dc3a3c36d2a609bb24889cb1b7994de/src%2Ftest%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1623.rs?ref=744312754dc3a3c36d2a609bb24889cb1b7994de", "patch": "@@ -68,9 +68,8 @@ fn main() {\n     STATIC_SIMPLE_FN(x);\n     CONST_SIMPLE_FN(x);\n \n-    let y = &[1u8, 2, 3];\n-    STATIC_BAZ(BYTES);\n-    //CONST_BAZ(y); // strangely enough, this fails\n+    STATIC_BAZ(BYTES); // neees static lifetime\n+    CONST_BAZ(BYTES);\n \n     // make sure this works with different lifetimes\n     let a = &1;"}]}