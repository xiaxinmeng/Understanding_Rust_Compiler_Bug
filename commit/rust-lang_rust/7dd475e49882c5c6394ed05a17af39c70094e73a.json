{"sha": "7dd475e49882c5c6394ed05a17af39c70094e73a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZDQ3NWU0OTg4MmM1YzYzOTRlZDA1YTE3YWYzOWM3MDA5NGU3M2E=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-10T05:58:26Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-22T02:47:11Z"}, "message": "Rename `clean::Span::span()` to `clean::Span::inner()`\n\nOtherwise you get a lot of instances of `item.span.span()`, which is\njust plain confusing. `item.span.inner()` conveys the correct meaning of\n\"get the type that `clean::Span` wraps\".", "tree": {"sha": "cec88947dd9b128667a9415306ff51a382b0e43e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec88947dd9b128667a9415306ff51a382b0e43e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dd475e49882c5c6394ed05a17af39c70094e73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd475e49882c5c6394ed05a17af39c70094e73a", "html_url": "https://github.com/rust-lang/rust/commit/7dd475e49882c5c6394ed05a17af39c70094e73a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dd475e49882c5c6394ed05a17af39c70094e73a/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "html_url": "https://github.com/rust-lang/rust/commit/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "bec047807462450bd02b996355eb3d888bf92ae3", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7dd475e49882c5c6394ed05a17af39c70094e73a", "patch": "@@ -1866,12 +1866,12 @@ impl Span {\n         Self(sp.source_callsite())\n     }\n \n-    crate fn dummy() -> Self {\n-        Self(rustc_span::DUMMY_SP)\n+    crate fn inner(&self) -> rustc_span::Span {\n+        self.0\n     }\n \n-    crate fn span(&self) -> rustc_span::Span {\n-        self.0\n+    crate fn dummy() -> Self {\n+        Self(rustc_span::DUMMY_SP)\n     }\n \n     crate fn is_dummy(&self) -> bool {"}, {"sha": "c3c4c4952b3b48b34dbfde6eaa9ade9d96b2995b", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7dd475e49882c5c6394ed05a17af39c70094e73a", "patch": "@@ -937,7 +937,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             Some(\"macro\"),\n             None,\n             None,\n-            it.span.span().edition(),\n+            it.span.inner().edition(),\n         );\n     });\n     document(w, cx, it, None)"}, {"sha": "f98f524ca4072547e84ee19a12212c9340ce0dac", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=7dd475e49882c5c6394ed05a17af39c70094e73a", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs).unwrap_or(item.span.span()),\n+                    super::span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n \n@@ -110,7 +110,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         if let Some(dox) = &item.attrs.collapsed_doc_value() {\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.span());\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.inner());\n             let extra = crate::html::markdown::ExtraInfo::new_did(self.cx.tcx, item.def_id, sp);\n             for code_block in markdown::rust_code_blocks(&dox, &extra) {\n                 self.check_rust_syntax(&item, &dox, code_block);"}, {"sha": "499931f7e963197989e58a21d5e100cee10b296f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=7dd475e49882c5c6394ed05a17af39c70094e73a", "patch": "@@ -1226,7 +1226,7 @@ impl LinkCollector<'_, '_> {\n                             &ori_link.range,\n                             &item.attrs,\n                         )\n-                        .unwrap_or_else(|| span_of_attrs(&item.attrs).unwrap_or(item.span.span()));\n+                        .unwrap_or_else(|| span_of_attrs(&item.attrs).unwrap_or(item.span.inner()));\n \n                         rustc_session::parse::feature_err(\n                             &self.cx.tcx.sess.parse_sess,\n@@ -1691,7 +1691,7 @@ fn report_diagnostic(\n     };\n \n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs).unwrap_or(item.span.span());\n+    let sp = span_of_attrs(attrs).unwrap_or(item.span.inner());\n \n     tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);"}, {"sha": "b36358489900ed6f2a3b9de2d9189f8cc4e2bd3f", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=7dd475e49882c5c6394ed05a17af39c70094e73a", "patch": "@@ -97,7 +97,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     if tests.found_tests == 0 && cx.tcx.sess.is_nightly_build() {\n         if should_have_doc_example(cx, &item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.span());\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.inner());\n             cx.tcx.struct_span_lint_hir(\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n@@ -109,7 +109,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n         cx.tcx.struct_span_lint_hir(\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs).unwrap_or(item.span.span()),\n+            span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n             |lint| lint.build(\"documentation test in private item\").emit(),\n         );\n     }"}, {"sha": "881feb0d87a47304defe03598a15a48612f98e8d", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=7dd475e49882c5c6394ed05a17af39c70094e73a", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n                 let sp = match super::source_span_for_markdown_range(tcx, &dox, range, &item.attrs)\n                 {\n                     Some(sp) => sp,\n-                    None => span_of_attrs(&item.attrs).unwrap_or(item.span.span()),\n+                    None => span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n                 };\n                 tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n                     lint.build(msg).emit()"}, {"sha": "9761a78577deab9191ebc58f817c465bd714a2fc", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd475e49882c5c6394ed05a17af39c70094e73a/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=7dd475e49882c5c6394ed05a17af39c70094e73a", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n             let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n                 let sp = super::source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n                     .or_else(|| span_of_attrs(&item.attrs))\n-                    .unwrap_or(item.span.span());\n+                    .unwrap_or(item.span.inner());\n                 cx.tcx.struct_span_lint_hir(crate::lint::NON_AUTOLINKS, hir_id, sp, |lint| {\n                     lint.build(msg)\n                         .span_suggestion("}]}