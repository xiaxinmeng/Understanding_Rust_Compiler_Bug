{"sha": "8b4075ff1c1dcc8e2501c3716ce637c886fc79d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNDA3NWZmMWMxZGNjOGUyNTAxYzM3MTZjZTYzN2M4ODZmYzc5ZDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-16T07:41:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T07:41:58Z"}, "message": "Merge #8040\n\n8040: 7709: Added the check for return type of len function. r=Veykril a=chetankhilosiya\n\n\n\nCo-authored-by: Chetan Khilosiya <chetan.khilosiya@gmail.com>", "tree": {"sha": "61b194cfdb180c85ee7a9a45a27d5abf32109ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b194cfdb180c85ee7a9a45a27d5abf32109ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUGFGCRBK7hj4Ov3rIwAAdHIIACC3SvUMrFhFlKKbjt8no48T\nf6UfZSU/tZ6I9dqZ/UG2OeZ5xE+0C+GFM6FSuo5D5hOGDBBccDTFnOf+ZZeS1t1m\n4An5XieovbE2n3cph59BPAgcPxDt612x3si5MF/LFqnW13/CFECDthW3YF5T0F+G\nvFe2ScGy+8L/OjQRli3sr1D8++RNsVzH08u+v05S0dy4WbcE4maJzslvNNPP+ez7\neJrX5tinOkzhigDLRBcSWAOnOQhUQT18FU8+eJo99PRctanWeHXCm3R7oAuq2/io\nwFCsJB0/v0jSqYXg2jKf4yIQKUdxN6JbgJmE7vLM/v6W5F4qZd2yXGVe4gSL39c=\n=CgeS\n-----END PGP SIGNATURE-----\n", "payload": "tree 61b194cfdb180c85ee7a9a45a27d5abf32109ea7\nparent 152f385055510c65bd94238878be23a258f5cc19\nparent 847ec9e84049fb51b0d8d9b3e7b167764fb93d9d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615880518 +0000\ncommitter GitHub <noreply@github.com> 1615880518 +0000\n\nMerge #8040\n\n8040: 7709: Added the check for return type of len function. r=Veykril a=chetankhilosiya\n\n\n\nCo-authored-by: Chetan Khilosiya <chetan.khilosiya@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9", "html_url": "https://github.com/rust-lang/rust/commit/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "152f385055510c65bd94238878be23a258f5cc19", "url": "https://api.github.com/repos/rust-lang/rust/commits/152f385055510c65bd94238878be23a258f5cc19", "html_url": "https://github.com/rust-lang/rust/commit/152f385055510c65bd94238878be23a258f5cc19"}, {"sha": "847ec9e84049fb51b0d8d9b3e7b167764fb93d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/847ec9e84049fb51b0d8d9b3e7b167764fb93d9d", "html_url": "https://github.com/rust-lang/rust/commit/847ec9e84049fb51b0d8d9b3e7b167764fb93d9d"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "52939e990f97e5f2aab2e58a6a7adf2a91c454d2", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8b4075ff1c1dcc8e2501c3716ce637c886fc79d9", "patch": "@@ -52,6 +52,7 @@ use hir_ty::{\n     autoderef,\n     display::{write_bounds_like_dyn_trait_with_prefix, HirDisplayError, HirFormatter},\n     method_resolution::{self, TyFingerprint},\n+    primitive::UintTy,\n     to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n@@ -1631,6 +1632,10 @@ impl Type {\n         matches!(self.ty.value.interned(&Interner), TyKind::Ref(hir_ty::Mutability::Mut, ..))\n     }\n \n+    pub fn is_usize(&self) -> bool {\n+        matches!(self.ty.value.interned(&Interner), TyKind::Scalar(Scalar::Uint(UintTy::Usize)))\n+    }\n+\n     pub fn remove_ref(&self) -> Option<Type> {\n         match &self.ty.value.interned(&Interner) {\n             TyKind::Ref(.., ty) => Some(self.derived(ty.clone())),"}, {"sha": "b8834d283d7e321efd74eccf56eb8ca5247adfa3", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4075ff1c1dcc8e2501c3716ce637c886fc79d9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=8b4075ff1c1dcc8e2501c3716ce637c886fc79d9", "patch": "@@ -1,7 +1,7 @@\n use hir::{known, HasSource, Name};\n use syntax::{\n     ast::{self, NameOwner},\n-    AstNode, TextRange,\n+    AstNode,\n };\n \n use crate::{\n@@ -51,12 +51,19 @@ pub(crate) fn generate_is_empty_from_len(acc: &mut Assists, ctx: &AssistContext)\n     }\n \n     let impl_ = fn_node.syntax().ancestors().find_map(ast::Impl::cast)?;\n+    let len_fn = get_impl_method(ctx, &impl_, &known::len)?;\n+    if !len_fn.ret_type(ctx.sema.db).is_usize() {\n+        cov_mark::hit!(len_fn_different_return_type);\n+        return None;\n+    }\n+\n     if get_impl_method(ctx, &impl_, &known::is_empty).is_some() {\n         cov_mark::hit!(is_empty_already_implemented);\n         return None;\n     }\n \n-    let range = get_text_range_of_len_function(ctx, &impl_)?;\n+    let node = len_fn.source(ctx.sema.db)?;\n+    let range = node.syntax().value.text_range();\n \n     acc.add(\n         AssistId(\"generate_is_empty_from_len\", AssistKind::Generate),\n@@ -89,13 +96,6 @@ fn get_impl_method(\n     ty.iterate_method_candidates(db, krate, &traits_in_scope, Some(fn_name), |_, func| Some(func))\n }\n \n-fn get_text_range_of_len_function(ctx: &AssistContext, impl_: &ast::Impl) -> Option<TextRange> {\n-    let db = ctx.sema.db;\n-    let func = get_impl_method(ctx, impl_, &known::len)?;\n-    let node = func.source(db)?;\n-    Some(node.syntax().value.text_range())\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -157,6 +157,23 @@ impl MyStruct {\n         );\n     }\n \n+    #[test]\n+    fn len_fn_different_return_type() {\n+        cov_mark::check!(len_fn_different_return_type);\n+        check_assist_not_applicable(\n+            generate_is_empty_from_len,\n+            r#\"\n+struct MyStruct { data: Vec<String> }\n+\n+impl MyStruct {\n+    p$0ub fn len(&self) -> u32 {\n+        self.data.len()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn generate_is_empty() {\n         check_assist("}]}