{"sha": "cce913278041031bce87563fa985b0718f8ad939", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZTkxMzI3ODA0MTAzMWJjZTg3NTYzZmE5ODViMDcxOGY4YWQ5Mzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-18T21:18:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-18T21:18:04Z"}, "message": "track the root `UseTree` in addition to the leaf", "tree": {"sha": "b9a4d709bd513a0a1f93146ca4afc350150c64f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a4d709bd513a0a1f93146ca4afc350150c64f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cce913278041031bce87563fa985b0718f8ad939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cce913278041031bce87563fa985b0718f8ad939", "html_url": "https://github.com/rust-lang/rust/commit/cce913278041031bce87563fa985b0718f8ad939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cce913278041031bce87563fa985b0718f8ad939/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a722296b6ec17fecd3f16a7d3f9232b83e5de800", "url": "https://api.github.com/repos/rust-lang/rust/commits/a722296b6ec17fecd3f16a7d3f9232b83e5de800", "html_url": "https://github.com/rust-lang/rust/commit/a722296b6ec17fecd3f16a7d3f9232b83e5de800"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "2683a9982ac04d71f1f43dd7b22b92e89d7ced07", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cce913278041031bce87563fa985b0718f8ad939/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce913278041031bce87563fa985b0718f8ad939/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=cce913278041031bce87563fa985b0718f8ad939", "patch": "@@ -100,6 +100,8 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn build_reduced_graph_for_use_tree(&mut self,\n+                                        root_use_tree: &ast::UseTree,\n+                                        root_id: NodeId,\n                                         use_tree: &ast::UseTree,\n                                         id: NodeId,\n                                         vis: ty::Visibility,\n@@ -182,7 +184,14 @@ impl<'a> Resolver<'a> {\n                     type_ns_only,\n                 };\n                 self.add_import_directive(\n-                    module_path, subclass, use_tree.span, id, vis, expansion,\n+                    module_path,\n+                    subclass,\n+                    use_tree.span,\n+                    id,\n+                    root_use_tree.span,\n+                    root_id,\n+                    vis,\n+                    expansion,\n                 );\n             }\n             ast::UseTreeKind::Glob => {\n@@ -191,7 +200,14 @@ impl<'a> Resolver<'a> {\n                     max_vis: Cell::new(ty::Visibility::Invisible),\n                 };\n                 self.add_import_directive(\n-                    module_path, subclass, use_tree.span, id, vis, expansion,\n+                    module_path,\n+                    subclass,\n+                    use_tree.span,\n+                    id,\n+                    root_use_tree.span,\n+                    root_id,\n+                    vis,\n+                    expansion,\n                 );\n             }\n             ast::UseTreeKind::Nested(ref items) => {\n@@ -226,7 +242,7 @@ impl<'a> Resolver<'a> {\n \n                 for &(ref tree, id) in items {\n                     self.build_reduced_graph_for_use_tree(\n-                        tree, id, vis, &prefix, true, item, expansion\n+                        root_use_tree, root_id, tree, id, vis, &prefix, true, item, expansion\n                     );\n                 }\n             }\n@@ -249,7 +265,7 @@ impl<'a> Resolver<'a> {\n                 };\n \n                 self.build_reduced_graph_for_use_tree(\n-                    use_tree, item.id, vis, &prefix, false, item, expansion,\n+                    use_tree, item.id, use_tree, item.id, vis, &prefix, false, item, expansion,\n                 );\n             }\n \n@@ -266,10 +282,12 @@ impl<'a> Resolver<'a> {\n                 let binding =\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n+                    root_id: item.id,\n                     id: item.id,\n                     parent,\n                     imported_module: Cell::new(Some(module)),\n                     subclass: ImportDirectiveSubclass::ExternCrate(orig_name),\n+                    root_span: item.span,\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),\n@@ -640,10 +658,12 @@ impl<'a> Resolver<'a> {\n \n         let (graph_root, arenas) = (self.graph_root, self.arenas);\n         let macro_use_directive = |span| arenas.alloc_import_directive(ImportDirective {\n+            root_id: item.id,\n             id: item.id,\n             parent: graph_root,\n             imported_module: Cell::new(Some(module)),\n             subclass: ImportDirectiveSubclass::MacroUse,\n+            root_span: span,\n             span,\n             module_path: Vec::new(),\n             vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),"}, {"sha": "fd657cbf805f66552e03c4ccbbd91bf41a1873c3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cce913278041031bce87563fa985b0718f8ad939/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce913278041031bce87563fa985b0718f8ad939/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=cce913278041031bce87563fa985b0718f8ad939", "patch": "@@ -55,12 +55,36 @@ pub enum ImportDirectiveSubclass<'a> {\n /// One import directive.\n #[derive(Debug,Clone)]\n pub struct ImportDirective<'a> {\n+    /// The id of the `extern crate`, `UseTree` etc that imported this `ImportDirective`.\n+    ///\n+    /// In the case where the `ImportDirective` was expanded from a \"nested\" use tree,\n+    /// this id is the id of the leaf tree. For example:\n+    ///\n+    /// ```rust,ignore\n+    /// use foo::bar::{a, b}\n+    /// ```\n+    ///\n+    /// If this is the import directive for `foo::bar::a`, we would have the id of the `UseTree`\n+    /// for `a` in this field.\n     pub id: NodeId,\n+\n+    /// The `id` of the \"root\" use-kind -- this is always the same as\n+    /// `id` except in the case of \"nested\" use trees, in which case\n+    /// it will be the `id` of the root use tree. e.g., in the example\n+    /// from `id`, this would be the id of the `use foo::bar`\n+    /// `UseTree` node.\n+    pub root_id: NodeId,\n+\n+    /// Span of this use tree.\n+    pub span: Span,\n+\n+    /// Span of the *root* use tree (see `root_id`).\n+    pub root_span: Span,\n+\n     pub parent: Module<'a>,\n     pub module_path: Vec<Ident>,\n     pub imported_module: Cell<Option<Module<'a>>>, // the resolution of `module_path`\n     pub subclass: ImportDirectiveSubclass<'a>,\n-    pub span: Span,\n     pub vis: Cell<ty::Visibility>,\n     pub expansion: Mark,\n     pub used: Cell<bool>,\n@@ -296,6 +320,8 @@ impl<'a> Resolver<'a> {\n                                 subclass: ImportDirectiveSubclass<'a>,\n                                 span: Span,\n                                 id: NodeId,\n+                                root_span: Span,\n+                                root_id: NodeId,\n                                 vis: ty::Visibility,\n                                 expansion: Mark) {\n         let current_module = self.current_module;\n@@ -306,6 +332,8 @@ impl<'a> Resolver<'a> {\n             subclass,\n             span,\n             id,\n+            root_span,\n+            root_id,\n             vis: Cell::new(vis),\n             expansion,\n             used: Cell::new(false),"}]}