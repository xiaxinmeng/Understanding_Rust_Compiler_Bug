{"sha": "704bbe5210613c40fb997adba2375e54ea29b205", "node_id": "C_kwDOAAsO6NoAKDcwNGJiZTUyMTA2MTNjNDBmYjk5N2FkYmEyMzc1ZTU0ZWEyOWIyMDU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T09:26:09Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T09:26:09Z"}, "message": "Move an extension trait method onto the type directly and reuse it", "tree": {"sha": "667035f3d2d3a99e2f6cd670ef9a2c63186c784b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/667035f3d2d3a99e2f6cd670ef9a2c63186c784b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/704bbe5210613c40fb997adba2375e54ea29b205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/704bbe5210613c40fb997adba2375e54ea29b205", "html_url": "https://github.com/rust-lang/rust/commit/704bbe5210613c40fb997adba2375e54ea29b205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/704bbe5210613c40fb997adba2375e54ea29b205/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57", "html_url": "https://github.com/rust-lang/rust/commit/7e2e3d4ebe9ed4cac5dbf92221bd1d3731b60e57"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "f34a5395cfe7c32166fcff6a9eabba80c24f4b6f", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=704bbe5210613c40fb997adba2375e54ea29b205", "patch": "@@ -69,14 +69,21 @@ impl<'tcx> PredicateObligation<'tcx> {\n     }\n }\n \n-impl TraitObligation<'_> {\n+impl<'tcx> TraitObligation<'tcx> {\n     /// Returns `true` if the trait predicate is considered `const` in its ParamEnv.\n     pub fn is_const(&self) -> bool {\n         match (self.predicate.skip_binder().constness, self.param_env.constness()) {\n             (ty::BoundConstness::ConstIfConst, hir::Constness::Const) => true,\n             _ => false,\n         }\n     }\n+\n+    pub fn derived_cause(\n+        &self,\n+        variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,\n+    ) -> ObligationCause<'tcx> {\n+        self.cause.clone().derived_cause(self.predicate, variant)\n+    }\n }\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "550f5a086e9440839f0161e6ce1074ded9ecc5de", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=704bbe5210613c40fb997adba2375e54ea29b205", "patch": "@@ -179,6 +179,30 @@ impl<'tcx> ObligationCause<'tcx> {\n             None => Lrc::new(MISC_OBLIGATION_CAUSE_CODE),\n         }));\n     }\n+\n+    pub fn derived_cause(\n+        mut self,\n+        parent_trait_pred: ty::PolyTraitPredicate<'tcx>,\n+        variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,\n+    ) -> ObligationCause<'tcx> {\n+        /*!\n+         * Creates a cause for obligations that are derived from\n+         * `obligation` by a recursive search (e.g., for a builtin\n+         * bound, or eventually a `auto trait Foo`). If `obligation`\n+         * is itself a derived obligation, this is just a clone, but\n+         * otherwise we create a \"derived obligation\" cause so as to\n+         * keep track of the original root obligation for error\n+         * reporting.\n+         */\n+\n+        // NOTE(flaper87): As of now, it keeps track of the whole error\n+        // chain. Ideally, we should have a way to configure this either\n+        // by using -Z verbose or just a CLI argument.\n+        self.map_code(|parent_code| {\n+            variant(DerivedObligationCause { parent_trait_pred, parent_code }).into()\n+        });\n+        self\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]"}, {"sha": "613ac8a760effc3f7c1194cf4426ba5b0cd3e4b4", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=704bbe5210613c40fb997adba2375e54ea29b205", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n-use crate::traits::select::TraitObligationExt;\n use crate::traits::util::{self, closure_trait_ref_and_return_type, predicate_for_trait_def};\n use crate::traits::{\n     BuiltinDerivedObligation, DerivedObligationCause, ImplDerivedObligation,"}, {"sha": "0790e5d56d5f150163effe324c9f11c43e987d72", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=704bbe5210613c40fb997adba2375e54ea29b205", "patch": "@@ -2342,42 +2342,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n }\n \n-trait TraitObligationExt<'tcx> {\n-    fn derived_cause(\n-        &self,\n-        variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,\n-    ) -> ObligationCause<'tcx>;\n-}\n-\n-impl<'tcx> TraitObligationExt<'tcx> for TraitObligation<'tcx> {\n-    fn derived_cause(\n-        &self,\n-        variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,\n-    ) -> ObligationCause<'tcx> {\n-        /*!\n-         * Creates a cause for obligations that are derived from\n-         * `obligation` by a recursive search (e.g., for a builtin\n-         * bound, or eventually a `auto trait Foo`). If `obligation`\n-         * is itself a derived obligation, this is just a clone, but\n-         * otherwise we create a \"derived obligation\" cause so as to\n-         * keep track of the original root obligation for error\n-         * reporting.\n-         */\n-\n-        let obligation = self;\n-\n-        // NOTE(flaper87): As of now, it keeps track of the whole error\n-        // chain. Ideally, we should have a way to configure this either\n-        // by using -Z verbose or just a CLI argument.\n-        let derived_cause = DerivedObligationCause {\n-            parent_trait_pred: obligation.predicate,\n-            parent_code: obligation.cause.clone_code(),\n-        };\n-        let derived_code = variant(derived_cause);\n-        ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)\n-    }\n-}\n-\n impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {\n     fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {\n         TraitObligationStackList::with(self)"}, {"sha": "18afc6dbcd8056a9bd28f7047ea9e2cd59be775f", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704bbe5210613c40fb997adba2375e54ea29b205/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=704bbe5210613c40fb997adba2375e54ea29b205", "patch": "@@ -301,14 +301,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n         let extend = |traits::PredicateObligation { predicate, mut cause, .. }| {\n             if let Some(parent_trait_pred) = predicate.to_opt_poly_trait_pred() {\n-                cause.map_code(|parent_code| {\n-                    {\n-                        traits::ObligationCauseCode::DerivedObligation(\n-                            traits::DerivedObligationCause { parent_trait_pred, parent_code },\n-                        )\n-                    }\n-                    .into()\n-                });\n+                cause = cause.derived_cause(\n+                    parent_trait_pred,\n+                    traits::ObligationCauseCode::DerivedObligation,\n+                );\n             }\n             extend_cause_with_original_assoc_item_obligation(\n                 tcx, trait_ref, item, &mut cause, predicate,"}]}