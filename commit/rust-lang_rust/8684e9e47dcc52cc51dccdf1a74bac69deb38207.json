{"sha": "8684e9e47dcc52cc51dccdf1a74bac69deb38207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ODRlOWU0N2RjYzUyY2M1MWRjY2RmMWE3NGJhYzY5ZGViMzgyMDc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-18T15:53:39Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-13T20:14:57Z"}, "message": "Merge {get,ensure}_query.", "tree": {"sha": "ace136c8011bc85613ea4b91fec40c4c1412ad18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ace136c8011bc85613ea4b91fec40c4c1412ad18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8684e9e47dcc52cc51dccdf1a74bac69deb38207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8684e9e47dcc52cc51dccdf1a74bac69deb38207", "html_url": "https://github.com/rust-lang/rust/commit/8684e9e47dcc52cc51dccdf1a74bac69deb38207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8684e9e47dcc52cc51dccdf1a74bac69deb38207/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e0241c63755ea28045d512b742f50b307874419", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0241c63755ea28045d512b742f50b307874419", "html_url": "https://github.com/rust-lang/rust/commit/7e0241c63755ea28045d512b742f50b307874419"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "f6370452e80b2056d8351e37f88aaf8f8b046f13", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8684e9e47dcc52cc51dccdf1a74bac69deb38207/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8684e9e47dcc52cc51dccdf1a74bac69deb38207/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=8684e9e47dcc52cc51dccdf1a74bac69deb38207", "patch": "@@ -401,7 +401,7 @@ macro_rules! define_queries {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n-                ensure_query::<queries::$name<'_>, _>(self.tcx, key.into_query_param())\n+                get_query::<queries::$name<'_>, _>(self.tcx, DUMMY_SP, key.into_query_param(), QueryMode::Ensure);\n             })*\n         }\n \n@@ -484,7 +484,7 @@ macro_rules! define_queries {\n             pub fn $name(self, key: query_helper_param_ty!($($K)*))\n                 -> <queries::$name<$tcx> as QueryConfig>::Stored\n             {\n-                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key.into_query_param())\n+                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key.into_query_param(), QueryMode::Get).unwrap()\n             })*\n         }\n "}, {"sha": "f2ebf8d7d3d088d2eb7b5057f5c98a7de544fcbc", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8684e9e47dcc52cc51dccdf1a74bac69deb38207/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8684e9e47dcc52cc51dccdf1a74bac69deb38207/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=8684e9e47dcc52cc51dccdf1a74bac69deb38207", "patch": "@@ -17,7 +17,6 @@ use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::{Lock, LockGuard};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Diagnostic, FatalError};\n-use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n@@ -641,31 +640,26 @@ where\n \n /// Ensure that either this query has all green inputs or been executed.\n /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.\n+/// Returns true if the query should still run.\n ///\n /// This function is particularly useful when executing passes for their\n /// side-effects -- e.g., in order to report errors for erroneous programs.\n ///\n /// Note: The optimization is only available during incr. comp.\n #[inline(never)]\n-fn ensure_query_impl<CTX, C>(\n-    tcx: CTX,\n-    state: &QueryState<CTX::DepKind, CTX::Query, C>,\n-    key: C::Key,\n-    query: &QueryVtable<CTX, C::Key, C::Value>,\n-) where\n-    C: QueryCache,\n-    C::Key: crate::dep_graph::DepNodeParams<CTX>,\n+fn ensure_must_run<CTX, K, V>(tcx: CTX, key: &K, query: &QueryVtable<CTX, K, V>) -> bool\n+where\n+    K: crate::dep_graph::DepNodeParams<CTX>,\n     CTX: QueryContext,\n {\n     if query.eval_always {\n-        let _ = get_query_impl(tcx, state, DUMMY_SP, key, query);\n-        return;\n+        return true;\n     }\n \n     // Ensuring an anonymous query makes no sense\n     assert!(!query.anon);\n \n-    let dep_node = query.to_dep_node(tcx, &key);\n+    let dep_node = query.to_dep_node(tcx, key);\n \n     match tcx.dep_graph().try_mark_green_and_read(tcx, &dep_node) {\n         None => {\n@@ -675,10 +669,11 @@ fn ensure_query_impl<CTX, C>(\n             // DepNodeIndex. We must invoke the query itself. The performance cost\n             // this introduces should be negligible as we'll immediately hit the\n             // in-memory cache, or another query down the line will.\n-            let _ = get_query_impl(tcx, state, DUMMY_SP, key, query);\n+            true\n         }\n         Some((_, dep_node_index)) => {\n             tcx.profiler().query_cache_hit(dep_node_index.into());\n+            false\n         }\n     }\n }\n@@ -720,24 +715,27 @@ fn force_query_impl<CTX, C>(\n     );\n }\n \n-pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key) -> Q::Stored\n-where\n-    Q: QueryDescription<CTX>,\n-    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n-    CTX: QueryContext,\n-{\n-    debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n-\n-    get_query_impl(tcx, Q::query_state(tcx), span, key, &Q::VTABLE)\n+pub enum QueryMode {\n+    Get,\n+    Ensure,\n }\n \n-pub fn ensure_query<Q, CTX>(tcx: CTX, key: Q::Key)\n+pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key, mode: QueryMode) -> Option<Q::Stored>\n where\n     Q: QueryDescription<CTX>,\n     Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n     CTX: QueryContext,\n {\n-    ensure_query_impl(tcx, Q::query_state(tcx), key, &Q::VTABLE)\n+    let query = &Q::VTABLE;\n+    if let QueryMode::Ensure = mode {\n+        if !ensure_must_run(tcx, &key, query) {\n+            return None;\n+        }\n+    }\n+\n+    debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n+    let value = get_query_impl(tcx, Q::query_state(tcx), span, key, query);\n+    Some(value)\n }\n \n pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, span: Span, dep_node: DepNode<CTX::DepKind>)"}]}