{"sha": "850dff486eb2605ad6e3c9434e3a66869dbdb943", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MGRmZjQ4NmViMjYwNWFkNmUzYzk0MzRlM2E2Njg2OWRiZGI5NDM=", "commit": {"author": {"name": "Kelly Wilson", "email": "wilsonk@cpsc.ucalgary.ca", "date": "2011-05-05T20:08:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-05T23:40:57Z"}, "message": "Add quick sort function to the std lib.", "tree": {"sha": "4bb75a1f7919ecbab00ea7d9e77f739ce50479d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bb75a1f7919ecbab00ea7d9e77f739ce50479d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850dff486eb2605ad6e3c9434e3a66869dbdb943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850dff486eb2605ad6e3c9434e3a66869dbdb943", "html_url": "https://github.com/rust-lang/rust/commit/850dff486eb2605ad6e3c9434e3a66869dbdb943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850dff486eb2605ad6e3c9434e3a66869dbdb943/comments", "author": {"login": "wilsonk", "id": 38802, "node_id": "MDQ6VXNlcjM4ODAy", "avatar_url": "https://avatars.githubusercontent.com/u/38802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilsonk", "html_url": "https://github.com/wilsonk", "followers_url": "https://api.github.com/users/wilsonk/followers", "following_url": "https://api.github.com/users/wilsonk/following{/other_user}", "gists_url": "https://api.github.com/users/wilsonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilsonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilsonk/subscriptions", "organizations_url": "https://api.github.com/users/wilsonk/orgs", "repos_url": "https://api.github.com/users/wilsonk/repos", "events_url": "https://api.github.com/users/wilsonk/events{/privacy}", "received_events_url": "https://api.github.com/users/wilsonk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4445d6771d68d17e14e491475c74492b7d2e1205", "url": "https://api.github.com/repos/rust-lang/rust/commits/4445d6771d68d17e14e491475c74492b7d2e1205", "html_url": "https://github.com/rust-lang/rust/commit/4445d6771d68d17e14e491475c74492b7d2e1205"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "0c518ae8823df40f0b4d13e703a6d0ba3dac812b", "filename": "src/lib/sort.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/850dff486eb2605ad6e3c9434e3a66869dbdb943/src%2Flib%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850dff486eb2605ad6e3c9434e3a66869dbdb943/src%2Flib%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsort.rs?ref=850dff486eb2605ad6e3c9434e3a66869dbdb943", "patch": "@@ -39,6 +39,58 @@ fn merge_sort[T](lteq[T] le, vec[T] v) -> vec[T] {\n                  merge_sort[T](le, b));\n }\n \n+fn swap[T](vec[mutable T] arr, uint x, uint y) {\n+    auto a = arr.(x);\n+    arr.(x) = arr.(y);\n+    arr.(y) = a;\n+}\n+\n+fn part[T](lteq[mutable T] compare_func, vec[mutable T] arr, uint left,\n+        uint right, uint pivot) -> uint {\n+\n+    fn compare[T](lteq[mutable T] compare_func, vec[mutable T]arr,\n+           uint arr_idx, &T arr_value) -> bool {\n+\n+        ret compare_func(arr.(arr_idx),arr_value);\n+    }\n+\n+    auto pivot_value = arr.(pivot);\n+    swap[T](arr, pivot, right);\n+    let uint storage_index = left;\n+    let uint i = left;\n+    while (i<right) {\n+        if (compare[T](compare_func, arr, i, pivot_value)) {\n+           swap[T](arr, i, storage_index);\n+           storage_index += 1u;\n+        }\n+        i += 1u;\n+    }\n+    swap[T](arr, storage_index, right);\n+    ret storage_index;\n+}\n+\n+fn qsort[T](lteq[mutable T] compare_func, vec[mutable T] arr, uint left,\n+        uint right) {\n+\n+    if (right > left) {\n+        auto pivot = (left+right)/2u;\n+        auto new_pivot = part[T](compare_func, arr, left, right, pivot);\n+        if (new_pivot == 0u) {\n+             ret;\n+        }\n+        qsort[T](compare_func, arr, left, new_pivot - 1u);\n+        qsort[T](compare_func, arr, new_pivot + 1u, right);\n+    }\n+}\n+\n+fn quick_sort[T](lteq[mutable T] compare_func, vec[mutable T] arr) {\n+\n+    if (len[mutable T](arr) == 0u) {\n+        ret;\n+    }\n+    qsort[T](compare_func, arr, 0u, (len[mutable T](arr)) - 1u);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "f7f0f99782c25523c438e64ca97ee5c5df1cd3cc", "filename": "src/test/run-pass/lib-qsort.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/850dff486eb2605ad6e3c9434e3a66869dbdb943/src%2Ftest%2Frun-pass%2Flib-qsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850dff486eb2605ad6e3c9434e3a66869dbdb943/src%2Ftest%2Frun-pass%2Flib-qsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-qsort.rs?ref=850dff486eb2605ad6e3c9434e3a66869dbdb943", "patch": "@@ -0,0 +1,62 @@\n+use std;\n+\n+fn check_sort(vec[mutable int] v1, vec[mutable int] v2) {\n+  auto len = std._vec.len[int](v1);\n+\n+  fn ltequal(&int a, &int b) -> bool {\n+    ret a <= b;\n+  }\n+  auto f = ltequal;\n+  std.sort.quick_sort[int](f, v1);\n+  auto i = 0u;\n+  while (i < len) {\n+    log v2.(i);\n+    assert (v2.(i) == v1.(i));\n+    i += 1u;\n+  }\n+}\n+\n+\n+fn main() {\n+  {\n+    auto v1 = vec(mutable 3,7,4,5,2,9,5,8);\n+    auto v2 = vec(mutable 2,3,4,5,5,7,8,9);\n+    check_sort(v1, v2);\n+  }\n+\n+  {\n+    auto v1 = vec(mutable 1,1,1);\n+    auto v2 = vec(mutable 1,1,1);\n+    check_sort(v1, v2);\n+  }\n+\n+  {\n+    let vec[mutable int] v1 = vec(mutable);\n+    let vec[mutable int] v2 = vec(mutable);\n+    check_sort(v1, v2);\n+  }\n+\n+  {\n+    auto v1 = vec(mutable 9);\n+    auto v2 = vec(mutable 9);\n+    check_sort(v1, v2);\n+  }\n+\n+  {\n+    auto v1 = vec(mutable 9,3,3,3,9);\n+    auto v2 = vec(mutable 3,3,3,9,9);\n+    check_sort(v1, v2);\n+  }\n+\n+}\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+\n+"}]}